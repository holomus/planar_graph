set define off
create or replace package Hac_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_Person_Code   varchar2,
    i_External_Code varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Save(i_Server Hac_Pref.Dss_Server_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Company_Server_Update
  (
    i_Company_Id        number,
    i_Department_Code   Option_Varchar2 := null,
    i_Person_Group_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Save(i_Device Hac_Pref.Dss_Device_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Device_Ip         Option_Varchar2 := null,
    i_Ready             Option_Varchar2 := null,
    i_Status            Option_Varchar2 := null,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Access_Group_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Save(i_Server Hac_Pref.Hik_Server_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Company_Server_Update
  (
    i_Company_Id        number,
    i_Organization_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Save(i_Device Hac_Pref.Hik_Device_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Door_Code         Option_Varchar2 := null,
    i_Access_Level_Code Option_Varchar2 := null
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Hik_Device_Sync
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Force_Sync_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
end Hac_Api;
/
create or replace package body Hac_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_Person_Code   varchar2,
    i_External_Code varchar2 := null
  ) is
    r_Person     Mr_Natural_Persons%rowtype := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id,
                                                                         i_Person_Id  => i_Person_Id);
    r_Htt_Person Htt_Persons%rowtype := z_Htt_Persons.Take(i_Company_Id => i_Company_Id,
                                                           i_Person_Id  => i_Person_Id);
  begin
    z_Hac_Server_Persons.Save_One(i_Server_Id     => i_Server_Id,
                                  i_Company_Id    => i_Company_Id,
                                  i_Person_Id     => i_Person_Id,
                                  i_Person_Code   => i_Person_Code,
                                  i_First_Name    => r_Person.First_Name,
                                  i_Last_Name     => r_Person.Last_Name,
                                  i_Photo_Sha     => Hac_Util.Take_Main_Photo(i_Company_Id => i_Company_Id,
                                                                              i_Person_Id  => i_Person_Id),
                                  i_Rfid_Code     => r_Htt_Person.Rfid_Code,
                                  i_External_Code => i_External_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Hac_Core.Device_Attach(i_Company_Id  => i_Company_Id,
                           i_Device_Id   => i_Device_Id,
                           i_Attach_Kind => Hac_Pref.c_Device_Attach_Secondary);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
    r_Device Hac_Company_Devices%rowtype;
  begin
    r_Device := z_Hac_Company_Devices.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Device_Id  => i_Device_Id);
  
    if r_Device.Attach_Kind = Hac_Pref.c_Device_Attach_Primary then
      Hac_Error.Raise_003;
    end if;
  
    Hac_Core.Device_Detach(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Save(i_Server Hac_Pref.Dss_Server_Rt) is
  begin
    Hac_Core.Acms_Server_Save(i_Server.Acms);
  
    z_Hac_Dss_Servers.Save_One(i_Server_Id => i_Server.Acms.Server_Id,
                               i_Username  => i_Server.Username,
                               i_Password  => i_Server.Password);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Delete(i_Server_Id number) is
  begin
    Hac_Core.Acms_Server_Delete(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
  begin
    z_Hac_Dss_Company_Servers.Insert_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Detach(i_Company_Id number) is
  begin
    z_Hac_Dss_Company_Servers.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Company_Server_Update
  (
    i_Company_Id        number,
    i_Department_Code   Option_Varchar2 := null,
    i_Person_Group_Code Option_Varchar2 := null
  ) is
    v_Department_Code   Option_Varchar2 := i_Department_Code;
    v_Person_Group_Code Option_Varchar2 := i_Person_Group_Code;
    r_Company           Hac_Dss_Company_Servers%rowtype;
  begin
    if z_Hac_Dss_Company_Servers.Exist_Lock(i_Company_Id => i_Company_Id, o_Row => r_Company) then
      if r_Company.Department_Code is not null then
        v_Department_Code := null;
      end if;
      if r_Company.Person_Group_Code is not null then
        v_Person_Group_Code := null;
      end if;
    end if;
  
    z_Hac_Dss_Company_Servers.Update_One(i_Company_Id        => i_Company_Id,
                                         i_Department_Code   => v_Department_Code,
                                         i_Person_Group_Code => v_Person_Group_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Save(i_Device Hac_Pref.Dss_Device_Rt) is
    r_Device Hac_Devices%rowtype := i_Device.Acms;
  begin
    r_Device.Device_Type_Id := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Dahua);
    r_Device.Device_Name    := z_Md_Companies.Load(i_Device.Company_Id).Code || r_Device.Location;
  
    Hac_Core.Acms_Device_Save(i_Company_Id => i_Device.Company_Id, i_Device => r_Device);
  
    if not z_Hac_Dss_Devices.Exist_Lock(i_Server_Id => r_Device.Server_Id,
                                        i_Device_Id => r_Device.Device_Id) then
      z_Hac_Dss_Devices.Insert_One(i_Server_Id => r_Device.Server_Id,
                                   i_Device_Id => r_Device.Device_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    Hac_Core.Acms_Device_Delete(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Device_Ip         Option_Varchar2 := null,
    i_Ready             Option_Varchar2 := null,
    i_Status            Option_Varchar2 := null,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Access_Group_Code Option_Varchar2 := null
  ) is
  begin
    z_Hac_Dss_Devices.Update_One(i_Server_Id         => i_Server_Id,
                                 i_Device_Id         => i_Device_Id,
                                 i_Serial_Number     => i_Serial_Number,
                                 i_Device_Code       => i_Device_Code,
                                 i_Access_Group_Code => i_Access_Group_Code);
  
    Hac_Core.Acms_Device_Update(i_Server_Id => i_Server_Id,
                                i_Device_Id => i_Device_Id,
                                i_Device_Ip => i_Device_Ip,
                                i_Ready     => i_Ready,
                                i_Status    => i_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Save(i_Server Hac_Pref.Hik_Server_Rt) is
  begin
    Hac_Core.Acms_Server_Save(i_Server.Acms);
  
    z_Hac_Hik_Servers.Save_One(i_Server_Id      => i_Server.Acms.Server_Id,
                               i_Partner_Key    => i_Server.Partner_Key,
                               i_Partner_Secret => i_Server.Partner_Secret,
                               i_Token          => i_Server.Token);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Delete(i_Server_Id number) is
  begin
    Hac_Core.Acms_Server_Delete(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
  begin
    z_Hac_Hik_Company_Servers.Insert_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Detach(i_Company_Id number) is
  begin
    z_Hac_Hik_Company_Servers.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Company_Server_Update
  (
    i_Company_Id        number,
    i_Organization_Code Option_Varchar2 := null
  ) is
    v_Organization_Code Option_Varchar2 := i_Organization_Code;
    r_Company           Hac_Hik_Company_Servers%rowtype;
  begin
    if z_Hac_Hik_Company_Servers.Exist_Lock(i_Company_Id => i_Company_Id, o_Row => r_Company) then
      if r_Company.Organization_Code is not null then
        v_Organization_Code := null;
      end if;
    end if;
  
    z_Hac_Hik_Company_Servers.Update_One(i_Company_Id        => i_Company_Id,
                                         i_Organization_Code => v_Organization_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Save(i_Device Hac_Pref.Hik_Device_Rt) is
    r_Device Hac_Devices%rowtype := i_Device.Acms;
  begin
    r_Device.Device_Type_Id := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision);
    r_Device.Device_Name    := z_Md_Companies.Load(i_Device.Company_Id).Code || r_Device.Location;
  
    Hac_Core.Acms_Device_Save(i_Company_Id  => i_Device.Company_Id,
                              i_Device      => r_Device,
                              i_Event_Types => i_Device.Event_Types);
  
    if z_Hac_Hik_Devices.Exist_Lock(i_Server_Id => r_Device.Server_Id,
                                    i_Device_Id => r_Device.Device_Id) then
      z_Hac_Hik_Devices.Update_One(i_Server_Id     => r_Device.Server_Id,
                                   i_Device_Id     => r_Device.Device_Id,
                                   i_Isup_Password => Option_Varchar2(i_Device.Isup_Password));
    else
      z_Hac_Hik_Devices.Insert_One(i_Server_Id     => r_Device.Server_Id,
                                   i_Device_Id     => r_Device.Device_Id,
                                   i_Isup_Password => i_Device.Isup_Password);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    Hac_Core.Acms_Device_Delete(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Door_Code         Option_Varchar2 := null,
    i_Access_Level_Code Option_Varchar2 := null
  ) is
  begin
    z_Hac_Hik_Devices.Update_One(i_Server_Id         => i_Server_Id,
                                 i_Device_Id         => i_Device_Id,
                                 i_Serial_Number     => i_Serial_Number,
                                 i_Device_Code       => i_Device_Code,
                                 i_Door_Code         => i_Door_Code,
                                 i_Access_Level_Code => i_Access_Level_Code);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Hik_Device_Sync
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
    r_Hac_Device Hac_Devices%rowtype;
    r_Hik_Device Hac_Hik_Devices%rowtype;
    r_Ex_Device  Hac_Hik_Ex_Devices%rowtype;
  begin
    r_Hac_Device := z_Hac_Devices.Load(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
    r_Hik_Device := z_Hac_Hik_Devices.Load(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
    r_Ex_Device  := Hac_Util.Get_Hik_Device_By_Name(i_Server_Id   => i_Server_Id,
                                                    i_Device_Name => r_Hac_Device.Device_Name);
  
    r_Hac_Device.Status            := Hac_Util.Map_Hik_Device_Status(Nvl(r_Ex_Device.Status,
                                                                         Hac_Pref.c_Hik_Device_Status_Unknown));
    r_Hik_Device.Device_Code       := r_Ex_Device.Device_Code;
    r_Hik_Device.Door_Code         := Hac_Util.Get_Hik_Door_Code_By_Device_Code(i_Server_Id   => i_Server_Id,
                                                                                i_Device_Code => r_Ex_Device.Device_Code);
    r_Hik_Device.Access_Level_Code := Hac_Util.Get_Hik_Access_Level_Code_By_Name(i_Server_Id         => i_Server_Id,
                                                                                 i_Access_Level_Name => r_Hac_Device.Device_Name);
    r_Hik_Device.Serial_Number     := r_Ex_Device.Serial_Number;
  
    if r_Hik_Device.Device_Code is not null and r_Hik_Device.Door_Code is not null and
       r_Hik_Device.Access_Level_Code is not null and r_Hik_Device.Serial_Number is not null then
      r_Hac_Device.Ready := 'Y';
    else
      r_Hac_Device.Ready := 'N';
    end if;
  
    z_Hac_Devices.Save_Row(r_Hac_Device);
    z_Hac_Hik_Devices.Save_Row(r_Hik_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Force_Sync_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  begin
    -- update to null allows force update of persons
    -- without it person is updated only when hac_server_persons differs from actual values
    if r_Dss_Company.Server_Id is not null and
       z_Hac_Server_Persons.Exist(i_Server_Id  => r_Dss_Company.Server_Id,
                                  i_Company_Id => i_Company_Id,
                                  i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Update_One(i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_First_Name => Option_Varchar2(null),
                                      i_Last_Name  => Option_Varchar2(null),
                                      i_Photo_Sha  => Option_Varchar2(null),
                                      i_Rfid_Code  => Option_Varchar2(null));
    
      delete Hac_Device_Persons q
       where q.Company_Id = i_Company_Id
         and q.Person_Id = i_Person_Id
         and q.Server_Id = r_Dss_Company.Server_Id;
    end if;
  
    if r_Hik_Company.Server_Id is not null and
       z_Hac_Server_Persons.Exist(i_Server_Id  => r_Hik_Company.Server_Id,
                                  i_Company_Id => i_Company_Id,
                                  i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Update_One(i_Server_Id  => r_Hik_Company.Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_First_Name => Option_Varchar2(null),
                                      i_Last_Name  => Option_Varchar2(null),
                                      i_Photo_Sha  => Option_Varchar2(null),
                                      i_Rfid_Code  => Option_Varchar2(null));
    
      delete Hac_Device_Persons q
       where q.Company_Id = i_Company_Id
         and q.Person_Id = i_Person_Id
         and q.Server_Id = r_Hik_Company.Server_Id;
    end if;
  
    if r_Dss_Company.Server_Id is not null or r_Hik_Company.Server_Id is not null then
      Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
    r_Device      Htt_Devices%rowtype := z_Htt_Devices.Load(i_Company_Id => i_Company_Id,
                                                            i_Device_Id  => i_Device_Id);
    r_Dss_Device  Hac_Dss_Devices%rowtype := Hac_Util.Take_Dss_Device_By_Serial_Number(r_Device.Serial_Number);
    r_Hik_Device  Hac_Hik_Devices%rowtype := Hac_Util.Take_Hik_Device_By_Serial_Number(r_Device.Serial_Number);
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  begin
    -- implicitly syncronised person across all bound devices
    for r in (select Lp.Person_Id
                from Htt_Location_Persons Lp
               where Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = r_Device.Location_Id
              union
              select Dp.Person_Id
                from Hac_Device_Persons Dp
               where Dp.Server_Id = r_Dss_Company.Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = r_Dss_Device.Device_Id
              union
              select Hp.Person_Id
                from Hac_Device_Persons Hp
               where Hp.Server_Id = r_Hik_Company.Server_Id
                 and Hp.Company_Id = i_Company_Id
                 and Hp.Device_Id = r_Hik_Device.Device_Id)
    loop
      Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => r.Person_Id);
    end loop;
  end;

end Hac_Api;
/

create or replace package Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id   number,
    i_Device      Htt_Devices%rowtype,
    i_Person_Code varchar2,
    i_Track_Time  timestamp with local time zone,
    i_Photo_Sha   varchar2 := null,
    i_Track_Type  varchar2 := Htt_Pref.c_Track_Type_Check
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  );
end Hac_Core;
/
create or replace package body Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  begin
    v_Details.Put('partner_key', i_Partner_Key);
    v_Details.Put('partner_secret', i_Partner_Secret);
    v_Details.Put('host_url', i_Host_Url);
    v_Details.Put('request_path', i_Request_Path);
  
    v_Service := Runtime_Service(Hac_Pref.c_Hik_Api_Service_Name);
  
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(Nvl(i_Data, Json_Object_t).To_Clob));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Response_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    r_Server     Hac_Servers%rowtype := z_Hac_Servers.Load(i_Server_Id);
    r_Dss_Server Hac_Dss_Servers%rowtype := z_Hac_Dss_Servers.Load(i_Server_Id);
    v_Service    Runtime_Service;
    v_Details    Hashmap := Hashmap();
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys Array_Varchar2;
      v_Delimiter  varchar2(1) := '&';
      v_Key        varchar2(100);
      result       varchar2(4000);
    begin
      if i_Uri_Query_Params is null then
        return result;
      end if;
    
      v_Param_Keys := i_Uri_Query_Params.Keyset;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || i_Uri_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return result;
    end;
  begin
    v_Details.Put('host_url', Nvl(i_Host_Url, r_Server.Host_Url));
    v_Details.Put('method', i_Api_Method);
    v_Details.Put('api_uri', i_Api_Uri);
    v_Details.Put('object_id', i_Object_Id);
    v_Details.Put('query_params', Gather_Query_Params);
    v_Details.Put('auth_details',
                  Fazo.Zip_Map('username', r_Dss_Server.Username, 'password', r_Dss_Server.Password));
    v_Details.Put('face_picture_sha', i_Face_Picture_Sha);
  
    v_Service := Runtime_Service(Hac_Pref.c_Dahua_Api_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype) is
  begin
    z_Hac_Servers.Save_Row(i_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
  begin
    z_Hac_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  ) is
    -------------------------------------------------- 
    Procedure Assert_Singular_Primary_Attachment is
      v_Dummy varchar2(1);
    begin
      if i_Attach_Kind <> Hac_Pref.c_Device_Attach_Primary then
        return;
      end if;
    
      select 'x'
        into v_Dummy
        from Hac_Company_Devices p
       where p.Device_Id = i_Device_Id
         and p.Attach_Kind = Hac_Pref.c_Device_Attach_Primary
         and p.Company_Id <> i_Company_Id;
    
      Hac_Error.Raise_001;
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Singular_Primary_Attachment;
  
    z_Hac_Company_Devices.Insert_Try(i_Company_Id  => i_Company_Id,
                                     i_Device_Id   => i_Device_Id,
                                     i_Attach_Kind => i_Attach_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Hac_Company_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  ) is
    v_Old_Company_Id number;
  begin
    if z_Hac_Devices.Exist_Lock(i_Server_Id => i_Device.Server_Id,
                                i_Device_Id => i_Device.Device_Id) then
      v_Old_Company_Id := Hac_Util.Load_Primary_Company(i_Device.Device_Id);
    end if;
  
    z_Hac_Devices.Save_Row(i_Device);
  
    if i_Company_Id is null then
      Hac_Error.Raise_002;
    end if;
  
    if v_Old_Company_Id <> i_Company_Id then
      Device_Detach(i_Company_Id => v_Old_Company_Id, i_Device_Id => i_Device.Device_Id);
    end if;
  
    Device_Attach(i_Company_Id  => i_Company_Id,
                  i_Device_Id   => i_Device.Device_Id,
                  i_Attach_Kind => Hac_Pref.c_Device_Attach_Primary);
  
    for i in 1 .. i_Event_Types.Count
    loop
      z_Hac_Device_Event_Types.Insert_Try(i_Server_Id       => i_Device.Server_Id,
                                          i_Device_Id       => i_Device.Device_Id,
                                          i_Device_Type_Id  => i_Device.Device_Type_Id,
                                          i_Event_Type_Code => i_Event_Types(i));
    end loop;
  
    delete Hac_Device_Event_Types q
     where q.Server_Id = i_Device.Server_Id
       and q.Device_Id = i_Device.Device_Id
       and q.Device_Type_Id = i_Device.Device_Type_Id
       and q.Event_Type_Code not member of i_Event_Types;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    z_Hac_Devices.Delete_One(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Analyze_Server_Person_Info
  (
    i_Server_Id      number,
    i_Person         Mr_Natural_Persons%rowtype,
    i_Photo_Sha      varchar2,
    i_Device_Type_Id number,
    i_Rfid_Code      varchar2 := null,
    o_Person_Data    out Gmap
  ) is
    c_Out_Action_Create constant varchar2(1) := 'C';
    c_Out_Action_Update constant varchar2(1) := 'U';
  
    v_Out_Action varchar2(1);
  
    r_Server_Person Hac_Server_Persons%rowtype;
  
    v_Response_Data Gmap;
  
    --------------------------------------------------
    Function Attached_To_Device
    (
      i_Company_Id     number,
      i_Device_Type_Id number,
      i_Person_Id      number
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons Lp
       where Lp.Company_Id = i_Company_Id
         and Lp.Person_Id = i_Person_Id
         and exists (select 1
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = Lp.Location_Id
                 and q.Device_Type_Id = i_Device_Type_Id)
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if i_Server_Id is null then
      return;
    end if;
  
    if z_Hac_Server_Persons.Exist(i_Server_Id  => i_Server_Id,
                                  i_Company_Id => i_Person.Company_Id,
                                  i_Person_Id  => i_Person.Person_Id,
                                  o_Row        => r_Server_Person) then
      if r_Server_Person.Person_Code is null or
         not Fazo.Equal(r_Server_Person.First_Name, i_Person.First_Name) or
         not Fazo.Equal(r_Server_Person.Last_Name, i_Person.Last_Name) or
         not Fazo.Equal(r_Server_Person.Photo_Sha, i_Photo_Sha) or
         not Fazo.Equal(r_Server_Person.Rfid_Code, i_Rfid_Code) then
        v_Out_Action := c_Out_Action_Update;
      end if;
    else
      if Attached_To_Device(i_Company_Id     => i_Person.Company_Id,
                            i_Device_Type_Id => i_Device_Type_Id,
                            i_Person_Id      => i_Person.Person_Id) then
        v_Out_Action := c_Out_Action_Create;
      end if;
    end if;
  
    if v_Out_Action in (c_Out_Action_Create, c_Out_Action_Update) then
      o_Person_Data := Gmap();
    
      o_Person_Data.Put('person_code', Nvl(r_Server_Person.Person_Code, ''));
      o_Person_Data.Put('external_code',
                        Nvl(r_Server_Person.External_Code, Hac_Util.Gen_Hik_External_Code));
      o_Person_Data.Put('first_name', i_Person.First_Name);
      o_Person_Data.Put('last_name', Nvl(i_Person.Last_Name, ''));
      o_Person_Data.Put('photo_sha', Nvl(i_Photo_Sha, ''));
      o_Person_Data.Put('rfid_code', Nvl(i_Rfid_Code, ''));
    
      v_Response_Data := Gmap();
    
      v_Response_Data.Put('server_id', i_Server_Id);
      v_Response_Data.Put('company_id', i_Person.Company_Id);
      v_Response_Data.Put('person_id', i_Person.Person_Id);
    
      o_Person_Data.Put('response_data', v_Response_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Info
  (
    i_Company   Hac_Dss_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Groups Array_Varchar2;
  
    v_Person_Data Gmap;
  
    --------------------------------------------------
    Function Person_Code
    (
      i_Company_Id number,
      i_Person_Id  number
    ) return varchar2 is
    begin
      return z_Md_Companies.Load(i_Company_Id).Code || i_Person_Id;
    end;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Dahua_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Person_Group_Code is not null then
      v_Person_Data.Put('person_group_code', i_Company.Person_Group_Code);
      v_Person_Data.Put('start_time', Hac_Pref.c_Auth_Start_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Auth_End_Time);
    
      v_Person_Data.Put('person_id',
                        Coalesce(v_Person_Data.o_Varchar2('person_code'),
                                 Person_Code(i_Company_Id => i_Person.Company_Id,
                                             i_Person_Id  => i_Person.Person_Id)));
    
      select q.Access_Group_Code
        bulk collect
        into v_Access_Groups
        from Hac_Device_Persons Dp
        join Hac_Dss_Devices q
          on q.Server_Id = i_Company.Server_Id
         and q.Device_Id = Dp.Device_Id
       where Dp.Server_Id = i_Company.Server_Id
         and Dp.Company_Id = i_Person.Company_Id
         and Dp.Person_Id = i_Person.Person_Id
       group by q.Access_Group_Code;
    
      v_Person_Data.Put('access_groups', v_Access_Groups);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Info
  (
    i_Company   Hac_Hik_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Person_Data Gmap;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Hikvision_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Organization_Code is not null then
      v_Person_Data.Put('organization_code', i_Company.Organization_Code);
      v_Person_Data.Put('begin_time', Hac_Pref.c_Hik_Begin_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Hik_End_Time);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Photo_Sha  varchar2(64);
    r_Person     Mr_Natural_Persons%rowtype;
    r_Htt_Person Htt_Persons%rowtype;
  
    v_Dss_Data      Gmap;
    v_Dss_Info_List Glist := Glist();
  
    v_Hik_Data      Gmap;
    v_Hik_Info_List Glist := Glist();
  
    v_Dss_Server Gmap := Gmap();
    v_Hik_Server Gmap := Gmap();
  
    result Gmap := Gmap();
  begin
    o_Data := Array_Varchar2();
  
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    for i in 1 .. i_Person_Ids.Count
    loop
      r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id,
                                                i_Person_Id  => i_Person_Ids(i));
      r_Htt_Person := z_Htt_Persons.Take(i_Company_Id => i_Company_Id,
                                         i_Person_Id  => i_Person_Ids(i));
      v_Photo_Sha  := Hac_Util.Take_Main_Photo(i_Company_Id => i_Company_Id,
                                               i_Person_Id  => i_Person_Ids(i));
    
      Analyze_Dahua_Person_Info(i_Company   => r_Dss_Company,
                                i_Person    => r_Person,
                                i_Photo_Sha => v_Photo_Sha,
                                i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                o_Data      => v_Dss_Data);
    
      Analyze_Hikvision_Person_Info(i_Company   => r_Hik_Company,
                                    i_Person    => r_Person,
                                    i_Photo_Sha => v_Photo_Sha,
                                    i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                    o_Data      => v_Hik_Data);
    
      if v_Dss_Data is not null then
        v_Dss_Info_List.Push(v_Dss_Data.Val);
      end if;
    
      if v_Hik_Data is not null then
        v_Hik_Info_List.Push(v_Hik_Data.Val);
      end if;
    end loop;
  
    if r_Dss_Server.Server_Id is not null then
      v_Dss_Server.Put('host_url', v_Dss_Host_Url);
      v_Dss_Server.Put('username', r_Dss_Server.Username);
      v_Dss_Server.Put('password', r_Dss_Server.Password);
    
      v_Dss_Server.Put('persons', v_Dss_Info_List);
    
      Result.Put('dahua_data', v_Dss_Server);
    end if;
  
    if r_Hik_Server.Server_Id is not null then
      v_Hik_Server.Put('host_url', v_Hik_Host_Url);
      v_Hik_Server.Put('partner_key', r_Hik_Server.Partner_Key);
      v_Hik_Server.Put('partner_secret', r_Hik_Server.Partner_Secret);
    
      v_Hik_Server.Put('persons', v_Hik_Info_List);
    
      Result.Put('hikvision_data', v_Hik_Server);
    end if;
  
    o_Data := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    v_Dss_List Glist;
    v_Hik_List Glist;
  
    v_Dss_Data Gmap := Gmap();
    v_Hik_Data Gmap := Gmap();
  
    v_Person_Ids Array_Number := Fazo.Sort(Fazo.To_Array_Number(i_Person_Ids));
  
    v_Result Gmap := Gmap();
  begin
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    v_Dss_Data.Put('host_url', Nvl(v_Dss_Host_Url, ''));
    v_Dss_Data.Put('username', Nvl(r_Dss_Server.Username, ''));
    v_Dss_Data.Put('password', Nvl(r_Dss_Server.Password, ''));
  
    v_Hik_Data.Put('host_url', Nvl(v_Hik_Host_Url, ''));
    v_Hik_Data.Put('partner_key', Nvl(r_Hik_Server.Partner_Key, ''));
    v_Hik_Data.Put('partner_secret', Nvl(r_Hik_Server.Partner_Secret, ''));
  
    if r_Dss_Company.Server_Id is not null then
      Analyze_Dahua_Person_Attachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('attachment_info', v_Dss_List);
    
      Analyze_Dahua_Person_Detachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('detachment_info', v_Dss_List);
    end if;
  
    if r_Hik_Company.Server_Id is not null then
      Analyze_Hikvision_Person_Attachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('attachment_info', v_Hik_List);
    
      Analyze_Hikvision_Person_Detachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('detachment_info', v_Hik_List);
    end if;
  
    v_Result.Put('dahua_data', v_Dss_Data);
    v_Result.Put('hikvision_data', v_Hik_Data);
  
    o_Data := Fazo.Read_Clob(v_Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  ) is
  begin
    -- TODO FIX, TEZROQ To'g'rilash kerak
    for i in 1 .. i_Person_Ids.Count
    loop
      z_Hac_Device_Persons.Insert_Try(i_Server_Id  => i_Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Device_Id  => i_Device_Id,
                                      i_Person_Id  => i_Person_Ids(i));
    end loop;
    /*insert into Hac_Device_Persons
      (Server_Id, Company_Id, Device_Id, Person_Id)
    values
      (i_Server_Id, i_Company_Id, i_Device_Id, to_number(i_Person_Ids(i)));*/
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    
    i_Person_Ids Array_Varchar2
  ) is
  begin
    forall i in 1 .. i_Person_Ids.Count
      delete from Hac_Device_Persons q
       where q.Server_Id = i_Server_Id
         and q.Company_Id = i_Company_Id
         and q.Device_Id = i_Device_Id
         and q.Person_Id = to_number(i_Person_Ids(i));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  ) is
  begin
    if not z_Hac_Server_Persons.Exist_Lock(i_Server_Id  => i_Server_Id,
                                           i_Company_Id => i_Company_Id,
                                           i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Insert_One(i_Server_Id     => i_Server_Id,
                                      i_Company_Id    => i_Company_Id,
                                      i_Person_Id     => i_Person_Id,
                                      i_External_Code => i_External_Code);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  ) is
    v_Person_Code Option_Varchar2 := case
                                       when i_Person_Code is not null then
                                        Option_Varchar2(i_Person_Code)
                                       else
                                        null
                                     end;
  begin
    z_Hac_Server_Persons.Update_One(i_Server_Id     => i_Server_Id,
                                    i_Company_Id    => i_Company_Id,
                                    i_Person_Id     => i_Person_Id,
                                    i_First_Name    => Option_Varchar2(i_First_Name),
                                    i_Last_Name     => Option_Varchar2(i_Last_Name),
                                    i_Photo_Sha     => Option_Varchar2(i_Photo_Sha),
                                    i_Rfid_Code     => Option_Varchar2(i_Rfid_Code),
                                    i_Person_Code   => v_Person_Code,
                                    i_External_Code => Option_Varchar2(i_External_Code));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  ) is
    pragma autonomous_transaction;
  begin
    z_Hac_Error_Log.Save_One(i_Log_Id         => Hac_Error_Log_Sq.Nextval,
                             i_Request_Params => i_Request_Params,
                             i_Error_Message  => i_Error_Message);
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hac_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Hac_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin hac_core.notify_acms_devices; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices is
    v_Company Hashmap;
    v_Data    Arraylist := Arraylist();
  begin
    for r in (select Dt.Company_Id,
                     cast(collect(to_number(to_char(Dt.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dirty_Persons Dt
               group by Dt.Company_Id)
    loop
      v_Company := Fazo.Zip_Map('company_id', r.Company_Id);
      v_Company.Put('person_ids', r.Person_Ids);
    
      v_Data.Push(v_Company);
    end loop;
  
    b.Add_Final_Service(i_Class_Name => Hac_Pref.c_Acms_Final_Service_Name, i_Data => v_Data);
  
    delete Hac_Dirty_Persons;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id   number,
    i_Device      Htt_Devices%rowtype,
    i_Person_Code varchar2,
    i_Track_Time  timestamp with local time zone,
    i_Photo_Sha   varchar2 := null,
    i_Track_Type  varchar2 := Htt_Pref.c_Track_Type_Check
  ) is
    v_Filial_Ids Array_Number;
    r_Track      Htt_Tracks%rowtype;
  begin
    r_Track.Company_Id  := i_Device.Company_Id;
    r_Track.Device_Id   := i_Device.Device_Id;
    r_Track.Location_Id := i_Device.Location_Id;
    r_Track.Person_Id   := Hac_Util.Take_Person_Id_By_Code(i_Server_Id   => i_Server_Id,
                                                           i_Company_Id  => i_Device.Company_Id,
                                                           i_Person_Code => i_Person_Code);
    r_Track.Track_Type  := i_Track_Type;
    r_Track.Mark_Type   := Htt_Pref.c_Mark_Type_Face;
    r_Track.Track_Time  := i_Track_Time;
    r_Track.Is_Valid    := 'Y';
    r_Track.Photo_Sha   := i_Photo_Sha;
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    for j in 1 .. v_Filial_Ids.Count
    loop
      Ui_Context.Init_Migr(i_Company_Id   => i_Device.Company_Id,
                           i_User_Id      => Md_Pref.User_System(i_Device.Company_Id),
                           i_Project_Code => Href_Pref.c_Pc_Verifix_Hr,
                           i_Filial_Id    => v_Filial_Ids(j));
    
      r_Track.Filial_Id := v_Filial_Ids(j);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    r_Server         Hac_Servers%rowtype;
    r_Device         Hac_Dss_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
    p_Error_Data     Hashmap;
  
    --------------------------------------------------
    Procedure Save_Notification_Message is
      pragma autonomous_transaction;
    begin
      z_Hac_Dss_Tracks.Insert_Try(i_Host_Url        => i_Host_Url,
                                  i_Person_Code     => Nvl(i_Person_Code,
                                                           Hac_Pref.c_Unknown_Person_Code),
                                  i_Device_Code     => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id),
                                  i_Track_Time      => i_Track_Time,
                                  i_Source_Type     => i_Source_Type,
                                  i_Photo_Url       => i_Photo_Url,
                                  i_Photo_Sha       => i_Photo_Sha,
                                  i_Event_Type_Code => i_Event_Type,
                                  i_Extra_Info      => i_Extra_Info);
      commit;
    
    exception
      when others then
        insert into Hac_Error_Log
          (Log_Id, Request_Params, Error_Message, Created_On)
        values
          (Hac_Error_Log_Sq.Nextval,
           i_Extra_Info,
           Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
           Dbms_Utility.Format_Error_Backtrace,
           Current_Timestamp);
      
        commit;
    end;
  begin
    Save_Notification_Message;
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Dahua),
                                       i_Event_Type_Code => i_Event_Type) then
      return;
    end if;
  
    r_Server := Hac_Util.Take_Server_By_Host_Url(i_Host_Url);
    r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => r_Server.Server_Id,
                                                    i_Device_Code => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id));
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Biruni_Route.Context_Begin;
    
      Save_Device_Track(i_Server_Id   => r_Server.Server_Id, --
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => Htt_Util.Convert_Timestamp(i_Date     => Hac_Util.Unix_Ts_To_Date(i_Track_Time),
                                                                    i_Timezone => Hac_Pref.c_Utc_Timezone_Code),
                        i_Photo_Sha   => i_Photo_Sha);
    
      Biruni_Route.Context_End;
    end loop;
    commit;
  exception
    when others then
      rollback;
      p_Error_Data := Fazo.Zip_Map('source',
                                   'dahua',
                                   'host_url',
                                   i_Host_Url,
                                   'person_code',
                                   i_Person_Code,
                                   'dss_channel_id',
                                   i_Dss_Channel_Id,
                                   'track_time',
                                   i_Track_Time);
    
      Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                     i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) || Chr(10) ||
                                         Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  ) is
    pragma autonomous_transaction;
    c_Timestamp_Format varchar2(50) := 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM';
  
    --------------------------------------------------
    Function Event_Exists
    (
      i_Server_Id   number,
      i_Door_Code   varchar2,
      i_Person_Code varchar2,
      i_Event_Time  timestamp with local time zone
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hac_Hik_Ex_Events q
       where q.Server_Id = i_Server_Id
         and q.Door_Code = i_Door_Code
         and q.Person_Code = i_Person_Code
         and q.Event_Time = i_Event_Time;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Event_Exists(i_Server_Id   => i_Server_Id,
                    i_Door_Code   => i_Door_Code,
                    i_Person_Code => i_Person_Code,
                    i_Event_Time  => To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format)) then
      return;
    end if;
  
    insert into Hac_Hik_Ex_Events
      (Server_Id,
       Door_Code,
       Person_Code,
       Event_Time,
       Event_Type,
       Event_Code,
       Check_In_And_Out_Type,
       Event_Type_Code,
       Door_Name,
       Src_Type,
       Status,
       Card_No,
       Person_Name,
       Person_Type,
       Pic_Uri,
       Pic_Sha,
       Device_Time,
       Reader_Code,
       Reader_Name,
       Extra_Info,
       Created_On)
    values
      (i_Server_Id,
       i_Door_Code,
       i_Person_Code,
       To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format),
       i_Event_Type,
       i_Event_Code,
       i_Check_In_And_Out_Type,
       i_Event_Type_Code,
       i_Door_Name,
       i_Src_Type,
       i_Status,
       i_Card_No,
       i_Person_Name,
       i_Person_Type,
       i_Pic_Uri,
       i_Pic_Sha,
       i_Device_Time,
       i_Reader_Code,
       i_Reader_Name,
       i_Extra_Info,
       Current_Timestamp);
    commit;
  
  exception
    when others then
      insert into Hac_Error_Log
        (Log_Id, Request_Params, Error_Message, Created_On)
      values
        (Hac_Error_Log_Sq.Nextval,
         i_Extra_Info,
         Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
         Dbms_Utility.Format_Error_Backtrace,
         Current_Timestamp);
    
      commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    r_Device         Hac_Hik_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
  begin
    r_Device := Hac_Util.Get_Hik_Device_By_Door_Code(i_Server_Id => i_Server_Id,
                                                     i_Door_Code => i_Door_Code);
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Save_Device_Track(i_Server_Id   => i_Server_Id,
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => To_Timestamp_Tz(i_Track_Time,
                                                         'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM'),
                        i_Photo_Sha   => i_Photo_Sha,
                        i_Track_Type  => case i_Track_Type
                                           when Hac_Pref.c_Hik_Track_Type_Input then
                                            Htt_Pref.c_Track_Type_Input
                                           when Hac_Pref.c_Hik_Track_Type_Output then
                                            Htt_Pref.c_Track_Type_Output
                                           else
                                            Htt_Pref.c_Track_Type_Check
                                         end);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Person_Code varchar2(300);
    v_Photo_Url   varchar2(300);
    v_Channel_Id  varchar2(350);
    v_Photo_Sha   varchar2(64);
    v_Track_Time  number;
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      v_Channel_Id  := v_Track.r_Varchar2('channelId');
      v_Person_Code := v_Track.r_Varchar2('personId');
      v_Track_Time  := v_Track.r_Number('alarmTime');
      v_Photo_Url   := v_Track.o_Varchar2('captureImageUrl');
      v_Photo_Sha   := v_Track.o_Varchar2('photo_sha');
    
      Hac_Core.Save_Dss_Track(i_Host_Url       => i_Host_Url,
                              i_Person_Code    => v_Person_Code,
                              i_Dss_Channel_Id => v_Channel_Id,
                              i_Track_Time     => v_Track_Time,
                              i_Photo_Url      => v_Photo_Url,
                              i_Photo_Sha      => v_Photo_Sha,
                              i_Source_Type    => i_Source_Type,
                              i_Event_Type     => v_Track.o_Varchar2('alarmTypeId'),
                              i_Extra_Info     => v_Track.Json);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Door_Code       varchar2(1000 char);
    v_Event_Time      varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
  
    v_Hac_Device_Type_Id number := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision);
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      begin
        v_Person_Code     := v_Track.r_Varchar2('personId');
        v_Door_Code       := v_Track.r_Varchar2('doorIndexCode');
        v_Event_Time      := v_Track.r_Varchar2('eventTime');
        v_Hik_Track_Type  := v_Track.r_Number('checkInAndOutType');
        v_Event_Type_Code := v_Track.r_Number('eventType');
      
        Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => i_Server_Id,
                                   i_Door_Code             => v_Door_Code,
                                   i_Person_Code           => v_Person_Code,
                                   i_Event_Time            => v_Event_Time,
                                   i_Event_Type            => i_Source_Type,
                                   i_Event_Code            => v_Track.r_Varchar2('eventId'),
                                   i_Check_In_And_Out_Type => v_Hik_Track_Type,
                                   i_Event_Type_Code       => v_Event_Type_Code,
                                   i_Door_Name             => v_Track.o_Varchar2('doorName'),
                                   i_Card_No               => v_Track.o_Varchar2('cardNo'),
                                   i_Person_Name           => v_Track.o_Varchar2('personName'),
                                   i_Person_Type           => v_Track.o_Varchar2('personType'),
                                   i_Pic_Uri               => v_Track.o_Varchar2('picUri'),
                                   i_Pic_Sha               => v_Track.o_Varchar2('photo_sha'),
                                   i_Device_Time           => v_Track.o_Varchar2('deviceTime'),
                                   i_Reader_Code           => v_Track.o_Varchar2('readerIndexCode'),
                                   i_Reader_Name           => v_Track.o_Varchar2('readerName'),
                                   i_Extra_Info            => v_Track.Json);
      
        continue when not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => v_Hac_Device_Type_Id,
                                                      i_Event_Type_Code => v_Event_Type_Code);
      
        Hac_Core.Save_Hik_Track(i_Server_Id   => i_Server_Id,
                                i_Person_Code => v_Person_Code,
                                i_Track_Time  => v_Event_Time,
                                i_Door_Code   => v_Door_Code,
                                i_Photo_Sha   => v_Track.o_Varchar2('photo_sha'),
                                i_Track_Type  => v_Hik_Track_Type);
      exception
        when others then
          Hac_Core.Save_Error_Log(i_Request_Params => v_Track.Json,
                                  i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                      Chr(10) || Dbms_Utility.Format_Error_Backtrace);
      end;
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  ) is
  begin
    select k.Server_Id, t.Host_Url, k.Partner_Key, k.Partner_Secret
      into o_Server_Id, o_Host_Url, o_Partner_Key, o_Partner_Secret
      from Hac_Hik_Servers k
      join Hac_Servers t
        on t.Server_Id = k.Server_Id
     where k.Token = i_Token;
  exception
    when No_Data_Found then
      Hac_Error.Raise_006(i_Token);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Events      Glist;
    v_Params      Gmap;
    v_Event_Data  Gmap;
    v_Person_Data Gmap;
    ---------- 
    v_Door_Code       varchar2(1000 char);
    v_Happen_Time     varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
    ---------- 
    v_Host_Name  varchar2(1024 char);
    v_Server_Id  number;
    p_Error_Data Hashmap;
  begin
  
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Server_Id   := to_number(v_Data.r_Varchar2('serverId'));
    v_Params      := v_Data.r_Gmap('params');
    v_Events      := v_Params.r_Glist('events');
    v_Event_Data  := Gmap(Json_Object_t(v_Events.Val.Get(0)));
    v_Person_Data := v_Event_Data.r_Gmap('data');
    ---------- 
    v_Person_Code     := v_Person_Data.r_Varchar2('personId');
    v_Happen_Time     := v_Event_Data.r_Varchar2('happenTime');
    v_Door_Code       := v_Event_Data.r_Varchar2('srcIndex');
    v_Event_Type_Code := v_Event_Data.r_Number('eventType');
  
    v_Hik_Track_Type := v_Person_Data.r_Number('checkInAndOutType');
  
    Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => v_Server_Id,
                               i_Door_Code             => v_Door_Code,
                               i_Person_Code           => v_Person_Code,
                               i_Event_Time            => v_Happen_Time,
                               i_Event_Type            => Hac_Pref.c_Hik_Event_Type_From_Notifications,
                               i_Event_Code            => v_Event_Data.r_Varchar2('eventId'),
                               i_Check_In_And_Out_Type => v_Hik_Track_Type,
                               i_Event_Type_Code       => v_Event_Type_Code,
                               i_Door_Name             => v_Event_Data.o_Varchar2('srcName'),
                               i_Src_Type              => v_Event_Data.o_Varchar2('srcType'),
                               i_Status                => v_Event_Data.o_Number('status'),
                               i_Card_No               => v_Person_Data.o_Varchar2('cardNo'),
                               i_Pic_Uri               => v_Person_Data.o_Varchar2('picUri'),
                               i_Pic_Sha               => v_Person_Data.o_Varchar2('picSha'),
                               i_Reader_Code           => v_Person_Data.o_Varchar2('readerIndexCode'),
                               i_Reader_Name           => v_Person_Data.o_Varchar2('readerName'),
                               i_Extra_Info            => v_Event_Data.Json);
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision),
                                       i_Event_Type_Code => v_Event_Type_Code) then
      return;
    end if;
  
    Hac_Core.Save_Hik_Track(i_Server_Id   => v_Server_Id,
                            i_Person_Code => v_Person_Code,
                            i_Track_Time  => v_Happen_Time,
                            i_Door_Code   => v_Door_Code,
                            i_Photo_Sha   => v_Person_Data.o_Varchar2('picSha'),
                            i_Track_Type  => v_Hik_Track_Type);
  exception
    when others then
      p_Error_Data := Fazo.Zip_Map('source',
                                   'hikvision',
                                   'host_name',
                                   v_Host_Name,
                                   'person_code',
                                   v_Person_Code,
                                   'door_code',
                                   v_Door_Code,
                                   'track_time',
                                   v_Happen_Time);
    
      Hac_Core.Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                              i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                  Chr(10) || Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Execute by Application servers
  -- Don't remove this procedure
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
  begin
    Dbms_Session.Reset_Package;
    Save_Dss_Track(i_Host_Url       => i_Host_Url,
                   i_Person_Code    => i_Person_Code,
                   i_Dss_Channel_Id => i_Dss_Channel_Id,
                   i_Track_Time     => i_Track_Time,
                   i_Photo_Url      => i_Photo_Url,
                   i_Photo_Sha      => i_Photo_Sha,
                   i_Source_Type    => Hac_Pref.c_Dss_Track_Source_Queue,
                   i_Event_Type     => i_Event_Type,
                   i_Extra_Info     => i_Extra_Info);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  ) is
  begin
    z_Hac_Devices.Update_One(i_Server_Id => i_Server_Id,
                             i_Device_Id => i_Device_Id,
                             i_Device_Ip => i_Device_Ip,
                             i_Ready     => i_Ready,
                             i_Status    => i_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  ) is
  begin
    z_Biruni_Files.Insert_Try(i_Sha          => i_Sha,
                              i_File_Size    => i_File_Size,
                              i_Store_Kind   => i_Store_Kind,
                              i_File_Name    => i_File_Name,
                              i_Content_Type => i_Content_Type);
  end;

end Hac_Core;
/

create or replace package Hac_Pref is
  ----------------------------------------------------------------------------------------------------
  type Dss_Server_Rt is record(
    Acms     Hac_Servers%rowtype,
    Username varchar2(300 char),
    Password varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Dss_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Register_Code varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Server_Rt is record(
    Acms           Hac_Servers%rowtype,
    Partner_Key    varchar2(300 char),
    Partner_Secret varchar2(300 char),
    Token          varchar2(64 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Isup_Password varchar2(300 char),
    Event_Types   Array_Number);
  ----------------------------------------------------------------------------------------------------
  c_Acms_Final_Service_Name constant varchar2(100) := 'com.verifix.vhr.AcmsFinalService';
  ----------------------------------------------------------------------------------------------------
  -- Dahua integration preferences
  ----------------------------------------------------------------------------------------------------
  c_Dahua_Api_Service_Name        constant varchar2(100) := 'com.verifix.vhr.dahua.DahuaRuntimeService';
  c_Start_Page_Num                constant number := 1; -- used in get list requests
  c_Default_Page_Size             constant number := 500; -- used in get list requests, max number of items in list
  c_Ascending_Order_Direction     constant number := 0; -- used in get list requests
  c_Descending_Order_Direction    constant number := 1; -- used in get list requests
  c_Dahua_Gender_Neutral          constant number := 0;
  c_Person_Source_Management_List constant number := 0;
  c_Auth_Start_Time               constant number := 1615824000; -- unix timestamp in seconds, 01.01.2000 00:00:00
  c_Auth_End_Time                 constant number := 1931443199; -- unix timestamp in seconds, 01.01.2050 00:00:00
  ----------------------------------------------------------------------------------------------------
  -- DAHUA DEVICE CHANNEL CODE
  ---------------------------------------------------------------------------------------------------- 
  -- channel code consists of: 
  -- device_code + '$' + device_type + '$' + channel_sequence_val + '$' + unit_sequence_val
  -- by default device type is '7' (access_control)
  -- by default channel_sequence_val is '0' (only one)
  -- by default unit_sequence_val is '0' (only one)
  ---------------------------------------------------------------------------------------------------- 
  c_Default_Channel_Id_Tail constant varchar2(10) := '$7$0$0';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API METHODS
  ---------------------------------------------------------------------------------------------------- 
  c_Org_Tree_Uri     constant varchar2(50) := '/brms/api/v1.0/tree/deviceOrg';
  c_Person_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/person-group';
  c_Device_Uri       constant varchar2(50) := '/brms/api/v1.1/device';
  c_Door_Group_Uri   constant varchar2(50) := '/obms/api/v1.0/accessControl/doorGroup';
  c_Access_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access-group';
  c_Person_Uri       constant varchar2(50) := '/obms/api/v1.1/acs/person';
  c_Tracks_Fetch_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access/record/fetch/page';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API RESOURCE uris (are added to the api method uris)
  ----------------------------------------------------------------------------------------------------
  c_List_Uri                  constant varchar2(50) := '/list';
  c_Page_Uri                  constant varchar2(50) := '/page';
  c_Person_Access_Authorize   constant varchar2(50) := '/person/authorize';
  c_Person_Access_Deauthorize constant varchar2(50) := '/person/unauthorize';
  ----------------------------------------------------------------------------------------------------
  -- Dahua default role ids (are kept in DSS server)
  ----------------------------------------------------------------------------------------------------
  c_Superadmin_Role_Id constant number := 1;
  c_Admin_Role_Id      constant number := 2;
  ----------------------------------------------------------------------------------------------------
  -- Dahua default org code
  ----------------------------------------------------------------------------------------------------
  c_Default_Root_Org_Code constant varchar2(3) := '001';
  ----------------------------------------------------------------------------------------------------
  c_Utc_Timezone_Code constant varchar2(3) := 'UTC';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Api_Service_Name constant varchar2(100) := 'com.verifix.vhr.hikvision.HikvisionRuntimeService';
  c_Hik_Begin_Time       constant varchar2(50) := '2020-01-01T00:00:00+00:00';
  c_Hik_End_Time         constant varchar2(50) := '2037-12-31T23:59:59+00:00'; -- max allowed effective date
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision request paths
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Request_Path_Get_Events              constant varchar2(100 char) := '/artemis/api/acs/v1/door/events';
  c_Hik_Request_Path_Get_Access_Levels       constant varchar2(100 char) := '/artemis/api/acs/v1/privilege/group';
  c_Hik_Request_Path_Get_Devices             constant varchar2(100 char) := '/artemis/api/resource/v1/acsDevice/acsDeviceList';
  c_Hik_Request_Path_Get_Doors               constant varchar2(100 char) := '/artemis/api/resource/v1/acsDoor/acsDoorList';
  c_Hik_Request_Path_Get_Organizations       constant varchar2(100 char) := '/artemis/api/resource/v1/org/orgList';
  c_Hik_Request_Path_Get_Persons             constant varchar2(100 char) := '/artemis/api/resource/v1/person/personList';
  c_Hik_Request_Path_Get_Person_Photo        constant varchar2(100 char) := '/artemis/api/resource/v1/person/picture_data';
  c_Hik_Request_Path_Subscribe_To_Tracks     constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionByEventTypes';
  c_Hik_Request_Path_Unsubscribe_From_Tracks constant varchar2(100 char) := '/artemis/api/eventService/v1/eventUnSubscriptionByEventTypes';
  c_Hik_Request_Path_Subscriptions_List      constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionView';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Device_Status_Offline constant number := 0;
  c_Hik_Device_Status_Online  constant number := 1;
  c_Hik_Device_Status_Unknown constant number := 2;
  ----------------------------------------------------------------------------------------------------  
  -- Dahua device statuses
  ----------------------------------------------------------------------------------------------------  
  c_Dss_Device_Status_Offline constant number := 0;
  c_Dss_Device_Status_Online  constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision door states
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Door_State_Remain_Open   constant varchar2(2) := 'RO';
  c_Hik_Door_State_Closed        constant varchar2(1) := 'C';
  c_Hik_Door_State_Open          constant varchar2(1) := 'O';
  c_Hik_Door_State_Remain_Closed constant varchar2(2) := 'RC';
  c_Hik_Door_State_Offline       constant varchar2(1) := 'F';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision access level types
  ----------------------------------------------------------------------------------------------------
  c_Hik_Access_Level_Type_Access_Control number := 1;
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event types (Verifix side)
  ----------------------------------------------------------------------------------------------------
  c_Hik_Event_Type_From_Notifications constant varchar2(1) := 'N';
  c_Hik_Event_Type_Manually_Retrieved constant varchar2(1) := 'M';
  c_Hik_Event_Type_Loaded_By_Job      constant varchar2(1) := 'J';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event type codes
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Code_By_Face        constant number := 196893;
  c_Hik_Event_Code_By_Fingerprint constant number := 200516;
  c_Hik_Event_Code_By_Card        constant number := 198914;
  ----------------------------------------------------------------------------------------------------
  -- Hikvision event receiver data
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Receiver_Route_Uri constant varchar2(100 char) := 'hik/event_receiver';
  ----------------------------------------------------------------------------------------------------
  -- device attach kind
  ----------------------------------------------------------------------------------------------------
  c_Device_Attach_Primary   constant varchar2(1) := 'P';
  c_Device_Attach_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- device types 
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- DSS TRACK SOURCE
  ----------------------------------------------------------------------------------------------------
  c_Dss_Track_Source_Manual constant varchar2(1) := 'M';
  c_Dss_Track_Source_Queue  constant varchar2(1) := 'Q';
  c_Dss_Track_Source_Job    constant varchar2(1) := 'J';
  ----------------------------------------------------------------------------------------------------
  -- HIK TRACK TYPES
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Track_Type_Input  constant number := 1;
  c_Hik_Track_Type_Output constant number := 2;
  ----------------------------------------------------------------------------------------------------
  c_Unknown_Person_Code constant number := -1;
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Delimiter constant varchar2(1) := '#';
end Hac_Pref;
/
create or replace package body Hac_Pref is
end Hac_Pref;
/

create or replace package Hac_Util is
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Primary_Company(i_Device_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Take_Server_By_Host_Url(i_Host_Url varchar2) return Hac_Servers%rowtype;
  ---------------------------------------------------------------------------------------------------- 
  Function Date_To_Unix_Ts
  (
    i_Date     in date,
    i_Timezone varchar2 := Sessiontimezone
  ) return number;
  ---------------------------------------------------------------------------------------------------- 
  Function Unix_Ts_To_Date(i_Timestamp in number) return date;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Uuid return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Hik_External_Code return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Isup_Password return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Gen_Token return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Hik_Ex_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Door_Code_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Door_Code
  (
    i_Server_Id number,
    i_Door_Code varchar2
  ) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Access_Level_Code_By_Name
  (
    i_Server_Id         number,
    i_Access_Level_Name varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Dss_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_Code
  (
    i_Server_Id   number,
    i_Company_Id  number,
    i_Person_Code varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Extract_Device_Code(i_Channel_Id varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Take_Main_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Dss_Name(i_Real_Name varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_File(i_Sha varchar2) return blob;
  ----------------------------------------------------------------------------------------------------
  Function Is_Good_Event_Type
  (
    i_Device_Type_Id  number,
    i_Event_Type_Code number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Device_Status varchar2) return varchar2;
  Function Device_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Hik_Device_Status(i_Hik_Device_Status number) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Dss_Device_Status(i_Dss_Device_Status number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State(i_Door_State varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Kind(i_Attach_Kind varchar2) return varchar2;
  Function Device_Attach_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Combined_Event_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Combined_Event_Type
  (
    i_Event_Types_Codes Array_Varchar2,
    i_Event_Type_Names  Array_Varchar2
  ) return varchar2;
end Hac_Util;
/
create or replace package body Hac_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HAC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number is
    result number;
  begin
    select q.Device_Type_Id
      into result
      from Hac_Device_Types q
     where q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Primary_Company(i_Device_Id number) return number is
    result number;
  begin
    select Cd.Company_Id
      into result
      from Hac_Company_Devices Cd
     where Cd.Device_Id = i_Device_Id
       and Cd.Attach_Kind = Hac_Pref.c_Device_Attach_Primary;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Server_By_Host_Url(i_Host_Url varchar2) return Hac_Servers%rowtype is
    r_Server Hac_Servers%rowtype;
  begin
    select q.*
      into r_Server
      from Hac_Servers q
     where q.Host_Url = i_Host_Url;
  
    return r_Server;
  exception
    when No_Data_Found then
      return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Date_To_Unix_Ts
  (
    i_Date     in date,
    i_Timezone varchar2 := Sessiontimezone
  ) return number is
    v_Date date := Htt_Util.Timestamp_To_Date(i_Timestamp => Htt_Util.Convert_Timestamp(i_Date     => i_Date,
                                                                                        i_Timezone => i_Timezone),
                                              i_Timezone  => Hac_Pref.c_Utc_Timezone_Code);
  begin
    return Trunc((v_Date - to_date('01.01.1970', 'dd.mm.yyyy')) * 60 * 60 * 24);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Unix_Ts_To_Date(i_Timestamp in number) return date is
  begin
    return to_date('01.01.1970', 'dd.mm.yyyy') + Numtodsinterval(i_Timestamp, 'second');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Uuid return varchar2 is
  begin
    return Rawtohex(Sys_Guid());
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Hik_External_Code return varchar2 is
  begin
    return Substr(Rawtohex(Sys_Guid()), 1, 16);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Isup_Password return varchar2 is
  begin
    return Dbms_Random.String('x', 8);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gen_Token return varchar2 is
    v_Src raw(256) := Dbms_Crypto.Randombytes(128);
  begin
    return Dbms_Crypto.Hash(Src => v_Src, Typ => Dbms_Crypto.Hash_Sh256);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Hik_Ex_Devices%rowtype is
    result Hac_Hik_Ex_Devices%rowtype;
  begin
    select *
      into result
      from Hac_Hik_Ex_Devices t
     where t.Server_Id = i_Server_Id
       and t.Device_Name = i_Device_Name;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Door_Code_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return varchar2 is
    result Hac_Hik_Ex_Doors.Door_Code%type;
  begin
    select t.Door_Code
      into result
      from Hac_Hik_Ex_Doors t
     where t.Server_Id = i_Server_Id
       and t.Device_Code = i_Device_Code;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Door_Code
  (
    i_Server_Id number,
    i_Door_Code varchar2
  ) return Hac_Hik_Devices%rowtype is
    result Hac_Hik_Devices%rowtype;
  begin
    select t.*
      into result
      from Hac_Hik_Devices t
     where t.Server_Id = i_Server_Id
       and t.Door_Code = i_Door_Code;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Access_Level_Code_By_Name
  (
    i_Server_Id         number,
    i_Access_Level_Name varchar2
  ) return varchar2 is
    result Hac_Hik_Ex_Access_Levels.Access_Level_Code%type;
  begin
    select t.Access_Level_Code
      into result
      from Hac_Hik_Ex_Access_Levels t
     where t.Server_Id = i_Server_Id
       and t.Access_Level_Name = i_Access_Level_Name;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select p.*
      into r_Device
      from Hac_Devices q
      join Hac_Dss_Devices p
        on q.Server_Id = p.Server_Id
       and q.Device_Id = p.Device_Id
     where q.Server_Id = i_Server_Id
       and q.Device_Name = i_Device_Name;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Dss_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Dss_Devices q
     where q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Hik_Devices%rowtype is
    r_Device Hac_Hik_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Hik_Devices q
     where q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Dss_Devices q
     where q.Server_Id = i_Server_Id
       and q.Device_Code = i_Device_Code;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Hik_Devices%rowtype is
    r_Device Hac_Hik_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Hik_Devices q
     where q.Server_Id = i_Server_Id
       and q.Device_Code = i_Device_Code;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_Code
  (
    i_Server_Id   number,
    i_Company_Id  number,
    i_Person_Code varchar2
  ) return number is
    v_Person_Id number;
  begin
    select Sp.Person_Id
      into v_Person_Id
      from Hac_Server_Persons Sp
     where Sp.Company_Id = i_Company_Id
       and Sp.Server_Id = i_Server_Id
       and Sp.Person_Code = i_Person_Code;
  
    return v_Person_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Extract_Device_Code(i_Channel_Id varchar2) return varchar2 is
    -- device channel_id consists of 4 elements
    -- and looks like: device_code$7$0$0
    -- 7 stands for "access control" channel type
    v_Parsed_Channel Array_Varchar2;
  begin
    v_Parsed_Channel := Fazo.Split(i_Channel_Id, '$');
  
    if v_Parsed_Channel.Count != 4 then
      b.Raise_Error('not a channel code');
    end if;
  
    return v_Parsed_Channel(1);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Any_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
    result varchar2(64);
  begin
    select q.Photo_Sha
      into result
      from Htt_Person_Photos q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id
     order by q.Photo_Sha
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Main_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
    result varchar2(64);
  begin
    select q.Photo_Sha
      into result
      from Htt_Person_Photos q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id
       and q.Is_Main = 'Y'
       and Rownum = 1;
  
    return result;
  exception
    when No_Data_Found then
      return Take_Any_Photo(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dss_Name(i_Real_Name varchar2) return varchar2 is
  begin
    return i_Real_Name || ':' || Hac_Next.Name_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_File(i_Sha varchar2) return blob is
    v_File blob;
  begin
    select q.File_Content
      into v_File
      from Biruni_Filespace q
     where q.Sha = i_Sha;
  
    return v_File;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Good_Event_Type
  (
    i_Device_Type_Id  number,
    i_Event_Type_Code number
  ) return boolean is
    r_Event_Type Hac_Event_Types%rowtype;
  begin
    r_Event_Type := z_Hac_Event_Types.Take(i_Device_Type_Id  => i_Device_Type_Id,
                                           i_Event_Type_Code => i_Event_Type_Code);
    return r_Event_Type.Access_Granted = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Offline return varchar2 is
  begin
    return t('device_status:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Online return varchar2 is
  begin
    return t('device_status:online');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Unknown return varchar2 is
  begin
    return t('device_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Device_Status varchar2) return varchar2 is
  begin
    return --
    case i_Device_Status --
    when Hac_Pref.c_Device_Status_Offline then t_Device_Status_Offline --
    when Hac_Pref.c_Device_Status_Online then t_Device_Status_Online --
    when Hac_Pref.c_Device_Status_Unknown then t_Device_Status_Unknown -- 
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- maps Hikvision device status to hac_devices.status
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Hik_Device_Status(i_Hik_Device_Status number) return varchar2 is
  begin
    return --
    case i_Hik_Device_Status --
    when Hac_Pref.c_Hik_Device_Status_Offline then Hac_Pref.c_Device_Status_Offline --
    when Hac_Pref.c_Hik_Device_Status_Online then Hac_Pref.c_Device_Status_Online --
    when Hac_Pref.c_Hik_Device_Status_Unknown then Hac_Pref.c_Device_Status_Unknown -- 
    else Hac_Pref.c_Device_Status_Unknown --
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Map_Dss_Device_Status(i_Dss_Device_Status number) return varchar2 is
  begin
    return --
    case i_Dss_Device_Status --
    when Hac_Pref.c_Dss_Device_Status_Offline then Hac_Pref.c_Device_Status_Offline --
    when Hac_Pref.c_Dss_Device_Status_Online then Hac_Pref.c_Device_Status_Online --
    else Hac_Pref.c_Device_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Hikvision door states
  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Remain_Open return varchar2 is
  begin
    return t('hik_door_state:remain open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Closed return varchar2 is
  begin
    return t('hik_door_state:closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Open return varchar2 is
  begin
    return t('hik_door_state:open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Remain_Closed return varchar2 is
  begin
    return t('hik_door_state:remain closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Offline return varchar2 is
  begin
    return t('hik_door_state:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State(i_Door_State varchar2) return varchar2 is
  begin
    return --
    case i_Door_State --
    when Hac_Pref.c_Hik_Door_State_Remain_Open then t_Hik_Door_State_Remain_Open --
    when Hac_Pref.c_Hik_Door_State_Closed then t_Hik_Door_State_Closed --
    when Hac_Pref.c_Hik_Door_State_Open then t_Hik_Door_State_Open -- 
    when Hac_Pref.c_Hik_Door_State_Remain_Closed then t_Hik_Door_State_Remain_Closed --
    when Hac_Pref.c_Hik_Door_State_Offline then t_Hik_Door_State_Offline -- 
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hac_Pref.c_Device_Status_Offline, --
                                          Hac_Pref.c_Device_Status_Online,
                                          Hac_Pref.c_Device_Status_Unknown),
                           Array_Varchar2(t_Device_Status_Offline, --
                                          t_Device_Status_Online,
                                          t_Device_Status_Unknown));
  end;

  ----------------------------------------------------------------------------------------------------
  -- device attach kinds
  ---------------------------------------------------------------------------------------------------- 
  Function t_Device_Attach_Primary return varchar2 is
  begin
    return t('device_attach:primary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Secondary return varchar2 is
  begin
    return t('device_attach:secondary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Kind(i_Attach_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Attach_Kind --
    when Hac_Pref.c_Device_Attach_Primary then t_Device_Attach_Primary --
    when Hac_Pref.c_Device_Attach_Secondary then t_Device_Attach_Secondary --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Attach_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hac_Pref.c_Device_Attach_Primary, --
                                          Hac_Pref.c_Device_Attach_Secondary),
                           Array_Varchar2(t_Device_Attach_Primary, --
                                          t_Device_Attach_Secondary));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Combined_Event_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2('196893' || Hac_Pref.c_Event_Type_Delimiter || '198914',
                                          t('face or card')));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Combined_Event_Type
  (
    i_Event_Types_Codes Array_Varchar2,
    i_Event_Type_Names  Array_Varchar2
  ) return varchar2 is
    v_Event_Type_Code varchar2(500) := Fazo.Gather(i_Event_Types_Codes,
                                                   Hac_Pref.c_Event_Type_Delimiter);
    v_Static_Types    Matrix_Varchar2 := Combined_Event_Types;
  begin
    if i_Event_Type_Names.Count = 1 then
      return i_Event_Type_Names(1);
    end if;
  
    for i in 1 .. v_Static_Types.Count
    loop
      if v_Event_Type_Code = v_Static_Types(i) (1) then
        return v_Static_Types(i)(2);
      end if;
    end loop;
  
    return Fazo.Gather(i_Event_Type_Names, ' / ');
  end;

end Hac_Util;
/

create or replace package Hpr_Api is
  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Cv_Contract_Fact_New
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_To_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Accept
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Return_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Penalty_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Save(i_Wage_Sheet Hpr_Pref.Wage_Sheet_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Delete
  (
    i_Company_Id   number,
    i_Oper_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Save(i_Charge_Document Hpr_Pref.Charge_Document_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Coef_Save
  (
    i_Company_Id number,
    i_Value      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Save(i_Sales_Bonus_Payment Hpr_Pref.Sales_Bonus_Payment_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Settings_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Currency_Ids Array_Number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Fill_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Settings   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Use_Subfilial_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Setting    varchar2
  );
end Hpr_Api;
/
create or replace package body Hpr_Api is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt) is
  begin
    Hpr_Core.Cv_Contract_Fact_Save(i_Contract_Fact);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then
      Hpr_Error.Raise_020(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_New));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_To_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New then
      Hpr_Error.Raise_021(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Complete));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Accept
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact     Hpr_Cv_Contract_Facts%rowtype;
    r_Contract Hpd_Cv_Contracts%rowtype;
    v_Account  Mk_Account;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then
      Hpr_Error.Raise_022(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Accept));
  
    Mk_Journal.Pick(i_Company_Id   => r_Fact.Company_Id,
                    i_Filial_Id    => r_Fact.Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Cv_Contract_Fact(r_Fact.Fact_Id),
                    i_Trans_Date   => r_Fact.Month);
  
    Mk_Journal.Clear;
  
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => r_Fact.Company_Id,
                                               i_Filial_Id   => r_Fact.Filial_Id,
                                               i_Contract_Id => r_Fact.Contract_Id);
    v_Account  := Mkr_Account.Payroll_Accrual(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Currency_Id => z_Mk_Base_Currencies.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Currency_Id,
                                              i_Ref_Codes   => Mkr_Account.Ref_Codes(i_Person_Id => r_Contract.Person_Id));
  
    Mk_Journal.Add_Trans(i_Debit  => Mkr_Account.Expense_Others(i_Company_Id => r_Fact.Company_Id,
                                                                i_Filial_Id  => r_Fact.Filial_Id),
                         i_Credit => v_Account,
                         i_Amount => r_Fact.Total_Amount);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Return_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Accept then
      Hpr_Error.Raise_023(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Complete));
  
    Mk_Journal.Pick(i_Company_Id   => r_Fact.Company_Id,
                    i_Filial_Id    => r_Fact.Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Cv_Contract_Fact(r_Fact.Fact_Id),
                    i_Trans_Date   => r_Fact.Month);
  
    Mk_Journal.Clear;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt) is
  begin
    Hpr_Core.Penalty_Save(i_Penalty);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Penalty_Id number
  ) is
  begin
    z_Hpr_Penalties.Delete_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Penalty_Id => i_Penalty_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt) is
  begin
    Hpr_Core.Timebook_Save(i_Timebook);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'Y' then
      Hpr_Error.Raise_024(r_Timebook.Timebook_Number);
    end if;
  
    Hpr_Core.Lock_Timesheets(i_Company_Id   => r_Timebook.Company_Id,
                             i_Filial_Id    => r_Timebook.Filial_Id,
                             i_Timebook_Id  => r_Timebook.Timebook_Id,
                             i_Period_Begin => r_Timebook.Period_Begin,
                             i_Period_End   => r_Timebook.Period_End);
  
    Hpr_Core.Timebook_Staffs_Update(i_Company_Id   => r_Timebook.Company_Id,
                                    i_Filial_Id    => r_Timebook.Filial_Id,
                                    i_Timebook_Id  => r_Timebook.Timebook_Id,
                                    i_Period_Begin => r_Timebook.Period_Begin,
                                    i_Period_End   => r_Timebook.Period_End);
  
    for St in (select q.Staff_Id
                 from Hpr_Timebook_Staffs q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Timebook_Id = i_Timebook_Id)
    loop
      Hpd_Api.Timebook_Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id,
                                            i_Staff_Id    => St.Staff_Id,
                                            i_Begin_Date  => r_Timebook.Period_Begin,
                                            i_End_Date    => r_Timebook.Period_End);
    end loop;
  
    z_Hpr_Timebooks.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id,
                               i_Posted      => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'N' then
      Hpr_Error.Raise_025(r_Timebook.Timebook_Number);
    end if;
  
    Hpr_Core.Unlock_Timesheets(i_Company_Id  => r_Timebook.Company_Id,
                               i_Filial_Id   => r_Timebook.Filial_Id,
                               i_Timebook_Id => r_Timebook.Timebook_Id);
  
    for r in (select q.Staff_Id, q.Interval_Id
                from Hpr_Timebook_Intervals q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Timebook_Id = i_Timebook_Id)
    loop
      z_Hpr_Timebook_Intervals.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Timebook_Id => i_Timebook_Id,
                                          i_Staff_Id    => r.Staff_Id);
    
      Hpd_Api.Lock_Interval_Delete(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Interval_Id => r.Interval_Id);
    end loop;
  
    z_Hpr_Timebooks.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id,
                               i_Posted      => Option_Varchar2('N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'Y' then
      Hpr_Error.Raise_026(r_Timebook.Timebook_Number);
    end if;
  
    z_Hpr_Timebooks.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Save(i_Wage_Sheet Hpr_Pref.Wage_Sheet_Rt) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  
    v_Exists      boolean := false;
    v_Round_Model Round_Model;
    v_Staff       Hpr_Pref.Sheet_Staff_Rt;
  begin
    if z_Hpr_Wage_Sheets.Exist_Lock(i_Company_Id => i_Wage_Sheet.Company_Id,
                                    i_Filial_Id  => i_Wage_Sheet.Filial_Id,
                                    i_Sheet_Id   => i_Wage_Sheet.Sheet_Id,
                                    o_Row        => r_Sheet) then
      if r_Sheet.Posted = 'Y' then
        Hpr_Error.Raise_027(r_Sheet.Sheet_Number);
      end if;
    
      v_Exists := true;
    else
      r_Sheet.Company_Id := i_Wage_Sheet.Company_Id;
      r_Sheet.Filial_Id  := i_Wage_Sheet.Filial_Id;
      r_Sheet.Sheet_Id   := i_Wage_Sheet.Sheet_Id;
      r_Sheet.Posted     := 'N';
    
      v_Exists := false;
    end if;
  
    r_Sheet.Sheet_Number := i_Wage_Sheet.Sheet_Number;
    r_Sheet.Sheet_Date   := i_Wage_Sheet.Sheet_Date;
    r_Sheet.Division_Id  := i_Wage_Sheet.Division_Id;
    r_Sheet.Period_Begin := i_Wage_Sheet.Period_Begin;
    r_Sheet.Period_End   := i_Wage_Sheet.Period_End;
    r_Sheet.Period_Kind  := i_Wage_Sheet.Period_Kind;
    r_Sheet.Note         := i_Wage_Sheet.Note;
    r_Sheet.Sheet_Kind   := i_Wage_Sheet.Sheet_Kind;
    r_Sheet.Round_Value  := Nvl(i_Wage_Sheet.Round_Value, Hpr_Pref.c_Default_Round_Value);
  
    if v_Exists then
      z_Hpr_Wage_Sheets.Update_Row(r_Sheet);
    else
      if r_Sheet.Sheet_Number is null then
        r_Sheet.Sheet_Number := Md_Core.Gen_Number(i_Company_Id => i_Wage_Sheet.Company_Id,
                                                   i_Filial_Id  => i_Wage_Sheet.Filial_Id,
                                                   i_Table      => Zt.Hpr_Wage_Sheets,
                                                   i_Column     => z.Sheet_Id);
      end if;
    
      z_Hpr_Wage_Sheets.Insert_Row(r_Sheet);
    end if;
  
    -- delete staffs' parts
    delete Hpr_Sheet_Parts q
     where q.Company_Id = r_Sheet.Company_Id
       and q.Filial_Id = r_Sheet.Filial_Id
       and q.Sheet_Id = r_Sheet.Sheet_Id;
  
    -- delete sheet staffs
    delete Hpr_Onetime_Sheet_Staffs q
     where q.Company_Id = r_Sheet.Company_Id
       and q.Filial_Id = r_Sheet.Filial_Id
       and q.Sheet_Id = r_Sheet.Sheet_Id;
  
    if r_Sheet.Sheet_Kind = Hpr_Pref.c_Wage_Sheet_Regular then
      if i_Wage_Sheet.Sheet_Staffs.Count > 0 then
        Hpr_Error.Raise_036;
      end if;
    
      v_Round_Model := Round_Model(r_Sheet.Round_Value);
    
      -- inserting staff parts
      for i in 1 .. i_Wage_Sheet.Staff_Ids.Count
      loop
        Hpr_Core.Sheet_Staff_Insert(i_Company_Id   => r_Sheet.Company_Id,
                                    i_Filial_Id    => r_Sheet.Filial_Id,
                                    i_Sheet_Id     => r_Sheet.Sheet_Id,
                                    i_Staff_Id     => i_Wage_Sheet.Staff_Ids(i),
                                    i_Period_Begin => r_Sheet.Period_Begin,
                                    i_Period_End   => r_Sheet.Period_End,
                                    i_Round_Model  => v_Round_Model);
      end loop;
    else
      if i_Wage_Sheet.Staff_Ids.Count > 0 then
        Hpr_Error.Raise_037;
      end if;
    
      -- inserting staffs
      for i in 1 .. i_Wage_Sheet.Sheet_Staffs.Count
      loop
        v_Staff := i_Wage_Sheet.Sheet_Staffs(i);
      
        Hpr_Core.Onetime_Staff_Insert(i_Company_Id     => r_Sheet.Company_Id,
                                      i_Filial_Id      => r_Sheet.Filial_Id,
                                      i_Sheet_Id       => r_Sheet.Sheet_Id,
                                      i_Staff_Id       => v_Staff.Staff_Id,
                                      i_Period_Begin   => r_Sheet.Period_Begin,
                                      i_Period_End     => r_Sheet.Period_End,
                                      i_Accrual_Amount => v_Staff.Accrual_Amount,
                                      i_Penalty_Amount => v_Staff.Penalty_Amount);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'Y' then
      Hpr_Error.Raise_028(r_Sheet.Sheet_Number);
    end if;
  
    z_Hpr_Wage_Sheets.Delete_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'Y' then
      Hpr_Error.Raise_029(r_Sheet.Sheet_Number);
    end if;
  
    if r_Sheet.Sheet_Kind = Hpr_Pref.c_Wage_Sheet_Regular then
      Hpr_Core.Sheet_Staffs_Update(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Sheet_Id     => i_Sheet_Id,
                                   i_Period_Begin => r_Sheet.Period_Begin,
                                   i_Period_End   => r_Sheet.Period_End,
                                   i_Round_Model  => Round_Model(r_Sheet.Round_Value));
    else
      Hpr_Core.Onetime_Sheet_Update(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Sheet_Id     => i_Sheet_Id,
                                    i_Period_Begin => r_Sheet.Period_Begin,
                                    i_Period_End   => r_Sheet.Period_End);
    end if;
  
    z_Hpr_Wage_Sheets.Update_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id,
                                 i_Posted     => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'N' then
      Hpr_Error.Raise_030(r_Sheet.Sheet_Number);
    end if;
  
    z_Hpr_Wage_Sheets.Update_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id,
                                 i_Posted     => Option_Varchar2('N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt) is
  begin
    Hpr_Core.Oper_Type_Save(i_Oper_Type);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Delete
  (
    i_Company_Id   number,
    i_Oper_Type_Id number
  ) is
    r_Oper_Type Mpr_Oper_Types%rowtype;
  begin
    if z_Mpr_Oper_Types.Exist_Lock(i_Company_Id   => i_Company_Id,
                                   i_Oper_Type_Id => i_Oper_Type_Id,
                                   o_Row          => r_Oper_Type) then
      if r_Oper_Type.Pcode is not null then
        Hpr_Error.Raise_031(i_Oper_Type_Id => i_Oper_Type_Id, i_Oper_Type_Name => r_Oper_Type.Name);
      end if;
    
      z_Hpr_Oper_Types.Delete_One(i_Company_Id => i_Company_Id, i_Oper_Type_Id => i_Oper_Type_Id);
    
      Mpr_Api.Oper_Type_Delete(i_Company_Id => i_Company_Id, i_Oper_Type_Id => i_Oper_Type_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt) is
  begin
    Hpr_Core.Book_Save(i_Book);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Post(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Unpost(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Delete(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Save(i_Charge_Document Hpr_Pref.Charge_Document_Rt) is
    v_Exist             boolean := false;
    v_Begin_Date        date := i_Charge_Document.Month;
    v_End_Date          date := Last_Day(v_Begin_Date);
    v_Dismissal_Date    date;
    v_New_Operation_Ids Array_Number := Array_Number();
    v_Operation         Hpr_Pref.Charge_Document_Operation_Rt;
    r_Document          Hpr_Charge_Documents%rowtype;
    r_Oper_Type         Hpr_Oper_Types%rowtype;
  begin
    if z_Hpr_Charge_Documents.Exist(i_Company_Id  => i_Charge_Document.Company_Id,
                                    i_Filial_Id   => i_Charge_Document.Filial_Id,
                                    i_Document_Id => i_Charge_Document.Document_Id,
                                    o_Row         => r_Document) then
      if r_Document.Posted = 'Y' then
        Hpr_Error.Raise_047(r_Document.Document_Id);
      end if;
    
      v_Exist := true;
    else
      r_Document.Company_Id  := i_Charge_Document.Company_Id;
      r_Document.Filial_Id   := i_Charge_Document.Filial_Id;
      r_Document.Document_Id := i_Charge_Document.Document_Id;
      r_Document.Posted      := 'N';
    end if;
  
    r_Document.Document_Number := i_Charge_Document.Document_Number;
    r_Document.Month           := i_Charge_Document.Month;
    r_Document.Document_Date   := i_Charge_Document.Document_Date;
    r_Document.Document_Name   := i_Charge_Document.Document_Name;
    r_Document.Oper_Type_Id    := i_Charge_Document.Oper_Type_Id;
    r_Document.Currency_Id     := i_Charge_Document.Currency_Id;
    r_Document.Division_Id     := i_Charge_Document.Division_Id;
    r_Document.Document_Kind   := i_Charge_Document.Document_Kind;
  
    if r_Document.Document_Number is null then
      r_Document.Document_Number := Md_Core.Gen_Number(i_Company_Id => i_Charge_Document.Company_Id,
                                                       i_Filial_Id  => i_Charge_Document.Filial_Id,
                                                       i_Table      => Zt.Hpr_Charge_Documents,
                                                       i_Column     => z.Document_Id);
    end if;
  
    if r_Document.Oper_Type_Id is not null then
      r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Charge_Document.Company_Id,
                                           i_Oper_Type_Id => r_Document.Oper_Type_Id);
    
      if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Entered then
        Hpr_Error.Raise_051(r_Oper_Type.Oper_Type_Id);
      end if;
    end if;
  
    if v_Exist then
      z_Hpr_Charge_Documents.Update_Row(i_Row => r_Document);
    else
      z_Hpr_Charge_Documents.Insert_Row(i_Row => r_Document);
    end if;
  
    for i in 1 .. i_Charge_Document.Operations.Count
    loop
      v_Operation := i_Charge_Document.Operations(i);
    
      r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Charge_Document.Company_Id,
                                           i_Oper_Type_Id => v_Operation.Oper_Type_Id);
    
      if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Entered then
        Hpr_Error.Raise_051(r_Oper_Type.Oper_Type_Id);
      end if;
    
      v_Dismissal_Date := z_Href_Staffs.Load(i_Company_Id => i_Charge_Document.Company_Id, --
                          i_Filial_Id => i_Charge_Document.Filial_Id, --
                          i_Staff_Id => v_Operation.Staff_Id).Dismissal_Date;
    
      z_Hpr_Charge_Document_Operations.Save_One(i_Company_Id   => i_Charge_Document.Company_Id,
                                                i_Filial_Id    => i_Charge_Document.Filial_Id,
                                                i_Document_Id  => i_Charge_Document.Document_Id,
                                                i_Operation_Id => v_Operation.Operation_Id,
                                                i_Staff_Id     => v_Operation.Staff_Id,
                                                i_Amount       => v_Operation.Amount,
                                                i_Note         => v_Operation.Note);
    
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Charge_Document.Company_Id,
                             i_Filial_Id    => i_Charge_Document.Filial_Id,
                             i_Charge_Id    => v_Operation.Charge_Id,
                             i_Interval_Id  => null,
                             i_Doc_Oper_Id  => v_Operation.Operation_Id,
                             i_Staff_Id     => v_Operation.Staff_Id,
                             i_Oper_Type_Id => v_Operation.Oper_Type_Id,
                             i_Begin_Date   => v_Begin_Date,
                             i_End_Date     => Least(Nvl(v_Dismissal_Date, v_End_Date), v_End_Date),
                             i_Currency_Id  => i_Charge_Document.Currency_Id,
                             i_Amount       => Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Charge_Document.Company_Id,
                                                                        i_Filial_Id   => i_Charge_Document.Filial_Id,
                                                                        i_Currency_Id => i_Charge_Document.Currency_Id,
                                                                        i_Rate_Date   => v_End_Date,
                                                                        i_Amount      => v_Operation.Amount),
                             i_Status       => Hpr_Pref.c_Charge_Status_Draft);
    
      v_New_Operation_Ids.Extend();
      v_New_Operation_Ids(v_New_Operation_Ids.Count) := v_Operation.Operation_Id;
    end loop;
  
    delete Hpr_Charge_Document_Operations q
     where q.Company_Id = i_Charge_Document.Company_Id
       and q.Filial_Id = i_Charge_Document.Filial_Id
       and q.Document_Id = i_Charge_Document.Document_Id
       and q.Operation_Id not in (select *
                                    from table(v_New_Operation_Ids));
  
  end;
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'Y' then
      Hpr_Error.Raise_047(i_Document_Number => r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Update_One(i_Company_Id  => r_Document.Company_Id,
                                      i_Filial_Id   => r_Document.Filial_Id,
                                      i_Document_Id => r_Document.Document_Id,
                                      i_Posted      => Option_Varchar2('Y'));
  
    for r in (select Ch.Charge_Id, --
                     q.Document_Id
                from Hpr_Charge_Document_Operations q
                join Hpr_Charges Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Doc_Oper_Id = q.Operation_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Document_Id = i_Documentr_Id)
    loop
      Hpr_Core.Charge_New(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Charge_Id   => r.Charge_Id,
                          i_Document_Id => r.Document_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'N' then
      Hpr_Error.Raise_050(i_Document_Number => r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Document_Id => i_Documentr_Id,
                                      i_Posted      => Option_Varchar2('N'));
  
    for r in (select Ch.Charge_Id, -- 
                     q.Document_Id
                from Hpr_Charge_Document_Operations q
                join Hpr_Charges Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Doc_Oper_Id = q.Operation_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Document_Id = i_Documentr_Id)
    loop
      Hpr_Core.Charge_Draft(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Charge_Id   => r.Charge_Id,
                            i_Document_Id => r.Document_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'Y' then
      Hpr_Error.Raise_048(r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Document_Id => i_Documentr_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt) is
  begin
    Hpr_Core.Advance_Save(i_Advance);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Coef_Save
  (
    i_Company_Id number,
    i_Value      number
  ) is
  begin
    if i_Value < 0 then
      Hpr_Error.Raise_032(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hpr_Pref.c_Overtime_Coef,
                           i_Value      => Nvl(i_Value, Hpr_Pref.c_Overtime_Coef_Default));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Save(i_Sales_Bonus_Payment Hpr_Pref.Sales_Bonus_Payment_Rt) is
    r_Payment       Hpr_Sales_Bonus_Payments%rowtype;
    v_Operation     Hpr_Pref.Sales_Bonus_Payment_Operation_Rt;
    v_Operation_Ids Array_Number := Array_Number();
    v_Periods       Array_Date;
    v_Period_Begin  date;
    v_Period_End    date;
    v_Amount        number;
    v_Sales_Amount  number;
    v_Tot_Amount    number := 0;
    v_Exists        boolean;
  begin
    if z_Hpr_Sales_Bonus_Payments.Exist_Lock(i_Company_Id => i_Sales_Bonus_Payment.Company_Id,
                                             i_Filial_Id  => i_Sales_Bonus_Payment.Filial_Id,
                                             i_Payment_Id => i_Sales_Bonus_Payment.Payment_Id,
                                             o_Row        => r_Payment) then
      if r_Payment.Posted = 'Y' then
        Hpr_Error.Raise_038(Nvl(i_Sales_Bonus_Payment.Payment_Number, r_Payment.Payment_Number));
      end if;
    
      v_Exists := true;
    else
      r_Payment.Company_Id := i_Sales_Bonus_Payment.Company_Id;
      r_Payment.Filial_Id  := i_Sales_Bonus_Payment.Filial_Id;
      r_Payment.Payment_Id := i_Sales_Bonus_Payment.Payment_Id;
      r_Payment.Posted     := 'N';
    
      v_Exists := false;
    end if;
  
    r_Payment.Payment_Number := i_Sales_Bonus_Payment.Payment_Number;
    r_Payment.Payment_Date   := i_Sales_Bonus_Payment.Payment_Date;
    r_Payment.Payment_Name   := i_Sales_Bonus_Payment.Payment_Name;
    r_Payment.Begin_Date     := i_Sales_Bonus_Payment.Begin_Date;
    r_Payment.End_Date       := i_Sales_Bonus_Payment.End_Date;
    r_Payment.Division_Id    := i_Sales_Bonus_Payment.Division_Id;
    r_Payment.Job_Id         := i_Sales_Bonus_Payment.Job_Id;
    r_Payment.Bonus_Type     := i_Sales_Bonus_Payment.Bonus_Type;
    r_Payment.Payment_Type   := i_Sales_Bonus_Payment.Payment_Type;
    r_Payment.Amount         := 0;
    r_Payment.Note           := i_Sales_Bonus_Payment.Note;
  
    if r_Payment.Payment_Type = Mpr_Pref.c_Pt_Cashbox then
      r_Payment.Cashbox_Id      := i_Sales_Bonus_Payment.Cashbox_Id;
      r_Payment.Bank_Account_Id := null;
    else
      r_Payment.Cashbox_Id      := null;
      r_Payment.Bank_Account_Id := i_Sales_Bonus_Payment.Bank_Account_Id;
    end if;
  
    if v_Exists then
      z_Hpr_Sales_Bonus_Payments.Update_Row(r_Payment);
    else
      if r_Payment.Payment_Number is null then
        r_Payment.Payment_Number := Md_Core.Gen_Number(i_Company_Id => r_Payment.Company_Id,
                                                       i_Filial_Id  => r_Payment.Filial_Id,
                                                       i_Table      => Zt.Hpr_Sales_Bonus_Payments,
                                                       i_Column     => z.Payment_Id);
      end if;
    
      r_Payment.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Hpr_Sales_Bonus_Payments,
                                               i_Id    => r_Payment.Payment_Id);
    
      z_Hpr_Sales_Bonus_Payments.Insert_Row(r_Payment);
    end if;
  
    v_Operation_Ids.Extend(i_Sales_Bonus_Payment.Operations.Count);
  
    for i in 1 .. i_Sales_Bonus_Payment.Operations.Count
    loop
      v_Operation    := i_Sales_Bonus_Payment.Operations(i);
      v_Amount       := 0;
      v_Sales_Amount := 0;
      v_Periods      := Array_Date();
    
      if Hpr_Util.Is_Staff_Sales_Bonus_Calced(i_Company_Id   => r_Payment.Company_Id,
                                              i_Filial_Id    => r_Payment.Filial_Id,
                                              i_Staff_Id     => v_Operation.Staff_Id,
                                              i_Bonus_Type   => v_Operation.Bonus_Type,
                                              i_Period_Begin => v_Operation.Period_Begin,
                                              i_Period_End   => v_Operation.Period_End,
                                              o_Period_Begin => v_Period_Begin,
                                              o_Period_End   => v_Period_End) = 'Y' then
        Hpr_Error.Raise_039(i_Payment_Number  => r_Payment.Payment_Number,
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Payment.Company_Id,
                                                                      i_Filial_Id  => r_Payment.Filial_Id,
                                                                      i_Staff_Id   => v_Operation.Staff_Id),
                            i_Bonus_Type_Name => Hrm_Util.t_Bonus_Type(v_Operation.Bonus_Type),
                            i_Period_Begin    => v_Period_Begin,
                            i_Period_End      => v_Period_End);
      end if;
    
      if v_Operation.Period_Begin < r_Payment.Begin_Date or
         v_Operation.Period_End > r_Payment.End_Date then
        Hpr_Error.Raise_040(i_Payment_Number  => r_Payment.Payment_Number,
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Payment.Company_Id,
                                                                      i_Filial_Id  => r_Payment.Filial_Id,
                                                                      i_Staff_Id   => v_Operation.Staff_Id),
                            i_Bonus_Type_Name => Hrm_Util.t_Bonus_Type(v_Operation.Bonus_Type),
                            i_Period_Begin    => r_Payment.Begin_Date,
                            i_Period_End      => r_Payment.End_Date);
      end if;
    
      z_Hpr_Sales_Bonus_Payment_Operations.Save_One(i_Company_Id   => r_Payment.Company_Id,
                                                    i_Filial_Id    => r_Payment.Filial_Id,
                                                    i_Operation_Id => v_Operation.Operation_Id,
                                                    i_Payment_Id   => r_Payment.Payment_Id,
                                                    i_Staff_Id     => v_Operation.Staff_Id,
                                                    i_Bonus_Type   => v_Operation.Bonus_Type,
                                                    i_Period_Begin => v_Operation.Period_Begin,
                                                    i_Period_End   => v_Operation.Period_End,
                                                    i_Job_Id       => v_Operation.Job_Id,
                                                    i_Sales_Amount => 0,
                                                    i_Percentage   => v_Operation.Percentage,
                                                    i_Amount       => 0);
    
      for j in 1 .. v_Operation.Periods.Count
      loop
        if v_Operation.Periods(j) between v_Operation.Period_Begin and v_Operation.Period_End then
          z_Hpr_Sales_Bonus_Payment_Operation_Periods.Save_One(i_Company_Id   => r_Payment.Company_Id,
                                                               i_Filial_Id    => r_Payment.Filial_Id,
                                                               i_Operation_Id => v_Operation.Operation_Id,
                                                               i_Period       => v_Operation.Periods(j),
                                                               i_Sales_Amount => v_Operation.Sales_Amounts(j),
                                                               i_Amount       => v_Operation.Amounts(j),
                                                               i_c_Staff_Id   => v_Operation.Staff_Id,
                                                               i_c_Bonus_Type => v_Operation.Bonus_Type);
        
          v_Sales_Amount := v_Sales_Amount + v_Operation.Sales_Amounts(j);
          v_Amount       := v_Amount + v_Operation.Amounts(j);
        
          Fazo.Push(v_Periods, v_Operation.Periods(j));
        end if;
      end loop;
    
      z_Hpr_Sales_Bonus_Payment_Operations.Update_One(i_Company_Id   => r_Payment.Company_Id,
                                                      i_Filial_Id    => r_Payment.Filial_Id,
                                                      i_Operation_Id => v_Operation.Operation_Id,
                                                      i_Sales_Amount => Option_Number(v_Sales_Amount),
                                                      i_Amount       => Option_Number(v_Amount));
    
      v_Tot_Amount := v_Tot_Amount + v_Amount;
      v_Operation_Ids(i) := v_Operation.Operation_Id;
    
      if v_Exists then
        delete from Hpr_Sales_Bonus_Payment_Operation_Periods q
         where q.Company_Id = r_Payment.Company_Id
           and q.Filial_Id = r_Payment.Filial_Id
           and q.Operation_Id = v_Operation.Operation_Id
           and q.Period not member of v_Periods;
      end if;
    end loop;
  
    if v_Exists then
      delete from Hpr_Sales_Bonus_Payment_Operations q
       where q.Company_Id = r_Payment.Company_Id
         and q.Filial_Id = r_Payment.Filial_Id
         and q.Payment_Id = r_Payment.Payment_Id
         and q.Operation_Id not member of v_Operation_Ids;
    end if;
  
    z_Hpr_Sales_Bonus_Payments.Update_One(i_Company_Id => r_Payment.Company_Id,
                                          i_Filial_Id  => r_Payment.Filial_Id,
                                          i_Payment_Id => r_Payment.Payment_Id,
                                          i_Amount     => Option_Number(v_Tot_Amount));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
  begin
    Hpr_Core.Sales_Bonus_Payment_Post(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
  begin
    Hpr_Core.Sales_Bonus_Payment_Unpost(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
    r_Payment Hpr_Sales_Bonus_Payments%rowtype;
  begin
    r_Payment := z_Hpr_Sales_Bonus_Payments.Lock_Load(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Payment_Id => i_Payment_Id);
  
    if r_Payment.Posted = 'Y' then
      Hpr_Error.Raise_043(r_Payment.Payment_Number);
    end if;
  
    z_Hpr_Sales_Bonus_Payments.Delete_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Settings_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Currency_Ids Array_Number
  ) is
    v_Currency_Ids Array_Number := Nvl(i_Currency_Ids, Array_Number());
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Allow_Other_Currencies,
                           i_Value      => Fazo.Gather(v_Currency_Ids,
                                                       Href_Pref.c_Settings_Separator));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Fill_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Settings   varchar2
  ) is
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Timebook_Fill_Settings,
                           i_Value      => i_Settings);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Use_Subfilial_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Setting    varchar2
  ) is
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Use_Subfilial_Settings,
                           i_Value      => i_Setting);
  end;

end Hpr_Api;
/

create or replace package Hpr_Pref is
  ----------------------------------------------------------------------------------------------------
  -- Timebook
  ----------------------------------------------------------------------------------------------------  
  type Timebook_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Timebook_Id     number,
    Timebook_Number varchar2(50 char),
    Timebook_Date   date,
    Period_Begin    date,
    Period_End      date,
    Period_Kind     varchar2(1),
    Division_Id     number,
    Barcode         varchar2(25 char),
    Note            varchar2(300 char),
    Staff_Ids       Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- Oper Type
  ----------------------------------------------------------------------------------------------------  
  type Oper_Type_Rt is record(
    Oper_Type          Mpr_Oper_Types%rowtype,
    Oper_Group_Id      number,
    Estimation_Type    varchar2(1),
    Estimation_Formula varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  -- Book
  ----------------------------------------------------------------------------------------------------
  type Book_Operation_Rt is record(
    Operation_Id number,
    Staff_Id     number,
    Charge_Id    number,
    Autofilled   varchar2(1));
  type Book_Opereration_Nt is table of Book_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Book_Rt is record(
    Book         Mpr_Pref.Book_Rt,
    Book_Type_Id number,
    Operations   Book_Opereration_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Payment
  ----------------------------------------------------------------------------------------------------
  type Advance_Rt is record(
    Payment      Mpr_Pref.Payment_Rt,
    Limit_Kind   varchar2(1),
    Days_Limit   number(3),
    Employee_Ids Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- timebook staff info
  ----------------------------------------------------------------------------------------------------
  type Timebook_Staff_Info is record(
    Staff_Id   number,
    Plan_Hours number,
    Plan_Days  number,
    Fact_Hours number,
    Fact_Days  number);
  ----------------------------------------------------------------------------------------------------
  -- Penalty
  ----------------------------------------------------------------------------------------------------
  type Penalty_Policy_Rt is record(
    Penalty_Kind         varchar2(1),
    Penalty_Type         varchar2(1),
    From_Day             number,
    To_Day               number,
    From_Time            number,
    To_Time              number,
    Penalty_Coef         number,
    Penalty_Per_Time     number,
    Penalty_Amount       number,
    Penalty_Time         number,
    Calc_After_From_Time varchar2(1));
  type Penalty_Policy_Nt is table of Penalty_Policy_Rt;
  ----------------------------------------------------------------------------------------------------
  type Penalty_Rt is record(
    Company_Id  number,
    Filial_Id   number,
    Penalty_Id  number,
    month       date,
    name        varchar2(100 char),
    Division_Id number,
    State       varchar2(1),
    Policies    Penalty_Policy_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sheet parts (regular wage sheet)
  ----------------------------------------------------------------------------------------------------
  type Sheet_Part_Rt is record(
    Part_Begin       date,
    Part_End         date,
    Division_Id      number,
    Job_Id           number,
    Schedule_Id      number,
    Fte_Id           number,
    Monthly_Amount   number,
    Plan_Amount      number,
    Wage_Amount      number,
    Overtime_Amount  number,
    Late_Amount      number,
    Early_Amount     number,
    Lack_Amount      number,
    Day_Skip_Amount  number,
    Mark_Skip_Amount number);
  type Sheet_Part_Nt is table of Sheet_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Sheet staffs (one-time wage sheet)
  ----------------------------------------------------------------------------------------------------
  type Sheet_Staff_Rt is record(
    Staff_Id       number,
    Accrual_Amount number,
    Penalty_Amount number);
  type Sheet_Staff_Nt is table of Sheet_Staff_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Wage sheet
  ----------------------------------------------------------------------------------------------------
  type Wage_Sheet_Rt is record(
    Company_Id   number,
    Filial_Id    number,
    Sheet_Id     number,
    Sheet_Number varchar2(50 char),
    Sheet_Date   date,
    Period_Begin date,
    Period_End   date,
    Period_Kind  varchar2(1),
    Division_Id  number,
    Note         varchar2(300 char),
    Round_Value  varchar2(5),
    Sheet_Kind   varchar2(1),
    Staff_Ids    Array_Number,
    Sheet_Staffs Sheet_Staff_Nt);
  ---------------------------------------------------------------------------------------------------- 
  -- Cv Contracts
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Fact_Item_Rt is record(
    Fact_Item_Id  number,
    Fact_Quantity number,
    Fact_Amount   number,
    name          varchar2(150 char));
  type Cv_Contract_Fact_Item_Nt is table of Cv_Contract_Fact_Item_Rt;
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Fact_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Fact_Id    number,
    Items      Cv_Contract_Fact_Item_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sales Bonus Payment
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Operation_Rt is record(
    Operation_Id  number,
    Staff_Id      number,
    Period_Begin  date,
    Period_End    date,
    Bonus_Type    varchar2(1),
    Job_Id        number,
    Percentage    number,
    Periods       Array_Date,
    Sales_Amounts Array_Number,
    Amounts       Array_Number);
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Operation_Nt is table of Sales_Bonus_Payment_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Payment_Id      number,
    Payment_Number  Hpr_Sales_Bonus_Payments.Payment_Number%type,
    Payment_Date    date,
    Payment_Name    Hpr_Sales_Bonus_Payments.Payment_Name%type,
    Begin_Date      date,
    End_Date        date,
    Division_Id     number,
    Job_Id          number,
    Bonus_Type      varchar2(1),
    Payment_Type    varchar2(1),
    Cashbox_Id      number,
    Bank_Account_Id number,
    Note            Hpr_Sales_Bonus_Payments.Note%type,
    Operations      Sales_Bonus_Payment_Operation_Nt);
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Operation_Rt is record(
    Operation_Id number,
    Staff_Id     number,
    Charge_Id    number,
    Oper_Type_Id number,
    Amount       number,
    Note         varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Operation_Nt is table of Charge_Document_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Document_Id     number,
    Document_Number varchar2(50 char),
    Document_Date   date,
    Document_Name   varchar2(150 char),
    month           date,
    Oper_Type_Id    number,
    Currency_Id     number,
    Division_Id     number,
    Document_Kind   varchar2(1),
    Operations      Charge_Document_Operation_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Default Round Value
  ----------------------------------------------------------------------------------------------------
  c_Default_Round_Value constant varchar2(5) := '+2.0R';
  ----------------------------------------------------------------------------------------------------  
  -- Penalty kinds 
  ---------------------------------------------------------------------------------------------------- 
  c_Penalty_Kind_Late      constant varchar2(1) := 'L';
  c_Penalty_Kind_Early     constant varchar2(1) := 'E';
  c_Penalty_Kind_Lack      constant varchar2(1) := 'C';
  c_Penalty_Kind_Day_Skip  constant varchar2(1) := 'S';
  c_Penalty_Kind_Mark_Skip constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------
  -- Penalty types
  ----------------------------------------------------------------------------------------------------
  c_Penalty_Type_Coef   constant varchar2(1) := 'C';
  c_Penalty_Type_Amount constant varchar2(1) := 'A';
  c_Penalty_Type_Time   constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Operation Group
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Operation_Group_Wage                   constant varchar2(20) := 'VHR:1';
  c_Pcode_Operation_Group_Perf                   constant varchar2(20) := 'VHR:2';
  c_Pcode_Operation_Group_Sick_Leave             constant varchar2(20) := 'VHR:3';
  c_Pcode_Operation_Group_Business_Trip          constant varchar2(20) := 'VHR:4';
  c_Pcode_Operation_Group_Vacation               constant varchar2(20) := 'VHR:5';
  c_Pcode_Operation_Group_Overtime               constant varchar2(20) := 'VHR:6';
  c_Pcode_Operation_Group_Penalty_For_Discipline constant varchar2(20) := 'VHR:7';
  c_Pcode_Operation_Group_Perf_Penalty           constant varchar2(20) := 'VHR:8';
  c_Pcode_Operation_Group_Wage_No_Deduction      constant varchar2(20) := 'VHR:9';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Oper Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Oper_Type_Sick_Leave             constant varchar2(20) := 'VHR:1';
  c_Pcode_Oper_Type_Business_Trip          constant varchar2(20) := 'VHR:2';
  c_Pcode_Oper_Type_Vacation               constant varchar2(20) := 'VHR:3';
  c_Pcode_Oper_Type_Wage_Hourly            constant varchar2(20) := 'VHR:4';
  c_Pcode_Oper_Type_Wage_Daily             constant varchar2(20) := 'VHR:5';
  c_Pcode_Oper_Type_Wage_Monthly           constant varchar2(20) := 'VHR:6';
  c_Pcode_Oper_Type_Overtime               constant varchar2(20) := 'VHR:7';
  c_Pcode_Oper_Type_Monthly_Summarized     constant varchar2(20) := 'VHR:8';
  c_Pcode_Oper_Type_Penalty_For_Discipline constant varchar2(20) := 'VHR:9';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Book Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Book_Type_Wage          constant varchar2(20) := 'VHR:1';
  c_Pcode_Book_Type_Sick_Leave    constant varchar2(20) := 'VHR:2';
  c_Pcode_Book_Type_Business_Trip constant varchar2(20) := 'VHR:3';
  c_Pcode_Book_Type_Vacation      constant varchar2(20) := 'VHR:4';
  c_Pcode_Book_Type_All           constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- Charge Status
  ----------------------------------------------------------------------------------------------------
  c_Charge_Status_Draft     constant varchar2(1) := 'D';
  c_Charge_Status_New       constant varchar2(1) := 'N';
  c_Charge_Status_Used      constant varchar2(1) := 'U';
  c_Charge_Status_Completed constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Estimation Type
  ----------------------------------------------------------------------------------------------------
  c_Estimation_Type_Formula constant varchar2(1) := 'F';
  c_Estimation_Type_Entered constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  c_Advance_Limit_Turnout_Days  constant varchar2(1) := 'T';
  c_Advance_Limit_Calendar_Days constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Easy Report Form
  ----------------------------------------------------------------------------------------------------
  c_Easy_Report_Form_Timebook     constant varchar2(200) := '/vhr/rep/hpr/timebook';
  c_Easy_Report_Form_Payroll_Book constant varchar2(200) := '/vhr/rep/hpr/payroll_book';
  ----------------------------------------------------------------------------------------------------
  -- Wage Sheet Report
  ----------------------------------------------------------------------------------------------------
  c_Report_Form_Wage_Sheet constant varchar2(200) := '/vhr/rep/hpr/start/wage_report';
  c_Report_Uri_Wage_Sheet  constant varchar2(200) := '/vhr/rep/hpr/start/wage_report:run';
  ----------------------------------------------------------------------------------------------------
  -- Period Kinds
  ----------------------------------------------------------------------------------------------------
  c_Period_Full_Month        constant varchar2(1) := 'M';
  c_Period_Month_First_Half  constant varchar2(1) := 'F';
  c_Period_Month_Second_Half constant varchar2(1) := 'S';
  c_Period_Custom            constant varchar2(1) := 'C';
  ---------------------------------------------------------------------------------------------------- 
  -- Contract
  ----------------------------------------------------------------------------------------------------  
  c_Cv_Contract_Fact_Status_New      constant varchar2(1) := 'N';
  c_Cv_Contract_Fact_Status_Complete constant varchar2(1) := 'C';
  c_Cv_Contract_Fact_Status_Accept   constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Overtime coef
  ----------------------------------------------------------------------------------------------------
  c_Overtime_Coef         constant varchar2(50) := 'VHR:OVERTIME_COEF';
  c_Overtime_Coef_Default constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- Wage sheet kinds
  ----------------------------------------------------------------------------------------------------
  c_Wage_Sheet_Regular constant varchar2(1) := 'R';
  c_Wage_Sheet_Onetime constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Timebook_View constant varchar2(200) := '/vhr/hpr/timebook_view';
  c_Form_Book_View     constant varchar2(200) := '/vhr/hpr/book_view';
  ----------------------------------------------------------------------------------------------------
  -- Currency setting codes
  ----------------------------------------------------------------------------------------------------
  c_Pref_Allow_Other_Currencies constant varchar2(50) := 'VHR:ALLOW_OTHER_CURRENCIES';
  ----------------------------------------------------------------------------------------------------
  -- Timebook Fill Settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Timebook_Fill_Settings constant varchar2(50) := 'VHR:HPR:TIMEBOOK_FILL_SETTINGS';
  ----------------------------------------------------------------------------------------------------
  -- Use Project Setting
  ---------------------------------------------------------------------------------------------------- 
  c_Pref_Use_Subfilial_Settings constant varchar2(50) := 'VHR:HPR:USE_SUBFILIAL_SETTINGS';
end Hpr_Pref;
/
create or replace package body Hpr_Pref is

end Hpr_Pref;
/

create or replace package Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Division_Id  number,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap;
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2;
  Function Charge_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2;
  Function Estimation_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2;
  Function Advance_Limit_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2;
  Function Period_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2;
  Function Penalty_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2;
  Function Cv_Fact_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2;
  Function t_Penalty_Rule_Unit_Times return varchar2;
  Function t_Penalty_Rule_Unit_Days return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
end Hpr_Util;
/
create or replace package body Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Late_Amount      Fazo.Number_Code_Aat;
  g_Cache_Early_Amount     Fazo.Number_Code_Aat;
  g_Cache_Lack_Amount      Fazo.Number_Code_Aat;
  g_Cache_Day_Skip_Amount  Fazo.Number_Code_Aat;
  g_Cache_Mark_Skip_Amount Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  ) is
  begin
    o_Contract_Fact.Company_Id := i_Company_Id;
    o_Contract_Fact.Filial_Id  := i_Filial_Id;
    o_Contract_Fact.Fact_Id    := i_Fact_Id;
  
    o_Contract_Fact.Items := Hpr_Pref.Cv_Contract_Fact_Item_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  ) is
    v_Fact_Item Hpr_Pref.Cv_Contract_Fact_Item_Rt;
  begin
    v_Fact_Item.Fact_Item_Id  := i_Fact_Item_Id;
    v_Fact_Item.Fact_Quantity := i_Fact_Quantity;
    v_Fact_Item.Fact_Amount   := i_Fact_Amount;
    v_Fact_Item.Name          := i_Name;
  
    o_Contract_Fact.Items.Extend;
    o_Contract_Fact.Items(o_Contract_Fact.Items.Count) := v_Fact_Item;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  ) is
  begin
    o_Penalty.Company_Id  := i_Company_Id;
    o_Penalty.Filial_Id   := i_Filial_Id;
    o_Penalty.Penalty_Id  := i_Penalty_Id;
    o_Penalty.Month       := i_Month;
    o_Penalty.Name        := i_Name;
    o_Penalty.Division_Id := i_Division_Id;
    o_Penalty.State       := i_State;
  
    o_Penalty.Policies := Hpr_Pref.Penalty_Policy_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  ) is
    v_Policy Hpr_Pref.Penalty_Policy_Rt;
  begin
    v_Policy.Penalty_Kind         := i_Penalty_Kind;
    v_Policy.Penalty_Type         := i_Penalty_Type;
    v_Policy.From_Day             := i_From_Day;
    v_Policy.To_Day               := i_To_Day;
    v_Policy.From_Time            := i_From_Time;
    v_Policy.To_Time              := i_To_Time;
    v_Policy.Penalty_Coef         := i_Penalty_Coef;
    v_Policy.Penalty_Per_Time     := i_Penalty_Per_Time;
    v_Policy.Penalty_Amount       := i_Penalty_Amount;
    v_Policy.Penalty_Time         := i_Penalty_Time;
    v_Policy.Calc_After_From_Time := i_Calc_After_From_Time;
  
    p_Penalty.Policies.Extend;
    p_Penalty.Policies(p_Penalty.Policies.Count) := v_Policy;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Division_Id  number,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  ) is
  begin
    o_Wage_Sheet.Company_Id   := i_Company_Id;
    o_Wage_Sheet.Filial_Id    := i_Filial_Id;
    o_Wage_Sheet.Sheet_Id     := i_Sheet_Id;
    o_Wage_Sheet.Sheet_Number := i_Sheet_Number;
    o_Wage_Sheet.Sheet_Date   := i_Sheet_Date;
    o_Wage_Sheet.Period_Begin := i_Period_Begin;
    o_Wage_Sheet.Period_End   := i_Period_End;
    o_Wage_Sheet.Period_Kind  := i_Period_Kind;
    o_Wage_Sheet.Division_Id  := i_Division_Id;
    o_Wage_Sheet.Note         := i_Note;
    o_Wage_Sheet.Sheet_Kind   := i_Sheet_Kind;
    o_Wage_Sheet.Round_Value  := i_Round_Value;
    o_Wage_Sheet.Staff_Ids    := i_Staff_Ids;
    o_Wage_Sheet.Sheet_Staffs := i_Sheet_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  ) is
    v_Staff Hpr_Pref.Sheet_Staff_Rt;
  begin
    v_Staff.Staff_Id       := i_Staff_Id;
    v_Staff.Accrual_Amount := i_Accrual_Amount;
    v_Staff.Penalty_Amount := i_Penalty_Amount;
  
    p_Staffs.Extend;
    p_Staffs(p_Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  ) is
    v_Part Hpr_Pref.Sheet_Part_Rt;
  begin
    v_Part := Hpr_Pref.Sheet_Part_Rt(Part_Begin       => i_Part_Begin,
                                     Part_End         => i_Part_End,
                                     Division_Id      => i_Division_Id,
                                     Job_Id           => i_Job_Id,
                                     Schedule_Id      => i_Schedule_Id,
                                     Fte_Id           => i_Fte_Id,
                                     Monthly_Amount   => i_Monthly_Amount,
                                     Plan_Amount      => i_Plan_Amount,
                                     Wage_Amount      => i_Wage_Amount,
                                     Overtime_Amount  => i_Overtime_Amount,
                                     Late_Amount      => i_Late_Amount,
                                     Early_Amount     => i_Early_Amount,
                                     Lack_Amount      => i_Lack_Amount,
                                     Day_Skip_Amount  => i_Day_Skip_Amount,
                                     Mark_Skip_Amount => i_Mark_Skip_Amount);
  
    p_Parts.Extend;
    p_Parts(p_Parts.Count) := v_Part;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  ) is
  begin
    o_Timebook.Company_Id      := i_Company_Id;
    o_Timebook.Filial_Id       := i_Filial_Id;
    o_Timebook.Timebook_Id     := i_Timebook_Id;
    o_Timebook.Timebook_Number := i_Timebook_Number;
    o_Timebook.Timebook_Date   := i_Timebook_Date;
    o_Timebook.Period_Begin    := i_Period_Begin;
    o_Timebook.Period_End      := i_Period_End;
    o_Timebook.Period_Kind     := i_Period_Kind;
    o_Timebook.Division_Id     := i_Division_Id;
    o_Timebook.Note            := i_Note;
    o_Timebook.Staff_Ids       := i_Staff_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  ) is
  begin
    o_Oper_Type.Oper_Type.Company_Id             := i_Company_Id;
    o_Oper_Type.Oper_Type.Oper_Type_Id           := i_Oper_Type_Id;
    o_Oper_Type.Oper_Type.Operation_Kind         := i_Operation_Kind;
    o_Oper_Type.Oper_Type.Name                   := i_Name;
    o_Oper_Type.Oper_Type.Short_Name             := i_Short_Name;
    o_Oper_Type.Oper_Type.Accounting_Type        := i_Accounting_Type;
    o_Oper_Type.Oper_Type.Corr_Coa_Id            := i_Corr_Coa_Id;
    o_Oper_Type.Oper_Type.Corr_Ref_Set           := i_Corr_Ref_Set;
    o_Oper_Type.Oper_Type.Income_Tax_Exists      := i_Income_Tax_Exists;
    o_Oper_Type.Oper_Type.Income_Tax_Rate        := i_Income_Tax_Rate;
    o_Oper_Type.Oper_Type.Pension_Payment_Exists := i_Pension_Payment_Exists;
    o_Oper_Type.Oper_Type.Pension_Payment_Rate   := i_Pension_Payment_Rate;
    o_Oper_Type.Oper_Type.Social_Payment_Exists  := i_Social_Payment_Exists;
    o_Oper_Type.Oper_Type.Social_Payment_Rate    := i_Social_Payment_Rate;
    o_Oper_Type.Oper_Type.Note                   := i_Note;
    o_Oper_Type.Oper_Type.State                  := i_State;
    o_Oper_Type.Oper_Type.Code                   := i_Code;
    o_Oper_Type.Oper_Group_Id                    := i_Oper_Group_Id;
    o_Oper_Type.Estimation_Type                  := i_Estimation_Type;
    o_Oper_Type.Estimation_Formula               := i_Estimation_Formula;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  ) is
    v_Book Mpr_Pref.Book_Rt;
  begin
    Mpr_Util.Book_New(o_Book        => v_Book,
                      i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Book_Id     => i_Book_Id,
                      i_Book_Number => i_Book_Number,
                      i_Book_Date   => i_Book_Date,
                      i_Book_Name   => i_Book_Name,
                      i_Month       => i_Month,
                      i_Division_Id => i_Division_Id,
                      i_Currency_Id => i_Currency_Id,
                      i_Note        => i_Note);
  
    o_Book.Book_Type_Id := i_Book_Type_Id;
    o_Book.Book         := v_Book;
    o_Book.Operations   := Hpr_Pref.Book_Opereration_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  ) is
    r_Staff     Href_Staffs%rowtype;
    v_Operation Hpr_Pref.Book_Operation_Rt;
    v_Book      Mpr_Pref.Book_Rt := p_Book.Book;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => v_Book.Company_Id,
                                  i_Filial_Id  => v_Book.Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    Mpr_Util.Book_Add_Operation(p_Book                   => v_Book,
                                i_Operation_Id           => i_Operation_Id,
                                i_Employee_Id            => r_Staff.Employee_Id,
                                i_Oper_Type_Id           => i_Oper_Type_Id,
                                i_Amount                 => i_Amount,
                                i_Net_Amount             => i_Net_Amount,
                                i_Income_Tax_Amount      => i_Income_Tax_Amount,
                                i_Pension_Payment_Amount => i_Pension_Payment_Amount,
                                i_Social_Payment_Amount  => i_Social_Payment_Amount,
                                i_Subfilial_Id           => i_Subfilial_Id,
                                i_Note                   => i_Note);
  
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Autofilled   := i_Autofilled;
  
    p_Book.Book := v_Book;
    p_Book.Operations.Extend;
    p_Book.Operations(p_Book.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  ) is
  begin
    o_Charge_Document.Company_Id      := i_Company_Id;
    o_Charge_Document.Filial_Id       := i_Filial_Id;
    o_Charge_Document.Document_Id     := i_Document_Id;
    o_Charge_Document.Document_Number := i_Document_Number;
    o_Charge_Document.Document_Date   := i_Document_Date;
    o_Charge_Document.Document_Name   := i_Document_Name;
    o_Charge_Document.Month           := i_Month;
    o_Charge_Document.Oper_Type_Id    := i_Oper_Type_Id;
    o_Charge_Document.Currency_Id     := i_Currency_Id;
    o_Charge_Document.Division_Id     := i_Division_Id;
    o_Charge_Document.Document_Kind   := i_Document_Kind;
    o_Charge_Document.Operations      := Hpr_Pref.Charge_Document_Operation_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  ) is
    v_Operation Hpr_Pref.Charge_Document_Operation_Rt;
  begin
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Oper_Type_Id := i_Oper_Type_Id;
    v_Operation.Amount       := i_Amount;
    v_Operation.Note         := i_Note;
  
    o_Charge_Document.Operations.Extend();
    o_Charge_Document.Operations(o_Charge_Document.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  ) is
    v_Payment Mpr_Pref.Payment_Rt;
  begin
    Mpr_Util.Payment_New(o_Payment         => v_Payment,
                         i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Payment_Id      => i_Payment_Id,
                         i_Payment_Kind    => Mpr_Pref.c_Pk_Advance,
                         i_Payment_Number  => i_Payment_Number,
                         i_Payment_Date    => i_Payment_Date,
                         i_Booked_Date     => i_Booked_Date,
                         i_Currency_Id     => i_Currency_Id,
                         i_Payment_Type    => i_Payment_Type,
                         i_Division_Id     => i_Division_Id,
                         i_Cashbox_Id      => i_Cashbox_Id,
                         i_Bank_Account_Id => i_Bank_Account_Id,
                         i_Note            => i_Note,
                         i_Souce_Table     => i_Souce_Table,
                         i_Source_Id       => i_Source_Id);
  
    o_Advance.Payment      := v_Payment;
    o_Advance.Limit_Kind   := i_Limit_Kind;
    o_Advance.Days_Limit   := i_Days_Limit;
    o_Advance.Employee_Ids := Array_Number();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  ) is
  begin
    Mpr_Util.Payment_Add_Employee(p_Payment         => p_Advance.Payment,
                                  i_Employee_Id     => i_Employee_Id,
                                  i_Pay_Amount      => i_Pay_Amount,
                                  i_Bank_Account_Id => i_Bank_Account_Id,
                                  i_Paid_Date       => i_Paid_Date,
                                  i_Paid            => i_Paid,
                                  i_Note            => i_Note);
  
    Fazo.Push(p_Advance.Employee_Ids, i_Employee_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  ) is
  begin
    o_Sales_Bonus_Payment.Company_Id      := i_Company_Id;
    o_Sales_Bonus_Payment.Filial_Id       := i_Filial_Id;
    o_Sales_Bonus_Payment.Payment_Id      := i_Payment_Id;
    o_Sales_Bonus_Payment.Payment_Number  := i_Payment_Number;
    o_Sales_Bonus_Payment.Payment_Date    := i_Payment_Date;
    o_Sales_Bonus_Payment.Payment_Name    := i_Payment_Name;
    o_Sales_Bonus_Payment.Begin_Date      := i_Begin_Date;
    o_Sales_Bonus_Payment.End_Date        := i_End_Date;
    o_Sales_Bonus_Payment.Division_Id     := i_Division_Id;
    o_Sales_Bonus_Payment.Job_Id          := i_Job_Id;
    o_Sales_Bonus_Payment.Bonus_Type      := i_Bonus_Type;
    o_Sales_Bonus_Payment.Payment_Type    := i_Payment_Type;
    o_Sales_Bonus_Payment.Cashbox_Id      := i_Cashbox_Id;
    o_Sales_Bonus_Payment.Bank_Account_Id := i_Bank_Account_Id;
    o_Sales_Bonus_Payment.Note            := i_Note;
  
    o_Sales_Bonus_Payment.Operations := Hpr_Pref.Sales_Bonus_Payment_Operation_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  ) is
    v_Operation Hpr_Pref.Sales_Bonus_Payment_Operation_Rt;
  begin
    v_Operation.Operation_Id  := i_Operation_Id;
    v_Operation.Staff_Id      := i_Staff_Id;
    v_Operation.Period_Begin  := i_Period_Begin;
    v_Operation.Period_End    := i_Period_End;
    v_Operation.Bonus_Type    := i_Bonus_Type;
    v_Operation.Job_Id        := i_Job_Id;
    v_Operation.Percentage    := i_Percentage;
    v_Operation.Periods       := i_Periods;
    v_Operation.Sales_Amounts := i_Sales_Amounts;
    v_Operation.Amounts       := i_Amounts;
  
    p_Sales_Bonus_Payment.Operations.Extend;
    p_Sales_Bonus_Payment.Operations(p_Sales_Bonus_Payment.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number is
    --------------------------------------------------
    Function Load_Setting(i_Code varchar2) return Array_Number is
      v_Ids varchar2(4000) := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Code       => i_Code);
    begin
      if v_Ids is null then
        return Array_Number();
      end if;
    
      return Fazo.To_Array_Number(Fazo.Split(v_Ids, Href_Pref.c_Settings_Separator));
    end;
  
  begin
    return Load_Setting(Hpr_Pref.c_Pref_Allow_Other_Currencies);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Hpr_Pref.c_Pref_Use_Subfilial_Settings),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpr_Timesheet_Locks w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Timesheet_Date >= i_Period_Begin
       and w.Timesheet_Date <= i_Period_End
       and (i_Timebook_Id is null or w.Timebook_Id <> i_Timebook_Id)
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2 is
  begin
    select Greatest(w.Period_Begin, i_Period_Begin), Least(w.Period_End, i_Period_End)
      into o_Period_Begin, o_Period_End
      from Hpr_Sales_Bonus_Payment_Operations w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and Greatest(w.Period_Begin, i_Period_Begin) <= Least(w.Period_End, i_Period_End)
       and (i_Payment_Id is null or w.Payment_Id <> i_Payment_Id)
       and exists (select 1
              from Hpr_Sales_Bonus_Payments p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Payment_Id = w.Payment_Id
               and p.Posted = 'Y')
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Sales_Bonus_Payments,
                                 i_Source_Id    => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Oper_Group_Id
      into result
      from Hpr_Oper_Groups
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Book_Type_Id
      into result
      from Hpr_Book_Types
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  -- execution plan algorithm should be added and taken into account
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number is
    v_Formula varchar2(32767) := i_Formula;
    result    number;
  begin
    for i in 1 .. i_Arguments.Count
    loop
      v_Formula := Regexp_Replace(v_Formula,
                                  '(\W|^)' || i_Arguments(i) (1) || '(\W|$)',
                                  '\1to_number(' || i_Arguments(i) (2) || ')\2');
    end loop;
  
    execute immediate 'begin :result := ' || v_Formula || '; end;'
      using out result;
  
    return result;
  exception
    when others then
      b.Raise_Error('execution error: ' || Fazo.Zip_Matrix(i_Arguments).Json);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2 is
    v_Pattern varchar2(20) := '[^-+*\/() ]+';
    result    Array_Varchar2 := Array_Varchar2();
  begin
    Result.Extend(Regexp_Count(i_Formula, v_Pattern));
  
    for i in 1 .. Result.Count
    loop
      result(i) := Regexp_Substr(i_Formula, v_Pattern, 1, i);
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2 is
    v_Company_Head   number := Md_Pref.c_Company_Head;
    v_Identifiers    Array_Varchar2;
    v_New_Identifier Href_Indicators.Identifier%type;
    result           Hpr_Oper_Types.Estimation_Formula%type := i_Formula;
  begin
    if i_Formula is null then
      return null;
    end if;
  
    v_Identifiers := Hpr_Util.Formula_Variables(result);
  
    Fazo.Sort_Desc(v_Identifiers);
  
    for i in 1 .. v_Identifiers.Count
    loop
      select q.Identifier
        into v_New_Identifier
        from Href_Indicators q
       where q.Company_Id = i_Company_Id
         and q.Pcode = (select w.Pcode
                          from Href_Indicators w
                         where w.Company_Id = v_Company_Head
                           and w.Identifier = v_Identifiers(i));
    
      result := Regexp_Replace(result,
                               '(\W|^)' || v_Identifiers(i) || '(\W|$)',
                               '\1' || v_New_Identifier || '\2');
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2 is
    v_Indicator_Id number;
    v_Variables    Array_Varchar2;
    result         Matrix_Varchar2 := Matrix_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select t.Indicator_Id
          into v_Indicator_Id
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      
        Fazo.Push(result, Array_Varchar2(v_Indicator_Id, v_Variables(i)));
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2 is
    v_Dummy     varchar2(1);
    v_Variables Array_Varchar2;
    v_Arguments Matrix_Varchar2;
    result      Array_Varchar2 := Array_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select 'x'
          into v_Dummy
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      exception
        when No_Data_Found then
          if not Fazo.Is_Number(v_Variables(i)) then
            Fazo.Push(result, t('could not find indicator by identifier $1', v_Variables(i)));
          end if;
      end;
    end loop;
  
    -- sorting desc
    select Array_Varchar2(Column_Value, 'null')
      bulk collect
      into v_Arguments
      from table(v_Variables)
     order by Length(Column_Value) desc;
  
    if Result.Count = 0 then
      begin
        v_Dummy := Formula_Execute(i_Formula => i_Formula, i_Arguments => v_Arguments);
      exception
        when others then
          Fazo.Push(result, t('an error occurred while validating a formula calculation'));
      end;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hpr_Pref.c_Overtime_Coef),
               Hpr_Pref.c_Overtime_Coef_Default);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number is
  begin
    return Nvl(Hpd_Util.Get_Closest_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                    i_Filial_Id    => i_Filial_Id,
                                                    i_Staff_Id     => i_Staff_Id,
                                                    i_Indicator_Id => i_Indicator_Id,
                                                    i_Period       => i_Period),
               1);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  -- calculate wage indicator by i_begin_date
  -- as wage on vacation is calculated by first day
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Charge        Hpr_Charges%rowtype;
    v_Wage_Scale_Id number;
    v_Rank_Id       number;
    result          number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Take(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Wage_Scale_Id := r_Charge.Wage_Scale_Id;
      v_Rank_Id       := r_Charge.Rank_Id;
    else
      v_Wage_Scale_Id := Hpd_Util.Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                            i_Filial_Id  => i_Filial_Id,
                                                            i_Staff_Id   => i_Staff_Id,
                                                            i_Period     => i_Begin_Date);
    
      v_Rank_Id := Hpd_Util.Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Period     => i_End_Date);
    end if;
  
    if v_Wage_Scale_Id is not null then
      result := Nvl(Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                          i_Filial_Id     => i_Filial_Id,
                                          i_Wage_Scale_Id => v_Wage_Scale_Id,
                                          i_Period        => i_Begin_Date,
                                          i_Rank_Id       => v_Rank_Id),
                    0);
    else
      result := Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Indicator_Id => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id, --
                                                                                 i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                        i_Period       => i_Begin_Date);
    end if;
  
    return result;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Period     => i_End_Date);
  
    return Nvl(r_Closest_Robot.Fte, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Charge Hpr_Charges%rowtype;
  
    v_Schedule_Id  number;
    v_Oper_Type_Id number;
  
    result number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Charge_Id  => i_Charge_Id);
    
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Staff_Id      => i_Staff_Id,
                                                        i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                         i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                        i_Period        => i_End_Date);
  
    return Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Staff_Id     => i_Staff_Id,
                            i_Oper_Type_Id => v_Oper_Type_Id,
                            i_Schedule_Id  => v_Schedule_Id,
                            i_Part_Begin   => i_Begin_Date,
                            i_Part_End     => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    return Htt_Util.Calc_Plan_Days(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Staff_Id    => i_Staff_Id,
                                   i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                   i_Period      => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    result := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Staff_Id    => i_Staff_Id,
                                         i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                         i_Period      => i_End_Date);
  
    return Nvl(Round(result / 60, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Working_Days(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Begin_Date => i_Begin_Date,
                                      i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    result := Htt_Util.Calc_Working_Seconds(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Begin_Date => i_Begin_Date,
                                            i_End_Date   => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    v_Seconds      number;
    result         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Seconds,
                                  o_Fact_Days    => result,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return result;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    result         number;
    v_Days         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => result,
                                  o_Fact_Days    => v_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Performance_Data
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date
  ) return Hper_Staff_Plans%rowtype is
    r_Charge        Hpr_Charges%rowtype;
    r_Staff_Plan    Hper_Staff_Plans%rowtype;
    v_Staff_Plan_Id number;
  
    --------------------------------------------------
    Function Get_Performance return Hper_Staff_Plans%rowtype is
    begin
      select q.*
        into r_Staff_Plan
        from Hper_Staff_Plans q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Month_Begin_Date = Trunc(i_Begin_Date, 'mon')
       order by Nvl((select h.Hiring_Date
                      from Hpd_Hirings h
                     where h.Company_Id = q.Company_Id
                       and h.Filial_Id = q.Filial_Id
                       and h.Page_Id = q.Journal_Page_Id
                       and h.Hiring_Date <= i_Begin_Date),
                    (select h.Transfer_Begin
                       from Hpd_Transfers h
                      where h.Company_Id = q.Company_Id
                        and h.Filial_Id = q.Filial_Id
                        and h.Page_Id = q.Journal_Page_Id
                        and h.Transfer_Begin <= i_Begin_Date)) desc nulls last
       fetch first row only;
    
      return r_Staff_Plan;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Charge_Id is null then
      return Get_Performance;
    end if;
  
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    select q.Staff_Plan_Id
      into v_Staff_Plan_Id
      from Hper_Staff_Plan_Intervals q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = r_Charge.Interval_Id;
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => v_Staff_Plan_Id);
  
    return r_Staff_Plan;
  exception
    when No_Data_Found then
      return null;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Timeoff_Id number;
    result       number;
  begin
    begin
      select q.Timeoff_Id
        into v_Timeoff_Id
        from Hpd_Timeoff_Intervals q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Interval_Id = (select w.Interval_Id
                                from Hpr_Charges w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Charge_Id = i_Charge_Id);
    exception
      when No_Data_Found then
        return 0;
    end;
  
    result := z_Hpd_Sick_Leaves.Take( --
              i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Timeoff_Id => v_Timeoff_Id).Coefficient;
  
    return Nvl(result, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Days number;
  begin
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return Nvl((i_End_Date - i_Begin_Date + 1) - v_Fact_Days, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Begin_Date => i_Begin_Date,
                                       i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Working_Days number;
    v_Fact_Days    number;
  begin
    v_Working_Days := Calc_Working_Days_Indicator(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Charge_Id  => i_Charge_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return v_Working_Days - v_Fact_Days;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_First_Day  date := Trunc(i_Begin_Date, 'y');
    v_Last_Day   date := Add_Months(v_First_Day, 12) - 1;
    v_Days_Count number := v_Last_Day - v_First_Day + 1;
  
    v_Default_Calendar_Id      number;
    v_Official_Rest_Days_Count number;
  begin
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                                    i_Filial_Id   => i_Filial_Id,
                                                                    i_Calendar_Id => v_Default_Calendar_Id,
                                                                    i_Begin_Date  => v_First_Day,
                                                                    i_End_Date    => v_Last_Day);
  
    return Nvl(Round((v_Days_Count - v_Official_Rest_Days_Count) / 12, 1), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Seconds number;
    v_Fact_Days    number;
  begin
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Fact_Seconds,
                                  o_Fact_Days    => v_Fact_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime),
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Round(v_Fact_Seconds / 3600, 2);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Load_Overtime_Coef(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Code_Gen
  (
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return varchar2 is
  begin
    if i_Charge_Id is not null then
      return i_Charge_Id;
    end if;
  
    return i_Staff_Id || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_Begin_Date, Href_Pref.c_Date_Format_Day) || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_End_Date, Href_Pref.c_Date_Format_Day);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_Indicators
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Charge_Id     number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Penalty_Pcode varchar2
  ) return number is
    r_Charge      Hpr_Charges%rowtype;
    v_Hourly_Wage number := 0;
    v_Division_Id number;
    v_Schedule_Id number;
    v_Code        varchar(50);
  
    v_Oper_Type_Ids Array_Number;
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Division_Id := r_Charge.Division_Id;
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Division_Id := Hpd_Util.Get_Closest_Division_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Ids := Hpd_Util.Get_Closest_Oper_Type_Ids(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                          i_Period        => i_End_Date);
  
    for i in 1 .. v_Oper_Type_Ids.Count
    loop
      v_Hourly_Wage := v_Hourly_Wage +
                       Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Ids(i),
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => i_Begin_Date,
                                        i_Part_End     => i_End_Date);
    end loop;
  
    Calc_Penalty_Amounts(o_Late_Amount      => g_Cache_Late_Amount(v_Code),
                         o_Early_Amount     => g_Cache_Early_Amount(v_Code),
                         o_Lack_Amount      => g_Cache_Lack_Amount(v_Code),
                         o_Day_Skip_Amount  => g_Cache_Day_Skip_Amount(v_Code),
                         o_Mark_Skip_Amount => g_Cache_Mark_Skip_Amount(v_Code),
                         i_Company_Id       => i_Company_Id,
                         i_Filial_Id        => i_Filial_Id,
                         i_Staff_Id         => i_Staff_Id,
                         i_Division_Id      => v_Division_Id,
                         i_Hourly_Wage      => v_Hourly_Wage,
                         i_Period_Begin     => i_Begin_Date,
                         i_Period_End       => i_End_Date);
  
    case i_Penalty_Pcode
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then
        return g_Cache_Late_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then
        return g_Cache_Early_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then
        return g_Cache_Lack_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then
        return g_Cache_Day_Skip_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then
        return g_Cache_Mark_Skip_Amount(v_Code);
      else
        return null;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Late_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Late);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Early_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Lack_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Absence);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Day_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Mark_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Procedures(i_Pcode varchar2) return varchar2 is
  begin
    return --
    case i_Pcode --
    when Href_Pref.c_Pcode_Indicator_Wage then 'hpr_util.calc_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Rate then 'hpr_util.calc_rate_indicator' --
    when Href_Pref.c_Pcode_Indicator_Hourly_Wage then 'hpr_util.calc_hourly_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Days then 'hpr_util.calc_plan_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Hours then 'hpr_util.calc_plan_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Days then 'hpr_util.calc_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Hours then 'hpr_util.calc_working_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Days then 'hpr_util.calc_fact_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Hours then 'hpr_util.calc_fact_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Bonus then 'hpr_util.calc_perf_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Bonus then 'hpr_util.calc_perf_extra_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Coefficient then 'hpr_util.calc_sick_leave_coefficient_indicator' --
    when Href_Pref.c_Pcode_Indicator_Business_Trip_Days then 'hpr_util.calc_business_trip_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Vacation_Days then 'hpr_util.calc_vacation_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Mean_Working_Days then 'hpr_util.calc_mean_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Days then 'hpr_util.calc_sick_leave_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Hours then 'hpr_util.calc_overtime_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Coef then 'hpr_util.calc_overtime_coef_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then 'hpr_util.calc_penalty_for_late_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then 'hpr_util.calc_penalty_for_early_output_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then 'hpr_util.calc_penalty_for_absence_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then 'hpr_util.calc_penalty_for_day_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then 'hpr_util.calc_penalty_for_mark_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Penalty then 'hpr_util.calc_perf_penalty_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty then 'hpr_util.calc_perf_extra_penalty_indicator' --
    else null end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number
  ) return number is
    v_Proc      varchar2(100);
    r_Indicator Href_Indicators%rowtype;
    result      number;
  
    --------------------------------------------------
    Function Convert_Indicator_Amount
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Staff_Id   number,
      i_Indicator  Href_Indicators%rowtype,
      i_Period     date,
      i_Amount     number
    ) return number is
      v_Currency_Id number;
    begin
      if i_Indicator.Used != Href_Pref.c_Indicator_Used_Constantly and
         i_Indicator.Pcode not in
         (Href_Pref.c_Pcode_Indicator_Perf_Penalty, Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty) then
        return i_Amount;
      end if;
    
      v_Currency_Id := Hpd_Util.Get_Closest_Currency_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_Period);
    
      if v_Currency_Id is null then
        return i_Amount;
      end if;
    
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Period,
                                      i_Amount      => i_Amount);
    end;
  begin
    r_Indicator := z_Href_Indicators.Load(i_Company_Id   => i_Company_Id, --
                                          i_Indicator_Id => i_Indicator_Id);
  
    v_Proc := Indicator_Procedures(r_Indicator.Pcode);
  
    if v_Proc is not null then
      execute immediate 'declare begin :result := ' || v_Proc ||
                        '(:company_id, :filial_id, :staff_id, :charge_id, :begin_date, :end_date); end;'
        using out result, i_Company_Id, i_Filial_Id, i_Staff_Id, i_Charge_Id, i_Begin_Date, i_End_Date;
    else
      result := Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Indicator_Id => i_Indicator_Id,
                                        i_Period       => i_End_Date);
    end if;
  
    result := Convert_Indicator_Amount(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Indicator  => r_Indicator,
                                       i_Period     => i_End_Date,
                                       i_Amount     => result);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number is
    v_Monthly_Amount  number;
    v_Monthly_Minutes number;
  begin
    v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Oper_Type_Id => i_Oper_Type_Id,
                                    i_Part_Begin   => i_Part_Begin,
                                    i_Part_End     => i_Part_End,
                                    i_Calc_Planned => true);
  
    v_Monthly_Minutes := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => i_Schedule_Id,
                                                    i_Period      => i_Part_End);
  
    return v_Monthly_Amount / v_Monthly_Minutes * 60;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    r_Charge    Hpr_Charges%rowtype;
    v_Arguments Matrix_Varchar2;
  begin
    r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Charge_Id  => i_Charge_Id);
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => r_Charge.Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    select Array_Varchar2(w.Identifier, q.Indicator_Value)
      bulk collect
      into v_Arguments
      from Hpr_Charge_Indicators q
      join Href_Indicators w
        on w.Company_Id = q.Company_Id
       and w.Indicator_Id = q.Indicator_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Charge_Id = i_Charge_Id
     order by Length(w.Identifier) desc;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    v_Arguments Matrix_Varchar2 := Matrix_Varchar2();
  
    v_Fact_Hours_Id   number := -1;
    v_Fact_Days_Id    number := -1;
    v_Plan_Hours_Id   number := -1;
    v_Plan_Days_Id    number := -1;
    v_Worked_Hours_Id number := -1;
    v_Worked_Days_Id  number := -1;
  
    --------------------------------------------------
    Procedure Load_Indicator_Ids is
    begin
      v_Fact_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Hours);
    
      v_Fact_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Days);
    
      if i_Calc_Planned then
        v_Plan_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Hours);
      
        v_Plan_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                 i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Days);
      end if;
    
      if i_Calc_Worked then
        v_Worked_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Hours);
      
        v_Worked_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Days);
      end if;
    end;
  
    --------------------------------------------------
    Function Replaced_Indicator_Id(i_Indicator_Id number) return number is
    begin
      case
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Planned then
          return v_Plan_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Planned then
          return v_Plan_Days_Id;
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Worked then
          return v_Worked_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Worked then
          return v_Worked_Days_Id;
        else
          null;
      end case;
    
      return i_Indicator_Id;
    end;
  begin
    if i_Oper_Type_Id is null then
      return 0;
    end if;
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    if i_Calc_Planned or i_Calc_Worked then
      Load_Indicator_Ids;
    end if;
  
    for r in (select q.Indicator_Id, q.Identifier
                from Hpr_Oper_Type_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Oper_Type_Id = i_Oper_Type_Id)
    loop
      if (i_Calc_Planned or i_Calc_Worked) and r.Indicator_Id in (v_Fact_Hours_Id, v_Fact_Days_Id) then
        r.Indicator_Id := Replaced_Indicator_Id(r.Indicator_Id);
      end if;
    
      Fazo.Push(v_Arguments,
                Array_Varchar2(r.Identifier,
                               Calc_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                    i_Filial_Id    => i_Filial_Id,
                                                    i_Staff_Id     => i_Staff_Id,
                                                    i_Charge_Id    => null,
                                                    i_Begin_Date   => i_Part_Begin,
                                                    i_End_Date     => i_Part_End,
                                                    i_Indicator_Id => r.Indicator_Id)));
    end loop;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  ) is
    r_Oper_Type   Mpr_Oper_Types%rowtype;
    r_Setting     Mpr_Settings%rowtype;
    v_Currency_Id number := i_Currency_Id;
    --------------------------------------------------
    Function Round_Amount(i_Val number) return number is
    begin
      return Mk_Util.Round_Amount(i_Company_Id  => i_Company_Id,
                                  i_Currency_Id => v_Currency_Id,
                                  i_Amount      => i_Val);
    end;
    --------------------------------------------------
    Function Calc_Base_Amount(i_Val number) return number is
    begin
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Date,
                                      i_Amount      => i_Val);
    end;
  begin
    r_Oper_Type := z_Mpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    r_Setting := z_Mpr_Settings.Load(i_Company_Id => i_Company_Id, --
                                     i_Filial_Id  => i_Filial_Id);
  
    if i_Currency_Id is null then
      v_Currency_Id := Mk_Pref.Base_Currency(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    o_Amount                 := Round_Amount(i_Amount);
    o_Net_Amount             := Round_Amount(i_Amount);
    o_Income_Tax_Amount      := 0;
    o_Pension_Payment_Amount := 0;
    o_Social_Payment_Amount  := 0;
  
    if r_Setting.Income_Tax_Exists = 'Y' and r_Oper_Type.Income_Tax_Exists = 'Y' then
      if i_Is_Net_Amount then
        o_Amount := Round_Amount(o_Net_Amount * 100 /
                                 (100 - Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate)));
      else
        o_Net_Amount := o_Amount -
                        Round_Amount(o_Amount *
                                     Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate) / 100);
      end if;
    
      o_Income_Tax_Amount := Round_Amount((o_Amount * Nvl(r_Oper_Type.Income_Tax_Rate,
                                                          r_Setting.Income_Tax_Rate) / 100));
    
      if r_Setting.Pension_Payment_Exists = 'Y' and r_Oper_Type.Pension_Payment_Exists = 'Y' then
        o_Pension_Payment_Amount := Round_Amount((o_Amount *
                                                 Nvl(r_Oper_Type.Pension_Payment_Rate,
                                                      r_Setting.Pension_Payment_Rate) / 100));
      
      end if;
    end if;
  
    if r_Setting.Social_Payment_Exists = 'Y' and r_Oper_Type.Social_Payment_Exists = 'Y' then
      o_Social_Payment_Amount := Round_Amount((o_Amount *
                                              Nvl(r_Oper_Type.Social_Payment_Rate,
                                                   r_Setting.Social_Payment_Rate) / 100));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates penalty for (begin, end) period
  -- ignores policy changes between (begin, end)
  -- takes policy closest to period_begin date
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Late_Id        number;
    v_Early_Id       number;
    v_Lack_Id        number;
    v_Time_Kind_Id   number;
    v_Penalty_Id     number;
    v_Days_Cnt       number;
    v_Penalty_Amount number;
    v_Policy         Hpr_Pref.Penalty_Policy_Rt;
    v_Policies       Hpr_Pref.Penalty_Policy_Nt;
  
    v_Fact_Tk_Id    number;
    v_Fact_Value    number;
    v_Plan_Time     number;
    v_Input_Time    date;
    v_Output_Time   date;
    v_Input_Times   Array_Date;
    v_Output_Times  Array_Date;
    v_Fact_Date     date;
    v_Fact_Dates    Array_Date;
    v_Mark_Dates    Array_Date;
    v_Skipped_Marks Array_Number;
    v_Facts         Matrix_Number;
  
    v_Wage_Per_Minute number := i_Hourly_Wage / 60;
  
    --------------------------------------------------
    Procedure Init_Day_Amounts is
      v_Count number;
    begin
      o_Day_Amounts := Matrix_Number();
      v_Count       := i_Period_End - Trunc(i_Period_Begin, 'Mon') + 1;
    
      o_Day_Amounts.Extend(v_Count);
    
      for i in 1 .. v_Count
      loop
        o_Day_Amounts(i) := Array_Number(0, 0, 0, 0, 0);
      end loop;
    end;
  
    --------------------------------------------------
    Function Day_Index(i_Date date) return number is
    begin
      return i_Date - Trunc(i_Period_Begin, 'Mon') + 1;
    end;
  
    --------------------------------------------------
    Function To_Minutes(i_Sec number) return number is
    begin
      return Round(i_Sec / 60, 2);
    end;
  
    --------------------------------------------------
    Function Get_Tk_Id(i_Penalty_Kind varchar2) return number is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          return v_Late_Id;
        when Hpr_Pref.c_Penalty_Kind_Early then
          return v_Early_Id;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          return v_Lack_Id;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          return v_Lack_Id;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Function Calc_Amount
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Wage_Per_Minute number,
      i_Facts_Value     number
    ) return number is
      v_Calc_After_From_Time boolean := Nvl(i_Policy.Calc_After_From_Time, 'N') = 'Y';
    begin
      case i_Policy.Penalty_Type
        when Hpr_Pref.c_Penalty_Type_Coef then
          if v_Calc_After_From_Time then
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value - i_Policy.From_Time) * i_Policy.Penalty_Coef;
          else
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value) * i_Policy.Penalty_Coef;
          end if;
        when Hpr_Pref.c_Penalty_Type_Amount then
          if i_Policy.Penalty_Per_Time is null then
            return i_Policy.Penalty_Amount;
          else
            if v_Calc_After_From_Time then
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value - i_Policy.From_Time) /
                                                     i_Policy.Penalty_Per_Time);
            else
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value) /
                                                     i_Policy.Penalty_Per_Time);
            end if;
          end if;
        when Hpr_Pref.c_Penalty_Type_Time then
          return i_Wage_Per_Minute * i_Policy.Penalty_Time;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Penalty_Amount  number,
      i_Day_Index       number,
      p_Late_Amount     in out number,
      p_Early_Amount    in out number,
      p_Lack_Amount     in out number,
      p_Day_Skip_Amount in out number
    ) is
    begin
      case i_Policy.Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          p_Late_Amount := p_Late_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(1) := o_Day_Amounts(i_Day_Index) (1) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Early then
          p_Early_Amount := p_Early_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(2) := o_Day_Amounts(i_Day_Index) (2) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          p_Lack_Amount := p_Lack_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(3) := o_Day_Amounts(i_Day_Index) (3) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          p_Day_Skip_Amount := p_Day_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(4) := o_Day_Amounts(i_Day_Index) (4) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Penalty_Kind     varchar2,
      i_Penalty_Amount   number,
      i_Day_Index        number,
      p_Mark_Skip_Amount in out number
    ) is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Mark_Skip then
          p_Mark_Skip_Amount := p_Mark_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(5) := o_Day_Amounts(i_Day_Index) (5) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  begin
    o_Late_Amount      := 0;
    o_Early_Amount     := 0;
    o_Lack_Amount      := 0;
    o_Day_Skip_Amount  := 0;
    o_Mark_Skip_Amount := 0;
  
    v_Late_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late);
  
    v_Early_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                        i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early);
  
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Penalty_Id := Get_Closest_Penalty_Id(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Division_Id => i_Division_Id,
                                           i_Period      => i_Period_Begin);
  
    select Pp.Penalty_Kind,
           case
              when Pp.Penalty_Coef is not null then
               Hpr_Pref.c_Penalty_Type_Coef
              when Pp.Penalty_Amount is not null then
               Hpr_Pref.c_Penalty_Type_Amount
              when Pp.Penalty_Time is not null then
               Hpr_Pref.c_Penalty_Type_Time
            end case,
           Pp.From_Day,
           Pp.To_Day,
           Pp.From_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.To_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.Penalty_Coef,
           Pp.Penalty_Per_Time,
           Pp.Penalty_Amount,
           Pp.Penalty_Time,
           Pp.Calc_After_From_Time
      bulk collect
      into v_Policies
      from Hpr_Penalty_Policies Pp
     where Pp.Company_Id = i_Company_Id
       and Pp.Filial_Id = i_Filial_Id
       and Pp.Penalty_Id = v_Penalty_Id;
  
    select p.Timesheet_Date, --
           p.Input_Time, --
           p.Output_Time, --
           Array_Number(Tf.Time_Kind_Id, Tf.Fact_Value, p.Plan_Time)
      bulk collect
      into v_Fact_Dates, v_Input_Times, v_Output_Times, v_Facts
      from Htt_Timesheets p
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = p.Company_Id
       and Tf.Filial_Id = p.Filial_Id
       and Tf.Timesheet_Id = p.Timesheet_Id
       and Tf.Time_Kind_Id in (v_Late_Id, v_Early_Id, v_Lack_Id)
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between Trunc(i_Period_Begin, 'Mon') and i_Period_End
     order by p.Timesheet_Date, Tf.Time_Kind_Id;
  
    select p.Planned_Marks - p.Done_Marks, p.Timesheet_Date
      bulk collect
      into v_Skipped_Marks, v_Mark_Dates
      from Htt_Timesheets p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between i_Period_Begin and i_Period_End
       and p.Day_Kind = Htt_Pref.c_Day_Kind_Work
       and p.Planned_Marks > p.Done_Marks;
  
    Init_Day_Amounts;
  
    for i in 1 .. v_Policies.Count
    loop
      v_Policy := v_Policies(i);
    
      v_Days_Cnt := 0;
    
      if v_Policy.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
        for j in 1 .. v_Skipped_Marks.Count
        loop
          if v_Skipped_Marks(j) > v_Policy.From_Time and --
             v_Skipped_Marks(j) <= Nvl(v_Policy.To_Time, v_Skipped_Marks(j)) then
            Add_Amounts(i_Penalty_Kind     => v_Policy.Penalty_Kind,
                        i_Penalty_Amount   => v_Policy.Penalty_Amount,
                        i_Day_Index        => Day_Index(v_Mark_Dates(j)),
                        p_Mark_Skip_Amount => o_Mark_Skip_Amount);
          end if;
        end loop;
      else
        v_Time_Kind_Id := Get_Tk_Id(v_Policy.Penalty_Kind);
      
        for j in 1 .. v_Facts.Count
        loop
          v_Fact_Tk_Id  := v_Facts(j) (1);
          v_Fact_Value  := v_Facts(j) (2);
          v_Plan_Time   := v_Facts(j) (3);
          v_Input_Time  := v_Input_Times(j);
          v_Output_Time := v_Output_Times(j);
          v_Fact_Date   := v_Fact_Dates(j);
        
          continue when v_Fact_Tk_Id <> v_Time_Kind_Id;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Input_Time is not null and v_Output_Time is not null;
        
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Day_Skip;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value <> v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Lack;
        
          if v_Fact_Value > v_Policy.From_Time and
             v_Fact_Value <= Nvl(v_Policy.To_Time, v_Fact_Value) then
            v_Days_Cnt := v_Days_Cnt + 1;
          
            if v_Fact_Date between i_Period_Begin and i_Period_End then
              v_Penalty_Amount := Calc_Amount(i_Policy          => v_Policy,
                                              i_Wage_Per_Minute => v_Wage_Per_Minute,
                                              i_Facts_Value     => v_Fact_Value);
            
              if v_Days_Cnt > v_Policy.From_Day and --
                 v_Days_Cnt <= Nvl(v_Policy.To_Day, v_Days_Cnt) then
                Add_Amounts(i_Policy          => v_Policy,
                            i_Penalty_Amount  => v_Penalty_Amount,
                            i_Day_Index       => Day_Index(v_Fact_Date),
                            p_Late_Amount     => o_Late_Amount,
                            p_Early_Amount    => o_Early_Amount,
                            p_Lack_Amount     => o_Lack_Amount,
                            p_Day_Skip_Amount => o_Day_Skip_Amount);
              end if;
            end if;
          end if;
        end loop;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number is
    v_Dummy_Late      number;
    v_Dummy_Early     number;
    v_Dummy_Lack      number;
    v_Dummy_Day_Skip  number;
    v_Dummy_Mark_Skip number;
    v_Daily_Amounts   Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => v_Dummy_Late,
                        o_Early_Amount     => v_Dummy_Early,
                        o_Lack_Amount      => v_Dummy_Lack,
                        o_Day_Skip_Amount  => v_Dummy_Day_Skip,
                        o_Mark_Skip_Amount => v_Dummy_Mark_Skip,
                        o_Day_Amounts      => v_Daily_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  
    return v_Daily_Amounts;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Dummy_Amounts Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => o_Late_Amount,
                        o_Early_Amount     => o_Early_Amount,
                        o_Lack_Amount      => o_Lack_Amount,
                        o_Day_Skip_Amount  => o_Day_Skip_Amount,
                        o_Mark_Skip_Amount => o_Mark_Skip_Amount,
                        o_Day_Amounts      => v_Dummy_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt is
    v_Overtime_Type_Id number;
    v_Oper_Type_Id     number;
    v_Oper_Group_Id    number;
    v_Schedule_Id      number;
    v_Monthly_Amount   number;
    v_Plan_Amount      number;
    v_Wage_Amount      number;
    v_Overtime_Amount  number;
    v_Late_Amount      number;
    v_Early_Amount     number;
    v_Lack_Amount      number;
    v_Day_Skip_Amount  number;
    v_Mark_Skip_Amount number;
    v_Hourly_Wage      number;
    r_Robot            Hpd_Trans_Robots%rowtype;
    v_Trans_Parts      Hpd_Pref.Transaction_Part_Nt;
    v_Sheet_Parts      Hpr_Pref.Sheet_Part_Nt := Hpr_Pref.Sheet_Part_Nt();
  begin
    v_Oper_Group_Id := Oper_Group_Id(i_Company_Id => i_Company_Id,
                                     i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_Overtime_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Overtime);
  
    v_Trans_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                           i_Filial_Id       => i_Filial_Id,
                                                           i_Staff_Id        => i_Staff_Id,
                                                           i_Begin_Date      => i_Period_Begin,
                                                           i_End_Date        => i_Period_End,
                                                           i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                               Hpd_Pref.c_Transaction_Type_Operation,
                                                                                               Hpd_Pref.c_Transaction_Type_Schedule),
                                                           i_With_Wage_Scale => false);
  
    for i in 1 .. v_Trans_Parts.Count
    loop
      v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => v_Oper_Group_Id,
                                                          i_Period        => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Oper_Type_Id is null;
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Schedule_Id is null;
    
      continue when Htt_Util.Has_Undefined_Schedule(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => v_Schedule_Id,
                                                    i_Period      => v_Trans_Parts(i).Part_Begin);
    
      v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                      i_Filial_Id    => i_Filial_Id,
                                      i_Staff_Id     => i_Staff_Id,
                                      i_Oper_Type_Id => v_Oper_Type_Id,
                                      i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                      i_Part_End     => v_Trans_Parts(i).Part_End,
                                      i_Calc_Planned => true);
    
      v_Plan_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End,
                                   i_Calc_Worked  => true);
    
      v_Wage_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Overtime_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Staff_Id     => i_Staff_Id,
                                       i_Oper_Type_Id => v_Overtime_Type_Id,
                                       i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                       i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Hourly_Wage := Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Id,
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                        i_Part_End     => v_Trans_Parts(i).Part_End);
    
      r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Staff_Id   => i_Staff_Id,
                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      Calc_Penalty_Amounts(o_Late_Amount      => v_Late_Amount,
                           o_Early_Amount     => v_Early_Amount,
                           o_Lack_Amount      => v_Lack_Amount,
                           o_Day_Skip_Amount  => v_Day_Skip_Amount,
                           o_Mark_Skip_Amount => v_Mark_Skip_Amount,
                           i_Company_Id       => i_Company_Id,
                           i_Filial_Id        => i_Filial_Id,
                           i_Staff_Id         => i_Staff_Id,
                           i_Division_Id      => r_Robot.Division_Id,
                           i_Hourly_Wage      => v_Hourly_Wage,
                           i_Period_Begin     => v_Trans_Parts(i).Part_Begin,
                           i_Period_End       => v_Trans_Parts(i).Part_End);
    
      Sheet_Add_Part(p_Parts            => v_Sheet_Parts,
                     i_Part_Begin       => v_Trans_Parts(i).Part_Begin,
                     i_Part_End         => v_Trans_Parts(i).Part_End,
                     i_Division_Id      => r_Robot.Division_Id,
                     i_Job_Id           => r_Robot.Job_Id,
                     i_Schedule_Id      => v_Schedule_Id,
                     i_Fte_Id           => r_Robot.Fte_Id,
                     i_Monthly_Amount   => i_Round_Model.Eval(v_Monthly_Amount),
                     i_Plan_Amount      => i_Round_Model.Eval(v_Plan_Amount),
                     i_Wage_Amount      => i_Round_Model.Eval(v_Wage_Amount),
                     i_Overtime_Amount  => i_Round_Model.Eval(v_Overtime_Amount),
                     i_Late_Amount      => i_Round_Model.Eval(v_Late_Amount),
                     i_Early_Amount     => i_Round_Model.Eval(v_Early_Amount),
                     i_Lack_Amount      => i_Round_Model.Eval(v_Lack_Amount),
                     i_Day_Skip_Amount  => i_Round_Model.Eval(v_Day_Skip_Amount),
                     i_Mark_Skip_Amount => i_Round_Model.Eval(v_Mark_Skip_Amount));
    end loop;
  
    return v_Sheet_Parts;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number is
    v_Penalty_Id number;
  begin
    select q.Penalty_Id
      into v_Penalty_Id
      from Hpr_Penalties q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Month = (select max(p.Month)
                        from Hpr_Penalties p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Month <= Trunc(i_Period, 'mon')
                         and p.Division_Id = i_Division_Id
                         and p.State = 'A')
       and q.Division_Id = i_Division_Id
       and q.State = 'A';
  
    return v_Penalty_Id;
  
  exception
    when No_Data_Found then
      begin
        select q.Penalty_Id
          into v_Penalty_Id
          from Hpr_Penalties q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Month = (select max(p.Month)
                            from Hpr_Penalties p
                           where p.Company_Id = i_Company_Id
                             and p.Filial_Id = i_Filial_Id
                             and p.Month <= Trunc(i_Period, 'mon')
                             and p.Division_Id is null
                             and p.State = 'A')
           and q.Division_Id is null
           and q.State = 'A';
      
        return v_Penalty_Id;
      
      exception
        when No_Data_Found then
          return null;
      end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Cv_Contract_Facts,
                                 i_Source_Id    => i_Fact_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap is
    v_Pref_Value varchar2(4000);
  begin
    v_Pref_Value := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Code       => Hpr_Pref.c_Pref_Timebook_Fill_Settings);
  
    if v_Pref_Value is null then
      return Fazo.Zip_Map('by_plan_day',
                          'Y',
                          'by_plan_hour',
                          'Y',
                          'norm_hour',
                          'Y',
                          'norm_day',
                          'Y');
    else
      return Fazo.Parse_Map(v_Pref_Value);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- charge status
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Draft return varchar2 is
  begin
    return t('charge_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_New return varchar2 is
  begin
    return t('charge_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Used return varchar2 is
  begin
    return t('charge_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Completed return varchar2 is
  begin
    return t('charge_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2 is
  begin
    return --
    case i_Charge_Status --
    when Hpr_Pref.c_Charge_Status_Draft then t_Charge_Status_Draft --
    when Hpr_Pref.c_Charge_Status_New then t_Charge_Status_New --
    when Hpr_Pref.c_Charge_Status_Used then t_Charge_Status_Used --
    when Hpr_Pref.c_Charge_Status_Completed then t_Charge_Status_Completed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Charge_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Charge_Status_Draft,
                                          Hpr_Pref.c_Charge_Status_New,
                                          Hpr_Pref.c_Charge_Status_Used,
                                          Hpr_Pref.c_Charge_Status_Completed),
                           Array_Varchar2(t_Charge_Status_Draft,
                                          t_Charge_Status_New,
                                          t_Charge_Status_Used,
                                          t_Charge_Status_Completed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- estimation type
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Formula return varchar2 is
  begin
    return t('estimation_type:formula');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Entered return varchar2 is
  begin
    return t('estimation_type:entered');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2 is
  begin
    return --
    case i_Estimation_Type --
    when Hpr_Pref.c_Estimation_Type_Formula then t_Estimation_Type_Formula --
    when Hpr_Pref.c_Estimation_Type_Entered then t_Estimation_Type_Entered --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Estimation_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Estimation_Type_Formula,
                                          Hpr_Pref.c_Estimation_Type_Entered),
                           Array_Varchar2(t_Estimation_Type_Formula, t_Estimation_Type_Entered));
  end;

  ----------------------------------------------------------------------------------------------------
  -- advance limit kind
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Turnout_Days return varchar2 is
  begin
    return t('advance_limit_kind:turnout');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Calendar_Days return varchar2 is
  begin
    return t('advance_limit_kind:calendar');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Advance_Limit_Kind --
    when Hpr_Pref.c_Advance_Limit_Turnout_Days then t_Advance_Limit_Turnout_Days --
    when Hpr_Pref.c_Advance_Limit_Calendar_Days then t_Advance_Limit_Calendar_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Advance_Limit_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Advance_Limit_Turnout_Days,
                                          Hpr_Pref.c_Advance_Limit_Calendar_Days),
                           Array_Varchar2(t_Advance_Limit_Turnout_Days,
                                          t_Advance_Limit_Calendar_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- period kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Full_Month return varchar2 is
  begin
    return t('period kind: full month');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_First_Half return varchar2 is
  begin
    return t('period kind: month first half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_Second_Half return varchar2 is
  begin
    return t('period kind: month second half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Custom return varchar2 is
  begin
    return t('period kind: custom period');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Period_Kind --
    when Hpr_Pref.c_Period_Full_Month then t_Period_Kind_Full_Month --
    when Hpr_Pref.c_Period_Month_First_Half then t_Period_Kind_Month_First_Half --
    when Hpr_Pref.c_Period_Month_Second_Half then t_Period_Kind_Month_Second_Half --
    when Hpr_Pref.c_Period_Custom then t_Period_Kind_Custom --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Period_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Period_Full_Month,
                                          Hpr_Pref.c_Period_Month_First_Half,
                                          Hpr_Pref.c_Period_Month_Second_Half,
                                          Hpr_Pref.c_Period_Custom),
                           Array_Varchar2(t_Period_Kind_Full_Month,
                                          t_Period_Kind_Month_First_Half,
                                          t_Period_Kind_Month_Second_Half,
                                          t_Period_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  -- penaties
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Late return varchar2 is
  begin
    return t('penalty kind: late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Early return varchar2 is
  begin
    return t('penalty kind: early');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Lack return varchar2 is
  begin
    return t('penalty kind: lack');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Day_Skip return varchar2 is
  begin
    return t('penalty kind: day skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Mark_Skip return varchar2 is
  begin
    return t('penalty kind: mark skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Penalty_Kind --
    when Hpr_Pref.c_Penalty_Kind_Late then t_Penalty_Kind_Late --
    when Hpr_Pref.c_Penalty_Kind_Early then t_Penalty_Kind_Early --
    when Hpr_Pref.c_Penalty_Kind_Lack then t_Penalty_Kind_Lack --
    when Hpr_Pref.c_Penalty_Kind_Day_Skip then t_Penalty_Kind_Day_Skip --
    when Hpr_Pref.c_Penalty_Kind_Mark_Skip then t_Penalty_Kind_Mark_Skip --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Penalty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Penalty_Kind_Late,
                                          Hpr_Pref.c_Penalty_Kind_Early,
                                          Hpr_Pref.c_Penalty_Kind_Lack,
                                          Hpr_Pref.c_Penalty_Kind_Day_Skip,
                                          Hpr_Pref.c_Penalty_Kind_Mark_Skip),
                           Array_Varchar2(t_Penalty_Kind_Late,
                                          t_Penalty_Kind_Early,
                                          t_Penalty_Kind_Lack,
                                          t_Penalty_Kind_Day_Skip,
                                          t_Penalty_Kind_Mark_Skip));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_New return varchar2 is
  begin
    return t('cv fact status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Complete return varchar2 is
  begin
    return t('cv fact status: complete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Accept return varchar2 is
  begin
    return t('cv fact status: accept');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_New then t_Cv_Fact_Status_New --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then t_Cv_Fact_Status_Complete --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Accept then t_Cv_Fact_Status_Accept --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cv_Fact_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_New,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Complete,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Accept),
                           Array_Varchar2(t_Cv_Fact_Status_New,
                                          t_Cv_Fact_Status_Complete,
                                          t_Cv_Fact_Status_Accept));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2 is
  begin
    return t('penalty_rule:min');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Times return varchar2 is
  begin
    return t('penalty_rule:times');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Days return varchar2 is
  begin
    return t('penalty_rule:days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} posted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} unposted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} saved $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} updated $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} deleted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} posted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} unposted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} saved $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} updated $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} deleted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

end Hpr_Util;
/

create or replace package Href_Audit is
  ----------------------------------------------------------------------------------------------------
  Procedure Edu_Stage_Start(i_Company_Id number);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Edu_Stage_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Science_Branch_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Science_Branch_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Institution_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Institution_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Specialty_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Specialty_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Level_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Level_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Document_Type_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Document_Type_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Reference_Type_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Reference_Type_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Relation_Degree_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Relation_Degree_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Marital_Status_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Marital_Status_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Type_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Type_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Award_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Award_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Labor_Function_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Labor_Function_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Reason_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Reason_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Reason_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Reason_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Reason_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Reason_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Employment_Source_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Employment_Source_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Fte_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Fte_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Detail_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Detail_Stop(i_Company_Id number);
end Href_Audit;
/
create or replace package body Href_Audit is
  ----------------------------------------------------------------------------------------------------
  Procedure Edu_Stage_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_EDU_STAGES',
                           i_Column_List => 'EDU_STAGE_ID,NAME,STATE,CODE,ORDER_NO');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_EDU_STAGES_I1',
                              i_Table_Name  => 'HREF_EDU_STAGES',
                              i_Column_List => 'T_COMPANY_ID,EDU_STAGE_ID,T_CONTEXT_ID');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Edu_Stage_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_EDU_STAGES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Science_Branch_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_SCIENCE_BRANCHES',
                           i_Column_List => 'SCIENCE_BRANCH_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_SCIENCE_BRANCHES_I1',
                              i_Table_Name  => 'HREF_SCIENCE_BRANCHES',
                              i_Column_List => 'T_COMPANY_ID,SCIENCE_BRANCH_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Science_Branch_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_SCIENCE_BRANCHES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Institution_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_INSTITUTIONS',
                           i_Column_List => 'INSTITUTION_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_INSTITUTIONS_I1',
                              i_Table_Name  => 'HREF_INSTITUTIONS',
                              i_Column_List => 'T_COMPANY_ID,INSTITUTION_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Institution_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_ACAD_TITLES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Specialty_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_SPECIALTIES',
                           i_Column_List => 'SPECIALTY_ID,PARENT_ID,KIND,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_SPECIALTIES_I1',
                              i_Table_Name  => 'HREF_SPECIALTIES',
                              i_Column_List => 'T_COMPANY_ID,SPECIALTY_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Specialty_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_SPECIALTIES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_LANGS',
                           i_Column_List => 'LANG_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_LANGS_I1',
                              i_Table_Name  => 'HREF_LANGS',
                              i_Column_List => 'T_COMPANY_ID,LANG_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_LANGS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Level_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_LANG_LEVELS',
                           i_Column_List => 'LANG_LEVEL_ID,NAME,STATE,ORDER_NO,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_LANG_LEVELS_I1',
                              i_Table_Name  => 'HREF_LANG_LEVELS',
                              i_Column_List => 'T_COMPANY_ID,LANG_LEVEL_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lang_Level_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_LANGS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Document_Type_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_DOCUMENT_TYPES',
                           i_Column_List => 'DOC_TYPE_ID,NAME,IS_REQUIRED,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_DOCUMENT_TYPES_I1',
                              i_Table_Name  => 'HREF_DOCUMENT_TYPES',
                              i_Column_List => 'T_COMPANY_ID,DOC_TYPE_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_EXCLUDED_DOCUMENT_TYPES',
                           i_Column_List => 'DIVISION_ID,JOB_ID,DOC_TYPE_ID',
                           i_Parent_Name => 'HREF_DOCUMENT_TYPES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Document_Type_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_DOCUMENT_TYPES');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id,
                          i_Table_Name => 'HREF_EXCLUDED_DOCUMENT_TYPES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reference_Type_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_REFERENCE_TYPES',
                           i_Column_List => 'REFERENCE_TYPE_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_REFERENCE_TYPES_I1',
                              i_Table_Name  => 'HREF_REFERENCE_TYPES',
                              i_Column_List => 'T_COMPANY_ID,REFERENCE_TYPE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reference_Type_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_REFERENCE_TYPES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Relation_Degree_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_RELATION_DEGREES',
                           i_Column_List => 'RELATION_DEGREE_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_RELATION_DEGREES_I1',
                              i_Table_Name  => 'HREF_RELATION_DEGREES',
                              i_Column_List => 'T_COMPANY_ID,RELATION_DEGREE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Relation_Degree_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_RELATION_DEGREES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Marital_Status_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_MARITAL_STATUSES',
                           i_Column_List => 'MARITAL_STATUS_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_MARITAL_STATUSES_I1',
                              i_Table_Name  => 'HREF_MARITAL_STATUSES',
                              i_Column_List => 'T_COMPANY_ID,MARITAL_STATUS_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Marital_Status_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_MARITAL_STATUSES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Type_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_EXPERIENCE_TYPES',
                           i_Column_List => 'EXPERIENCE_TYPE_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_EXPERIENCE_TYPES_I1',
                              i_Table_Name  => 'HREF_EXPERIENCE_TYPES',
                              i_Column_List => 'T_COMPANY_ID,EXPERIENCE_TYPE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Type_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_EXPERIENCE_TYPES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Award_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_AWARDS',
                           i_Column_List => 'AWARD_ID,NAME,STATE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_AWARDS_I1',
                              i_Table_Name  => 'HREF_AWARDS',
                              i_Column_List => 'T_COMPANY_ID,AWARD_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Award_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_AWARDS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Labor_Function_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_LABOR_FUNCTIONS',
                           i_Column_List => 'LABOR_FUNCTION_ID,NAME,DESCRIPTION,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_LABOR_FUNCTIONS_I1',
                              i_Table_Name  => 'HREF_LABOR_FUNCTIONS',
                              i_Column_List => 'T_COMPANY_ID,LABOR_FUNCTION_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Labor_Function_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_LABOR_FUNCTIONS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Reason_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_SICK_LEAVE_REASONS',
                           i_Column_List => 'REASON_ID,NAME,COEFFICIENT,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_SICK_LEAVE_REASONS_I1',
                              i_Table_Name  => 'HREF_SICK_LEAVE_REASONS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,REASON_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Reason_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_SICK_LEAVE_REASONS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Reason_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_BUSINESS_TRIP_REASONS',
                           i_Column_List => 'REASON_ID,NAME,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_BUSINESS_TRIP_REASONS_I1',
                              i_Table_Name  => 'HREF_BUSINESS_TRIP_REASONS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,REASON_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Reason_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id,
                          i_Table_Name => 'HREF_BUSINESS_TRIP_REASONS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Reason_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_DISMISSAL_REASONS',
                           i_Column_List => 'DISMISSAL_REASON_ID,NAME,DESCRIPTION,REASON_TYPE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_DISMISSAL_REASONS_I1',
                              i_Table_Name  => 'HREF_DISMISSAL_REASONS',
                              i_Column_List => 'T_COMPANY_ID,DISMISSAL_REASON_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Reason_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_DISMISSAL_REASONS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_WAGES',
                           i_Column_List => 'WAGE_ID,JOB_ID,RANK_ID,WAGE_BEGIN,WAGE_END');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_WAGES_I1',
                              i_Table_Name  => 'HREF_WAGES',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,WAGE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_WAGES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Employment_Source_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_EMPLOYMENT_SOURCES',
                           i_Column_List => 'SOURCE_ID,NAME,KIND,ORDER_NO,STATE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_EMPLOYMENT_SOURCES_I1',
                              i_Table_Name  => 'HREF_EMPLOYMENT_SOURCES',
                              i_Column_List => 'T_COMPANY_ID,SOURCE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Employment_Source_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_EMPLOYMENT_SOURCES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_INDICATORS',
                           i_Column_List => 'INDICATOR_ID,NAME,SHORT_NAME,IDENTIFIER,USED,STATE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_INDICATORS_I1',
                              i_Table_Name  => 'HREF_INDICATORS',
                              i_Column_List => 'T_COMPANY_ID,INDICATOR_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_INDICATORS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fte_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_FTES',
                           i_Column_List => 'FTE_ID,NAME,FTE_VALUE,ORDER_NO');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_FTES_I1',
                              i_Table_Name  => 'HREF_FTES',
                              i_Column_List => 'T_COMPANY_ID,FTE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fte_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_FTES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Detail_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HREF_PERSON_DETAILS',
                           i_Column_List => 'PERSON_ID,EXTRA_PHONE,IAPA,NPIN,CORPORATE_EMAIL,NATIONALITY_ID,KEY_PERSON,ACCESS_ALL_EMPLOYEES');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HREF_PERSON_DETAILS_I1',
                              i_Table_Name  => 'HREF_PERSON_DETAILS',
                              i_Column_List => 'T_COMPANY_ID,PERSON_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Detail_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HREF_PERSON_DETAILS');
  end;

end Href_Audit;
/

create or replace package Href_Pref is
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id           number,
    Person_Id            number,
    First_Name           varchar2(250 char),
    Last_Name            varchar2(250 char),
    Middle_Name          varchar2(250 char),
    Gender               varchar2(1),
    Birthday             date,
    Nationality_Id       number,
    Photo_Sha            varchar2(64),
    Tin                  varchar2(18 char),
    Iapa                 varchar2(20 char),
    Npin                 varchar2(14 char),
    Region_Id            number,
    Main_Phone           varchar2(100 char),
    Email                varchar2(100 char),
    Address              varchar2(500 char),
    Legal_Address        varchar2(300 char),
    Key_Person           varchar2(1),
    Access_All_Employees varchar2(1),
    Access_Hidden_Salary varchar2(1),
    State                varchar2(1),
    Code                 varchar2(50 char));
  ----------------------------------------------------------------------------------------------------
  type Person_Lang_Rt is record(
    Lang_Id       number,
    Lang_Level_Id number);
  type Person_Lang_Nt is table of Person_Lang_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Experience_Rt is record(
    Person_Experience_Id number,
    Experience_Type_Id   number,
    Is_Working           varchar2(1),
    Start_Date           date,
    Num_Year             number,
    Num_Month            number,
    Num_Day              number);
  type Person_Experience_Nt is table of Person_Experience_Rt;
  ----------------------------------------------------------------------------------------------------
  type Employee_Info_Rt is record(
    Context_Id number,
    Column_Key varchar2(100),
    Event      varchar2(1),
    value      varchar2(2000),
    timestamp  date,
    User_Id    number);
  type Employee_Info_Nt is table of Employee_Info_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Recom_Rt is record(
    Recommendation_Id   number,
    Sender_Name         varchar2(300 char),
    Sender_Phone_Number varchar2(30 char),
    Sender_Email        varchar2(320 char),
    File_Sha            varchar2(64),
    Order_No            number,
    Feedback            varchar2(300 char),
    Note                varchar2(300 char));
  type Candidate_Recom_Nt is table of Candidate_Recom_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Person_Type_Id   number,
    Candidate_Kind   varchar2(1),
    Source_Id        number,
    Wage_Expectation number,
    Cv_Sha           varchar2(64),
    Note             varchar2(300 char),
    Extra_Phone      varchar2(100 char),
    Edu_Stages       Array_Number,
    Candidate_Jobs   Array_Number,
    Person           Person_Rt,
    Langs            Person_Lang_Nt,
    Experiences      Person_Experience_Nt,
    Recommendations  Candidate_Recom_Nt);
  ----------------------------------------------------------------------------------------------------
  type Employee_Rt is record(
    Person    Person_Rt,
    Filial_Id number,
    State     varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Indicator_Rt is record(
    Indicator_Id    number,
    Indicator_Value number);
  type Indicator_Nt is table of Indicator_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Licensed_Rt is record(
    Staff_Id number,
    Period   date,
    Licensed varchar2(1));
  type Staff_Licensed_Nt is table of Staff_Licensed_Rt;
  ----------------------------------------------------------------------------------------------------
  type Oper_Type_Rt is record(
    Oper_Type_Id  number,
    Indicator_Ids Array_Number);
  type Oper_Type_Nt is table of Oper_Type_Rt;
  ----------------------------------------------------------------------------------------------------
  type Period_Rt is record(
    Period_Begin date,
    Period_End   date);
  type Period_Nt is table of Period_Rt;
  -- Fte limit
  ----------------------------------------------------------------------------------------------------
  type Fte_Limit_Rt is record(
    Fte_Limit_Setting varchar2(1),
    Fte_Limit         number);
  ---------------------------------------------------------------------------------------------------- 
  c_Fte_Limit_Setting constant varchar2(50) := 'VHR:FTE_LIMIT_SETTING';
  c_Fte_Limit         constant varchar2(50) := 'VHR:FTE_LIMIT';
  c_Fte_Limit_Default constant number := 1.5;
  ----------------------------------------------------------------------------------------------------
  type Col_Required_Setting_Rt is record(
    Last_Name              varchar2(1) := 'N',
    Middle_Name            varchar2(1) := 'N',
    Birthday               varchar2(1) := 'N',
    Phone_Number           varchar2(1) := 'N',
    Email                  varchar2(1) := 'N',
    Region                 varchar2(1) := 'N',
    Address                varchar2(1) := 'N',
    Legal_Address          varchar2(1) := 'N',
    Passport               varchar2(1) := 'N',
    Npin                   varchar2(1) := 'N',
    Iapa                   varchar2(1) := 'N',
    Request_Note           varchar2(1) := 'N',
    Request_Note_Limit     number := 0,
    Plan_Change_Note       varchar2(1) := 'N',
    Plan_Change_Note_Limit number := 0);
  ----------------------------------------------------------------------------------------------------
  -- Project Code
  ----------------------------------------------------------------------------------------------------
  c_Pc_Verifix_Hr constant varchar2(10) := 'vhr';
  ----------------------------------------------------------------------------------------------------
  -- Project Version
  ----------------------------------------------------------------------------------------------------
  c_Pv_Verifix_Hr constant varchar2(10) := '2.35.0';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Role
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Role_Hr         constant varchar2(10) := 'VHR:1';
  c_Pcode_Role_Supervisor constant varchar2(10) := 'VHR:2';
  c_Pcode_Role_Staff      constant varchar2(10) := 'VHR:3';
  c_Pcode_Role_Accountant constant varchar2(10) := 'VHR:4';
  c_Pcode_Role_Timepad    constant varchar2(10) := 'VHR:5';
  c_Pcode_Role_Recruiter  constant varchar2(10) := 'VHR:6';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Document_Type_Default_Passport constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Status_New      constant varchar2(1) := 'N';
  c_Person_Document_Status_Approved constant varchar2(1) := 'A';
  c_Person_Document_Status_Rejected constant varchar2(1) := 'R';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Owe Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Owe_Status_Complete constant varchar2(1) := 'C';
  c_Person_Document_Owe_Status_Partial  constant varchar2(1) := 'P';
  c_Person_Document_Owe_Status_Exempt   constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Indicator
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Indicator_Wage                     constant varchar2(20) := 'VHR:1';
  c_Pcode_Indicator_Rate                     constant varchar2(20) := 'VHR:2';
  c_Pcode_Indicator_Plan_Days                constant varchar2(20) := 'VHR:3';
  c_Pcode_Indicator_Fact_Days                constant varchar2(20) := 'VHR:4';
  c_Pcode_Indicator_Plan_Hours               constant varchar2(20) := 'VHR:5';
  c_Pcode_Indicator_Fact_Hours               constant varchar2(20) := 'VHR:6';
  c_Pcode_Indicator_Perf_Bonus               constant varchar2(20) := 'VHR:7';
  c_Pcode_Indicator_Perf_Extra_Bonus         constant varchar2(20) := 'VHR:8';
  c_Pcode_Indicator_Working_Days             constant varchar2(20) := 'VHR:9';
  c_Pcode_Indicator_Working_Hours            constant varchar2(20) := 'VHR:10';
  c_Pcode_Indicator_Sick_Leave_Coefficient   constant varchar2(20) := 'VHR:11';
  c_Pcode_Indicator_Business_Trip_Days       constant varchar2(20) := 'VHR:12';
  c_Pcode_Indicator_Vacation_Days            constant varchar2(20) := 'VHR:13';
  c_Pcode_Indicator_Mean_Working_Days        constant varchar2(20) := 'VHR:14';
  c_Pcode_Indicator_Sick_Leave_Days          constant varchar2(20) := 'VHR:15';
  c_Pcode_Indicator_Hourly_Wage              constant varchar2(20) := 'VHR:16';
  c_Pcode_Indicator_Overtime_Hours           constant varchar2(20) := 'VHR:17';
  c_Pcode_Indicator_Overtime_Coef            constant varchar2(20) := 'VHR:18';
  c_Pcode_Indicator_Penalty_For_Late         constant varchar2(20) := 'VHR:19';
  c_Pcode_Indicator_Penalty_For_Early_Output constant varchar2(20) := 'VHR:20';
  c_Pcode_Indicator_Penalty_For_Absence      constant varchar2(20) := 'VHR:21';
  c_Pcode_Indicator_Penalty_For_Day_Skip     constant varchar2(20) := 'VHR:22';
  c_Pcode_Indicator_Perf_Penalty             constant varchar2(20) := 'VHR:23';
  c_Pcode_Indicator_Perf_Extra_Penalty       constant varchar2(20) := 'VHR:24';
  c_Pcode_Indicator_Penalty_For_Mark_Skip    constant varchar2(20) := 'VHR:25';
  ----------------------------------------------------------------------------------------------------
  -- Fte Pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Fte_Full_Time    constant varchar2(20) := 'VHR:1';
  c_Pcode_Fte_Part_Time    constant varchar2(20) := 'VHR:2';
  c_Pcode_Fte_Quarter_Time constant varchar2(20) := 'VHR:3';
  ----------------------------------------------------------------------------------------------------
  c_Custom_Fte_Id constant number := -1;
  c_Default_Fte   constant number := 1.0;
  ----------------------------------------------------------------------------------------------------
  -- Staff Status
  ----------------------------------------------------------------------------------------------------
  c_Staff_Status_Working   constant varchar2(1) := 'W';
  c_Staff_Status_Dismissed constant varchar2(1) := 'D';
  c_Staff_Status_Unknown   constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- Staff Kind
  ----------------------------------------------------------------------------------------------------
  c_Staff_Kind_Primary   constant varchar2(1) := 'P';
  c_Staff_Kind_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Candidate Kind
  ----------------------------------------------------------------------------------------------------
  c_Candidate_Kind_New constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Specialty Kind
  ----------------------------------------------------------------------------------------------------
  c_Specialty_Kind_Group     constant varchar2(1) := 'G';
  c_Specialty_Kind_Specialty constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Employment Source Kind
  ----------------------------------------------------------------------------------------------------
  c_Employment_Source_Kind_Hiring    constant varchar2(1) := 'H';
  c_Employment_Source_Kind_Dismissal constant varchar2(1) := 'D';
  c_Employment_Source_Kind_Both      constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- User Access Level
  ----------------------------------------------------------------------------------------------------
  c_User_Access_Level_Personal          constant varchar2(1) := 'P';
  c_User_Access_Level_Direct_Employee   constant varchar2(1) := 'D';
  c_User_Access_Level_Undirect_Employee constant varchar2(1) := 'U';
  c_User_Access_Level_Manual            constant varchar2(1) := 'M';
  c_User_Access_Level_Other             constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- Indicator Used
  ----------------------------------------------------------------------------------------------------
  c_Indicator_Used_Constantly    constant varchar2(1) := 'C';
  c_Indicator_Used_Automatically constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Time Formats
  ----------------------------------------------------------------------------------------------------
  c_Time_Format_Minute       constant varchar2(50) := 'hh24:mi';
  c_Date_Format_Year         constant varchar2(50) := 'yyyy';
  c_Date_Format_Month        constant varchar2(50) := 'mm.yyyy';
  c_Date_Format_Day          constant varchar2(50) := 'dd.mm.yyyy';
  c_Date_Format_Minute       constant varchar2(50) := 'dd.mm.yyyy hh24:mi';
  c_Date_Format_Second       constant varchar2(50) := 'dd.mm.yyyy hh24:mi:ss';
  c_Date_Format_Year_Quarter constant varchar2(50) := 'yyyy "Q"q';
  ---------------------------------------------------------------------------------------------------- 
  -- Date trunc formats
  ---------------------------------------------------------------------------------------------------- 
  c_Date_Trunc_Format_Year    constant varchar2(50) := 'yyyy';
  c_Date_Trunc_Format_Month   constant varchar2(50) := 'mm';
  c_Date_Trunc_Format_Quarter constant varchar2(50) := 'q';
  ----------------------------------------------------------------------------------------------------
  -- Max Date
  ----------------------------------------------------------------------------------------------------
  c_Max_Date constant date := to_date('31.12.9999', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Min Date
  ----------------------------------------------------------------------------------------------------
  c_Min_Date constant date := to_date('01.01.0001', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal Reason Types
  ----------------------------------------------------------------------------------------------------
  c_Dismissal_Reasons_Type_Positive constant varchar2(1) := 'P';
  c_Dismissal_Reasons_Type_Negative constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Working Time Differences
  ----------------------------------------------------------------------------------------------------
  c_Diff_Hiring    constant number := -2;
  c_Diff_Dismissal constant number := 7;
  ----------------------------------------------------------------------------------------------------
  -- Module error codes
  ----------------------------------------------------------------------------------------------------
  c_Href_Error_Code  constant varchar2(10) := 'A05-01';
  c_Hes_Error_Code   constant varchar2(10) := 'A05-02';
  c_Hlic_Error_Code  constant varchar2(10) := 'A05-03';
  c_Htt_Error_Code   constant varchar2(10) := 'A05-04';
  c_Hzk_Error_Code   constant varchar2(10) := 'A05-05';
  c_Hrm_Error_Code   constant varchar2(10) := 'A05-06';
  c_Hpd_Error_Code   constant varchar2(10) := 'A05-07';
  c_Hln_Error_Code   constant varchar2(10) := 'A05-08';
  c_Hper_Error_Code  constant varchar2(10) := 'A05-09';
  c_Hpr_Error_Code   constant varchar2(10) := 'A05-10';
  c_Hac_Error_Code   constant varchar2(10) := 'A05-11';
  c_Htm_Error_Code   constant varchar2(10) := 'A05-12';
  c_Hrec_Error_Code  constant varchar2(10) := 'A05-13';
  c_Hsc_Error_Code   constant varchar2(10) := 'A05-14';
  c_Hface_Error_Code constant varchar2(10) := 'A05-15';
  c_Uit_Error_Code   constant varchar2(10) := 'A05-99';
  ----------------------------------------------------------------------------------------------------
  -- Column required settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Crs_Last_Name              constant varchar2(50) := 'vhr:href:crs:last_name';
  c_Pref_Crs_Middle_Name            constant varchar2(50) := 'vhr:href:crs:middle_name';
  c_Pref_Crs_Birthday               constant varchar2(50) := 'vhr:href:crs:birthday';
  c_Pref_Crs_Phone_Number           constant varchar2(50) := 'vhr:href:crs:phone_number';
  c_Pref_Crs_Email                  constant varchar2(50) := 'vhr:href:crs:email';
  c_Pref_Crs_Region                 constant varchar2(50) := 'vhr:href:crs:region';
  c_Pref_Crs_Address                constant varchar2(50) := 'vhr:href:crs:address';
  c_Pref_Crs_Legal_Address          constant varchar2(50) := 'vhr:href:crs:legal_address';
  c_Pref_Crs_Passport               constant varchar2(50) := 'vhr:href:crs:passport';
  c_Pref_Crs_Npin                   constant varchar2(50) := 'vhr:href:crs:npin';
  c_Pref_Crs_Iapa                   constant varchar2(50) := 'vhr:href:crs:iapa';
  c_Pref_Crs_Request_Note           constant varchar2(50) := 'vhr:href:crs:request_note';
  c_Pref_Crs_Request_Note_Limit     constant varchar2(50) := 'vhr:href:crs:request_note_limit';
  c_Pref_Crs_Plan_Change_Note       constant varchar2(50) := 'vhr:href:crs:plan_change_note';
  c_Pref_Crs_Plan_Change_Note_Limit constant varchar2(50) := 'vhr:href:crs:plan_change_note_limit';
  ----------------------------------------------------------------------------------------------------
  -- Company badge template
  ----------------------------------------------------------------------------------------------------
  c_Pref_Badge_Template_Id constant varchar2(50) := 'href:company_badge_template_id';
  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  c_Pref_Vpu_Setting constant varchar2(50) := 'href:vpu:setting';
  c_Pref_Vpu_Column  constant varchar2(50) := 'href:vpu:column';
  ----------------------------------------------------------------------------------------------------
  c_Vpu_Column_Name            constant varchar2(1) := 'N';
  c_Vpu_Column_Passport_Number constant varchar2(1) := 'P';
  c_Vpu_Column_Npin            constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  c_Settings_Separator constant varchar2(1) := '$';
  ----------------------------------------------------------------------------------------------------
  -- HTTP METHODS
  ----------------------------------------------------------------------------------------------------
  c_Http_Method_Get    constant varchar2(10) := 'GET';
  c_Http_Method_Put    constant varchar2(10) := 'PUT';
  c_Http_Method_Post   constant varchar2(10) := 'POST';
  c_Http_Method_Delete constant varchar2(10) := 'DELETE';

end Href_Pref;
/
create or replace package body Href_Pref is
end Href_Pref;
/

create or replace package Href_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person               out Href_Pref.Person_Rt,
    i_Company_Id           number,
    i_Person_Id            number,
    i_First_Name           varchar2,
    i_Last_Name            varchar2,
    i_Middle_Name          varchar2,
    i_Gender               varchar2,
    i_Birthday             date,
    i_Nationality_Id       number,
    i_Photo_Sha            varchar2,
    i_Tin                  varchar2,
    i_Iapa                 varchar2,
    i_Npin                 varchar2,
    i_Region_Id            number,
    i_Main_Phone           varchar2,
    i_Email                varchar2,
    i_Address              varchar2,
    i_Legal_Address        varchar2,
    i_Key_Person           varchar2,
    i_Access_All_Employees varchar2 := null,
    i_Access_Hidden_Salary varchar2 := null,
    i_State                varchar2,
    i_Code                 varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_New
  (
    o_Candidate        out Href_Pref.Candidate_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Candidate_Id     number,
    i_Person_Type_Id   number,
    i_Candidate_Kind   varchar2,
    i_First_Name       varchar2,
    i_Last_Name        varchar2,
    i_Middle_Name      varchar2,
    i_Gender           varchar2,
    i_Birthday         date,
    i_Photo_Sha        varchar2,
    i_Region_Id        number,
    i_Main_Phone       varchar2,
    i_Extra_Phone      varchar2,
    i_Email            varchar2,
    i_Address          varchar2,
    i_Legal_Address    varchar2,
    i_Source_Id        number,
    i_Wage_Expectation number,
    i_Cv_Sha           varchar2,
    i_Note             varchar2,
    i_Edu_Stages       Array_Number,
    i_Candidate_Jobs   Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Lang
  (
    p_Candidate     in out nocopy Href_Pref.Candidate_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Experience
  (
    p_Candidate            in out nocopy Href_Pref.Candidate_Rt,
    i_Person_Experience_Id number,
    i_Experience_Type_Id   number,
    i_Is_Working           varchar2,
    i_Start_Date           date,
    i_Num_Year             number,
    i_Num_Month            number,
    i_Num_Day              number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Recom
  (
    p_Candidate           in out nocopy Href_Pref.Candidate_Rt,
    i_Recommendation_Id   number,
    i_Sender_Name         varchar2,
    i_Sender_Phone_Number varchar2,
    i_Sender_Email        varchar2,
    i_File_Sha            varchar2,
    i_Order_No            number,
    i_Feedback            varchar2,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Candidate_Form_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Href_Candidate_Ref_Settings%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Employee_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Date        date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return number;
  ---------------------------------------------------------------------------------------------------- 
  Function Get_Division_Manager
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return Mrf_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Href_Pref.Staff_Licensed_Nt
    pipelined;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  Function Staff_Id_By_Staff_Number
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Number varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Doc_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Random_Integer
  (
    i_Low  number,
    i_High number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Default_User_Login
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Template   varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Direct_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Child_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Parents          Array_Number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manual_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Chief_Subordinates
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Direct_Divisions Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Director
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinate_Divisions
  (
    o_Subordinate_Chiefs out Array_Number,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Direct             boolean,
    i_Indirect           boolean,
    i_Manual             boolean,
    i_Gather_Chiefs      boolean,
    i_Employee_Id        number,
    i_Only_Departments   varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Direct_Employee varchar2,
    i_Employee_Id     number,
    i_Self            varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------  
  Function Company_Badge_Template_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Col_Required_Settings(i_Company_Id number) return Href_Pref.Col_Required_Setting_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Name
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Name       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Phone
  (
    i_Company_Id number,
    i_Person_Id  number := null,
    i_Phone      varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Setting(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Column(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return varchar2 Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Has_Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Request_Note_Is_Required(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Request_Note_Limit(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Plan_Change_Note_Is_Required(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Plan_Change_Note_Limit(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Fte_Limit(i_Company_Id number) return Href_Pref.Fte_Limit_Rt;
  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind(i_Kind varchar2) return varchar2;
  Function Specialty_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status(i_Staff_Status varchar2) return varchar2;
  Function Staff_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind(i_Staff_Kind varchar2) return varchar2;
  Function Staff_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source(i_Source_Kind varchar2) return varchar2;
  Function Employment_Source_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_User_Acces_Level(i_Acces_Level varchar2) return varchar2;
  Function User_Acces_Levels return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used(i_Used varchar2) return varchar2;
  Function Indicator_Useds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind(i_Kind varchar2) return varchar2;
  Function Candidate_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type(i_Dismissal_Reasons_Type varchar2) return varchar2;
  Function Dismissal_Reasons_Type return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Custom_Fte_Name return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_From_To_Rule
  (
    i_From      number,
    i_To        number,
    i_Rule_Unit varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status(i_Status varchar2) return varchar2;
  Function Person_Document_Owe_Status return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column(i_Column varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Employee_Personal_Audit_Column_Names return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Employee_Contact_Audit_Column_Names return Matrix_Varchar2;
end Href_Util;
/
create or replace package body Href_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREF:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person               out Href_Pref.Person_Rt,
    i_Company_Id           number,
    i_Person_Id            number,
    i_First_Name           varchar2,
    i_Last_Name            varchar2,
    i_Middle_Name          varchar2,
    i_Gender               varchar2,
    i_Birthday             date,
    i_Nationality_Id       number,
    i_Photo_Sha            varchar2,
    i_Tin                  varchar2,
    i_Iapa                 varchar2,
    i_Npin                 varchar2,
    i_Region_Id            number,
    i_Main_Phone           varchar2,
    i_Email                varchar2,
    i_Address              varchar2,
    i_Legal_Address        varchar2,
    i_Key_Person           varchar2,
    i_Access_All_Employees varchar2 := null,
    i_Access_Hidden_Salary varchar2 := null,
    i_State                varchar2,
    i_Code                 varchar2
  ) is
  begin
    o_Person.Company_Id           := i_Company_Id;
    o_Person.Person_Id            := i_Person_Id;
    o_Person.First_Name           := i_First_Name;
    o_Person.Last_Name            := i_Last_Name;
    o_Person.Middle_Name          := i_Middle_Name;
    o_Person.Gender               := i_Gender;
    o_Person.Birthday             := i_Birthday;
    o_Person.Nationality_Id       := i_Nationality_Id;
    o_Person.Photo_Sha            := i_Photo_Sha;
    o_Person.Tin                  := i_Tin;
    o_Person.Iapa                 := i_Iapa;
    o_Person.Npin                 := i_Npin;
    o_Person.Region_Id            := i_Region_Id;
    o_Person.Main_Phone           := i_Main_Phone;
    o_Person.Email                := i_Email;
    o_Person.Address              := i_Address;
    o_Person.Legal_Address        := i_Legal_Address;
    o_Person.Key_Person           := i_Key_Person;
    o_Person.Access_All_Employees := i_Access_All_Employees;
    o_Person.Access_Hidden_Salary := i_Access_Hidden_Salary;
    o_Person.State                := i_State;
    o_Person.Code                 := i_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_New
  (
    o_Candidate        out Href_Pref.Candidate_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Candidate_Id     number,
    i_Person_Type_Id   number,
    i_Candidate_Kind   varchar2,
    i_First_Name       varchar2,
    i_Last_Name        varchar2,
    i_Middle_Name      varchar2,
    i_Gender           varchar2,
    i_Birthday         date,
    i_Photo_Sha        varchar2,
    i_Region_Id        number,
    i_Main_Phone       varchar2,
    i_Extra_Phone      varchar2,
    i_Email            varchar2,
    i_Address          varchar2,
    i_Legal_Address    varchar2,
    i_Source_Id        number,
    i_Wage_Expectation number,
    i_Cv_Sha           varchar2,
    i_Note             varchar2,
    i_Edu_Stages       Array_Number,
    i_Candidate_Jobs   Array_Number
  ) is
  begin
    o_Candidate.Company_Id       := i_Company_Id;
    o_Candidate.Filial_Id        := i_Filial_Id;
    o_Candidate.Person_Type_Id   := i_Person_Type_Id;
    o_Candidate.Candidate_Kind   := i_Candidate_Kind;
    o_Candidate.Source_Id        := i_Source_Id;
    o_Candidate.Wage_Expectation := i_Wage_Expectation;
    o_Candidate.Cv_Sha           := i_Cv_Sha;
    o_Candidate.Note             := i_Note;
    o_Candidate.Extra_Phone      := i_Extra_Phone;
    o_Candidate.Edu_Stages       := i_Edu_Stages;
    o_Candidate.Candidate_Jobs   := i_Candidate_Jobs;
  
    o_Candidate.Person.Company_Id    := i_Company_Id;
    o_Candidate.Person.Person_Id     := i_Candidate_Id;
    o_Candidate.Person.First_Name    := i_First_Name;
    o_Candidate.Person.Last_Name     := i_Last_Name;
    o_Candidate.Person.Middle_Name   := i_Middle_Name;
    o_Candidate.Person.Gender        := i_Gender;
    o_Candidate.Person.Birthday      := i_Birthday;
    o_Candidate.Person.Photo_Sha     := i_Photo_Sha;
    o_Candidate.Person.Region_Id     := i_Region_Id;
    o_Candidate.Person.Main_Phone    := i_Main_Phone;
    o_Candidate.Person.Email         := i_Email;
    o_Candidate.Person.Address       := i_Address;
    o_Candidate.Person.Legal_Address := i_Legal_Address;
    o_Candidate.Person.State         := 'A';
  
    o_Candidate.Langs           := Href_Pref.Person_Lang_Nt();
    o_Candidate.Experiences     := Href_Pref.Person_Experience_Nt();
    o_Candidate.Recommendations := Href_Pref.Candidate_Recom_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Lang
  (
    p_Candidate     in out nocopy Href_Pref.Candidate_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  ) is
    v_Lang Href_Pref.Person_Lang_Rt;
  begin
    v_Lang.Lang_Id       := i_Lang_Id;
    v_Lang.Lang_Level_Id := i_Lang_Level_Id;
  
    p_Candidate.Langs.Extend;
    p_Candidate.Langs(p_Candidate.Langs.Count) := v_Lang;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Experience
  (
    p_Candidate            in out nocopy Href_Pref.Candidate_Rt,
    i_Person_Experience_Id number,
    i_Experience_Type_Id   number,
    i_Is_Working           varchar2,
    i_Start_Date           date,
    i_Num_Year             number,
    i_Num_Month            number,
    i_Num_Day              number
  ) is
    v_Experience Href_Pref.Person_Experience_Rt;
  begin
    v_Experience.Person_Experience_Id := i_Person_Experience_Id;
    v_Experience.Experience_Type_Id   := i_Experience_Type_Id;
    v_Experience.Is_Working           := i_Is_Working;
    v_Experience.Start_Date           := i_Start_Date;
    v_Experience.Num_Year             := i_Num_Year;
    v_Experience.Num_Month            := i_Num_Month;
    v_Experience.Num_Day              := i_Num_Day;
  
    p_Candidate.Experiences.Extend;
    p_Candidate.Experiences(p_Candidate.Experiences.Count) := v_Experience;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Recom
  (
    p_Candidate           in out nocopy Href_Pref.Candidate_Rt,
    i_Recommendation_Id   number,
    i_Sender_Name         varchar2,
    i_Sender_Phone_Number varchar2,
    i_Sender_Email        varchar2,
    i_File_Sha            varchar2,
    i_Order_No            number,
    i_Feedback            varchar2,
    i_Note                varchar2
  ) is
    v_Recommendation Href_Pref.Candidate_Recom_Rt;
  begin
    v_Recommendation.Recommendation_Id   := i_Recommendation_Id;
    v_Recommendation.Sender_Name         := i_Sender_Name;
    v_Recommendation.Sender_Phone_Number := i_Sender_Phone_Number;
    v_Recommendation.Sender_Email        := i_Sender_Email;
    v_Recommendation.File_Sha            := i_File_Sha;
    v_Recommendation.Order_No            := i_Order_No;
    v_Recommendation.Feedback            := i_Feedback;
    v_Recommendation.Note                := i_Note;
  
    p_Candidate.Recommendations.Extend;
    p_Candidate.Recommendations(p_Candidate.Recommendations.Count) := v_Recommendation;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Candidate_Form_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Href_Candidate_Ref_Settings%rowtype is
    result Href_Candidate_Ref_Settings%rowtype;
  begin
    if not z_Href_Candidate_Ref_Settings.Exist(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               o_Row        => result) then
      Result.Company_Id     := i_Company_Id;
      Result.Filial_Id      := i_Filial_Id;
      Result.Region         := 'N';
      Result.Address        := 'N';
      Result.Experience     := 'N';
      Result.Source         := 'N';
      Result.Recommendation := 'N';
      Result.Cv             := 'N';
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Employee_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return number is
  begin
    return z_Href_Staffs.Take(i_Company_Id => i_Company_Id, --
                              i_Filial_Id  => i_Filial_Id, --
                              i_Staff_Id   => i_Staff_Id).Employee_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns last active staff id
  -- returns null if no staff found
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return number is
    result number;
  begin
    select s.Staff_Id
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
     order by s.Hiring_Date desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Date        date
  ) return number is
    result number;
  begin
    select s.Staff_Id
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date <= i_Date
     order by s.Hiring_Date desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns primary staff_id that was active on duration of period
  -- returns null if no such staff found
  Function Get_Primary_Staff_Id
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return number is
    v_Staff_Id number;
  begin
    select s.Staff_Id
      into v_Staff_Id
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date <= i_Period_Begin
       and Nvl(s.Dismissal_Date, i_Period_End) >= i_Period_End;
  
    return v_Staff_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Get_Division_Manager
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return Mrf_Robots%rowtype is
    r_Division_Manager Mrf_Division_Managers%rowtype;
  begin
    r_Division_Manager := z_Mrf_Division_Managers.Take(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Division_Id => i_Division_Id);
  
    return z_Mrf_Robots.Take(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Robot_Id   => r_Division_Manager.Manager_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return number is
    r_Robot       Mrf_Robots%rowtype;
    v_Division_Id number;
  begin
    v_Division_Id := z_Hrm_Robots.Take(i_Company_Id => i_Company_Id, --
                     i_Filial_Id => i_Filial_Id, --
                     i_Robot_Id => i_Robot_Id).Org_Unit_Id;
  
    r_Robot := Get_Division_Manager(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Division_Id => v_Division_Id);
  
    if r_Robot.Robot_Id = i_Robot_Id then
      v_Division_Id := z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                       i_Filial_Id => i_Filial_Id, --
                       i_Division_Id => r_Robot.Division_Id).Parent_Id;
    
      r_Robot := Get_Division_Manager(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Division_Id => v_Division_Id);
    end if;
  
    return r_Robot.Person_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    v_Manager_Id number;
    r_Staff      Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    v_Manager_Id := Get_Manager_Id(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => r_Staff.Robot_Id);
  
    return z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                     i_Person_Id  => v_Manager_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return varchar2 is
    v_Staff_Id number;
  begin
    v_Staff_Id := Get_Primary_Staff_Id(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Employee_Id  => i_Employee_Id,
                                       i_Period_Begin => Trunc(sysdate),
                                       i_Period_End   => Trunc(sysdate));
  
    return Get_Manager_Name(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => v_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    result Mr_Natural_Persons.Name%type;
  begin
    select (select w.Name
              from Mr_Natural_Persons w
             where w.Company_Id = q.Company_Id
               and w.Person_Id = q.Employee_Id)
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    result Mr_Natural_Persons.Name%type;
  begin
    select (select w.Code
              from Mr_Natural_Persons w
             where w.Company_Id = q.Company_Id
               and w.Person_Id = q.Employee_Id)
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Id_By_Staff_Number
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Number varchar2
  ) return number is
    result number;
  begin
    select q.Staff_Id
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and Upper(q.Staff_Number) = Upper(i_Staff_Number);
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Href_Pref.Staff_Licensed_Nt
    pipelined is
    r_Staff          Href_Staffs%rowtype;
    v_Staff_Licensed Href_Pref.Staff_Licensed_Rt;
    v_Begin_Date     date;
    v_End_Date       date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    v_Staff_Licensed.Staff_Id := i_Staff_Id;
    v_Begin_Date              := Greatest(r_Staff.Hiring_Date, i_Period_Begin);
    v_End_Date                := Least(Nvl(r_Staff.Dismissal_Date, i_Period_End), i_Period_End);
  
    for r in (select Dates.Period,
                     Nvl((select 'N'
                           from Hlic_Unlicensed_Employees Le
                          where Le.Company_Id = r_Staff.Company_Id
                            and Le.Employee_Id = r_Staff.Employee_Id
                            and Le.Licensed_Date = Dates.Period),
                         'Y') as Licensed
                from (select (v_Begin_Date + level - 1) as Period
                        from Dual
                      connect by level <= (v_End_Date - v_Begin_Date + 1)) Dates)
    loop
      v_Staff_Licensed.Period   := r.Period;
      v_Staff_Licensed.Licensed := r.Licensed;
    
      pipe row(v_Staff_Licensed);
    end loop;
  
    return;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return varchar2 is
    v_Count number;
  begin
    select count(*)
      into v_Count
      from Staff_Licensed_Period(i_Company_Id   => i_Company_Id,
                                 i_Filial_Id    => i_Filial_Id,
                                 i_Staff_Id     => i_Staff_Id,
                                 i_Period_Begin => i_Period_Begin,
                                 i_Period_End   => i_Period_End) q
     where q.Licensed = 'N';
  
    if v_Count = 0 then
      return 'Y';
    else
      return 'N';
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
  begin
    for r in (select q.Period
                from Staff_Licensed_Period(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Staff_Id     => i_Staff_Id,
                                           i_Period_Begin => i_Period_Begin,
                                           i_Period_End   => i_Period_End) q
               where q.Licensed = 'N'
                 and Rownum = 1)
    loop
      Href_Error.Raise_018(i_Employee_Name  => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                           i_Period_Begin   => i_Period_Begin,
                           i_Period_End     => i_Period_End,
                           i_Unlicensed_Day => r.Period);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Labor_Function_Id
      into result
      from Href_Labor_Functions q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_019(i_Labor_Function_Code => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Labor_Function_Id
      into result
      from Href_Labor_Functions q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_020(i_Labor_Function_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Fixed_Term_Base_Id
      into result
      from Href_Fixed_Term_Bases q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_021(i_Fixed_Term_Base_Code => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Fixed_Term_Base_Id
      into result
      from Href_Fixed_Term_Bases q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_022(i_Fixed_Term_Base_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Doc_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select q.Doc_Type_Id
      into result
      from Href_Document_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Indicator_Id
      into result
      from Href_Indicators
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Fte_Id
      into result
      from Href_Ftes q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_023(i_Fte_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select q.Fte_Id
      into result
      from Href_Ftes q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_024(i_Fte_Pcode => i_Pcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Nationality_Id
      into result
      from Href_Nationalities q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_029(i_Nationality_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns randoms integer in [low, high] interval
  ----------------------------------------------------------------------------------------------------
  Function Random_Integer
  (
    i_Low  number,
    i_High number
  ) return number is
  begin
    return Trunc(Dbms_Random.Value(i_Low, i_High + 1));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Default_User_Login
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Template   varchar2
  ) return varchar2 is
    r_Person Mr_Natural_Persons%rowtype;
    v_Login  varchar2(100);
  begin
    r_Person := z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  
    v_Login := Regexp_Replace(i_Template, 'first_name', r_Person.First_Name);
    v_Login := Regexp_Replace(v_Login, 'last_name', r_Person.Last_Name);
    v_Login := Md_Util.Login_Fixer(v_Login);
  
    return Regexp_Replace(v_Login, '@', '');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Direct_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Rd.Division_Id
      bulk collect
      into result
      from Mrf_Robots r
      join Hrm_Robot_Divisions Rd
        on Rd.Company_Id = r.Company_Id
       and Rd.Filial_Id = r.Filial_Id
       and Rd.Robot_Id = r.Robot_Id
       and Rd.Access_Type = Hrm_Pref.c_Access_Type_Structural
      join Hrm_Divisions Dv
        on Dv.Company_Id = Rd.Company_Id
       and Dv.Filial_Id = Rd.Filial_Id
       and Dv.Division_Id = Rd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where r.Company_Id = i_Company_Id
       and r.Filial_Id = i_Filial_Id
       and r.Person_Id = i_Employee_Id;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Child_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Parents          Array_Number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Pd.Division_Id
      bulk collect
      into result
      from Mhr_Parent_Divisions Pd
      join Hrm_Divisions Dv
        on Dv.Company_Id = Pd.Company_Id
       and Dv.Filial_Id = Pd.Filial_Id
       and Dv.Division_Id = Pd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Parent_Id member of i_Parents;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manual_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Rd.Division_Id
      bulk collect
      into result
      from Mrf_Robots r
      join Hrm_Robot_Divisions Rd
        on Rd.Company_Id = r.Company_Id
       and Rd.Filial_Id = r.Filial_Id
       and Rd.Robot_Id = r.Robot_Id
       and Rd.Access_Type = Hrm_Pref.c_Access_Type_Manual
      join Hrm_Divisions Dv
        on Dv.Company_Id = Rd.Company_Id
       and Dv.Filial_Id = Rd.Filial_Id
       and Dv.Division_Id = Rd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where r.Company_Id = i_Company_Id
       and r.Filial_Id = i_Filial_Id
       and r.Person_Id = i_Employee_Id;
  
    result := result multiset union
              Get_Child_Divisions(i_Company_Id       => i_Company_Id,
                                  i_Filial_Id        => i_Filial_Id,
                                  i_Only_Departments => i_Only_Departments,
                                  i_Parents          => result);
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Chief_Subordinates
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Direct_Divisions Array_Number
  ) return Array_Number is
    result Array_Number;
  begin
    select Rb.Person_Id
      bulk collect
      into result
      from Mhr_Parent_Divisions Pd
      join Mrf_Division_Managers p
        on p.Company_Id = Pd.Company_Id
       and p.Filial_Id = Pd.Filial_Id
       and p.Division_Id = Pd.Division_Id
      join Mrf_Robots Rb
        on Rb.Company_Id = p.Company_Id
       and Rb.Filial_Id = p.Filial_Id
       and Rb.Robot_Id = p.Manager_Id
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Parent_Id member of i_Direct_Divisions
       and Pd.Lvl = 1;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinate_Divisions
  (
    o_Subordinate_Chiefs out Array_Number,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Direct             boolean,
    i_Indirect           boolean,
    i_Manual             boolean,
    i_Gather_Chiefs      boolean,
    i_Employee_Id        number,
    i_Only_Departments   varchar2 := 'N'
  ) return Array_Number is
    v_Direct_Divisions Array_Number;
    result             Array_Number := Array_Number();
  begin
    v_Direct_Divisions := Get_Direct_Divisions(i_Company_Id       => i_Company_Id,
                                               i_Filial_Id        => i_Filial_Id,
                                               i_Employee_Id      => i_Employee_Id,
                                               i_Only_Departments => i_Only_Departments);
  
    o_Subordinate_Chiefs := Array_Number();
  
    if i_Direct then
      result := v_Direct_Divisions;
    
      if i_Gather_Chiefs then
        o_Subordinate_Chiefs := Get_Chief_Subordinates(i_Company_Id       => i_Company_Id,
                                                       i_Filial_Id        => i_Filial_Id,
                                                       i_Direct_Divisions => v_Direct_Divisions);
      end if;
    end if;
  
    if i_Indirect then
      result := result multiset union
                Get_Child_Divisions(i_Company_Id       => i_Company_Id,
                                    i_Filial_Id        => i_Filial_Id,
                                    i_Parents          => v_Direct_Divisions,
                                    i_Only_Departments => i_Only_Departments);
    end if;
  
    if i_Manual then
      result := result multiset union
                Get_Manual_Divisions(i_Company_Id       => i_Company_Id,
                                     i_Filial_Id        => i_Filial_Id,
                                     i_Employee_Id      => i_Employee_Id,
                                     i_Only_Departments => i_Only_Departments);
    end if;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Director
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'X'
      into v_Dummy
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and exists (select 1
              from Mrf_Division_Managers m
              join Mhr_Divisions d
                on d.Company_Id = m.Company_Id
               and d.Filial_Id = m.Filial_Id
               and d.Division_Id = m.Division_Id
               and d.Parent_Id is null
             where m.Company_Id = q.Company_Id
               and m.Filial_Id = q.Filial_Id
               and m.Manager_Id = q.Robot_Id);
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Direct_Employee varchar2,
    i_Employee_Id     number,
    i_Self            varchar2 := 'N'
  ) return Array_Number is
    v_Current_Date date := Trunc(Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id));
  
    v_Division_Ids       Array_Number;
    v_Subordinate_Chiefs Array_Number;
  
    result Array_Number := Array_Number();
  begin
    if i_Direct_Employee is null or i_Direct_Employee <> 'Y' and i_Direct_Employee <> 'N' then
      b.Raise_Not_Implemented;
    end if;
  
    v_Division_Ids := Get_Subordinate_Divisions(o_Subordinate_Chiefs => v_Subordinate_Chiefs,
                                                i_Company_Id         => i_Company_Id,
                                                i_Filial_Id          => i_Filial_Id,
                                                i_Direct             => true,
                                                i_Indirect           => i_Direct_Employee = 'N',
                                                i_Manual             => false,
                                                i_Gather_Chiefs      => true,
                                                i_Employee_Id        => i_Employee_Id);
  
    select s.Staff_Id
      bulk collect
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and (i_Self = 'Y' or s.Employee_Id <> i_Employee_Id)
       and s.State = 'A'
       and v_Current_Date between s.Hiring_Date and Nvl(s.Dismissal_Date, Href_Pref.c_Max_Date)
       and (s.Org_Unit_Id member of v_Division_Ids or --
            s.Employee_Id member of v_Subordinate_Chiefs or --
            i_Self = 'Y' and s.Employee_Id = i_Employee_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Company_Badge_Template_Id(i_Company_Id number) return number is
  begin
    return to_number(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                  i_Code       => Href_Pref.c_Pref_Badge_Template_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Col_Required_Settings(i_Company_Id number) return Href_Pref.Col_Required_Setting_Rt is
    result Href_Pref.Col_Required_Setting_Rt;
  
    --------------------------------------------------
    Function Load_Pref(i_Code varchar2) return varchar2 is
    begin
      return Md_Pref.Load(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                          i_Code       => i_Code);
    end;
  begin
    Result.Last_Name              := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Last_Name), 'N');
    Result.Middle_Name            := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Middle_Name), 'N');
    Result.Birthday               := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Birthday), 'N');
    Result.Phone_Number           := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Phone_Number), 'N');
    Result.Email                  := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Email), 'N');
    Result.Region                 := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Region), 'N');
    Result.Address                := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Address), 'N');
    Result.Legal_Address          := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Legal_Address), 'N');
    Result.Passport               := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Passport), 'N');
    Result.Npin                   := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Npin), 'N');
    Result.Iapa                   := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Iapa), 'N');
    Result.Request_Note           := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Request_Note), 'N');
    Result.Request_Note_Limit     := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Request_Note_Limit), 0);
    Result.Plan_Change_Note       := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Plan_Change_Note), 'N');
    Result.Plan_Change_Note_Limit := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit), 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------                 
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2 is
    v_Dummy number;
  begin
    execute immediate 'select 1 from ' || i_Table.Name ||
                      ' where company_id = :1 and filial_id = :2 and ' || --
                      case
                        when i_Check_Case = 'Y' then
                         'lower(' || i_Column || ') = lower(:3)'
                        else
                         i_Column || ' = :3'
                      end
      into v_Dummy
      using i_Company_Id, i_Filial_Id, i_Column_Value;
  
    return 'N';
  
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------                 
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2 is
    v_Dummy number;
  begin
    execute immediate 'select 1 from ' || i_Table.Name || --
                      ' where company_id = :1 and ' || --
                      case
                        when i_Check_Case = 'Y' then
                         'lower(' || i_Column || ') = lower(:2)'
                        else
                         i_Column || ' = :2'
                      end
      into v_Dummy
      using i_Company_Id, i_Column_Value;
  
    return 'N';
  
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Code,
                        i_Column_Value => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Filial_Id    => i_Filial_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Code,
                        i_Column_Value => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Name
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Name       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Name,
                        i_Column_Value => i_Name,
                        i_Check_Case   => 'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Phone
  (
    i_Company_Id number,
    i_Person_Id  number := null,
    i_Phone      varchar2
  ) return varchar2 is
    v_Dummy varchar2(1);
    v_Phone varchar2(25) := Regexp_Replace(i_Phone, '\D', '');
  begin
    select 'x'
      into v_Dummy
      from Md_Persons q
     where q.Company_Id = i_Company_Id
       and (i_Person_Id is null or q.Person_Id <> i_Person_Id)
       and q.Phone = v_Phone
       and q.State = 'A';
  
    return 'N';
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Setting(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Vpu_Setting),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Column(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Vpu_Column),
               Href_Pref.c_Vpu_Column_Passport_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return varchar2 Result_Cache Relies_On(Href_Person_Details) is
  begin
    if i_User_Id = Md_Pref.User_Admin(i_Company_Id) then
      return 'Y';
    else
      return Nvl(z_Href_Person_Details.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_User_Id).Access_Hidden_Salary,
                 'N');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return boolean is
  begin
    return Access_Hidden_Salary(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id) = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Note_Is_Required(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Request_Note),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Request_Note_Limit(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit),
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Plan_Change_Note_Is_Required(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Plan_Change_Note_Limit(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit),
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Fte_Limit(i_Company_Id number) return Href_Pref.Fte_Limit_Rt is
    v_Setting Href_Pref.Fte_Limit_Rt;
  begin
    v_Setting.Fte_Limit_Setting := Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                                    i_Code       => Href_Pref.c_Fte_Limit_Setting),
                                       'N');
  
    if v_Setting.Fte_Limit_Setting = 'Y' then
      v_Setting.Fte_Limit := Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                              i_Code       => Href_Pref.c_Fte_Limit),
                                 Href_Pref.c_Fte_Limit_Default);
    end if;
  
    return v_Setting;
  end;

  ----------------------------------------------------------------------------------------------------
  -- specialty kind
  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind_Group return varchar2 is
  begin
    return t('specialty_kind:group');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind_Specialty return varchar2 is
  begin
    return t('specialty_kind:specialty');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Href_Pref.c_Specialty_Kind_Group then t_Specialty_Kind_Group --
    when Href_Pref.c_Specialty_Kind_Specialty then t_Specialty_Kind_Specialty --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Specialty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Specialty_Kind_Group,
                                          Href_Pref.c_Specialty_Kind_Specialty),
                           Array_Varchar2(t_Specialty_Kind_Group, t_Specialty_Kind_Specialty));
  end;

  ----------------------------------------------------------------------------------------------------
  -- staff status
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Working return varchar2 is
  begin
    return t('staff_status:working');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Dismissed return varchar2 is
  begin
    return t('staff_status:dismissed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Unknown return varchar2 is
  begin
    return t('staff_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status(i_Staff_Status varchar2) return varchar2 is
  begin
    return --
    case i_Staff_Status --
    when Href_Pref.c_Staff_Status_Working then t_Staff_Status_Working --
    when Href_Pref.c_Staff_Status_Dismissed then t_Staff_Status_Dismissed --
    when Href_Pref.c_Staff_Status_Unknown then t_Staff_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Staff_Status_Working,
                                          Href_Pref.c_Staff_Status_Dismissed,
                                          Href_Pref.c_Staff_Status_Unknown),
                           Array_Varchar2(t_Staff_Status_Working,
                                          t_Staff_Status_Dismissed,
                                          t_Staff_Status_Unknown));
  
  end;
  ----------------------------------------------------------------------------------------------------
  -- staff kind
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind_Primary return varchar2 is
  begin
    return t('staff_kind:primary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind_Secondary return varchar2 is
  begin
    return t('staff_kind:secondary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind(i_Staff_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Staff_Kind --
    when Href_Pref.c_Staff_Kind_Primary then t_Staff_Kind_Primary --
    when Href_Pref.c_Staff_Kind_Secondary then t_Staff_Kind_Secondary --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Staff_Kind_Primary,
                                          Href_Pref.c_Staff_Kind_Secondary),
                           Array_Varchar2(t_Staff_Kind_Primary, t_Staff_Kind_Secondary));
  end;

  ----------------------------------------------------------------------------------------------------
  -- employment source kind
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Hiring return varchar2 is
  begin
    return t('employment_source_kind:hiring');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Dismissal return varchar2 is
  begin
    return t('employment_source_kind:dismissal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Both return varchar2 is
  begin
    return t('employment_source_kind:both');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source(i_Source_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Source_Kind --
    when Href_Pref.c_Employment_Source_Kind_Hiring then t_Employment_Source_Kind_Hiring --
    when Href_Pref.c_Employment_Source_Kind_Dismissal then t_Employment_Source_Kind_Dismissal --
    when Href_Pref.c_Employment_Source_Kind_Both then t_Employment_Source_Kind_Both --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employment_Source_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Employment_Source_Kind_Hiring,
                                          Href_Pref.c_Employment_Source_Kind_Dismissal,
                                          Href_Pref.c_Employment_Source_Kind_Both),
                           Array_Varchar2(t_Employment_Source_Kind_Hiring,
                                          t_Employment_Source_Kind_Dismissal,
                                          t_Employment_Source_Kind_Both));
  end;

  ----------------------------------------------------------------------------------------------------
  -- user access level
  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Personal return varchar2 is
  begin
    return t('user_access_level: personal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Direct_Employee return varchar2 is
  begin
    return t('user_access_level: direct employee');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Undirect_Employee return varchar2 is
  begin
    return t('user_access_level: undirect employee');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Manual return varchar2 is
  begin
    return t('user_access_level: manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Other return varchar2 is
  begin
    return t('user_access_level: other');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Acces_Level(i_Acces_Level varchar2) return varchar2 is
  begin
    return --
    case i_Acces_Level --
    when Href_Pref.c_User_Access_Level_Personal then t_User_Access_Level_Personal --
    when Href_Pref.c_User_Access_Level_Direct_Employee then t_User_Access_Level_Direct_Employee --
    when Href_Pref.c_User_Access_Level_Undirect_Employee then t_User_Access_Level_Undirect_Employee --
    when Href_Pref.c_User_Access_Level_Manual then t_User_Access_Level_Manual --
    when Href_Pref.c_User_Access_Level_Other then t_User_Access_Level_Other --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Acces_Levels return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_User_Access_Level_Personal,
                                          Href_Pref.c_User_Access_Level_Direct_Employee,
                                          Href_Pref.c_User_Access_Level_Undirect_Employee,
                                          Href_Pref.c_User_Access_Level_Manual,
                                          Href_Pref.c_User_Access_Level_Other),
                           Array_Varchar2(t_User_Access_Level_Personal,
                                          t_User_Access_Level_Direct_Employee,
                                          t_User_Access_Level_Undirect_Employee,
                                          t_User_Access_Level_Manual,
                                          t_User_Access_Level_Other));
  end;

  ----------------------------------------------------------------------------------------------------
  -- indicator used
  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used_Constantly return varchar2 is
  begin
    return t('indicator_used:constantly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used_Automatically return varchar2 is
  begin
    return t('indicator_used:automatically');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used(i_Used varchar2) return varchar2 is
  begin
    return --
    case i_Used --
    when Href_Pref.c_Indicator_Used_Constantly then t_Indicator_Used_Constantly --
    when Href_Pref.c_Indicator_Used_Automatically then t_Indicator_Used_Automatically --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Useds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Indicator_Used_Constantly,
                                          Href_Pref.c_Indicator_Used_Automatically),
                           Array_Varchar2(t_Indicator_Used_Constantly,
                                          t_Indicator_Used_Automatically));
  end;

  ----------------------------------------------------------------------------------------------------
  -- candidate kind
  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind_New return varchar is
  begin
    return t('candidate_kind: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Href_Pref.c_Candidate_Kind_New then t_Candidate_Kind_New --
    when Href_Pref.c_Staff_Status_Unknown then t_Staff_Status_Unknown --
    when Href_Pref.c_Staff_Status_Working then t_Staff_Status_Working --
    when Href_Pref.c_Staff_Status_Dismissed then t_Staff_Status_Dismissed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Candidate_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Candidate_Kind_New,
                                          Href_Pref.c_Staff_Status_Unknown,
                                          Href_Pref.c_Staff_Status_Working,
                                          Href_Pref.c_Staff_Status_Dismissed),
                           Array_Varchar2(t_Candidate_Kind_New,
                                          t_Staff_Status_Unknown,
                                          t_Staff_Status_Working,
                                          t_Staff_Status_Dismissed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- dismissal reasons type
  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type_Positive return varchar2 is
  begin
    return t('dismissal_reasons_type: positive');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type_Negative return varchar2 is
  begin
    return t('dismissal_reasons_type: negative');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type(i_Dismissal_Reasons_Type varchar2) return varchar2 is
  begin
    return --
    case i_Dismissal_Reasons_Type --
    when Href_Pref.c_Dismissal_Reasons_Type_Positive then t_Dismissal_Reasons_Type_Positive --
    when Href_Pref.c_Dismissal_Reasons_Type_Negative then t_Dismissal_Reasons_Type_Negative --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dismissal_Reasons_Type return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Dismissal_Reasons_Type_Positive,
                                          Href_Pref.c_Dismissal_Reasons_Type_Negative),
                           Array_Varchar2(t_Dismissal_Reasons_Type_Positive, --
                                          t_Dismissal_Reasons_Type_Negative));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Custom_Fte_Name return varchar2 is
  begin
    return t('custom fte name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_From_To_Rule
  (
    i_From      number,
    i_To        number,
    i_Rule_Unit varchar2
  ) return varchar2 is
    v_t_From varchar2(100 char);
    v_t_To   varchar2(100 char);
  begin
    if i_From is not null or i_To is null then
      v_t_From := t('from_to_rule:from $1{from_value} $2{rule_unit}', Nvl(i_From, 0), i_Rule_Unit);
    end if;
  
    if i_To is not null then
      v_t_To := t('from_to_rule:to $1{to_value} $2{rule_unit}', i_To, i_Rule_Unit);
    end if;
  
    return trim(v_t_From || ' ' || v_t_To);
  end;

  ----------------------------------------------------------------------------------------------------
  -- person document status
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_New return varchar2 is
  begin
    return t('person_document_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_Approved return varchar2 is
  begin
    return t('person_document_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_Rejected return varchar2 is
  begin
    return t('person_document_status:rejected');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Href_Pref.c_Person_Document_Status_New then t_Person_Document_Status_New --
    when Href_Pref.c_Person_Document_Status_Approved then t_Person_Document_Status_Approved --
    when Href_Pref.c_Person_Document_Status_Rejected then t_Person_Document_Status_Rejected --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- person document owe status
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Complete return varchar2 is
  begin
    return t('person_document_owe_status:complete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Partial return varchar2 is
  begin
    return t('person_document_owe_status:partial');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Exempt return varchar2 is
  begin
    return t('person_document_owe_status:exempt');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Href_Pref.c_Person_Document_Owe_Status_Complete then t_Person_Document_Owe_Status_Complete --
    when Href_Pref.c_Person_Document_Owe_Status_Partial then t_Person_Document_Owe_Status_Partial --
    when Href_Pref.c_Person_Document_Owe_Status_Exempt then t_Person_Document_Owe_Status_Exempt --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Document_Owe_Status return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Person_Document_Owe_Status_Complete,
                                          Href_Pref.c_Person_Document_Owe_Status_Partial,
                                          Href_Pref.c_Person_Document_Owe_Status_Exempt),
                           Array_Varchar2(t_Person_Document_Owe_Status_Complete,
                                          t_Person_Document_Owe_Status_Partial,
                                          t_Person_Document_Owe_Status_Exempt));
  end;

  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Name return varchar2 is
  begin
    return t('verify_person_uniqueness_column:name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Passport_Number return varchar2 is
  begin
    return t('verify_person_uniqueness_column:passport_number');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Npin return varchar2 is
  begin
    return t('verify_person_uniqueness_column:npin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column(i_Column varchar2) return varchar2 is
  begin
    return --
    case i_Column --
    when Href_Pref.c_Vpu_Column_Name then t_Verify_Person_Uniqueness_Column_Name --
    when Href_Pref.c_Vpu_Column_Passport_Number then t_Verify_Person_Uniqueness_Column_Passport_Number --
    when Href_Pref.c_Vpu_Column_Npin then t_Verify_Person_Uniqueness_Column_Npin --
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- employee personal audit column names
  ----------------------------------------------------------------------------------------------------
  Function t_First_Name return varchar2 is
  begin
    return t('first name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Last_Name return varchar2 is
  begin
    return t('last name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Middle_Name return varchar2 is
  begin
    return t('middle name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Nationality return varchar2 is
  begin
    return t('nationality');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Birthday return varchar2 is
  begin
    return t('birthday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gender return varchar2 is
  begin
    return t('gender');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Npin return varchar2 is
  begin
    return t('npin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Iapa return varchar2 is
  begin
    return t('iapa');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Tin return varchar2 is
  begin
    return t('tin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Note return varchar2 is
  begin
    return t('note');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employee_Personal_Audit_Column_Names return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(z.First_Name,
                                          z.Last_Name,
                                          z.Middle_Name,
                                          z.Nationality,
                                          z.Birthday,
                                          z.Gender,
                                          z.Npin,
                                          z.Iapa,
                                          z.Tin,
                                          z.Note),
                           Array_Varchar2(t_First_Name,
                                          t_Last_Name,
                                          t_Middle_Name,
                                          t_Nationality,
                                          t_Birthday,
                                          t_Gender,
                                          t_Npin,
                                          t_Iapa,
                                          t_Tin,
                                          t_Note));
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- employee contact audit column names
  ----------------------------------------------------------------------------------------------------
  Function t_Main_Phone return varchar2 is
  begin
    return t('main phone');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Extra_Phone return varchar2 is
  begin
    return t('extra phone');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Email return varchar2 is
  begin
    return t('email');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Corporate_Email return varchar2 is
  begin
    return t('corporate email');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Region return varchar2 is
  begin
    return t('region');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Address return varchar2 is
  begin
    return t('address');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Legal_Address return varchar2 is
  begin
    return t('legal address');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employee_Contact_Audit_Column_Names return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(z.Main_Phone,
                                          z.Extra_Phone,
                                          z.Email,
                                          z.Corporate_Email,
                                          z.Region,
                                          z.Address,
                                          z.Legal_Address),
                           Array_Varchar2(t_Main_Phone,
                                          t_Extra_Phone,
                                          t_Email,
                                          t_Corporate_Email,
                                          t_Region,
                                          t_Address,
                                          t_Legal_Address));
  end;

end Href_Util;
/

create or replace package Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  );
end Hrm_Api;
/
create or replace package body Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype) is
    v_Robot_Id number;
    r_Setting  Hrm_Settings%rowtype;
  
    -------------------------------------------------- 
    Function Get_Journal_Numbers
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number
    ) return Array_Varchar2 is
      result Array_Varchar2;
    begin
      select (select w.Journal_Number
                from Hpd_Journals w
               where w.Company_Id = q.Company_Id
                 and w.Filial_Id = q.Filial_Id
                 and w.Journal_Id = q.Journal_Id)
        bulk collect
        into result
        from Hpd_Page_Robots Pr
        join Hpd_Journal_Pages q
          on q.Company_Id = Pr.Company_Id
         and q.Filial_Id = Pr.Filial_Id
         and q.Page_Id = Pr.Page_Id
       where Pr.Company_Id = i_Company_Id
         and Pr.Filial_Id = i_Filial_Id
         and Pr.Robot_Id = i_Robot_Id;
    
      return set(result);
    end;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Setting.Company_Id,
                                       i_Filial_Id  => i_Setting.Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' and i_Setting.Position_Enable = 'N' then
      if Hrm_Core.Exists_Robot_With_Multiple_Staffs(i_Company_Id => i_Setting.Company_Id,
                                                    i_Filial_Id  => i_Setting.Filial_Id,
                                                    o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_013(i_Robot_Name      => z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                                                 i_Filial_Id => i_Setting.Filial_Id, --
                                                 i_Robot_Id => v_Robot_Id).Name,
                            i_Journal_Numbers => Get_Journal_Numbers(i_Company_Id => i_Setting.Company_Id, --
                                                                     i_Filial_Id  => i_Setting.Filial_Id, --
                                                                     i_Robot_Id   => v_Robot_Id));
      end if;
    
      if Hrm_Core.Exists_Robot_With_Booked_Trans(i_Company_Id => i_Setting.Company_Id,
                                                 i_Filial_Id  => i_Setting.Filial_Id,
                                                 o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_014(z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                            i_Filial_Id => i_Setting.Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    
      Hrm_Core.Insert_Division_Manager_Infos(i_Company_Id => i_Setting.Company_Id,
                                             i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    if r_Setting.Advanced_Org_Structure = 'Y' and i_Setting.Advanced_Org_Structure = 'N' then
      Hrm_Core.Assert_Advanced_Org_Structure_Changeable(i_Company_Id => i_Setting.Company_Id,
                                                        i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    z_Hrm_Settings.Save_Row(i_Setting);
  
    if r_Setting.Position_Enable = 'N' and i_Setting.Position_Enable = 'Y' then
      Hrm_Core.Open_Unopened_Robots(i_Company_Id => i_Setting.Company_Id,
                                    i_Filial_Id  => i_Setting.Filial_Id);
    
      Hrm_Core.Insert_Robot_Roles(i_Company_Id => i_Setting.Company_Id,
                                  i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype) is
  begin
    z_Hrm_Wage_Scales.Save_Row(i_Wage_Scale);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  ) is
  begin
    z_Hrm_Wage_Scales.Delete_One(i_Company_Id    => i_Company_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Wage_Scale_Id => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt) is
  begin
    Hrm_Core.Wage_Scale_Register_Save(i_Wage_Scale_Reg);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'Y' then
      Hrm_Error.Raise_015(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('Y'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'N' then
      Hrm_Error.Raise_016(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('N'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
  begin
    z_Hrm_Wage_Scale_Registers.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Register_Id => i_Register_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  ) is
    r_Robot        Mrf_Robots%rowtype;
    r_Hrm_Robot    Hrm_Robots%rowtype;
    r_Hrm_Division Hrm_Divisions%rowtype;
    r_Setting      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id,
                                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Division_Id Option_Number;
    v_Job_Id      Option_Number;
    v_Robot_Name  Option_Varchar2;
  begin
    if r_Setting.Position_Fixing = 'N' then
      return;
    end if;
  
    if not z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id) then
      return;
    end if;
  
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Division := z_Hrm_Divisions.Lock_Load(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Division_Id => r_Hrm_Robot.Org_Unit_Id);
  
    if r_Robot.Division_Id <> i_New_Division_Id then
      v_Division_Id := Option_Number(i_New_Division_Id);
    else
      v_Division_Id := null;
    end if;
  
    if r_Robot.Job_Id <> i_New_Job_Id then
      v_Job_Id := Option_Number(i_New_Job_Id);
    else
      v_Job_Id := null;
    end if;
  
    if r_Robot.Name <> i_New_Robot_Name then
      v_Robot_Name := Option_Varchar2(i_New_Robot_Name);
    else
      v_Robot_Name := null;
    end if;
  
    if v_Division_Id is null and v_Job_Id is null and v_Robot_Name is null then
      return;
    end if;
  
    z_Mrf_Robots.Update_One(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Robot_Id    => i_Robot_Id,
                            i_Division_Id => v_Division_Id,
                            i_Job_Id      => v_Job_Id,
                            i_Name        => v_Robot_Name);
  
    if v_Division_Id is not null and
       (r_Hrm_Division.Is_Department = 'Y' and i_New_Division_Id <> r_Hrm_Robot.Org_Unit_Id or
       r_Hrm_Division.Is_Department = 'N' and
       r_Hrm_Division.Parent_Department_Id <> i_New_Division_Id) then
      z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Robot_Id    => i_Robot_Id,
                              i_Org_Unit_Id => v_Division_Id);
    end if;
  
    for r in (select *
                from Hpd_Page_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Page_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Page_Id     => r.Page_Id,
                                   i_Division_Id => v_Division_Id,
                                   i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Hpd_Trans_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Trans_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Trans_Id    => r.Trans_Id,
                                    i_Division_Id => v_Division_Id,
                                    i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      Hpd_Core.Staff_Refresh_Cache(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => r.Staff_Id);
    
      Htt_Core.Person_Sync_Locations(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  ) is
    v_Org_Unit_Id number;
    r_Robot       Mrf_Robots%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    v_Org_Unit_Id := Nvl(i_Org_Unit_Id, r_Robot.Division_Id);
  
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Advanced_Org_Structure = 'N' then
      return;
    elsif v_Org_Unit_Id <> r_Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => r_Robot.Division_Id,
                                          i_Org_Unit_Id => v_Org_Unit_Id);
    end if;
  
    z_Hrm_Robots.Update_One(i_Company_Id  => r_Robot.Company_Id,
                            i_Filial_Id   => r_Robot.Filial_Id,
                            i_Robot_Id    => r_Robot.Robot_Id,
                            i_Org_Unit_Id => Option_Number(v_Org_Unit_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  ) is
    r_Settings      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Robot.Robot.Company_Id,
                                                                  i_Filial_Id  => i_Robot.Robot.Filial_Id);
    r_Mrf_Robot     Mrf_Robots%rowtype;
    r_Robot         Hrm_Robots%rowtype;
    r_Old_Robot     Hrm_Robots%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Register_Id   number;
    v_Value         number;
    v_User_Id       number;
  
    --------------------------------------------------
    Procedure Attach_Roles
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Robot_Id     number,
      i_Role_Ids     Array_Number,
      i_Is_New_Robot boolean
    ) is
      v_Role_Ids      Array_Number := i_Role_Ids;
      v_Staff_Role_Id number := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
    begin
      if i_Is_New_Robot and not Fazo.Contains(v_Role_Ids, v_Staff_Role_Id) then
        Fazo.Push(v_Role_Ids, v_Staff_Role_Id);
      end if;
    
      for r in (select *
                  from Mrf_Robot_Roles t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Robot_Id = i_Robot_Id
                   and t.Role_Id not in (select Column_Value
                                           from table(v_Role_Ids)))
      loop
        Mrf_Api.Robot_Remove_Role(i_Company_Id => r.Company_Id,
                                  i_Robot_Id   => r.Robot_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Role_Id    => r.Role_Id);
      end loop;
    
      for i in 1 .. v_Role_Ids.Count
      loop
        Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                               i_Robot_Id   => i_Robot_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Role_Id    => v_Role_Ids(i));
      end loop;
    end;
  
  begin
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) and
       z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Old_Robot) and --
       r_Settings.Position_Enable = 'Y' and
       Hrm_Util.Access_Edit_Div_Job_Of_Robot(i_Company_Id => i_Robot.Robot.Company_Id,
                                             i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                             i_Robot_Id   => i_Robot.Robot.Robot_Id) = 'N' then
      if r_Mrf_Robot.Division_Id <> i_Robot.Robot.Division_Id then
        Hrm_Error.Raise_017(i_Robot_Name   => r_Mrf_Robot.Name,
                            i_Old_Division => z_Mhr_Divisions.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                              i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                              i_Division_Id => r_Mrf_Robot.Division_Id).Name);
      end if;
    
      if r_Mrf_Robot.Job_Id <> i_Robot.Robot.Job_Id then
        Hrm_Error.Raise_018(i_Robot_Name => r_Mrf_Robot.Name,
                            i_Old_Job    => z_Mhr_Jobs.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                            i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                            i_Job_Id => r_Mrf_Robot.Job_Id).Name);
      end if;
    end if;
  
    if i_Robot.Planned_Fte > 1 or i_Robot.Planned_Fte < 0 then
      Hrm_Error.Raise_020(i_Robot.Planned_Fte);
    end if;
  
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) then
      r_Mrf_Robot.Name           := i_Robot.Robot.Name;
      r_Mrf_Robot.Code           := i_Robot.Robot.Code;
      r_Mrf_Robot.Robot_Group_Id := i_Robot.Robot.Robot_Group_Id;
      r_Mrf_Robot.Division_Id    := i_Robot.Robot.Division_Id;
      r_Mrf_Robot.Job_Id         := i_Robot.Robot.Job_Id;
      r_Mrf_Robot.State          := i_Robot.Robot.State;
    
      Mrf_Api.Robot_Save(r_Mrf_Robot);
    else
      Mrf_Api.Robot_Save(i_Robot.Robot);
    end if;
  
    z_Hrm_Robots.Init(p_Row                  => r_Robot,
                      i_Company_Id           => i_Robot.Robot.Company_Id,
                      i_Filial_Id            => i_Robot.Robot.Filial_Id,
                      i_Robot_Id             => i_Robot.Robot.Robot_Id,
                      i_Org_Unit_Id          => Nvl(i_Robot.Org_Unit_Id, i_Robot.Robot.Division_Id),
                      i_Opened_Date          => i_Robot.Opened_Date,
                      i_Closed_Date          => i_Robot.Closed_Date,
                      i_Schedule_Id          => i_Robot.Schedule_Id,
                      i_Rank_Id              => i_Robot.Rank_Id,
                      i_Labor_Function_Id    => i_Robot.Labor_Function_Id,
                      i_Description          => i_Robot.Description,
                      i_Hiring_Condition     => i_Robot.Hiring_Condition,
                      i_Contractual_Wage     => i_Robot.Contractual_Wage,
                      i_Access_Hidden_Salary => i_Robot.Access_Hidden_Salary);
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Mrf_Robots.Load(i_Company_Id => i_Robot.Robot.Company_Id, i_Filial_Id => i_Robot.Robot.Filial_Id, i_Robot_Id => i_Robot.Robot.Robot_Id).Modified_By;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      if r_Robot.Contractual_Wage = 'N' then
        r_Robot.Wage_Scale_Id := i_Robot.Wage_Scale_Id;
      end if;
    else
      r_Robot.Contractual_Wage := Nvl(r_Old_Robot.Contractual_Wage, 'Y');
      r_Robot.Wage_Scale_Id    := r_Old_Robot.Wage_Scale_Id;
    end if;
  
    if r_Settings.Position_Enable = 'N' and r_Old_Robot.Company_Id is not null then
      r_Robot.Opened_Date := r_Old_Robot.Opened_Date;
      r_Robot.Closed_Date := r_Old_Robot.Closed_Date;
    end if;
  
    if r_Settings.Advanced_Org_Structure = 'N' then
      r_Robot.Org_Unit_Id := i_Robot.Robot.Division_Id;
    elsif r_Robot.Org_Unit_Id <> i_Robot.Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => i_Robot.Robot.Division_Id,
                                          i_Org_Unit_Id => r_Robot.Org_Unit_Id);
    end if;
  
    z_Hrm_Robots.Save_Row(r_Robot);
  
    -- save robot vacation days limits
    if i_Robot.Vacation_Days_Limit is not null then
      z_Hrm_Robot_Vacation_Limits.Save_One(i_Company_Id => r_Robot.Company_Id,
                                           i_Filial_Id  => r_Robot.Filial_Id,
                                           i_Robot_Id   => r_Robot.Robot_Id,
                                           i_Days_Limit => i_Robot.Vacation_Days_Limit);
    end if;
  
    if r_Settings.Position_Enable = 'Y' then
      Hrm_Core.Robot_Plans_Delete(i_Company_Id => r_Robot.Company_Id,
                                  i_Filial_Id  => r_Robot.Filial_Id,
                                  i_Robot_Id   => r_Robot.Robot_Id);
    
      Hrm_Core.Robot_Open(i_Company_Id  => r_Robot.Company_Id,
                          i_Filial_Id   => r_Robot.Filial_Id,
                          i_Robot_Id    => r_Robot.Robot_Id,
                          i_Open_Date   => r_Robot.Opened_Date,
                          i_Planned_Fte => i_Robot.Planned_Fte);
    
      if r_Robot.Closed_Date is not null then
        Hrm_Core.Robot_Close(i_Company_Id => r_Robot.Company_Id,
                             i_Filial_Id  => r_Robot.Filial_Id,
                             i_Robot_Id   => r_Robot.Robot_Id,
                             i_Close_Date => r_Robot.Closed_Date);
      end if;
    end if;
  
    -- save oper types and indicators
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Robot.Oper_Types.Count);
    
      for i in 1 .. i_Robot.Indicators.Count
      loop
        v_Indicator := i_Robot.Indicators(i);
      
        z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                        i_Filial_Id       => r_Robot.Filial_Id,
                                        i_Robot_Id        => r_Robot.Robot_Id,
                                        i_Indicator_Id    => v_Indicator.Indicator_Id,
                                        i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Robot.Oper_Types.Count
      loop
        v_Oper_Type := i_Robot.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Robot_Oper_Types.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Oper_Type_Indicators t
                   where t.Company_Id = r_Robot.Company_Id
                     and t.Filial_Id = r_Robot.Filial_Id
                     and t.Robot_Id = r_Robot.Robot_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => r.Oper_Type_Id,
                                                i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Robot_Oper_Types t
                 where t.Company_Id = r_Robot.Company_Id
                   and t.Filial_Id = r_Robot.Filial_Id
                   and t.Robot_Id = r_Robot.Robot_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Robot_Oper_Types.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Robot_Indicators q
                 where q.Company_Id = r_Robot.Company_Id
                   and q.Filial_Id = r_Robot.Filial_Id
                   and q.Robot_Id = r_Robot.Robot_Id
                   and not exists (select 1
                          from Hrm_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Robot_Id = q.Robot_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Robot_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  
    -- fix not contractual wage indicator
    if r_Robot.Contractual_Wage = 'N' then
      v_Register_Id := Hrm_Util.Closest_Register_Id(i_Company_Id    => r_Robot.Company_Id,
                                                    i_Filial_Id     => r_Robot.Filial_Id,
                                                    i_Wage_Scale_Id => r_Robot.Wage_Scale_Id,
                                                    i_Period        => r_Robot.Opened_Date);
    
      if r_Robot.Rank_Id is not null then
        v_Value := z_Hrm_Register_Ranks.Take(i_Company_Id => r_Robot.Company_Id, --
                   i_Filial_Id => r_Robot.Filial_Id, --
                   i_Register_Id => v_Register_Id, --
                   i_Rank_Id => r_Robot.Rank_Id).Wage;
      else
        select max(q.Wage)
          into v_Value
          from Hrm_Register_Ranks q
         where q.Company_Id = r_Robot.Company_Id
           and q.Filial_Id = r_Robot.Filial_Id
           and q.Register_Id = v_Register_Id;
      end if;
    
      z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                      i_Filial_Id       => r_Robot.Filial_Id,
                                      i_Robot_Id        => r_Robot.Robot_Id,
                                      i_Indicator_Id    => Href_Util.Indicator_Id(i_Company_Id => r_Robot.Company_Id,
                                                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                      i_Indicator_Value => Nvl(v_Value, 0));
    end if;
  
    Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => r_Robot.Company_Id,
                                 i_Filial_Id            => r_Robot.Filial_Id,
                                 i_Robot_Id             => r_Robot.Robot_Id,
                                 i_Allowed_Division_Ids => i_Robot.Allowed_Division_Ids);
  
    if r_Settings.Position_Enable = 'Y' then
      Attach_Roles(i_Company_Id   => r_Robot.Company_Id,
                   i_Filial_Id    => r_Robot.Filial_Id,
                   i_Robot_Id     => r_Robot.Robot_Id,
                   i_Role_Ids     => i_Robot.Role_Ids,
                   i_Is_New_Robot => case
                                       when r_Old_Robot.Robot_Id is null then
                                        true
                                       else
                                        false
                                     end);
    end if;
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id);
  
    Hrm_Core.Staff_Refresh_Cache(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id,
                                 i_Robot_Id   => r_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    Hrm_Core.Robot_Plans_Delete(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Robot_Id   => i_Robot_Id);
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    z_Hrm_Robots.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id);
  
    Mrf_Api.Robot_Delete(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Robot_Id   => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Position_Enable = 'N' then
      return;
    end if;
  
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                              i_Job_Group_Id => i_Job_Group_Ids(i)) then
        z_Hrm_Robot_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => i_Robot_Id,
                                                        i_Job_Group_Id => i_Job_Group_Ids(i));
      end if;
    end loop;
  
    delete Hrm_Robot_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  ) is
  begin
    z_Mrf_Robots.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Person_Id  => Option_Number(i_Person_Id));
  
    z_Mrf_Robot_Persons.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  ) is
    r_Template      Hrm_Job_Templates%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Exists        boolean := true;
  begin
    if not z_Hrm_Job_Templates.Exist_Lock(i_Company_Id  => i_Template.Company_Id,
                                          i_Filial_Id   => i_Template.Filial_Id,
                                          i_Template_Id => i_Template.Template_Id,
                                          o_Row         => r_Template) then
      v_Exists               := false;
      r_Template.Company_Id  := i_Template.Company_Id;
      r_Template.Filial_Id   := i_Template.Filial_Id;
      r_Template.Template_Id := i_Template.Template_Id;
    end if;
  
    r_Template.Division_Id         := i_Template.Division_Id;
    r_Template.Job_Id              := i_Template.Job_Id;
    r_Template.Rank_Id             := i_Template.Rank_Id;
    r_Template.Schedule_Id         := i_Template.Schedule_Id;
    r_Template.Vacation_Days_Limit := i_Template.Vacation_Days_Limit;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      r_Template.Wage_Scale_Id := i_Template.Wage_Scale_Id;
    end if;
  
    if v_Exists then
      z_Hrm_Job_Templates.Update_Row(r_Template);
    else
      z_Hrm_Job_Templates.Insert_Row(r_Template);
    end if;
  
    -- oper types
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Template.Oper_Types.Count);
    
      for i in 1 .. i_Template.Indicators.Count
      loop
        v_Indicator := i_Template.Indicators(i);
      
        z_Hrm_Template_Indicators.Save_One(i_Company_Id      => r_Template.Company_Id,
                                           i_Filial_Id       => r_Template.Filial_Id,
                                           i_Template_Id     => r_Template.Template_Id,
                                           i_Indicator_Id    => v_Indicator.Indicator_Id,
                                           i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Template.Oper_Types.Count
      loop
        v_Oper_Type := i_Template.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Template_Oper_Types.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                     i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Temp_Oper_Type_Indicators t
                   where t.Company_Id = r_Template.Company_Id
                     and t.Filial_Id = r_Template.Filial_Id
                     and t.Template_Id = r_Template.Template_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => r.Oper_Type_Id,
                                                     i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Template_Oper_Types t
                 where t.Company_Id = r_Template.Company_Id
                   and t.Filial_Id = r_Template.Filial_Id
                   and t.Template_Id = r_Template.Template_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Template_Oper_Types.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Template_Indicators q
                 where q.Company_Id = r_Template.Company_Id
                   and q.Filial_Id = r_Template.Filial_Id
                   and q.Template_Id = r_Template.Template_Id
                   and not exists (select 1
                          from Hrm_Temp_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Template_Id = q.Template_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Template_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  ) is
  begin
    z_Hrm_Job_Templates.Delete_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Template_Id => i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  ) is
  begin
    if i_Schedule_Id is not null then
      z_Hrm_Division_Schedules.Save_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => i_Division_Id,
                                        i_Schedule_Id => i_Schedule_Id);
    else
      z_Hrm_Division_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Division_Id => i_Division_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  ) is
    r_Setting Hrm_Settings%rowtype;
    r_Robot   Mrf_Robots%rowtype;
    r_Manager Mrf_Division_Managers%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Robot_Id   => i_Robot_Id);
    
      z_Hrm_Division_Managers.Save_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Division_Id,
                                       i_Employee_Id => r_Robot.Person_Id);
    end if;
  
    r_Manager.Company_Id  := i_Company_Id;
    r_Manager.Filial_Id   := i_Filial_Id;
    r_Manager.Division_Id := i_Division_Id;
    r_Manager.Manager_Id  := i_Robot_Id;
  
    Mrf_Api.Division_Manager_Save(r_Manager);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      z_Hrm_Division_Managers.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    end if;
  
    Mrf_Api.Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  ) is
  begin
    for r in (select q.*
                from Mhr_Parent_Divisions q
                join Hrm_Divisions Hd
                  on Hd.Company_Id = q.Company_Id
                 and Hd.Filial_Id = q.Filial_Id
                 and Hd.Division_Id = q.Division_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Parent_Id = i_Division_Id
                 and Hd.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Auto
                 and q.Lvl = (select min(p.Lvl)
                                from Mhr_Parent_Divisions p
                                join Hrm_Divisions d
                                  on d.Company_Id = p.Company_Id
                                 and d.Filial_Id = p.Filial_Id
                                 and d.Division_Id = p.Parent_Id
                               where p.Company_Id = q.Company_Id
                                 and p.Filial_Id = q.Filial_Id
                                 and p.Division_Id = q.Division_Id
                                 and (p.Parent_Id = q.Parent_Id or
                                     d.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Manual)
                                 and p.Lvl <= q.Lvl))
    loop
      if i_New_Manager_Id is not null then
        Division_Manager_Save(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Division_Id => r.Division_Id,
                              i_Robot_Id    => i_New_Manager_Id);
      else
        Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Division_Id => r.Division_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  ) is
    r_Setting      Hrm_Settings%rowtype;
    v_Robot_Id     number;
    v_Division_Ids Array_Number := Array_Number();
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      begin
        select r.Robot_Id
          into v_Robot_Id
          from Mrf_Robots r
         where r.Company_Id = i_Company_Id
           and r.Filial_Id = i_Filial_Id
           and r.Person_Id = i_Employee_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Robot_Id := null;
      end;
    
      v_Division_Ids := Hrm_Util.Fix_Allowed_Divisions(i_Company_Id           => i_Company_Id,
                                                       i_Filial_Id            => i_Filial_Id,
                                                       i_Robot_Id             => v_Robot_Id,
                                                       i_Allowed_Division_Ids => i_Division_Ids);
    
      for r in (select *
                  from Href_Employee_Divisions Ed
                 where Ed.Company_Id = i_Company_Id
                   and Ed.Filial_Id = i_Filial_Id
                   and Ed.Employee_Id = i_Employee_Id
                   and Ed.Division_Id not member of v_Division_Ids)
      loop
        z_Href_Employee_Divisions.Delete_One(i_Company_Id  => r.Company_Id,
                                             i_Filial_Id   => r.Filial_Id,
                                             i_Employee_Id => r.Employee_Id,
                                             i_Division_Id => r.Division_Id);
      end loop;
    
      for i in 1 .. v_Division_Ids.Count
      loop
        z_Href_Employee_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                             i_Filial_Id   => i_Filial_Id,
                                             i_Employee_Id => i_Employee_Id,
                                             i_Division_Id => v_Division_Ids(i));
      end loop;
    
      if v_Robot_Id is not null then
        Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => i_Company_Id,
                                     i_Filial_Id            => i_Filial_Id,
                                     i_Robot_Id             => v_Robot_Id,
                                     i_Allowed_Division_Ids => v_Division_Ids);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt) is
    r_Division Mhr_Divisions%rowtype := i_Division.Division;
    r_Hrm_Old  Hrm_Divisions%rowtype;
    r_Settings Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => r_Division.Company_Id,
                                                             i_Filial_Id  => r_Division.Filial_Id);
  
    v_Parent_Department_Id number;
    v_Is_Department        varchar2(1) := i_Division.Is_Department;
    v_Manager_Id           number := i_Division.Manager_Id;
    v_Manager_Status       varchar2(1) := Hrm_Pref.c_Division_Manager_Status_Manual;
    v_Kind_Changed         boolean := false;
    v_Parent_Changed       boolean := false;
  begin
    if v_Is_Department = 'N' and r_Settings.Advanced_Org_Structure = 'N' then
      v_Is_Department := 'Y';
    end if;
  
    if z_Hrm_Divisions.Exist_Lock(i_Company_Id  => r_Division.Company_Id,
                                  i_Filial_Id   => r_Division.Filial_Id,
                                  i_Division_Id => r_Division.Division_Id,
                                  o_Row         => r_Hrm_Old) then
      if r_Hrm_Old.Is_Department <> v_Is_Department then
        Hrm_Core.Assert_Department_Status_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                     i_Filial_Id     => r_Division.Filial_Id,
                                                     i_Division_Id   => r_Division.Division_Id,
                                                     i_Is_Department => v_Is_Department);
      
        v_Kind_Changed := true;
      end if;
    end if;
  
    Mhr_Api.Division_Save(r_Division);
  
    v_Parent_Department_Id := Hrm_Util.Closest_Parent_Department_Id(i_Company_Id  => r_Division.Company_Id,
                                                                    i_Filial_Id   => r_Division.Filial_Id,
                                                                    i_Division_Id => r_Division.Division_Id);
  
    if r_Hrm_Old.Company_Id is not null and
       not Fazo.Equal(r_Hrm_Old.Parent_Department_Id, v_Parent_Department_Id) then
      Hrm_Core.Assert_Division_Parent_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                 i_Filial_Id     => r_Division.Filial_Id,
                                                 i_Division_Id   => r_Division.Division_Id,
                                                 i_Is_Department => v_Is_Department);
    
      v_Parent_Changed := true;
    end if;
  
    if v_Parent_Department_Id is null and v_Is_Department = 'N' then
      Hrm_Error.Raise_027(Hrm_Util.t_Division_Kind_Team);
    end if;
  
    if v_Is_Department = 'N' and v_Manager_Id is null then
      v_Manager_Status := Hrm_Pref.c_Division_Manager_Status_Auto;
    
      v_Manager_Id := z_Mrf_Division_Managers.Take(i_Company_Id => r_Division.Company_Id, --
                      i_Filial_Id => r_Division.Filial_Id, --
                      i_Division_Id => r_Division.Parent_Id).Manager_Id;
    end if;
  
    z_Hrm_Divisions.Save_One(i_Company_Id           => r_Division.Company_Id,
                             i_Filial_Id            => r_Division.Filial_Id,
                             i_Division_Id          => r_Division.Division_Id,
                             i_Parent_Department_Id => v_Parent_Department_Id,
                             i_Is_Department        => v_Is_Department,
                             i_Manager_Status       => v_Manager_Status,
                             i_Subfilial_Id         => i_Division.Subfilial_Id);
  
    if v_Manager_Id is not null then
      Division_Manager_Save(i_Company_Id  => r_Division.Company_Id,
                            i_Filial_Id   => r_Division.Filial_Id,
                            i_Division_Id => r_Division.Division_Id,
                            i_Robot_Id    => v_Manager_Id);
    else
      Division_Manager_Delete(i_Company_Id  => r_Division.Company_Id,
                              i_Filial_Id   => r_Division.Filial_Id,
                              i_Division_Id => r_Division.Division_Id);
    end if;
  
    Update_Child_Manager(i_Company_Id     => r_Division.Company_Id,
                         i_Filial_Id      => r_Division.Filial_Id,
                         i_Division_Id    => r_Division.Division_Id,
                         i_New_Manager_Id => v_Manager_Id);
  
    Division_Schedule_Save(i_Company_Id  => r_Division.Company_Id,
                           i_Filial_Id   => r_Division.Filial_Id,
                           i_Division_Id => r_Division.Division_Id,
                           i_Schedule_Id => i_Division.Schedule_Id);
  
    if v_Kind_Changed or v_Parent_Changed then
      Hrm_Core.Update_Parent_Departments(i_Company_Id    => r_Division.Company_Id,
                                         i_Filial_Id     => r_Division.Filial_Id,
                                         i_Division_Id   => r_Division.Division_Id,
                                         i_Old_Parent_Id => case
                                                              when r_Hrm_Old.Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               r_Hrm_Old.Parent_Department_Id
                                                            end,
                                         i_New_Parent_Id => case
                                                              when v_Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               v_Parent_Department_Id
                                                            end);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt) is
  begin
    delete from Hrm_Job_Bonus_Types q
     where q.Company_Id = i_Job_Bonus_Type.Company_Id
       and q.Filial_Id = i_Job_Bonus_Type.Filial_Id
       and q.Job_Id = i_Job_Bonus_Type.Job_Id
       and q.Bonus_Type not member of i_Job_Bonus_Type.Bonus_Types;
  
    for i in 1 .. i_Job_Bonus_Type.Bonus_Types.Count
    loop
      z_Hrm_Job_Bonus_Types.Save_One(i_Company_Id => i_Job_Bonus_Type.Company_Id,
                                     i_Filial_Id  => i_Job_Bonus_Type.Filial_Id,
                                     i_Job_Id     => i_Job_Bonus_Type.Job_Id,
                                     i_Bonus_Type => i_Job_Bonus_Type.Bonus_Types(i),
                                     i_Percentage => i_Job_Bonus_Type.Percentages(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      z_Hrm_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Ids(i));
    end loop;
  
    delete from Hrm_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Hrm_Error.Raise_019(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries,
                           i_Value      => i_Value);
  end;

end Hrm_Api;
/

create or replace package Hrm_Pref is
  ----------------------------------------------------------------------------------------------------  
  type Register_Ranks_Rt is record(
    Rank_Id     number,
    Wage        number(20, 6),
    Coefficient number);
  type Register_Ranks_Nt is table of Register_Ranks_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Wage_Scale_Register_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Register_Id     number,
    Register_Date   date,
    Register_Number varchar2(50),
    Wage_Scale_Id   number,
    With_Base_Wage  varchar2(1),
    Round_Model     varchar2(5),
    Base_Wage       number(20, 6),
    Valid_From      date,
    Posted          varchar2(1),
    Note            varchar2(300 char),
    Ranks           Register_Ranks_Nt);
  ----------------------------------------------------------------------------------------------------
  type Robot_Rt is record(
    Robot                Mrf_Robots%rowtype,
    Org_Unit_Id          number,
    Opened_Date          date,
    Closed_Date          date,
    Schedule_Id          number(20),
    Rank_Id              number(20),
    Labor_Function_Id    number(20),
    Description          varchar2(300 char),
    Hiring_Condition     varchar2(300 char),
    Vacation_Days_Limit  number(20),
    Contractual_Wage     varchar2(1),
    Wage_Scale_Id        number(20),
    Access_Hidden_Salary varchar2(1),
    Planned_Fte          number,
    Role_Ids             Array_Number,
    Allowed_Division_Ids Array_Number,
    Indicators           Href_Pref.Indicator_Nt,
    Oper_Types           Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------  
  type Job_Template_Rt is record(
    Company_Id          number,
    Filial_Id           number,
    Template_Id         number,
    Division_Id         number,
    Job_Id              number,
    Rank_Id             number,
    Schedule_Id         number,
    Vacation_Days_Limit number,
    Wage_Scale_Id       number,
    Indicators          Href_Pref.Indicator_Nt,
    Oper_Types          Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------
  type Job_Bonus_Type_Rt is record(
    Company_Id  number,
    Filial_Id   number,
    Job_Id      number,
    Bonus_Types Array_Varchar2,
    Percentages Array_Number);
  ---------------------------------------------------------------------------------------------------- 
  type Division_Rt is record(
    Division      Mhr_Divisions%rowtype,
    Schedule_Id   number,
    Manager_Id    number,
    Is_Department varchar2(1),
    Subfilial_Id  number);
  ----------------------------------------------------------------------------------------------------
  -- employment type
  ----------------------------------------------------------------------------------------------------
  c_Employment_Type_Main_Job          constant varchar2(1) := 'M';
  c_Employment_Type_External_Parttime constant varchar2(1) := 'E';
  c_Employment_Type_Internal_Parttime constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- fte kind
  ----------------------------------------------------------------------------------------------------
  c_Fte_Kind_Planed   constant varchar2(1) := 'P';
  c_Fte_Kind_Booked   constant varchar2(1) := 'B';
  c_Fte_Kind_Occupied constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------  
  -- access type
  ----------------------------------------------------------------------------------------------------
  c_Access_Type_Structural constant varchar2(1) := 'S';
  c_Access_Type_Manual     constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------  
  -- bonus type
  ----------------------------------------------------------------------------------------------------
  c_Bonus_Type_Personal_Sales      constant varchar2(1) := 'P';
  c_Bonus_Type_Department_Sales    constant varchar2(1) := 'D';
  c_Bonus_Type_Successful_Delivery constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- restrict to view all salaries
  ----------------------------------------------------------------------------------------------------
  c_Pref_Restrict_To_View_All_Salaries constant varchar2(200) := 'VHR:HRM:RESTRICT_TO_VIEW_ALL_SALARIES';
  ----------------------------------------------------------------------------------------------------
  --- meneger status of division 
  ----------------------------------------------------------------------------------------------------
  c_Division_Manager_Status_Manual constant varchar2(1) := 'M';
  c_Division_Manager_Status_Auto   constant varchar2(1) := 'A';
end Hrm_Pref;
/
create or replace package body Hrm_Pref is
end Hrm_Pref;
/

create or replace package Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ---------------------------------------------------------------------------------------------------- 
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2 := null,
    i_Round_Model     varchar2 := null,
    i_Base_Wage       number := null,
    i_Valid_From      date,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register    in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id     number,
    i_Wage        number := null,
    i_Coefficient number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                out Hrm_Pref.Robot_Rt,
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Name                 varchar2,
    i_Code                 varchar2,
    i_Robot_Group_Id       number,
    i_Division_Id          number,
    i_Job_Id               number,
    i_Org_Unit_Id          number,
    i_State                varchar2,
    i_Opened_Date          date,
    i_Closed_Date          date,
    i_Schedule_Id          number,
    i_Rank_Id              number,
    i_Vacation_Days_Limit  number,
    i_Labor_Function_Id    number,
    i_Description          varchar2,
    i_Hiring_Condition     varchar2,
    i_Contractual_Wage     varchar2,
    i_Wage_Scale_Id        number,
    i_Access_Hidden_Salary varchar2,
    i_Planned_Fte          number := 1,
    i_Role_Ids             Array_Number := Array_Number(),
    i_Allowed_Division_Ids Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2;
  Function Bonus_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2;
  Function t_Division_Kind_Team return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2;
end Hrm_Util;
/
create or replace package body Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache is
    result Hrm_Settings%rowtype;
  begin
    if not z_Hrm_Settings.Exist(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                o_Row        => result) then
      Result.Company_Id             := i_Company_Id;
      Result.Filial_Id              := i_Filial_Id;
      Result.Position_Enable        := 'N';
      Result.Position_Check         := 'N';
      Result.Position_Booking       := 'N';
      Result.Position_History       := 'N';
      Result.Position_Fixing        := 'N';
      Result.Parttime_Enable        := 'N';
      Result.Rank_Enable            := 'N';
      Result.Wage_Scale_Enable      := 'N';
      Result.Notification_Enable    := 'N';
      Result.Autogen_Staff_Number   := 'Y';
      Result.Advanced_Org_Structure := 'N';
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype is
    r_Template Hrm_Job_Templates%rowtype;
  begin
    if i_Rank_Id is not null then
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id = i_Rank_Id;
    else
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id is null;
    end if;
  
    return r_Template;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'N' then
      b.Raise_Error(t('initially, to do enabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'Y' then
      b.Raise_Error(t('initially, to do disabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2 is
    v_Name varchar2(200 char);
    result varchar2(200 char);
  begin
    v_Name := z_Mhr_Divisions.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Division_Id => i_Division_Id).Name;
  
    result := '/' || v_Name || '/(' || i_Robot_Id || ')';
  
    if i_Rank_Id is not null then
      v_Name := z_Mhr_Ranks.Load(i_Company_Id => i_Company_Id, --
                i_Filial_Id => i_Filial_Id, --
                i_Rank_Id => i_Rank_Id).Name;
    
      result := ', ' || v_Name || result;
    end if;
  
    v_Name := z_Mhr_Jobs.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Job_Id => i_Job_Id).Name;
  
    return v_Name || result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2,
    i_Round_Model     varchar2,
    i_Base_Wage       number,
    i_Valid_From      date,
    i_Note            varchar2
  ) is
  begin
    o_Register.Company_Id      := i_Company_Id;
    o_Register.Filial_Id       := i_Filial_Id;
    o_Register.Register_Id     := i_Register_Id;
    o_Register.Register_Date   := i_Register_Date;
    o_Register.Register_Number := i_Register_Number;
    o_Register.Wage_Scale_Id   := i_Wage_Scale_Id;
    o_Register.With_Base_Wage  := i_With_Base_Wage;
    o_Register.Round_Model     := i_Round_Model;
    o_Register.Base_Wage       := i_Base_Wage;
    o_Register.Valid_From      := i_Valid_From;
    o_Register.Note            := i_Note;
  
    o_Register.Ranks := Hrm_Pref.Register_Ranks_Nt();
  end;
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register    in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id     number,
    i_Wage        number,
    i_Coefficient number
  ) is
    v_Rank Hrm_Pref.Register_Ranks_Rt;
  begin
    v_Rank.Rank_Id     := i_Rank_Id;
    v_Rank.Wage        := i_Wage;
    v_Rank.Coefficient := i_Coefficient;
  
    p_Register.Ranks.Extend();
    p_Register.Ranks(p_Register.Ranks.Count) := v_Rank;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                out Hrm_Pref.Robot_Rt,
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Name                 varchar2,
    i_Code                 varchar2,
    i_Robot_Group_Id       number,
    i_Division_Id          number,
    i_Job_Id               number,
    i_Org_Unit_Id          number,
    i_State                varchar2,
    i_Opened_Date          date,
    i_Closed_Date          date,
    i_Schedule_Id          number,
    i_Rank_Id              number,
    i_Vacation_Days_Limit  number,
    i_Labor_Function_Id    number,
    i_Description          varchar2,
    i_Hiring_Condition     varchar2,
    i_Contractual_Wage     varchar2,
    i_Wage_Scale_Id        number,
    i_Access_Hidden_Salary varchar2,
    i_Planned_Fte          number := 1,
    i_Role_Ids             Array_Number,
    i_Allowed_Division_Ids Array_Number
  ) is
  begin
    z_Mrf_Robots.Init(p_Row            => o_Robot.Robot,
                      i_Company_Id     => i_Company_Id,
                      i_Filial_Id      => i_Filial_Id,
                      i_Robot_Id       => i_Robot_Id,
                      i_Name           => i_Name,
                      i_Code           => i_Code,
                      i_Robot_Group_Id => i_Robot_Group_Id,
                      i_Division_Id    => i_Division_Id,
                      i_Job_Id         => i_Job_Id,
                      i_State          => i_State);
  
    o_Robot.Org_Unit_Id          := i_Org_Unit_Id;
    o_Robot.Opened_Date          := i_Opened_Date;
    o_Robot.Closed_Date          := i_Closed_Date;
    o_Robot.Schedule_Id          := i_Schedule_Id;
    o_Robot.Rank_Id              := i_Rank_Id;
    o_Robot.Vacation_Days_Limit  := i_Vacation_Days_Limit;
    o_Robot.Labor_Function_Id    := i_Labor_Function_Id;
    o_Robot.Description          := i_Description;
    o_Robot.Hiring_Condition     := i_Hiring_Condition;
    o_Robot.Contractual_Wage     := i_Contractual_Wage;
    o_Robot.Wage_Scale_Id        := i_Wage_Scale_Id;
    o_Robot.Access_Hidden_Salary := i_Access_Hidden_Salary;
    o_Robot.Planned_Fte          := i_Planned_Fte;
    o_Robot.Allowed_Division_Ids := i_Allowed_Division_Ids;
    o_Robot.Role_Ids             := i_Role_Ids;
  
    o_Robot.Indicators := Href_Pref.Indicator_Nt();
    o_Robot.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Robot.Oper_Types.Extend;
    p_Robot.Oper_Types(p_Robot.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Robot.Indicators.Extend;
    p_Robot.Indicators(p_Robot.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  ) is
  begin
    o_Template.Company_Id          := i_Company_Id;
    o_Template.Filial_Id           := i_Filial_Id;
    o_Template.Template_Id         := i_Template_Id;
    o_Template.Division_Id         := i_Division_Id;
    o_Template.Job_Id              := i_Job_Id;
    o_Template.Rank_Id             := i_Rank_Id;
    o_Template.Schedule_Id         := i_Schedule_Id;
    o_Template.Vacation_Days_Limit := i_Vacation_Days_Limit;
    o_Template.Wage_Scale_Id       := i_Wage_Scale_Id;
  
    o_Template.Indicators := Href_Pref.Indicator_Nt();
    o_Template.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Template.Oper_Types.Extend;
    p_Template.Oper_Types(p_Template.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Template.Indicators.Extend;
    p_Template.Indicators(p_Template.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  ) is
  begin
    o_Job_Bonus_Type.Company_Id  := i_Company_Id;
    o_Job_Bonus_Type.Filial_Id   := i_Filial_Id;
    o_Job_Bonus_Type.Job_Id      := i_Job_Id;
    o_Job_Bonus_Type.Bonus_Types := i_Bonus_Types;
    o_Job_Bonus_Type.Percentages := i_Percentages;
  end;

  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  ) is
  begin
    o_Division.Division      := i_Division;
    o_Division.Schedule_Id   := i_Schedule_Id;
    o_Division.Manager_Id    := i_Manager_Id;
    o_Division.Is_Department := i_Is_Department;
    o_Division.Subfilial_Id  := i_Subfilial_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date is
    result Array_Date;
  begin
    select q.Valid_From
      bulk collect
      into result
      from Hrm_Wage_Scale_Registers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Wage_Scale_Id = i_Wage_Scale_Id
       and q.Valid_From between i_Begin_Date and i_End_Date
       and q.Posted = 'Y';
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number is
    result number;
  begin
    select Pd.Parent_Id
      into result
      from Mhr_Parent_Divisions Pd
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Division_Id = i_Division_Id
       and Pd.Lvl = (select min(q.Lvl)
                       from Mhr_Parent_Divisions q
                       join Hrm_Divisions p
                         on p.Company_Id = q.Company_Id
                        and p.Filial_Id = q.Filial_Id
                        and p.Division_Id = q.Parent_Id
                      where q.Company_Id = i_Company_Id
                        and q.Filial_Id = i_Filial_Id
                        and q.Division_Id = i_Division_Id
                        and p.Is_Department = 'Y');
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number is
    result number;
  begin
    select (select r.Wage
              from Hrm_Register_Ranks r
             where r.Company_Id = t.Company_Id
               and r.Filial_Id = t.Filial_Id
               and r.Register_Id = t.Register_Id
               and r.Rank_Id = i_Rank_Id)
      into result
      from Hrm_Wage_Scale_Registers t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number is
    v_Current_Date      date := Trunc(sysdate);
    v_Wage_Indicator_Id number;
  
    ----------------------------------------------------------------------------------------------------
    Function Get_Max_Wage_Scale return number is
      result number;
    begin
      select (select max(r.Wage)
                from Hrm_Register_Ranks r
               where r.Company_Id = t.Company_Id
                 and r.Filial_Id = t.Filial_Id
                 and r.Register_Id = t.Register_Id)
        into result
        from Hrm_Wage_Scale_Registers t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Wage_Scale_Id = i_Wage_Scale_Id
         and t.Valid_From <= v_Current_Date
         and t.Posted = 'Y'
       order by t.Valid_From desc
       fetch first row only;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Contractual_Wage = 'N' then
      if i_Rank_Id is null then
        return Get_Max_Wage_Scale;
      end if;
    
      return Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                   i_Filial_Id     => i_Filial_Id,
                                   i_Wage_Scale_Id => i_Wage_Scale_Id,
                                   i_Period        => v_Current_Date,
                                   i_Rank_Id       => i_Rank_Id);
    end if;
  
    v_Wage_Indicator_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage);
  
    return z_Hrm_Robot_Indicators.Take(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Robot_Id     => i_Robot_Id,
                                       i_Indicator_Id => v_Wage_Indicator_Id).Indicator_Value;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number is
    result number;
  begin
    select t.Register_Id
      into result
      from Hrm_Wage_Scale_Registers t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number is
    v_Is_Child                boolean;
    v_Structural_Division_Ids Array_Number;
    v_Allowed_Division_Ids    Array_Number := Nvl(i_Allowed_Division_Ids, Array_Number());
    result                    Array_Number := Array_Number();
  begin
    if i_Robot_Id is not null then
      select d.Division_Id
        bulk collect
        into v_Structural_Division_Ids
        from Hrm_Robot_Divisions d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Robot_Id = i_Robot_Id
         and d.Access_Type = Hrm_Pref.c_Access_Type_Structural;
    
      v_Allowed_Division_Ids := v_Allowed_Division_Ids multiset Except v_Structural_Division_Ids;
    end if;
  
    for i in 1 .. v_Allowed_Division_Ids.Count
    loop
      v_Is_Child := false;
    
      for j in 1 .. v_Allowed_Division_Ids.Count
      loop
        if z_Mhr_Parent_Divisions.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => v_Allowed_Division_Ids(i),
                                        i_Parent_Id   => v_Allowed_Division_Ids(j)) then
          v_Is_Child := true;
          exit;
        end if;
      end loop;
    
      if not v_Is_Child then
        Fazo.Push(result, v_Allowed_Division_Ids(i));
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_User_Setting varchar2(1);
  begin
    v_User_Setting := Href_Util.Access_Hidden_Salary(i_Company_Id => i_Company_Id,
                                                     i_User_Id    => i_User_Id);
    if v_User_Setting = 'Y' then
      return 'Y';
    else
      if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                              i_Job_Group_Id => i_Job_Group_Id) then
        if z_Href_Person_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Person_Id    => i_User_Id,
                                                        i_Job_Group_Id => i_Job_Group_Id) then
          return 'Y';
        else
          return 'N';
        end if;
      else
        return 'Y';
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_Robot_Setting  varchar2(1);
    v_User_Robot_Ids Array_Number;
  begin
    select q.Robot_Id
      bulk collect
      into v_User_Robot_Ids
      from Mrf_Robot_Persons q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_User_Id;
  
    for i in 1 .. v_User_Robot_Ids.Count
    loop
      v_Robot_Setting := Nvl(z_Hrm_Robots.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Robot_Id => v_User_Robot_Ids(i)).Access_Hidden_Salary,
                             'N');
    
      if v_Robot_Setting = 'Y' then
        return 'Y';
      else
        if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Id) then
          if z_Hrm_Robot_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => v_User_Robot_Ids(i),
                                                        i_Job_Group_Id => i_Job_Group_Id) then
            return 'Y';
          else
            continue;
          end if;
        else
          return 'Y';
        end if;
      end if;
    end loop;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2 is
    v_System_Setting varchar2(1);
    v_Job_Group_Id   number;
    r_Setting        Hrm_Settings%rowtype;
  begin
    v_System_Setting := Hrm_Util.Restrict_To_View_All_Salaries(i_Company_Id);
    v_Job_Group_Id   := z_Mhr_Jobs.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Job_Id => i_Job_Id).Job_Group_Id;
  
    if i_User_Id = Md_Pref.User_Admin(i_Company_Id) --
       or v_System_Setting = 'N' --
       or v_Job_Group_Id is null --
       or not z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                   i_Job_Group_Id => v_Job_Group_Id) then
      return 'Y';
    end if;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      return User_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                          i_User_Id      => i_User_Id,
                                          i_Job_Group_Id => v_Job_Group_Id);
    else
      return Robot_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_User_Id      => i_User_Id,
                                           i_Job_Group_Id => v_Job_Group_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean is
  begin
    return Access_To_Hidden_Salary_Job(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Job_Id     => i_Job_Id,
                                       i_User_Id    => i_User_Id) = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'N'
      into v_Dummy
      from Hpd_Page_Robots q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and Rownum = 1;
  
    return v_Dummy;
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number is
    v_Planned_Fte number;
  begin
    select q.Fte
      into v_Planned_Fte
      from Hrm_Robot_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
       and q.Fte > 0
       and q.Trans_Date = (select max(t.Trans_Date)
                             from Hrm_Robot_Transactions t
                            where t.Company_Id = q.Company_Id
                              and t.Filial_Id = q.Filial_Id
                              and t.Robot_Id = q.Robot_Id
                              and t.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
                              and t.Fte > 0
                              and t.Trans_Date <= i_Period)
       and Rownum = 1;
  
    return v_Planned_Fte;
  exception
    when No_Data_Found then
      return 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  -- bonus types
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type_Personal_Sales return varchar2 is
  begin
    return t('bonus_type: personal sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Department_Sales return varchar2 is
  begin
    return t('bonus_type: department sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Successful_Delivery return varchar2 is
  begin
    return t('bonus_type: successful delivery');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2 is
  begin
    return --
    case i_Bonus_Type --
    when Hrm_Pref.c_Bonus_Type_Personal_Sales then t_Bonus_Type_Personal_Sales --
    when Hrm_Pref.c_Bonus_Type_Department_Sales then t_Bonus_Type_Department_Sales --
    when Hrm_Pref.c_Bonus_Type_Successful_Delivery then t_Bonus_Type_Successful_Delivery --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Bonus_Types return Matrix_Varchar2 is
  begin
    -- todo: Owner: Sherzod; text: umcommit them
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Bonus_Type_Personal_Sales,
                                          Hrm_Pref.c_Bonus_Type_Department_Sales
                                          /*, Hrm_Pref.c_Bonus_Type_Successful_Delivery*/),
                           Array_Varchar2(t_Bonus_Type_Personal_Sales,
                                          t_Bonus_Type_Department_Sales
                                          /*, t_Bonus_Type_Successful_Delivery*/));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2 is
  begin
    return t('division_kind:department');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Team return varchar2 is
  begin
    return t('division_kind:team');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2 is
  begin
    return case i_Is_Division --
    when 'Y' then t_Division_Kind_Department --
    when 'N' then t_Division_Kind_Team --
    end;
  end;

end Hrm_Util;
/

create or replace package Hsc_Core is
  ----------------------------------------------------------------------------------------------------
  Function Predict_Runtime_Service
  (
    i_Responce_Procedure varchar2,
    i_Data               Gmap := Gmap(),
    i_Host_Url           varchar2 := Hsc_Pref.c_Predict_Server_Url,
    i_Api_Uri            varchar2 := Hsc_Pref.c_Predict_Api_Uri,
    i_Api_Method         varchar2 := Hsc_Pref.c_Default_Http_Method,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Function Ftp_File_Load_Service
  (
    i_Responce_Procedure varchar2,
    i_Server_Url         varchar2,
    i_Username           varchar2,
    i_Password           varchar2,
    i_Action             varchar2 := Hsc_Pref.c_Ftp_Action_Load_Files,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Priority
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Area_Id    number,
    i_Driver_Id  number,
    i_Fact_Date  date,
    i_Fact_Type  varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Priority
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Fact_Date    date,
    i_Fact_Type    varchar2,
    i_Is_Increment boolean := true
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Dirty_Areas;
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Area
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Area_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Driver_Fact_Save(i_Fact Hsc_Driver_Facts%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Average_Mean_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Trend_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Local_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  );
end Hsc_Core;
/
create or replace package body Hsc_Core is
  ----------------------------------------------------------------------------------------------------
  c_Predict_Service_Name       constant varchar2(100) := 'com.verifix.vhr.predicts.PredictRuntimeService';
  c_Ftp_File_Load_Service_Name constant varchar2(100) := 'com.verifix.vhr.predicts.FtpFileLoadService';

  ----------------------------------------------------------------------------------------------------
  Function Predict_Runtime_Service
  (
    i_Responce_Procedure varchar2,
    i_Data               Gmap := Gmap(),
    i_Host_Url           varchar2 := Hsc_Pref.c_Predict_Server_Url,
    i_Api_Uri            varchar2 := Hsc_Pref.c_Predict_Api_Uri,
    i_Api_Method         varchar2 := Hsc_Pref.c_Default_Http_Method,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  begin
    v_Details.Put('host_url', Nvl(i_Host_Url, Hsc_Pref.c_Predict_Server_Url));
    v_Details.Put('method', i_Api_Method);
    v_Details.Put('api_uri', i_Api_Uri);
  
    v_Service := Runtime_Service(c_Predict_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Ftp_File_Load_Service
  (
    i_Responce_Procedure varchar2,
    i_Server_Url         varchar2,
    i_Username           varchar2,
    i_Password           varchar2,
    i_Action             varchar2 := Hsc_Pref.c_Ftp_Action_Load_Files,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  begin
    v_Details.Put('server_url', i_Server_Url);
    v_Details.Put('username', i_Username);
    v_Details.Put('password', i_Password);
    v_Details.Put('action', i_Action);
  
    v_Service := Runtime_Service(c_Ftp_File_Load_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Priority
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Area_Id    number,
    i_Driver_Id  number,
    i_Fact_Date  date,
    i_Fact_Type  varchar2
  ) return number is
    v_Fact_Types Array_Varchar2;
  
    result number;
  begin
    if i_Fact_Type = Hsc_Pref.c_Fact_Type_Actual then
      return 0;
    end if;
  
    v_Fact_Types := case i_Fact_Type
                      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                       Array_Varchar2()
                      when Hsc_Pref.c_Fact_Type_Montly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Weekly_Predict)
                      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Weekly_Predict,
                                      Hsc_Pref.c_Fact_Type_Montly_Predict)
                      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Weekly_Predict,
                                      Hsc_Pref.c_Fact_Type_Montly_Predict,
                                      Hsc_Pref.c_Fact_Type_Quarterly_Predict)
                    end;
  
    select count(1) + 1
      into result
      from Hsc_Driver_Facts Df
     where Df.Company_Id = i_Company_Id
       and Df.Filial_Id = i_Filial_Id
       and Df.Object_Id = i_Object_Id
       and Df.Area_Id = i_Area_Id
       and Df.Driver_Id = i_Driver_Id
       and Df.Fact_Date = i_Fact_Date
       and Df.Fact_Type member of v_Fact_Types;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Priority
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Fact_Date    date,
    i_Fact_Type    varchar2,
    i_Is_Increment boolean := true
  ) is
    v_Fact_Types Array_Varchar2;
  
    v_Increment_Value number := 1;
  begin
    if i_Fact_Type = Hsc_Pref.c_Fact_Type_Actual then
      return;
    end if;
  
    v_Fact_Types := case i_Fact_Type
                      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Montly_Predict,
                                      Hsc_Pref.c_Fact_Type_Quarterly_Predict,
                                      Hsc_Pref.c_Fact_Type_Yearly_Predict)
                      when Hsc_Pref.c_Fact_Type_Montly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Quarterly_Predict,
                                      Hsc_Pref.c_Fact_Type_Yearly_Predict)
                      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                       Array_Varchar2(Hsc_Pref.c_Fact_Type_Yearly_Predict)
                      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
                       Array_Varchar2()
                    end;
  
    if not i_Is_Increment then
      v_Increment_Value := -1;
    end if;
  
    update Hsc_Driver_Facts Df
       set Df.Priority = Greatest(Df.Priority + v_Increment_Value, 1)
     where Df.Company_Id = i_Company_Id
       and Df.Filial_Id = i_Filial_Id
       and Df.Object_Id = i_Object_Id
       and Df.Area_Id = i_Area_Id
       and Df.Driver_Id = i_Driver_Id
       and Df.Fact_Date = i_Fact_Date
       and Df.Fact_Type member of v_Fact_Types;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Dirty_Areas is
  begin
    for r in (select q.*,
                     Nvl((select 'Y'
                           from Hsc_Area_Division_Groups w
                          where w.Company_Id = q.Company_Id
                            and w.Filial_Id = q.Filial_Id
                            and w.Area_Id = q.Area_Id
                            and Rownum = 1),
                         'N') c_Division_Groups_Exist,
                     Nvl((select 'Y'
                           from Hsc_Area_Drivers w
                          where w.Company_Id = q.Company_Id
                            and w.Filial_Id = q.Filial_Id
                            and w.Area_Id = q.Area_Id
                            and Rownum = 1),
                         'N') c_Drivers_Exist
                from Hsc_Dirty_Areas q)
    loop
      z_Hsc_Areas.Update_One(i_Company_Id              => r.Company_Id,
                             i_Filial_Id               => r.Filial_Id,
                             i_Area_Id                 => r.Area_Id,
                             i_c_Division_Groups_Exist => Option_Varchar2(r.c_Division_Groups_Exist),
                             i_c_Drivers_Exist         => Option_Varchar2(r.c_Drivers_Exist));
    end loop;
  
    delete Hsc_Dirty_Areas;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Area
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Area_Id    number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hsc_Dirty_Areas q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Area_Id = i_Area_Id;
  exception
    when No_Data_Found then
      insert into Hsc_Dirty_Areas
        (Company_Id, Filial_Id, Area_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Area_Id);
    
      b.Add_Post_Callback('begin hsc_core.fix_dirty_areas; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Driver_Fact_Save(i_Fact Hsc_Driver_Facts%rowtype) is
    v_Fact Hsc_Driver_Facts%rowtype := i_Fact;
    v_Old  Hsc_Driver_Facts%rowtype;
  begin
    if z_Hsc_Driver_Facts.Exist_Lock(i_Company_Id => i_Fact.Company_Id,
                                     i_Filial_Id  => i_Fact.Filial_Id,
                                     i_Fact_Id    => i_Fact.Fact_Id,
                                     o_Row        => v_Old) then
      v_Fact.Fact_Type := v_Old.Fact_Type;
      v_Fact.Priority  := v_Old.Priority;
    else
      v_Fact.Priority := Hsc_Core.Calc_Priority(i_Company_Id => i_Fact.Company_Id,
                                                i_Filial_Id  => i_Fact.Filial_Id,
                                                i_Object_Id  => i_Fact.Object_Id,
                                                i_Area_Id    => i_Fact.Area_Id,
                                                i_Driver_Id  => i_Fact.Driver_Id,
                                                i_Fact_Date  => i_Fact.Fact_Date,
                                                i_Fact_Type  => i_Fact.Fact_Type);
    
      Hsc_Core.Update_Priority(i_Company_Id => i_Fact.Company_Id,
                               i_Filial_Id  => i_Fact.Filial_Id,
                               i_Object_Id  => i_Fact.Object_Id,
                               i_Area_Id    => i_Fact.Area_Id,
                               i_Driver_Id  => i_Fact.Driver_Id,
                               i_Fact_Date  => i_Fact.Fact_Date,
                               i_Fact_Type  => i_Fact.Fact_Type);
    end if;
  
    z_Hsc_Driver_Facts.Save_Row(v_Fact);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Average_Mean_Predict_By_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Prev_Begin date;
    v_Prev_End   date;
  
    v_Prev_Sum number;
    v_Avg_Sum  number;
  
    v_Period_Trunc varchar2(4);
  
    v_Trend number;
  
    v_Fact_Date date;
  
    r_Fact Hsc_Driver_Facts%rowtype;
  begin
    case i_Predict_Type
      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
        v_Prev_End   := Trunc(i_Begin_Date, 'iw') - 1;
        v_Prev_Begin := Trunc(v_Prev_End, 'iw');
      
        v_Period_Trunc := 'dd';
      when Hsc_Pref.c_Fact_Type_Montly_Predict then
        v_Prev_End   := Trunc(i_Begin_Date, 'mon') - 1;
        v_Prev_Begin := Trunc(v_Prev_End, 'mon');
      
        v_Period_Trunc := 'mon';
      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
        v_Prev_End   := Trunc(i_Begin_Date, 'q') - 1;
        v_Prev_Begin := Trunc(v_Prev_End, 'q');
      
        v_Period_Trunc := 'q';
      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
        v_Prev_End   := Trunc(i_Begin_Date, 'yyyy') - 1;
        v_Prev_Begin := Trunc(v_Prev_End, 'yyyy');
      
        v_Period_Trunc := 'yyyy';
      else
        b.Raise_Not_Implemented;
    end case;
  
    select sum(q.Fact_Value)
      into v_Prev_Sum
      from Hsc_Driver_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Object_Id = i_Object_Id
       and q.Area_Id = i_Area_Id
       and q.Driver_Id = i_Driver_Id
       and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
       and q.Fact_Date between v_Prev_Begin and v_Prev_End;
  
    select avg(Qr.Period_Sum)
      into v_Avg_Sum
      from (select sum(q.Fact_Value) Period_Sum
              from Hsc_Driver_Facts q
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Object_Id = i_Object_Id
               and q.Area_Id = i_Area_Id
               and q.Driver_Id = i_Driver_Id
               and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
             group by Trunc(q.Fact_Date, v_Period_Trunc)) Qr;
  
    v_Trend := v_Prev_Sum / v_Avg_Sum;
  
    for r in (select avg(q.Fact_Value) Fact_Value, to_char(q.Fact_Date, 'mmdd') Fact_Date_Str
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and to_number(to_char(q.Fact_Date, 'mmdd')) between
                     to_number(to_char(i_Begin_Date, 'mmdd')) and
                     to_number(to_char(i_End_Date, 'mmdd'))
                 and q.Fact_Date < i_Begin_Date
               group by to_char(q.Fact_Date, 'mmdd'))
    loop
      continue when r.Fact_Date_Str = '0229' and mod(Extract(year from i_Begin_Date), 4) <> 0;
      continue when r.Fact_Value is null;
    
      v_Trend := Nvl(v_Trend, 1);
    
      if Extract(year from i_Begin_Date) = Extract(year from i_End_Date) then
        v_Fact_Date := to_date(Extract(year from i_Begin_Date) || r.Fact_Date_Str, 'yyyymmdd');
      else
        -- if month is DECEMBER then take begin_date year
        -- else take end_date year
        if to_number(r.Fact_Date_Str) > 1200 then
          v_Fact_Date := to_date(Extract(year from i_Begin_Date) || r.Fact_Date_Str, 'yyyymmdd');
        else
          v_Fact_Date := to_date(Extract(year from i_End_Date) || r.Fact_Date_Str, 'yyyymmdd');
        end if;
      end if;
    
      z_Hsc_Driver_Facts.Init(p_Row        => r_Fact,
                              i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Fact_Id    => Hsc_Util.Next_Fact_Id(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Object_Id  => i_Object_Id,
                                                                    i_Area_Id    => i_Area_Id,
                                                                    i_Driver_Id  => i_Driver_Id,
                                                                    i_Fact_Type  => i_Predict_Type,
                                                                    i_Fact_Date  => v_Fact_Date),
                              i_Object_Id  => i_Object_Id,
                              i_Area_Id    => i_Area_Id,
                              i_Driver_Id  => i_Driver_Id,
                              i_Fact_Type  => i_Predict_Type,
                              i_Fact_Date  => v_Fact_Date,
                              i_Fact_Value => r.Fact_Value * v_Trend);
    
      Driver_Fact_Save(r_Fact);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Average_Mean_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Start_Date date := i_Begin_Date;
    v_End_Date   date;
  begin
    case i_Predict_Type
      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'iw');
      when Hsc_Pref.c_Fact_Type_Montly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'mon');
      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'q');
      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'yyyy');
      else
        b.Raise_Not_Implemented;
    end case;
  
    while v_Start_Date <= i_End_Date
    loop
      case i_Predict_Type
        when Hsc_Pref.c_Fact_Type_Weekly_Predict then
          v_End_Date := v_Start_Date + 6;
        when Hsc_Pref.c_Fact_Type_Montly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
          v_End_Date := Htt_Util.Quarter_Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Yearly_Predict then
          v_End_Date := Htt_Util.Year_Last_Day(v_Start_Date);
        else
          b.Raise_Not_Implemented;
      end case;
    
      Calc_Average_Mean_Predict_By_Period(i_Company_Id   => i_Company_Id,
                                          i_Filial_Id    => i_Filial_Id,
                                          i_Object_Id    => i_Object_Id,
                                          i_Area_Id      => i_Area_Id,
                                          i_Driver_Id    => i_Driver_Id,
                                          i_Begin_Date   => v_Start_Date,
                                          i_End_Date     => v_End_Date,
                                          i_Predict_Type => i_Predict_Type);
    
      v_Start_Date := v_End_Date + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Trend_Predict_By_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Double_Year_Prev_Begin date;
    v_Double_Year_Prev_End   date;
    v_Year_Prev_Begin        date;
    v_Year_Prev_End          date;
  
    v_Double_Prev_Begin date;
    v_Double_Prev_End   date;
    v_Prev_Begin        date;
    v_Prev_End          date;
  
    v_Prev_Sum        number;
    v_Double_Prev_Sum number;
  
    v_Recent_Trend number;
    v_Year_Trend   number;
  
    v_Fact_Date  date;
    v_Fact_Value number;
  
    r_Fact Hsc_Driver_Facts%rowtype;
  begin
    if i_Predict_Type <> Hsc_Pref.c_Fact_Type_Weekly_Predict and
       Trunc(i_Begin_Date, 'mon') <> Trunc(i_End_Date, 'mon') then
      b.Raise_Fatal('function: Calc_Trend_Predict_By_Period is only allowed for the same month');
    end if;
  
    v_Year_Prev_Begin        := Add_Months(i_Begin_Date, -12);
    v_Year_Prev_End          := Add_Months(i_End_Date, -12);
    v_Double_Year_Prev_Begin := Add_Months(v_Year_Prev_Begin, -12);
    v_Double_Year_Prev_End   := Add_Months(v_Year_Prev_End, -12);
  
    case i_Predict_Type
      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
        v_Prev_Begin := i_Begin_Date - 7;
        v_Prev_End   := i_End_Date - 7;
      
        v_Double_Prev_Begin := v_Prev_Begin - 7;
        v_Double_Prev_End   := v_Prev_End - 7;
      when Hsc_Pref.c_Fact_Type_Montly_Predict then
        v_Prev_Begin := i_Begin_Date - 31;
        v_Prev_End   := i_End_Date - 31;
      
        v_Double_Prev_Begin := v_Prev_Begin - 31;
        v_Double_Prev_End   := v_Prev_End - 31;
      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
        v_Prev_Begin := i_Begin_Date - 93;
        v_Prev_End   := i_End_Date - 93;
      
        v_Double_Prev_Begin := v_Prev_Begin - 93;
        v_Double_Prev_End   := v_Prev_End - 93;
      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
        v_Prev_Begin := i_Begin_Date - 366;
        v_Prev_End   := i_End_Date - 366;
      
        v_Double_Prev_Begin := v_Prev_Begin - 366;
        v_Double_Prev_End   := v_Prev_End - 366;
      else
        b.Raise_Not_Implemented;
    end case;
  
    select avg(q.Fact_Value)
      into v_Prev_Sum
      from Hsc_Driver_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Object_Id = i_Object_Id
       and q.Area_Id = i_Area_Id
       and q.Driver_Id = i_Driver_Id
       and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
       and q.Fact_Date between v_Prev_Begin and v_Prev_End;
  
    select avg(q.Fact_Value)
      into v_Double_Prev_Sum
      from Hsc_Driver_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Object_Id = i_Object_Id
       and q.Area_Id = i_Area_Id
       and q.Driver_Id = i_Driver_Id
       and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
       and q.Fact_Date between v_Double_Prev_Begin and v_Double_Prev_End;
  
    if v_Double_Prev_Sum = 0 then
      v_Double_Prev_Sum := null;
    end if;
  
    v_Recent_Trend := v_Prev_Sum / v_Double_Prev_Sum - 1;
  
    select avg(q.Fact_Value)
      into v_Prev_Sum
      from Hsc_Driver_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Object_Id = i_Object_Id
       and q.Area_Id = i_Area_Id
       and q.Driver_Id = i_Driver_Id
       and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
       and q.Fact_Date between v_Year_Prev_Begin and v_Year_Prev_End;
  
    select avg(q.Fact_Value)
      into v_Double_Prev_Sum
      from Hsc_Driver_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Object_Id = i_Object_Id
       and q.Area_Id = i_Area_Id
       and q.Driver_Id = i_Driver_Id
       and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
       and q.Fact_Date between v_Double_Year_Prev_Begin and v_Double_Year_Prev_End;
  
    if v_Double_Prev_Sum = 0 then
      v_Double_Prev_Sum := null;
    end if;
  
    v_Year_Trend := v_Prev_Sum / v_Double_Prev_Sum - 1;
  
    v_Recent_Trend := Nvl(v_Recent_Trend, 0);
    v_Year_Trend   := Nvl(v_Year_Trend, 0);
  
    for r in (select max(q.Fact_Value) Keep(Dense_Rank last order by q.Fact_Date) Fact_Value,
                     to_char(q.Fact_Date, 'mmdd') Fact_Date_Str
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and to_number(to_char(q.Fact_Date, 'mmdd')) between
                     to_number(to_char(i_Begin_Date, 'mmdd')) and
                     to_number(to_char(i_End_Date, 'mmdd'))
               group by to_char(q.Fact_Date, 'mmdd'))
    loop
      continue when r.Fact_Date_Str = '0229' and mod(Extract(year from i_Begin_Date), 4) <> 0;
      continue when r.Fact_Value is null;
    
      if Extract(year from i_Begin_Date) = Extract(year from i_End_Date) then
        v_Fact_Date := to_date(Extract(year from i_Begin_Date) || r.Fact_Date_Str, 'yyyymmdd');
      else
        -- if month is DECEMBER then take begin_date year
        -- else take end_date year
        if to_number(r.Fact_Date_Str) > 1200 then
          v_Fact_Date := to_date(Extract(year from i_Begin_Date) || r.Fact_Date_Str, 'yyyymmdd');
        else
          v_Fact_Date := to_date(Extract(year from i_End_Date) || r.Fact_Date_Str, 'yyyymmdd');
        end if;
      end if;
    
      v_Fact_Value := r.Fact_Value + r.Fact_Value * v_Recent_Trend + r.Fact_Value * v_Year_Trend;
    
      z_Hsc_Driver_Facts.Init(p_Row        => r_Fact,
                              i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Fact_Id    => Hsc_Util.Next_Fact_Id(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Object_Id  => i_Object_Id,
                                                                    i_Area_Id    => i_Area_Id,
                                                                    i_Driver_Id  => i_Driver_Id,
                                                                    i_Fact_Type  => i_Predict_Type,
                                                                    i_Fact_Date  => v_Fact_Date),
                              i_Object_Id  => i_Object_Id,
                              i_Area_Id    => i_Area_Id,
                              i_Driver_Id  => i_Driver_Id,
                              i_Fact_Type  => i_Predict_Type,
                              i_Fact_Date  => v_Fact_Date,
                              i_Fact_Value => v_Fact_Value);
    
      Driver_Fact_Save(r_Fact);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Trend_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Start_Date date := i_Begin_Date;
    v_End_Date   date;
  begin
    case i_Predict_Type
      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'iw');
      when Hsc_Pref.c_Fact_Type_Montly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'mon');
      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'q');
      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'yyyy');
      else
        b.Raise_Not_Implemented;
    end case;
  
    while v_Start_Date <= i_End_Date
    loop
      case i_Predict_Type
        when Hsc_Pref.c_Fact_Type_Weekly_Predict then
          v_End_Date := v_Start_Date + 6;
        when Hsc_Pref.c_Fact_Type_Montly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Yearly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        else
          b.Raise_Not_Implemented;
      end case;
    
      Calc_Trend_Predict_By_Period(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Object_Id    => i_Object_Id,
                                   i_Area_Id      => i_Area_Id,
                                   i_Driver_Id    => i_Driver_Id,
                                   i_Begin_Date   => v_Start_Date,
                                   i_End_Date     => v_End_Date,
                                   i_Predict_Type => i_Predict_Type);
    
      v_Start_Date := v_End_Date + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Weekday_Means
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Area_Id    number,
    i_Driver_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Array_Number is
    result Array_Number := Array_Number();
  begin
    Result.Extend(7);
  
    for r in (select q.Fact_Date - Trunc(q.Fact_Date, 'iw') + 1 Weekday_No,
                     avg(q.Fact_Value) Fact_Value
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and q.Fact_Date between i_Begin_Date and i_End_Date
               group by q.Fact_Date - Trunc(q.Fact_Date, 'iw') + 1)
    loop
      result(r.Weekday_No) := r.Fact_Value;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Monthly_Predict_By_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Year_Prev_Begin date;
    v_Year_Prev_End   date;
  
    v_Double_Prev_Begin date;
    v_Double_Prev_End   date;
    v_Prev_Begin        date;
    v_Prev_End          date;
  
    v_Trend_Prev_Begin   date;
    v_Trend_Prev_End     date;
    v_Trend_Double_Begin date;
    v_Trend_Double_End   date;
  
    v_Prev_Coef    number;
    v_Year_Coef    number;
    v_History_Coef number;
    v_Trend_Coef   number;
  
    v_Iter_Begin date;
    v_Iter_End   date;
  
    v_Fact_Date  date;
    v_Fact_Value number;
  
    v_Weekday_No number;
  
    r_Fact Hsc_Driver_Facts%rowtype;
  
    v_Prev_Means        Array_Number;
    v_Double_Prev_Means Array_Number;
    v_Year_Prev_Means   Array_Number;
  
    v_Trend_Prev_Means   Array_Number;
    v_Trend_Double_Means Array_Number;
  begin
    if i_Predict_Type <> Hsc_Pref.c_Fact_Type_Montly_Predict then
      b.Raise_Error('only monthly allowed');
    end if;
  
    if i_Predict_Type <> Hsc_Pref.c_Fact_Type_Weekly_Predict and
       Trunc(i_Begin_Date, 'mon') <> Trunc(i_End_Date, 'mon') then
      b.Raise_Fatal('function: Calc_Trend_Predict_By_Period is only allowed for the same month');
    end if;
  
    v_Prev_Begin := Add_Months(i_Begin_Date, -1);
    v_Prev_End   := Add_Months(i_End_Date, -1);
  
    v_Double_Prev_Begin := Add_Months(v_Prev_Begin, -1);
    v_Double_Prev_End   := Add_Months(v_Prev_End, -1);
  
    v_Year_Prev_Begin := Add_Months(v_Prev_Begin, -12);
    v_Year_Prev_End   := Add_Months(v_Prev_End, -12);
  
    v_Trend_Prev_End   := Trunc(i_Begin_Date, 'iw') - 1;
    v_Trend_Prev_Begin := Trunc(v_Trend_Prev_End, 'iw');
  
    v_Trend_Double_End   := v_Trend_Prev_Begin - 1;
    v_Trend_Double_Begin := Trunc(v_Trend_Double_End, 'iw');
  
    v_Iter_Begin := Add_Months(i_Begin_Date, -12) + 1;
    v_Iter_End   := Add_Months(i_End_Date, -12) + 1;
  
    if mod(Extract(year from i_Begin_Date), 4) = 0 then
      v_Iter_Begin := v_Iter_Begin + 1;
      v_Iter_End   := v_Iter_End + 1;
    end if;
  
    v_Prev_Means := Calc_Weekday_Means(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Object_Id  => i_Object_Id,
                                       i_Area_Id    => i_Area_Id,
                                       i_Driver_Id  => i_Driver_Id,
                                       i_Begin_Date => v_Prev_Begin,
                                       i_End_Date   => v_Prev_End);
  
    v_Double_Prev_Means := Calc_Weekday_Means(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Object_Id  => i_Object_Id,
                                              i_Area_Id    => i_Area_Id,
                                              i_Driver_Id  => i_Driver_Id,
                                              i_Begin_Date => v_Double_Prev_Begin,
                                              i_End_Date   => v_Double_Prev_End);
  
    v_Year_Prev_Means := Calc_Weekday_Means(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Object_Id  => i_Object_Id,
                                            i_Area_Id    => i_Area_Id,
                                            i_Driver_Id  => i_Driver_Id,
                                            i_Begin_Date => v_Year_Prev_Begin,
                                            i_End_Date   => v_Year_Prev_End);
  
    v_Trend_Prev_Means := Calc_Weekday_Means(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Object_Id  => i_Object_Id,
                                             i_Area_Id    => i_Area_Id,
                                             i_Driver_Id  => i_Driver_Id,
                                             i_Begin_Date => v_Trend_Prev_Begin,
                                             i_End_Date   => v_Trend_Prev_End);
  
    v_Trend_Double_Means := Calc_Weekday_Means(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Object_Id  => i_Object_Id,
                                               i_Area_Id    => i_Area_Id,
                                               i_Driver_Id  => i_Driver_Id,
                                               i_Begin_Date => v_Trend_Double_Begin,
                                               i_End_Date   => v_Trend_Double_End);
  
    for r in (select q.*
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and q.Fact_Date between v_Iter_Begin and v_Iter_End)
    loop
      v_Fact_Date := r.Fact_Date;
    
      if mod(Extract(year from v_Fact_Date), 4) = 0 then
        v_Fact_Date := v_Fact_Date - 1;
      end if;
    
      v_Fact_Date := Add_Months(v_Fact_Date - 1, 12);
    
      v_Weekday_No := Htt_Util.Iso_Week_Day_No(v_Fact_Date);
    
      v_Prev_Coef  := Nvl(v_Prev_Means(v_Weekday_No) / Nullif(v_Double_Prev_Means(v_Weekday_No), 0),
                          1);
      v_Year_Coef  := Nvl(v_Prev_Means(v_Weekday_No) / Nullif(v_Year_Prev_Means(v_Weekday_No), 0),
                          1);
      v_Trend_Coef := Nvl(v_Trend_Prev_Means(v_Weekday_No) /
                          Nullif(v_Trend_Double_Means(v_Weekday_No), 0),
                          1);
    
      v_History_Coef := (v_Prev_Coef + v_Year_Coef) / 2;
    
      v_Fact_Value := r.Fact_Value * v_History_Coef * v_Trend_Coef;
    
      z_Hsc_Driver_Facts.Init(p_Row        => r_Fact,
                              i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Fact_Id    => Hsc_Util.Next_Fact_Id(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Object_Id  => i_Object_Id,
                                                                    i_Area_Id    => i_Area_Id,
                                                                    i_Driver_Id  => i_Driver_Id,
                                                                    i_Fact_Type  => i_Predict_Type,
                                                                    i_Fact_Date  => v_Fact_Date),
                              i_Object_Id  => i_Object_Id,
                              i_Area_Id    => i_Area_Id,
                              i_Driver_Id  => i_Driver_Id,
                              i_Fact_Type  => i_Predict_Type,
                              i_Fact_Date  => v_Fact_Date,
                              i_Fact_Value => v_Fact_Value);
    
      Driver_Fact_Save(r_Fact);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Yearly_Predict_By_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Constant_Coef number := 0.85;
  
    v_Prev_Begin date;
    v_Prev_End   date;
  
    v_Week_Day_No     number;
    v_Average         number;
    v_Average_Coef    number := 0.65;
    v_Weekly_Averages Array_Number := Array_Number();
  
    v_Iter_Begin date;
    v_Iter_End   date;
  
    v_Fact_Date  date;
    v_Fact_Value number;
  
    r_Fact Hsc_Driver_Facts%rowtype;
  begin
    if i_Predict_Type <> Hsc_Pref.c_Fact_Type_Yearly_Predict then
      b.Raise_Error('only yearly allowed');
    end if;
  
    if i_Predict_Type <> Hsc_Pref.c_Fact_Type_Weekly_Predict and
       Trunc(i_Begin_Date, 'mon') <> Trunc(i_End_Date, 'mon') then
      b.Raise_Fatal('function: Calc_Trend_Predict_By_Period is only allowed for the same month');
    end if;
  
    v_Iter_Begin := Add_Months(i_Begin_Date, -12) + 1;
    v_Iter_End   := Add_Months(i_End_Date, -12) + 1;
  
    if mod(Extract(year from i_Begin_Date), 4) = 0 then
      v_Iter_Begin := v_Iter_Begin + 1;
      v_Iter_End   := v_Iter_End + 1;
    end if;
  
    v_Prev_End   := Trunc(i_Begin_Date, 'yyyy') - 1;
    v_Prev_Begin := Trunc(v_Prev_End, 'yyyy');
  
    v_Weekly_Averages.Extend(7);
  
    for r in (select avg(Abs(q.Fact_Value)) Avgs,
                     Trunc(q.Fact_Date) - Trunc(q.Fact_Date, 'iw') + 1 Day_Week_No
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and q.Fact_Date between v_Prev_Begin and v_Prev_End
               group by Trunc(q.Fact_Date) - Trunc(q.Fact_Date, 'iw') + 1)
    loop
      v_Weekly_Averages(r.Day_Week_No) := r.Avgs;
    end loop;
  
    for r in (select q.*
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and q.Fact_Date between v_Iter_Begin and v_Iter_End)
    loop
      v_Fact_Date := r.Fact_Date;
    
      if mod(Extract(year from v_Fact_Date), 4) = 0 then
        v_Fact_Date := v_Fact_Date - 1;
      end if;
    
      v_Fact_Date := Add_Months(v_Fact_Date - 1, 12);
    
      v_Fact_Value := r.Fact_Value * v_Constant_Coef;
    
      v_Week_Day_No := Htt_Util.Iso_Week_Day_No(v_Fact_Date);
    
      v_Average := v_Weekly_Averages(v_Week_Day_No);
    
      if Abs(v_Fact_Value) < Abs(v_Average) * v_Average_Coef then
        v_Fact_Value := v_Average * v_Average_Coef;
      end if;
    
      z_Hsc_Driver_Facts.Init(p_Row        => r_Fact,
                              i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Fact_Id    => Hsc_Util.Next_Fact_Id(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Object_Id  => i_Object_Id,
                                                                    i_Area_Id    => i_Area_Id,
                                                                    i_Driver_Id  => i_Driver_Id,
                                                                    i_Fact_Type  => i_Predict_Type,
                                                                    i_Fact_Date  => v_Fact_Date),
                              i_Object_Id  => i_Object_Id,
                              i_Area_Id    => i_Area_Id,
                              i_Driver_Id  => i_Driver_Id,
                              i_Fact_Type  => i_Predict_Type,
                              i_Fact_Date  => v_Fact_Date,
                              i_Fact_Value => v_Fact_Value);
    
      Driver_Fact_Save(r_Fact);
    end loop;
  
    v_Iter_Begin := Add_Months(i_Begin_Date, -24) + 1;
    v_Iter_End   := Add_Months(i_End_Date, -24) + 1;
  
    if mod(Extract(year from i_Begin_Date), 4) = 0 then
      v_Iter_Begin := v_Iter_Begin + 1;
      v_Iter_End   := v_Iter_End + 1;
    end if;
  
    for r in (select q.*
                from Hsc_Driver_Facts q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Object_Id = i_Object_Id
                 and q.Area_Id = i_Area_Id
                 and q.Driver_Id = i_Driver_Id
                 and q.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and q.Fact_Date between v_Iter_Begin and v_Iter_End
                 and not exists (select *
                        from Hsc_Driver_Facts p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Object_Id = i_Object_Id
                         and p.Area_Id = i_Area_Id
                         and p.Driver_Id = i_Driver_Id
                         and p.Fact_Type = Hsc_Pref.c_Fact_Type_Yearly_Predict
                         and p.Fact_Date between i_Begin_Date and i_End_Date
                         and p.Fact_Date = Add_Months(q.Fact_Date - 1, 24)))
    loop
      v_Fact_Date := r.Fact_Date;
    
      if mod(Extract(year from v_Fact_Date), 4) = 0 then
        v_Fact_Date := v_Fact_Date - 1;
      end if;
    
      v_Fact_Date := Add_Months(v_Fact_Date - 1, 24);
    
      v_Fact_Value := r.Fact_Value * v_Constant_Coef;
    
      v_Week_Day_No := Htt_Util.Iso_Week_Day_No(v_Fact_Date);
    
      v_Average := v_Weekly_Averages(v_Week_Day_No);
    
      if Abs(v_Fact_Value) < Abs(v_Average) * v_Average_Coef then
        v_Fact_Value := v_Average * v_Average_Coef;
      end if;
    
      z_Hsc_Driver_Facts.Init(p_Row        => r_Fact,
                              i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Fact_Id    => Hsc_Util.Next_Fact_Id(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Object_Id  => i_Object_Id,
                                                                    i_Area_Id    => i_Area_Id,
                                                                    i_Driver_Id  => i_Driver_Id,
                                                                    i_Fact_Type  => i_Predict_Type,
                                                                    i_Fact_Date  => v_Fact_Date),
                              i_Object_Id  => i_Object_Id,
                              i_Area_Id    => i_Area_Id,
                              i_Driver_Id  => i_Driver_Id,
                              i_Fact_Type  => i_Predict_Type,
                              i_Fact_Date  => v_Fact_Date,
                              i_Fact_Value => v_Fact_Value);
    
      Driver_Fact_Save(r_Fact);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Local_Predict
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Area_Id      number,
    i_Driver_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Predict_Type varchar2
  ) is
    v_Start_Date date := i_Begin_Date;
    v_End_Date   date;
  begin
    case i_Predict_Type
      when Hsc_Pref.c_Fact_Type_Weekly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'iw');
      when Hsc_Pref.c_Fact_Type_Montly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'mon');
      when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'q');
      when Hsc_Pref.c_Fact_Type_Yearly_Predict then
        v_Start_Date := Trunc(v_Start_Date, 'yyyy');
      else
        b.Raise_Not_Implemented;
    end case;
  
    while v_Start_Date <= i_End_Date
    loop
      case i_Predict_Type
        when Hsc_Pref.c_Fact_Type_Weekly_Predict then
          v_End_Date := v_Start_Date + 6;
        when Hsc_Pref.c_Fact_Type_Montly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        when Hsc_Pref.c_Fact_Type_Yearly_Predict then
          v_End_Date := Last_Day(v_Start_Date);
        else
          b.Raise_Not_Implemented;
      end case;
    
      if i_Predict_Type = Hsc_Pref.c_Fact_Type_Montly_Predict then
        Calc_Monthly_Predict_By_Period(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Object_Id    => i_Object_Id,
                                       i_Area_Id      => i_Area_Id,
                                       i_Driver_Id    => i_Driver_Id,
                                       i_Begin_Date   => v_Start_Date,
                                       i_End_Date     => v_End_Date,
                                       i_Predict_Type => i_Predict_Type);
      elsif i_Predict_Type = Hsc_Pref.c_Fact_Type_Yearly_Predict then
        Calc_Yearly_Predict_By_Period(i_Company_Id   => i_Company_Id,
                                      i_Filial_Id    => i_Filial_Id,
                                      i_Object_Id    => i_Object_Id,
                                      i_Area_Id      => i_Area_Id,
                                      i_Driver_Id    => i_Driver_Id,
                                      i_Begin_Date   => v_Start_Date,
                                      i_End_Date     => v_End_Date,
                                      i_Predict_Type => i_Predict_Type);
      else
        Calc_Average_Mean_Predict_By_Period(i_Company_Id   => i_Company_Id,
                                            i_Filial_Id    => i_Filial_Id,
                                            i_Object_Id    => i_Object_Id,
                                            i_Area_Id      => i_Area_Id,
                                            i_Driver_Id    => i_Driver_Id,
                                            i_Begin_Date   => v_Start_Date,
                                            i_End_Date     => v_End_Date,
                                            i_Predict_Type => i_Predict_Type);
      end if;
    
      v_Start_Date := v_End_Date + 1;
    end loop;
  end;

end Hsc_Core;
/

create or replace package Hsc_Job is
  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Response_Procedure(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Weekly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Monthly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Quarterly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Yearly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Load_Object_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Predict_Type varchar2,
    o_Facts        out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Object_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Data       Array_Varchar2
  );
end Hsc_Job;
/
create or replace package body Hsc_Job is
  ---------------------------------------------------------------------------------------------------- 
  c_Xlsx_File_Extension constant varchar2(5) := '.xlsx';
  ---------------------------------------------------------------------------------------------------- 
  c_Train_Begin constant date := to_date('01.01.2016', 'dd.mm.yyyy');

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Error_Log  varchar2
  ) is
    pragma autonomous_transaction;
  begin
    z_Hsc_Job_Error_Log.Save_One(i_Log_Id     => Hsc_Job_Error_Log_Sq.Nextval,
                                 i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Error_Log  => i_Error_Log);
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Last_Ftp_Date
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Last_Fact_Date date
  ) is
    r_Settings Hsc_Server_Settings%rowtype;
  begin
    if i_Last_Fact_Date is null then
      return;
    end if;
  
    r_Settings := z_Hsc_Server_Settings.Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id);
  
    if r_Settings.Last_Ftp_File_Date is null or r_Settings.Last_Ftp_File_Date < i_Last_Fact_Date then
      z_Hsc_Server_Settings.Update_One(i_Company_Id         => i_Company_Id,
                                       i_Filial_Id          => i_Filial_Id,
                                       i_Last_Ftp_File_Date => Option_Date(i_Last_Fact_Date));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Request_Procedure(o_Output out Array_Varchar2) is
    v_Filenames Array_Varchar2;
  
    v_Last_Ftp_File_Date date;
    v_Current_Date       date := Trunc(sysdate);
    v_Max_Ftp_Load_Date  date := v_Current_Date - 40;
  
    v_Detail_Map  Hashmap;
    v_Data_Map    Hashmap;
    v_Filial_Data Hashmap := Hashmap;
    result        Arraylist := Arraylist;
    Writer        Stream := Stream;
  begin
    for Cmp in (select *
                  from Md_Companies t
                 where t.State = 'A'
                   and exists (select 1
                          from Hsc_Server_Settings St
                         where St.Company_Id = t.Company_Id))
    loop
      for f in (select St.Company_Id,
                       St.Filial_Id,
                       St.Ftp_Server_Url,
                       St.Ftp_Username,
                       St.Ftp_Password,
                       St.Predict_Server_Url,
                       St.Last_Ftp_File_Date
                  from Md_Filials w
                  join Hsc_Server_Settings St
                    on St.Company_Id = w.Company_Id
                   and St.Filial_Id = w.Filial_Id
                 where w.Company_Id = Cmp.Company_Id
                   and w.State = 'A')
      loop
        v_Data_Map    := Hashmap;
        v_Filial_Data := Hashmap;
      
        v_Detail_Map := Fazo.Zip_Map('server_url',
                                     f.Ftp_Server_Url,
                                     'username',
                                     f.Ftp_Username,
                                     'password',
                                     f.Ftp_Password,
                                     'company_id',
                                     f.Company_Id,
                                     'filial_id',
                                     f.Filial_Id);
      
        v_Last_Ftp_File_Date := Nvl(Greatest(f.Last_Ftp_File_Date + 1, v_Max_Ftp_Load_Date),
                                    v_Max_Ftp_Load_Date);
      
        v_Filenames := Array_Varchar2();
      
        while v_Last_Ftp_File_Date <= v_Current_Date
        loop
          Fazo.Push(v_Filenames,
                    to_char(v_Last_Ftp_File_Date, 'yyyy-mm-dd') || c_Xlsx_File_Extension);
        
          v_Last_Ftp_File_Date := v_Last_Ftp_File_Date + 1;
        end loop;
      
        v_Data_Map.Put('filenames', v_Filenames);
      
        v_Filial_Data.Put('detail', v_Detail_Map);
        v_Filial_Data.Put('request_data', v_Data_Map);
      
        Result.Push(v_Filial_Data);
      end loop;
    end loop;
  
    Result.Print_Json(Writer);
  
    o_Output := Writer.Val;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Response_Procedure(i_Input Array_Varchar2) is
    v_Input       Glist := Glist(Json_Array_t.Parse(Fazo.Make_Clob(i_Input)));
    v_Result_Data Gmap := Gmap;
    v_Review_Data Gmap := Gmap;
    v_Files       Glist;
  
    v_Excel_File   Array_Varchar2;
    v_Excel_Sheets Arraylist;
  
    v_Data Hashmap;
  
    v_Errors_Data Hashmap;
    v_Errors      Arraylist;
  
    v_Company_Id number;
    v_Filial_Id  number;
  begin
    for i in 1 .. v_Input.Count
    loop
      Dbms_Session.Reset_Package;
    
      Biruni_Route.Context_Begin;
    
      begin
        v_Result_Data.Val := v_Input.r_Gmap(i);
      
        v_Review_Data := v_Result_Data.r_Gmap('review_data');
        v_Files       := v_Result_Data.r_Glist('files');
      
        v_Company_Id := v_Review_Data.r_Varchar2('company_id');
        v_Filial_Id  := v_Review_Data.r_Varchar2('filial_id');
      
        Ui_Context.Init(i_User_Id      => Md_Pref.User_System(v_Company_Id),
                        i_Project_Code => Href_Pref.c_Pc_Verifix_Hr,
                        i_Filial_Id    => v_Filial_Id);
      
        v_Data := Hashmap();
      
        for j in 1 .. v_Files.Count
        loop
          v_Excel_File := v_Files.r_Array_Varchar2(j);
        
          v_Excel_Sheets := Fazo.Parse_Array(v_Excel_File);
        
          v_Data.Put('import_file', v_Excel_Sheets);
        
          v_Errors_Data := Hsc_Facts.Import_File(i_Company_Id => v_Company_Id,
                                                 i_Filial_Id  => v_Filial_Id,
                                                 i_Data       => v_Data);
        
          v_Errors := v_Errors_Data.r_Arraylist('errors');
        
          Save_Error_Log(i_Company_Id => v_Company_Id,
                         i_Filial_Id  => v_Filial_Id,
                         i_Error_Log  => v_Errors.Json);
        
          Update_Last_Ftp_Date(i_Company_Id     => v_Company_Id,
                               i_Filial_Id      => v_Filial_Id,
                               i_Last_Fact_Date => v_Errors_Data.o_Date('max_fact_date'));
        end loop;
      exception
        when others then
          Save_Error_Log(i_Company_Id => v_Company_Id,
                         i_Filial_Id  => v_Filial_Id,
                         i_Error_Log  => Dbms_Utility.Format_Error_Stack || ' ' ||
                                         Dbms_Utility.Format_Error_Backtrace);
      end;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Predict_Request_Procedure
  (
    o_Output       out Array_Varchar2,
    i_Predict_Type varchar2
  ) is
    v_Object_Ids Array_Number;
  
    v_Detail_Map  Hashmap;
    v_Filial_Data Hashmap := Hashmap;
    result        Arraylist := Arraylist;
    Writer        Stream := Stream;
  begin
    for f in (select t.*, w.Filial_Id, St.Predict_Server_Url
                from Md_Companies t
                join Md_Filials w
                  on w.Company_Id = t.Company_Id
                 and w.State = 'A'
                join Hsc_Server_Settings St
                  on St.Company_Id = w.Company_Id
                 and St.Filial_Id = w.Filial_Id
               where t.State = 'A'
                 and exists (select 1
                        from Hsc_Objects p
                       where p.Company_Id = w.Company_Id
                         and p.Filial_Id = w.Filial_Id)
                 and not exists (select 1
                        from Hsc_Driver_Facts Df
                       where Df.Company_Id = w.Company_Id
                         and Df.Filial_Id = w.Filial_Id
                         and Df.Fact_Type = i_Predict_Type
                         and Df.Fact_Date > Trunc(sysdate)))
    loop
      v_Filial_Data := Fazo.Zip_Map('company_id',
                                    f.Company_Id,
                                    'filial_id',
                                    f.Filial_Id,
                                    'predict_type',
                                    i_Predict_Type);
    
      v_Detail_Map := Fazo.Zip_Map('host_url',
                                   Nvl(f.Predict_Server_Url, Hsc_Pref.c_Predict_Server_Url),
                                   'method',
                                   Hsc_Pref.c_Default_Http_Method,
                                   'api_uri',
                                   Hsc_Pref.c_Predict_Api_Uri);
    
      select q.Object_Id
        bulk collect
        into v_Object_Ids
        from Hsc_Objects q
       where q.Company_Id = f.Company_Id
         and q.Filial_Id = f.Filial_Id
         and exists (select 1
                from Mhr_Divisions p
               where p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Division_Id = q.Object_Id);
    
      v_Filial_Data.Put('detail', v_Detail_Map);
      v_Filial_Data.Put('object_ids', v_Object_Ids);
    
      Result.Push(v_Filial_Data);
    end loop;
  
    Result.Print_Json(Writer);
  
    o_Output := Writer.Val;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Weekly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Weekly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Monthly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Montly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Quarterly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Quarterly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Yearly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Yearly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Load_Object_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Predict_Type varchar2,
    o_Facts        out Array_Varchar2
  ) is
    v_Train_End     date;
    v_Predict_Begin date;
    v_Predict_End   date;
  
    v_Category   Gmap;
    v_Categories Glist := Glist();
  
    v_Data Gmap := Gmap();
  begin
    v_Train_End := case i_Predict_Type
                     when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                      Trunc(sysdate, 'iw')
                     when Hsc_Pref.c_Fact_Type_Montly_Predict then
                      Trunc(sysdate, 'mon')
                     when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                      Trunc(sysdate, 'q')
                     else
                      Trunc(sysdate, 'year')
                   end;
  
    v_Train_End := v_Train_End - 1;
  
    v_Predict_Begin := v_Train_End + 1;
    v_Predict_End   := case i_Predict_Type
                         when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                          v_Predict_Begin + 7
                         when Hsc_Pref.c_Fact_Type_Montly_Predict then
                          Last_Day(v_Predict_Begin)
                         when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                          Htt_Util.Quarter_Last_Day(v_Predict_Begin)
                         else
                          Htt_Util.Year_Last_Day(v_Predict_Begin)
                       end;
  
    for r in (select Df.Area_Id,
                     Df.Driver_Id,
                     Json_Arrayagg(Json_Object('fact_date' value to_char(Df.Fact_Date, 'yyyy-mm-dd'),
                                               'fact_value' value Df.Fact_Value) returning clob) Facts
                from Hsc_Driver_Facts Df
               where Df.Company_Id = i_Company_Id
                 and Df.Filial_Id = i_Filial_Id
                 and Df.Object_Id = i_Object_Id
                 and Df.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and Df.Fact_Date between c_Train_Begin and v_Train_End
                 and not exists (select 1
                        from Hsc_Driver_Facts f
                       where f.Company_Id = Df.Company_Id
                         and f.Filial_Id = Df.Filial_Id
                         and f.Fact_Type = i_Predict_Type
                         and f.Area_Id = Df.Area_Id
                         and f.Driver_Id = Df.Driver_Id
                         and f.Fact_Date > Trunc(sysdate))
               group by Df.Area_Id, Df.Driver_Id)
    loop
      v_Category := Gmap();
    
      v_Category.Put('area_id', r.Area_Id);
      v_Category.Put('driver_id', r.Driver_Id);
      v_Category.Val.Put('facts', r.Facts);
    
      v_Categories.Push(v_Category.Val);
    end loop;
  
    v_Data.Put('categories', v_Categories);
    v_Data.Put('predict_begin', to_char(v_Predict_Begin, 'yyyy-mm-dd'));
    v_Data.Put('predict_end', to_char(v_Predict_End, 'yyyy-mm-dd'));
    v_Data.Put('predict_type', i_Predict_Type);
  
    o_Facts := Fazo.Read_Clob(v_Data.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Object_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Data       Array_Varchar2
  ) is
    v_Data   Hashmap;
    v_Errors Arraylist;
    v_Error  Hashmap;
  begin
    Biruni_Route.Context_Begin;
    Ui_Auth.Logon_As_System(i_Company_Id);
    v_Data := Hsc_Facts.Predict_Facts_Response(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Object_Id  => i_Object_Id,
                                               i_Data       => i_Data);
  
    v_Errors := v_Data.r_Arraylist('errors');
  
    for i in 1 .. v_Errors.Count
    loop
      v_Error := Treat(v_Errors.r_Hashmap(i) as Hashmap);
    
      Save_Error_Log(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Error_Log  => v_Error.Json);
    end loop;
  
    Biruni_Route.Context_End;
  end;

end Hsc_Job;
/

create or replace package Hsc_Pref is
  ----------------------------------------------------------------------------------------------------
  -- setting
  ----------------------------------------------------------------------------------------------------
  type Setting_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Object_Group_Ids Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- object
  ----------------------------------------------------------------------------------------------------
  type Object_Norm_Action_Rt is record(
    Day_No    number,
    Frequency number);
  ----------------------------------------------------------------------------------------------------
  type Object_Norm_Action_Nt is table of Object_Norm_Action_Rt;
  ----------------------------------------------------------------------------------------------------
  type Object_Norm_Rt is record(
    Company_Id    number,
    Filial_Id     number,
    Object_Id     number,
    Norm_Id       number,
    Process_Id    number,
    Action_Id     number,
    Driver_Id     number,
    Area_Id       number,
    Division_Id   number,
    Job_Id        number,
    Time_Value    number,
    Action_Period varchar2(1),
    Actions       Object_Norm_Action_Nt);
  ----------------------------------------------------------------------------------------------------
  type Object_Norm_Nt is table of Object_Norm_Rt;
  ----------------------------------------------------------------------------------------------------
  type Object_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Object_Id  number,
    Note       varchar2(300 char),
    Norms      Object_Norm_Nt);
  ----------------------------------------------------------------------------------------------------
  -- pcode driver
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Driver_Constant constant varchar2(10) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- action period
  ----------------------------------------------------------------------------------------------------
  c_Action_Period_Week  constant varchar2(1) := 'W';
  c_Action_Period_Month constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------
  -- driver fact types
  ----------------------------------------------------------------------------------------------------
  c_Fact_Type_Weekly_Predict    constant varchar2(1) := 'W';
  c_Fact_Type_Montly_Predict    constant varchar2(1) := 'M';
  c_Fact_Type_Quarterly_Predict constant varchar2(1) := 'Q';
  c_Fact_Type_Yearly_Predict    constant varchar2(1) := 'Y';
  c_Fact_Type_Actual            constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- fact import settings
  ---------------------------------------------------------------------------------------------------- 
  c_Import_Setting_Starting_Row  constant varchar2(50) := 'HSC:STARTING_ROW';
  c_Import_Setting_Date_Column   constant varchar2(50) := 'HSC:DATE_COLUMN';
  c_Import_Setting_Object_Column constant varchar2(50) := 'HSC:OBJECT_COLUMN';
  ----------------------------------------------------------------------------------------------------
  -- fact import defaults
  ---------------------------------------------------------------------------------------------------- 
  c_Default_Starting_Row  constant number := 3;
  c_Default_Date_Column   constant number := 2;
  c_Default_Object_Column constant number := 1;
  ----------------------------------------------------------------------------------------------------
  c_Predict_Server_Url  constant varchar2(50) := 'http://127.0.0.1:5000';
  c_Predict_Api_Uri     constant varchar2(50) := '/predict';
  c_Default_Http_Method constant varchar2(50) := 'POST';
  ----------------------------------------------------------------------------------------------------
  c_Ftp_Action_List_Files constant varchar2(50) := 'LIST_FILES';
  c_Ftp_Action_Load_Files constant varchar2(50) := 'LOAD_FILES';
end Hsc_Pref;
/
create or replace package body Hsc_Pref is
end Hsc_Pref;
/

create or replace package Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Add(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Request_Save(i_Request Htt_Requests%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
end Htt_Api;
/
create or replace package body Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- notifications
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  ) is
    r_Person      Mr_Natural_Persons%rowtype;
    r_Request     Htt_Requests%rowtype;
    r_Staff       Href_Staffs%rowtype;
    v_User_Id     number;
    v_Manager_Id  number;
    v_Employee_Id number;
    result        Hashmap := Hashmap();
  begin
    r_Request    := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Request_Id => i_Request_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id,
                                       i_Filial_Id  => r_Request.Filial_Id,
                                       i_Staff_Id   => r_Request.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('request_id', r_Request.Request_Id);
    Result.Put('status', r_Request.Status);
    Result.Put('status_name', Htt_Util.t_Request_Status(r_Request.Status));
    Result.Put('request_kind_name',
               z_Htt_Request_Kinds.Load(i_Company_Id => r_Request.Company_Id, i_Request_Kind_Id => r_Request.Request_Kind_Id).Name);
    Result.Put('request_type', r_Request.Request_Type);
    Result.Put('begin_time', to_char(r_Request.Begin_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('end_time', to_char(r_Request.End_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('employee_name', r_Person.Name);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id, i_Filial_Id => r_Request.Filial_Id, i_Staff_Id => r_Request.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Request_Notification_Title(i_Company_Id      => i_Company_Id,
                                                                                      i_User_Id         => v_Employee_Id,
                                                                                      i_Notify_Type     => i_Notify_Type,
                                                                                      t_Request_Kind_Id => r_Request.Request_Kind_Id),
                                i_Uri        => Htt_Pref.c_Form_Request_View,
                                i_Uri_Param  => Fazo.Zip_Map('request_id', r_Request.Request_Id),
                                i_User_Id    => r_Request.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  ) is
    r_Person       Mr_Natural_Persons%rowtype;
    r_Change       Htt_Plan_Changes%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_User_Id      number;
    v_Manager_Id   number;
    v_Change_Date  date;
    v_Swapped_Date date;
    v_Employee_Id  number;
    result         Hashmap := Hashmap();
  begin
    r_Change     := z_Htt_Plan_Changes.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Change_Id  => i_Change_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id,
                                       i_Filial_Id  => r_Change.Filial_Id,
                                       i_Staff_Id   => r_Change.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    select q.Change_Date, q.Swapped_Date
      into v_Change_Date, v_Swapped_Date
      from Htt_Change_Days q
     where q.Company_Id = r_Change.Company_Id
       and q.Filial_Id = r_Change.Filial_Id
       and q.Change_Id = r_Change.Change_Id
       and Rownum = 1;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('change_id', r_Change.Change_Id);
    Result.Put('change_kind', r_Change.Change_Kind);
    Result.Put('change_kind_name', Htt_Util.t_Change_Kind(r_Change.Change_Kind));
    Result.Put('status', r_Change.Status);
    Result.Put('status_name', Htt_Util.t_Change_Status(r_Change.Status));
    Result.Put('employee_name', r_Person.Name);
    Result.Put('change_date', v_Change_Date);
    Result.Put('swapped_date', v_Swapped_Date);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id, i_Filial_Id => r_Change.Filial_Id, i_Staff_Id => r_Change.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Change_Notification_Title(i_Company_Id  => i_Company_Id,
                                                                                     i_User_Id     => v_Employee_Id,
                                                                                     i_Notify_Type => i_Notify_Type,
                                                                                     i_Change_Kind => r_Change.Change_Kind),
                                i_Uri        => Htt_Pref.c_Form_Change_View,
                                i_Uri_Param  => Fazo.Zip_Map('change_id', r_Change.Change_Id),
                                i_User_Id    => r_Change.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt) is
    r_Calendar           Htt_Calendars%rowtype;
    r_Old_Day            Htt_Calendar_Days%rowtype;
    r_New_Day            Htt_Calendar_Days%rowtype;
    r_Rest_Day           Htt_Calendar_Rest_Days%rowtype;
    v_Dates              Array_Date := Array_Date();
    v_Changed_Dates      Array_Date := Array_Date();
    v_Deleted_Dates      Array_Date;
    v_Swap_Changed_Dates Array_Date := Array_Date();
    v_Swap_Deleted_Dates Array_Date;
  begin
    if not z_Htt_Calendars.Exist_Lock(i_Company_Id  => i_Calendar.Company_Id,
                                      i_Filial_Id   => i_Calendar.Filial_Id,
                                      i_Calendar_Id => i_Calendar.Calendar_Id,
                                      o_Row         => r_Calendar) then
      r_Calendar.Company_Id  := i_Calendar.Company_Id;
      r_Calendar.Filial_Id   := i_Calendar.Filial_Id;
      r_Calendar.Calendar_Id := i_Calendar.Calendar_Id;
    end if;
  
    r_Calendar.Name := i_Calendar.Name;
    r_Calendar.Code := i_Calendar.Code;
  
    z_Htt_Calendars.Save_Row(r_Calendar);
  
    r_New_Day.Company_Id  := i_Calendar.Company_Id;
    r_New_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_New_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Days.Count
    loop
      r_Old_Day               := null;
      r_New_Day.Calendar_Date := i_Calendar.Days(i).Calendar_Date;
      r_New_Day.Name          := i_Calendar.Days(i).Name;
      r_New_Day.Day_Kind      := i_Calendar.Days(i).Day_Kind;
      r_New_Day.Swapped_Date  := i_Calendar.Days(i).Swapped_Date;
    
      if not z_Htt_Calendar_Days.Exist_Lock(i_Company_Id    => r_New_Day.Company_Id,
                                            i_Filial_Id     => r_New_Day.Filial_Id,
                                            i_Calendar_Id   => r_New_Day.Calendar_Id,
                                            i_Calendar_Date => r_New_Day.Calendar_Date,
                                            o_Row           => r_Old_Day) or
         r_New_Day.Day_Kind <> r_Old_Day.Day_Kind --
         or r_New_Day.Swapped_Date <> r_Old_Day.Swapped_Date then
        Fazo.Push(v_Changed_Dates, r_New_Day.Calendar_Date);
      
        if r_Old_Day.Swapped_Date is not null then
          Fazo.Push(v_Swap_Changed_Dates, r_Old_Day.Swapped_Date);
        end if;
      end if;
    
      if Extract(year from r_New_Day.Calendar_Date) <> i_Calendar.Year then
        Htt_Error.Raise_018(i_Chosen_Year   => i_Calendar.Year,
                            i_Calendar_Date => r_New_Day.Calendar_Date);
      end if;
    
      if r_New_Day.Calendar_Date member of v_Dates then
        Htt_Error.Raise_019(r_New_Day.Calendar_Date);
      end if;
    
      z_Htt_Calendar_Days.Save_Row(r_New_Day);
    
      Fazo.Push(v_Dates, r_New_Day.Calendar_Date);
    end loop;
  
    delete Htt_Calendar_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id
       and Extract(year from q.Calendar_Date) = i_Calendar.Year
       and q.Calendar_Date not in (select *
                                     from table(v_Dates))
    returning q.Calendar_Date, Nvl(q.Swapped_Date, q.Calendar_Date) bulk collect into v_Deleted_Dates, v_Swap_Deleted_Dates;
  
    for i in 1 .. v_Changed_Dates.Count
    loop
      r_New_Day := z_Htt_Calendar_Days.Lock_Load(i_Company_Id    => r_New_Day.Company_Id,
                                                 i_Filial_Id     => r_New_Day.Filial_Id,
                                                 i_Calendar_Id   => r_New_Day.Calendar_Id,
                                                 i_Calendar_Date => v_Changed_Dates(i));
      begin
        select q.*
          into r_Old_Day
          from Htt_Calendar_Days q
         where q.Company_Id = r_New_Day.Company_Id
           and q.Filial_Id = r_New_Day.Filial_Id
           and q.Calendar_Id = r_New_Day.Calendar_Id
           and (q.Calendar_Date = r_New_Day.Swapped_Date --
               or q.Calendar_Date <> r_New_Day.Calendar_Date and
               q.Swapped_Date = r_New_Day.Swapped_Date or q.Swapped_Date = r_New_Day.Calendar_Date)
           and Rownum = 1;
      
        if r_New_Day.Calendar_Date = r_Old_Day.Calendar_Date or
           r_New_Day.Calendar_Date = r_Old_Day.Swapped_Date then
          Htt_Error.Raise_020(r_New_Day.Calendar_Date);
        else
          Htt_Error.Raise_020(r_New_Day.Swapped_Date);
        end if;
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    delete Htt_Calendar_Rest_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Rest_Days.Count
    loop
      r_Rest_Day.Company_Id  := i_Calendar.Company_Id;
      r_Rest_Day.Filial_Id   := i_Calendar.Filial_Id;
      r_Rest_Day.Calendar_Id := i_Calendar.Calendar_Id;
      r_Rest_Day.Week_Day_No := i_Calendar.Rest_Days(i);
    
      z_Htt_Calendar_Rest_Days.Insert_Row(r_Rest_Day);
    end loop;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union distinct v_Swap_Deleted_Dates;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union v_Swap_Changed_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Changed_Dates);
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Deleted_Dates);
  
    Htt_Core.Notify_Calendar_Day_Change(i_Company_Id  => i_Calendar.Company_Id,
                                        i_Filial_Id   => i_Calendar.Filial_Id,
                                        i_Calendar_Id => i_Calendar.Calendar_Id,
                                        i_Dates       => v_Changed_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  ) is
    r_Calendar Htt_Calendars%rowtype;
  begin
    r_Calendar := z_Htt_Calendars.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Pcode is not null then
      Htt_Error.Raise_021(i_Calendar_Id);
    end if;
  
    z_Htt_Calendars.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Calendar_Id => i_Calendar_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt) is
    r_Schedule                Htt_Schedules%rowtype;
    r_Day                     Htt_Schedule_Origin_Days%rowtype;
    r_Pattern                 Htt_Schedule_Patterns%rowtype;
    r_Pattern_Day             Htt_Schedule_Pattern_Days%rowtype;
    v_Pattern_Day             Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark                    Htt_Pref.Mark_Rt;
    v_Marks                   Htt_Pref.Mark_Nt;
    v_Marks_Day               Htt_Pref.Schedule_Day_Marks_Rt;
    v_Schedule_Days           Htt_Pref.Schedule_Day_Nt := Htt_Pref.Schedule_Day_Nt();
    v_Dates                   Array_Date := Array_Date();
    v_Calendar_Dates          Array_Date := Array_Date();
    v_Mark_Dates              Array_Date := Array_Date();
    v_Old_Calendar_Id         number;
    v_Shift_Changed           boolean := false;
    v_Borders_Changed         boolean := false;
    v_Allowed_Late_Changed    boolean := false;
    v_Allowed_Early_Changed   boolean := false;
    v_Begin_Late_Changed      boolean := false;
    v_End_Early_Changed       boolean := false;
    v_Calendar_Changed        varchar2(1) := 'N';
    v_Holidays_Changed        varchar2(1) := 'N';
    v_Additional_Rest_Changes varchar2(1) := 'N';
    v_Nonworking_Changed      varchar2(1) := 'N';
    v_Schedule_Attached       varchar2(1) := 'N';
    v_Schedule_Kind           varchar2(1) := i_Schedule.Schedule_Kind;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Schedule.Company_Id,
                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                  o_Row         => r_Schedule) then
      v_Schedule_Kind := r_Schedule.Schedule_Kind;
    
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_101(r_Schedule.Name);
      end if;
    
      begin
        select 'Y'
          into v_Schedule_Attached
          from Htt_Timesheets t
         where t.Company_Id = i_Schedule.Company_Id
           and t.Filial_Id = i_Schedule.Filial_Id
           and t.Schedule_Id = i_Schedule.Schedule_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Schedule_Attached := 'N';
      end;
    
      v_Shift_Changed         := r_Schedule.Shift <> i_Schedule.Shift;
      v_Borders_Changed       := (r_Schedule.Input_Acceptance <> i_Schedule.Input_Acceptance or
                                 r_Schedule.Output_Acceptance <> i_Schedule.Output_Acceptance);
      v_Allowed_Late_Changed  := r_Schedule.Allowed_Late_Time <> i_Schedule.Allowed_Late_Time;
      v_Allowed_Early_Changed := r_Schedule.Allowed_Early_Time <> i_Schedule.Allowed_Early_Time;
      v_Begin_Late_Changed    := r_Schedule.Begin_Late_Time <> i_Schedule.Begin_Late_Time;
      v_End_Early_Changed     := r_Schedule.End_Early_Time <> i_Schedule.End_Early_Time;
    
      if v_Shift_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_022;
      end if;
    
      if v_Borders_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_023;
      end if;
    
      if v_Allowed_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_113;
      end if;
    
      if v_Allowed_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_114;
      end if;
    
      if v_Begin_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_115;
      end if;
    
      if v_End_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_116;
      end if;
    
      if r_Schedule.Track_Duration <> i_Schedule.Track_Duration and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_024;
      end if;
    
      if (r_Schedule.Count_Late <> i_Schedule.Count_Late or
         r_Schedule.Count_Early <> i_Schedule.Count_Early or
         r_Schedule.Count_Lack <> i_Schedule.Count_Lack or
         r_Schedule.Count_Free <> i_Schedule.Count_Free or
         r_Schedule.Gps_Turnout_Enabled <> i_Schedule.Gps_Turnout_Enabled or
         r_Schedule.Gps_Use_Location <> i_Schedule.Gps_Use_Location or
         not Fazo.Equal(r_Schedule.Gps_Max_Interval, i_Schedule.Gps_Max_Interval)) and
         v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_025;
      end if;
    
      v_Old_Calendar_Id := r_Schedule.Calendar_Id;
    
      if not Fazo.Equal(v_Old_Calendar_Id, i_Schedule.Calendar_Id) then
        v_Calendar_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Holidays <> i_Schedule.Take_Holidays then
        v_Holidays_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or
         v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Additional_Rest_Days <> i_Schedule.Take_Additional_Rest_Days then
        v_Additional_Rest_Changes := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Nonworking <> i_Schedule.Take_Nonworking then
        v_Nonworking_Changed := 'Y';
      end if;
    else
      r_Schedule.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Schedules,
                                                i_Id    => i_Schedule.Schedule_Id);
    end if;
  
    r_Schedule.Company_Id                := i_Schedule.Company_Id;
    r_Schedule.Filial_Id                 := i_Schedule.Filial_Id;
    r_Schedule.Schedule_Id               := i_Schedule.Schedule_Id;
    r_Schedule.Name                      := i_Schedule.Name;
    r_Schedule.Schedule_Kind             := v_Schedule_Kind;
    r_Schedule.Shift                     := i_Schedule.Shift;
    r_Schedule.Input_Acceptance          := i_Schedule.Input_Acceptance;
    r_Schedule.Output_Acceptance         := i_Schedule.Output_Acceptance;
    r_Schedule.Track_Duration            := i_Schedule.Track_Duration;
    r_Schedule.Count_Late                := i_Schedule.Count_Late;
    r_Schedule.Count_Early               := i_Schedule.Count_Early;
    r_Schedule.Count_Lack                := i_Schedule.Count_Lack;
    r_Schedule.Count_Free                := i_Schedule.Count_Free;
    r_Schedule.Allowed_Late_Time         := i_Schedule.Allowed_Late_Time;
    r_Schedule.Allowed_Early_Time        := i_Schedule.Allowed_Early_Time;
    r_Schedule.Begin_Late_Time           := i_Schedule.Begin_Late_Time;
    r_Schedule.End_Early_Time            := i_Schedule.End_Early_Time;
    r_Schedule.Calendar_Id               := i_Schedule.Calendar_Id;
    r_Schedule.Take_Holidays             := i_Schedule.Take_Holidays;
    r_Schedule.Take_Nonworking           := i_Schedule.Take_Nonworking;
    r_Schedule.Take_Additional_Rest_Days := i_Schedule.Take_Additional_Rest_Days;
    r_Schedule.Gps_Turnout_Enabled       := i_Schedule.Gps_Turnout_Enabled;
    r_Schedule.Gps_Use_Location          := i_Schedule.Gps_Use_Location;
    r_Schedule.Gps_Max_Interval          := i_Schedule.Gps_Max_Interval;
    r_Schedule.State                     := i_Schedule.State;
    r_Schedule.Code                      := i_Schedule.Code;
  
    if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      if r_Schedule.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
        Htt_Error.Raise_108;
      end if;
    
      if i_Schedule.Advanced_Setting = 'Y' then
        Htt_Error.Raise_117;
      end if;
    
      r_Schedule.Shift             := 0;
      r_Schedule.Input_Acceptance  := r_Schedule.Track_Duration;
      r_Schedule.Output_Acceptance := r_Schedule.Track_Duration;
    
      r_Schedule.Count_Late  := 'N';
      r_Schedule.Count_Early := 'N';
      r_Schedule.Count_Lack  := 'N';
      r_Schedule.Count_Free  := 'N';
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    elsif r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      r_Schedule.Shift             := null;
      r_Schedule.Input_Acceptance  := null;
      r_Schedule.Output_Acceptance := null;
      r_Schedule.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    end if;
  
    if r_Schedule.Gps_Turnout_Enabled = 'N' then
      r_Schedule.Gps_Use_Location := 'N';
      r_Schedule.Gps_Max_Interval := null;
    end if;
  
    z_Htt_Schedules.Save_Row(r_Schedule);
  
    if (v_Shift_Changed or v_Borders_Changed or v_Allowed_Late_Changed or v_Allowed_Early_Changed or
       v_Begin_Late_Changed or v_End_Early_Changed) and v_Schedule_Attached = 'N' then
      v_Schedule_Days := i_Schedule.Days;
    else
      select Td.Schedule_Date,
             Td.Day_Kind,
             Td.Begin_Time,
             Td.End_Time,
             Decode(Td.Day_Kind, Htt_Pref.c_Day_Kind_Work, Td.Break_Enabled, null),
             Td.Break_Begin_Time,
             Td.Break_End_Time,
             Td.Plan_Time
        bulk collect
        into v_Schedule_Days
        from table(i_Schedule.Days) Td
      minus
      select Od.Schedule_Date,
             Od.Day_Kind,
             (Od.Begin_Time - Trunc(Od.Begin_Time)) * 1440,
             (Od.End_Time - Trunc(Od.End_Time)) * 1440,
             Od.Break_Enabled,
             (Od.Break_Begin_Time - Trunc(Od.Break_Begin_Time)) * 1440,
             (Od.Break_End_Time - Trunc(Od.Break_End_Time)) * 1440,
             Od.Plan_Time
        from Htt_Schedule_Origin_Days Od
       where Od.Company_Id = i_Schedule.Company_Id
         and Od.Filial_Id = i_Schedule.Filial_Id
         and Od.Schedule_Id = i_Schedule.Schedule_Id
         and Extract(year from Od.Schedule_Date) = i_Schedule.Year;
    end if;
  
    for i in 1 .. v_Schedule_Days.Count
    loop
      r_Day := null;
    
      if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        v_Schedule_Days(i).Begin_Time := 0;
        v_Schedule_Days(i).End_Time := 0;
        v_Schedule_Days(i).Break_Enabled := 'N';
      end if;
    
      r_Day.Company_Id    := i_Schedule.Company_Id;
      r_Day.Filial_Id     := i_Schedule.Filial_Id;
      r_Day.Schedule_Id   := i_Schedule.Schedule_Id;
      r_Day.Schedule_Date := v_Schedule_Days(i).Schedule_Date;
      r_Day.Day_Kind      := v_Schedule_Days(i).Day_Kind;
      r_Day.Break_Enabled := v_Schedule_Days(i).Break_Enabled;
    
      if Extract(year from r_Day.Schedule_Date) <> i_Schedule.Year then
        Htt_Error.Raise_026(i_Chosen_Year   => i_Schedule.Year,
                            i_Schedule_Date => r_Day.Schedule_Date);
      end if;
    
      if v_Schedule_Days(i).Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Day.Begin_Time := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).Begin_Time, 'minute');
        r_Day.End_Time   := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).End_Time, 'minute');
      
        if r_Day.End_Time <= r_Day.Begin_Time then
          r_Day.End_Time := r_Day.End_Time + 1;
        end if;
      
        if v_Schedule_Days(i).Break_Enabled = 'Y' then
          r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_Begin_Time, 'minute');
          r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_End_Time, 'minute');
        
          if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
            r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
          end if;
        
          if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
            r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
          end if;
        end if;
      
        r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                   i_Begin_Time       => r_Day.Begin_Time,
                                                   i_End_Time         => r_Day.End_Time,
                                                   i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                   i_Break_End_Time   => r_Day.Break_End_Time);
      
        r_Day.Plan_Time := v_Schedule_Days(i).Plan_Time;
      else
        r_Day.Full_Time     := 0;
        r_Day.Plan_Time     := 0;
        r_Day.Break_Enabled := null;
      end if;
    
      r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Schedule.Shift, 'minute');
      r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
      r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                Numtodsinterval(r_Schedule.Input_Acceptance, 'minute');
      r_Day.Output_Border    := r_Day.Shift_End_Time +
                                Numtodsinterval(r_Schedule.Output_Acceptance, 'minute');
    
      z_Htt_Schedule_Origin_Days.Save_Row(r_Day);
    
      Fazo.Push(v_Dates, r_Day.Schedule_Date);
    end loop;
  
    r_Pattern.Company_Id     := i_Schedule.Company_Id;
    r_Pattern.Filial_Id      := i_Schedule.Filial_Id;
    r_Pattern.Schedule_Id    := i_Schedule.Schedule_Id;
    r_Pattern.Schedule_Kind  := i_Schedule.Pattern.Pattern_Kind;
    r_Pattern.All_Days_Equal := i_Schedule.Pattern.All_Days_Equal;
    r_Pattern.Count_Days     := i_Schedule.Pattern.Count_Days;
    r_Pattern.Begin_Date     := i_Schedule.Pattern.Begin_Date;
    r_Pattern.End_Date       := i_Schedule.Pattern.End_Date;
  
    z_Htt_Schedule_Patterns.Save_Row(r_Pattern);
  
    delete Htt_Schedule_Pattern_Days t
     where t.Company_Id = i_Schedule.Company_Id
       and t.Filial_Id = i_Schedule.Filial_Id
       and t.Schedule_Id = i_Schedule.Schedule_Id;
  
    for i in 1 .. i_Schedule.Pattern.Pattern_Day.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule.Pattern.Pattern_Day(i);
    
      r_Pattern_Day.Company_Id  := i_Schedule.Company_Id;
      r_Pattern_Day.Filial_Id   := i_Schedule.Filial_Id;
      r_Pattern_Day.Schedule_Id := i_Schedule.Schedule_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          r_Pattern_Day.Begin_Time    := 0;
          r_Pattern_Day.End_Time      := 0;
          r_Pattern_Day.Break_Enabled := 'N';
        end if;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Pattern_Days.Save_Row(r_Pattern_Day);
    
      if v_Pattern_Day.End_Time < v_Pattern_Day.Begin_Time then
        v_Pattern_Day.End_Time := v_Pattern_Day.End_Time + 1440;
      end if;
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
      
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
          v_Mark.End_Time   := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_027(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_028(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Pattern_Day.Begin_Time,
                                                                                               1440),
                                                                         i_Show_Minutes => true,
                                                                         i_Show_Words   => false),
                              i_End_Time_Text   => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Pattern_Day.End_Time,
                                                                                               1440),
                                                                         i_Show_Minutes => true,
                                                                         i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_029(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Pattern_Marks.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                i_Filial_Id   => i_Schedule.Filial_Id,
                                                i_Schedule_Id => i_Schedule.Schedule_Id,
                                                i_Day_No      => v_Pattern_Day.Day_No,
                                                i_Begin_Time  => v_Mark.Begin_Time,
                                                i_End_Time    => v_Mark.End_Time);
      end loop;
    end loop;
  
    for i in 1 .. i_Schedule.Marks.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Marks_Day := i_Schedule.Marks(i);
    
      -- symmetric differrence
      with Old_Marks as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time
          from Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date),
      New_Marks as
       (select m.Begin_Time, m.End_Time
          from table(v_Marks_Day.Marks) m)
      select Begin_Time, End_Time
        bulk collect
        into v_Marks
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              union
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm)
      minus
      select Begin_Time, End_Time
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              intersect
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm);
    
      if v_Marks.Count > 0 then
        delete Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date;
      
        if v_Marks_Day.End_Time < v_Marks_Day.Begin_Time then
          v_Marks_Day.End_Time := v_Marks_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Marks_Day.Marks.Count
        loop
          v_Mark := v_Marks_Day.Marks(j);
        
          if v_Mark.Begin_Time < v_Marks_Day.Begin_Time then
            v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
            v_Mark.End_Time   := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.End_Time < v_Mark.Begin_Time then
            v_Mark.End_Time := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.Begin_Time = v_Mark.End_Time then
            Htt_Error.Raise_030(v_Marks_Day.Schedule_Date);
          end if;
        
          if v_Mark.End_Time > v_Marks_Day.End_Time then
            Htt_Error.Raise_031(i_Schedule_Date   => v_Marks_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Marks_Day.Begin_Time,
                                                                                                 1440),
                                                                           i_Show_Minutes => true,
                                                                           i_Show_Words   => false),
                                i_End_Time_Text   => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Marks_Day.End_Time,
                                                                                                 1440),
                                                                           i_Show_Minutes => true,
                                                                           i_Show_Words   => false));
          end if;
        
          z_Htt_Schedule_Origin_Day_Marks.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                     i_Filial_Id     => i_Schedule.Filial_Id,
                                                     i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                     i_Schedule_Date => v_Marks_Day.Schedule_Date,
                                                     i_Begin_Time    => v_Mark.Begin_Time,
                                                     i_End_Time      => v_Mark.End_Time);
        end loop;
      
        Fazo.Push(v_Mark_Dates, v_Marks_Day.Schedule_Date);
      end if;
    end loop;
  
    if Md_Pref.c_Migr_Company_Id != i_Schedule.Company_Id then
      Htt_Util.Assert_Schedule_Marks(i_Company_Id  => i_Schedule.Company_Id,
                                     i_Filial_Id   => i_Schedule.Filial_Id,
                                     i_Schedule_Id => i_Schedule.Schedule_Id,
                                     i_Dates       => v_Mark_Dates);
    end if;
  
    select Cd.Calendar_Date
      bulk collect
      into v_Calendar_Dates
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Schedule.Company_Id
       and Cd.Filial_Id = i_Schedule.Filial_Id
       and Cd.Calendar_Id in (v_Old_Calendar_Id, i_Schedule.Calendar_Id)
       and (Cd.Day_Kind = Htt_Pref.c_Day_Kind_Swapped and v_Calendar_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Holiday and v_Holidays_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest and v_Additional_Rest_Changes = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking and v_Nonworking_Changed = 'Y');
  
    v_Dates := v_Dates multiset union v_Calendar_Dates;
    v_Dates := v_Dates multiset union distinct v_Mark_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Schedule.Company_Id,
                                 i_Filial_Id   => i_Schedule.Filial_Id,
                                 i_Schedule_Id => i_Schedule.Schedule_Id,
                                 i_Year        => i_Schedule.Year,
                                 i_Dates       => v_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  o_Row         => r_Schedule) then
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_102(r_Schedule.Name);
      end if;
    
      z_Htt_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Schedule_Id => i_Schedule_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt) is
    r_Schedule_Template Htt_Schedule_Templates%rowtype;
    r_Pattern_Day       Htt_Schedule_Template_Days%rowtype;
    v_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark              Htt_Pref.Mark_Rt;
    v_Mark_Day_Numbers  Array_Number := Array_Number();
  begin
    r_Schedule_Template.Template_Id               := i_Schedule_Template.Template_Id;
    r_Schedule_Template.Name                      := i_Schedule_Template.Name;
    r_Schedule_Template.Shift                     := i_Schedule_Template.Shift;
    r_Schedule_Template.Description               := i_Schedule_Template.Description;
    r_Schedule_Template.Schedule_Kind             := i_Schedule_Template.Schedule_Kind;
    r_Schedule_Template.All_Days_Equal            := i_Schedule_Template.All_Days_Equal;
    r_Schedule_Template.Count_Days                := i_Schedule_Template.Count_Days;
    r_Schedule_Template.Input_Acceptance          := i_Schedule_Template.Input_Acceptance;
    r_Schedule_Template.Output_Acceptance         := i_Schedule_Template.Output_Acceptance;
    r_Schedule_Template.Track_Duration            := i_Schedule_Template.Track_Duration;
    r_Schedule_Template.Count_Late                := i_Schedule_Template.Count_Late;
    r_Schedule_Template.Count_Early               := i_Schedule_Template.Count_Early;
    r_Schedule_Template.Count_Lack                := i_Schedule_Template.Count_Lack;
    r_Schedule_Template.Take_Holidays             := i_Schedule_Template.Take_Holidays;
    r_Schedule_Template.Take_Nonworking           := i_Schedule_Template.Take_Nonworking;
    r_Schedule_Template.Take_Additional_Rest_Days := i_Schedule_Template.Take_Additional_Rest_Days;
    r_Schedule_Template.Order_No                  := i_Schedule_Template.Order_No;
    r_Schedule_Template.State                     := i_Schedule_Template.State;
    r_Schedule_Template.Code                      := i_Schedule_Template.Code;
  
    z_Htt_Schedule_Templates.Save_Row(r_Schedule_Template);
  
    for i in 1 .. i_Schedule_Template.Pattern_Days.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule_Template.Pattern_Days(i);
    
      r_Pattern_Day.Template_Id := i_Schedule_Template.Template_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Template_Days.Save_Row(r_Pattern_Day);
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < i_Schedule_Template.Shift then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_032(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > i_Schedule_Template.Shift + 1440 then
          Htt_Error.Raise_033(i_Day_No     => v_Pattern_Day.Day_No,
                              i_Shift_Text => Htt_Util.To_Time_Text(i_Minutes      => i_Schedule_Template.Shift,
                                                                    i_Show_Minutes => true,
                                                                    i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_034(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Template_Marks.Save_One(i_Template_Id => i_Schedule_Template.Template_Id,
                                               i_Day_No      => v_Pattern_Day.Day_No,
                                               i_Begin_Time  => v_Mark.Begin_Time,
                                               i_End_Time    => v_Mark.End_Time);
      
        Fazo.Push(v_Mark_Day_Numbers, v_Pattern_Day.Day_No);
      end loop;
    end loop;
  
    Htt_Util.Assert_Schedule_Template_Marks(i_Template_Id => i_Schedule_Template.Template_Id,
                                            i_Day_Numbers => v_Mark_Day_Numbers);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number) is
  begin
    z_Htt_Schedule_Templates.Delete_One(i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype) is
    r_Time_Kind   Htt_Time_Kinds%rowtype;
    r_Parent      Htt_Time_Kinds%rowtype;
    v_Pcode       Htt_Time_Kinds.Pcode%type;
    v_Requestable Htt_Time_Kinds.Requestable%type := 'Y';
  begin
    if z_Htt_Time_Kinds.Exist_Lock(i_Company_Id   => i_Time_Kind.Company_Id,
                                   i_Time_Kind_Id => i_Time_Kind.Time_Kind_Id,
                                   o_Row          => r_Time_Kind) then
    
      if r_Time_Kind.Parent_Id <> i_Time_Kind.Parent_Id or
         (r_Time_Kind.Parent_Id is not null and i_Time_Kind.Parent_Id is null) then
        Htt_Error.Raise_035(z_Htt_Time_Kinds.Load(i_Company_Id => r_Time_Kind.Company_Id, --
                            i_Time_Kind_Id => r_Time_Kind.Parent_Id).Name);
      end if;
    
      v_Pcode       := r_Time_Kind.Pcode;
      v_Requestable := r_Time_Kind.Requestable;
    
      if v_Pcode is not null then
        if i_Time_Kind.Parent_Id is not null and r_Time_Kind.Parent_Id is null then
          Htt_Error.Raise_036;
        end if;
      
        if r_Time_Kind.Plan_Load <> i_Time_Kind.Plan_Load then
          Htt_Error.Raise_037(Htt_Util.t_Plan_Load(r_Time_Kind.Plan_Load));
        end if;
      
        if r_Time_Kind.Requestable <> i_Time_Kind.Requestable then
          Htt_Error.Raise_038;
        end if;
      end if;
    end if;
  
    if v_Pcode is null then
      if i_Time_Kind.Parent_Id is null then
        Htt_Error.Raise_039;
      end if;
    
      if i_Time_Kind.Requestable = 'N' then
        Htt_Error.Raise_040;
      end if;
    
      r_Parent := z_Htt_Time_Kinds.Take(i_Company_Id   => i_Time_Kind.Company_Id,
                                        i_Time_Kind_Id => i_Time_Kind.Parent_Id);
    
      if r_Parent.Pcode is null then
        Htt_Error.Raise_041;
      end if;
    
      if r_Parent.Parent_Id is not null then
        Htt_Error.Raise_042;
      end if;
    end if;
  
    if i_Time_Kind.Plan_Load <> r_Parent.Plan_Load then
      Htt_Error.Raise_043(Htt_Util.t_Plan_Load(r_Parent.Plan_Load));
    end if;
  
    r_Time_Kind             := i_Time_Kind;
    r_Time_Kind.Pcode       := v_Pcode;
    r_Time_Kind.Requestable := v_Requestable;
  
    z_Htt_Time_Kinds.Save_Row(r_Time_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  ) is
    r_Time_Kind Htt_Time_Kinds%rowtype;
  begin
    r_Time_Kind := z_Htt_Time_Kinds.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Time_Kind_Id => i_Time_Kind_Id);
  
    if r_Time_Kind.Pcode is not null then
      Htt_Error.Raise_044(i_Time_Kind_Id);
    end if;
  
    z_Htt_Time_Kinds.Delete_One(i_Company_Id   => i_Company_Id, --
                                i_Time_Kind_Id => i_Time_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt) is
    r_Person_Old Htt_Persons%rowtype;
    r_Person_New Htt_Persons%rowtype;
    v_Photo_Shas Array_Varchar2 := Array_Varchar2();
    v_Count      number;
  begin
    if z_Htt_Persons.Exist_Lock(i_Company_Id => i_Person.Company_Id,
                                i_Person_Id  => i_Person.Person_Id,
                                o_Row        => r_Person_Old) then
      null;
    end if;
  
    r_Person_New.Company_Id := i_Person.Company_Id;
    r_Person_New.Person_Id  := i_Person.Person_Id;
    r_Person_New.Pin        := i_Person.Pin;
    r_Person_New.Pin_Code   := i_Person.Pin_Code;
    r_Person_New.Rfid_Code  := i_Person.Rfid_Code;
    r_Person_New.Qr_Code    := i_Person.Qr_Code;
  
    z_Htt_Persons.Save_Row(r_Person_New);
  
    v_Photo_Shas.Extend(i_Person.Photos.Count);
  
    for i in 1 .. i_Person.Photos.Count
    loop
      v_Photo_Shas(i) := i_Person.Photos(i).Photo_Sha;
    
      Person_Save_Photo(i_Company_Id => i_Person.Company_Id,
                        i_Person_Id  => i_Person.Person_Id,
                        i_Photo_Sha  => i_Person.Photos(i).Photo_Sha,
                        i_Is_Main    => i_Person.Photos(i).Is_Main);
    end loop;
  
    for r in (select *
                from Htt_Person_Photos q
               where q.Company_Id = i_Person.Company_Id
                 and q.Person_Id = i_Person.Person_Id
                 and q.Photo_Sha not member of v_Photo_Shas)
    loop
      z_Htt_Person_Photos.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Person_Id  => r.Person_Id,
                                     i_Photo_Sha  => r.Photo_Sha);
    end loop;
  
    select count(*)
      into v_Count
      from Htt_Person_Photos q
     where q.Company_Id = i_Person.Company_Id
       and q.Person_Id = i_Person.Person_Id
       and q.Is_Main = 'Y';
  
    if v_Count > 1 then
      Htt_Error.Raise_045(i_Main_Photo_Cnt => v_Count,
                          i_Person_Name    => z_Mr_Natural_Persons.Load(i_Company_Id => i_Person.Company_Id, --
                                              i_Person_Id => i_Person.Person_Id).Name);
    end if;
  
    if not (Fazo.Equal(r_Person_New.Pin, r_Person_Old.Pin) and
        Fazo.Equal(r_Person_New.Pin_Code, r_Person_Old.Pin_Code) and
        Fazo.Equal(r_Person_New.Rfid_Code, r_Person_Old.Rfid_Code) and
        Fazo.Equal(r_Person_New.Qr_Code, r_Person_Old.Qr_Code)) then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Person.Company_Id,
                                 i_Person_Id  => i_Person.Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  ) is
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha) then
      z_Htt_Person_Photos.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha);
    
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  ) is
    r_Person_Photo Htt_Person_Photos%rowtype;
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha,
                                      o_Row        => r_Person_Photo) then
      z_Htt_Person_Photos.Update_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => Option_Varchar2(i_Is_Main));
    else
      z_Htt_Person_Photos.Insert_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => i_Is_Main);
    end if;
  
    if r_Person_Photo.Company_Id is null or r_Person_Photo.Is_Main <> i_Is_Main then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  ) is
    v_Is_Main varchar2(1);
  
    --------------------------------------------------
    Function Photo_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Person_Photos Pp
       where Pp.Company_Id = i_Company_Id
         and Pp.Person_Id = i_Person_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    v_Is_Main := z_Htt_Person_Photos.Take(i_Company_Id => i_Company_Id, --
                 i_Person_Id => i_Person_Id, --
                 i_Photo_Sha => i_Old_Photo_Sha).Is_Main;
  
    Person_Photo_Delete(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_Old_Photo_Sha);
  
    if not Photo_Exists then
      v_Is_Main := 'Y';
    end if;
  
    if i_New_Photo_Sha is not null then
      Person_Save_Photo(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_New_Photo_Sha,
                        i_Is_Main    => Nvl(v_Is_Main, 'N'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Persons.Delete_One(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype) is
  begin
    z_Htt_Location_Types.Save_Row(i_Location_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  ) is
  begin
    z_Htt_Location_Types.Delete_One(i_Company_Id       => i_Company_Id,
                                    i_Location_Type_Id => i_Location_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Polygon_Save
  (
    i_Company_Id       number,
    i_Location_Id      number,
    i_Polygon_Vertices Array_Varchar2
  ) is
    v_Order_No         number := 0;
    v_Polygon_Vertices Array_Varchar2 := i_Polygon_Vertices;
  begin
    delete from Htt_Location_Polygon_Vertices t
     where t.Company_Id = i_Company_Id
       and t.Location_Id = i_Location_Id;
  
    if v_Polygon_Vertices.Count > 0 and
       v_Polygon_Vertices(v_Polygon_Vertices.Count) <> v_Polygon_Vertices(1) then
      v_Polygon_Vertices.Extend;
      v_Polygon_Vertices(v_Polygon_Vertices.Count) := v_Polygon_Vertices(1);
    end if;
  
    for i in 1 .. v_Polygon_Vertices.Count
    loop
      v_Order_No := v_Order_No + 1;
    
      z_Htt_Location_Polygon_Vertices.Insert_One(i_Company_Id  => i_Company_Id,
                                                 i_Location_Id => i_Location_Id,
                                                 i_Order_No    => v_Order_No,
                                                 i_Latlng      => v_Polygon_Vertices(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  ) is
    r_Row             Htt_Locations%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    if z_Htt_Locations.Exist_Lock(i_Company_Id  => i_Location.Company_Id,
                                  i_Location_Id => i_Location.Location_Id,
                                  o_Row         => r_Row) then
      z_Htt_Locations.Update_Row(i_Location);
    
      if not Fazo.Equal(r_Row.Timezone_Code, i_Location.Timezone_Code) then
        v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
        v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
      
        for r in (select q.Device_Id
                    from Htt_Devices q
                   where q.Company_Id = i_Location.Company_Id
                     and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                     and q.Location_Id = i_Location.Location_Id
                     and q.State = 'A')
        loop
          Htt_Api.Acms_Command_Add(i_Company_Id   => i_Location.Company_Id,
                                   i_Device_Id    => r.Device_Id,
                                   i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
        end loop;
      end if;
    else
      z_Htt_Locations.Insert_Row(i_Location);
    end if;
  
    Location_Polygon_Save(i_Company_Id       => i_Location.Company_Id,
                          i_Location_Id      => i_Location.Location_Id,
                          i_Polygon_Vertices => i_Polygon_Vertices);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Locations.Delete_One(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Insert_Try(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    for r in (select q.Company_Id, q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = i_Location_Id
                 and exists (select 1
                        from Hzk_Devices Dv
                       where Dv.Company_Id = q.Company_Id
                         and Dv.Device_Id = q.Device_Id))
    loop
      Hzk_Api.Device_Sync(i_Company_Id => r.Company_Id, i_Device_Id => r.Device_Id);
    end loop;
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Location_Id => i_Location_Id,
                                 i_Person_Id   => i_Person_Id,
                                 i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Remove_Person(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Location_Id => i_Location_Id,
                                    i_Person_Id   => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    Htt_Core.Location_Sync_Persons(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Person_Global_Sync_All_Location(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
    r_Qrcode Htt_Location_Qr_Codes%rowtype;
  begin
    r_Qrcode := z_Htt_Location_Qr_Codes.Lock_Load(i_Company_Id => i_Company_Id,
                                                  i_Unique_Key => i_Unique_Key);
  
    if r_Qrcode.State = 'P' then
      Htt_Error.Raise_082(i_Location_Id   => r_Qrcode.Location_Id,
                          i_Location_Name => z_Htt_Locations.Load(i_Company_Id => r_Qrcode.Company_Id, --
                                             i_Location_Id => r_Qrcode.Location_Id).Name,
                          i_Created_On    => r_Qrcode.Created_On);
    end if;
  
    r_Qrcode.State := 'P';
  
    z_Htt_Location_Qr_Codes.Update_Row(r_Qrcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
  begin
    z_Htt_Location_Qr_Codes.Delete_One(i_Company_Id => i_Company_Id, i_Unique_Key => i_Unique_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Random_Key varchar2(32) := to_char(Dbms_Crypto.Randombytes(16));
    v_Unique_Key varchar2(64);
  begin
    v_Unique_Key := Fazo.Hash_Sha1(i_Location_Id || ':' || Htt_Next.Qr_Code_Id || v_Random_Key);
  
    z_Htt_Location_Qr_Codes.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Unique_Key  => v_Unique_Key,
                                       i_Location_Id => i_Location_Id,
                                       i_State       => 'A');
  
    return v_Unique_Key;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype) is
    r_Terminal_Model Htt_Terminal_Models%rowtype;
  begin
    r_Terminal_Model := z_Htt_Terminal_Models.Lock_Load(i_Terminal_Model.Model_Id);
  
    if r_Terminal_Model.Pcode <> i_Terminal_Model.Pcode then
      Htt_Error.Raise_046(i_Old_Pcode => r_Terminal_Model.Pcode,
                          i_Model_Id  => i_Terminal_Model.Model_Id);
    end if;
  
    z_Htt_Terminal_Models.Update_Row(i_Terminal_Model);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype) is
    r_Device          Htt_Devices%rowtype := i_Device;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    r_Device.Use_Settings := Nvl(r_Device.Use_Settings, 'N');
  
    if r_Device.Model_Id is null and --
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_047;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if r_Device.Location_Id is null and --
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_048;
    end if;
  
    if r_Device.Use_Settings = 'Y' then
      r_Device.Track_Types   := null;
      r_Device.Mark_Types    := null;
      r_Device.Emotion_Types := null;
      r_Device.Lang_Code     := null;
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          r_Device.Lang_Code is null then
      Htt_Error.Raise_050;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      r_Device.Autogen_Inputs       := 'N';
      r_Device.Autogen_Outputs      := 'N';
      r_Device.Ignore_Tracks        := 'N';
      r_Device.Restricted_Type      := null;
      r_Device.Only_Last_Restricted := null;
    else
      r_Device.Autogen_Inputs  := Nvl(r_Device.Autogen_Inputs, 'N');
      r_Device.Autogen_Outputs := Nvl(r_Device.Autogen_Outputs, 'N');
    
      if r_Device.Restricted_Type not in
         (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
        r_Device.Only_Last_Restricted := null;
      end if;
    end if;
  
    r_Device.Status        := Nvl(r_Device.Status, Htt_Pref.c_Device_Status_Unknown);
    r_Device.Ignore_Tracks := Nvl(r_Device.Ignore_Tracks, 'N');

    z_Htt_Devices.Insert_Row(r_Device);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  ) is
    r_Device               Htt_Devices%rowtype;
    v_Track_Types          Option_Varchar2 := i_Track_Types;
    v_Mark_Types           Option_Varchar2 := i_Mark_Types;
    v_Emotion_Types        Option_Varchar2 := i_Emotion_Types;
    v_Lang_Code            Option_Varchar2 := i_Lang_Code;
    v_Autogen_Inputs       Option_Varchar2 := i_Autogen_Inputs;
    v_Autogen_Outputs      Option_Varchar2 := i_Autogen_Outputs;
    v_Ignore_Tracks        Option_Varchar2 := i_Ignore_Tracks;
    v_Restricted_Type      Option_Varchar2 := i_Restricted_Type;
    v_Only_Last_Restricted Option_Varchar2 := i_Only_Last_Restricted;
    v_Charge_Percentage    Option_Number := i_Charge_Percentage;
    v_Dt_Hikvision_Id      number;
    v_Dt_Dahua_Id          number;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, --
                                        i_Device_Id  => i_Device_Id);
  
    if i_Model_Id is not null and --
       i_Model_Id.Val is null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_051;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if i_Location_Id is not null and --
       i_Location_Id.Val is null and
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_052;
    end if;
  
    if i_Use_Settings is not null and --
       i_Use_Settings.Val = 'Y' then
      v_Track_Types   := Option_Varchar2(null);
      v_Mark_Types    := Option_Varchar2(null);
      v_Emotion_Types := Option_Varchar2(null);
      v_Lang_Code     := Option_Varchar2(null);
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          v_Lang_Code is not null and v_Lang_Code.Val is null then
      Htt_Error.Raise_054;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      v_Autogen_Inputs       := null;
      v_Autogen_Outputs      := null;
      v_Restricted_Type      := null;
      v_Only_Last_Restricted := null;
      v_Ignore_Tracks        := null;
    elsif v_Restricted_Type.Val not in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
      v_Only_Last_Restricted := Option_Varchar2(null);
    end if;
  
    if v_Charge_Percentage is not null and v_Charge_Percentage.Val is null then
      v_Charge_Percentage := null;
    end if;
  
    z_Htt_Devices.Update_One(i_Company_Id           => i_Company_Id,
                             i_Device_Id            => i_Device_Id,
                             i_Name                 => i_Name,
                             i_Model_Id             => i_Model_Id,
                             i_Location_Id          => i_Location_Id,
                             i_Charge_Percentage    => v_Charge_Percentage,
                             i_Track_Types          => v_Track_Types,
                             i_Mark_Types           => v_Mark_Types,
                             i_Emotion_Types        => v_Emotion_Types,
                             i_Lang_Code            => v_Lang_Code,
                             i_Use_Settings         => i_Use_Settings,
                             i_Autogen_Inputs       => v_Autogen_Inputs,
                             i_Autogen_Outputs      => v_Autogen_Outputs,
                             i_Ignore_Tracks        => v_Ignore_Tracks,
                             i_Restricted_Type      => v_Restricted_Type,
                             i_Only_Last_Restricted => v_Only_Last_Restricted,
                             i_Last_Seen_On         => i_Last_Seen_On,
                             i_State                => i_State);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) and i_Location_Id is not null and
       i_Location_Id.Val <> r_Device.Location_Id then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype) is
    r_Device Htt_Acms_Devices%rowtype;
  begin
    if not z_Htt_Acms_Devices.Exist_Lock(i_Company_Id => i_Device.Company_Id,
                                         i_Device_Id  => i_Device.Device_Id,
                                         o_Row        => r_Device) then
      r_Device.Company_Id := i_Device.Company_Id;
      r_Device.Device_Id  := i_Device.Device_Id;
    
      -- dynamic ip solution currently disabled
      -- see hac module integration instead 
      r_Device.Dynamic_Ip := 'N';
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := Nvl(i_Device.Host, i_Device.Login);
    else
      if not Fazo.Equal(r_Device.Dynamic_Ip, i_Device.Dynamic_Ip) or --
         not Fazo.Equal(r_Device.Ip_Address, i_Device.Ip_Address) or --
         not Fazo.Equal(r_Device.Port, i_Device.Port) or --
         not Fazo.Equal(r_Device.Protocol, i_Device.Protocol) or --
         not Fazo.Equal(r_Device.Host, i_Device.Host) or --
         not Fazo.Equal(r_Device.Login, i_Device.Login) or --
         not Fazo.Equal(r_Device.Password, i_Device.Password) then
        Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                         i_Device_Id    => r_Device.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
      end if;
    end if;
  
    r_Device.Dynamic_Ip := i_Device.Dynamic_Ip;
    r_Device.Login      := i_Device.Login;
    r_Device.Password   := Nvl(i_Device.Password, r_Device.Password);
  
    if r_Device.Dynamic_Ip = 'Y' then
      r_Device.Ip_Address := i_Device.Ip_Address;
      r_Device.Port       := i_Device.Port;
      r_Device.Protocol   := i_Device.Protocol;
      r_Device.Host       := null;
    else
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := i_Device.Host;
    end if;
  
    z_Htt_Acms_Devices.Save_Row(r_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
    v_Filial_Ids Array_Number;
    r_Device     Htt_Devices%rowtype;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  
    z_Htt_Device_Admins.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    if r_Device.Location_Id is not null then
      v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Device.Company_Id,
                                              i_Location_Id => r_Device.Location_Id,
                                              i_Person_Id   => i_Person_Id);
    
      for i in 1 .. v_Filial_Ids.Count
      loop
        Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => v_Filial_Ids(i),
                                     i_Location_Id => r_Device.Location_Id,
                                     i_Person_Id   => i_Person_Id,
                                     i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
      end loop;
    end if;
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Device_Admins.Delete_One(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Insert_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Device_Update(i_Company_Id => i_Company_Id,
                  i_Device_Id  => i_Device_Id,
                  i_State      => Option_Varchar2('P'));
  
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    for r in (select q.Filial_Id, q.Track_Id
                from Htt_Tracks q
               where q.Company_Id = i_Company_Id
                 and q.Device_Id = i_Device_Id)
    loop
      Track_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => r.Filial_Id,
                   i_Track_Id   => r.Track_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    Htt_Core.Acms_Command_Add(i_Company_Id   => i_Company_Id,
                              i_Device_Id    => i_Device_Id,
                              i_Command_Kind => i_Command_Kind,
                              i_Person_Id    => i_Person_Id,
                              i_Data         => i_Data);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_complete: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Complited),
                                   i_State_Changed_On => Option_Date(sysdate));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_fail: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Failed),
                                   i_State_Changed_On => Option_Date(sysdate),
                                   i_Error_Msg        => Option_Varchar2(i_Error_Msg));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1);
  begin
    if i_Value not in ('Y', 'N') then
      v_Value := 'N';
    else
      v_Value := i_Value;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks,
                           i_Value      => Nvl(v_Value, 'N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_079;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Pin_Autogenerate,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Photo_As_Face_Rec,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Invalid_Auto_Checkout_Enable
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number
  ) return boolean is
    r_Setting Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  begin
    r_Setting := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_User_Id    => i_User_Id);
  
    return r_Setting.Auto_Output_Enabled = 'Y' and r_Setting.Disable_Auto_Checkout = 'Y';
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Notify_Timesheet
  (
    i_Track       Htt_Tracks%rowtype,
    i_Notify_Type varchar2
  ) is
    r_Staff         Href_Staffs%rowtype;
    r_Timesheet     Htt_Timesheets%rowtype;
    v_Manager_Id    number;
    v_Staff_Id      number;
    v_Timesheet_Ids Array_Number;
    result          Hashmap := Hashmap();
  begin
    if not (i_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
        i_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and i_Track.Is_Valid = 'N' and
        Invalid_Auto_Checkout_Enable(i_Company_Id => i_Track.Company_Id,
                                         i_Filial_Id  => i_Track.Filial_Id,
                                         i_User_Id    => i_Track.Person_Id)) then
      return;
    end if;
  
    v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Track.Company_Id,
                                                 i_Filial_Id   => i_Track.Filial_Id,
                                                 i_Employee_Id => i_Track.Person_Id,
                                                 i_Date        => i_Track.Track_Datetime);
  
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Staff_Id   => v_Staff_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => i_Track.Company_Id,
                                             i_Filial_Id  => i_Track.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Track.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    v_Timesheet_Ids := Htt_Core.Find_Track_Timesheets(i_Company_Id     => i_Track.Company_Id,
                                                      i_Filial_Id      => i_Track.Filial_Id,
                                                      i_Staff_Id       => v_Staff_Id,
                                                      i_Track_Datetime => i_Track.Track_Datetime);
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Track.Company_Id,
                                           i_Filial_Id    => i_Track.Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if r_Timesheet.Count_Early = 'Y' and r_Timesheet.Input_Time is not null and
         r_Timesheet.Output_Time is null and i_Track.Track_Datetime between r_Timesheet.Begin_Time and
         r_Timesheet.End_Time then
        Result.Put('notify_type', i_Notify_Type);
        Result.Put('timesheet_id', r_Timesheet.Timesheet_Id);
        Result.Put('timesheet_date', r_Timesheet.Timesheet_Date);
        Result.Put('employee_name',
                   z_Mr_Natural_Persons.Take(i_Company_Id => i_Track.Company_Id, i_Person_Id => i_Track.Person_Id).Name);
        Result.Put('begin_time', to_char(r_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('end_time', to_char(r_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('input_time', to_char(r_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('output_time', to_char(i_Track.Track_Datetime, Href_Pref.c_Time_Format_Minute));
        Result.Put('early_time',
                   Trunc(Htt_Util.Time_Diff(r_Timesheet.End_Time, i_Track.Track_Datetime) / 60));
      
        Mt_Fcm.Send(i_Company_Id => r_Timesheet.Company_Id, --
                    i_User_Id    => v_Manager_Id,
                    i_Data       => result);
      
        return;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Datetime
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Time timestamp with time zone
  ) return date is
    v_Timezone Md_Timezones.Timezone_Code%type;
  begin
    v_Timezone := z_Md_Users.Take(i_Company_Id => i_Company_Id, i_User_Id => i_Person_Id).Timezone_Code;
  
    if v_Timezone is null then
      v_Timezone := Htt_Util.Load_Timezone(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    end if;
  
    return Htt_Util.Timestamp_To_Date(i_Timestamp => i_Track_Time, i_Timezone => v_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add(i_Track Htt_Tracks%rowtype) is
    r_Track     Htt_Tracks%rowtype := i_Track;
    r_Location  Htt_Locations%rowtype;
    r_Device    Htt_Devices%rowtype;
    r_Timesheet Htt_Timesheets%rowtype;
    --------------------------------------------------
    Function Track_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      if r_Track.Device_Id is not null then
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Device_Id = r_Track.Device_Id
           and q.Original_Type = r_Track.Original_Type;
      else
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Original_Type = r_Track.Original_Type;
      end if;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if r_Track.Location_Id is not null then
      r_Location := z_Htt_Locations.Load(i_Company_Id  => r_Track.Company_Id,
                                         i_Location_Id => r_Track.Location_Id);
    
      if r_Track.Latlng is null then
        r_Track.Latlng   := r_Location.Latlng;
        r_Track.Accuracy := r_Location.Accuracy;
      end if;
    end if;
  
    if r_Track.Device_Id is not null then
      r_Device := z_Htt_Devices.Load(i_Company_Id => r_Track.Company_Id,
                                     i_Device_Id  => r_Track.Device_Id);
    
      r_Track.Track_Type := Nvl(r_Device.Restricted_Type, r_Track.Track_Type);
    end if;
  
    if r_Device.Ignore_Tracks = 'Y' then
      return;
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date    := Trunc(r_Track.Track_Datetime);
    r_Track.Is_Valid      := Nvl(r_Track.Is_Valid, 'Y');
    r_Track.Status        := Htt_Pref.c_Track_Status_Draft;
    r_Track.Original_Type := r_Track.Track_Type;
    r_Track.Trans_Input   := Nvl(r_Device.Autogen_Inputs, 'N');
    r_Track.Trans_Output  := Nvl(r_Device.Autogen_Outputs, 'N');
    r_Track.Trans_Check := case
                             when r_Device.Only_Last_Restricted = 'Y' and
                                  r_Device.Restricted_Type in
                                  (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
                              'Y'
                             else
                              'N'
                           end;
  
    if Htt_Util.Schedule_Trim_Tracks(i_Company_Id => r_Track.Company_Id,
                                     i_Filial_Id  => r_Track.Filial_Id) = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => r_Track.Company_Id,
                                        i_Filial_Id      => r_Track.Filial_Id,
                                        i_Staff_Id       => Href_Util.Get_Primary_Staff_Id(i_Company_Id   => r_Track.Company_Id,
                                                                                           i_Filial_Id    => r_Track.Filial_Id,
                                                                                           i_Employee_Id  => r_Track.Person_Id,
                                                                                           i_Period_Begin => r_Track.Track_Date,
                                                                                           i_Period_End   => r_Track.Track_Date),
                                        i_Timesheet_Date => r_Track.Track_Date);
    
      if r_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Timesheet.Company_Id is null then
        return;
      end if;
    
      if r_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        r_Track.Track_Datetime := Greatest(Least(r_Track.Track_Datetime, r_Timesheet.End_Time),
                                           r_Timesheet.Begin_Time);
        r_Track.Track_Date     := Trunc(r_Track.Track_Date);
        r_Track.Track_Time     := cast(r_Track.Track_Datetime as timestamp with local time zone);
      end if;
    end if;
  
    if r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
       Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                    i_Filial_Id  => r_Track.Filial_Id,
                                    i_User_Id    => r_Track.Person_Id) then
      r_Track.Is_Valid := 'N';
    end if;
  
    if Track_Exists then
      return;
    end if;
  
    -- check if prohibited location
    if r_Track.Is_Valid = 'Y' and r_Track.Latlng is not null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) and
       Htt_Util.Is_Prohibited(i_Company_Id => r_Track.Company_Id,
                              i_Filial_Id  => r_Track.Filial_Id,
                              i_Person_Id  => r_Track.Person_Id,
                              i_Latlng     => r_Track.Latlng) or r_Location.Prohibited = 'Y' then
      r_Track.Is_Valid := 'N';
    end if;
  
    if true or Htt_Util.Is_Track_Accepted_Period(i_Company_Id  => r_Track.Company_Id,
                                                 i_Filial_Id   => r_Track.Filial_Id,
                                                 i_Employee_Id => r_Track.Person_Id,
                                                 i_Period      => r_Track.Track_Date) = 'Y' then
      z_Htt_Tracks.Insert_Row(r_Track);
    
      if Md_Pref.c_Migr_Company_Id != i_Track.Company_Id then
        if r_Track.Is_Valid = 'Y' then
          Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                             i_Filial_Id      => r_Track.Filial_Id,
                             i_Track_Id       => r_Track.Track_Id,
                             i_Employee_Id    => r_Track.Person_Id,
                             i_Track_Datetime => r_Track.Track_Datetime,
                             i_Track_Type     => r_Track.Track_Type,
                             i_Trans_Input    => r_Track.Trans_Input,
                             i_Trans_Output   => r_Track.Trans_Output,
                             i_Trans_Check    => r_Track.Trans_Check);
        elsif r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
              Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                           i_Filial_Id  => r_Track.Filial_Id,
                                           i_User_Id    => r_Track.Person_Id) then
          Notify_Timesheet(i_Track => r_Track, i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
        end if;
      
      end if;
    else
      Htt_Core.Trash_Track_Insert(r_Track);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'Y' then
      Htt_Error.Raise_055(i_Track_Id);
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date := Trunc(r_Track.Track_Datetime);
  
    z_Htt_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                            i_Filial_Id      => i_Filial_Id,
                            i_Track_Id       => i_Track_Id,
                            i_Track_Datetime => Option_Date(r_Track.Track_Datetime),
                            i_Track_Date     => Option_Date(r_Track.Track_Date),
                            i_Is_Valid       => Option_Varchar2('Y'));
  
    Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                       i_Filial_Id      => r_Track.Filial_Id,
                       i_Track_Id       => r_Track.Track_Id,
                       i_Employee_Id    => r_Track.Person_Id,
                       i_Track_Datetime => r_Track.Track_Datetime,
                       i_Track_Type     => r_Track.Track_Type,
                       i_Trans_Input    => r_Track.Trans_Input,
                       i_Trans_Output   => r_Track.Trans_Output,
                       i_Trans_Check    => r_Track.Trans_Check);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'N' then
      Htt_Error.Raise_056(i_Track_Id);
    end if;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Is_Valid   => Option_Varchar2('N'),
                            i_Track_Type => Option_Varchar2(r_Track.Original_Type));
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  
    z_Htt_Tracks.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt) is
    v_Track_Id number;
    v_Exists   varchar2(1) := 'Y';
  begin
    v_Track_Id := Htt_Util.Gps_Track_Id(i_Company_Id => i_Track.Company_Id,
                                        i_Filial_Id  => i_Track.Filial_Id,
                                        i_Person_Id  => i_Track.Person_Id,
                                        i_Track_Date => i_Track.Track_Date);
  
    if z_Htt_Gps_Track_Batches.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                          i_Filial_Id  => i_Track.Filial_Id,
                                          i_Track_Id   => v_Track_Id,
                                          i_Batch_Id   => i_Track.Batch_Id) then
      -- if batch saved then no need to resave it
      return;
    end if;
  
    if v_Track_Id is null then
      v_Track_Id := Htt_Next.Gps_Track_Id;
      v_Exists   := 'N';
    end if;
  
    if v_Exists = 'Y' then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = v_Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, i_Track.Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, v_Track_Id, i_Track.Data);
    end if;
  
    -- gps track batches
    z_Htt_Gps_Track_Batches.Insert_One(i_Company_Id => i_Track.Company_Id,
                                       i_Filial_Id  => i_Track.Filial_Id,
                                       i_Track_Id   => v_Track_Id,
                                       i_Batch_Id   => i_Track.Batch_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt) is
    v_Data blob;
    v_Text varchar2(4000);
  
    --------------------------------------------------
    Procedure Text_Append(i_Text varchar2) is
    begin
      v_Text := v_Text || i_Text || Htt_Pref.c_Gps_Track_Column_Delimiter;
    end;
  begin
    Text_Append(to_char(i_Track.Track_Time, 'hh24:mi:ss'));
    Text_Append(i_Track.Lat);
    Text_Append(i_Track.Lng);
    Text_Append(i_Track.Accuracy);
    Text_Append(i_Track.Provider);
  
    Dbms_Lob.Createtemporary(v_Data, false);
    Dbms_Lob.Open(v_Data, Dbms_Lob.Lob_Readwrite);
    Dbms_Lob.Writeappend(v_Data,
                         Length(v_Text) + 1,
                         Utl_Raw.Cast_To_Raw(v_Text || Htt_Pref.c_Gps_Track_Row_Delimiter));
  
    if z_Htt_Gps_Tracks.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                   i_Filial_Id  => i_Track.Filial_Id,
                                   i_Track_Id   => i_Track.Track_Id) then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = i_Track.Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, v_Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, i_Track.Track_Id, v_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    r_Time_Kind    Htt_Time_Kinds%rowtype;
  
    v_Pcode  Htt_Request_Kinds.Pcode%type;
    v_Date   date := sysdate;
    v_Exists boolean := false;
  begin
    -- TODO add restriction on time_kind_id change
    -- make time_kind_id unchangeable
    -- or allow change to time kind with same plan_load
    -- maybe add timsheets regen after request_kind edit
    -- TODO: add calendar of production days
  
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Request_Kind.Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind.Request_Kind_Id,
                                      o_Row             => r_Request_Kind) then
      if r_Request_Kind.Pcode is not null then
        v_Pcode := r_Request_Kind.Pcode;
      
        if r_Request_Kind.Time_Kind_Id <> i_Request_Kind.Time_Kind_Id then
          Htt_Error.Raise_057(z_Htt_Time_Kinds.Load(i_Company_Id => r_Request_Kind.Company_Id, --
                              i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Name);
        end if;
      end if;
    
      v_Exists := true;
    end if;
  
    r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Request_Kind.Company_Id,
                                         i_Time_Kind_Id => i_Request_Kind.Time_Kind_Id);
  
    if r_Time_Kind.Requestable = 'N' then
      Htt_Error.Raise_058(r_Time_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Init(p_Row                      => r_Request_Kind,
                             i_Company_Id               => i_Request_Kind.Company_Id,
                             i_Request_Kind_Id          => i_Request_Kind.Request_Kind_Id,
                             i_Name                     => i_Request_Kind.Name,
                             i_Time_Kind_Id             => i_Request_Kind.Time_Kind_Id,
                             i_Annually_Limited         => i_Request_Kind.Annually_Limited,
                             i_Day_Count_Type           => i_Request_Kind.Day_Count_Type,
                             i_User_Permitted           => i_Request_Kind.User_Permitted,
                             i_Allow_Unused_Time        => i_Request_Kind.Allow_Unused_Time,
                             i_Request_Restriction_Days => i_Request_Kind.Request_Restriction_Days,
                             i_State                    => i_Request_Kind.State,
                             i_Pcode                    => v_Pcode);
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request_Kind.Annual_Day_Limit := i_Request_Kind.Annual_Day_Limit;
      r_Request_Kind.Carryover_Policy := i_Request_Kind.Carryover_Policy;
    
      if r_Request_Kind.Carryover_Policy <> Htt_Pref.c_Carryover_Policy_Zero then
        if r_Request_Kind.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
          r_Request_Kind.Carryover_Cap_Days := i_Request_Kind.Carryover_Cap_Days;
        end if;
      
        r_Request_Kind.Carryover_Expires_Days := i_Request_Kind.Carryover_Expires_Days;
      end if;
    end if;
  
    z_Htt_Request_Kinds.Save_Row(r_Request_Kind);
  
    -- fix request kind accruals
    if v_Exists then
      for r in (select *
                  from Htt_Staff_Request_Kinds q
                 where q.Company_Id = i_Request_Kind.Company_Id
                   and q.Request_Kind_Id = i_Request_Kind.Request_Kind_Id)
      loop
        Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => r.Company_Id,
                                               i_Filial_Id       => r.Filial_Id,
                                               i_Staff_Id        => r.Staff_Id,
                                               i_Request_Kind_Id => r.Request_Kind_Id,
                                               i_Period          => v_Date);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind_Id,
                                      o_Row             => r_Request_Kind) and
       r_Request_Kind.Pcode is not null then
      Htt_Error.Raise_059(r_Request_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                   i_Request_Kind_Id => i_Request_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Insert_Try(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Helper_Save
  (
    i_Request     Htt_Requests%rowtype,
    i_Staff_Id    number,
    i_Only_Insert boolean := false
  ) is
    v_Begin date;
    v_End   date;
  begin
    v_Begin := Trunc(i_Request.Begin_Time);
    v_End   := Trunc(i_Request.End_Time);
  
    if not i_Only_Insert then
      delete Htt_Request_Helpers q
       where q.Company_Id = i_Request.Company_Id
         and q.Filial_Id = i_Request.Filial_Id
         and q.Request_Id = i_Request.Request_Id;
    end if;
  
    while v_Begin <= v_End
    loop
      z_Htt_Request_Helpers.Insert_One(i_Company_Id    => i_Request.Company_Id,
                                       i_Filial_Id     => i_Request.Filial_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Interval_Date => v_Begin,
                                       i_Request_Id    => i_Request.Request_Id);
      v_Begin := v_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Save(i_Request Htt_Requests%rowtype) is
    r_Request      Htt_Requests%rowtype;
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Exists       boolean;
    v_Diff_Days    number;
    v_Plan_Load    varchar(1);
    v_Min_Length   number;
  begin
    if z_Htt_Requests.Exist_Lock(i_Company_Id => i_Request.Company_Id,
                                 i_Filial_Id  => i_Request.Filial_Id,
                                 i_Request_Id => i_Request.Request_Id,
                                 o_Row        => r_Request) then
      if r_Request.Status <> Htt_Pref.c_Request_Status_New then
        Htt_Error.Raise_060(i_Request_Status   => r_Request.Status,
                            i_Request_Kind_New => Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New));
      end if;
    
      if r_Request.Staff_Id <> i_Request.Staff_Id then
        Htt_Error.Raise_061(Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                 i_Filial_Id  => r_Request.Filial_Id,
                                                 i_Staff_Id   => r_Request.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Request.Company_Id := i_Request.Company_Id;
      r_Request.Filial_Id  := i_Request.Filial_Id;
      r_Request.Request_Id := i_Request.Request_Id;
      r_Request.Staff_Id   := i_Request.Staff_Id;
      r_Request.Status     := Htt_Pref.c_Request_Status_New;
      r_Request.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Request_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit);
    
      if v_Min_Length > Length(i_Request.Note) then
        Htt_Error.Raise_110(v_Min_Length);
      end if;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Request.Company_Id,
                                               i_Request_Kind_Id => i_Request.Request_Kind_Id);
  
    v_Plan_Load := z_Htt_Time_Kinds.Load(i_Company_Id => i_Request.Company_Id, i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Plan_Load;
  
    if v_Plan_Load = Htt_Pref.c_Plan_Load_Extra then
      Htt_Error.Raise_081;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if v_Plan_Load = Htt_Pref.c_Plan_Load_Full and
         i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        Htt_Error.Raise_062(Array_Varchar2(Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Full_Day),
                                           Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Multiple_Days)));
      end if;
    end if;
  
    v_Diff_Days := i_Request.End_Time - i_Request.Begin_Time;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if not (i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and v_Diff_Days > 0 and
          v_Diff_Days < 1 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day and v_Diff_Days = 0 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Multiple_Days and v_Diff_Days >= 1) then
        Htt_Error.Raise_063(i_Request_Type      => i_Request.Request_Type,
                            i_Request_Type_Name => Htt_Util.t_Request_Type(i_Request.Request_Type));
      end if;
    end if;
  
    r_Request.Request_Kind_Id := i_Request.Request_Kind_Id;
    r_Request.Request_Type    := i_Request.Request_Type;
    r_Request.Begin_Time      := i_Request.Begin_Time;
    r_Request.End_Time        := i_Request.End_Time;
    r_Request.Note            := i_Request.Note;
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request.Accrual_Kind := Nvl(i_Request.Accrual_Kind, Htt_Pref.c_Accrual_Kind_Plan);
    else
      r_Request.Accrual_Kind := null;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if r_Request_Kind.Request_Restriction_Days is not null then
        if Trunc(r_Request.Begin_Time) - Trunc(r_Request.Created_On) <
           r_Request_Kind.Request_Restriction_Days then
          Htt_Error.Raise_064(i_Restriction_Days => r_Request_Kind.Request_Restriction_Days,
                              i_Request_Begin    => Trunc(r_Request.Begin_Time),
                              i_Created_On       => Trunc(r_Request.Created_On));
        end if;
      end if;
    end if;
  
    Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                             i_Filial_Id    => r_Request.Filial_Id,
                                             i_Request_Id   => r_Request.Request_Id,
                                             i_Staff_Id     => r_Request.Staff_Id,
                                             i_Begin_Time   => r_Request.Begin_Time,
                                             i_End_Time     => r_Request.End_Time,
                                             i_Request_Type => r_Request.Request_Type);
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    if v_Exists then
      z_Htt_Requests.Update_Row(r_Request);
      Request_Helper_Save(r_Request, i_Staff_Id => r_Request.Staff_Id);
    else
      r_Request.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Requests,
                                               i_Id    => r_Request.Request_Id);
    
      z_Htt_Requests.Insert_Row(r_Request);
    
      Request_Helper_Save(r_Request, --
                          i_Staff_Id    => r_Request.Staff_Id,
                          i_Only_Insert => true);
    
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
  begin
    Htt_Core.Gen_Timesheet_Requests(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet_Plan
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
  begin
    Htt_Core.Change_Timesheet_Plans(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status = Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_065(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Completed),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Denied)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_New),
                              i_Approved_By  => Option_Number(null),
                              i_Completed_By => Option_Number(null));
  
    Fix_Timesheet(i_Company_Id => i_Company_Id,
                  i_Filial_Id  => i_Filial_Id,
                  i_Request_Id => i_Request_Id);
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  ) is
    r_Request          Htt_Requests%rowtype;
    v_Request_Settings Hes_Pref.Staff_Request_Manager_Approval_Rt := Hes_Util.Staff_Request_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                      i_Filial_Id  => i_Filial_Id,
                                                                                                                      i_User_Id    => i_User_Id);
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_066(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Approved),
                              i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Request_Settings.Request_Settings = 'Y' then
      Request_Complete(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Request_Id => i_Request_Id);
    else
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_067(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Completed),
                              i_Completed_By => Option_Number(Md_Env.User_Id));
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Fix_Timesheet(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Request_Id => i_Request_Id);
    end if;
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_068(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Denied),
                              i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_069(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    z_Htt_Requests.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt) is
    r_Change           Htt_Plan_Changes%rowtype;
    r_Change_Day       Htt_Change_Days%rowtype;
    v_Change_Dates     Array_Date := Array_Date();
    v_Change_Day       Htt_Pref.Change_Day_Rt;
    v_Swapped_Date     date;
    v_Exists           boolean;
    v_Min_Length       number;
    v_Employee_Id      number;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
  
    -------------------------------------------------- 
    Procedure Prepare_Change_Day(p_Change_Date in out nocopy Htt_Change_Days%rowtype) is
    begin
      if p_Change_Date.Day_Kind in (Htt_Pref.c_Day_Kind_Rest,
                                    Htt_Pref.c_Day_Kind_Holiday,
                                    Htt_Pref.c_Day_Kind_Additional_Rest) or
         p_Change_Date.Day_Kind is null then
        p_Change_Date.Begin_Time       := null;
        p_Change_Date.End_Time         := null;
        p_Change_Date.Break_Enabled    := null;
        p_Change_Date.Break_Begin_Time := null;
        p_Change_Date.Break_End_Time   := null;
        p_Change_Date.Plan_Time        := null;
      
        if p_Change_Date.Day_Kind is not null then
          p_Change_Date.Plan_Time := 0;
        end if;
      else
        p_Change_Date.Break_Enabled := Nvl(p_Change_Date.Break_Enabled, 'N');
      
        if p_Change_Date.End_Time <= p_Change_Date.Begin_Time then
          p_Change_Date.End_Time := p_Change_Date.End_Time + 1;
        end if;
      
        if p_Change_Date.Break_Enabled = 'Y' then
          if p_Change_Date.Break_Begin_Time <= p_Change_Date.Begin_Time then
            p_Change_Date.Break_Begin_Time := p_Change_Date.Break_Begin_Time + 1;
          end if;
        
          if p_Change_Date.Break_End_Time <= p_Change_Date.Break_Begin_Time then
            p_Change_Date.Break_End_Time := p_Change_Date.Break_End_Time + 1;
          end if;
        else
          p_Change_Date.Break_Begin_Time := null;
          p_Change_Date.Break_End_Time   := null;
        end if;
      end if;
    end;
  begin
    if i_Change.Change_Days.Count = 0 then
      Htt_Error.Raise_070;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit);
    
      if v_Min_Length > Length(i_Change.Note) then
        Htt_Error.Raise_109(v_Min_Length);
      end if;
    end if;
  
    if z_Htt_Plan_Changes.Exist_Lock(i_Company_Id => i_Change.Company_Id,
                                     i_Filial_Id  => i_Change.Filial_Id,
                                     i_Change_Id  => i_Change.Change_Id,
                                     o_Row        => r_Change) then
      if r_Change.Status <> Htt_Pref.c_Change_Status_New then
        Htt_Error.Raise_071(i_Change_Status   => r_Change.Status,
                            i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
      end if;
    
      if r_Change.Staff_Id <> i_Change.Staff_Id then
        Htt_Error.Raise_072(Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                 i_Filial_Id  => r_Change.Filial_Id,
                                                 i_Staff_Id   => r_Change.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Change.Company_Id := i_Change.Company_Id;
      r_Change.Filial_Id  := i_Change.Filial_Id;
      r_Change.Change_Id  := i_Change.Change_Id;
      r_Change.Staff_Id   := i_Change.Staff_Id;
      r_Change.Status     := Htt_Pref.c_Change_Status_New;
      r_Change.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if i_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
      if mod(i_Change.Change_Days.Count, 2) = 1 then
        Htt_Error.Raise_073;
      end if;
    end if;
  
    r_Change.Change_Kind := i_Change.Change_Kind;
    r_Change.Note        := i_Change.Note;
  
    if v_Exists then
      z_Htt_Plan_Changes.Update_Row(r_Change);
    else
      z_Htt_Plan_Changes.Insert_Row(r_Change);
    end if;
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Change.Company_Id,
                                               i_Filial_Id  => i_Change.Filial_Id,
                                               i_Staff_Id   => i_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Change.Company_Id,
                                                                   i_Filial_Id  => i_Change.Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    v_Change_Dates.Extend(i_Change.Change_Days.Count);
  
    for i in 1 .. i_Change.Change_Days.Count
    loop
      v_Change_Day := i_Change.Change_Days(i);
      v_Change_Dates(i) := v_Change_Day.Change_Date;
    
      v_Swapped_Date := null;
      if r_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        v_Swapped_Date := v_Change_Day.Swapped_Date;
      end if;
    
      if v_Change_Day_Limit.Change_With_Restriction_Days = 'Y' then
        if Trunc(Least(v_Change_Dates(i), Nvl(v_Swapped_Date, v_Change_Dates(i)))) -
           Trunc(r_Change.Created_On) < v_Change_Day_Limit.Change_Restriction_Days then
          Htt_Error.Raise_112(i_Restriction_Days => v_Change_Day_Limit.Change_Restriction_Days,
                              i_Change_Day       => Trunc(Least(v_Change_Dates(i),
                                                                Nvl(v_Swapped_Date, v_Change_Dates(i)))),
                              i_Created_On       => Trunc(r_Change.Created_On));
        end if;
      end if;
    
      r_Change_Day.Company_Id       := r_Change.Company_Id;
      r_Change_Day.Filial_Id        := r_Change.Filial_Id;
      r_Change_Day.Change_Id        := r_Change.Change_Id;
      r_Change_Day.Change_Date      := v_Change_Day.Change_Date;
      r_Change_Day.Swapped_Date     := v_Swapped_Date;
      r_Change_Day.Staff_Id         := r_Change.Staff_Id;
      r_Change_Day.Day_Kind         := v_Change_Day.Day_Kind;
      r_Change_Day.Begin_Time       := v_Change_Day.Begin_Time;
      r_Change_Day.End_Time         := v_Change_Day.End_Time;
      r_Change_Day.Break_Enabled    := v_Change_Day.Break_Enabled;
      r_Change_Day.Break_Begin_Time := v_Change_Day.Break_Begin_Time;
      r_Change_Day.Break_End_Time   := v_Change_Day.Break_End_Time;
      r_Change_Day.Plan_Time        := v_Change_Day.Plan_Time;
    
      Prepare_Change_Day(r_Change_Day);
    
      r_Change_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Change_Day.Day_Kind,
                                                        i_Begin_Time       => r_Change_Day.Begin_Time,
                                                        i_End_Time         => r_Change_Day.End_Time,
                                                        i_Break_Begin_Time => r_Change_Day.Break_Begin_Time,
                                                        i_Break_End_Time   => r_Change_Day.Break_End_Time);
      -- full time in seconds    
      r_Change_Day.Full_Time := r_Change_Day.Full_Time * 60;
    
      z_Htt_Change_Days.Save_Row(r_Change_Day);
    end loop;
  
    if v_Exists then
      delete from Htt_Change_Days Cd
       where Cd.Company_Id = r_Change.Company_Id
         and Cd.Filial_Id = r_Change.Filial_Id
         and Cd.Change_Id = r_Change.Change_Id
         and Cd.Change_Date not member of v_Change_Dates;
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    if not v_Exists then
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_074(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    z_Htt_Plan_Changes.Delete_One(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_075(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Completed),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Denied)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_New),
                                  i_Approved_By  => Option_Number(null),
                                  i_Completed_By => Option_Number(null));
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Change_Id  => i_Change_Id);
    end if;
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  ) is
    r_Change          Htt_Plan_Changes%rowtype;
    v_Change_Settings Hes_Pref.Staff_Change_Manager_Approval_Rt := Hes_Util.Staff_Change_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                   i_Filial_Id  => i_Filial_Id,
                                                                                                                   i_User_Id    => i_User_Id);
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_076(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Approved),
                                  i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Change_Settings.Change_Settings = 'Y' then
      Change_Complete(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Change_Id  => i_Change_Id);
    else
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_077(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Completed),
                                  i_Completed_By => Option_Number(Md_Env.User_Id));
  
    Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Change_Id  => i_Change_Id);
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_078(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Denied),
                                  i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
  begin
    Htt_Core.Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  i_Dates       => i_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Total_Distance number;
  begin
    for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                 from Htt_Gps_Tracks q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Calculated = 'N')
    loop
      v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Person_Id  => Gt.Person_Id,
                                                           i_Track_Date => Gt.Track_Date);
    
      z_Htt_Gps_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Track_Id       => Gt.Track_Id,
                                  i_Total_Distance => Option_Number(v_Total_Distance),
                                  i_Calculated     => Option_Varchar2('Y'));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt) is
    r_Registry      Htt_Schedule_Registries%rowtype;
    r_Day           Htt_Unit_Schedule_Days%rowtype;
    v_Unit          Htt_Pref.Registry_Unit_Rt;
    v_Unit_Day      Htt_Pref.Schedule_Day_Rt;
    v_Used_Unit_Ids Array_Number := Array_Number();
  
    v_Company_Id number := i_Registry.Company_Id;
    v_Filial_Id  number := i_Registry.Filial_Id;
  
    v_Staff_Name varchar2(500 char);
    v_Robot_Name varchar2(500 char);
  
    --------------------------------------------------
    Procedure Save_Registry is
      v_Exists boolean;
    begin
      if z_Htt_Schedule_Registries.Exist_Lock(i_Company_Id  => i_Registry.Company_Id,
                                              i_Filial_Id   => i_Registry.Filial_Id,
                                              i_Registry_Id => i_Registry.Registry_Id,
                                              o_Row         => r_Registry) then
        if r_Registry.Posted = 'Y' then
          Htt_Error.Raise_083;
        end if;
      
        if r_Registry.Registry_Kind <> i_Registry.Registry_Kind then
          Htt_Error.Raise_084;
        end if;
      
        v_Exists := true;
      else
        r_Registry.Company_Id    := i_Registry.Company_Id;
        r_Registry.Filial_Id     := i_Registry.Filial_Id;
        r_Registry.Registry_Id   := i_Registry.Registry_Id;
        r_Registry.Registry_Kind := i_Registry.Registry_Kind;
        r_Registry.Schedule_Kind := i_Registry.Schedule_Kind;
      
        v_Exists := false;
      end if;
    
      r_Registry.Registry_Date   := i_Registry.Registry_Date;
      r_Registry.Registry_Number := i_Registry.Registry_Number;
      r_Registry.Month           := i_Registry.Month;
      r_Registry.Division_Id     := i_Registry.Division_Id;
      r_Registry.Note            := i_Registry.Note;
      r_Registry.Posted          := 'N';
    
      r_Registry.Shift               := i_Registry.Shift;
      r_Registry.Input_Acceptance    := i_Registry.Input_Acceptance;
      r_Registry.Output_Acceptance   := i_Registry.Output_Acceptance;
      r_Registry.Track_Duration      := i_Registry.Track_Duration;
      r_Registry.Count_Late          := i_Registry.Count_Late;
      r_Registry.Count_Lack          := i_Registry.Count_Lack;
      r_Registry.Count_Early         := i_Registry.Count_Early;
      r_Registry.Count_Free          := i_Registry.Count_Free;
      r_Registry.Gps_Turnout_Enabled := i_Registry.Gps_Turnout_Enabled;
      r_Registry.Gps_Use_Location    := i_Registry.Gps_Use_Location;
      r_Registry.Gps_Max_Interval    := i_Registry.Gps_Max_Interval;
      r_Registry.Allowed_Late_Time   := i_Registry.Allowed_Late_Time;
      r_Registry.Allowed_Early_Time  := i_Registry.Allowed_Early_Time;
      r_Registry.Begin_Late_Time     := i_Registry.Begin_Late_Time;
      r_Registry.End_Early_Time      := i_Registry.End_Early_Time;
      -- TODO: calendar support remove
      r_Registry.Calendar_Id               := null; -- i_Registry.Calendar_Id;
      r_Registry.Take_Holidays             := 'N'; -- i_Registry.Take_Holidays;
      r_Registry.Take_Nonworking           := 'N'; -- i_Registry.Take_Nonworking;
      r_Registry.Take_Additional_Rest_Days := 'N'; -- i_Registry.Take_Additional_Rest_Days;
    
      if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        if r_Registry.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
          Htt_Error.Raise_108;
        end if;
      
        if i_Registry.Advanced_Setting = 'Y' then
          Htt_Error.Raise_117;
        end if;
      
        r_Registry.Shift             := 0;
        r_Registry.Input_Acceptance  := r_Registry.Track_Duration;
        r_Registry.Output_Acceptance := r_Registry.Track_Duration;
      
        r_Registry.Count_Late  := 'N';
        r_Registry.Count_Early := 'N';
        r_Registry.Count_Lack  := 'N';
        r_Registry.Count_Free  := 'N';
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      elsif r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
        r_Registry.Shift             := null;
        r_Registry.Input_Acceptance  := null;
        r_Registry.Output_Acceptance := null;
        r_Registry.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      end if;
    
      if r_Registry.Gps_Turnout_Enabled = 'N' then
        r_Registry.Gps_Use_Location := 'N';
        r_Registry.Gps_Max_Interval := null;
      end if;
    
      if v_Exists then
        z_Htt_Schedule_Registries.Update_Row(r_Registry);
      else
        if r_Registry.Registry_Number is null then
          r_Registry.Registry_Number := Md_Core.Gen_Number(i_Company_Id => r_Registry.Company_Id,
                                                           i_Filial_Id  => r_Registry.Filial_Id,
                                                           i_Table      => Zt.Htt_Schedule_Registries,
                                                           i_Column     => z.Registry_Number);
        end if;
      
        z_Htt_Schedule_Registries.Insert_Row(r_Registry);
      end if;
    end;
  
  begin
    -- save registry start
    Save_Registry;
  
    for i in 1 .. i_Registry.Units.Count
    loop
      v_Unit := i_Registry.Units(i);
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff and
         (v_Unit.Robot_Id is not null or v_Unit.Staff_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_086;
      end if;
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot and
         (v_Unit.Staff_Id is not null or v_Unit.Robot_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_087;
      end if;
    
      z_Htt_Registry_Units.Save_One(i_Company_Id      => i_Registry.Company_Id,
                                    i_Filial_Id       => i_Registry.Filial_Id,
                                    i_Unit_Id         => v_Unit.Unit_Id,
                                    i_Registry_Id     => i_Registry.Registry_Id,
                                    i_Staff_Id        => v_Unit.Staff_Id,
                                    i_Robot_Id        => v_Unit.Robot_Id,
                                    i_Monthly_Minutes => v_Unit.Monthly_Minutes,
                                    i_Monthly_Days    => v_Unit.Monthly_Days);
    
      -- todo: assert v_unit.unit_days must be full month
    
      for k in 1 .. v_Unit.Unit_Days.Count
      loop
        v_Unit_Day := v_Unit.Unit_Days(k);
      
        if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          v_Unit_Day.Begin_Time    := 0;
          v_Unit_Day.End_Time      := 0;
          v_Unit_Day.Break_Enabled := 'N';
        end if;
      
        -- todo: comment
        -- check month
        if Trunc(v_Unit_Day.Schedule_Date, 'mon') <> i_Registry.Month then
          if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            v_Staff_Name := z_Md_Persons.Load(i_Company_Id => v_Company_Id, i_Person_Id => z_Href_Staffs.Load( --
                            i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Staff_Id => v_Unit.Staff_Id).Employee_Id).Name;
          
            Htt_Error.Raise_085(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Staff_Name    => v_Staff_Name);
          else
            v_Robot_Name := z_Mrf_Robots.Load(i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Robot_Id => v_Unit.Robot_Id).Name;
            Htt_Error.Raise_099(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Robot_Name    => v_Robot_Name);
          end if;
        end if;
      
        r_Day := null;
      
        r_Day.Company_Id    := i_Registry.Company_Id;
        r_Day.Filial_Id     := i_Registry.Filial_Id;
        r_Day.Unit_Id       := v_Unit.Unit_Id;
        r_Day.Schedule_Date := v_Unit_Day.Schedule_Date;
        r_Day.Day_Kind      := v_Unit_Day.Day_Kind;
      
        if v_Unit_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
          r_Day.Begin_Time := r_Day.Schedule_Date +
                              Numtodsinterval(v_Unit_Day.Begin_Time, 'minute');
          r_Day.End_Time   := r_Day.Schedule_Date + --
                              Numtodsinterval(v_Unit_Day.End_Time, 'minute');
        
          if r_Day.End_Time <= r_Day.Begin_Time then
            r_Day.End_Time := r_Day.End_Time + 1;
          end if;
        
          r_Day.Break_Enabled := v_Unit_Day.Break_Enabled;
        
          if v_Unit_Day.Break_Enabled = 'Y' then
            r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_Begin_Time, 'minute');
            r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_End_Time, 'minute');
          
            if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
              r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
            end if;
          
            if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
              r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
            end if;
          end if;
        
          r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                     i_Begin_Time       => r_Day.Begin_Time,
                                                     i_End_Time         => r_Day.End_Time,
                                                     i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                     i_Break_End_Time   => r_Day.Break_End_Time);
        
          r_Day.Plan_Time := v_Unit_Day.Plan_Time;
        else
          r_Day.Full_Time := 0;
          r_Day.Plan_Time := 0;
        end if;
      
        r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Registry.Shift, 'minute');
        r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
        r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                  Numtodsinterval(r_Registry.Input_Acceptance, 'minute');
        r_Day.Output_Border    := r_Day.Shift_End_Time +
                                  Numtodsinterval(r_Registry.Output_Acceptance, 'minute');
      
        z_Htt_Unit_Schedule_Days.Save_Row(r_Day);
      end loop;
    
      Fazo.Push(v_Used_Unit_Ids, v_Unit.Unit_Id);
    end loop;
  
    -- delete unnecessary rows
    delete Htt_Registry_Units p
     where p.Company_Id = i_Registry.Company_Id
       and p.Filial_Id = i_Registry.Filial_Id
       and p.Registry_Id = i_Registry.Registry_Id
       and p.Unit_Id not member of v_Used_Unit_Ids;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_088;
    end if;
  
    z_Htt_Schedule_Registries.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Registry_Id => i_Registry_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
    -------------------------------------------------- 
    Procedure Check_Same_Date
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Registry_Id number
    ) is
      v_Staff_Id number;
      v_Robot_Id number;
    begin
      -- todo: optimize query
      select q.Staff_Id, q.Robot_Id
        into v_Staff_Id, v_Robot_Id
        from Htt_Registry_Units q
        join Htt_Schedule_Registries d
          on d.Company_Id = q.Company_Id
         and d.Filial_Id = q.Filial_Id
         and d.Registry_Id = q.Registry_Id
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id <> i_Registry_Id
         and d.Posted = 'Y'
         and exists (select 1
                from Htt_Registry_Units r
                join Htt_Schedule_Registries s
                  on s.Company_Id = r.Company_Id
                 and s.Filial_Id = r.Filial_Id
                 and s.Registry_Id = r.Registry_Id
               where r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and s.Month = d.Month
                 and (r.Staff_Id = q.Staff_Id or r.Robot_Id = q.Robot_Id)
                 and r.Registry_Id = i_Registry_Id)
         and Rownum = 1;
    
      if v_Staff_Id is not null then
        Htt_Error.Raise_096(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => v_Staff_Id));
      end if;
      if v_Robot_Id is not null then
        Htt_Error.Raise_097(z_Mrf_Robots.Take( --
                            i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    exception
      when No_Data_Found then
        null;
    end;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_093;
    end if;
  
    Check_Same_Date(i_Company_Id  => i_Company_Id,
                    i_Filial_Id   => i_Filial_Id,
                    i_Registry_Id => r_Registry.Registry_Id);
  
    r_Registry.Posted := 'Y';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      insert into Htt_Staff_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Staff_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Staff_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      insert into Htt_Robot_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Robot_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Robot_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Registry_Id => i_Registry_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    r_Registry.Posted := 'N';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      delete Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      delete Htt_Robot_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    -- when repost this function runs into post function
    if not i_Repost then
      Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Registry_Id => i_Registry_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype) is
    r_Server      Htt_Acms_Servers%rowtype;
    v_Secret_Code varchar2(4000);
  begin
    if not z_Htt_Acms_Servers.Exist_Lock(i_Server_Id => i_Server.Server_Id, --
                                         o_Row       => r_Server) then
    
      v_Secret_Code := i_Server.Url || Sys_Guid() || i_Server.Server_Id;
    
      r_Server.Server_Id   := i_Server.Server_Id;
      r_Server.Secret_Code := Fazo.Hash_Sha1(v_Secret_Code);
    end if;
  
    r_Server.Name     := i_Server.Name;
    r_Server.Url      := i_Server.Url;
    r_Server.Order_No := i_Server.Order_No;
  
    z_Htt_Acms_Servers.Save_Row(r_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
    v_Cnt number;
  begin
    select count(1)
      into v_Cnt
      from Htt_Company_Acms_Servers q
     where q.Server_Id = i_Server_Id;
  
    if v_Cnt > 0 then
      b.Raise_Error(t('some companies attached this server, initially you must detach companies. cnt: $1',
                      v_Cnt));
    end if;
  
    z_Htt_Acms_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Save_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                 and q.State = 'A')
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Delete_One(i_Company_Id => i_Company_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id))
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Device);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype) is
  begin
    z_Htt_Acms_Tracks.Insert_Row(i_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  ) is
    r_Hik_Track  Htt_Acms_Tracks%rowtype;
    r_Track      Htt_Tracks%rowtype;
    r_Device     Htt_Devices%rowtype;
    v_Filial_Ids Array_Number;
  begin
    r_Hik_Track := z_Htt_Acms_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Track_Id   => i_Track_Id);
  
    if r_Hik_Track.Status = Htt_Pref.c_Acms_Track_Status_Completed then
      b.Raise_Error(t('acms track was already integrate, track_id=$1', i_Track_Id));
    end if;
  
    r_Device := z_Htt_Devices.Load(i_Company_Id => r_Hik_Track.Company_Id,
                                   i_Device_Id  => r_Hik_Track.Device_Id);
  
    r_Track.Company_Id  := r_Hik_Track.Company_Id;
    r_Track.Track_Time  := Htt_Util.Convert_Timestamp(i_Date     => r_Hik_Track.Track_Datetime,
                                                      i_Timezone => Htt_Util.Load_Timezone(i_Company_Id  => r_Device.Company_Id,
                                                                                           i_Location_Id => r_Device.Location_Id));
    r_Track.Track_Type  := r_Hik_Track.Track_Type;
    r_Track.Person_Id   := r_Hik_Track.Person_Id;
    r_Track.Mark_Type   := r_Hik_Track.Mark_Type;
    r_Track.Device_Id   := r_Hik_Track.Device_Id;
    r_Track.Location_Id := r_Device.Location_Id;
    r_Track.Is_Valid    := 'Y';
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    if v_Filial_Ids.Count = 0 then
      Htt_Error.Raise_105(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Location_Id => r_Track.Location_Id,
                          i_Person_Id   => r_Track.Person_Id);
    end if;
  
    for i in 1 .. v_Filial_Ids.Count
    loop
      r_Track.Filial_Id := v_Filial_Ids(i);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    r_Hik_Track.Status     := Htt_Pref.c_Acms_Track_Status_Completed;
    r_Hik_Track.Error_Text := null;
  
    z_Htt_Acms_Tracks.Save_Row(r_Hik_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Copies tracks from other filials to given filial
  -- Tracks are copied from hiring date in given filial
  -- First migrated employees temporary employees is filled
  -- Then tracks are migrated with attention to attached locations
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  ) is
    r_Track Htt_Tracks%rowtype;
  
    --------------------------------------------------
    Procedure Fill_Migrated_Employees
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Employee_Ids Array_Number
    ) is
      v_Date  date := Trunc(sysdate);
      v_Count number := i_Employee_Ids.Count;
    begin
      insert into Htt_Migrated_Employees
        (Company_Id, Filial_Id, Employee_Id, Period_Begin)
        select i_Company_Id, p.Filial_Id, Qr.Employee_Id, Qr.Hiring_Date
          from (select q.Employee_Id, q.Hiring_Date
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and (v_Count = 0 or q.Employee_Id member of i_Employee_Ids)
                   and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                   and q.State = 'A'
                   and q.Hiring_Date <= v_Date
                   and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)) Qr
          join Md_Filials p
            on p.Company_Id = i_Company_Id
           and p.Filial_Id <> i_Filial_Id
           and p.State = 'A';
    end;
  begin
    Fill_Migrated_Employees(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Employee_Ids => i_Employee_Ids);
  
    for r in (select *
                from Htt_Tracks p
               where (p.Company_Id, p.Filial_Id, p.Person_Id) in
                     (select q.Company_Id, q.Filial_Id, q.Employee_Id
                        from Htt_Migrated_Employees q)
                 and p.Track_Date >= (select q.Period_Begin
                                        from Htt_Migrated_Employees q
                                       where q.Company_Id = p.Company_Id
                                         and q.Filial_Id = p.Filial_Id
                                         and q.Employee_Id = p.Person_Id)
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = p.Person_Id)
                 and not exists (select 1
                        from Htt_Tracks T1
                       where T1.Company_Id = i_Company_Id
                         and T1.Filial_Id = i_Filial_Id
                         and T1.Track_Time = p.Track_Time
                         and T1.Person_Id = p.Person_Id
                         and Nvl(T1.Device_Id, -1) = Nvl(p.Device_Id, -1)
                         and T1.Original_Type = p.Original_Type))
    loop
      r_Track := r;
    
      r_Track.Filial_Id  := i_Filial_Id;
      r_Track.Track_Type := r.Original_Type;
      r_Track.Track_Id   := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    -- cleanup
    delete Htt_Migrated_Employees p
     where p.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Location_Sync_Person_Global,
                           i_Value      => i_Value);
  
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Htt_Api;
/

create or replace package Htt_Audit is
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Stop(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Stop(i_Company_Id number);
end Htt_Audit;
/
create or replace package body Htt_Audit is
  ----------------------------------------------------------------------------------------------------  
  Procedure Request_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_REQUESTS',
                           i_Column_List => 'REQUEST_ID,REQUEST_KIND_ID,BEGIN_TIME,END_TIME,REQUEST_TYPE,MANAGER_NOTE,NOTE,STATUS,BARCODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_REQUESTS_I1',
                              i_Table_Name  => 'HTT_REQUESTS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,REQUEST_ID,T_CONTEXT_ID');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Request_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_REQUESTS');
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Change_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_PLAN_CHANGES',
                           i_Column_List => 'CHANGE_ID,CHANGE_KIND,NOTE,STATUS,MANAGER_NOTE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_PLAN_CHANGES_I1',
                              i_Table_Name  => 'HTT_PLAN_CHANGES',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,CHANGE_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_CHANGE_DAYS',
                           i_Column_List => 'CHANGE_ID,CHANGE_DATE,SWAPPED_DATE,DAY_KIND,BEGIN_TIME,END_TIME,BREAK_ENABLED,BREAK_BEGIN_TIME,BREAK_END_TIME,PLAN_TIME,STAFF_ID',
                           i_Parent_Name => 'HTT_PLAN_CHANGES');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_CHANGE_DAYS_I1',
                              i_Table_Name  => 'HTT_CHANGE_DAYS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,CHANGE_ID,CHANGE_DATE,T_CONTEXT_ID');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_CHANGE_DAYS_I2',
                              i_Table_Name  => 'HTT_CHANGE_DAYS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,CHANGE_ID,T_CONTEXT_ID');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Change_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_PLAN_CHANGES');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_CHANGE_DAYS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_LOCATION_TYPES',
                           i_Column_List => 'LOCATION_TYPE_ID,NAME,COLOR,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_LOCATION_TYPES_I1',
                              i_Table_Name  => 'HTT_LOCATION_TYPES',
                              i_Column_List => 'T_COMPANY_ID,LOCATION_TYPE_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_LOCATION_TYPES');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_LOCATIONS',
                           i_Column_List => 'LOCATION_ID,NAME,LOCATION_TYPE_ID,TIMEZONE_CODE,REGION_ID,ADDRESS,LATLNG,ACCURACY,BSSIDS,PROHIBITED,STATE,CODE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_LOCATIONS_I1',
                              i_Table_Name  => 'HTT_LOCATIONS',
                              i_Column_List => 'T_COMPANY_ID,LOCATION_ID,T_CONTEXT_ID');
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_LOCATION_POLYGON_VERTICES',
                           i_Column_List => 'LOCATION_ID,ORDER_NO,LATLNG',
                           i_Parent_Name => 'HTT_LOCATIONS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_LOCATION_POLYGON_VERTICES_I1',
                              i_Table_Name  => 'HTT_LOCATION_POLYGON_VERTICES',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,LOCATION_ID,T_CONTEXT_ID');
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_LOCATION_PERSONS',
                           i_Column_List => 'LOCATION_ID,PERSON_ID,ATTACH_TYPE',
                           i_Parent_Name => 'HTT_LOCATIONS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_LOCATION_PERSONS_I1',
                              i_Table_Name  => 'HTT_LOCATION_PERSONS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,LOCATION_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_LOCATIONS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id,
                          i_Table_Name => 'HTT_LOCATION_POLYGON_VERTICES');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_LOCATION_PERSONS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_TIME_KINDS',
                           i_Column_List => 'TIME_KIND_ID,NAME,LETTER_CODE,DIGITAL_CODE,PARENT_ID,PLAN_LOAD,BG_COLOR,COLOR,STATE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_TIME_KINDS_I1',
                              i_Table_Name  => 'HTT_TIME_KINDS',
                              i_Column_List => 'T_COMPANY_ID,TIME_KIND_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_TIME_KINDS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_REQUEST_KINDS',
                           i_Column_List => 'REQUEST_KIND_ID,NAME,TIME_KIND_ID,ANNUALLY_LIMITED,DAY_COUNT_TYPE,ANNUAL_DAY_LIMIT,USER_PERMITTED,ALLOW_UNUSED_TIME,REQUEST_RESTRICTION_DAYS,CARRYOVER_POLICY,CARRYOVER_CAP_DAYS,CARRYOVER_EXPIRES_DAYS,STATE');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_REQUEST_KINDS_I1',
                              i_Table_Name  => 'HTT_REQUEST_KINDS',
                              i_Column_List => 'T_COMPANY_ID,REQUEST_KIND_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_REQUEST_KINDS');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HTT_TRACKS',
                           i_Column_List => 'TRACK_ID,TRACK_DATE,TRACK_TIME,TRACK_DATETIME,PERSON_ID,TRACK_TYPE,MARK_TYPE,DEVICE_ID,LOCATION_ID,LATLNG,ACCURACY,PHOTO_SHA,BSSID,NOTE,ORIGINAL_TYPE,IS_VALID');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HTT_TRACKS_I1',
                              i_Table_Name  => 'HTT_TRACKS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,TRACK_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HTT_TRACKS');
  end;

end Htt_Audit;
/

create or replace package Htt_Core is
  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs;
  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets;
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  );
  ---------------------------------------------------------------------------------------------------- 
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once
  -- %param p_Tracks       array of all timesheet tracks, returns as with reordered and transformed tracks 
  -- %param p_Trans_Tracks array of transformed tracks, returns same array adding transformed tracks
  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts;
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  );
  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes;
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance;
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes;
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals;
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual staff schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual robot schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );

end Htt_Core;
/
create or replace package body Htt_Core is
  ----------------------------------------------------------------------------------------------------
  g_Is_Individual_Schedule Fazo.Boolean_Id_Aat;
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Individual_Staff_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) return boolean is
  begin
    if i_Schedule_Id is null then
      return false;
    end if;
  
    if g_Is_Individual_Schedule.Exists(i_Schedule_Id) then
      return g_Is_Individual_Schedule(i_Schedule_Id);
    end if;
  
    g_Is_Individual_Schedule(i_Schedule_Id) := Fazo.Equal(z_Htt_Schedules.Load( --
                                                          i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Schedule_Id => i_Schedule_Id).Pcode,
                                                          Htt_Pref.c_Pcode_Individual_Staff_Schedule);
  
    return g_Is_Individual_Schedule(i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number is
    result number;
  begin
    z_Htt_Pin_Locks.Lock_Only(i_Company_Id);
  
    select max(Rownum)
      into result
      from (select to_number(q.Pin) Pin
              from Htt_Persons q
             where q.Company_Id = i_Company_Id
               and to_number(q.Pin) is not null
             order by to_number(q.Pin)) q
     where q.Pin = Rownum;
  
    return Nvl(result, 0) + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Data         Hashmap;
  begin
    for i in 1 .. i_Dates.Count
    loop
      v_Data         := Hashmap();
      r_Calendar_Day := z_Htt_Calendar_Days.Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Calendar_Id   => i_Calendar_Id,
                                                 i_Calendar_Date => i_Dates(i));
    
      v_Data.Put('notify_type', Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      v_Data.Put('name', r_Calendar_Day.Name);
      v_Data.Put('day_kind', r_Calendar_Day.Day_Kind);
      v_Data.Put('day_kind_name', Htt_Util.t_Day_Kind(r_Calendar_Day.Day_Kind));
      v_Data.Put('calendar_date', r_Calendar_Day.Calendar_Date);
      v_Data.Put('swapped_date', r_Calendar_Day.Swapped_Date);
    
      for Emp in (select Ts.Employee_Id
                    from Htt_Timesheets Ts
                   where Ts.Company_Id = i_Company_Id
                     and Ts.Filial_Id = i_Filial_Id
                     and Ts.Schedule_Id in (select s.Schedule_Id
                                              from Htt_Schedules s
                                             where s.Company_Id = i_Company_Id
                                               and s.Filial_Id = i_Filial_Id
                                               and s.Calendar_Id = i_Calendar_Id)
                     and Ts.Timesheet_Date = r_Calendar_Day.Calendar_Date
                   group by Ts.Employee_Id)
      loop
        continue when not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                                  i_User_Id      => Emp.Employee_Id,
                                                  i_Setting_Code => Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      
        Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                    i_User_Id    => Emp.Employee_Id,
                    i_Data       => v_Data);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Timesheet
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Late_Time   number := 0,
    i_Early_Time  number := 0,
    i_Notify_Type varchar2
  ) is
    r_Person     Mr_Natural_Persons%rowtype;
    r_Staff      Href_Staffs%rowtype;
    v_Manager_Id number;
    result       Hashmap := Hashmap();
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Timesheet.Company_Id,
                                  i_Filial_Id  => i_Timesheet.Filial_Id,
                                  i_Staff_Id   => i_Timesheet.Staff_Id);
  
    r_Person := z_Mr_Natural_Persons.Take(i_Company_Id => r_Staff.Company_Id,
                                          i_Person_Id  => r_Staff.Employee_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Timesheet.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('timesheet_id', i_Timesheet.Timesheet_Id);
    Result.Put('timesheet_date', i_Timesheet.Timesheet_Date);
    Result.Put('employee_name', r_Person.Name);
    Result.Put('begin_time', to_char(i_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('end_time', to_char(i_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('input_time', to_char(i_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('output_time', to_char(i_Timesheet.Output_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('early_time', i_Early_Time);
    Result.Put('late_time', i_Late_Time);
  
    Mt_Fcm.Send(i_Company_Id => i_Timesheet.Company_Id, --
                i_User_Id    => v_Manager_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Day_Marks
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Schedule_Id   number,
    i_Schedule_Date date,
    i_Source_Date   date,
    i_Day_Kind      varchar2
  ) is
  begin
    if i_Day_Kind = Htt_Pref.c_Day_Kind_Work then
      insert into Htt_Schedule_Day_Marks Dm
        (Dm.Company_Id, --
         Dm.Filial_Id,
         Dm.Schedule_Id,
         Dm.Schedule_Date,
         Dm.Begin_Time,
         Dm.End_Time)
        select Om.Company_Id,
               Om.Filial_Id,
               Om.Schedule_Id,
               i_Schedule_Date,
               i_Schedule_Date + Numtodsinterval(Om.Begin_Time, 'minute'),
               i_Schedule_Date + Numtodsinterval(Om.End_Time, 'minute')
          from Htt_Schedule_Origin_Day_Marks Om
         where Om.Company_Id = i_Company_Id
           and Om.Filial_Id = i_Filial_Id
           and Om.Schedule_Id = i_Schedule_Id
           and Om.Schedule_Date = i_Source_Date;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- gen schedule day
  -- also gen swapped day if such exists
  -- return date of swapped day through o_swapped_date
  Procedure Gen_Schedule_Day
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Schedule_Id              number,
    i_Schedule_Date            date,
    i_Calendar_Id              number,
    i_Take_Holidays            varchar2,
    i_Take_Nonworking          varchar2,
    i_Take_Additional_Rest_Day varchar2,
    o_Swapped_Date             out date
  ) is
    r_Origin_Day   Htt_Schedule_Origin_Days%rowtype;
    r_First_Day    Htt_Schedule_Origin_Days%rowtype;
    r_Second_Day   Htt_Schedule_Origin_Days%rowtype;
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Swappable    boolean := false;
  
    --------------------------------------------------
    Procedure Swap_Days
    (
      p_Rest_Day in out nocopy Htt_Schedule_Origin_Days%rowtype,
      p_Work_Day in out nocopy Htt_Schedule_Origin_Days%rowtype
    ) is
      v_Swap_Distance number;
      r_Day           Htt_Schedule_Origin_Days%rowtype := p_Rest_Day;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
  begin
    if z_Htt_Schedule_Origin_Days.Exist_Lock(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Schedule_Id   => i_Schedule_Id,
                                             i_Schedule_Date => i_Schedule_Date,
                                             o_Row           => r_Origin_Day) then
      if Md_Pref.c_Migr_Company_Id != i_Company_Id then
        if i_Calendar_Id is not null and
           Htt_Util.Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Calendar_Id  => i_Calendar_Id,
                                    i_Date         => i_Schedule_Date,
                                    o_Calendar_Day => r_Calendar_Day) then
          if r_Calendar_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Nonworking then
            if r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_First_Day  := r_Origin_Day;
                r_Second_Day := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Swapped_Date);
              
              else
                r_First_Day  := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Calendar_Date);
                r_Second_Day := r_Origin_Day;
              end if;
            
              v_Swappable := r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Days(p_Rest_Day => r_First_Day, p_Work_Day => r_Second_Day);
                else
                  Swap_Days(p_Rest_Day => r_Second_Day, p_Work_Day => r_First_Day);
                end if;
              end if;
            
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_Origin_Day := r_First_Day;
              else
                r_Origin_Day := r_Second_Day;
                r_Second_Day := r_First_Day;
              end if;
            
              -- gen swapped day
              z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                           i_Filial_Id        => i_Filial_Id,
                                           i_Schedule_Id      => i_Schedule_Id,
                                           i_Schedule_Date    => r_Second_Day.Schedule_Date,
                                           i_Day_Kind         => r_Second_Day.Day_Kind,
                                           i_Begin_Time       => r_Second_Day.Begin_Time,
                                           i_End_Time         => r_Second_Day.End_Time,
                                           i_Break_Enabled    => r_Second_Day.Break_Enabled,
                                           i_Break_Begin_Time => r_Second_Day.Break_Begin_Time,
                                           i_Break_End_Time   => r_Second_Day.Break_End_Time,
                                           i_Full_Time        => r_Second_Day.Full_Time,
                                           i_Plan_Time        => r_Second_Day.Plan_Time,
                                           i_Shift_Begin_Time => r_Second_Day.Shift_Begin_Time,
                                           i_Shift_End_Time   => r_Second_Day.Shift_End_Time,
                                           i_Input_Border     => r_Second_Day.Input_Border,
                                           i_Output_Border    => r_Second_Day.Output_Border);
            
              delete Htt_Schedule_Day_Marks Dm
               where Dm.Company_Id = i_Company_Id
                 and Dm.Filial_Id = i_Filial_Id
                 and Dm.Schedule_Id = i_Schedule_Id
                 and Dm.Schedule_Date = r_Second_Day.Schedule_Date;
            
              Gen_Schedule_Day_Marks(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Schedule_Id   => i_Schedule_Id,
                                     i_Schedule_Date => r_Second_Day.Schedule_Date,
                                     i_Source_Date   => case
                                                          when v_Swappable then
                                                           r_Origin_Day.Schedule_Date
                                                          else
                                                           r_Second_Day.Schedule_Date
                                                        end,
                                     i_Day_Kind      => r_Second_Day.Day_Kind);
            
              o_Swapped_Date := r_Second_Day.Schedule_Date;
            else
              if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
                 i_Take_Additional_Rest_Day = 'Y' and
                 r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
                r_Origin_Day.Begin_Time       := null;
                r_Origin_Day.End_Time         := null;
                r_Origin_Day.Break_Enabled    := null;
                r_Origin_Day.Break_Begin_Time := null;
                r_Origin_Day.Break_End_Time   := null;
                r_Origin_Day.Full_Time        := 0;
                r_Origin_Day.Plan_Time        := 0;
              end if;
            end if;
          end if;
        
          if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
             i_Take_Nonworking = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking or
             i_Take_Additional_Rest_Day = 'Y' and
             r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
            r_Origin_Day.Day_Kind := r_Calendar_Day.Day_Kind;
          end if;
        end if;
      end if;
    
      z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                   i_Filial_Id        => i_Filial_Id,
                                   i_Schedule_Id      => i_Schedule_Id,
                                   i_Schedule_Date    => i_Schedule_Date,
                                   i_Day_Kind         => r_Origin_Day.Day_Kind,
                                   i_Begin_Time       => r_Origin_Day.Begin_Time,
                                   i_End_Time         => r_Origin_Day.End_Time,
                                   i_Break_Enabled    => r_Origin_Day.Break_Enabled,
                                   i_Break_Begin_Time => r_Origin_Day.Break_Begin_Time,
                                   i_Break_End_Time   => r_Origin_Day.Break_End_Time,
                                   i_Full_Time        => r_Origin_Day.Full_Time,
                                   i_Plan_Time        => r_Origin_Day.Plan_Time,
                                   i_Shift_Begin_Time => r_Origin_Day.Shift_Begin_Time,
                                   i_Shift_End_Time   => r_Origin_Day.Shift_End_Time,
                                   i_Input_Border     => r_Origin_Day.Input_Border,
                                   i_Output_Border    => r_Origin_Day.Output_Border);
    
      Gen_Schedule_Day_Marks(i_Company_Id    => i_Company_Id,
                             i_Filial_Id     => i_Filial_Id,
                             i_Schedule_Id   => i_Schedule_Id,
                             i_Schedule_Date => r_Origin_Day.Schedule_Date,
                             i_Source_Date   => case
                                                  when v_Swappable then
                                                   r_Second_Day.Schedule_Date
                                                  else
                                                   r_Origin_Day.Schedule_Date
                                                end,
                             i_Day_Kind      => r_Origin_Day.Day_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days
  -- dates of swapped days are added to p_dates
  ----------------------------------------------------------------------------------------------------  
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  ) is
    v_Swapped_Date  date;
    v_Swapped_Dates Array_Date := Array_Date();
    r_Schedule      Htt_Schedules%rowtype;
  
    v_Swapped_Dates_At Fazo.Date_Code_Aat;
  
    -------------------------------------------------- 
    Function Date_Swapped(i_Date date) return boolean is
    begin
      if v_Swapped_Dates_At.Exists(to_char(i_Date)) then
        return true;
      end if;
    
      return false;
    end;
  
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    delete Htt_Schedule_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of p_Dates;
  
    for i in 1 .. p_Dates.Count
    loop
      continue when Date_Swapped(p_Dates(i));
    
      Gen_Schedule_Day(i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Schedule_Date            => p_Dates(i),
                       i_Calendar_Id              => r_Schedule.Calendar_Id,
                       i_Take_Holidays            => r_Schedule.Take_Holidays,
                       i_Take_Nonworking          => r_Schedule.Take_Nonworking,
                       i_Take_Additional_Rest_Day => r_Schedule.Take_Additional_Rest_Days,
                       o_Swapped_Date             => v_Swapped_Date);
    
      if v_Swapped_Date is not null then
        v_Swapped_Dates_At(v_Swapped_Date) := p_Dates(i);
        v_Swapped_Dates_At(p_Dates(i)) := v_Swapped_Date;
      
        Fazo.Push(v_Swapped_Dates, v_Swapped_Date);
      end if;
    end loop;
  
    p_Dates := p_Dates multiset union v_Swapped_Dates;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- if new days are being added to schedule
  -- uses separate algorithm for timesheet generation
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  ) is
    v_Year_Existed varchar2(1);
    v_Dates        Array_Date := i_Dates;
  begin
    begin
      select 'Y'
        into v_Year_Existed
        from Htt_Schedule_Days d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Schedule_Id = i_Schedule_Id
         and Extract(year from d.Schedule_Date) = i_Year
         and Rownum = 1;
    
    exception
      when No_Data_Found then
        v_Year_Existed := 'N';
    end;
  
    Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Schedule_Id => i_Schedule_Id,
                      p_Dates       => v_Dates);
  
    v_Dates := set(v_Dates);
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      if v_Year_Existed = 'N' then
        Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => i_Schedule_Id,
                           i_Year        => i_Year);
      else
        Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                             i_Filial_Id   => i_Filial_Id,
                             i_Schedule_Id => i_Schedule_Id,
                             i_Dates       => v_Dates);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- for every schedule that is cnnected to this calendar
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    v_Dates Array_Date;
  begin
    for r in (select s.Schedule_Id
                from Htt_Schedules s
               where s.Company_Id = i_Company_Id
                 and s.Filial_Id = i_Filial_Id
                 and s.Calendar_Id = i_Calendar_Id)
    loop
      v_Dates := i_Dates;
    
      Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                        i_Filial_Id   => i_Filial_Id,
                        i_Schedule_Id => r.Schedule_Id,
                        p_Dates       => v_Dates);
    
      Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => r.Schedule_Id,
                           i_Dates       => v_Dates);
    end loop;
  
    for r in (select *
                from Htt_Schedule_Registries q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Calendar_Id = i_Calendar_Id)
    loop
      null;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Request_Begin);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and (i_Request_Begin >= q.Shift_Begin_Time and i_Request_Begin < q.Shift_End_Time or
           i_Request_End >= q.Shift_Begin_Time and i_Request_End < q.Shift_End_Time);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Track_Datetime);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and i_Track_Datetime >= q.Input_Border
       and i_Track_Datetime < q.Output_Border;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Dirty_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Timesheets
        (Company_Id, Filial_Id, Timesheet_Id, Locked)
        select i_Company_Id,
               i_Filial_Id,
               i_Timesheet_Id,
               Nvl((select 'Y'
                     from Htt_Timesheet_Locks Tl
                    where Tl.Company_Id = t.Company_Id
                      and Tl.Filial_Id = t.Filial_Id
                      and Tl.Staff_Id = t.Staff_Id
                      and Tl.Timesheet_Date = t.Timesheet_Date),
                   'N')
          from Htt_Timesheets t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Timesheet_Id = i_Timesheet_Id;
    
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      select t.Company_Id,
             t.Filial_Id,
             t.Timesheet_Id,
             Nvl((select 'Y'
                   from Htt_Timesheet_Locks Tl
                  where Tl.Company_Id = t.Company_Id
                    and Tl.Filial_Id = t.Filial_Id
                    and Tl.Staff_Id = t.Staff_Id
                    and Tl.Timesheet_Date = t.Timesheet_Date),
                 'N')
        from Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date
         and not exists (select *
                from Htt_Dirty_Timesheets p
               where p.Company_Id = t.Company_Id
                 and p.Filial_Id = t.Filial_Id
                 and p.Timesheet_Id = t.Timesheet_Id);
  
    b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Dates        Array_Date,
    i_Add_Callback boolean := true
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      (select t.Company_Id,
              t.Filial_Id,
              t.Timesheet_Id,
              Nvl((select 'Y'
                    from Htt_Timesheet_Locks Tl
                   where Tl.Company_Id = t.Company_Id
                     and Tl.Filial_Id = t.Filial_Id
                     and Tl.Staff_Id = t.Staff_Id
                     and Tl.Timesheet_Date = t.Timesheet_Date),
                  'N')
         from Htt_Timesheets t
        where t.Company_Id = i_Company_Id
          and t.Filial_Id = i_Filial_Id
          and t.Staff_Id = i_Staff_Id
          and t.Timesheet_Date member of i_Dates
          and not exists (select *
                 from Htt_Dirty_Timesheets p
                where p.Company_Id = t.Company_Id
                  and p.Filial_Id = t.Filial_Id
                  and p.Timesheet_Id = t.Timesheet_Id));
  
    if i_Add_Callback then
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number) is
    v_User_System number := Md_Pref.User_System(i_Company_Id);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for Po in (select Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id
                   from Htt_Timesheet_Tracks Tt
                  where Tt.Company_Id = r.Company_Id
                    and Tt.Filial_Id = r.Filial_Id
                    and Tt.Track_Type in
                        (Htt_Pref.c_Track_Type_Potential_Output, Htt_Pref.c_Track_Type_Gps_Output)
                  group by Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id)
      loop
        Make_Dirty_Timesheet(i_Company_Id   => Po.Company_Id,
                             i_Filial_Id    => Po.Filial_Id,
                             i_Timesheet_Id => Po.Timesheet_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs is
  begin
    for Cmp in (select c.Company_Id
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Transform_Potential_Outputs(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  
    Dbms_Mview.Refresh('Htt_Employee_Monthly_Attendances_Mv', --
                       Atomic_Refresh => true);
  end;

  ----------------------------------------------------------------------------------------------------
  -- adds i_begin_date - 1 and i_end_date + 1 to dirty timesheets
  -- sets shift begin/end values to null if its shift is flexible and not locked
  -- %warning
  -- timesheets at i_begin_date - 1 and i_end_date + 1 should be removed from dirty timesheets before any fact generation
  Procedure Update_Border_Timesheet_Shifts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Add_Callback boolean := true
  ) is
  begin
    update Htt_Timesheets q
       set q.Shift_Begin_Time = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Shift_Begin_Time, null),
           q.Input_Border     = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Input_Border, null),
           q.Shift_End_Time   = Decode(q.Timesheet_Date, i_End_Date + 1, q.Shift_End_Time, null),
           q.Output_Border    = Decode(q.Timesheet_Date, i_End_Date + 1, q.Output_Border, null)
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date in (i_Begin_Date - 1, i_End_Date + 1)
       and not exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = q.Company_Id
               and Tl.Filial_Id = q.Filial_Id
               and Tl.Staff_Id = q.Staff_Id
               and Tl.Timesheet_Date = q.Timesheet_Date)
       and q.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible;
  
    Make_Dirty_Timesheets(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Staff_Id     => i_Staff_Id,
                          i_Dates        => Array_Date(i_Begin_Date - 1, i_End_Date + 1),
                          i_Add_Callback => i_Add_Callback);
  end;

  ----------------------------------------------------------------------------------------------------
  -- updates shift begin/end and input/output borders for dirty timesheets with flexible shift 
  -- shift is determined as flexible if it is null at current moment
  -- deletes locked timesheets from dirty timesheets after updating shifts

  -- %raises Htt_Error.Raise_107 when end_time and begin_time for consecutive days intersect

  -- shift is calculated as middle between end_time and begin_time of consecutive days
  -- shift for work day is calculated as (24 - full_plan)/2 from begin/end_time if previous/next day is rest day
  -- shift for rest day is set to the shift of its neighbour
  -- shift between two rest days is set to the start/end of day
  -- input border is set to min(shift, merger)
  -- output border is set to max(shift, merger)
  -- merger appears when difference between end_time and begin_time of consecutive days is less than 30 minutes
  -- merger is set to shift +/- 15 minutes 

  -- flexible schedule guarantees that shift borders will not intersect between timesheets

  -- %example 1
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 09:00;
  -- then shift_begin_time := 01.01.2023 18:00 + (02.01.2023 09:00 - 01.01.2023 18:00) / 2;
  -- meaning shift_begin_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- %example 2
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next day to be rest day
  -- then shift_end_time := 01.01.2023 18:00 + (24 - (01.01.2023 18:00 - 01.01.2023 09:00)) / 2;
  -- meaning shift_end_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- not necessarily shift borders will fall at same hours every day
  -- this is easily seen in shifts with day/schedule

  -- %example 3
  -- let prev_end   := 31.12.2022 09:00;
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 18:00;
  -- then
  -- shift_end_time := 01.01.2023 18:00 + (02.01.2023 18:00 - 01.01.2023 18:00) / 2;
  -- shift_end_time := 01.01.2023 18:00 + 12 hours := 02.01.2023 06:00;
  -- and 
  -- shift_begin_time := 01.01.2023 09:00 - (01.01.2023 09:00 - 31.12.2022 09:00) / 2;
  -- shift_begin_time := 01.01.2023 09:00 - 12 hours := 31.01.2023 21:00;
  Procedure Adjust_Flexible_Shifts is
    --------------------------------------------------
    Procedure Assert_Nonintersecting_Work_Time is
      v_Company_Id     number;
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Begin_Time     date;
      v_End_Time       date;
    begin
      with Timesheets as
       (select Tt.Company_Id,
               Tt.Filial_Id,
               Tt.Staff_Id,
               Tt.Timesheet_Date,
               Tt.Begin_Time,
               Tt.End_Time,
               Tt.Shift_Begin_Time,
               Tt.Shift_End_Time
          from Htt_Timesheets Tt
         where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
               (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                  from Htt_Dirty_Timesheets Dt))
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Begin_Time,
             (select q.End_Time
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1)
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Begin_Time, v_End_Time
        from Timesheets p
       where exists (select 1
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1
                 and q.End_Time > p.Begin_Time)
         and Rownum = 1;
    
      Htt_Error.Raise_107(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                   i_Filial_Id  => v_Filial_Id,
                                                                   i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date => v_Timesheet_Date,
                          i_Begin_Time     => v_Begin_Time,
                          i_End_Time       => v_End_Time);
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Nonintersecting_Work_Time;
  
    update Htt_Timesheets Tt
       set (Tt.Shift_Begin_Time, Tt.Shift_End_Time, Tt.Input_Border, Tt.Output_Border) =
           (select Nvl(Tt.Shift_Begin_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin,
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Shift_End_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End,
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1)),
                   Nvl(Tt.Input_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Output_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1))
              from (select Qr.Timesheet_Date,
                           Qr.Day_Kind,
                           -- if next_begin - end_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Next_Begin - Qr.End_Time) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Output_Merger_Coef,
                           -- if begin_time - prev_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Begin_Time - Qr.Prev_End) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Input_Merger_Coef,
                           Qr.Begin_Time - (Qr.Begin_Time - Qr.Prev_End) / 2 Work_Work_Shift_Begin,
                           Qr.End_Time + (Qr.Next_Begin - Qr.End_Time) / 2 Work_Work_Shift_End,
                           -- current day rest, previous day work
                           Qr.Prev_End +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Prev_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_Begin,
                           -- current day rest, next day work
                           Qr.Next_Begin -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Next_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_End,
                           -- current day work, previous day rest
                           Qr.Begin_Time -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_Begin,
                           -- current day work, next day rest
                           Qr.End_Time +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_End
                      from (select Cr.Company_Id,
                                   Cr.Filial_Id,
                                   Cr.Timesheet_Id,
                                   Cr.Timesheet_Date,
                                   Cr.Day_Kind,
                                   Cr.Begin_Time,
                                   Cr.End_Time,
                                   (Cr.End_Time - Cr.Begin_Time) * 24 * 3600 Full_Time,
                                   Cr.Shift_Begin_Time,
                                   Cr.Shift_End_Time,
                                   Cr.Input_Border,
                                   Cr.Output_Border,
                                   Pv.End_Time Prev_End,
                                   (Pv.End_Time - Pv.Begin_Time) * 24 * 3600 Prev_Plan,
                                   Nx.Begin_Time Next_Begin,
                                   (Nx.End_Time - Nx.Begin_Time) * 24 * 3600 Next_Plan
                              from Htt_Timesheets Cr
                              left join Htt_Timesheets Pv
                                on Pv.Company_Id = Cr.Company_Id
                               and Pv.Filial_Id = Cr.Filial_Id
                               and Pv.Staff_Id = Cr.Staff_Id
                               and Pv.Timesheet_Date = Cr.Timesheet_Date - 1
                              left join Htt_Timesheets Nx
                                on Nx.Company_Id = Cr.Company_Id
                               and Nx.Filial_Id = Cr.Filial_Id
                               and Nx.Staff_Id = Cr.Staff_Id
                               and Nx.Timesheet_Date = Cr.Timesheet_Date + 1
                             where (Cr.Company_Id, Cr.Filial_Id, Cr.Timesheet_Id) in
                                   (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                                      from Htt_Dirty_Timesheets Dt)) Qr
                     where Qr.Company_Id = Tt.Company_Id
                       and Qr.Filial_Id = Tt.Filial_Id
                       and Qr.Timesheet_Id = Tt.Timesheet_Id) Upd)
     where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
           (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
              from Htt_Dirty_Timesheets Dt
             where Dt.Locked = 'N')
       and Tt.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible
       and (Tt.Shift_Begin_Time is null or Tt.Shift_End_Time is null);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Helpers_Save is
  begin
    delete Htt_Timesheet_Helpers q
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = q.Company_Id
               and Dt.Filial_Id = q.Filial_Id
               and Dt.Timesheet_Id = q.Timesheet_Id);
  
    -- see: https://community.oracle.com/tech/developers/discussion/2526535/reg-sys-guid
    insert into Htt_Timesheet_Helpers Th
      (Th.Company_Id,
       Th.Filial_Id,
       Th.Staff_Id,
       Th.Interval_Date,
       Th.Timesheet_Id,
       Th.Day_Kind,
       Th.Shift_Begin_Time,
       Th.Shift_End_Time,
       Th.Input_Border,
       Th.Output_Border)
      select Qr.Company_Id,
             Qr.Filial_Id,
             Staff_Id,
             Trunc(Qr.Input_Border) + level - 1 Interval_Date,
             Qr.Timesheet_Id,
             Qr.Day_Kind,
             Qr.Shift_Begin_Time,
             Qr.Shift_End_Time,
             Qr.Input_Border,
             Qr.Output_Border
        from (select Tt.*
                from Htt_Timesheets Tt
               where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
                     (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                        from Htt_Dirty_Timesheets Dt)) Qr
      connect by level <= Trunc(Qr.Output_Border) - Trunc(Qr.Input_Border) + 1
             and Qr.Timesheet_Id = prior Qr.Timesheet_Id
             and prior Sys_Guid() is not null
             and Trunc(Qr.Input_Border) + level - 1 < Qr.Output_Border;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Plans is
    r_Swapped_Date  Htt_Change_Days%rowtype;
    v_Swap_Distance number;
  begin
    for r in (select d.*,
                     t.Timesheet_Id,
                     t.Schedule_Id,
                     (select count(*)
                        from Htt_Schedule_Day_Marks Dm
                       where Dm.Company_Id = t.Company_Id
                         and Dm.Filial_Id = t.Filial_Id
                         and Dm.Schedule_Id = t.Schedule_Id
                         and Dm.Schedule_Date = Nvl(d.Swapped_Date, d.Change_Date)) Planned_Marks,
                     t.Schedule_Kind
                from Htt_Change_Days d
                join Htt_Timesheets t
                  on d.Company_Id = t.Company_Id
                 and d.Filial_Id = t.Filial_Id
                 and d.Staff_Id = t.Staff_Id
                 and d.Change_Date = t.Timesheet_Date
               where exists (select *
                        from Htt_Dirty_Timesheets Dt
                       where t.Company_Id = Dt.Company_Id
                         and t.Filial_Id = Dt.Filial_Id
                         and t.Timesheet_Id = Dt.Timesheet_Id)
                 and exists (select *
                        from Htt_Plan_Changes Pc
                       where Pc.Company_Id = d.Company_Id
                         and Pc.Filial_Id = d.Filial_Id
                         and Pc.Change_Id = d.Change_Id
                         and Pc.Status = Htt_Pref.c_Change_Status_Completed))
    loop
      if r.Day_Kind is null then
        r_Swapped_Date := z_Htt_Change_Days.Load(i_Company_Id  => r.Company_Id,
                                                 i_Filial_Id   => r.Filial_Id,
                                                 i_Staff_Id    => r.Staff_Id,
                                                 i_Change_Date => r.Swapped_Date,
                                                 i_Change_Id   => r.Change_Id);
      
        v_Swap_Distance := r.Change_Date - r.Swapped_Date;
      
        r.Day_Kind         := r_Swapped_Date.Day_Kind;
        r.Begin_Time       := r_Swapped_Date.Begin_Time + v_Swap_Distance;
        r.End_Time         := r_Swapped_Date.End_Time + v_Swap_Distance;
        r.Break_Enabled    := r_Swapped_Date.Break_Enabled;
        r.Break_Begin_Time := r_Swapped_Date.Break_Begin_Time + v_Swap_Distance;
        r.Break_End_Time   := r_Swapped_Date.Break_End_Time + v_Swap_Distance;
        r.Plan_Time        := r_Swapped_Date.Plan_Time;
        r.Full_Time        := r_Swapped_Date.Full_Time;
      end if;
    
      z_Htt_Timesheets.Update_One(i_Company_Id       => r.Company_Id,
                                  i_Filial_Id        => r.Filial_Id,
                                  i_Timesheet_Id     => r.Timesheet_Id,
                                  i_Day_Kind         => Option_Varchar2(r.Day_Kind),
                                  i_Begin_Time       => Option_Date(r.Begin_Time),
                                  i_End_Time         => Option_Date(r.End_Time),
                                  i_Break_Enabled    => Option_Varchar2(r.Break_Enabled),
                                  i_Break_Begin_Time => Option_Date(r.Break_Begin_Time),
                                  i_Break_End_Time   => Option_Date(r.Break_End_Time),
                                  i_Plan_Time        => Option_Number(r.Plan_Time),
                                  i_Full_Time        => Option_Number(r.Full_Time),
                                  i_Planned_Marks    => Option_Number(r.Planned_Marks),
                                  i_Done_Marks       => Option_Number(0),
                                  i_Shift_Begin_Time => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Shift_End_Time   => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Input_Border     => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Output_Border    => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end);
    
      delete Htt_Timesheet_Marks q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Timesheet_Id = r.Timesheet_Id;
    
      if Is_Individual_Staff_Schedule(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Schedule_Id => r.Schedule_Id) then
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time,
                 Dm.End_Time,
                 'N'
            from Htt_Staff_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Staff_Id = r.Staff_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        select count(*)
          into r.Planned_Marks
          from Htt_Staff_Schedule_Day_Marks Sd
         where Sd.Company_Id = r.Company_Id
           and Sd.Filial_Id = r.Filial_Id
           and Sd.Staff_Id = r.Staff_Id
           and Sd.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        z_Htt_Timesheets.Update_One(i_Company_Id    => r.Company_Id,
                                    i_Filial_Id     => r.Filial_Id,
                                    i_Timesheet_Id  => r.Timesheet_Id,
                                    i_Planned_Marks => Option_Number(r.Planned_Marks));
      else
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time,
                 Dm.End_Time,
                 'N'
            from Htt_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Schedule_Id = r.Schedule_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      end if;
    
      Update_Border_Timesheet_Shifts(i_Company_Id   => r.Company_Id,
                                     i_Filial_Id    => r.Filial_Id,
                                     i_Staff_Id     => r.Staff_Id,
                                     i_Begin_Date   => r.Change_Date,
                                     i_End_Date     => r.Change_Date,
                                     i_Add_Callback => false);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Request_Facts is
  begin
    -- remove old requests
    delete Htt_Timesheet_Requests Tr
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tr.Company_Id
               and t.Filial_Id = Tr.Filial_Id
               and t.Timesheet_Id = Tr.Timesheet_Id);
  
    -- add requests according to new plan
    insert into Htt_Timesheet_Requests Tr
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date = t.Timesheet_Date
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type in
             (Htt_Pref.c_Request_Type_Full_Day, Htt_Pref.c_Request_Type_Multiple_Days);
  
    insert into Htt_Timesheet_Requests Tr
      select distinct t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date between Trunc(t.Shift_Begin_Time) and Trunc(t.Shift_End_Time)
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day
         and Rq.Begin_Time < t.Shift_End_Time
         and Rq.End_Time >= t.Shift_Begin_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Track_Facts(p_Tracks in out Htt_Pref.Track_Nt) is
    v_Old_Tracks Htt_Pref.Track_Nt;
  begin
    -- remove old tracks
    delete Htt_Timesheet_Tracks Tt
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tt.Company_Id
               and t.Filial_Id = Tt.Filial_Id
               and t.Timesheet_Id = Tt.Timesheet_Id)
    returning Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id bulk collect into v_Old_Tracks;
  
    -- add new tracks according to new plan
    insert into Htt_Timesheet_Tracks Tt
      (Company_Id,
       Filial_Id,
       Timesheet_Id,
       Track_Id,
       Track_Datetime,
       Track_Type,
       Track_Used,
       Trans_Input,
       Trans_Output,
       Trans_Check)
      select Tr.Company_Id,
             Tr.Filial_Id,
             t.Timesheet_Id,
             Tr.Track_Id,
             Tr.Track_Datetime,
             Tr.Track_Type,
             'Y' Track_Used,
             Tr.Trans_Input,
             Tr.Trans_Output,
             Tr.Trans_Check
        from Htt_Timesheets t
        join Htt_Tracks Tr
          on Tr.Company_Id = t.Company_Id
         and Tr.Filial_Id = t.Filial_Id
         and Tr.Person_Id = t.Employee_Id
         and Tr.Track_Date between Trunc(t.Input_Border) and Trunc(t.Output_Border)
         and Tr.Track_Datetime >= t.Input_Border
         and Tr.Track_Datetime < t.Output_Border
         and Tr.Is_Valid = 'Y'
       where (t.Company_Id, t.Filial_Id, t.Timesheet_Id) in
             (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                from Htt_Dirty_Timesheets Dt);
  
    select Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id
      bulk collect
      into p_Tracks
      from Htt_Timesheet_Tracks Tt
      join Htt_Dirty_Timesheets Dt
        on Tt.Company_Id = Dt.Company_Id
       and Tt.Filial_Id = Dt.Filial_Id
       and Tt.Timesheet_Id = Dt.Timesheet_Id
    union
    select Ot.Company_Id, Ot.Filial_Id, Ot.Track_Id
      from table(v_Old_Tracks) Ot;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Approve_Timesheet_Marks is
  begin
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'N'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id);
  
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'Y'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id
               and exists
             (select *
                      from Htt_Timesheet_Tracks Tt
                     where Tt.Company_Id = t.Company_Id
                       and Tt.Filial_Id = t.Filial_Id
                       and Tt.Timesheet_Id = t.Timesheet_Id
                       and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                       and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time));
  
    update Htt_Timesheets t
       set t.Done_Marks =
           (select count(*)
              from Htt_Timesheet_Marks Tm
             where Tm.Company_Id = t.Company_Id
               and Tm.Filial_Id = t.Filial_Id
               and Tm.Timesheet_Id = t.Timesheet_Id
               and Tm.Done = 'Y')
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = t.Company_Id
               and Dt.Filial_Id = t.Filial_Id
               and Dt.Timesheet_Id = t.Timesheet_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets is
    v_Tracks Htt_Pref.Track_Nt;
  
    -------------------------------------------------- 
    Procedure Track_Update_Status is
    begin
      forall i in 1 .. v_Tracks.Count
        update Htt_Tracks t
           set t.Status =
               (select case
                          when Track_Count = 0 then
                           Htt_Pref.c_Track_Status_Draft
                          when Used_Count = 0 then
                           Htt_Pref.c_Track_Status_Not_Used
                          when Used_Count < Track_Count then
                           Htt_Pref.c_Track_Status_Partially_Used
                          else
                           Htt_Pref.c_Track_Status_Used
                        end Status
                  from (select count(*) Track_Count, --
                               count(Nullif(Tt.Track_Used, 'N')) Used_Count
                          from Htt_Tracks q
                          join Htt_Timesheet_Tracks Tt
                            on q.Company_Id = Tt.Company_Id
                           and q.Filial_Id = Tt.Filial_Id
                           and q.Track_Id = Tt.Track_Id
                         where q.Company_Id = v_Tracks(i).Company_Id
                           and q.Filial_Id = v_Tracks(i).Filial_Id
                           and q.Track_Id = v_Tracks(i).Track_Id))
         where t.Company_Id = v_Tracks(i).Company_Id
           and t.Filial_Id = v_Tracks(i).Filial_Id
           and t.Track_Id = v_Tracks(i).Track_Id;
    end;
  begin
    Revise_Timesheet_Plans;
  
    Adjust_Flexible_Shifts;
  
    delete Htt_Dirty_Timesheets Dt
     where Dt.Locked = 'Y';
  
    Timesheet_Helpers_Save;
  
    Revise_Timesheet_Request_Facts;
  
    Revise_Timesheet_Track_Facts(v_Tracks);
  
    Approve_Timesheet_Marks;
  
    Gen_Timesheet_Facts;
  
    Track_Update_Status;
  
    -- need to remove
    delete Htt_Dirty_Timesheets;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change       Htt_Plan_Changes%rowtype;
    v_Change_Dates Array_Date;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    select Cd.Change_Date
      bulk collect
      into v_Change_Dates
      from Htt_Change_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Change_Id = i_Change_Id;
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Htt_Util.Assert_Timesheet_Locks(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => r_Change.Staff_Id,
                                      i_Dates      => v_Change_Dates);
    
      Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => r_Change.Staff_Id,
                            i_Dates      => v_Change_Dates);
    else
      -- works when plan change is cancelled from completed status
      for r in (select t.*
                  from Htt_Timesheets t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Staff_Id = r_Change.Staff_Id
                   and t.Timesheet_Date member of v_Change_Dates)
      loop
        Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                           i_Filial_Id      => i_Filial_Id,
                           i_Staff_Id       => r.Staff_Id,
                           i_Schedule_Id    => r.Schedule_Id,
                           i_Calendar_Id    => r.Calendar_Id,
                           i_Timesheet_Date => r.Timesheet_Date,
                           i_Schedule_Kind  => r.Schedule_Kind,
                           i_Track_Duration => r.Track_Duration / 60,
                           i_Count_Late     => r.Count_Late,
                           i_Count_Early    => r.Count_Early,
                           i_Count_Lack     => r.Count_Lack,
                           i_Count_Free     => r.Count_Free);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Only_Insert boolean := false
  ) is
  begin
    if not i_Only_Insert then
      delete Htt_Timesheet_Marks q
       where q.Company_Id = i_Timesheet.Company_Id
         and q.Filial_Id = i_Timesheet.Filial_Id
         and q.Timesheet_Id = i_Timesheet.Timesheet_Id;
    end if;
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             i_Timesheet.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Timesheet.Company_Id
         and Dm.Filial_Id = i_Timesheet.Filial_Id
         and Dm.Schedule_Id = i_Timesheet.Schedule_Id
         and Dm.Schedule_Date = i_Timesheet.Timesheet_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             t.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Timesheets t
        join Htt_Schedule_Day_Marks Dm
          on Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = t.Schedule_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Staff_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Staff_Id = t.Staff_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Robot_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id in
           (select t.Timesheet_Id
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Robot_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Robot_Id = i_Robot_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swap
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Change_Id   number,
    i_Timesheet   Htt_Timesheets%rowtype
  ) is
    v_Swap_Distance number := i_Change_Date - i_Timesheet.Timesheet_Date;
  begin
    z_Htt_Change_Days.Update_One(i_Company_Id       => i_Company_Id,
                                 i_Filial_Id        => i_Filial_Id,
                                 i_Staff_Id         => i_Staff_Id,
                                 i_Change_Date      => i_Change_Date,
                                 i_Change_Id        => i_Change_Id,
                                 i_Day_Kind         => Option_Varchar2(i_Timesheet.Day_Kind),
                                 i_Swapped_Date     => Option_Date(i_Timesheet.Timesheet_Date),
                                 i_Begin_Time       => Option_Date(i_Timesheet.Begin_Time +
                                                                   v_Swap_Distance),
                                 i_End_Time         => Option_Date(i_Timesheet.End_Time +
                                                                   v_Swap_Distance),
                                 i_Break_Enabled    => Option_Varchar2(i_Timesheet.Break_Enabled),
                                 i_Break_Begin_Time => Option_Date(i_Timesheet.Break_Begin_Time +
                                                                   v_Swap_Distance),
                                 i_Break_End_Time   => Option_Date(i_Timesheet.Break_End_Time +
                                                                   v_Swap_Distance),
                                 i_Plan_Time        => Option_Number(i_Timesheet.Plan_Time),
                                 i_Full_Time        => Option_Number(i_Timesheet.Full_Time));
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Timesheet.Staff_Id,
                          i_Dates      => Array_Date(i_Change_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swaps
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    v_Dirty_Dates Array_Date;
  begin
    update Htt_Change_Days Cd
       set (Cd.Day_Kind,
            Cd.Begin_Time,
            Cd.End_Time,
            Cd.Break_Enabled,
            Cd.Break_Begin_Time,
            Cd.Break_End_Time,
            Cd.Plan_Time,
            Cd.Full_Time) =
           (select t.Day_Kind,
                   t.Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_Enabled,
                   t.Break_Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Plan_Time,
                   t.Full_Time
              from Htt_Timesheets t
             where t.Company_Id = Cd.Company_Id
               and t.Filial_Id = Cd.Filial_Id
               and t.Staff_Id = Cd.Staff_Id
               and t.Timesheet_Date = Cd.Swapped_Date)
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Staff_Id = i_Staff_Id
       and Cd.Swapped_Date between i_Begin_Date and i_End_Date
    returning Cd.Change_Date bulk collect into v_Dirty_Dates;
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Dates      => v_Dirty_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype) is
    r_Track Htt_Tracks%rowtype;
  
    v_Timesheet_Id number;
  
    v_Track_Ids     Array_Number;
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Id_Aat;
  begin
    delete Htt_Timesheet_Tracks q
     where q.Company_Id = i_Timesheet.Company_Id
       and q.Filial_Id = i_Timesheet.Filial_Id
       and q.Timesheet_Id = i_Timesheet.Timesheet_Id
    returning q.Track_Id bulk collect into v_Track_Ids;
  
    z_Htt_Timesheets.Delete_One(i_Company_Id   => i_Timesheet.Company_Id,
                                i_Filial_Id    => i_Timesheet.Filial_Id,
                                i_Timesheet_Id => i_Timesheet.Timesheet_Id);
  
    for i in 1 .. v_Track_Ids.Count
    loop
      r_Track := z_Htt_Tracks.Take(i_Company_Id => i_Timesheet.Company_Id,
                                   i_Filial_Id  => i_Timesheet.Filial_Id,
                                   i_Track_Id   => v_Track_Ids(i));
    
      if r_Track.Is_Valid = 'Y' then
        v_Timesheet_Ids := Find_Track_Timesheets(i_Company_Id     => i_Timesheet.Company_Id,
                                                 i_Filial_Id      => i_Timesheet.Filial_Id,
                                                 i_Staff_Id       => i_Timesheet.Staff_Id,
                                                 i_Track_Datetime => r_Track.Track_Datetime);
      
        for j in 1 .. v_Timesheet_Ids.Count
        loop
          f_Timesheet_Sets(v_Timesheet_Ids(j)) := true;
        end loop;
      end if;
    end loop;
  
    v_Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet_Id is not null
    loop
      Make_Dirty_Timesheet(i_Company_Id   => i_Timesheet.Company_Id,
                           i_Filial_Id    => i_Timesheet.Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Id);
    
      v_Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Blocking_Timebook
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Hpr_Timebooks%rowtype is
    r_Locked_Date Hpr_Timesheet_Locks%rowtype;
  begin
    r_Locked_Date := z_Hpr_Timesheet_Locks.Load(i_Company_Id     => i_Company_Id,
                                                i_Filial_Id      => i_Filial_Id,
                                                i_Staff_Id       => i_Staff_Id,
                                                i_Timesheet_Date => i_Timesheet_Date);
  
    return z_Hpr_Timebooks.Load(i_Company_Id  => r_Locked_Date.Company_Id,
                                i_Filial_Id   => r_Locked_Date.Filial_Id,
                                i_Timebook_Id => r_Locked_Date.Timebook_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) return Htt_Timesheets%rowtype is
    r_Schedule_Day       Htt_Schedule_Days%rowtype;
    r_Schedule           Htt_Schedules%rowtype;
    r_Staff_Schedule_Day Htt_Staff_Schedule_Days%rowtype;
    r_Robot_Schedule_Day Htt_Robot_Schedule_Days%rowtype;
    r_Schedule_Registry  Htt_Schedule_Registries%rowtype;
    r_Timebook           Hpr_Timebooks%rowtype;
    result               Htt_Timesheets%rowtype;
    v_Planned_Count      number;
  
    --------------------------------------------------
    Function Get_Robot_Schedule_Day
    (
      i_Company_Id        number,
      i_Filial_Id         number,
      i_Staff_Id          number,
      i_Robot_Schedule_Id number,
      i_Schedule_Date     date
    ) return Htt_Robot_Schedule_Days%rowtype is
      result Htt_Robot_Schedule_Days%rowtype;
    begin
      select p.*
        into result
        from Hpd_Agreements_Cache q
        join Htt_Robot_Schedule_Days p
          on p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = q.Robot_Id
         and p.Schedule_Date = i_Schedule_Date
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Schedule_Id = i_Robot_Schedule_Id
         and i_Schedule_Date between q.Begin_Date and q.End_Date;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => i_Company_Id,
                                   i_Filial_Id      => i_Filial_Id,
                                   i_Staff_Id       => i_Staff_Id,
                                   i_Timesheet_Date => i_Timesheet_Date) then
      r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => i_Timesheet_Date);
    
      Htt_Error.Raise_001(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => i_Timesheet_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    end if;
  
    if i_Schedule_Id =
       Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      r_Staff_Schedule_Day := z_Htt_Staff_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                             i_Filial_Id     => i_Filial_Id,
                                                             i_Staff_Id      => i_Staff_Id,
                                                             i_Schedule_Date => i_Timesheet_Date);
    
      if r_Staff_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Staff_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Staff_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Staff_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Staff_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Staff_Id = i_Staff_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Staff_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Staff_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Staff_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Staff_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Staff_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Staff_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Staff_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Staff_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Staff_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Staff_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Staff_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Staff_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    elsif i_Schedule_Id =
          Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      r_Robot_Schedule_Day := Get_Robot_Schedule_Day(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Robot_Schedule_Id => i_Schedule_Id,
                                                     i_Schedule_Date     => i_Timesheet_Date);
    
      if r_Robot_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Robot_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Robot_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Robot_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Robot_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Robot_Id = r_Robot_Schedule_Day.Robot_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Robot_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Robot_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Robot_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Robot_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Robot_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Robot_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Robot_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Robot_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Robot_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Robot_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Robot_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Robot_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    else
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => i_Schedule_Id);
    
      r_Schedule_Day := z_Htt_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Schedule_Id   => i_Schedule_Id,
                                                 i_Schedule_Date => i_Timesheet_Date);
    
      if r_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      select count(*)
        into v_Planned_Count
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = i_Schedule_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => i_Track_Duration * 60,
                            i_Schedule_Kind       => i_Schedule_Kind,
                            i_Count_Late          => i_Count_Late,
                            i_Count_Early         => i_Count_Early,
                            i_Count_Lack          => i_Count_Lack,
                            i_Count_Free          => i_Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule.End_Early_Time * 60);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Timesheet_Lock
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    select Tl.Timesheet_Date
      into v_Locked_Date
      from Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
       and Rownum = 1;
  
    r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Locked_Date);
  
    Htt_Error.Raise_002(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Timesheet_Date  => v_Locked_Date,
                        i_Timebook_Number => r_Timebook.Timebook_Number,
                        i_Timebook_Month  => r_Timebook.Month);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) is
    r_Plan         Htt_Timesheets%rowtype;
    r_Timesheet    Htt_Timesheets%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_Change_Ids   Array_Number;
    v_Change_Dates Array_Date;
  
    -------------------------------------------------- 
    Function Exist_Plan_Swap
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Swapped_Date date,
      o_Change_Ids   out Array_Number,
      o_Change_Dates out Array_Date
    ) return boolean is
    begin
      select Cd.Change_Id, Cd.Change_Date
        bulk collect
        into o_Change_Ids, o_Change_Dates
        from Htt_Change_Days Cd
       where Cd.Company_Id = i_Company_Id
         and Cd.Filial_Id = i_Filial_Id
         and Cd.Staff_Id = i_Staff_Id
         and Cd.Swapped_Date = i_Swapped_Date;
    
      return o_Change_Ids.Count > 0;
    end;
  begin
    z_Href_Staffs.Lock_Only(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id);
  
    r_Plan := Timesheet_Plan(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Schedule_Id    => i_Schedule_Id,
                             i_Calendar_Id    => i_Calendar_Id,
                             i_Timesheet_Date => i_Timesheet_Date,
                             i_Track_Duration => i_Track_Duration,
                             i_Schedule_Kind  => i_Schedule_Kind,
                             i_Count_Late     => i_Count_Late,
                             i_Count_Early    => i_Count_Early,
                             i_Count_Lack     => i_Count_Lack,
                             i_Count_Free     => i_Count_Free);
  
    -- delete timesheet when timetable is not set
    if r_Plan.Company_Id is null then
      if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Staff_Id       => i_Staff_Id,
                                  i_Timesheet_Date => i_Timesheet_Date,
                                  o_Timesheet      => r_Timesheet) then
      
        Timesheet_Delete(r_Timesheet);
      end if;
    
      return;
    end if;
  
    if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                i_Filial_Id      => i_Filial_Id,
                                i_Staff_Id       => i_Staff_Id,
                                i_Timesheet_Date => i_Timesheet_Date,
                                o_Timesheet      => r_Timesheet) then
      r_Timesheet.Schedule_Id         := r_Plan.Schedule_Id;
      r_Timesheet.Calendar_Id         := r_Plan.Calendar_Id;
      r_Timesheet.Day_Kind            := r_Plan.Day_Kind;
      r_Timesheet.Shift_Begin_Time    := r_Plan.Shift_Begin_Time;
      r_Timesheet.Shift_End_Time      := r_Plan.Shift_End_Time;
      r_Timesheet.Input_Border        := r_Plan.Input_Border;
      r_Timesheet.Output_Border       := r_Plan.Output_Border;
      r_Timesheet.Begin_Time          := r_Plan.Begin_Time;
      r_Timesheet.End_Time            := r_Plan.End_Time;
      r_Timesheet.Break_Enabled       := r_Plan.Break_Enabled;
      r_Timesheet.Break_Begin_Time    := r_Plan.Break_Begin_Time;
      r_Timesheet.Break_End_Time      := r_Plan.Break_End_Time;
      r_Timesheet.Plan_Time           := r_Plan.Plan_Time;
      r_Timesheet.Full_Time           := r_Plan.Full_Time;
      r_Timesheet.Track_Duration      := r_Plan.Track_Duration;
      r_Timesheet.Schedule_Kind       := r_Plan.Schedule_Kind;
      r_Timesheet.Count_Late          := r_Plan.Count_Late;
      r_Timesheet.Count_Early         := r_Plan.Count_Early;
      r_Timesheet.Count_Lack          := r_Plan.Count_Lack;
      r_Timesheet.Count_Free          := r_Plan.Count_Free;
      r_Timesheet.Gps_Turnout_Enabled := r_Plan.Gps_Turnout_Enabled;
      r_Timesheet.Gps_Use_Location    := r_Plan.Gps_Use_Location;
      r_Timesheet.Gps_Max_Interval    := r_Plan.Gps_Max_Interval;
      r_Timesheet.Planned_Marks       := r_Plan.Planned_Marks;
      r_Timesheet.Done_Marks          := r_Plan.Done_Marks;
      r_Timesheet.Allowed_Late_Time   := r_Plan.Allowed_Late_Time;
      r_Timesheet.Allowed_Early_Time  := r_Plan.Allowed_Early_Time;
      r_Timesheet.Begin_Late_Time     := r_Plan.Begin_Late_Time;
      r_Timesheet.End_Early_Time      := r_Plan.End_Early_Time;
    
      z_Htt_Timesheets.Update_Row(r_Timesheet);
    
      Timesheet_Marks_Save(r_Timesheet);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Timesheet.Company_Id,
                           i_Filial_Id    => r_Timesheet.Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      if Exist_Plan_Swap(i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Staff_Id     => i_Staff_Id,
                         i_Swapped_Date => i_Timesheet_Date,
                         o_Change_Ids   => v_Change_Ids,
                         o_Change_Dates => v_Change_Dates) then
        for i in 1 .. v_Change_Ids.Count
        loop
          Update_Timesheet_Plan_Swap(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Change_Date => v_Change_Dates(i),
                                     i_Change_Id   => v_Change_Ids(i),
                                     i_Timesheet   => r_Timesheet);
        end loop;
      end if;
    else
      r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id);
    
      r_Plan.Company_Id     := i_Company_Id;
      r_Plan.Filial_Id      := i_Filial_Id;
      r_Plan.Timesheet_Id   := Htt_Next.Timesheet_Id;
      r_Plan.Staff_Id       := i_Staff_Id;
      r_Plan.Employee_Id    := r_Staff.Employee_Id;
      r_Plan.Timesheet_Date := i_Timesheet_Date;
    
      z_Htt_Timesheets.Insert_Row(r_Plan);
    
      Timesheet_Marks_Save(i_Timesheet   => r_Plan, --
                           i_Only_Insert => true);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Plan.Company_Id,
                           i_Filial_Id    => r_Plan.Filial_Id,
                           i_Timesheet_Id => r_Plan.Timesheet_Id);
    end if;
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Timesheet_Date,
                                   i_End_Date   => i_Timesheet_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Schedule_Id = i_Schedule_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Schedule_Id = Sd.Schedule_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Schedule_Days Sd
             join Htt_Schedules s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Schedule_Id = Sd.Schedule_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Schedule_Id = i_Schedule_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    -- maybe just delete all timesheets 
    -- and insert them from source, removing merge statement
    -- need to check if unchanged timesheet_id is needed
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Robot_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Robot_Id = i_Robot_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Robot_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Robot_Id = Sd.Robot_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Robot_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Robot_Id = i_Robot_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Staff_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Staff_Id = i_Staff_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Staff_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Staff_Id = Sd.Staff_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Staff_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Staff_Id = i_Staff_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculate schedule change parts for every staff inside i_year
  -- determine schedule of staff inside every part
  -- if schedule is same as i_Schedule_Id
  -- generate timesheets for that part
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  ) is
    r_Schedule   Htt_Schedules%rowtype;
    v_Year_Begin date;
    v_Year_End   date;
  begin
    r_Schedule := z_Htt_Schedules.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    if Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Staff_Schedule) or
       Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      b.Raise_Fatal('htt_core.gen_timesheet_plan: yearly generation schedule for only odinary schedules');
    end if;
  
    v_Year_Begin := Trunc(to_date(i_Year, 'yyyy'), 'y');
    v_Year_End   := Add_Months(v_Year_Begin, 12) - 1;
  
    -- make schedule change intervals 
    -- for every staff of given year
    -- filter out unnecessary schedules  
    for r in (select Qr.Period_Begin, Nvl(Qr.Period_End - 1, v_Year_End) Period_End, Qr.Staff_Id
                from (select Greatest(p.Period, v_Year_Begin) Period_Begin,
                             Lead(p.Period) --
                             Over(partition by p.Staff_Id order by p.Period) Period_End,
                             p.Trans_Id,
                             p.Staff_Id
                        from Hpd_Agreements p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                         and (p.Period between v_Year_Begin and v_Year_End or
                             p.Period = (select max(Lp.Period)
                                            from Hpd_Agreements Lp
                                           where Lp.Company_Id = p.Company_Id
                                             and Lp.Filial_Id = p.Filial_Id
                                             and Lp.Staff_Id = p.Staff_Id
                                             and Lp.Trans_Type = p.Trans_Type
                                             and Lp.Period < v_Year_Begin))) Qr
                join Hpd_Trans_Schedules q
                  on q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Trans_Id = Qr.Trans_Id
                 and q.Schedule_Id = i_Schedule_Id
               order by Qr.Staff_Id, Qr.Period_Begin)
    loop
      Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Schedule_Id => i_Schedule_Id,
                            i_Begin_Date  => r.Period_Begin,
                            i_End_Date    => r.Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    for r in (select t.Staff_Id, t.Timesheet_Date, t.Schedule_Id
                from Htt_Timesheets t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Schedule_Id = i_Schedule_Id
                 and t.Timesheet_Date member of i_Dates)
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => r.Staff_Id,
                         i_Schedule_Id    => r.Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => r.Timesheet_Date,
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  ) is
    v_Official_Rest_Day varchar2(1) := 'N';
  begin
    if Htt_Util.Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Calendar_Id => i_Calendar_Id,
                                     i_Date        => i_Timesheet_Date) then
      v_Official_Rest_Day := 'Y';
    end if;
  
    o_Has_Fd_Request := false;
  
    select w.Request_Type, --
           w.Begin_Time,
           w.End_Time,
           k.Time_Kind_Id,
           Nvl(Tk.Parent_Id, Tk.Time_Kind_Id),
           k.Allow_Unused_Time
      bulk collect
      into o_Rq_Request_Types, --
           o_Rq_Begin_Dates,
           o_Rq_End_Dates,
           o_Rq_Time_Kind_Ids,
           o_Rq_Parent_Ids,
           o_Rq_Unused_Times
      from Htt_Timesheet_Requests q
      join Htt_Requests w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Request_Id = w.Request_Id
      join Htt_Request_Kinds k
        on k.Company_Id = w.Company_Id
       and k.Request_Kind_Id = w.Request_Kind_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = k.Company_Id
       and Tk.Time_Kind_Id = k.Time_Kind_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id
       and (k.Day_Count_Type <> Htt_Pref.c_Day_Count_Type_Production_Days or
           k.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
           v_Official_Rest_Day = 'N');
  
    o_Extra_Rq_Begin_Dates := Array_Date();
    o_Extra_Rq_End_Dates   := Array_Date();
    o_Extra_Rq_Begin_Dates.Extend(o_Rq_Begin_Dates.Count);
    o_Extra_Rq_End_Dates.Extend(o_Rq_Begin_Dates.Count);
  
    for i in 1 .. o_Rq_Request_Types.Count
    loop
      o_Extra_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Extra_Begin_Time);
      o_Extra_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_Extra_End_Time);
      o_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Begin_Time);
      o_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_End_Time);
    
      if o_Rq_Request_Types(i) != Htt_Pref.c_Request_Type_Part_Of_Day then
        o_Has_Fd_Request         := true;
        o_Fd_Rq_Time_Kind_Id     := o_Rq_Time_Kind_Ids(i);
        o_Fd_Request_Unused_Time := o_Rq_Unused_Times(i);
      
        o_Rq_Begin_Dates(i) := i_Begin_Time;
        o_Rq_End_Dates(i) := i_End_Time;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Insert_Timesheet_Overtime_Facts
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Timesheet_Id     number,
    i_Staff_Id         number,
    i_Timesheet_Date   date,
    i_Overtime_Seconds number
  ) is
    v_Free_Time             number;
    v_Free_Time_Kind_Id     number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    v_Overtime_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                           i_Filial_Id      => i_Filial_Id,
                                           i_Staff_Id       => i_Staff_Id,
                                           i_Timesheet_Date => i_Timesheet_Date,
                                           i_Time_Kind_Id   => v_Free_Time_Kind_Id);
  
    if v_Free_Time is null or i_Overtime_Seconds > v_Free_Time then
      Htt_Error.Raise_003(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id,
                                                                         i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date       => i_Timesheet_Date,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Overtime_Seconds -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    end if;
  
    z_Htt_Timesheet_Facts.Insert_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Time_Kind_Id,
                                     i_Fact_Value   => i_Overtime_Seconds);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  ) is
    v_Input     date;
    v_Output    date;
    v_Free_Time number := 0;
  
    v_Has_Request            boolean := false;
    v_Rest_Time_Kind_Pcode   varchar2(20);
    v_Request_Day_Count_Type varchar2(1);
    v_Allow_Unused_Time      varchar2(1);
    v_Request_Time_Kind_Id   number(20);
  begin
    -- calc input output parts
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    end loop;
  
    -- determine rest pcode
    case p_Timesheet.Day_Kind
      when Htt_Pref.c_Day_Kind_Holiday then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Holiday;
      when Htt_Pref.c_Day_Kind_Additional_Rest then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Additional_Rest;
      when Htt_Pref.c_Day_Kind_Nonworking then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Nonworking;
      else
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Rest;
    end case;
  
    if i_Requests_Exist then
      -- load full day resuest
      begin
        select Rk.Day_Count_Type, Rk.Time_Kind_Id, Rk.Allow_Unused_Time
          into v_Request_Day_Count_Type, v_Request_Time_Kind_Id, v_Allow_Unused_Time
          from Htt_Timesheet_Requests t
          join Htt_Requests q
            on q.Company_Id = t.Company_Id
           and q.Filial_Id = t.Filial_Id
           and q.Request_Id = t.Request_Id
          join Htt_Request_Kinds Rk
            on Rk.Company_Id = q.Company_Id
           and Rk.Request_Kind_Id = q.Request_Kind_Id
         where t.Company_Id = p_Timesheet.Company_Id
           and t.Filial_Id = p_Timesheet.Filial_Id
           and t.Timesheet_Id = p_Timesheet.Timesheet_Id
           and q.Request_Type <> Htt_Pref.c_Request_Type_Part_Of_Day;
      exception
        when No_Data_Found then
          null;
      end;
    
      -- save request if its saveable
      if v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days or
         v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Htt_Util.Is_Official_Rest_Day(i_Company_Id  => p_Timesheet.Company_Id,
                                           i_Filial_Id   => p_Timesheet.Filial_Id,
                                           i_Calendar_Id => p_Timesheet.Calendar_Id,
                                           i_Date        => p_Timesheet.Timesheet_Date) then
        Gen_Timesheet_Fact(p_Facts         => p_Facts,
                           i_Company_Id    => p_Timesheet.Company_Id,
                           i_Filial_Id     => p_Timesheet.Filial_Id,
                           i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                           i_Time_Kind_Id  => v_Request_Time_Kind_Id,
                           i_Fact_Value    => p_Timesheet.Plan_Time,
                           i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      
        v_Has_Request := true;
      end if;
    end if;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Request and v_Allow_Unused_Time = 'N' then
      v_Free_Time := 0;
    end if;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time := 0;
    end if;
  
    -- save rest fact only if no request exists this day
    if v_Rest_Time_Kind_Pcode <> Htt_Pref.c_Pcode_Time_Kind_Rest or not v_Has_Request then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => v_Rest_Time_Kind_Pcode),
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  
    -- save free time fact only when it exists
    if v_Free_Time > 0 then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                         i_Fact_Value    => v_Free_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  ) is
    v_Input      date;
    v_Output     date;
    v_Late_Input date := i_Late_Input;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time         number := 0;
    v_Excused_Late_Time number := 0;
  
    v_Lack_Time    number := 0;
    v_Omitted_Time number := 0;
  
    v_Extra_Begin_Late_Time   date := i_Begin_Late_Time +
                                      Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_Extra_Late_Time         number := 0;
    v_Excused_Extra_Late_Time number := 0;
  
    v_Request_Time          number := 0;
    v_Turnout_Requests_Time number := 0;
  
    v_Free_Time  number := 0;
    v_In_Time    number := 0;
    v_Beforework number := 0;
    v_Afterwork  number := 0;
    v_Lunchtime  number := 0;
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
    v_Plan_Time          number;
  begin
    v_Extra_Begin_Late_Time := Greatest(v_Extra_Begin_Late_Time, p_Timesheet.Shift_Begin_Time);
  
    -- TEMPORARY
    v_Plan_Time := p_Timesheet.Plan_Time;
  
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Extra_Begin_Late_Time,
                         i_Extra_End_Time         => p_Timesheet.End_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    end loop;
  
    --ignore late time with requests
    if not v_Has_Fd_Request and v_Late_Input is not null then
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        if v_Rq_Begin_Dates(i) between p_Timesheet.Begin_Time and v_Extra_Begin_Late_Time then
          v_Late_Input := null;
          exit;
        end if;
      end loop;
    end if;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
    
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        end loop;
      end if;
    end loop;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      -- eval full day request
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between Least(v_Extra_Begin_Late_Time, p_Timesheet.Begin_Time) and
         p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => i_Begin_Late_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                i_End_Time         => Least(i_Begin_Late_Time,
                                                                            v_Late_Input),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            v_Late_Input),
                                                i_Input            => v_Extra_Begin_Late_Time,
                                                i_Output           => Least(i_Begin_Late_Time,
                                                                            v_Late_Input));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                          i_End_Time         => Least(i_Begin_Late_Time,
                                                                                      v_Late_Input),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      v_Late_Input),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    else
      v_Late_Time := 0;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      v_Plan_Time := v_Plan_Time - v_Request_Time;
    
      if v_Rq_Unused_Times(i) = 'N' then
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      end if;
    
      -- Temporary solutions
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Plan_Time := v_Plan_Time + v_Rq_Intimes(i);
      end if;
    end loop;
    -- TEMPORARRY  
    v_Plan_Time := Greatest(v_Plan_Time, 0);
    v_In_Time   := Least(v_In_Time, v_Plan_Time);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        else
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      
        v_Turnout_Requests_Time := v_Turnout_Requests_Time + v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_In_Time := Least(v_In_Time, p_Timesheet.Plan_Time);
  
    if v_In_Time + v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
      if v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
        v_In_Time := 0;
      else
        v_In_Time := p_Timesheet.Plan_Time - v_Turnout_Requests_Time;
      end if;
    end if;
  
    v_Omitted_Time := Greatest(p_Timesheet.Plan_Time - v_In_Time - v_Turnout_Requests_Time, 0);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id <> v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        end if;
      
        v_Request_Time := Least(v_Request_Time, v_Omitted_Time);
        v_Omitted_Time := v_Omitted_Time - v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time := v_Omitted_Time - (v_Late_Time - v_Excused_Late_Time);
    end if;
  
    v_Late_Time := v_Late_Time + v_Extra_Late_Time - v_Excused_Late_Time -
                   v_Excused_Extra_Late_Time;
    v_Free_Time := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => 0,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free_Inside),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  ) is
    v_Input        date;
    v_Output       date;
    v_Late_Input   date := i_Late_Input;
    v_Early_Output date := i_Early_Output;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time  number := 0;
    v_Early_Time number := 0;
    v_Lack_Time  number := 0;
  
    v_Extra_Late_Time          number := 0;
    v_Extra_Early_Time         number := 0;
    v_Excused_Extra_Late_Time  number := 0;
    v_Excused_Extra_Early_Time number := 0;
  
    v_Excused_Late_Time  number := 0;
    v_Excused_Early_Time number := 0;
    v_Excused_Lack_Time  number := 0;
  
    v_Begin_Late interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_End_Early  interval day to second := Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
  
    v_Begin_Late_Time date := Greatest(p_Timesheet.Shift_Begin_Time,
                                       p_Timesheet.Begin_Time + v_Begin_Late);
    v_End_Early_Time  date := Least(p_Timesheet.Shift_End_Time, p_Timesheet.End_Time + v_End_Early);
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Request_Time      number := 0;
    v_Free_Time         number := 0;
    v_In_Time           number := 0;
    v_Beforework        number := 0;
    v_Afterwork         number := 0;
    v_Lunchtime         number := 0;
    v_Used_Request_Time number := 0;
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
  begin
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Begin_Late_Time,
                         i_Extra_End_Time         => v_End_Early_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    end loop;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        end loop;
      end if;
    end loop;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between v_Begin_Late_Time and p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => p_Timesheet.Begin_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                i_End_Time         => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            Least(v_Late_Input,
                                                                                  p_Timesheet.Begin_Time)),
                                                i_Input            => v_Begin_Late_Time,
                                                i_Output           => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                          i_End_Time         => Least(v_Late_Input,
                                                                                      p_Timesheet.Begin_Time),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      Least(v_Late_Input,
                                                                                            p_Timesheet.Begin_Time)),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- calculate early time
    if v_Early_Output is not null then
      p_Timesheet.Output_Time := v_Early_Output;
    
      v_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                           i_End_Time         => p_Timesheet.End_Time,
                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                          v_Early_Output),
                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                           i_Input            => v_Early_Output,
                                           i_Output           => p_Timesheet.End_Time);
    
      v_Extra_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_End_Time         => v_End_Early_Time,
                                                 i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                v_Early_Output),
                                                 i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                 i_Input            => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_Output           => v_End_Early_Time);
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Early_Time := v_Excused_Early_Time +
                                Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                                     i_End_Time         => p_Timesheet.End_Time,
                                                     i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                    v_Early_Output),
                                                     i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                     i_Input            => v_Rq_Begin_Dates(i),
                                                     i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Early_Time := v_Excused_Extra_Early_Time +
                                      Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                          p_Timesheet.End_Time),
                                                           i_End_Time         => v_End_Early_Time,
                                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                          Greatest(v_Early_Output,
                                                                                                   p_Timesheet.End_Time)),
                                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                           i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                           i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
      else
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      
        v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
      
        if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      end if;
    
      v_Used_Request_Time := v_Used_Request_Time + v_Request_Time;
    
      v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    -- calculate lack time
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time         := p_Timesheet.Plan_Time - v_In_Time - v_Late_Time - v_Early_Time;
      v_Excused_Lack_Time := v_Used_Request_Time - v_Excused_Late_Time - v_Excused_Early_Time;
    end if;
  
    -- eval result
    v_Early_Time := v_Early_Time - v_Excused_Early_Time + v_Extra_Early_Time -
                    v_Excused_Extra_Early_Time;
    v_Late_Time  := v_Late_Time - v_Excused_Late_Time + v_Extra_Late_Time -
                    v_Excused_Extra_Late_Time;
    v_Lack_Time  := v_Lack_Time - v_Excused_Lack_Time;
    v_Free_Time  := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => v_Early_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  ) is
    r_Timesheet Htt_Timesheets%rowtype;
  begin
    if i_Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly and
       i_Time_Kind_Id <>
       Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free) and
       i_Fact_Value > 86400 then
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id);
    
      Htt_Error.Raise_004(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                   i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                   i_Staff_Id   => r_Timesheet.Staff_Id),
                          i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                          i_Time_Kind_Name => z_Htt_Time_Kinds.Load(i_Company_Id => i_Company_Id, --
                                              i_Time_Kind_Id => i_Time_Kind_Id).Name);
    end if;
  
    Htt_Util.Timesheet_Fact_Add(o_Facts        => p_Facts,
                                i_Company_Id   => i_Company_Id,
                                i_Filial_Id    => i_Filial_Id,
                                i_Timesheet_Id => i_Timesheet_Id,
                                i_Time_Kind_Id => i_Time_Kind_Id,
                                i_Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timesheet_Facts(p_Facts in out nocopy Htt_Pref.Timesheet_Fact_Nt) is
  begin
    forall i in 1 .. p_Facts.Count
      insert into Htt_Timesheet_Facts Tf
      values
        (p_Facts(i).Company_Id,
         p_Facts(i).Filial_Id,
         p_Facts(i).Timesheet_Id,
         p_Facts(i).Time_Kind_Id,
         p_Facts(i).Fact_Value);
  
    p_Facts := Htt_Pref.Timesheet_Fact_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once

  -- merger transformation rules:
  -- <ul>
  --     <li>merger exists only with flexible schedules</li>
  --     <li>only two mergers per timesheet: input/output merger</li>
  --     <li>input merger exists only when previous day is working and ends within merger area</li>
  --     <li>output merger exists only when next day is working and starts within merger area</li>
  --     <li>input merger disabled when output exists in [shift_begin - merger_interval, shift_begin]</li>
  --     <li>input merger disabled when input exists in [shift_begin, shift_begin + merger_interval]</li>
  --     <li>output merger disabled when output exists in [shift_end - merger_interval, shift_end ]</li>
  --     <li>output merger disabled when input exists in [shift_end, shift_end + merger_interval]</li>
  --     <li>only first check that falls into merger area is transformed to merger</li>
  --     <li>these rules guarantee that merger will be last input and first output in merger area</li>
  -- </ul>

  -- input transformation rules:
  -- <ul>
  --     <li>input merger must be nonexistent</li>
  --     <li>must have trans_intput track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be first track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  -- </ul>

  -- output transformation rules:
  -- <ul>
  --     <li>output merger must be nonexistent</li>
  --     <li>must have trans_output track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be last track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  --     <li>must be different from track transformed to input</li>
  -- </ul>

  -- %example 1
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 02.01.2023 09:10; #check track type
  -- then
  -- track_1_type transformed to merger
  -- track_2_type transformed to merger

  -- %example 2
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger

  -- %example 3
  -- let begin_time := shift_begin := 31.12.2023 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger  

  -- %example 4
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type remains check
  -- track_2_type remains input

  -- %example 5
  -- let begin_time := shift_begin := 31.12.2022 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2022 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type transformed to input
  -- track_2_type remains input

  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  ) is
    v_Track             Htt_Pref.Timesheet_Track_Rt;
    v_Has_Input_Merger  boolean := false;
    v_Has_Output_Merger boolean := false;
    v_Allow_Trans_Input boolean := true;
    v_Input_Merger_Idx  number;
    v_Output_Merger_Idx number;
    v_Trans_Input_Idx   number;
    v_Trans_Output_Idx  number;
    v_Merger_Interval   interval day to second := Numtodsinterval(Htt_Pref.c_Default_Merge_Border,
                                                                  'second');
    v_Check_Trans_Idxs  Array_Number := Array_Number();
    v_Check_Trans_Type  varchar2(1);
  
    v_Trans_Track_Output_Idx number;
  
    --------------------------------------------------
    Procedure Transform_To_Check(i_Allow_Potential boolean := false) is
      v_Trans_Track Htt_Pref.Timesheet_Track_Rt;
    begin
      if v_Check_Trans_Idxs.Count = 0 then
        return;
      end if;
    
      for i in 1 .. v_Check_Trans_Idxs.Count - 1
      loop
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(i));
      
        v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Check;
      
        p_Tracks(v_Check_Trans_Idxs(i)) := v_Trans_Track;
      
        p_Trans_Tracks.Extend;
        p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
      end loop;
    
      if i_Allow_Potential then
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count));
      
        if v_Trans_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
           i_Timesheet.End_Time is not null and Greatest(v_Trans_Track.Track_Datetime,
                                                         Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                                                                   i_Filial_Id  => i_Timesheet.Filial_Id)) <
           i_Timesheet.End_Time then
          v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
        
          p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count)) := v_Trans_Track;
        
          p_Trans_Tracks.Extend;
          p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
        end if;
      end if;
    end;
  
    -------------------------------------------------- 
    Procedure Transform_Gps_Output is
      v_Transformable boolean := false;
    begin
      if i_Timesheet.Gps_Turnout_Enabled = 'N' or v_Output_Merger_Idx is not null then
        return;
      end if;
    
      v_Transformable := Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id,
                                                   i_Filial_Id  => i_Timesheet.Filial_Id) <
                         i_Timesheet.Output_Border;
    
      for i in 1 .. p_Tracks.Count
      loop
        v_Track := p_Tracks(i);
      
        continue when v_Track.Track_Datetime not between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Output and v_Transformable then
          v_Track.Track_Type := Htt_Pref.c_Track_Type_Gps_Output;
        
          p_Tracks(i) := v_Track;
        
          if v_Trans_Output_Idx = i then
            p_Trans_Tracks(v_Trans_Track_Output_Idx) := v_Track;
          else
            p_Trans_Tracks.Extend;
            p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
          end if;
        end if;
      end loop;
    end;
  
  begin
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      return;
    end if;
  
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      v_Has_Input_Merger  := i_Timesheet.Shift_Begin_Time <> i_Timesheet.Input_Border;
      v_Has_Output_Merger := i_Timesheet.Shift_End_Time <> i_Timesheet.Output_Border;
    end if;
  
    for i in 1 .. p_Tracks.Count
    loop
      v_Track := p_Tracks(i);
    
      if v_Has_Input_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Input_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_Begin_Time - v_Merger_Interval and
         i_Timesheet.Shift_Begin_Time + v_Merger_Interval then
        v_Input_Merger_Idx := i;
      end if;
    
      if v_Has_Output_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and Nvl(v_Input_Merger_Idx, -1) <> i and
         v_Output_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_End_Time - v_Merger_Interval and
         i_Timesheet.Shift_End_Time + v_Merger_Interval then
        v_Output_Merger_Idx := i;
      end if;
    
      if v_Allow_Trans_Input and --
         v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Trans_Input_Idx is null and
           v_Track.Trans_Input = 'Y' then
          v_Trans_Input_Idx := i;
        else
          v_Allow_Trans_Input := false;
        end if;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        v_Trans_Output_Idx := null;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and --
           v_Track.Trans_Output = 'Y' then
          v_Trans_Output_Idx := i;
        end if;
      end if;
    
      if v_Check_Trans_Idxs.Count > 0 and
         (not Fazo.Equal(v_Check_Trans_Type, v_Track.Track_Type) or v_Track.Trans_Check = 'N') then
        Transform_To_Check;
      
        v_Check_Trans_Idxs := Array_Number();
        v_Check_Trans_Type := null;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time and
         v_Track.Track_Type in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) and
         v_Track.Trans_Check = 'Y' then
        v_Check_Trans_Type := v_Track.Track_Type;
        Fazo.Push(v_Check_Trans_Idxs, i);
      end if;
    end loop;
  
    Transform_To_Check(true);
  
    if v_Input_Merger_Idx is not null then
      v_Track := p_Tracks(v_Input_Merger_Idx);
    
      p_Tracks(v_Input_Merger_Idx) := p_Tracks(1);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_Begin_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(1) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Input_Idx := null;
    
      if v_Input_Merger_Idx = v_Trans_Output_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Output_Merger_Idx is not null then
      v_Track := p_Tracks(v_Output_Merger_Idx);
    
      p_Tracks(v_Output_Merger_Idx) := p_Tracks(p_Tracks.Count);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_End_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(p_Tracks.Count) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Output_Idx := null;
    
      if v_Output_Merger_Idx = v_Trans_Input_Idx then
        v_Trans_Input_Idx := null;
      end if;
    end if;
  
    if v_Trans_Input_Idx is not null then
      v_Track := p_Tracks(v_Trans_Input_Idx);
    
      v_Track.Track_Type := Htt_Pref.c_Track_Type_Input;
    
      p_Tracks(v_Trans_Input_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      if v_Trans_Output_Idx = v_Trans_Input_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Trans_Output_Idx is not null then
      v_Track := p_Tracks(v_Trans_Output_Idx);
    
      if Greatest(v_Track.Track_Datetime,
                  Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                            i_Filial_Id  => i_Timesheet.Filial_Id)) >
         i_Timesheet.End_Time or i_Timesheet.End_Time is null then
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Output;
      else
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
      end if;
    
      p_Tracks(v_Trans_Output_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Track_Output_Idx := p_Trans_Tracks.Count;
    end if;
  
    Transform_Gps_Output;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Trans_Tracks   in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Tracks_Exist   boolean,
    i_Requests_Exist boolean,
    i_Timeoff_Tk_Id  number
  ) is
    v_Input          date;
    v_Time_Distance  number;
    v_Track_Duration number := p_Timesheet.Track_Duration;
  
    v_Begin_Late_Time  date := p_Timesheet.Begin_Time;
    v_Late_Input       date;
    v_Early_Output     date;
    v_First_Solo_Input date;
  
    v_Maybe_Late     boolean := p_Timesheet.Count_Late = 'Y';
    v_Maybe_Early    boolean := p_Timesheet.Count_Early = 'Y';
    v_End_Early_Time date := p_Timesheet.End_Time +
                             Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
    v_Begin_Late     interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time,
                                                               'second');
  
    v_Track  Htt_Pref.Timesheet_Track_Rt;
    v_Tracks Htt_Pref.Timesheet_Track_Nt;
  
    v_Inputs        Array_Date := Array_Date();
    v_Time_Parts    Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    v_Gps_Intervals Htt_Pref.Time_Part_Nt;
  
    --------------------------------------------------
    Function Gather_Gps_Track_Intervals return Htt_Pref.Time_Part_Nt is
      v_Interval  Htt_Pref.Time_Part_Rt;
      v_Intervals Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    
      --------------------------------------------------
      Function Is_In_Polygon(i_Track Htt_Pref.Gps_Track_Data_Rt) return boolean is
      begin
        if p_Timesheet.Gps_Use_Location = 'N' then
          return true;
        end if;
      
        for r in (select q.*
                    from Htt_Locations q
                   where q.Company_Id = p_Timesheet.Company_Id
                     and q.Location_Id in
                         (select Lp.Location_Id
                            from Htt_Location_Persons Lp
                           where Lp.Company_Id = p_Timesheet.Company_Id
                             and Lp.Filial_Id = p_Timesheet.Filial_Id
                             and Lp.Person_Id = p_Timesheet.Employee_Id)
                     and exists (select 1
                            from Htt_Location_Polygon_Vertices Pv
                           where Pv.Company_Id = q.Company_Id
                             and Pv.Location_Id = q.Location_Id))
        loop
          if Htt_Geo_Util.Is_Point_In_Polygon(i_Company_Id  => r.Company_Id,
                                              i_Location_Id => r.Location_Id,
                                              i_Point_Lat   => i_Track.Lat,
                                              i_Point_Lng   => i_Track.Lng) = 'Y' then
            return true;
          end if;
        end loop;
      
        return false;
      end;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return Htt_Pref.Time_Part_Nt();
      end if;
    
      v_Interval.Input_Time  := p_Timesheet.Begin_Time;
      v_Interval.Output_Time := p_Timesheet.Begin_Time;
    
      for r in (select q.*
                  from Htt_Util.Gps_Track_Datas(i_Company_Id => p_Timesheet.Company_Id,
                                                i_Filial_Id  => p_Timesheet.Filial_Id,
                                                i_Person_Id  => p_Timesheet.Employee_Id,
                                                i_Begin_Date => p_Timesheet.Shift_Begin_Time,
                                                i_End_Date   => p_Timesheet.End_Time,
                                                i_Only_Gps   => 'N') q
                 where q.Track_Time between p_Timesheet.Begin_Time and p_Timesheet.End_Time
                 order by q.Track_Time)
      loop
        if Htt_Util.Time_Diff(i_Time1 => r.Track_Time, i_Time2 => v_Interval.Output_Time) <
           p_Timesheet.Gps_Max_Interval and Is_In_Polygon(r) then
          v_Interval.Output_Time := r.Track_Time;
        else
          if v_Interval.Input_Time <> v_Interval.Output_Time then
            v_Intervals.Extend;
            v_Intervals(v_Intervals.Count) := v_Interval;
          end if;
        
          v_Interval.Input_Time  := r.Track_Time;
          v_Interval.Output_Time := r.Track_Time;
        end if;
      end loop;
    
      if Htt_Util.Time_Diff(i_Time1 => p_Timesheet.End_Time, i_Time2 => v_Interval.Output_Time) <
         p_Timesheet.Gps_Max_Interval then
        v_Interval.Output_Time := p_Timesheet.End_Time;
      end if;
    
      if v_Interval.Input_Time <> v_Interval.Output_Time then
        v_Intervals.Extend;
        v_Intervals(v_Intervals.Count) := v_Interval;
      end if;
    
      return v_Intervals;
    end;
  
    --------------------------------------------------
    Function Trim_Time_Parts_By_Gps(i_Intervals Htt_Pref.Time_Part_Nt) return Htt_Pref.Time_Part_Nt is
      v_Gps_Intervals Htt_Pref.Time_Part_Nt;
    
      v_Track_Interval Htt_Pref.Time_Part_Rt;
      v_Gps_Interval   Htt_Pref.Time_Part_Rt;
      v_Interval       Htt_Pref.Time_Part_Rt;
    
      result Htt_Pref.Time_Part_Nt;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return i_Intervals;
      end if;
    
      if i_Intervals.Count = 0 then
        return i_Intervals;
      end if;
    
      result          := Htt_Pref.Time_Part_Nt();
      v_Gps_Intervals := Gather_Gps_Track_Intervals;
    
      for i in 1 .. i_Intervals.Count
      loop
        v_Track_Interval := i_Intervals(i);
      
        for j in 1 .. v_Gps_Intervals.Count
        loop
          v_Gps_Interval := v_Gps_Intervals(j);
        
          v_Interval.Input_Time  := Greatest(v_Gps_Interval.Input_Time, v_Track_Interval.Input_Time);
          v_Interval.Output_Time := Least(v_Gps_Interval.Output_Time, v_Track_Interval.Output_Time);
        
          if Htt_Util.Time_Diff(i_Time1 => v_Gps_Interval.Input_Time,
                                i_Time2 => v_Track_Interval.Input_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Track_Interval.Input_Time < v_Gps_Interval.Input_Time then
            v_Interval.Input_Time := v_Track_Interval.Input_Time;
          end if;
        
          if Htt_Util.Time_Diff(i_Time1 => v_Track_Interval.Output_Time,
                                i_Time2 => v_Gps_Interval.Output_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Gps_Interval.Output_Time < v_Track_Interval.Output_Time then
            v_Interval.Output_Time := v_Track_Interval.Output_Time;
          end if;
        
          if v_Interval.Input_Time < v_Interval.Output_Time then
            Result.Extend;
            result(Result.Count) := v_Interval;
          end if;
        end loop;
      end loop;
    
      return result;
    end;
  
  begin
    if p_Timesheet.Break_Enabled = 'N' then
      p_Timesheet.Break_Begin_Time := p_Timesheet.Begin_Time;
      p_Timesheet.Break_End_Time   := p_Timesheet.Begin_Time;
    end if;
  
    p_Timesheet.Input_Time  := null;
    p_Timesheet.Output_Time := null;
  
    if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
       p_Timesheet.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) then
      p_Timesheet.End_Time := p_Timesheet.Output_Border;
    end if;
  
    if i_Tracks_Exist then
      select Tt.Company_Id,
             Tt.Filial_Id,
             Tt.Timesheet_Id,
             Tt.Track_Id,
             Trunc(Tt.Track_Datetime, 'mi'),
             Tt.Track_Type,
             Tt.Trans_Input,
             Tt.Trans_Output,
             Tt.Trans_Check
        bulk collect
        into v_Tracks
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = p_Timesheet.Company_Id
         and Tt.Filial_Id = p_Timesheet.Filial_Id
         and Tt.Timesheet_Id = p_Timesheet.Timesheet_Id
       order by Tt.Track_Datetime,
                Decode(Tt.Track_Type,
                       Htt_Pref.c_Track_Type_Input,
                       1,
                       Htt_Pref.c_Track_Type_Output,
                       3,
                       2);
    
      if p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
         p_Timesheet.Plan_Time <=
         Htt_Util.Time_Diff(p_Timesheet.End_Time, p_Timesheet.Break_End_Time) then
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time, 'second');
      else
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time +
                                             Htt_Util.Time_Diff(p_Timesheet.Break_End_Time,
                                                                p_Timesheet.Break_Begin_Time),
                                             'second');
      end if;
    
      v_Begin_Late_Time := v_Begin_Late_Time + v_Begin_Late;
    
      if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Transform_Check_Tracks(p_Tracks       => v_Tracks,
                               p_Trans_Tracks => p_Trans_Tracks,
                               i_Timesheet    => p_Timesheet);
      end if;
    
      for i in 1 .. v_Tracks.Count
      loop
        v_Track := v_Tracks(i);
      
        if (v_Track.Track_Type = Htt_Pref.c_Track_Type_Input or
           v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = 1) and
           v_Track.Track_Datetime >= p_Timesheet.Input_Border and
           v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
        
          if p_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work and
             p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          elsif v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
                v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          end if;
        
          -- ignore late time
          if v_Track.Track_Datetime between p_Timesheet.Begin_Time and v_Begin_Late_Time and
             v_Begin_Late_Time > p_Timesheet.Begin_Time then
            v_Maybe_Late := false;
            v_Late_Input := null;
          end if;
        
          -- eval late time
          if v_Maybe_Late and v_Track.Track_Datetime > v_Begin_Late_Time and
             v_Track.Track_Datetime < p_Timesheet.End_Time then
            v_Late_Input := Nvl(v_Late_Input, v_Track.Track_Datetime);
          end if;
        
          Fazo.Push(v_Inputs, v_Track.Track_Datetime);
        elsif (v_Track.Track_Type in
              (Htt_Pref.c_Track_Type_Output, Htt_Pref.c_Track_Type_Gps_Output) or
              v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = v_Tracks.Count) and
              v_Inputs.Count > 0 then
        
          if v_Track.Track_Datetime >= p_Timesheet.Input_Border and
             v_Track.Track_Datetime < p_Timesheet.Shift_Begin_Time then
            p_Timesheet.Input_Time := null;
          end if;
        
          if v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
             v_Track.Track_Datetime <= p_Timesheet.Output_Border then
            for j in 1 .. v_Inputs.Count
            loop
              v_Input         := v_Inputs(j);
              v_Time_Distance := Htt_Util.Time_Diff(v_Track.Track_Datetime, v_Input);
              exit when v_Time_Distance <= v_Track_Duration;
            end loop;
          
            if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
               p_Timesheet.Input_Time between v_Input and v_Track.Track_Datetime then
              p_Timesheet.Input_Time := null;
            end if;
          
            if v_Time_Distance <= v_Track_Duration and
               (p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly or
               v_Input >= p_Timesheet.Shift_Begin_Time and v_Input < p_Timesheet.Shift_End_Time) then
              -- eval early time
              if v_Maybe_Early and v_Track.Track_Datetime < v_End_Early_Time and
                 v_Track.Track_Datetime >= p_Timesheet.Begin_Time then
                v_Early_Output := v_Track.Track_Datetime;
              end if;
            
              p_Timesheet.Input_Time := Least(Nvl(p_Timesheet.Input_Time, v_Input), v_Input);
            
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
                 p_Timesheet.Output_Time is null then
                p_Timesheet.Input_Time := v_Input;
              end if;
            
              p_Timesheet.Output_Time := v_Track.Track_Datetime;
            
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input := Greatest(v_Input, p_Timesheet.Shift_Begin_Time);
              end if;
            
              -- ignore late time
              if v_Begin_Late_Time between v_Input and v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.Begin_Time,
                                                                    p_Timesheet.Begin_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.Begin_Time,
                                                                       p_Timesheet.Begin_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Late := false;
                v_Late_Input := null;
              end if;
            
              -- ignore early time
              if v_Input < v_End_Early_Time and v_End_Early_Time <= v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.End_Time,
                                                                    p_Timesheet.End_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.End_Time,
                                                                       p_Timesheet.End_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Early  := false;
                v_Early_Output := null;
              end if;
            
              /*
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input                := Least(Greatest(v_Input, p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
                v_Track.Track_Datetime := Least(Greatest(v_Track.Track_Datetime,
                                                         p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
              end if;
              */
            
              if v_Track.Track_Type <> Htt_Pref.c_Track_Type_Gps_Output then
                v_Time_Parts.Extend;
                v_Time_Parts(v_Time_Parts.Count) := Htt_Pref.Time_Part_Rt(v_Input,
                                                                          v_Track.Track_Datetime);
              end if;
            end if;
          end if;
        
          v_Inputs           := Array_Date();
          v_First_Solo_Input := null;
        end if;
      end loop;
    
      if v_First_Solo_Input <= v_Begin_Late_Time then
        v_Late_Input := null;
      end if;
    
      if p_Timesheet.Output_Time < v_Late_Input then
        p_Timesheet.Output_Time := null;
      end if;
    end if;
  
    v_Time_Parts := Trim_Time_Parts_By_Gps(v_Time_Parts);
  
    -- timeoff exists
    if i_Timeoff_Tk_Id is null then
      if p_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
        Gen_Timesheet_Facts_Rest_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Requests_Exist => i_Requests_Exist);
      elsif p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
            p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Gen_Timesheet_Facts_Free_Day(p_Timesheet       => p_Timesheet,
                                     p_Facts           => p_Facts,
                                     i_Time_Parts      => v_Time_Parts,
                                     i_Begin_Late_Time => v_Begin_Late_Time - v_Begin_Late,
                                     i_Late_Input      => v_Late_Input,
                                     i_Requests_Exist  => i_Requests_Exist);
      else
        Gen_Timesheet_Facts_Work_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Late_Input     => v_Late_Input,
                                     i_Early_Output   => v_Early_Output,
                                     i_Requests_Exist => i_Requests_Exist);
      end if;
    else
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => i_Timeoff_Tk_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  ) is
    v_Tracks_Count    number;
    v_Requests_Count  number;
    v_Done_Mark_Count number;
  
    r_Timesheet      Htt_Timesheets%rowtype;
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    r_Timeoff        Hpd_Timeoff_Days%rowtype;
    r_Overtime       Hpd_Overtime_Days%rowtype;
    v_Facts          Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Trans_Tracks   Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
  
    v_Input_Time  date;
    v_Output_Time date;
  
    --------------------------------------------------
    Procedure Approve_Timesheet_Marks
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Timesheet_Id number
    ) is
    begin
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'N'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id;
    
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'Y'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id
         and exists (select *
                from Htt_Timesheet_Tracks Tt
               where Tt.Company_Id = Tm.Company_Id
                 and Tt.Filial_Id = Tm.Filial_Id
                 and Tt.Timesheet_Id = Tm.Timesheet_Id
                 and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                 and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time);
    end;
  
    -------------------------------------------------- 
    Function Overtime_Posted
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Overtime_Id number
    ) return boolean is
      r_Overtime Hpd_Journal_Overtimes%rowtype;
      r_Journal  Hpd_Journals%rowtype;
    begin
      r_Overtime := z_Hpd_Journal_Overtimes.Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Overtime_Id => i_Overtime_Id);
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => r_Overtime.Company_Id,
                                       i_Filial_Id  => r_Overtime.Filial_Id,
                                       i_Journal_Id => r_Overtime.Journal_Id);
    
      return r_Journal.Posted = 'Y';
    end;
  begin
    r_Timesheet := z_Htt_Timesheets.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Timesheet_Id => i_Timesheet_Id);
  
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                   i_Filial_Id      => r_Timesheet.Filial_Id,
                                   i_Staff_Id       => r_Timesheet.Staff_Id,
                                   i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
      z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => r_Timesheet.Company_Id,
                                       i_Filial_Id      => r_Timesheet.Filial_Id,
                                       i_Staff_Id       => r_Timesheet.Staff_Id,
                                       i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                                       i_Facts_Changed  => Option_Varchar2('Y'));
      return;
    end if;
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = r_Timesheet.Company_Id
       and Tf.Filial_Id = r_Timesheet.Filial_Id
       and Tf.Timesheet_Id = r_Timesheet.Timesheet_Id;
  
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Timesheet_Id = i_Timesheet_Id;
  
    select count(*)
      into v_Requests_Count
      from Htt_Timesheet_Requests Tr
     where Tr.Company_Id = i_Company_Id
       and Tr.Filial_Id = i_Filial_Id
       and Tr.Timesheet_Id = i_Timesheet_Id;
  
    if z_Hpd_Timeoff_Days.Exist_Lock(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Staff_Id     => r_Timesheet.Staff_Id,
                                     i_Timeoff_Date => r_Timesheet.Timesheet_Date,
                                     o_Row          => r_Timeoff) then
      null;
    end if;
  
    v_Input_Time  := r_Timesheet.Input_Time;
    v_Output_Time := r_Timesheet.Output_Time;
  
    Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                        p_Facts          => v_Facts,
                        p_Trans_Tracks   => v_Trans_Tracks,
                        i_Tracks_Exist   => v_Tracks_Count > 0,
                        i_Requests_Exist => v_Requests_Count > 0,
                        i_Timeoff_Tk_Id  => r_Timeoff.Time_Kind_Id);
  
    Insert_Timesheet_Facts(v_Facts);
  
    r_Overtime := z_Hpd_Overtime_Days.Take(i_Company_Id    => r_Timesheet.Company_Id,
                                           i_Filial_Id     => r_Timesheet.Filial_Id,
                                           i_Staff_Id      => r_Timesheet.Staff_Id,
                                           i_Overtime_Date => r_Timesheet.Timesheet_Date);
  
    if r_Overtime.Overtime_Seconds is not null then
      if Overtime_Posted(i_Company_Id  => r_Overtime.Company_Id,
                         i_Filial_Id   => r_Overtime.Filial_Id,
                         i_Overtime_Id => r_Overtime.Overtime_Id) then
        Insert_Timesheet_Overtime_Facts(i_Company_Id       => r_Timesheet.Company_Id,
                                        i_Filial_Id        => r_Timesheet.Filial_Id,
                                        i_Timesheet_Id     => r_Timesheet.Timesheet_Id,
                                        i_Staff_Id         => r_Timesheet.Staff_Id,
                                        i_Timesheet_Date   => r_Timesheet.Timesheet_Date,
                                        i_Overtime_Seconds => r_Overtime.Overtime_Seconds);
      end if;
    end if;
  
    -- timebook adjustment
    Save_Adjustment_Fact(i_Company_Id     => r_Timesheet.Company_Id,
                         i_Filial_Id      => r_Timesheet.Filial_Id,
                         i_Staff_Id       => r_Timesheet.Staff_Id,
                         i_Timesheet_Id   => r_Timesheet.Timesheet_Id,
                         i_Timesheet_Date => r_Timesheet.Timesheet_Date);
  
    Approve_Timesheet_Marks(i_Company_Id   => r_Timesheet.Company_Id,
                            i_Filial_Id    => r_Timesheet.Filial_Id,
                            i_Timesheet_Id => r_Timesheet.Timesheet_Id);
  
    select count(*)
      into v_Done_Mark_Count
      from Htt_Timesheet_Marks Tm
     where Tm.Company_Id = r_Timesheet.Company_Id
       and Tm.Filial_Id = r_Timesheet.Filial_Id
       and Tm.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tm.Done = 'Y';
  
    update Htt_Timesheet_Tracks Tt
       set Tt.Track_Used = 'Y'
     where Tt.Company_Id = r_Timesheet.Company_Id
       and Tt.Filial_Id = r_Timesheet.Filial_Id
       and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tt.Track_Used = 'N';
  
    forall i in 1 .. v_Trans_Tracks.Count
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type = v_Trans_Tracks(i).Track_Type
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Id = v_Trans_Tracks(i).Track_Id;
  
    z_Htt_Timesheets.Update_One(i_Company_Id   => r_Timesheet.Company_Id,
                                i_Filial_Id    => r_Timesheet.Filial_Id,
                                i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                i_Input_Time   => Option_Date(r_Timesheet.Input_Time),
                                i_Output_Time  => Option_Date(r_Timesheet.Output_Time),
                                i_Done_Marks   => Option_Number(v_Done_Mark_Count));
  
    -- send notification
    if i_Send_Notify and
       r_Timesheet.Timesheet_Date =
       Trunc(Htt_Util.Get_Current_Date(i_Company_Id => r_Timesheet.Company_Id,
                                       i_Filial_Id  => r_Timesheet.Filial_Id)) then
      if v_Input_Time is null and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Late_Time   => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Late_Time);
      end if;
    
      if not Fazo.Equal(r_Timesheet.Output_Time, v_Output_Time) and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Early_Time  => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
      end if;
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Facts is
    r_Timesheet    Htt_Timesheets%rowtype;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Timesheets   Htt_Pref.Timesheet_Nt := Htt_Pref.Timesheet_Nt();
    v_Trans_Tracks Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
  
    -------------------------------------------------- 
    Procedure Update_Timesheets
    (
      p_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
      p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt
    ) is
    begin
      forall i in 1 .. p_Timesheets.Count
        update Htt_Timesheets t
           set t.Input_Time  = p_Timesheets(i).Input_Time,
               t.Output_Time = p_Timesheets(i).Output_Time
         where t.Company_Id = p_Timesheets(i).Company_Id
           and t.Filial_Id = p_Timesheets(i).Filial_Id
           and t.Timesheet_Id = p_Timesheets(i).Timesheet_Id;
    
      forall i in 1 .. p_Trans_Tracks.Count
        update Htt_Timesheet_Tracks Tt
           set Tt.Track_Type = p_Trans_Tracks(i).Track_Type
         where Tt.Company_Id = p_Trans_Tracks(i).Company_Id
           and Tt.Filial_Id = p_Trans_Tracks(i).Filial_Id
           and Tt.Timesheet_Id = p_Trans_Tracks(i).Timesheet_Id
           and Tt.Track_Id = p_Trans_Tracks(i).Track_Id;
    
      p_Timesheets   := Htt_Pref.Timesheet_Nt();
      p_Trans_Tracks := Htt_Pref.Timesheet_Track_Nt();
    end;
  
    --------------------------------------------------
    Procedure Insert_Overtime_Days is
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Schedule_Id    number;
      v_Overtime       number;
      v_Free_Time      number;
    
      v_Company_Id            number;
      v_Company_Cnt           number;
      v_Free_Time_Kind_Id     number;
      v_Overtime_Time_Kind_Id number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Free_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    
      v_Overtime_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
    
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Schedule_Id,
             Od.Overtime_Seconds
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Schedule_Id, v_Overtime
        from Htt_Timesheets p
        join Hpd_Overtime_Days Od
          on Od.Company_Id = p.Company_Id
         and Od.Filial_Id = p.Filial_Id
         and Od.Staff_Id = p.Staff_Id
         and Od.Overtime_Date = p.Timesheet_Date
       where exists (select *
                from Hpd_Journal_Overtimes q
                join Hpd_Journals p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Journal_Id = q.Journal_Id
                 and p.Posted = 'Y'
               where q.Company_Id = Od.Company_Id
                 and q.Filial_Id = Od.Filial_Id
                 and q.Overtime_Id = Od.Overtime_Id)
         and exists (select 1
                from Htt_Dirty_Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Timesheet_Id = p.Timesheet_Id)
         and Nvl((select sum(Tf.Fact_Value)
                   from Htt_Timesheet_Facts Tf
                   join Htt_Time_Kinds Tk
                     on Tk.Company_Id = v_Company_Id
                    and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = v_Free_Time_Kind_Id
                    and Tk.Time_Kind_Id = Tf.Time_Kind_Id
                  where Tf.Company_Id = p.Company_Id
                    and Tf.Filial_Id = p.Filial_Id
                    and Tf.Timesheet_Id = p.Timesheet_Id),
                 0) < Od.Overtime_Seconds
         and Rownum = 1;
    
      v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => v_Company_Id,
                                             i_Filial_Id      => v_Filial_Id,
                                             i_Staff_Id       => v_Staff_Id,
                                             i_Timesheet_Date => v_Timesheet_Date,
                                             i_Time_Kind_Id   => v_Free_Time_Kind_Id);
    
      Htt_Error.Raise_005(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                         i_Filial_Id  => v_Filial_Id,
                                                                         i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date       => v_Timesheet_Date,
                          i_Schedule_Name        => z_Htt_Schedules.Load(i_Company_Id => v_Company_Id, --
                                                    i_Filial_Id => v_Filial_Id, --
                                                    i_Schedule_Id => v_Schedule_Id).Name,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => v_Overtime -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    
    exception
      when No_Data_Found then
        insert into Htt_Timesheet_Facts
          (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
          (select t.Company_Id,
                  t.Filial_Id,
                  t.Timesheet_Id,
                  v_Overtime_Time_Kind_Id,
                  Od.Overtime_Seconds
             from Htt_Timesheets t
             join Hpd_Overtime_Days Od
               on Od.Company_Id = t.Company_Id
              and Od.Filial_Id = t.Filial_Id
              and Od.Staff_Id = t.Staff_Id
              and Od.Overtime_Date = t.Timesheet_Date
            where exists (select *
                     from Hpd_Journal_Overtimes q
                     join Hpd_Journals p
                       on p.Company_Id = q.Company_Id
                      and p.Filial_Id = q.Filial_Id
                      and p.Journal_Id = q.Journal_Id
                      and p.Posted = 'Y'
                    where q.Company_Id = Od.Company_Id
                      and q.Filial_Id = Od.Filial_Id
                      and q.Overtime_Id = Od.Overtime_Id)
              and exists (select 1
                     from Htt_Dirty_Timesheets w
                    where w.Company_Id = t.Company_Id
                      and w.Filial_Id = t.Filial_Id
                      and w.Timesheet_Id = t.Timesheet_Id));
    end;
  
    --------------------------------------------------
    Procedure Insert_Timebook_Adjustments is
      v_Company_Id          number;
      v_Company_Cnt         number;
      v_Turnout_Adjustment  number;
      v_Overtime_Adjustment number;
      v_Lack_Tk_Id          number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
      v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
      v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
    
      insert all --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Turnout_Adjustment, Turnout_Time * 60) --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Overtime_Adjustment, Overtime * 60)
        select q.Company_Id,
               q.Filial_Id,
               q.Timesheet_Id,
               (select a.Overtime
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Overtime,
               (select a.Turnout_Time
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Turnout_Time
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets q
            on q.Company_Id = Dt.Company_Id
           and q.Filial_Id = Dt.Filial_Id
           and q.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = q.Company_Id
           and La.Filial_Id = q.Filial_Id
           and La.Staff_Id = q.Staff_Id
           and La.Adjustment_Date = q.Timesheet_Date;
    
      update (select Df.Fact_Value,
                     (select Tf.Fact_Value
                        from Htt_Timesheet_Facts Tf
                       where Tf.Company_Id = Dt.Company_Id
                         and Tf.Filial_Id = Dt.Filial_Id
                         and Tf.Timesheet_Id = Dt.Timesheet_Id
                         and Tf.Time_Kind_Id = v_Lack_Tk_Id) New_Value
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = Tm.Company_Id
                 and Df.Filial_Id = Tm.Filial_Id
                 and Df.Staff_Id = Tm.Staff_Id
                 and Df.Adjustment_Date = Tm.Timesheet_Date
                 and Df.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Nvl(q.New_Value, 0);
    
      insert into Hpd_Adjustment_Deleted_Facts
        (Company_Id, Filial_Id, Staff_Id, Adjustment_Date, Time_Kind_Id, Fact_Value)
        select Tf.Company_Id,
               Tf.Filial_Id,
               Tm.Staff_Id,
               Tm.Timesheet_Date,
               Tf.Time_Kind_Id,
               Tf.Fact_Value
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets Tm
            on Tm.Company_Id = Dt.Company_Id
           and Tm.Filial_Id = Dt.Filial_Id
           and Tm.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = Tm.Company_Id
           and La.Filial_Id = Tm.Filial_Id
           and La.Staff_Id = Tm.Staff_Id
           and La.Adjustment_Date = Tm.Timesheet_Date
           and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
          join Htt_Timesheet_Facts Tf
            on Tf.Company_Id = Dt.Company_Id
           and Tf.Filial_Id = Dt.Filial_Id
           and Tf.Timesheet_Id = Dt.Timesheet_Id
           and Tf.Time_Kind_Id = v_Lack_Tk_Id
         where not exists (select 1
                  from Hpd_Adjustment_Deleted_Facts p
                 where p.Company_Id = Tm.Company_Id
                   and p.Filial_Id = Tm.Filial_Id
                   and p.Staff_Id = Tm.Staff_Id
                   and p.Adjustment_Date = Tm.Timesheet_Date
                   and p.Time_Kind_Id = v_Lack_Tk_Id);
    
      update (select Tf.Fact_Value,
                     (select Pa.Turnout_Time * 60
                        from Hpd_Page_Adjustments Pa
                       where Pa.Company_Id = La.Company_Id
                         and Pa.Filial_Id = La.Filial_Id
                         and Pa.Page_Id = La.Page_Id) Turnout_Time
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Lock_Adjustments La
                  on La.Company_Id = Tm.Company_Id
                 and La.Filial_Id = Tm.Filial_Id
                 and La.Staff_Id = Tm.Staff_Id
                 and La.Adjustment_Date = Tm.Timesheet_Date
                 and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
                join Htt_Timesheet_Facts Tf
                  on Tf.Company_Id = Dt.Company_Id
                 and Tf.Filial_Id = Dt.Filial_Id
                 and Tf.Timesheet_Id = Dt.Timesheet_Id
                 and Tf.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Greatest(q.Fact_Value - Nvl(q.Turnout_Time, 0), 0);
    end;
  begin
    delete Htt_Timesheet_Facts Tf
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id);
  
    for r in (select t.*,
                     (select Td.Time_Kind_Id
                        from Hpd_Timeoff_Days Td
                       where Td.Company_Id = t.Company_Id
                         and Td.Filial_Id = t.Filial_Id
                         and Td.Staff_Id = t.Staff_Id
                         and Td.Timeoff_Date = t.Timesheet_Date) Timeoff_Tk_Id,
                     (select count(*)
                        from Htt_Timesheet_Tracks Tt
                       where Tt.Company_Id = t.Company_Id
                         and Tt.Filial_Id = t.Filial_Id
                         and Tt.Timesheet_Id = t.Timesheet_Id) Tracks_Count,
                     (select count(*)
                        from Htt_Timesheet_Requests Tr
                       where Tr.Company_Id = t.Company_Id
                         and Tr.Filial_Id = t.Filial_Id
                         and Tr.Timesheet_Id = t.Timesheet_Id) Requests_Count
                from Htt_Timesheets t
                join Htt_Dirty_Timesheets Dt
                  on t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
    loop
      z_Htt_Timesheets.Init(p_Row                 => r_Timesheet,
                            i_Company_Id          => r.Company_Id,
                            i_Filial_Id           => r.Filial_Id,
                            i_Timesheet_Id        => r.Timesheet_Id,
                            i_Timesheet_Date      => r.Timesheet_Date,
                            i_Staff_Id            => r.Staff_Id,
                            i_Employee_Id         => r.Employee_Id,
                            i_Schedule_Id         => r.Schedule_Id,
                            i_Day_Kind            => r.Day_Kind,
                            i_Begin_Time          => r.Begin_Time,
                            i_End_Time            => r.End_Time,
                            i_Break_Enabled       => r.Break_Enabled,
                            i_Break_Begin_Time    => r.Break_Begin_Time,
                            i_Break_End_Time      => r.Break_End_Time,
                            i_Plan_Time           => r.Plan_Time,
                            i_Full_Time           => r.Full_Time,
                            i_Input_Time          => null,
                            i_Output_Time         => null,
                            i_Track_Duration      => r.Track_Duration,
                            i_Schedule_Kind       => r.Schedule_Kind,
                            i_Count_Late          => r.Count_Late,
                            i_Count_Early         => r.Count_Early,
                            i_Count_Lack          => r.Count_Lack,
                            i_Count_Free          => r.Count_Free,
                            i_Gps_Turnout_Enabled => r.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r.Gps_Use_Location,
                            i_Gps_Max_Interval    => r.Gps_Max_Interval,
                            i_Shift_Begin_Time    => r.Shift_Begin_Time,
                            i_Shift_End_Time      => r.Shift_End_Time,
                            i_Input_Border        => r.Input_Border,
                            i_Output_Border       => r.Output_Border,
                            i_Calendar_Id         => r.Calendar_Id,
                            i_Allowed_Late_Time   => r.Allowed_Late_Time,
                            i_Allowed_Early_Time  => r.Allowed_Early_Time,
                            i_Begin_Late_Time     => r.Begin_Late_Time,
                            i_End_Early_Time      => r.End_Early_Time);
    
      Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                          p_Facts          => v_Facts,
                          p_Trans_Tracks   => v_Trans_Tracks,
                          i_Tracks_Exist   => r.Tracks_Count > 0,
                          i_Requests_Exist => r.Requests_Count > 0,
                          i_Timeoff_Tk_Id  => r.Timeoff_Tk_Id);
    
      Htt_Util.Timesheet_Add(o_Timesheets   => v_Timesheets,
                             i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id,
                             i_Input_Time   => r_Timesheet.Input_Time,
                             i_Output_Time  => r_Timesheet.Output_Time);
    
      if v_Facts.Count > 10000 then
        Insert_Timesheet_Facts(v_Facts);
      end if;
    
      if v_Timesheets.Count > 10000 then
        Update_Timesheets(p_Timesheets   => v_Timesheets, --
                          p_Trans_Tracks => v_Trans_Tracks);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(v_Facts);
  
    Update_Timesheets(p_Timesheets   => v_Timesheets, --
                      p_Trans_Tracks => v_Trans_Tracks);
  
    Insert_Overtime_Days;
    Insert_Timebook_Adjustments;
  end;

  ----------------------------------------------------------------------------------------------------
  -- o'zgartirish kerak structurani
  -- adashib ketish ehtimolligi juda katta
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    v_Begin_Date date;
    v_End_Date   date;
    v_Timesheet  Htt_Timesheets%rowtype;
  
    r_Request  Htt_Requests%rowtype;
    r_Timebook Hpr_Timebooks%rowtype;
  
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Code_Aat;
    --------------------------------------------------
    Procedure Put_Timesheet_Ids is
    begin
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        f_Timesheet_Sets(v_Timesheet_Ids(i)) := true;
      end loop;
    end;
  
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    v_Begin_Date := Trunc(r_Request.Begin_Time);
    v_End_Date   := Trunc(r_Request.End_Time);
  
    while v_Begin_Date <= v_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Request.Company_Id,
                                     i_Filial_Id      => r_Request.Filial_Id,
                                     i_Staff_Id       => r_Request.Staff_Id,
                                     i_Timesheet_Date => v_Begin_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Request.Company_Id,
                                            i_Filial_Id      => r_Request.Filial_Id,
                                            i_Staff_Id       => r_Request.Staff_Id,
                                            i_Timesheet_Date => v_Begin_Date);
      
        Htt_Error.Raise_006(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                                      i_Filial_Id  => r_Request.Filial_Id,
                                                                      i_Staff_Id   => r_Request.Staff_Id),
                            i_Timesheet_Date  => v_Begin_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      v_Begin_Date := v_Begin_Date + 1;
    end loop;
  
    -- buni mexanizmni fix qilish kerak, hozir butun staff lock bo'lib qoladi, buni htt o'zi uchun qilish kerak
    z_Href_Staffs.Lock_Only(i_Company_Id => r_Request.Company_Id,
                            i_Filial_Id  => r_Request.Filial_Id,
                            i_Staff_Id   => r_Request.Staff_Id);
  
    delete Htt_Timesheet_Requests q
     where q.Company_Id = r_Request.Company_Id
       and q.Request_Id = r_Request.Request_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    Put_Timesheet_Ids;
  
    if r_Request.Status = Htt_Pref.c_Request_Status_Completed then
      if r_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        v_Timesheet_Ids := Find_Request_Timesheets(i_Company_Id    => r_Request.Company_Id,
                                                   i_Filial_Id     => r_Request.Filial_Id,
                                                   i_Staff_Id      => r_Request.Staff_Id,
                                                   i_Request_Begin => r_Request.Begin_Time,
                                                   i_Request_End   => r_Request.End_Time);
      
      elsif r_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day then
        if Htt_Util.Exist_Timesheet(i_Company_Id     => r_Request.Company_Id,
                                    i_Filial_Id      => r_Request.Filial_Id,
                                    i_Staff_Id       => r_Request.Staff_Id,
                                    i_Timesheet_Date => Trunc(r_Request.Begin_Time),
                                    o_Timesheet      => v_Timesheet) then
          v_Timesheet_Ids := Array_Number(v_Timesheet.Timesheet_Id);
        end if;
      else
        v_Begin_Date := Trunc(r_Request.Begin_Time);
        v_End_Date   := Trunc(r_Request.End_Time);
      
        select q.Timesheet_Id
          bulk collect
          into v_Timesheet_Ids
          from Htt_Timesheets q
         where q.Company_Id = r_Request.Company_Id
           and q.Filial_Id = r_Request.Filial_Id
           and q.Staff_Id = r_Request.Staff_Id
           and q.Timesheet_Date between v_Begin_Date and v_End_Date;
      
      end if;
    
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        z_Htt_Timesheet_Requests.Insert_Try(i_Company_Id   => r_Request.Company_Id,
                                            i_Filial_Id    => r_Request.Filial_Id,
                                            i_Timesheet_Id => v_Timesheet_Ids(i),
                                            i_Request_Id   => r_Request.Request_Id);
      end loop;
    
      Put_Timesheet_Ids;
    end if;
  
    v_Timesheet.Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet.Timesheet_Id is not null
    loop
      Gen_Timesheet_Facts(i_Company_Id   => r_Request.Company_Id, --
                          i_Filial_Id    => r_Request.Filial_Id,
                          i_Timesheet_Id => v_Timesheet.Timesheet_Id);
    
      v_Timesheet.Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet.Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  ) is
    v_Turnout_Id   number;
    v_Lack_Id      number;
    v_Time_Kind_Id number;
    v_Turnout_Time number;
    v_Fact_Value   number;
    v_Turnout_Ids  Array_Number;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
  begin
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = i_Company_Id
       and Tf.Filial_Id = i_Filial_Id
       and (Tf.Time_Kind_Id not member of v_Turnout_Ids or Tf.Fact_Value = 0)
       and exists (select *
              from Hpd_Timeoff_Days Td
             where Td.Company_Id = i_Company_Id
               and Td.Filial_Id = i_Filial_Id
               and Td.Timeoff_Id = i_Timeoff_Id
               and exists (select *
                      from Htt_Timesheets t
                     where t.Company_Id = Td.Company_Id
                       and t.Filial_Id = Td.Filial_Id
                       and t.Staff_Id = Td.Staff_Id
                       and t.Timesheet_Date = Td.Timeoff_Date
                       and t.Timesheet_Id = Tf.Timesheet_Id));
  
    for r in (select t.Staff_Id,
                     t.Timesheet_Date,
                     t.Timesheet_Id,
                     t.Plan_Time,
                     t.Count_Lack,
                     Td.Time_Kind_Id,
                     t.Schedule_Kind,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = Td.Company_Id
                            and Tl.Filial_Id = Td.Filial_Id
                            and Tl.Staff_Id = Td.Staff_Id
                            and Tl.Timesheet_Date = Td.Timeoff_Date),
                         'N') Locked
                from Htt_Timesheets t
                join Hpd_Timeoff_Days Td
                  on Td.Company_Id = t.Company_Id
                 and Td.Filial_Id = t.Filial_Id
                 and Td.Staff_Id = t.Staff_Id
                 and Td.Timeoff_Date = t.Timesheet_Date
               where Td.Company_Id = i_Company_Id
                 and Td.Filial_Id = i_Filial_Id
                 and Td.Timeoff_Id = i_Timeoff_Id)
    loop
      if r.Locked = 'Y' then
        v_Turnout_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Staff_Id       => r.Staff_Id,
                                                  i_Timesheet_Date => r.Timesheet_Date,
                                                  i_Time_Kind_Id   => v_Turnout_Id);
      
        v_Fact_Value := r.Plan_Time - v_Turnout_Time;
      
        if i_Remove_Timeoff then
          v_Time_Kind_Id := v_Lack_Id;
        
          if r.Count_Lack = 'N' then
            v_Fact_Value := 0;
          end if;
        else
          v_Time_Kind_Id := r.Time_Kind_Id;
        end if;
      
        Gen_Timesheet_Fact(p_Facts         => v_Facts,
                           i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Timesheet_Id  => r.Timesheet_Id,
                           i_Time_Kind_Id  => v_Time_Kind_Id,
                           i_Fact_Value    => v_Fact_Value,
                           i_Schedule_Kind => r.Schedule_Kind);
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Timesheet_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(v_Facts);
  end;

  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      Insert_Timesheet_Overtime_Facts(i_Company_Id       => Od.Company_Id,
                                      i_Filial_Id        => Od.Filial_Id,
                                      i_Timesheet_Id     => Od.Timesheet_Id,
                                      i_Staff_Id         => Od.Staff_Id,
                                      i_Timesheet_Date   => Od.Overtime_Date,
                                      i_Overtime_Seconds => Od.Overtime_Seconds);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
    v_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => Od.Company_Id,
                                       i_Filial_Id    => Od.Filial_Id,
                                       i_Timesheet_Id => Od.Timesheet_Id,
                                       i_Time_Kind_Id => v_Time_Kind_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  ) is
    v_Turnout_Adjustment_Id  number;
    v_Overtime_Adjustment_Id number;
    v_Lack_Tk_Id             number;
    r_Fact                   Htt_Timesheet_Facts%rowtype;
  begin
    v_Turnout_Adjustment_Id  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id             := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select (select a.Overtime
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Overtime,
                     (select a.Turnout_Time
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Turnout_Time,
                     q.Kind,
                     q.Staff_Id,
                     q.Adjustment_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Adjustment_Date = i_Timesheet_Date)
    loop
      continue when r.Overtime is null or r.Turnout_Time is null;
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Adjustment_Id,
                                     i_Fact_Value   => r.Overtime * 60);
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Turnout_Adjustment_Id,
                                     i_Fact_Value   => r.Turnout_Time * 60);
    
      if r.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete and r.Turnout_Time > 0 and
         z_Htt_Timesheet_Facts.Exist_Lock(i_Company_Id   => i_Company_Id,
                                          i_Filial_Id    => i_Filial_Id,
                                          i_Timesheet_Id => i_Timesheet_Id,
                                          i_Time_Kind_Id => v_Lack_Tk_Id,
                                          o_Row          => r_Fact) then
        z_Hpd_Adjustment_Deleted_Facts.Save_One(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => r.Staff_Id,
                                                i_Adjustment_Date => r.Adjustment_Date,
                                                i_Time_Kind_Id    => v_Lack_Tk_Id,
                                                i_Fact_Value      => Nvl(r_Fact.Fact_Value, 0));
      
        if r_Fact.Fact_Value > 0 then
          z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id,
                                           i_Time_Kind_Id => v_Lack_Tk_Id,
                                           i_Fact_Value   => Option_Number(Greatest(r_Fact.Fact_Value -
                                                                                    r.Turnout_Time * 60,
                                                                                    0)));
        end if;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    v_Used_Count   number;
    v_Tracks_Count number;
    v_Track_Status varchar2(1);
  begin
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id;
  
    select count(*)
      into v_Used_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id
       and Tt.Track_Used = 'Y';
  
    case
      when v_Tracks_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Draft;
      when v_Used_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Not_Used;
      when v_Used_Count < v_Tracks_Count then
        v_Track_Status := Htt_Pref.c_Track_Status_Partially_Used;
      else
        v_Track_Status := Htt_Pref.c_Track_Status_Used;
    end case;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(v_Track_Status));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  ) is
    r_Track         Htt_Timesheet_Tracks%rowtype;
    v_Timesheet_Ids Array_Number := Array_Number();
    v_Track_Date    date := Trunc(i_Track_Datetime);
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    r_Track.Company_Id     := i_Company_Id;
    r_Track.Filial_Id      := i_Filial_Id;
    r_Track.Track_Id       := i_Track_Id;
    r_Track.Track_Datetime := i_Track_Datetime;
    r_Track.Track_Type     := i_Track_Type;
    r_Track.Track_Used     := 'N';
    r_Track.Trans_Input    := i_Trans_Input;
    r_Track.Trans_Output   := i_Trans_Output;
    r_Track.Trans_Check    := i_Trans_Check;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.State = 'A'
                 and q.Hiring_Date <= v_Track_Date
                 and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Track_Date))
    loop
      v_Timesheet_Ids := v_Timesheet_Ids multiset union
                         Find_Track_Timesheets(i_Company_Id     => i_Company_Id,
                                               i_Filial_Id      => i_Filial_Id,
                                               i_Staff_Id       => r.Staff_Id,
                                               i_Track_Datetime => i_Track_Datetime);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Track.Timesheet_Id := v_Timesheet_Ids(i);
    
      z_Htt_Timesheet_Tracks.Save_Row(r_Track);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type =
             (select t.Track_Type
                from Htt_Tracks t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Track_Id = Tt.Track_Id)
       where Tt.Company_Id = i_Company_Id
         and Tt.Filial_Id = i_Filial_Id
         and Tt.Timesheet_Id = v_Timesheet_Ids(i);
    
      Gen_Timesheet_Facts(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Timesheet_Id => v_Timesheet_Ids(i),
                          i_Send_Notify  => true);
    end loop;
  
    Track_Update_Status(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Track_Id   => i_Track_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  ) is
    r_Timesheet     Htt_Timesheets%rowtype;
    r_Timebook      Hpr_Timebooks%rowtype;
    v_Timesheet_Ids Array_Number;
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    -- unused tracks are free for deletion
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
       and q.Track_Used = 'N';
  
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    delete from Htt_Potential_Outputs Pt
     where Pt.Company_Id = i_Company_Id
       and Pt.Filial_Id = i_Filial_Id
       and Pt.Track_Id = i_Track_Id;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                     i_Filial_Id      => r_Timesheet.Filial_Id,
                                     i_Staff_Id       => r_Timesheet.Staff_Id,
                                     i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Timesheet.Company_Id,
                                            i_Filial_Id      => r_Timesheet.Filial_Id,
                                            i_Staff_Id       => r_Timesheet.Staff_Id,
                                            i_Timesheet_Date => r_Timesheet.Timesheet_Date);
      
        Htt_Error.Raise_007(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                      i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                      i_Staff_Id   => r_Timesheet.Staff_Id),
                            i_Timesheet_Date  => r_Timesheet.Timesheet_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Ids(i));
    end loop;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(Htt_Pref.c_Track_Status_Draft));
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype) is
    r_Track Htt_Trash_Tracks%rowtype;
  begin
    return;
    z_Htt_Trash_Tracks.Init(p_Row            => r_Track,
                            i_Company_Id     => i_Track.Company_Id,
                            i_Filial_Id      => i_Track.Filial_Id,
                            i_Track_Id       => i_Track.Track_Id,
                            i_Track_Date     => i_Track.Track_Date,
                            i_Track_Time     => i_Track.Track_Time,
                            i_Track_Datetime => i_Track.Track_Datetime,
                            i_Person_Id      => i_Track.Person_Id,
                            i_Track_Type     => i_Track.Track_Type,
                            i_Mark_Type      => i_Track.Mark_Type,
                            i_Device_Id      => i_Track.Device_Id,
                            i_Location_Id    => i_Track.Location_Id,
                            i_Latlng         => i_Track.Latlng,
                            i_Accuracy       => i_Track.Accuracy,
                            i_Photo_Sha      => i_Track.Photo_Sha,
                            i_Note           => i_Track.Note,
                            i_Is_Valid       => i_Track.Is_Valid);
  
    z_Htt_Trash_Tracks.Insert_Row(r_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Periods Href_Pref.Period_Nt;
  
    --------------------------------------------------
    Procedure Move_Tracks_To_Trash
    (
      i_Begin_Date date,
      i_End_Date   date
    ) is
    begin
      for r in (select *
                  from Htt_Tracks Ht
                 where Ht.Company_Id = i_Company_Id
                   and Ht.Filial_Id = i_Filial_Id
                   and Ht.Person_Id = i_Person_Id
                   and Ht.Track_Date between i_Begin_Date and i_End_Date)
      loop
        Trash_Track_Insert(r);
      
        z_Htt_Tracks.Delete_One(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Track_Id   => r.Track_Id);
      end loop;
    end;
  begin
    return;
    v_Periods := Htt_Util.Track_Not_Accepted_Periods(i_Company_Id  => i_Company_Id,
                                                     i_Filial_Id   => i_Filial_Id,
                                                     i_Employee_Id => i_Person_Id);
  
    for i in 1 .. v_Periods.Count
    loop
      Move_Tracks_To_Trash(i_Begin_Date => v_Periods(i).Period_Begin,
                           i_End_Date   => v_Periods(i).Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  
    select 'x'
      into v_Dummy
      from Htt_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin htt_core.notify_person_changes; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes is
  begin
    for r in (select *
                from Htt_Dirty_Persons)
    loop
      Htt_Global.w_Person.Company_Id := r.Company_Id;
      Htt_Global.w_Person.Person_Id  := r.Person_Id;
    
      b.Notify_Watchers(i_Watching_Expr => 'htt_global.w_person',
                        i_Expr_Type     => 'htt_global.person_rt');
    end loop;
  
    delete Htt_Dirty_Persons;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
  begin
    z_Htt_Timesheet_Locks.Insert_One(i_Company_Id     => i_Company_Id,
                                     i_Filial_Id      => i_Filial_Id,
                                     i_Staff_Id       => i_Staff_Id,
                                     i_Timesheet_Date => i_Timesheet_Date,
                                     i_Facts_Changed  => 'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
    v_Facts_Changed    varchar2(1);
    v_Unused_Track_Ids Array_Number;
    r_Timesheet        Htt_Timesheets%rowtype;
  begin
    delete Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date = i_Timesheet_Date
    returning Tl.Facts_Changed into v_Facts_Changed;
  
    if v_Facts_Changed = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => i_Timesheet_Date);
    
      select Tt.Track_Id
        bulk collect
        into v_Unused_Track_Ids
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Used = 'N';
    
      -- regen facts
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      -- change unused tracks status
      for i in 1 .. v_Unused_Track_Ids.Count
      loop
        Track_Update_Status(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => v_Unused_Track_Ids(i));
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    v_Staff_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    v_Begin_Date        date := Trunc(i_Begin_Date);
    v_End_Date          date := Trunc(i_End_Date);
  begin
    if i_Schedule_Id = v_Robot_Schedule_Id then
      return;
    end if;
  
    if v_End_Date is null then
      -- user wants to regenerate all timesheets
      -- take max available schedule date for this schedule
      -- and delete all timesheets after this date
      if i_Schedule_Id = v_Staff_Schedule_Id then
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Staff_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Staff_Id = i_Staff_Id
           and d.Schedule_Date >= v_Begin_Date;
      else
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Schedule_Id = i_Schedule_Id
           and d.Schedule_Date >= v_Begin_Date;
      end if;
    
      if v_End_Date is null then
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_Begin_Date - 1);
      else
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_End_Date);
      end if;
    
      v_End_Date := Nvl(v_End_Date, v_Begin_Date);
    end if;
  
    if i_Schedule_Id is null then
      delete Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and v_End_Date;
    end if;
  
    if i_Schedule_Id = v_Staff_Schedule_Id then
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => v_End_Date);
    else
      Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Schedule_Id => i_Schedule_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => v_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    for i in 1 .. i_Dates.Count
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => i_Staff_Id,
                         i_Schedule_Id    => i_Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => i_Dates(i),
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  ) is
  begin
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date > i_Lower_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    z_Htt_Acms_Commands.Insert_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => Htt_Next.Acms_Command_Id,
                                   i_Device_Id        => i_Device_Id,
                                   i_Command_Kind     => i_Command_Kind,
                                   i_Person_Id        => i_Person_Id,
                                   i_Data             => i_Data,
                                   i_Status           => Htt_Pref.c_Command_Status_New,
                                   i_State_Changed_On => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance is
    v_Total_Distance number;
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System,
                       (select i.Filial_Head
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) Filial_Head
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      for r in (select q.Company_Id, q.Filial_Id
                  from Md_Filials q
                 where q.Company_Id = Cmp.Company_Id
                   and q.Filial_Id <> Cmp.Filial_Head
                   and q.State = 'A')
      loop
        Biruni_Route.Context_Begin;
      
        Ui_Context.Init(i_User_Id      => Cmp.User_System,
                        i_Filial_Id    => r.Filial_Id,
                        i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
      
        for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                     from Htt_Gps_Tracks q
                    where q.Company_Id = r.Company_Id
                      and q.Filial_Id = r.Filial_Id
                      and q.Calculated = 'N')
        loop
          v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => r.Company_Id,
                                                               i_Filial_Id  => r.Filial_Id,
                                                               i_Person_Id  => Gt.Person_Id,
                                                               i_Track_Date => Gt.Track_Date);
        
          z_Htt_Gps_Tracks.Update_One(i_Company_Id     => r.Company_Id,
                                      i_Filial_Id      => r.Filial_Id,
                                      i_Track_Id       => Gt.Track_Id,
                                      i_Total_Distance => Option_Number(v_Total_Distance),
                                      i_Calculated     => Option_Varchar2('Y'));
        end loop;
      
        Biruni_Route.Context_End;
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_Person_Ids Array_Number;
    v_Date       date := Trunc(sysdate);
  begin
    select w.Employee_Id
      bulk collect
      into v_Person_Ids
      from Href_Staffs w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.State = 'A'
       and w.Hiring_Date <= v_Date
       and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
       and exists (select 1
              from Htt_Location_Divisions q
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Location_Id = i_Location_Id
               and w.Division_Id = q.Division_Id)
     group by w.Employee_Id;
  
    for i in 1 .. v_Person_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => i_Location_Id,
                          i_Person_Id   => v_Person_Ids(i),
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Location_Id = i_Location_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Person_Id not in (select *
                                           from table(v_Person_Ids)))
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Date         date := Trunc(sysdate);
  
    --------------------------------------------------
    Function Exists_Location_Person return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Person_Id = i_Person_Id
         and p.Attach_Type = Htt_Pref.c_Attach_Type_Auto
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Function Exists_Active_Staff(i_Date date) return boolean is
      v_Staff_Id number;
    begin
      v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Employee_Id => i_Person_Id,
                                                   i_Date        => i_Date);
    
      return v_Staff_Id is not null;
    end;
  begin
    if not Exists_Active_Staff(v_Date) and not Exists_Location_Person then
      return;
    end if;
  
    select q.Location_Id
      bulk collect
      into v_Location_Ids
      from Htt_Location_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select 1
              from Href_Staffs w
             where w.Company_Id = q.Company_Id
               and w.Filial_Id = q.Filial_Id
               and w.Division_Id = q.Division_Id
               and w.Employee_Id = i_Person_Id
               and w.Hiring_Date <= v_Date
               and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
               and w.State = 'A')
     group by q.Location_Id;
  
    for i in 1 .. v_Location_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => v_Location_Ids(i),
                          i_Person_Id   => i_Person_Id,
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Person_Id = i_Person_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Location_Id not member of v_Location_Ids)
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  ) is
    r_Location_Person Htt_Location_Persons%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
    v_Exists          boolean;
  begin
    v_Exists := z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Location_Id => i_Location_Id,
                                                  i_Person_Id   => i_Person_Id,
                                                  o_Row         => r_Location_Person);
  
    if not v_Exists or i_Attach_Type = Htt_Pref.c_Attach_Type_Manual or
       r_Location_Person.Attach_Type = Htt_Pref.c_Attach_Type_Global and
       i_Attach_Type = Htt_Pref.c_Attach_Type_Auto then
      z_Htt_Location_Persons.Save_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id,
                                      i_Person_Id   => i_Person_Id,
                                      i_Attach_Type => i_Attach_Type);
    
      if r_Location_Person.Company_Id is null then
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      end if;
    end if;
  
    if not v_Exists then
      v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
      v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    
      for r in (select q.Device_Id
                  from Htt_Devices q
                 where q.Company_Id = i_Company_Id
                   and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                   and q.Location_Id = i_Location_Id
                   and q.State = 'A')
      loop
        Acms_Command_Add(i_Company_Id   => i_Company_Id,
                         i_Device_Id    => r.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Person,
                         i_Person_Id    => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
    r_Location_Persons Htt_Location_Persons%rowtype;
    v_Exists           boolean;
    v_Global_Exist     boolean;
    v_Date             date := Trunc(sysdate);
  
    --------------------------------------------------           
    Function Exist_In_Global return boolean is
      v_Setting        varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id);
      v_Location_State varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
      v_Person_State   varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    begin
      return v_Setting = 'Y' and v_Location_State = 'A' and Nvl(v_Person_State, 'P') = 'A';
    end;
  
    -------------------------------------------------- 
    Function Exists_Auto_Attach return boolean is
      v_Dummy varchar2(1);
    begin
      begin
        select 'x'
          into v_Dummy
          from Htt_Location_Divisions q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Location_Id = i_Location_Id
           and exists (select 1
                  from Href_Staffs w
                 where w.Company_Id = q.Company_Id
                   and w.Filial_Id = q.Filial_Id
                   and w.Employee_Id = i_Person_Id
                   and w.Division_Id = q.Division_Id
                   and w.State = 'A'
                   and w.Hiring_Date <= v_Date
                   and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date))
           and Rownum = 1;
      
        return true;
      exception
        when No_Data_Found then
          return false;
      end;
    end;
  begin
    v_Exists       := Exists_Auto_Attach;
    v_Global_Exist := Exist_In_Global;
  
    if z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => i_Location_Id,
                                         i_Person_Id   => i_Person_Id,
                                         o_Row         => r_Location_Persons) then
      if v_Exists then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Auto));
      elsif v_Global_Exist then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Global));
      else
        z_Htt_Location_Persons.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id);
      
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      
        declare
          v_Dt_Hikvision_Id number;
          v_Dt_Dahua_Id     number;
          v_Dummy           varchar2(1);
          v_Date            date := Trunc(sysdate);
        begin
          select 'X'
            into v_Dummy
            from Mr_Natural_Persons q
           where q.Company_Id = i_Company_Id
             and q.Person_Id = i_Person_Id
             and q.State = 'A'
             and exists (select 1
                    from Htt_Persons Hp
                   where Hp.Company_Id = i_Company_Id
                     and Hp.Person_Id = i_Person_Id)
             and exists
           (select 1
                    from Href_Staffs s
                   where s.Company_Id = i_Company_Id
                     and s.Filial_Id in (select Lp.Filial_Id
                                           from Htt_Location_Persons Lp
                                          where Lp.Company_Id = i_Company_Id
                                            and Lp.Location_Id = i_Location_Id
                                            and Lp.Person_Id = i_Person_Id)
                     and s.Employee_Id = i_Person_Id
                     and s.State = 'A'
                     and s.Hiring_Date <= v_Date
                     and (s.Dismissal_Date is null or s.Dismissal_Date >= v_Date));
        exception
          when No_Data_Found then
            v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
            v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
          
            for r in (select q.Device_Id
                        from Htt_Devices q
                       where q.Company_Id = i_Company_Id
                         and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                         and q.Location_Id = i_Location_Id
                         and q.State = 'A')
            loop
              Acms_Command_Add(i_Company_Id   => i_Company_Id,
                               i_Device_Id    => r.Device_Id,
                               i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Person,
                               i_Person_Id    => i_Person_Id);
            end loop;
        end;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for St in (select q.Company_Id, q.Filial_Id, q.Employee_Id
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date + 1 >= v_Date)
                  group by q.Company_Id, q.Filial_Id, q.Employee_Id)
      loop
        Person_Sync_Locations(i_Company_Id => St.Company_Id,
                              i_Filial_Id  => St.Filial_Id,
                              i_Person_Id  => St.Employee_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
  begin
    if v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => v_Location_Ids(i));
      end loop;
    else
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_State        varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Employee_Ids Array_Number;
  begin
    if not z_Htt_Location_Filials.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id) or v_State = 'P' or
       v_Setting = 'N' then
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    else
      select q.Employee_Id
        bulk collect
        into v_Employee_Ids
        from Mhr_Employees q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.State = 'A';
    
      for i in 1 .. v_Employee_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => i_Location_Id,
                            i_Person_Id   => v_Employee_Ids(i),
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Person_Id not member of v_Employee_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_State        varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Location_Ids Array_Number;
  begin
    if v_State = 'A' and v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and q.State = 'A'
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => v_Location_Ids(i),
                            i_Person_Id   => i_Person_Id,
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Location_Id not member of v_Location_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    else
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes is
    v_Date date := Trunc(sysdate) - 1;
  begin
    delete from Htt_Location_Qr_Codes q
     where q.Created_On < v_Date;
  
    commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  ) is
    v_Period       date := Htt_Util.Year_Last_Day(Trunc(i_Period));
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    z_Htt_Request_Kind_Accruals.Delete_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
  
    -- check that employee binded to request_kind
    if not z_Htt_Staff_Request_Kinds.Exist(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id) then
      return;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                           i_Accrued_Days    => r_Request_Kind.Annual_Day_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number) is
    v_Curr_Date       date := Trunc(sysdate);
    v_Curr_Year_Begin date := Trunc(v_Curr_Date, 'yyyy');
    v_Curr_Year_End   date := Htt_Util.Year_Last_Day(v_Curr_Date);
    v_Prev_Year_End   date := v_Curr_Year_Begin - 1;
    v_Filial_Head     number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System     number := Md_Pref.User_System(i_Company_Id);
  
    r_Accrual        Htt_Request_Kind_Accruals%rowtype;
    v_Carryover_Days number;
    v_Period         date;
  begin
    for Fl in (select q.Company_Id, q.Filial_Id
                 from Md_Filials q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id <> v_Filial_Head
                  and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => Fl.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for r in (select *
                  from Htt_Request_Kinds q
                 where q.Company_Id = i_Company_Id
                   and q.Annually_Limited = 'Y'
                   and q.State = 'A')
      loop
        for k in (select *
                    from Htt_Staff_Request_Kinds p
                   where p.Company_Id = i_Company_Id
                     and p.Filial_Id = Fl.Filial_Id
                     and p.Request_Kind_Id = r.Request_Kind_Id
                     and not exists
                   (select 1
                            from Htt_Request_Kind_Accruals Rk
                           where Rk.Company_Id = p.Company_Id
                             and Rk.Filial_Id = p.Filial_Id
                             and Rk.Staff_Id = p.Staff_Id
                             and Rk.Request_Kind_Id = p.Request_Kind_Id
                             and Rk.Period = v_Curr_Year_End
                             and Rk.Accrual_Kind = Htt_Pref.c_Accrual_Kind_Plan))
        loop
          Request_Kind_Accrual_Evaluate(i_Company_Id      => k.Company_Id,
                                        i_Filial_Id       => k.Filial_Id,
                                        i_Staff_Id        => k.Staff_Id,
                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                        i_Period          => v_Curr_Year_End);
        
          -- when carryover policy is zero
          -- nothing should be carried over
          continue when r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Zero;
        
          r_Accrual := z_Htt_Request_Kind_Accruals.Take(i_Company_Id      => k.Company_Id,
                                                        i_Filial_Id       => k.Filial_Id,
                                                        i_Staff_Id        => k.Staff_Id,
                                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                                        i_Period          => v_Prev_Year_End,
                                                        i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
        
          -- when previous year accrual does not exist
          -- there is nothing to carryover
          continue when r_Accrual.Company_Id is null;
        
          v_Carryover_Days := r.Annual_Day_Limit -
                              Htt_Util.Get_Request_Kind_Used_Days(i_Company_Id      => k.Company_Id,
                                                                  i_Filial_Id       => k.Filial_Id,
                                                                  i_Staff_Id        => k.Staff_Id,
                                                                  i_Request_Kind_Id => k.Request_Kind_Id,
                                                                  i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                                                  i_Period          => v_Prev_Year_End);
        
          -- when prevous year limit is used up 
          -- there is nothing to carryover
          continue when v_Carryover_Days = 0;
        
          if r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
            v_Carryover_Days := Least(v_Carryover_Days, r.Carryover_Cap_Days);
          end if;
        
          -- add least on expiry date
          v_Period := Least(v_Curr_Year_Begin + r.Carryover_Expires_Days, v_Curr_Year_End);
        
          z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => k.Company_Id,
                                                 i_Filial_Id       => k.Filial_Id,
                                                 i_Staff_Id        => k.Staff_Id,
                                                 i_Request_Kind_Id => k.Request_Kind_Id,
                                                 i_Period          => v_Period,
                                                 i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Carryover,
                                                 i_Accrued_Days    => v_Carryover_Days);
        end loop;
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals is
  begin
    for Cmp in (select q.Company_Id
                  from Md_Companies q
                 where q.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = q.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        q.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Gen_Request_Kind_Accruals(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Registry_Staffs
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Format        varchar2(20) := 'yyyymmdd';
    v_Changed_Dates Fazo.Boolean_Code_Aat;
    v_Key           varchar2(20);
    v_Last_Date     date;
    v_Current_Date  date;
    v_Schedule_Id   number;
    --------------------------------------------------
    Procedure Put_Date(i_Date date) is
    begin
      v_Changed_Dates(to_char(i_Date, v_Format)) := true;
    end;
  
  begin
  
    Put_Date(i_Begin_Date);
    Put_Date(i_End_Date + 1);
  
    for r in (select q.Period
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                 and q.Period between i_Begin_Date and i_End_Date)
    loop
      Put_Date(r.Period);
    end loop;
  
    v_Key       := v_Changed_Dates.First;
    v_Last_Date := null;
    while v_Key is not null
    loop
      v_Current_Date := to_date(v_Key, v_Format);
    
      if v_Last_Date is not null then
        v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id,
                                                          i_Staff_Id   => i_Staff_Id,
                                                          i_Period     => v_Last_Date);
      
        if v_Schedule_Id is null then
          delete Htt_Timesheets t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Staff_Id = i_Staff_Id
             and t.Timesheet_Date between v_Last_Date and v_Current_Date - 1;
        end if;
      
        if v_Schedule_Id = i_Schedule_Id then
          Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Schedule_Id => i_Schedule_Id,
                                        i_Begin_Date  => v_Last_Date,
                                        i_End_Date    => v_Current_Date - 1);
        end if;
      end if;
    
      v_Key       := v_Changed_Dates.Next(v_Key);
      v_Last_Date := v_Current_Date;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Schedule_Id number individual robot schedule_id
  Procedure Gen_Registry_Robots
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Robot_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
  begin
    for r in (select p.Staff_Id,
                     Greatest(p.Begin_Date, i_Begin_Date) Begin_Date,
                     Least(p.End_Date, i_End_Date) End_Date
                from Hpd_Agreements_Cache p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Robot_Id = i_Robot_Id
                 and p.Begin_Date <= i_End_Date
                 and p.End_Date >= i_Begin_Date
                 and p.Schedule_Id = i_Schedule_Id)
    loop
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => r.Staff_Id,
                                    i_Robot_Id    => i_Robot_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => r.Begin_Date,
                                    i_End_Date    => r.End_Date);
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    else
      b.Raise_Not_Implemented;
    end if;
  
    for r in (select *
                from Htt_Registry_Units q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Registry_Id = i_Registry_Id)
    loop
      if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
        Gen_Registry_Staffs(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      else
        Gen_Registry_Robots(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Robot_Id    => r.Robot_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      end if;
    end loop;
  end;

end Htt_Core;
/

create or replace package Htt_Geo_Util is
  ----------------------------------------------------------------------------------------------------
  Function Latlng(i_Latlng varchar2) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Distance
  (
    i_Point1_Lat number,
    i_Point1_Lng number,
    i_Point2_Lat number,
    i_Point2_Lng number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Distance
  (
    i_Point1 varchar2,
    i_Point2 varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Distance_To_Edge
  (
    i_Point   varchar2,
    i_Vertex1 varchar2,
    i_Vertex2 varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Distance_To_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Point_In_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Point_In_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point_Lat   number,
    i_Point_Lng   number
  ) return varchar2;
end Htt_Geo_Util;
/
create or replace package body Htt_Geo_Util is
  ----------------------------------------------------------------------------------------------------
  Function Latlng(i_Latlng varchar2) return Array_Number is
  begin
    return Fazo.To_Array_Number(i_Val      => Fazo.Split(i_Latlng, ','),
                                i_Format   => '999D999999999999999999',
                                i_Nlsparam => 'NLS_NUMERIC_CHARACTERS=''. ''');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Distance
  (
    i_Point1_Lat number,
    i_Point1_Lng number,
    i_Point2_Lat number,
    i_Point2_Lng number
  ) return number is
  begin
    return Nvl(Power(Power(69.1 * (i_Point2_Lat - i_Point1_Lat), 2) +
                     Power(53.0 * (i_Point2_Lng - i_Point1_Lng), 2),
                     0.5) / 0.00062137,
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Distance
  (
    i_Point1 varchar2,
    i_Point2 varchar2
  ) return number is
    v_Point1 Array_Number := Latlng(i_Point1);
    v_Point2 Array_Number := Latlng(i_Point2);
  begin
    return Calc_Distance(i_Point1_Lat => v_Point1(1),
                         i_Point1_Lng => v_Point1(2),
                         i_Point2_Lat => v_Point2(1),
                         i_Point2_Lng => v_Point2(2));
  end;

  ----------------------------------------------------------------------------------------------------
  -- point and edge forms a triangle (with points: i_Point, i_Vertex1, i_Vertex2)
  ----------------------------------------------------------------------------------------------------
  Function Distance_To_Edge
  (
    i_Point   varchar2,
    i_Vertex1 varchar2,
    i_Vertex2 varchar2
  ) return number is
    -- edges of the triangle
    v_Edge  number := Calc_Distance(i_Vertex1, i_Vertex2); -- side of the triange (with points: i_Vertex1, i_Vertex2)
    v_Dist1 number := Calc_Distance(i_Point, i_Vertex1); -- side of the triange (with points: i_Point, i_Vertex1)
    v_Dist2 number := Calc_Distance(i_Point, i_Vertex2); -- side of the triange (with points: i_Point, i_Vertex2)
  
    v_Edge_Pw2  number := v_Edge * v_Edge; -- v_Edge^2
    v_Dist1_Pw2 number := v_Dist1 * v_Dist1; -- v_Dist1^2
    v_Dist2_Pw2 number := v_Dist2 * v_Dist2; -- v_Dist2^2
  
    v_Sp   number; -- semi-perimeter of the triangle
    v_Area number; -- area of the triangle
  begin
    -- return v_Dist1 if i_Vertex1 point is obtuse-angled (>90 degrees)
    if v_Edge_Pw2 + v_Dist1_Pw2 <= v_Dist2_Pw2 then
      return v_Dist1;
    end if;
  
    -- return v_Dist2 if i_Vertex2 point is obtuse-angled (>90 degrees)
    if v_Edge_Pw2 + v_Dist2_Pw2 <= v_Dist1_Pw2 then
      return v_Dist2;
    end if;
  
    -- if both i_Vertex1 & i_Vertex2 points are acute-angled (<90 degrees) then
    -- the distance btw point to edge is equal to triangle height from i_point to base (i_Vertex1 & i_Vertex2)
  
    -- semi-perimeter is needed to calculate AREA of the triangle, using "Heron's formula"
    v_Sp   := (v_Edge + v_Dist1 + v_Dist2) / 2;
    v_Area := Power(v_Sp * (v_Sp - v_Edge) * (v_Sp - v_Dist1) * (v_Sp - v_Dist2), 0.5);
  
    -- height is calculated as: height = 2 * area / base
    return 2 * v_Area / v_Edge;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Distance_To_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point       varchar2
  ) return number is
    v_Vertices Array_Varchar2;
    v_Distance number;
  begin
    select t.Latlng
      bulk collect
      into v_Vertices
      from Htt_Location_Polygon_Vertices t
     where t.Company_Id = i_Company_Id
       and t.Location_Id = i_Location_Id
     order by t.Order_No;
  
    v_Vertices.Extend;
    v_Vertices(v_Vertices.Count) := v_Vertices(1);
  
    select min(Distance_To_Edge(i_Point, Vertex_1, Vertex_2))
      into v_Distance
      from (select Lag(t.Column_Value) Over(order by Rownum) Vertex_1, t.Column_Value Vertex_2
              from table(v_Vertices) t Offset 1 row);
  
    return Round(v_Distance);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Point_In_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point       varchar2
  ) return varchar2 is
    v_Point    Array_Number;
    v_Inside   boolean := false;
    v_Accuracy number;
    v_Distance number;
  begin
    v_Point := Latlng(i_Point);
  
    -- iteration over each vertices
    for r in (select Latlng(Lag(t.Latlng) Over(order by t.Order_No)) Vertex_1,
                     Latlng(t.Latlng) Vertex_2
                from Htt_Location_Polygon_Vertices t
               where t.Company_Id = i_Company_Id
                 and t.Location_Id = i_Location_Id
               order by t.Order_No Offset 1 row)
    loop
      if (v_Point(2) < r.Vertex_1(2)) <> (v_Point(2) < r.Vertex_2(2)) and
         v_Point(1) < (r.Vertex_2(1) - r.Vertex_1(1)) * (v_Point(2) - r.Vertex_1(2)) /
         (r.Vertex_2(2) - r.Vertex_1(2)) + r.Vertex_1(1) then
        v_Inside := not v_Inside;
      end if;
    end loop;
  
    if not v_Inside then
      v_Accuracy := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Accuracy;
      v_Distance := Distance_To_Polygon(i_Company_Id  => i_Company_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Point       => i_Point);
      v_Inside   := v_Distance <= v_Accuracy;
    end if;
  
    if v_Inside then
      return 'Y';
    end if;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Point_In_Polygon
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Point_Lat   number,
    i_Point_Lng   number
  ) return varchar2 is
  begin
    return Is_Point_In_Polygon(i_Company_Id  => i_Company_Id,
                               i_Location_Id => i_Location_Id,
                               i_Point       => i_Point_Lat || ',' || i_Point_Lng);
  end;

end Htt_Geo_Util;
/

create or replace package Htt_Pref is
  ----------------------------------------------------------------------------------------------------
  type Photo_Rt is record(
    Photo_Sha varchar2(64),
    Is_Main   varchar2(1));
  type Photo_Nt is table of Photo_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id number(20),
    Person_Id  number(20),
    Pin        varchar2(15),
    Pin_Code   number(8),
    Rfid_Code  varchar2(20),
    Qr_Code    varchar2(64),
    Photos     Photo_Nt);
  ----------------------------------------------------------------------------------------------------
  type Calendar_Day_Rt is record(
    Calendar_Date date,
    name          varchar2(100),
    year          number(4),
    Day_Kind      varchar2(1),
    Swapped_Date  date);
  type Calendar_Day_Nt is table of Calendar_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Calendar_Rt is record(
    Company_Id  number(20),
    Filial_Id   number(20),
    Calendar_Id number(20),
    name        varchar2(100 char),
    Code        varchar2(50 char),
    year        number,
    Days        Calendar_Day_Nt,
    Rest_Days   Array_Number);
  ----------------------------------------------------------------------------------------------------
  type Mark_Rt is record(
    Begin_Time number(4),
    End_Time   number(4));
  type Mark_Nt is table of Mark_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Day_Marks_Rt is record(
    Schedule_Date date,
    Begin_Time    number,
    End_Time      number,
    Marks         Mark_Nt);
  type Schedule_Day_Marks_Nt is table of Schedule_Day_Marks_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Day_Rt is record(
    Schedule_Date    date,
    Day_Kind         varchar2(1),
    Begin_Time       number(4),
    End_Time         number(4),
    Break_Enabled    varchar2(1),
    Break_Begin_Time number(4),
    Break_End_Time   number(4),
    Plan_Time        number(4));
  type Schedule_Day_Nt is table of Schedule_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Pattern_Day_Rt is record(
    Day_No           number(4),
    Day_Kind         varchar2(1),
    Begin_Time       number(4),
    End_Time         number(4),
    Break_Enabled    varchar2(1),
    Break_Begin_Time number(4),
    Break_End_Time   number(4),
    Plan_Time        number(4),
    Pattern_Marks    Mark_Nt);
  type Schedule_Pattern_Day_Nt is table of Schedule_Pattern_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Pattern_Rt is record(
    Pattern_Kind   varchar2(1),
    All_Days_Equal varchar2(1),
    Count_Days     number(4),
    Begin_Date     date,
    End_Date       date,
    Pattern_Day    Schedule_Pattern_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  type Schedule_Rt is record(
    Company_Id                number(20),
    Filial_Id                 number(20),
    Schedule_Id               number(20),
    name                      varchar2(100 char),
    Schedule_Kind             varchar2(1),
    Shift                     number(4),
    Input_Acceptance          number(4),
    Output_Acceptance         number(4),
    Track_Duration            number(4),
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Count_Free                varchar2(1),
    Advanced_Setting          varchar2(1),
    Allowed_Late_Time         number,
    Allowed_Early_Time        number,
    Begin_Late_Time           number,
    End_Early_Time            number,
    Calendar_Id               number(20),
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Gps_Turnout_Enabled       varchar2(1),
    Gps_Use_Location          varchar2(1),
    Gps_Max_Interval          number,
    State                     varchar2(1),
    Code                      varchar2(50 char),
    Days                      Schedule_Day_Nt,
    Marks                     Schedule_Day_Marks_Nt,
    Pattern                   Schedule_Pattern_Rt,
    year                      number(4));
  ----------------------------------------------------------------------------------------------------  
  type Schedule_Template_Rt is record(
    Template_Id               number(20),
    name                      varchar2(100 char),
    Description               varchar2(3000 char),
    Schedule_Kind             varchar2(1),
    All_Days_Equal            varchar2(1),
    Count_Days                number(4),
    Shift                     number(4),
    Input_Acceptance          number(4),
    Output_Acceptance         number(4),
    Track_Duration            number(4),
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Order_No                  number(6),
    State                     varchar2(1),
    Code                      varchar2(50),
    Pattern_Days              Schedule_Pattern_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Rt is record(
    Company_Id   number(20),
    Filial_Id    number(20),
    Timesheet_Id number(20),
    Input_Time   date,
    Output_Time  date);
  type Timesheet_Nt is table of Timesheet_Rt;
  ----------------------------------------------------------------------------------------------------
  type Time_Part_Rt is record(
    Input_Time  date,
    Output_Time date);
  type Time_Part_Nt is table of Time_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Track_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Timesheet_Id   number,
    Track_Id       number,
    Track_Datetime date,
    Track_Type     varchar2(1),
    Trans_Input    varchar2(1),
    Trans_Output   varchar2(1),
    Trans_Check    varchar2(1));
  type Timesheet_Track_Nt is table of Timesheet_Track_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Fact_Rt is record(
    Company_Id   number(20),
    Filial_Id    number(20),
    Timesheet_Id number(20),
    Time_Kind_Id number(20),
    Fact_Value   number(20));
  type Timesheet_Fact_Nt is table of Timesheet_Fact_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Aggregated_Fact_Rt is record(
    Time_Kind_Id number(20),
    Fact_Value   number(20));
  type Timesheet_Aggregated_Fact_Nt is table of Timesheet_Aggregated_Fact_Rt;
  ----------------------------------------------------------------------------------------------------
  type Time_Kind_Rt is record(
    name  varchar2(100 char),
    Pcode varchar2(20));
  type Time_Kind_Nt is table of Time_Kind_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Part_Rt is record(
    Staff_Id   number(20),
    Part_Begin date,
    Part_End   date);
  type Staff_Part_Nt is table of Staff_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Track_Rt is record(
    Company_Id number(20),
    Filial_Id  number(20),
    Track_Id   number(20));
  type Track_Nt is table of Track_Rt;
  ----------------------------------------------------------------------------------------------------
  type Gps_Track_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Person_Id  number,
    Track_Date date,
    Data       blob,
    Batch_Id   number);
  ----------------------------------------------------------------------------------------------------
  type Gps_Track_Data_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Track_Id   number,
    Person_Id  number,
    Track_Date date,
    Track_Time date,
    Lat        number,
    Lng        number,
    Accuracy   number,
    Provider   varchar2(1));
  type Gps_Track_Data_Nt is table of Gps_Track_Data_Rt;
  ----------------------------------------------------------------------------------------------------
  type Change_Day_Rt is record(
    Change_Date      date,
    Swapped_Date     date,
    Day_Kind         varchar2(1),
    Begin_Time       date,
    End_Time         date,
    Break_Enabled    varchar2(1),
    Break_Begin_Time date,
    Break_End_Time   date,
    Plan_Time        number(5));
  type Change_Day_Nt is table of Change_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Change_Rt is record(
    Company_Id  number(20),
    Filial_Id   number(20),
    Change_Id   number(20),
    Staff_Id    number(20),
    Change_Kind varchar2(1),
    Note        varchar2(300 char),
    Change_Days Change_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  -- individual schedules  
  ----------------------------------------------------------------------------------------------------
  type Registry_Unit_Rt is record(
    Unit_Id         number,
    Staff_Id        number,
    Robot_Id        number,
    Monthly_Minutes number,
    Monthly_Days    number,
    Unit_Days       Schedule_Day_Nt,
    Unit_Marks      Schedule_Day_Marks_Nt);
  type Registry_Unit_Nt is table of Registry_Unit_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Registry_Rt is record(
    Company_Id                number,
    Filial_Id                 number,
    Registry_Id               number,
    Registry_Date             date,
    Registry_Number           varchar2(50 char),
    Registry_Kind             varchar2(1),
    Schedule_Kind             varchar2(1),
    month                     date,
    Division_Id               number,
    Note                      varchar2(300 char),
    Shift                     number,
    Input_Acceptance          number,
    Output_Acceptance         number,
    Track_Duration            number,
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Count_Free                varchar2(1),
    Advanced_Setting          varchar2(1),
    Allowed_Late_Time         number,
    Allowed_Early_Time        number,
    Begin_Late_Time           number,
    End_Early_Time            number,
    Calendar_Id               number,
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Gps_Turnout_Enabled       varchar2(1),
    Gps_Use_Location          varchar2(1),
    Gps_Max_Interval          number,
    Units                     Registry_Unit_Nt);
  ----------------------------------------------------------------------------------------------------
  -- attach type
  ----------------------------------------------------------------------------------------------------
  c_Attach_Type_Manual constant varchar2(1) := 'M';
  c_Attach_Type_Auto   constant varchar2(1) := 'A';
  c_Attach_Type_Global constant varchar2(1) := 'G';
  ----------------------------------------------------------------------------------------------------
  -- day kind
  ----------------------------------------------------------------------------------------------------
  c_Day_Kind_Work            constant varchar2(1) := 'W';
  c_Day_Kind_Rest            constant varchar2(1) := 'R';
  c_Day_Kind_Holiday         constant varchar2(1) := 'H';
  c_Day_Kind_Additional_Rest constant varchar2(1) := 'A';
  c_Day_Kind_Nonworking      constant varchar2(1) := 'N';
  c_Day_Kind_Swapped         constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- schedule kind 
  ----------------------------------------------------------------------------------------------------
  c_Schedule_Kind_Custom   constant varchar2(1) := 'C';
  c_Schedule_Kind_Flexible constant varchar2(1) := 'F';
  c_Schedule_Kind_Hourly   constant varchar2(1) := 'H';
  ----------------------------------------------------------------------------------------------------
  -- pattern kind
  ----------------------------------------------------------------------------------------------------
  c_Pattern_Kind_Weekly   constant varchar2(1) := 'W';
  c_Pattern_Kind_Periodic constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- protocol
  ----------------------------------------------------------------------------------------------------
  c_Protocol_Http  constant varchar2(1) := 'H';
  c_Protocol_Https constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- command kind
  ----------------------------------------------------------------------------------------------------
  c_Command_Kind_Update_Device             constant varchar2(1) := 'U';
  c_Command_Kind_Update_All_Device_Persons constant varchar2(1) := 'A';
  c_Command_Kind_Update_Person             constant varchar2(1) := 'P';
  c_Command_Kind_Remove_Device             constant varchar2(1) := 'D';
  c_Command_Kind_Remove_Person             constant varchar2(1) := 'R';
  c_Command_Kind_Sync_Tracks               constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  -- command status
  ----------------------------------------------------------------------------------------------------
  c_Command_Status_New       constant varchar2(1) := 'N';
  c_Command_Status_Sent      constant varchar2(1) := 'S';
  c_Command_Status_Complited constant varchar2(1) := 'C';
  c_Command_Status_Failed    constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- person role
  ----------------------------------------------------------------------------------------------------
  c_Person_Role_Admin  constant varchar2(1) := 'A';
  c_Person_Role_Normal constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- track type
  ----------------------------------------------------------------------------------------------------
  c_Track_Type_Input            constant varchar2(1) := 'I';
  c_Track_Type_Output           constant varchar2(1) := 'O';
  c_Track_Type_Check            constant varchar2(1) := 'C';
  c_Track_Type_Merger           constant varchar2(1) := 'M';
  c_Track_Type_Potential_Output constant varchar2(1) := 'P';
  c_Track_Type_Gps_Output       constant varchar2(1) := 'G';
  ----------------------------------------------------------------------------------------------------
  -- provider
  ----------------------------------------------------------------------------------------------------
  c_Provider_Gps     constant varchar2(1) := 'G';
  c_Provider_Network constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- gps track delimetr
  ----------------------------------------------------------------------------------------------------
  c_Gps_Track_Row_Delimiter    constant varchar2(1) := Chr(10);
  c_Gps_Track_Column_Delimiter constant varchar2(1) := Chr(9);
  ----------------------------------------------------------------------------------------------------
  -- emotion type
  ----------------------------------------------------------------------------------------------------
  c_Emotion_Type_Smile constant varchar2(1) := 'S';
  c_Emotion_Type_Wink  constant varchar2(1) := 'W';
  ----------------------------------------------------------------------------------------------------
  -- mark type
  ----------------------------------------------------------------------------------------------------
  c_Mark_Type_Password  constant varchar2(1) := 'P';
  c_Mark_Type_Touch     constant varchar2(1) := 'T';
  c_Mark_Type_Rfid_Card constant varchar2(1) := 'R';
  c_Mark_Type_Qr_Code   constant varchar2(1) := 'Q';
  c_Mark_Type_Face      constant varchar2(1) := 'F';
  c_Mark_Type_Manual    constant varchar2(1) := 'M';
  c_Mark_Type_Auto      constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- track status
  ----------------------------------------------------------------------------------------------------
  c_Track_Status_Draft          constant varchar2(1) := 'D';
  c_Track_Status_Not_Used       constant varchar2(1) := 'N';
  c_Track_Status_Partially_Used constant varchar2(1) := 'P';
  c_Track_Status_Used           constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- pcode time kind
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Time_Kind_Turnout             constant varchar2(20) := 'VHR:1';
  c_Pcode_Time_Kind_Late                constant varchar2(20) := 'VHR:2';
  c_Pcode_Time_Kind_Early               constant varchar2(20) := 'VHR:3';
  c_Pcode_Time_Kind_Leave               constant varchar2(20) := 'VHR:4';
  c_Pcode_Time_Kind_Rest                constant varchar2(20) := 'VHR:5';
  c_Pcode_Time_Kind_Lack                constant varchar2(20) := 'VHR:6';
  c_Pcode_Time_Kind_Free                constant varchar2(20) := 'VHR:7';
  c_Pcode_Time_Kind_Sick                constant varchar2(20) := 'VHR:8';
  c_Pcode_Time_Kind_Leave_Full          constant varchar2(20) := 'VHR:9';
  c_Pcode_Time_Kind_Trip                constant varchar2(20) := 'VHR:10';
  c_Pcode_Time_Kind_Vacation            constant varchar2(20) := 'VHR:11';
  c_Pcode_Time_Kind_Overtime            constant varchar2(20) := 'VHR:12';
  c_Pcode_Time_Kind_Meeting             constant varchar2(20) := 'VHR:13';
  c_Pcode_Time_Kind_Holiday             constant varchar2(20) := 'VHR:14';
  c_Pcode_Time_Kind_Nonworking          constant varchar2(20) := 'VHR:15';
  c_Pcode_Time_Kind_Before_Work         constant varchar2(20) := 'VHR:16';
  c_Pcode_Time_Kind_After_Work          constant varchar2(20) := 'VHR:17';
  c_Pcode_Time_Kind_Lunchtime           constant varchar2(20) := 'VHR:18';
  c_Pcode_Time_Kind_Free_Inside         constant varchar2(20) := 'VHR:19';
  c_Pcode_Time_Kind_Turnout_Adjustment  constant varchar2(20) := 'VHR:20';
  c_Pcode_Time_Kind_Overtime_Adjustment constant varchar2(20) := 'VHR:21';
  c_Pcode_Time_Kind_Additional_Rest     constant varchar2(20) := 'VHR:22';
  ----------------------------------------------------------------------------------------------------
  -- pcode request kinds
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Request_Kind_Sick_Leave constant varchar2(20) := 'VHR:1';
  c_Pcode_Request_Kind_Vacation   constant varchar2(20) := 'VHR:2';
  c_Pcode_Request_Kind_Trip       constant varchar2(20) := 'VHR:3';
  c_Pcode_Request_Kind_Leave      constant varchar2(20) := 'VHR:4';
  c_Pcode_Request_Kind_Meeting    constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Request_View constant varchar2(200) := '/vhr/htt/request_view+view';
  c_Form_Change_View  constant varchar2(200) := '/vhr/htt/change_view+view';
  ----------------------------------------------------------------------------------------------------
  -- pcode default calendar
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Default_Calendar constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- plan load
  ----------------------------------------------------------------------------------------------------
  c_Plan_Load_Full  constant varchar2(1) := 'F';
  c_Plan_Load_Part  constant varchar2(1) := 'P';
  c_Plan_Load_Extra constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- day count type
  ----------------------------------------------------------------------------------------------------
  c_Day_Count_Type_Calendar_Days   constant varchar2(1) := 'C';
  c_Day_Count_Type_Work_Days       constant varchar2(1) := 'W';
  c_Day_Count_Type_Production_Days constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- carryover policy
  ----------------------------------------------------------------------------------------------------
  c_Carryover_Policy_All  constant varchar2(1) := 'A';
  c_Carryover_Policy_Zero constant varchar2(1) := 'Z';
  c_Carryover_Policy_Cap  constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- pcode device type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Terminal  constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Timepad   constant varchar2(20) := 'VHR:2';
  c_Pcode_Device_Type_Staff     constant varchar2(20) := 'VHR:3';
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:4';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- request type
  ----------------------------------------------------------------------------------------------------
  c_Request_Type_Part_Of_Day   constant varchar2(1) := 'P';
  c_Request_Type_Full_Day      constant varchar2(1) := 'F';
  c_Request_Type_Multiple_Days constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------
  -- request status
  ----------------------------------------------------------------------------------------------------
  c_Request_Status_New       constant varchar2(1) := 'N';
  c_Request_Status_Approved  constant varchar2(1) := 'A';
  c_Request_Status_Completed constant varchar2(1) := 'C';
  c_Request_Status_Denied    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  -- change status
  ----------------------------------------------------------------------------------------------------
  c_Change_Status_New       constant varchar2(1) := 'N';
  c_Change_Status_Approved  constant varchar2(1) := 'A';
  c_Change_Status_Completed constant varchar2(1) := 'C';
  c_Change_Status_Denied    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  -- change kind
  ----------------------------------------------------------------------------------------------------
  c_Change_Kind_Swap        constant varchar2(1) := 'S';
  c_Change_Kind_Change_Plan constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  c_Dashboard_Worktime_Not_Started constant varchar2(2) := 'WN';
  c_Dashboard_Leave_Exists         constant varchar2(2) := 'LV';
  c_Dashboard_Staff_Late           constant varchar2(2) := 'L';
  c_Dashboard_Staff_Intime         constant varchar2(2) := 'I';
  c_Dashboard_Staff_Not_Come       constant varchar2(2) := 'NC';
  c_Dashboard_Rest_Day             constant varchar2(2) := 'R';
  c_Dashboard_Additional_Rest_Day  constant varchar2(2) := 'A';
  c_Dashboard_Holiday              constant varchar2(2) := 'H';
  c_Dashboard_Nonworking_Day       constant varchar2(2) := 'NW';
  c_Dashboard_Not_Licensed_Day     constant varchar2(2) := 'NL';
  c_Dashboard_No_Timesheet         constant varchar2(2) := 'N';
  ----------------------------------------------------------------------------------------------------
  c_Pin_Autogenerate            constant varchar2(50) := 'VHR:PIN_AUTOGENERATE';
  c_Photo_As_Face_Rec           constant varchar2(50) := 'VHR:PHOTO_AS_FACE_REC'; -- person main photo save as face recognation photo default value
  c_Location_Sync_Person_Global constant varchar2(50) := 'VHR:LOCATION_SYNC_PERSON_GLOBAL';
  c_Schedule_Trimmed_Tracks     constant varchar2(50) := 'VHR:SCHEDULE_TRIMMED_TRACKS';
  ----------------------------------------------------------------------------------------------------
  -- terminal model pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Zkteco_F18     constant varchar2(20) := 'VHR:1';
  c_Pcode_Zkteco_Eface10 constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- registry kinds
  ----------------------------------------------------------------------------------------------------
  c_Registry_Kind_Staff constant varchar2(1) := 'S';
  c_Registry_Kind_Robot constant varchar2(1) := 'R';
  ---------------------------------------------------------------------------------------------------- 
  -- individual schedules pcodes
  ---------------------------------------------------------------------------------------------------- 
  c_Pcode_Individual_Staff_Schedule constant varchar2(10) := 'VHR:1';
  c_Pcode_Individual_Robot_Schedule constant varchar2(10) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- request kind accrual kinds
  ----------------------------------------------------------------------------------------------------
  c_Accrual_Kind_Carryover constant varchar2(1) := 'C';
  c_Accrual_Kind_Plan      constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- acms track status
  ----------------------------------------------------------------------------------------------------
  c_Acms_Track_Status_New       constant varchar2(1) := 'N';
  c_Acms_Track_Status_Completed constant varchar2(1) := 'C';
  c_Acms_Track_Status_Failed    constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------    
  -- acms mark types
  ----------------------------------------------------------------------------------------------------
  c_Acms_Mark_Type_Touch constant varchar2(1) := 'T';
  c_Acms_Mark_Type_Face  constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- shift limits (in seconds)
  ----------------------------------------------------------------------------------------------------
  c_Max_Shift_Border     constant number := 8 * 3600;
  c_Min_Shift_Border     constant number := 4 * 3600;
  c_Max_Full_Plan        constant number := 24 * 3600;
  c_Default_Merge_Border constant number := 15 * 60;
  c_Max_Track_Duration   constant number := 72 * 3600;
  ----------------------------------------------------------------------------------------------------
  -- hourly wage limits (in seconds)
  ----------------------------------------------------------------------------------------------------
  c_Max_Worktime_Length constant number := 24 * 3600;
  ---------------------------------------------------------------------------------------------------- 
  -- location defined type
  ----------------------------------------------------------------------------------------------------
  c_Location_Defined_By_Gps   constant varchar2(1) := 'G';
  c_Location_Defined_By_Bssid constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- current work statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Work_Status_Out      constant varchar2(1) := 'O';
  c_Work_Status_Returned constant varchar2(1) := 'R';
  c_Work_Status_In       constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- schedulr list forms
  c_Schedule_List_Form                constant varchar2(100) := '/vhr/htt/schedule_list';
  c_Staff_Schedule_Registry_List_Form constant varchar2(100) := '/vhr/htt/schedule_registry_list+staff';
  c_Robot_Schedule_Registry_List_Form constant varchar2(100) := '/vhr/htt/schedule_registry_list+robot';
  ----------------------------------------------------------------------------------------------------
  -- additional time type
  c_Additional_Time_Type_Allowed constant varchar2(1) := 'A';
  c_Additional_Time_Type_Extra   constant varchar2(1) := 'E';
  ---------------------------------------------------------------------------------------------------- 
  -- device statuses
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';

end Htt_Pref;
/
create or replace package body Htt_Pref is
end Htt_Pref;
/

create or replace package Htt_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar    in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Name        varchar2,
    i_Code        varchar2,
    i_Year        number,
    i_Rest_Day    Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone;
  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt;
  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date;
  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2;
  Function Day_Kinds return Matrix_Varchar2;
  Function Calendar_Day_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2;
  Function Pattern_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2;
  Function Schedule_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2;
  Function Protocols return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2;
  Function Command_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2;
  Function Command_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2;
  Function Person_Roles return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2;
  Function Track_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2;
  Function Providers return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2;
  Function Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2;
  Function Plan_Loads return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2;
  Function Day_Count_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2;
  Function Carryover_Policies return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2;
  Function Request_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2;
  Function Request_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2;
  Function Attach_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2;
  Function Change_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2;
  Function Change_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2;
  Function Dashboard_Status_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2;
  Function Accrual_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2;
  Function Acms_Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Acms_Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2;
  Function Location_Defined_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2;
  Function Work_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2;
end Htt_Util;
/
create or replace package body Htt_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Company_Timezones  Fazo.Varchar2_Code_Aat;
  g_Cache_Filial_Timezones   Fazo.Varchar2_Code_Aat;
  g_Cache_Location_Timezones Fazo.Varchar2_Code_Aat;
  g_Cache_Time_Kind_Ids      Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  ) is
  begin
    o_Person.Company_Id := i_Company_Id;
    o_Person.Person_Id  := i_Person_Id;
    o_Person.Pin        := i_Pin;
    o_Person.Pin_Code   := i_Pin_Code;
    o_Person.Rfid_Code  := i_Rfid_Code;
    o_Person.Qr_Code    := i_Qr_Code;
  
    o_Person.Photos := Htt_Pref.Photo_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  ) is
    v_Photo Htt_Pref.Photo_Rt;
  begin
    v_Photo.Photo_Sha := i_Photo_Sha;
    v_Photo.Is_Main   := i_Is_Main;
  
    p_Person.Photos.Extend;
    p_Person.Photos(p_Person.Photos.Count) := v_Photo;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  ) is
    v_Day Htt_Pref.Calendar_Day_Rt;
  begin
    v_Day.Calendar_Date := i_Calendar_Date;
    v_Day.Name          := i_Name;
    v_Day.Day_Kind      := i_Day_Kind;
    v_Day.Swapped_Date  := i_Swapped_Date;
  
    o_Calendar.Days.Extend();
    o_Calendar.Days(o_Calendar.Days.Count) := v_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar    in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Name        varchar2,
    i_Code        varchar2,
    i_Year        number,
    i_Rest_Day    Array_Number
  ) is
  begin
    o_Calendar.Company_Id  := i_Company_Id;
    o_Calendar.Filial_Id   := i_Filial_Id;
    o_Calendar.Calendar_Id := i_Calendar_Id;
    o_Calendar.Name        := i_Name;
    o_Calendar.Code        := i_Code;
    o_Calendar.Year        := i_Year;
    o_Calendar.Rest_Days   := i_Rest_Day;
  
    o_Calendar.Days := Htt_Pref.Calendar_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  ) is
    v_Mark Htt_Pref.Mark_Rt;
  begin
    o_Marks.Extend();
  
    v_Mark.Begin_Time := i_Begin_Time;
    v_Mark.End_Time   := i_End_Time;
  
    o_Marks(o_Marks.Count) := v_Mark;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Day.Schedule_Date    := i_Schedule_Date;
    o_Day.Day_Kind         := i_Day_Kind;
    o_Day.Begin_Time       := i_Begin_Time;
    o_Day.End_Time         := i_End_Time;
    o_Day.Break_Enabled    := i_Break_Enabled;
    o_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Day.Break_End_Time   := i_Break_End_Time;
    o_Day.Plan_Time        := i_Plan_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  ) is
  begin
    o_Schedule.Days.Extend();
    o_Schedule.Days(o_Schedule.Days.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  ) is
  begin
    o_Schedule_Day_Marks.Schedule_Date := i_Schedule_Date;
    o_Schedule_Day_Marks.Begin_Time    := i_Begin_Date;
    o_Schedule_Day_Marks.End_Time      := i_End_Date;
  
    o_Schedule_Day_Marks.Marks := Htt_Pref.Mark_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  ) is
  begin
    o_Schedule.Marks.Extend();
    o_Schedule.Marks(o_Schedule.Marks.Count) := i_Day_Marks;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Pattern_Day.Day_No           := i_Day_No;
    o_Pattern_Day.Day_Kind         := i_Day_Kind;
    o_Pattern_Day.Begin_Time       := i_Begin_Time;
    o_Pattern_Day.End_Time         := i_End_Time;
    o_Pattern_Day.Break_Enabled    := i_Break_Enabled;
    o_Pattern_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Pattern_Day.Break_End_Time   := i_Break_End_Time;
    o_Pattern_Day.Plan_Time        := i_Plan_Time;
  
    o_Pattern_Day.Pattern_Marks := Htt_Pref.Mark_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Pattern.Pattern_Day.Extend();
    o_Schedule_Pattern.Pattern_Day(o_Schedule_Pattern.Pattern_Day.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  ) is
  begin
    o_Pattern.Pattern_Kind   := i_Pattern_Kind;
    o_Pattern.All_Days_Equal := i_All_Days_Equal;
    o_Pattern.Count_Days     := i_Count_Days;
    o_Pattern.Begin_Date     := i_Begin_Date;
    o_Pattern.End_Date       := i_End_Date;
  
    o_Pattern.Pattern_Day := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  ) is
  begin
    o_Registry_Unit.Unit_Id         := i_Unit_Id;
    o_Registry_Unit.Staff_Id        := i_Staff_Id;
    o_Registry_Unit.Robot_Id        := i_Robot_Id;
    o_Registry_Unit.Monthly_Minutes := i_Monthly_Minutes;
    o_Registry_Unit.Monthly_Days    := i_Monthly_Days;
  
    o_Registry_Unit.Unit_Days  := Htt_Pref.Schedule_Day_Nt();
    o_Registry_Unit.Unit_Marks := Htt_Pref.Schedule_Day_Marks_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  ) is
  begin
    o_Schedule_Registry.Company_Id                := i_Company_Id;
    o_Schedule_Registry.Filial_Id                 := i_Filial_Id;
    o_Schedule_Registry.Registry_Id               := i_Registry_Id;
    o_Schedule_Registry.Registry_Date             := i_Registry_Date;
    o_Schedule_Registry.Registry_Number           := i_Registry_Number;
    o_Schedule_Registry.Registry_Kind             := i_Registry_Kind;
    o_Schedule_Registry.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Registry.Month                     := i_Month;
    o_Schedule_Registry.Division_Id               := i_Division_Id;
    o_Schedule_Registry.Note                      := i_Note;
    o_Schedule_Registry.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Registry.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Registry.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Registry.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Registry.Count_Late                := i_Count_Late;
    o_Schedule_Registry.Count_Early               := i_Count_Early;
    o_Schedule_Registry.Count_Lack                := i_Count_Lack;
    o_Schedule_Registry.Count_Free                := i_Count_Free;
    o_Schedule_Registry.Advanced_Setting          := 'N';
    o_Schedule_Registry.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule_Registry.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule_Registry.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule_Registry.End_Early_Time            := i_End_Early_Time;
    o_Schedule_Registry.Calendar_Id               := i_Calendar_Id;
    o_Schedule_Registry.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Registry.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Registry.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Registry.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule_Registry.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule_Registry.Gps_Max_Interval          := i_Gps_Max_Interval;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule_Registry.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule_Registry.Units := Htt_Pref.Registry_Unit_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  ) is
  begin
    o_Schedule.Company_Id                := i_Company_Id;
    o_Schedule.Filial_Id                 := i_Filial_Id;
    o_Schedule.Schedule_Id               := i_Schedule_Id;
    o_Schedule.Name                      := i_Name;
    o_Schedule.Shift                     := i_Shift;
    o_Schedule.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule.Input_Acceptance          := i_Input_Acceptance;
    o_Schedule.Output_Acceptance         := i_Output_Acceptance;
    o_Schedule.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule.Count_Late                := i_Count_Late;
    o_Schedule.Count_Early               := i_Count_Early;
    o_Schedule.Count_Lack                := i_Count_Lack;
    o_Schedule.Count_Free                := i_Count_Free;
    o_Schedule.Advanced_Setting          := 'N';
    o_Schedule.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule.End_Early_Time            := i_End_Early_Time;
    o_Schedule.Calendar_Id               := i_Calendar_Id;
    o_Schedule.Take_Holidays             := i_Take_Holidays;
    o_Schedule.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule.Gps_Max_Interval          := i_Gps_Max_Interval;
    o_Schedule.State                     := i_State;
    o_Schedule.Code                      := i_Code;
    o_Schedule.Year                      := i_Year;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule.Days    := Htt_Pref.Schedule_Day_Nt();
    o_Schedule.Marks   := Htt_Pref.Schedule_Day_Marks_Nt();
    o_Schedule.Pattern := Htt_Pref.Schedule_Pattern_Rt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Template.Pattern_Days.Extend();
    o_Schedule_Template.Pattern_Days(o_Schedule_Template.Pattern_Days.Count) := i_Pattern_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  ) is
  begin
    o_Schedule_Template.Template_Id               := i_Template_Id;
    o_Schedule_Template.Name                      := i_Name;
    o_Schedule_Template.Description               := i_Description;
    o_Schedule_Template.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Template.All_Days_Equal            := i_All_Days_Equal;
    o_Schedule_Template.Count_Days                := i_Count_Days;
    o_Schedule_Template.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Template.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Template.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Template.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Template.Count_Late                := i_Count_Late;
    o_Schedule_Template.Count_Early               := i_Count_Early;
    o_Schedule_Template.Count_Lack                := i_Count_Lack;
    o_Schedule_Template.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Template.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Template.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Template.Order_No                  := i_Order_No;
    o_Schedule_Template.State                     := i_State;
    o_Schedule_Template.Code                      := i_Code;
  
    o_Schedule_Template.Pattern_Days := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  ) is
  begin
    o_Timesheets.Extend;
    o_Timesheets(o_Timesheets.Count) := Htt_Pref.Timesheet_Rt(Company_Id   => i_Company_Id,
                                                              Filial_Id    => i_Filial_Id,
                                                              Timesheet_Id => i_Timesheet_Id,
                                                              Input_Time   => i_Input_Time,
                                                              Output_Time  => i_Output_Time);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  ) is
  begin
    o_Facts.Extend();
    o_Facts(o_Facts.Count) := Htt_Pref.Timesheet_Fact_Rt(Company_Id   => i_Company_Id,
                                                         Filial_Id    => i_Filial_Id,
                                                         Timesheet_Id => i_Timesheet_Id,
                                                         Time_Kind_Id => i_Time_Kind_Id,
                                                         Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  ) is
  begin
    o_Change.Company_Id  := i_Company_Id;
    o_Change.Filial_Id   := i_Filial_Id;
    o_Change.Change_Id   := i_Change_Id;
    o_Change.Staff_Id    := i_Staff_Id;
    o_Change.Change_Kind := i_Change_Kind;
    o_Change.Note        := i_Note;
  
    o_Change.Change_Days := Htt_Pref.Change_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  ) is
    v_Change_Day Htt_Pref.Change_Day_Rt;
  begin
    v_Change_Day.Change_Date      := i_Change_Date;
    v_Change_Day.Swapped_Date     := i_Swapped_Date;
    v_Change_Day.Begin_Time       := i_Begin_Time;
    v_Change_Day.End_Time         := i_End_Time;
    v_Change_Day.Day_Kind         := i_Day_Kind;
    v_Change_Day.Break_Enabled    := i_Break_Enabled;
    v_Change_Day.Break_Begin_Time := i_Break_Begin_Time;
    v_Change_Day.Break_End_Time   := i_Break_End_Time;
    v_Change_Day.Plan_Time        := i_Plan_Time;
  
    o_Change.Change_Days.Extend();
    o_Change.Change_Days(o_Change.Change_Days.Count) := v_Change_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
  begin
    return g_Cache_Company_Timezones(i_Company_Id);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Company_Infos.Load(i_Company_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Dbtimezone;
      end if;
    
      g_Cache_Company_Timezones(i_Company_Id) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Filial_Id;
  begin
    return g_Cache_Filial_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Filials.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Filial_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Location_Id;
  begin
    return g_Cache_Location_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Location_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date is
  begin
    if i_Timezone is not null then
      return to_date(to_char(i_Timestamp At time zone i_Timezone, 'ddmmyyyyhh24miss'),
                     'ddmmyyyyhh24miss');
    end if;
  
    return to_date(to_char(i_Timestamp, 'ddmmyyyyhh24miss'), 'ddmmyyyyhh24miss');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date is
  begin
    return Timestamp_To_Date(i_Timestamp => Current_Timestamp,
                             i_Timezone  => Load_Timezone(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id));
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype is
    r_Device Htt_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Htt_Devices q
     where q.Company_Id = i_Company_Id
       and q.Device_Type_Id = i_Device_Type_Id
       and q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt is
    result Htt_Pref.Time_Kind_Nt;
  begin
    select Tk.Name, Lower(Tk.Pcode)
      bulk collect
      into result
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Pcode is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number is
    result number;
  begin
    result := z_Htt_Time_Kinds.Take(i_Company_Id => i_Company_Id, i_Time_Kind_Id => i_Time_Kind_Id).Parent_Id;
  
    if result is null then
      result := i_Time_Kind_Id;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Code varchar2(100) := i_Company_Id || ' ' || i_Pcode;
    result number;
  begin
    return g_Cache_Time_Kind_Ids(v_Code);
  exception
    when No_Data_Found then
      select Time_Kind_Id
        into result
        from Htt_Time_Kinds
       where Company_Id = i_Company_Id
         and Pcode = i_Pcode;
    
      g_Cache_Time_Kind_Ids(v_Code) := result;
    
      return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number is
    result Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into result
      from Htt_Time_Kinds Tk
      left join Htt_Time_Kinds p
        on p.Company_Id = Tk.Company_Id
       and p.Time_Kind_Id = Tk.Parent_Id
     where Tk.Company_Id = i_Company_Id
       and (Tk.Pcode member of i_Pcodes or p.Pcode member of i_Pcodes);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number is
    result number;
  begin
    select t.Person_Id
      into result
      from Htt_Persons t
     where t.Company_Id = i_Company_Id
       and t.Pin = i_Pin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select p.Schedule_Id
      into result
      from Htt_Schedules p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Pin_Autogenerate),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Photo_As_Face_Rec),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
  begin
    return z_Htt_Persons.Load(i_Company_Id => i_Company_Id, --
                              i_Person_Id  => i_Person_Id).Pin;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number is
    result Array_Number;
  begin
    select q.Filial_Id
      bulk collect
      into result
      from Htt_Location_Persons q
     where q.Company_Id = i_Company_Id
       and q.Location_Id = i_Location_Id
       and q.Person_Id = i_Person_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_009(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when others then
      Htt_Error.Raise_010(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_011(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_012(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number is
    result number;
  begin
    select q.Device_Type_Id
      into result
      from Htt_Device_Types q
     where q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2 is
    result varchar2(20);
  begin
    select q.Pcode
      into result
      from Htt_Device_Types q
     where q.Device_Type_Id = i_Device_Type_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2 is
    v_Key varchar2(100 char) := to_char(Dbms_Crypto.Randombytes(32));
  begin
    return Fazo.Hash_Sha1(i_Person_Id || ':qr_code_secret_key:' || v_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2 is
  begin
    return 'manager_device:' || i_Serial_Number;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone is
  begin
    return From_Tz(cast(i_Date as timestamp), i_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number is
  begin
    return Trunc(i_Date) - Trunc(i_Date, 'iw') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number is
    result number;
  begin
    select Calendar_Id
      into result
      from Htt_Calendars c
     where c.Company_Id = i_Company_Id
       and c.Filial_Id = i_Filial_Id
       and c.Pcode = Htt_Pref.c_Pcode_Default_Calendar;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number is
    v_Calendar_Id number;
    result        Array_Number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    select Cd.Week_Day_No
      bulk collect
      into result
      from Htt_Calendar_Rest_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = v_Calendar_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean is
  begin
    if not z_Htt_Calendar_Days.Exist(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Calendar_Id   => i_Calendar_Id,
                                     i_Calendar_Date => i_Date,
                                     o_Row           => o_Calendar_Day) then
      begin
        select *
          into o_Calendar_Day
          from Htt_Calendar_Days Cd
         where Cd.Company_Id = i_Company_Id
           and Cd.Filial_Id = i_Filial_Id
           and Cd.Calendar_Id = i_Calendar_Id
           and Cd.Swapped_Date = i_Date;
      exception
        when No_Data_Found then
          return false;
      end;
    end if;
  
    return true;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Rest_Days    Array_Number;
    v_Calendar_Id  number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    v_Rest_Days := Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Calendar_Id => v_Calendar_Id);
  
    if Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                       i_Filial_Id    => i_Filial_Id,
                       i_Calendar_Id  => v_Calendar_Id,
                       i_Date         => i_Date,
                       o_Calendar_Day => r_Calendar_Day) and
       r_Calendar_Day.Day_Kind in
       (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest) then
      return true;
    end if;
  
    return Fazo.Contains(v_Rest_Days, Iso_Week_Day_No(i_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Rest_Days_Count number := 0;
    v_Holidays_Count  number;
  begin
    if i_End_Date < i_Begin_Date then
      return 0;
    end if;
  
    select count(*)
      into v_Holidays_Count
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = i_Calendar_Id
       and Cd.Calendar_Date between i_Begin_Date and i_End_Date
       and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest);
  
    for r in (select Rd.Week_Day_No
                from Htt_Calendar_Rest_Days Rd
               where Rd.Company_Id = i_Company_Id
                 and Rd.Filial_Id = i_Filial_Id
                 and Rd.Calendar_Id = i_Calendar_Id)
    loop
      v_Rest_Days_Count := v_Rest_Days_Count +
                           (Trunc(i_End_Date, 'iw') - Trunc(i_Begin_Date + 7, 'iw')) / 7;
    
      if i_End_Date - Trunc(i_End_Date, 'iw') + 1 >= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    
      if i_Begin_Date - Trunc(i_Begin_Date, 'iw') + 1 <= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    end loop;
  
    return v_Holidays_Count + v_Rest_Days_Count;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Type = i_Track_Type
       and q.Track_Datetime = i_Track_Datetime
       and q.Device_Id = i_Device_Id;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean is
  begin
    o_Timesheet := Timesheet(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Timesheet_Date => i_Timesheet_Date);
  
    return o_Timesheet.Company_Id is not null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Request
  (
    i_Company_Id      number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Staff_Id = i_Staff_Id
       and q.Request_Kind_Id = i_Request_Kind_Id
       and q.Status = Htt_Pref.c_Request_Status_Completed
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype is
    result Htt_Timesheets%rowtype;
  begin
    select *
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date = i_Timesheet_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean is
    v_Track_Latlng    Array_Varchar2;
    v_Location_Latlng Array_Varchar2;
  begin
    v_Track_Latlng := Fazo.Split(i_Latlng, ',');
  
    for r in (select l.Latlng, l.Accuracy
                from Htt_Locations l
               where l.Company_Id = i_Company_Id
                 and l.Prohibited = 'Y'
                 and l.State = 'A'
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = l.Location_Id
                         and Lp.Person_Id = i_Person_Id))
    loop
      v_Location_Latlng := Fazo.Split(r.Latlng, ',');
    
      if r.Accuracy >= Nvl(Trunc(Power(Power(69.1 * (v_Location_Latlng(1) - v_Track_Latlng(1)), 2) +
                                       Power(53.0 * (v_Location_Latlng(2) - v_Track_Latlng(2)), 2),
                                       0.5) / 0.00062137),
                           0) then
        return true;
      end if;
    end loop;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date + Href_Pref.c_Diff_Hiring <= i_Period
       and Nvl(s.Dismissal_Date + Href_Pref.c_Diff_Dismissal, i_Period) >= i_Period
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt is
    result Href_Pref.Period_Nt;
  begin
    select q.Begin_Date, q.End_Date
      bulk collect
      into result
      from (select Nvl(Lag(s.Dismissal_Date)
                       Over(order by s.Hiring_Date) + Href_Pref.c_Diff_Dismissal,
                       Href_Pref.c_Min_Date) as Begin_Date,
                   s.Hiring_Date + Href_Pref.c_Diff_Hiring as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
            union
            select s.Dismissal_Date + Href_Pref.c_Diff_Dismissal as Begin_Date,
                   Href_Pref.c_Max_Date as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
               and s.Hiring_Date = (select max(S1.Hiring_Date)
                                      from Href_Staffs S1
                                     where S1.Company_Id = i_Company_Id
                                       and S1.Filial_Id = i_Filial_Id
                                       and S1.Employee_Id = i_Employee_Id
                                       and S1.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                                       and S1.State = 'A')
               and s.Dismissal_Date is not null) q;
  
    if Result.Count = 0 then
      Result.Extend;
      result(Result.Last) := Href_Pref.Period_Rt(Href_Pref.c_Min_Date, Href_Pref.c_Max_Date);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number is
    f_Arr  Array_Number;
    v_Time varchar2(5) := to_char(i_Date, Href_Pref.c_Time_Format_Minute);
  begin
    f_Arr := Fazo.To_Array_Number(Fazo.Split(v_Time, ':'));
    return f_Arr(1) * 60 + f_Arr(2);
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2 is
  begin
    if i_Minutes is null then
      return null;
    end if;
    return Lpad(Trunc(i_Minutes / 60), 2, '0') || ':' || Lpad(mod(i_Minutes, 60), 2, '0');
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2 is
    v_Seconds number := i_Seconds;
    v_Value   number;
    v_Sign    varchar2(1);
    result    varchar2(50 char);
  begin
    if Nvl(v_Seconds, 0) = 0 then
      return null;
    end if;
  
    if v_Seconds < 0 then
      v_Sign    := '-';
      v_Seconds := -v_Seconds;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(v_Seconds / 3600);
    else
      v_Value := Round(v_Seconds / 3600, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(mod(v_Seconds, 3600) / 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    if i_Show_Minutes and i_Show_Seconds then
      v_Value := Trunc(mod(v_Seconds, 60));
    
      if i_Show_Words then
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
        
          result := result || v_Value || ' ' || t('sec');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return v_Sign || result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2 is
    v_Value number;
    result  varchar2(50 char);
  begin
    if Nvl(i_Minutes, 0) = 0 then
      return null;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(i_Minutes / 60);
    else
      v_Value := Round(i_Minutes / 60, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := mod(Trunc(i_Minutes), 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return result;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype is
    result Htt_Request_Kind_Accruals%rowtype;
  begin
    select p.*
      into result
      from Htt_Request_Kind_Accruals p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Request_Kind_Id = i_Request_Kind_Id
       and p.Accrual_Kind = i_Accrual_Kind
       and i_Period_End <= p.Period
       and Trunc(p.Period, 'yyyy') <= i_Period_Begin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number is
    v_Date      date := i_Request_Begin_Time;
    r_Timesheet Htt_Timesheets%rowtype;
    r_Schedule  Htt_Schedules%rowtype;
    result      number := 0;
  begin
    for i in 0 .. Floor(i_Request_End_Time - v_Date)
    loop
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Date + i);
    
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => r_Timesheet.Schedule_Id);
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days and
         r_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Calendar_Id => r_Schedule.Calendar_Id,
                                  i_Date        => r_Timesheet.Timesheet_Date) then
        result := result + 1;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Start date := Trunc(i_Period, 'yyyy');
    v_Period_End   date := Year_Last_Day(i_Period);
    v_Request_Id   number := Nvl(i_Request_Id, -1);
    v_Calendar_Id  number := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Days_Cnt number;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists
               (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind in (Htt_Pref.c_Day_Kind_Work,
                                            Htt_Pref.c_Day_Kind_Rest,
                                            Htt_Pref.c_Day_Kind_Nonworking)
                         and not exists
                       (select 1
                                from Htt_Calendar_Rest_Days Rd
                               where Rd.Company_Id = k.Company_Id
                                 and Rd.Filial_Id = k.Filial_Id
                                 and Rd.Calendar_Id = Nvl(k.Calendar_Id, v_Calendar_Id)
                                 and Rd.Week_Day_No =
                                     (Trunc(k.Timesheet_Date) - Trunc(k.Timesheet_Date, 'iw') + 1)))
               group by p.Interval_Date);
    elsif r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind = Htt_Pref.c_Day_Kind_Work)
               group by p.Interval_Date);
    else
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
               group by p.Interval_Date);
    end if;
  
    return v_Days_Cnt;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    v_Error_Date date;
  begin
    select Dm.Schedule_Date
      into v_Error_Date
      from Htt_Schedule_Origin_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of i_Dates
       and exists (select 1
              from Htt_Schedule_Origin_Day_Marks Sm
             where Sm.Company_Id = Dm.Company_Id
               and Sm.Filial_Id = Dm.Filial_Id
               and Sm.Schedule_Id = Dm.Schedule_Id
               and Sm.Schedule_Date = Dm.Schedule_Date
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_013(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                           i_Filial_Id => i_Filial_Id, --
                                           i_Schedule_Id => i_Schedule_Id).Name,
                        i_Schedule_Date => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  ) is
    v_Error_Day number;
  begin
    select Dm.Day_No
      into v_Error_Day
      from Htt_Schedule_Template_Marks Dm
     where Dm.Template_Id = i_Template_Id
       and Dm.Day_No member of i_Day_Numbers
       and exists (select 1
              from Htt_Schedule_Template_Marks Sm
             where Sm.Template_Id = Dm.Template_Id
               and Sm.Day_No = Dm.Day_No
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_014(i_Template_Name => z_Htt_Schedule_Templates.Load(i_Template_Id).Name,
                        i_Day_No        => v_Error_Day);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    begin
      select Tl.Timesheet_Date
        into v_Locked_Date
        from Htt_Timesheet_Locks Tl
       where Tl.Company_Id = i_Company_Id
         and Tl.Filial_Id = i_Filial_Id
         and Tl.Staff_Id = i_Staff_Id
         and Tl.Timesheet_Date member of i_Dates
         and Rownum = 1;
    
      r_Timebook := z_Hpr_Timebooks.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Timebook_Id => z_Hpr_Timesheet_Locks.Load(i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Staff_Id => i_Staff_Id, --
                                                          i_Timesheet_Date => v_Locked_Date).Timebook_Id);
    
      Htt_Error.Raise_015(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => v_Locked_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    exception
      when No_Data_Found then
        null;
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Begin date := Year_Last_Day(i_Request_Begin_Time);
    v_Period_End   date := Year_Last_Day(i_Request_End_Time);
  
    --------------------------------------------------
    Procedure Assert_Year
    (
      i_Year_Begin date,
      i_Year_End   date
    ) is
      v_Used_Days    number;
      v_Request_Days number;
      r_Accrual      Htt_Request_Kind_Accruals%rowtype;
    
      v_Begin_Time date := Greatest(i_Request_Begin_Time, i_Year_Begin);
      v_End_Time   date := Least(i_Request_End_Time, i_Year_End);
    begin
      v_Request_Days := Count_Request_Days(i_Company_Id         => i_Company_Id,
                                           i_Filial_Id          => i_Filial_Id,
                                           i_Staff_Id           => i_Staff_Id,
                                           i_Day_Count_Type     => r_Request_Kind.Day_Count_Type,
                                           i_Request_Begin_Time => v_Begin_Time,
                                           i_Request_End_Time   => v_End_Time);
    
      r_Accrual := Load_Request_Kind_Accrual(i_Company_Id      => i_Company_Id,
                                             i_Filial_Id       => i_Filial_Id,
                                             i_Staff_Id        => i_Staff_Id,
                                             i_Request_Kind_Id => i_Request_Kind_Id,
                                             i_Accrual_Kind    => i_Accrual_Kind,
                                             i_Period_Begin    => v_Begin_Time,
                                             i_Period_End      => v_End_Time);
    
      r_Accrual.Accrued_Days := Nvl(r_Accrual.Accrued_Days, 0);
    
      v_Used_Days := Get_Request_Kind_Used_Days(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => i_Staff_Id,
                                                i_Request_Kind_Id => i_Request_Kind_Id,
                                                i_Accrual_Kind    => i_Accrual_Kind,
                                                i_Period          => v_End_Time,
                                                i_Request_Id      => i_Request_Id);
      if v_Used_Days + v_Request_Days > r_Accrual.Accrued_Days then
        Htt_Error.Raise_016(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                        i_Filial_Id  => i_Filial_Id,
                                                                        i_Staff_Id   => i_Staff_Id),
                            i_Request_Kind_Name => r_Request_Kind.Name,
                            i_Year              => i_Year_End,
                            i_Used_Cnt          => v_Used_Days,
                            i_Request_Cnt       => v_Request_Days,
                            i_Annual_Limit      => r_Accrual.Accrued_Days);
      end if;
    end;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    while v_Period_Begin <= v_Period_End
    loop
      v_Period_Begin := Year_Last_Day(v_Period_Begin);
    
      Assert_Year(i_Year_Begin => Trunc(v_Period_Begin, 'yyyy'), i_Year_End => v_Period_Begin);
    
      v_Period_Begin := v_Period_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  ) is
    v_Request_Id number;
    v_Begin_Time date;
    v_End_Time   date;
  begin
    select q.Request_Id, q.Begin_Time, q.End_Time
      into v_Request_Id, v_Begin_Time, v_End_Time
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Request_Id <> i_Request_Id
       and q.Staff_Id = i_Staff_Id
       and q.Status in (Htt_Pref.c_Request_Status_Completed, Htt_Pref.c_Request_Status_Approved)
       and (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
           i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and --
           q.End_Time > i_Begin_Time and q.Begin_Time < i_End_Time or
           not (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
            i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day) and
           Trunc(q.End_Time) >= Trunc(i_Begin_Time) and Trunc(q.Begin_Time) <= Trunc(i_End_Time))
       and Rownum = 1;
  
    Htt_Error.Raise_017(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id    => v_Request_Id,
                        i_Intersect_Begin => v_Begin_Time,
                        i_Intersect_End   => v_End_Time,
                        i_Request_Type    => i_Request_Type,
                        i_Begin_Time      => i_Begin_Time,
                        i_End_Time        => i_End_Time);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  ) is
    v_Error_Date   date;
    v_Intersect_Id number;
  begin
    select Sd.Change_Date, Sd.Change_Id
      into v_Error_Date, v_Intersect_Id
      from Htt_Change_Days Sd
     where Sd.Company_Id = i_Company_Id
       and Sd.Filial_Id = i_Filial_Id
       and Sd.Staff_Id = i_Staff_Id
       and Sd.Change_Id <> i_Change_Id
       and exists (select 1
              from Htt_Change_Days Cd
             where Cd.Company_Id = i_Company_Id
               and Cd.Filial_Id = i_Filial_Id
               and Cd.Staff_Id = i_Staff_Id
               and Cd.Change_Id = i_Change_Id
               and Cd.Change_Date = Sd.Change_Date)
       and exists (select 1
              from Htt_Plan_Changes Pc
             where Pc.Company_Id = i_Company_Id
               and Pc.Filial_Id = i_Filial_Id
               and Pc.Change_Id = Sd.Change_Id
               and Pc.Status in (Htt_Pref.c_Change_Status_Approved,
                                 Htt_Pref.c_Change_Status_Completed))
       and Rownum = 1;
  
    Htt_Error.Raise_100(i_Staff_Name   => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id => v_Intersect_Id,
                        i_Change_Date  => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number is
  begin
    if i_Day_Kind in (Htt_Pref.c_Day_Kind_Rest, Htt_Pref.c_Day_Kind_Additional_Rest) then
      return 0;
    end if;
  
    return(i_End_Time - i_Begin_Time - Nvl(i_Break_End_Time - i_Break_Begin_Time, 0)) * 1440;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Time difference in seconds
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number is
  begin
    return Greatest(Round((i_Time1 - i_Time2) * 86400), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- intersection part of two timelines
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number is
  begin
    if i_Fr_Begin >= i_Fr_End or i_Sc_Begin >= i_Sc_End then
      return 0;
    end if;
  
    return Time_Diff(Least(i_Sc_End, Greatest(i_Fr_End, i_Sc_Begin)),
                     Greatest(Least(i_Fr_Begin, i_Sc_End), i_Sc_Begin));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number is
  begin
    return Timeline_Intersection(i_Fr_Begin => i_Begin_Time,
                                 i_Fr_End   => i_End_Time,
                                 i_Sc_Begin => i_Input,
                                 i_Sc_End   => i_Output) - --
    Timeline_Intersection(i_Fr_Begin => i_Begin_Break_Time,
                          i_Fr_End   => i_End_Break_Time,
                          i_Sc_Begin => i_Input,
                          i_Sc_End   => i_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select q.Track_Id
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date = i_Track_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2 is
    r_Change Htt_Plan_Changes%rowtype;
    result   varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Plan_Changes.Name)));
  
    r_Change := z_Htt_Plan_Changes.Take(i_Company_Id => Md_Env.Company_Id,
                                        i_Filial_Id  => Md_Env.Filial_Id,
                                        i_Change_Id  => i_Change_Id);
  
    if r_Change.Change_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                    i_Filial_Id  => r_Change.Filial_Id,
                                                    i_Staff_Id   => r_Change.Staff_Id),
                               r_Change.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2 is
    r_Request Htt_Requests%rowtype;
    result    varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Requests.Name)));
  
    r_Request := z_Htt_Requests.Take(i_Company_Id => Md_Env.Company_Id,
                                     i_Filial_Id  => Md_Env.Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    if r_Request.Request_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                    i_Filial_Id  => r_Request.Filial_Id,
                                                    i_Staff_Id   => r_Request.Staff_Id),
                               r_Request.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2 is
    r_Track Htt_Tracks%rowtype;
    result  varchar(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Tracks.Name)));
  
    r_Track := z_Htt_Tracks.Take(i_Company_Id => Md_Env.Company_Id,
                                 i_Filial_Id  => Md_Env.Filial_Id,
                                 i_Track_Id   => i_Track_Id);
  
    if r_Track.Track_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{person_name} by $2{created_on}',
                               z_Mr_Natural_Persons.Take(i_Company_Id => r_Track.Company_Id, i_Person_Id => r_Track.Person_Id).Name,
                               r_Track.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Request_Kind_Id
      into result
      from Htt_Request_Kinds
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2 is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    return z_Htt_Request_Kinds.Load(i_Company_Id      => r_Request.Company_Id,
                                    i_Request_Kind_Id => r_Request.Request_Kind_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2 is
    v_Language varchar2(20);
  begin
    if Biruni_Route.Get_Lang_Code = 'en' then
      v_Language := 'english';
    elsif Biruni_Route.Get_Lang_Code = 'uz' then
      v_Language := '''latin uzbek''';
    else
      v_Language := 'russian';
    end if;
  
    return 'nls_date_language = ' || v_Language;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2 is
    v_Format       varchar2(20) := 'fmdd mon. yyyy';
    v_Nls_Language varchar2(100) := Get_Nls_Language;
  begin
    case i_Request_Type
      when Htt_Pref.c_Request_Type_Part_Of_Day then
        return t('$1{request_date}, $2{request_begin_time}-$3{request_end_time}',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_Begin_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language),
                 to_char(i_End_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language));
      when Htt_Pref.c_Request_Type_Full_Day then
        return t('$1{request_date} (full day)', to_char(i_Begin_Time, v_Format, v_Nls_Language));
      else
        return t('$1{request_begin_date} - $2{request_end_date} ($3 days)',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_End_Time, v_Format, v_Nls_Language),
                 Trunc(i_End_Time - i_Begin_Time) + 1);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number is
    result                 number;
    v_Turnout_Time_Kind_Id number;
    v_Take_Turnout         varchar2(1) := 'N';
  begin
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    if i_Take_Turnout_Requests then
      v_Take_Turnout := 'Y';
    end if;
  
    select sum(t.Fact_Value)
      into result
      from Htt_Timesheet_Facts t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Timesheet_Id = i_Timesheet_Id
       and exists (select 1
              from Htt_Time_Kinds p
             where p.Company_Id = t.Company_Id
               and p.Time_Kind_Id = t.Time_Kind_Id
               and p.Requestable = 'Y'
               and (v_Take_Turnout = 'Y' or --
                   (v_Take_Turnout = 'N' and --
                   (p.Parent_Id is null or --
                   p.Parent_Id <> v_Turnout_Time_Kind_Id))));
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- gets facts with children
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number is
    result number;
  begin
    select sum(Tf.Fact_Value)
      into result
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date = i_Timesheet_Date
       and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = i_Time_Kind_Id;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number is
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    v_Fact_Value     number;
    v_Children_Value number := 0;
  begin
    r_Timesheet_Fact := z_Htt_Timesheet_Facts.Take(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Timesheet_Id => i_Timesheet_Id,
                                                   i_Time_Kind_Id => i_Time_Kind_Id);
  
    v_Fact_Value := Nvl(r_Timesheet_Fact.Fact_Value, 0);
  
    if i_Take_Children then
      select sum(t.Fact_Value)
        into v_Children_Value
        from Htt_Timesheet_Facts t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Timesheet_Id = i_Timesheet_Id
         and exists (select 1
                from Htt_Time_Kinds p
               where p.Company_Id = t.Company_Id
                 and p.Time_Kind_Id = t.Time_Kind_Id
                 and p.Parent_Id = i_Time_Kind_Id);
    
      v_Children_Value := Nvl(v_Children_Value, 0);
    end if;
  
    v_Fact_Value := v_Fact_Value + v_Children_Value;
  
    return v_Fact_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(q.Parent_Id, q.Time_Kind_Id), sum(q.Fact_Value)
      bulk collect
      into result
      from (select Tk.Parent_Id, Tk.Time_Kind_Id, f.Fact_Value
              from Htt_Timesheet_Facts f
              join Htt_Time_Kinds Tk
                on Tk.Company_Id = f.Company_Id
               and Tk.Time_Kind_Id = f.Time_Kind_Id
             where f.Company_Id = i_Company_Id
               and f.Filial_Id = i_Filial_Id
               and f.Timesheet_Id = i_Timesheet_Id
             order by Tk.Pcode) q
     group by Nvl(q.Parent_Id, q.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- sum of time kind facts over period [i_Begin_Date, i_End_Date]
  -- only parent time kinds are taken
  -- if time kind is child (has parent_id) it is converted to its parent
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(Tk.Parent_Id, Tk.Time_Kind_Id), sum(Tf.Fact_Value)
      bulk collect
      into result
      from Htt_Timesheet_Facts Tf
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
      join Htt_Timesheets t
        on t.Company_Id = Tf.Company_Id
       and t.Filial_Id = Tf.Filial_Id
       and t.Timesheet_Id = Tf.Timesheet_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date >= i_Begin_Date
       and t.Timesheet_Date <= i_End_Date
     group by Nvl(Tk.Parent_Id, Tk.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Turnout_Count number;
    v_Turnout_Ids   Array_Number;
  begin
    v_Turnout_Ids := Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                              i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select max(Qr.Cnt)
      into v_Turnout_Count
      from (select count(*) Cnt
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Employee_Id = i_Employee_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and exists (select *
                      from Htt_Timesheet_Facts Tf
                     where Tf.Company_Id = t.Company_Id
                       and Tf.Filial_Id = t.Filial_Id
                       and Tf.Timesheet_Id = t.Timesheet_Id
                       and Tf.Time_Kind_Id member of v_Turnout_Ids
                       and Tf.Fact_Value > 0)
             group by t.Staff_Id) Qr;
  
    return Nvl(v_Turnout_Count, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates number of vacation days
  -- that has locked fact days
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    v_Rest_Days   Array_Number;
    v_Calendar_Id number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
    v_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id);
    v_Rest_Days   := Htt_Util.Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => v_Calendar_Id);
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and (Trunc(t.Timesheet_Date) - Trunc(t.Timesheet_Date, 'iw') + 1) not member of
     v_Rest_Days
       and not exists
     (select *
              from Htt_Calendar_Days Cd
             where Cd.Company_Id = t.Company_Id
               and Cd.Filial_Id = t.Filial_Id
               and Cd.Calendar_Id = v_Calendar_Id
               and Cd.Calendar_Date = t.Timesheet_Date
               and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest))
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and t.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and t.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Plan_Time)
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date between i_Begin_Date and i_End_Date
       and q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and q.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Vacation_Days_Count      number := i_End_Date - i_Begin_Date + 1;
    v_Official_Rest_Days_Count number;
    v_Default_Calendar_Id      number;
    v_Fact_Days                number;
  begin
    v_Default_Calendar_Id := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                           i_Filial_Id   => i_Filial_Id,
                                                           i_Calendar_Id => v_Default_Calendar_Id,
                                                           i_Begin_Date  => i_Begin_Date,
                                                           i_End_Date    => i_End_Date);
  
    v_Fact_Days := Calc_Fact_Locked_Vacation_Days(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    return Nvl(v_Vacation_Days_Count - v_Official_Rest_Days_Count - v_Fact_Days, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Schedule_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Schedule_Id  number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Schedule_Id = i_Schedule_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_103(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Schedule_Id => i_Schedule_Id).Name,
                          i_Month         => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Staff_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Staff_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_104(i_Staff_Name => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Robot_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Robot_Id number;
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end),
           max(p.Robot_Id)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes, v_Robot_Id
      from Hpd_Agreements_Cache p
      join Htt_Robot_Schedule_Days q
        on q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = p.Robot_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and i_Period between p.Begin_Date and p.End_Date;
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_106(i_Robot_Name => z_Mrf_Robots.Take(i_Company_Id => i_Company_Id, --
                                          i_Filial_Id => i_Filial_Id, --
                                          i_Robot_Id => v_Robot_Id).Name,
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => result,
                         o_Plan_Minutes => v_Dummy,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => v_Dummy,
                         o_Plan_Minutes => result,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  ) is
    v_Tk_Ids Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into v_Tk_Ids
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Parent_Id = i_Time_Kind_Id;
  
    Fazo.Push(v_Tk_Ids, i_Time_Kind_Id);
  
    select sum(Tf.Fact_Value), count(distinct t.Timesheet_Id)
      into o_Fact_Seconds, o_Fact_Days
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
       and Tf.Time_Kind_Id member of v_Tk_Ids
       and Tf.Fact_Value > 0
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  
    o_Fact_Seconds := Nvl(o_Fact_Seconds, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean is
    v_Days_Cnt number := 0;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Hpd_Agreements_Cache p
        join Htt_Robot_Schedule_Days q
          on q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Robot_Id = p.Robot_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and i_Period between p.Begin_Date and p.End_Date;
    else
      select count(*)
        into v_Days_Cnt
        from Htt_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Schedule_Id = i_Schedule_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    end if;
  
    return v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date is
  begin
    return Add_Months(Trunc(i_Date, 'yyyy'), 12) - 1;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date is
  begin
    return Last_Day(Add_Months(Trunc(i_Date, 'Q'), 2));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined is
    v_Track         Htt_Pref.Gps_Track_Data_Rt;
    v_Track_Arr     Array_Varchar2;
    v_Len           number;
    v_Offset        number;
    v_Pos           pls_integer;
    v_Last_Pos      pls_integer;
    v_Part_Data     varchar2(32767);
    c_Row_Delimiter varchar(1) := Chr(10);
  begin
    v_Track.Company_Id := i_Company_Id;
    v_Track.Filial_Id  := i_Filial_Id;
    v_Track.Person_Id  := i_Person_Id;
  
    for Gps_Track in (select q.*,
                             (select w.Data
                                from Htt_Gps_Track_Datas w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Track_Id = q.Track_Id) as Data
                        from Htt_Gps_Tracks q
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Person_Id = i_Person_Id
                         and q.Track_Date between i_Begin_Date and i_End_Date)
    loop
      if Dbms_Lob.Isopen(Gps_Track.Data) = 0 then
        Dbms_Lob.Open(Lob_Loc => Gps_Track.Data, Open_Mode => Dbms_Lob.Lob_Readonly);
      end if;
    
      v_Track.Track_Id   := Gps_Track.Track_Id;
      v_Track.Track_Date := Gps_Track.Track_Date;
    
      v_Offset := 1;
      v_Len    := Dbms_Lob.Getlength(Gps_Track.Data);
    
      while v_Offset < v_Len
      loop
        v_Part_Data := v_Part_Data ||
                       Utl_Raw.Cast_To_Varchar2(Dbms_Lob.Substr(Lob_Loc => Gps_Track.Data,
                                                                Amount  => 30000,
                                                                Offset  => v_Offset));
      
        v_Pos      := 1;
        v_Last_Pos := 1;
      
        loop
          v_Pos := Instr(v_Part_Data, Htt_Pref.c_Gps_Track_Row_Delimiter, v_Last_Pos);
        
          if v_Pos > 0 then
            v_Track_Arr := Fazo.Split(Substr(v_Part_Data, v_Last_Pos, v_Pos - v_Last_Pos),
                                      Htt_Pref.c_Gps_Track_Column_Delimiter);
          
            if v_Track_Arr.Count < 5 then
              v_Track_Arr.Extend(5); -- handling error
            end if;
          
            v_Track.Track_Time := to_date(to_char(v_Track.Track_Date, Href_Pref.c_Date_Format_Day) || ' ' ||
                                          v_Track_Arr(1),
                                          Href_Pref.c_Date_Format_Second);
            v_Track.Lat        := v_Track_Arr(2);
            v_Track.Lng        := v_Track_Arr(3);
            v_Track.Accuracy   := v_Track_Arr(4);
            v_Track.Provider   := v_Track_Arr(5);
            -- TODO: temporary provider filters only GPS
            if (i_Only_Gps = 'Y' and v_Track.Provider = Htt_Pref.c_Provider_Gps or i_Only_Gps = 'N') and
               v_Track.Accuracy <= 50 then
              pipe row(v_Track);
            end if;
          else
            v_Part_Data := Substr(v_Part_Data, v_Last_Pos);
            exit;
          end if;
        
          v_Last_Pos := v_Pos + Length(c_Row_Delimiter);
        end loop;
      
        v_Offset := v_Offset + 30000;
      end loop;
    
      Dbms_Lob.Close(Gps_Track.Data);
    end loop;
  
    return;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Total_Distance)
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date between i_Begin_Date and i_End_Date;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select Nvl(Trunc(sum(Power(Power(69.1 * (Lat2 - Lat1), 2) + Power(53.0 * (Lng2 - Lng1), 2), 0.5)) /
                     0.00062137),
               0)
      into result
      from (select Lat Lat1,
                   Lng Lng1,
                   Lag(Lat) Over(order by Rownum) Lat2,
                   Lag(Lng) Over(order by Rownum) Lng2
              from (select q.*
                      from Gps_Track_Datas(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Person_Id  => i_Person_Id,
                                           i_Begin_Date => i_Track_Date,
                                           i_End_Date   => i_Track_Date) q
                     order by q.Track_Time))
     where Lat2 is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Location_Sync_Person_Global),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  -- day kind
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Work return varchar2 is
  begin
    return t('day_kind:work');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Rest return varchar2 is
  begin
    return t('day_kind:rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Additional_Rest return varchar2 is
  begin
    return t('day_kind:additional rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Holiday return varchar2 is
  begin
    return t('day_kind:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Nonworking return varchar2 is
  begin
    return t('day_kind:nonworking');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Swapped return varchar2 is
  begin
    return t('day_kind:swapped');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Day_Kind --
    when Htt_Pref.c_Day_Kind_Work then t_Day_Kind_Work --
    when Htt_Pref.c_Day_Kind_Rest then t_Day_Kind_Rest --
    when Htt_Pref.c_Day_Kind_Additional_Rest then t_Day_Kind_Additional_Rest --      
    when Htt_Pref.c_Day_Kind_Holiday then t_Day_Kind_Holiday --
    when Htt_Pref.c_Day_Kind_Nonworking then t_Day_Kind_Nonworking --
    when Htt_Pref.c_Day_Kind_Swapped then t_Day_Kind_Swapped --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Work, --
                                          Htt_Pref.c_Day_Kind_Rest,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Work, --
                                          t_Day_Kind_Rest,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Holiday,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Holiday,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  -- pattern kind (translate message should be renamed to pattern kind)
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Weekly return varchar2 is
  begin
    return t('schedule_kind:weekly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Periodic return varchar2 is
  begin
    return t('schedule_kind:periodic');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Pattern_Kind --
    when Htt_Pref.c_Pattern_Kind_Weekly then t_Pattern_Kind_Weekly --
    when Htt_Pref.c_Pattern_Kind_Periodic then t_Pattern_Kind_Periodic --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pattern_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Pattern_Kind_Weekly, --
                                          Htt_Pref.c_Pattern_Kind_Periodic),
                           Array_Varchar2(t_Pattern_Kind_Weekly, --
                                          t_Pattern_Kind_Periodic));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Custom return varchar2 is
  begin
    return t('schedule_kind:custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Flexible return varchar2 is
  begin
    return t('schedule_kind:flexible');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Hourly return varchar2 is
  begin
    return t('schedule_kind:hourly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Schedule_Kind --
    when Htt_Pref.c_Schedule_Kind_Custom then t_Schedule_Kind_Custom --
    when Htt_Pref.c_Schedule_Kind_Flexible then t_Schedule_Kind_Flexible --
    when Htt_Pref.c_Schedule_Kind_Hourly then t_Schedule_Kind_Hourly --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Schedule_Kind_Custom, --
                                          Htt_Pref.c_Schedule_Kind_Flexible,
                                          Htt_Pref.c_Schedule_Kind_Hourly),
                           Array_Varchar2(t_Schedule_Kind_Custom, --
                                          t_Schedule_Kind_Flexible,
                                          t_Schedule_Kind_Hourly));
  end;

  ----------------------------------------------------------------------------------------------------
  -- protocol
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Http return varchar2 is
  begin
    return t('protocol:http');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Https return varchar2 is
  begin
    return t('protocol:https');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2 is
  begin
    return --
    case i_Protocol --
    when Htt_Pref.c_Protocol_Http then t_Protocol_Http --
    when Htt_Pref.c_Protocol_Https then t_Protocol_Https --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Protocols return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Protocol_Http, --
                                          Htt_Pref.c_Protocol_Https),
                           Array_Varchar2(t_Protocol_Http, --
                                          t_Protocol_Https));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command kind
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Device return varchar2 is
  begin
    return t('command_kind: update device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_All_Device_Persons return varchar2 is
  begin
    return t('command_kind: update all device persons');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Person return varchar2 is
  begin
    return t('command_kind: update person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Device return varchar2 is
  begin
    return t('command_kind: remove device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Person return varchar2 is
  begin
    return t('command_kind: remove person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Sync_Tracks return varchar2 is
  begin
    return t('command_kind: sync tracks');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Command_Kind --
    when Htt_Pref.c_Command_Kind_Update_Device then t_Command_Kind_Update_Device --
    when Htt_Pref.c_Command_Kind_Update_All_Device_Persons then t_Command_Kind_Update_All_Device_Persons --
    when Htt_Pref.c_Command_Kind_Update_Person then t_Command_Kind_Update_Person --
    when Htt_Pref.c_Command_Kind_Remove_Device then t_Command_Kind_Remove_Device --
    when Htt_Pref.c_Command_Kind_Remove_Person then t_Command_Kind_Remove_Person --
    when Htt_Pref.c_Command_Kind_Sync_Tracks then t_Command_Kind_Sync_Tracks --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Kind_Update_Device,
                                          Htt_Pref.c_Command_Kind_Update_All_Device_Persons,
                                          Htt_Pref.c_Command_Kind_Update_Person,
                                          Htt_Pref.c_Command_Kind_Remove_Device,
                                          Htt_Pref.c_Command_Kind_Remove_Person,
                                          Htt_Pref.c_Command_Kind_Sync_Tracks),
                           Array_Varchar2(t_Command_Kind_Update_Device,
                                          t_Command_Kind_Update_All_Device_Persons,
                                          t_Command_Kind_Update_Person,
                                          t_Command_Kind_Remove_Device,
                                          t_Command_Kind_Remove_Person,
                                          t_Command_Kind_Sync_Tracks));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command status
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_New return varchar2 is
  begin
    return t('command_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Sent return varchar2 is
  begin
    return t('command_status: sent');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Complited return varchar2 is
  begin
    return t('command_status: complited');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Failed return varchar2 is
  begin
    return t('command_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2 is
  begin
    return --
    case i_Command_Status --
    when Htt_Pref.c_Command_Status_New then t_Command_Status_New --
    when Htt_Pref.c_Command_Status_Sent then t_Command_Status_Sent --
    when Htt_Pref.c_Command_Status_Complited then t_Command_Status_Complited --
    when Htt_Pref.c_Command_Status_Failed then t_Command_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Status_New,
                                          Htt_Pref.c_Command_Status_Sent,
                                          Htt_Pref.c_Command_Status_Complited,
                                          Htt_Pref.c_Command_Status_Failed),
                           Array_Varchar2(t_Command_Status_New,
                                          t_Command_Status_Sent,
                                          t_Command_Status_Complited,
                                          t_Command_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- person role
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Admin return varchar2 is
  begin
    return t('person_role:admin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Normal return varchar2 is
  begin
    return t('person_role:normal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2 is
  begin
    return --
    case i_Person_Role --
    when Htt_Pref.c_Person_Role_Admin then t_Person_Role_Admin --
    when Htt_Pref.c_Person_Role_Normal then t_Person_Role_Normal --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Roles return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Person_Role_Admin, --
                                          Htt_Pref.c_Person_Role_Normal),
                           Array_Varchar2(t_Person_Role_Admin, --
                                          t_Person_Role_Normal));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track type
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Input return varchar2 is
  begin
    return t('track_type:input');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Output return varchar2 is
  begin
    return t('track_type:output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Check return varchar2 is
  begin
    return t('track_type:check');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Merger return varchar2 is
  begin
    return t('track_type:merger');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Potential_Output return varchar2 is
  begin
    return t('track_type:potential');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Gps_Output return varchar2 is
  begin
    return t('track_type:potential gps output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2 is
  begin
    return --
    case i_Track_Type --
    when Htt_Pref.c_Track_Type_Input then t_Track_Type_Input --
    when Htt_Pref.c_Track_Type_Output then t_Track_Type_Output --
    when Htt_Pref.c_Track_Type_Check then t_Track_Type_Check --
    when Htt_Pref.c_Track_Type_Merger then t_Track_Type_Merger --
    when Htt_Pref.c_Track_Type_Potential_Output then t_Track_Type_Potential_Output --
    when Htt_Pref.c_Track_Type_Gps_Output then t_Track_Type_Gps_Output --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Type_Input,
                                          Htt_Pref.c_Track_Type_Output,
                                          Htt_Pref.c_Track_Type_Check,
                                          Htt_Pref.c_Track_Type_Merger,
                                          Htt_Pref.c_Track_Type_Potential_Output,
                                          Htt_Pref.c_Track_Type_Gps_Output),
                           Array_Varchar2(t_Track_Type_Input,
                                          t_Track_Type_Output,
                                          t_Track_Type_Check,
                                          t_Track_Type_Merger,
                                          t_Track_Type_Potential_Output,
                                          t_Track_Type_Gps_Output));
  end;

  ----------------------------------------------------------------------------------------------------
  -- provider
  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Gps return varchar2 is
  begin
    return t('provider:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Network return varchar2 is
  begin
    return t('provider:network');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2 is
  begin
    return --
    case i_Provider --
    when Htt_Pref.c_Provider_Gps then t_Provider_Gps --
    when Htt_Pref.c_Provider_Network then t_Provider_Network --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Providers return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Provider_Gps, --
                                          Htt_Pref.c_Provider_Network),
                           Array_Varchar2(t_Provider_Gps, --
                                          t_Provider_Network));
  end;

  ----------------------------------------------------------------------------------------------------
  -- mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Password return varchar2 is
  begin
    return t('mark_type:password');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Touch return varchar2 is
  begin
    return t('mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Rfid_Card return varchar2 is
  begin
    return t('mark_type:rfid_card');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Qr_Code return varchar2 is
  begin
    return t('mark_type:qr_code');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Face return varchar2 is
  begin
    return t('mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Manual return varchar2 is
  begin
    return t('mark_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Auto return varchar2 is
  begin
    return t('mark_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return --
    case i_Mark_Type --
    when Htt_Pref.c_Mark_Type_Password then t_Mark_Type_Password --
    when Htt_Pref.c_Mark_Type_Touch then t_Mark_Type_Touch --
    when Htt_Pref.c_Mark_Type_Rfid_Card then t_Mark_Type_Rfid_Card --
    when Htt_Pref.c_Mark_Type_Qr_Code then t_Mark_Type_Qr_Code --
    when Htt_Pref.c_Mark_Type_Face then t_Mark_Type_Face --
    when Htt_Pref.c_Mark_Type_Manual then t_Mark_Type_Manual --
    when Htt_Pref.c_Mark_Type_Auto then t_Mark_Type_Auto --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Mark_Type_Password,
                                          Htt_Pref.c_Mark_Type_Touch,
                                          Htt_Pref.c_Mark_Type_Rfid_Card,
                                          Htt_Pref.c_Mark_Type_Qr_Code,
                                          Htt_Pref.c_Mark_Type_Face,
                                          Htt_Pref.c_Mark_Type_Manual,
                                          Htt_Pref.c_Mark_Type_Auto),
                           Array_Varchar2(t_Mark_Type_Password,
                                          t_Mark_Type_Touch,
                                          t_Mark_Type_Rfid_Card,
                                          t_Mark_Type_Qr_Code,
                                          t_Mark_Type_Face,
                                          t_Mark_Type_Manual,
                                          t_Mark_Type_Auto));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track status
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Draft return varchar2 is
  begin
    return t('track_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Not_Used return varchar2 is
  begin
    return t('track_status:not_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Partially_Used return varchar2 is
  begin
    return t('track_status:partially_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Used return varchar2 is
  begin
    return t('track_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Htt_Pref.c_Track_Status_Draft then t_Track_Status_Draft --
    when Htt_Pref.c_Track_Status_Not_Used then t_Track_Status_Not_Used --
    when Htt_Pref.c_Track_Status_Partially_Used then t_Track_Status_Partially_Used --
    when Htt_Pref.c_Track_Status_Used then t_Track_Status_Used --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Status_Draft,
                                          Htt_Pref.c_Track_Status_Not_Used,
                                          Htt_Pref.c_Track_Status_Partially_Used,
                                          Htt_Pref.c_Track_Status_Used),
                           Array_Varchar2(t_Track_Status_Draft,
                                          t_Track_Status_Not_Used,
                                          t_Track_Status_Partially_Used,
                                          t_Track_Status_Used));
  end;

  ----------------------------------------------------------------------------------------------------
  -- plan load
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Part return varchar2 is
  begin
    return t('plan_load:part');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Full return varchar2 is
  begin
    return t('plan_load:full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Extra return varchar2 is
  begin
    return t('plan_load:extra');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2 is
  begin
    return case i_Plan_Load --
    when Htt_Pref.c_Plan_Load_Part then t_Plan_Load_Part --
    when Htt_Pref.c_Plan_Load_Full then t_Plan_Load_Full --
    when Htt_Pref.c_Plan_Load_Extra then t_Plan_Load_Extra --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Plan_Loads return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Plan_Load_Part,
                                          Htt_Pref.c_Plan_Load_Full,
                                          Htt_Pref.c_Plan_Load_Extra),
                           Array_Varchar2(t_Plan_Load_Part, --
                                          t_Plan_Load_Full, --
                                          t_Plan_Load_Extra));
  end;

  ----------------------------------------------------------------------------------------------------
  -- day count type
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Calendar_Days return varchar2 is
  begin
    return t('day_count_type:calendar days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Work_Days return varchar2 is
  begin
    return t('day_count_type:work days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Production_Days return varchar2 is
  begin
    return t('day_count_type:production days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2 is
  begin
    return case i_Day_Count_Type --
    when Htt_Pref.c_Day_Count_Type_Calendar_Days then t_Day_Count_Type_Calendar_Days --
    when Htt_Pref.c_Day_Count_Type_Work_Days then t_Day_Count_Type_Work_Days --
    when Htt_Pref.c_Day_Count_Type_Production_Days then t_Day_Count_Type_Production_Days end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Count_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Count_Type_Calendar_Days,
                                          Htt_Pref.c_Day_Count_Type_Work_Days,
                                          Htt_Pref.c_Day_Count_Type_Production_Days),
                           Array_Varchar2(t_Day_Count_Type_Calendar_Days,
                                          t_Day_Count_Type_Work_Days,
                                          t_Day_Count_Type_Production_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- carryover policy
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_All return varchar2 is
  begin
    return t('carryover_policy: all');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Zero return varchar2 is
  begin
    return t('carryover_policy: zero');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Cap return varchar2 is
  begin
    return t('carryover_policy: cap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2 is
  begin
    return case i_Carryover_Policy --
    when Htt_Pref.c_Carryover_Policy_All then t_Carryover_Policy_All --
    when Htt_Pref.c_Carryover_Policy_Zero then t_Carryover_Policy_Zero --
    when Htt_Pref.c_Carryover_Policy_Cap then t_Carryover_Policy_Cap end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Carryover_Policies return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Carryover_Policy_All,
                                          Htt_Pref.c_Carryover_Policy_Zero,
                                          Htt_Pref.c_Carryover_Policy_Cap),
                           Array_Varchar2(t_Carryover_Policy_All,
                                          t_Carryover_Policy_Zero,
                                          t_Carryover_Policy_Cap));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request kind
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Part_Of_Day return varchar2 is
  begin
    return t('request_type:part_of_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Full_Day return varchar2 is
  begin
    return t('request_type:full_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Multiple_Days return varchar2 is
  begin
    return t('request_type:multiple_days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2 is
  begin
    return case i_Request_Type --
    when Htt_Pref.c_Request_Type_Part_Of_Day then t_Request_Type_Part_Of_Day --
    when Htt_Pref.c_Request_Type_Full_Day then t_Request_Type_Full_Day --
    when Htt_Pref.c_Request_Type_Multiple_Days then t_Request_Type_Multiple_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Type_Part_Of_Day,
                                          Htt_Pref.c_Request_Type_Full_Day,
                                          Htt_Pref.c_Request_Type_Multiple_Days),
                           Array_Varchar2(t_Request_Type_Part_Of_Day,
                                          t_Request_Type_Full_Day,
                                          t_Request_Type_Multiple_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request status
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_New return varchar2 is
  begin
    return t('request_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Approved return varchar2 is
  begin
    return t('request_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Completed return varchar2 is
  begin
    return t('request_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Denied return varchar2 is
  begin
    return t('request_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2 is
  begin
    return case i_Request_Status --
    when Htt_Pref.c_Request_Status_New then t_Request_Status_New --
    when Htt_Pref.c_Request_Status_Approved then t_Request_Status_Approved --
    when Htt_Pref.c_Request_Status_Completed then t_Request_Status_Completed --
    when Htt_Pref.c_Request_Status_Denied then t_Request_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Status_New,
                                          Htt_Pref.c_Request_Status_Approved,
                                          Htt_Pref.c_Request_Status_Completed,
                                          Htt_Pref.c_Request_Status_Denied),
                           Array_Varchar2(t_Request_Status_New,
                                          t_Request_Status_Approved,
                                          t_Request_Status_Completed,
                                          t_Request_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2 is
    v_Request_Type varchar2(100);
  begin
    v_Request_Type := z_Htt_Request_Kinds.Load(i_Company_Id => i_Company_Id, i_Request_Kind_Id => t_Request_Kind_Id).Name;
  
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Request then
        return t('for $1{person_name} $2{request_kind_name} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Change_Status then
        return t('for $1{person_name} $2{request_kind_name} status change',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
        return t('for $1{person_name} $2{request_kind_name} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  -- attach types
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Auto return varchar2 is
  begin
    return t('attach_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Manual return varchar2 is
  begin
    return t('attach_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Global return varchar2 is
  begin
    return t('attach_type:global');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2 is
  begin
    return case i_Attach_Type --
    when Htt_Pref.c_Attach_Type_Manual then t_Attach_Type_Manual --
    when Htt_Pref.c_Attach_Type_Auto then t_Attach_Type_Auto --
    when Htt_Pref.c_Attach_Type_Global then t_Attach_Type_Global --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Attach_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Attach_Type_Manual,
                                          Htt_Pref.c_Attach_Type_Auto,
                                          Htt_Pref.c_Attach_Type_Global),
                           Array_Varchar2(t_Attach_Type_Manual,
                                          t_Attach_Type_Auto,
                                          t_Attach_Type_Global));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change status
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_New return varchar2 is
  begin
    return t('change_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Approved return varchar2 is
  begin
    return t('change_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Completed return varchar2 is
  begin
    return t('change_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Denied return varchar2 is
  begin
    return t('change_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2 is
  begin
    return case i_Change_Status --
    when Htt_Pref.c_Change_Status_New then t_Change_Status_New --
    when Htt_Pref.c_Change_Status_Approved then t_Change_Status_Approved --
    when Htt_Pref.c_Change_Status_Completed then t_Change_Status_Completed --
    when Htt_Pref.c_Change_Status_Denied then t_Change_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Status_New,
                                          Htt_Pref.c_Change_Status_Approved,
                                          Htt_Pref.c_Change_Status_Completed,
                                          Htt_Pref.c_Change_Status_Denied),
                           Array_Varchar2(t_Change_Status_New,
                                          t_Change_Status_Approved,
                                          t_Change_Status_Completed,
                                          t_Change_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change kind
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Swap return varchar2 is
  begin
    return t('change_kind:swap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Change_Plan return varchar2 is
  begin
    return t('change_kind:change_plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2 is
  begin
    return case i_Change_Kind --
    when Htt_Pref.c_Change_Kind_Swap then t_Change_Kind_Swap --
    when Htt_Pref.c_Change_Kind_Change_Plan then t_Change_Kind_Change_Plan --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Kind_Swap,
                                          Htt_Pref.c_Change_Kind_Change_Plan),
                           Array_Varchar2(t_Change_Kind_Swap, --
                                          t_Change_Kind_Change_Plan));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2 is
  begin
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Plan_Change then
        return t('for $1{person_name} $2{change_kind} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change then
        return t('for $1{person_name} $2{change_kind} status changed',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
        return t('for $1{person_name} $2{change_kind} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- dashboard status kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Worktime_Not_Started return varchar2 is
  begin
    return t('dashboard:working time not begin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Leave_Exists return varchar2 is
  begin
    return t('dashboard:leave');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Late return varchar2 is
  begin
    return t('dashboard:late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Intime return varchar2 is
  begin
    return t('dashboard:intime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Not_Come return varchar2 is
  begin
    return t('dashboard:not come');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Rest_Day return varchar2 is
  begin
    return t('dashboard:rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Additional_Rest_Day return varchar2 is
  begin
    return t('dashboard:additional rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Holiday return varchar2 is
  begin
    return t('dashboard:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Nonworking_Day return varchar2 is
  begin
    return t('dashboard:nonworking day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Not_Licensed_Day return varchar2 is
  begin
    return t('dashboard: not licensed day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_No_Timesheet return varchar2 is
  begin
    return t('dashboard:no timesheet');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2 is
  begin
    return case i_Dashboard_Status_Kinds --
    when Htt_Pref.c_Dashboard_Worktime_Not_Started then t_Dashboard_Worktime_Not_Started --
    when Htt_Pref.c_Dashboard_Leave_Exists then t_Dashboard_Leave_Exists --
    when Htt_Pref.c_Dashboard_Staff_Late then t_Dashboard_Staff_Late --
    when Htt_Pref.c_Dashboard_Staff_Intime then t_Dashboard_Staff_Intime --
    when Htt_Pref.c_Dashboard_Staff_Not_Come then t_Dashboard_Staff_Not_Come --
    when Htt_Pref.c_Dashboard_Rest_Day then t_Dashboard_Rest_Day --
    when Htt_Pref.c_Dashboard_Holiday then t_Dashboard_Holiday --
    when Htt_Pref.c_Dashboard_Additional_Rest_Day then t_Dashboard_Additional_Rest_Day --      
    when Htt_Pref.c_Dashboard_Nonworking_Day then t_Dashboard_Nonworking_Day --
    when Htt_Pref.c_Dashboard_Not_Licensed_Day then t_Dashboard_Not_Licensed_Day --
    when Htt_Pref.c_Dashboard_No_Timesheet then t_Dashboard_No_Timesheet --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dashboard_Status_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Dashboard_Worktime_Not_Started,
                                          Htt_Pref.c_Dashboard_Leave_Exists,
                                          Htt_Pref.c_Dashboard_Staff_Late,
                                          Htt_Pref.c_Dashboard_Staff_Intime,
                                          Htt_Pref.c_Dashboard_Staff_Not_Come,
                                          Htt_Pref.c_Dashboard_Rest_Day,
                                          Htt_Pref.c_Dashboard_Holiday,
                                          Htt_Pref.c_Dashboard_Additional_Rest_Day,
                                          Htt_Pref.c_Dashboard_Nonworking_Day,
                                          Htt_Pref.c_Dashboard_Not_Licensed_Day,
                                          Htt_Pref.c_Dashboard_No_Timesheet),
                           Array_Varchar2(t_Dashboard_Worktime_Not_Started, --
                                          t_Dashboard_Leave_Exists,
                                          t_Dashboard_Staff_Late,
                                          t_Dashboard_Staff_Intime,
                                          t_Dashboard_Staff_Not_Come,
                                          t_Dashboard_Rest_Day,
                                          t_Dashboard_Holiday,
                                          t_Dashboard_Additional_Rest_Day,
                                          t_Dashboard_Nonworking_Day,
                                          t_Dashboard_Not_Licensed_Day,
                                          t_Dashboard_No_Timesheet));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request  accrual kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Plan return varchar2 is
  begin
    return t('accrual_kind:plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Carryover return varchar2 is
  begin
    return t('accrual_kind:carryover');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2 is
  begin
    return case i_Accrual_Kind --
    when Htt_Pref.c_Accrual_Kind_Plan then t_Accrual_Kind_Plan --
    when Htt_Pref.c_Accrual_Kind_Carryover then t_Accrual_Kind_Carryover --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Accrual_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Accrual_Kind_Plan,
                                          Htt_Pref.c_Accrual_Kind_Carryover),
                           Array_Varchar2(t_Accrual_Kind_Plan, --
                                          t_Accrual_Kind_Carryover));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms track status
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_New return varchar2 is
  begin
    return t('acms_track_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Completed return varchar2 is
  begin
    return t('acms_track_status: completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Failed return varchar2 is
  begin
    return t('acms_track_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2 is
  begin
    return case i_Track_Status --
    when Htt_Pref.c_Acms_Track_Status_New then t_Acms_Track_Status_New --
    when Htt_Pref.c_Acms_Track_Status_Completed then t_Acms_Track_Status_Completed --
    when Htt_Pref.c_Acms_Track_Status_Failed then t_Acms_Track_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Track_Status_New,
                                          Htt_Pref.c_Acms_Track_Status_Completed,
                                          Htt_Pref.c_Acms_Track_Status_Failed),
                           Array_Varchar2(t_Acms_Track_Status_New,
                                          t_Acms_Track_Status_Completed,
                                          t_Acms_Track_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Touch return varchar2 is
  begin
    return t('acms_mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Face return varchar2 is
  begin
    return t('acms_mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return case i_Mark_Type --
    when Htt_Pref.c_Acms_Mark_Type_Face then t_Acms_Mark_Type_Face --
    when Htt_Pref.c_Acms_Mark_Type_Touch then t_Acms_Mark_Type_Touch --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Mark_Type_Face, --
                                          Htt_Pref.c_Acms_Mark_Type_Touch),
                           Array_Varchar2(t_Acms_Mark_Type_Face, --
                                          t_Acms_Mark_Type_Touch));
  end;

  ----------------------------------------------------------------------------------------------------
  -- location defined by
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Gps return varchar2 is
  begin
    return t('location_defined_by:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Bssid return varchar2 is
  begin
    return t('location_defined_by:bssid');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2 is
  begin
    return case i_Location_Defined_Type --
    when Htt_Pref.c_Location_Defined_By_Gps then t_Location_Defined_By_Gps --
    when Htt_Pref.c_Location_Defined_By_Bssid then t_Location_Defined_By_Bssid --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Defined_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Location_Defined_By_Gps, --
                                          Htt_Pref.c_Location_Defined_By_Bssid),
                           Array_Varchar2(t_Location_Defined_By_Gps, --
                                          t_Location_Defined_By_Bssid));
  end;

  ----------------------------------------------------------------------------------------------------
  -- work statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_In return varchar2 is
  begin
    return t('work_status:in');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Work_Status_Out return varchar2 is
  begin
    return t('work_status:out');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_Returned return varchar2 is
  begin
    return t('work_status:returned');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2 is
  begin
    return case i_Work_Status --
    when Htt_Pref.c_Work_Status_In then t_Work_Status_In --
    when Htt_Pref.c_Work_Status_Out then t_Work_Status_Out --
    when Htt_Pref.c_Work_Status_Returned then t_Work_Status_Returned --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Work_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Work_Status_In, --
                                          Htt_Pref.c_Work_Status_Out,
                                          Htt_Pref.c_Work_Status_Returned),
                           Array_Varchar2(t_Work_Status_In, --
                                          t_Work_Status_Out,
                                          t_Work_Status_Returned));
  end;

  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Online return varchar2 is
  begin
    return t('device_status:online');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Device_Status_Offline return varchar2 is
  begin
    return t('device_status:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Unknown return varchar2 is
  begin
    return t('device_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2 is
  begin
    return case i_Status --
    when Htt_Pref.c_Device_Status_Online then t_Device_Status_Online --
    when Htt_Pref.c_Device_Status_Offline then t_Device_Status_Offline --
    when Htt_Pref.c_Device_Status_Unknown then t_Device_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Device_Status_Online,
                                          Htt_Pref.c_Device_Status_Offline,
                                          Htt_Pref.c_Device_Status_Unknown),
                           Array_Varchar2(t_Device_Status_Online,
                                          t_Device_Status_Offline,
                                          t_Device_Status_Unknown));
  end;

end Htt_Util;
/

