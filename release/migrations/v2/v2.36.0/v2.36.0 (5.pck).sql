set define off
create or replace package Hac_Job is
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Track_Load_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Face_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Fingerprint_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Card_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Dss_Device_Update_Response(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Hik_Device_Update_Response(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Request(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Response(i_Input Array_Varchar2);
end Hac_Job;
/
create or replace package body Hac_Job is
  c_Start_Time constant date := Trunc(sysdate) - 2;
  c_End_Time   constant date := sysdate;

  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Track_Load_Request_Procedure(o_Output out Array_Varchar2) is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url varchar2,
      i_Username varchar2,
      i_Password varchar2
    ) return Gmap is
      v_Details      Gmap := Gmap();
      v_Auth_Details Gmap := Gmap();
    begin
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('method', Href_Pref.c_Http_Method_Post);
      v_Details.Put('api_uri', Hac_Pref.c_Tracks_Fetch_Uri);
      v_Details.Put('object_id', '');
      v_Details.Put('query_params', '');
      v_Details.Put('face_picture_sha', '');
    
      v_Auth_Details.Put('username', i_Username);
      v_Auth_Details.Put('password', i_Password);
    
      v_Details.Put('auth_details', v_Auth_Details);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map
    (
      i_Company_Id number,
      i_Server_Id  number,
      i_Start_Time date,
      i_End_Time   date
    ) return Gmap is
      v_Channel_Ids Array_Varchar2;
      v_Data        Gmap := Gmap();
    begin
      select p.Device_Code || Hac_Pref.c_Default_Channel_Id_Tail
        bulk collect
        into v_Channel_Ids
        from Hac_Company_Devices q
        join Hac_Dss_Devices p
          on p.Device_Id = q.Device_Id
       where q.Company_Id = i_Company_Id
         and p.Server_Id = i_Server_Id;
    
      v_Data.Val.Put('page', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      v_Data.Put('channelIds', v_Channel_Ids);
      v_Data.Put('startTime', Hac_Util.Date_To_Unix_Ts(i_Start_Time));
      v_Data.Put('endTime', Hac_Util.Date_To_Unix_Ts(i_End_Time));
    
      return v_Data;
    end;
  
  begin
    for Cmp in (select q.*,
                       Sv.Username,
                       Sv.Password,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = q.Server_Id) Host_Url
                  from Hac_Dss_Company_Servers q
                  join Hac_Dss_Servers Sv
                    on Sv.Server_Id = q.Server_Id
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Dss_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where p.Company_Id = q.Company_Id
                           and Dv.Server_Id = q.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url => Cmp.Host_Url,
                                         i_Username => Cmp.Username,
                                         i_Password => Cmp.Password);
      v_Data_Map   := Prepare_Data_Map(i_Company_Id => Cmp.Company_Id,
                                       i_Server_Id  => Cmp.Server_Id,
                                       i_Start_Time => c_Start_Time,
                                       i_End_Time   => c_End_Time);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('company_id', Cmp.Company_Id);
      v_Company_Data.Put('iterator_key', 'page');
      v_Company_Data.Put('tracks_key', 'pageData');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('dahua', v_Company_List);
    Result.Put('dahua_procedure', 'HAC_JOB.SAVE_DAHUA_TRACKS');
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks(i_Input Array_Varchar2) is
    v_Company Gmap := Gmap(Json_Object_t.Parse(Fazo.Make_Clob(i_Input)));
  begin
    Hac_Core.Save_Dahua_Tracks(i_Host_Url    => v_Company.r_Varchar2('host_url'),
                               i_Source_Type => Hac_Pref.c_Dss_Track_Source_Job,
                               i_Tracks      => v_Company.r_Glist('tracks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_Load_Request_Procedure
  (
    i_Event_Type number,
    o_Output     out Array_Varchar2
  ) is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    -------------------------------------------------- 
    Function Format_Date(i_Date date) return varchar2 is
    begin
      return to_char(i_Date, 'YYYY-MM-DD"T"HH24:MI:SS') || Substr(Tz_Offset(Sessiontimezone), 1, 6);
    end;
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url       varchar2,
      i_Partner_Key    varchar2,
      i_Partner_Secret varchar2
    ) return Gmap is
      v_Details Gmap := Gmap();
    begin
      v_Details.Put('partner_key', i_Partner_Key);
      v_Details.Put('partner_secret', i_Partner_Secret);
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('request_path', Hac_Pref.c_Hik_Request_Path_Get_Events);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map
    (
      i_Company_Id number,
      i_Server_Id  number,
      i_Event_Type number,
      i_Start_Time date,
      i_End_Time   date
    ) return Gmap is
      v_Door_Codes Array_Varchar2;
      v_Data       Gmap := Gmap();
    begin
      select p.Door_Code
        bulk collect
        into v_Door_Codes
        from Hac_Company_Devices q
        join Hac_Hik_Devices p
          on p.Device_Id = q.Device_Id
       where q.Company_Id = i_Company_Id
         and p.Server_Id = i_Server_Id;
    
      v_Data.Val.Put('pageNo', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      v_Data.Val.Put('eventType', i_Event_Type);
      v_Data.Put('doorIndexCodes', v_Door_Codes);
      v_Data.Put('startTime', Format_Date(i_Start_Time));
      v_Data.Put('endTime', Format_Date(i_End_Time));
    
      return v_Data;
    end;
  
  begin
    for Cmp in (select q.*,
                       Sv.Partner_Key,
                       Sv.Partner_Secret,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = q.Server_Id) Host_Url
                  from Hac_Hik_Company_Servers q
                  join Hac_Hik_Servers Sv
                    on Sv.Server_Id = q.Server_Id
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Hik_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where p.Company_Id = q.Company_Id
                           and Dv.Server_Id = q.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url       => Cmp.Host_Url,
                                         i_Partner_Key    => Cmp.Partner_Key,
                                         i_Partner_Secret => Cmp.Partner_Secret);
      v_Data_Map   := Prepare_Data_Map(i_Company_Id => Cmp.Company_Id,
                                       i_Server_Id  => Cmp.Server_Id,
                                       i_Event_Type => i_Event_Type,
                                       i_Start_Time => c_Start_Time,
                                       i_End_Time   => c_End_Time);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('company_id', Cmp.Company_Id);
      v_Company_Data.Put('iterator_key', 'pageNo');
      v_Company_Data.Put('tracks_key', 'list');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('hik', v_Company_List);
    Result.Put('hik_procedure', 'HAC_JOB.SAVE_HIK_TRACKS');
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Face_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Face,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Fingerprint_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Fingerprint,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Card_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Card,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks(i_Input Array_Varchar2) is
    v_Company Gmap := Gmap(Json_Object_t.Parse(Fazo.Make_Clob(i_Input)));
  begin
    Hac_Core.Save_Hik_Tracks(i_Server_Id   => v_Company.r_Number('server_id'),
                             i_Source_Type => Hac_Pref.c_Hik_Event_Type_Loaded_By_Job,
                             i_Tracks      => v_Company.r_Glist('tracks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dss_Device_Update_Request return Gmap is
    v_Detail_Map   Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys   Array_Varchar2;
      v_Delimiter    varchar2(1) := '&';
      v_Key          varchar2(100);
      v_Query_Params Gmap := Gmap();
      result         varchar2(4000);
    begin
      v_Query_Params.Put('page', Hac_Pref.c_Start_Page_Num);
      v_Query_Params.Put('pageSize', Hac_Pref.c_Default_Page_Size);
      v_Query_Params.Put('orderDirection', Hac_Pref.c_Descending_Order_Direction);
    
      v_Param_Keys := v_Query_Params.Keyset;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || v_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return result;
    end;
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url varchar2,
      i_Username varchar2,
      i_Password varchar2
    ) return Gmap is
      v_Details      Gmap := Gmap();
      v_Auth_Details Gmap := Gmap();
    begin
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('method', Href_Pref.c_Http_Method_Get);
      v_Details.Put('api_uri', Hac_Pref.c_Device_Uri || Hac_Pref.c_Page_Uri);
      v_Details.Put('query_params', Gather_Query_Params);
    
      v_Auth_Details.Put('username', i_Username);
      v_Auth_Details.Put('password', i_Password);
    
      v_Details.Put('auth_details', v_Auth_Details);
    
      return v_Details;
    end;
  
  begin
    for Cmp in (select Sv.Server_Id,
                       Sv.Username,
                       Sv.Password,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = Sv.Server_Id) Host_Url
                  from Hac_Dss_Servers Sv
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Dss_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where Dv.Server_Id = Sv.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url => Cmp.Host_Url,
                                         i_Username => Cmp.Username,
                                         i_Password => Cmp.Password);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', Gmap());
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('iterator_key', 'page');
      v_Company_Data.Put('device_key', 'pageData');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('dahua', v_Company_List);
    Result.Put('dahua_procedure', 'HAC_JOB.DSS_DEVICE_UPDATE_RESPONSE');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Dss_Device_Update_Response(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Device_List Glist;
    v_Device      Gmap;
    v_Server_Id   varchar2(20);
    r_Device      Hac_Dss_Devices%rowtype;
  begin
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Device_List := Nvl(v_Data.o_Glist('devices'), Glist());
    v_Server_Id   := v_Data.r_Varchar2('server_id');
  
    for i in 0 .. v_Device_List.Count - 1
    loop
      v_Device := Gmap(Json_Object_t(v_Device_List.Val.Get(i)));
    
      r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => v_Server_Id,
                                                      i_Device_Code => v_Device.r_Varchar2('deviceCode'));
    
      if r_Device.Device_Id is not null then
        z_Hac_Dss_Ex_Devices.Update_One(i_Server_Id   => v_Server_Id,
                                        i_Device_Code => v_Device.r_Varchar2('deviceCode'),
                                        i_Status      => Option_Varchar2(v_Device.r_Varchar2('status')));
        z_Hac_Devices.Update_One(i_Device_Id => r_Device.Device_Id,
                                 i_Server_Id => v_Server_Id,
                                 i_Status    => Option_Varchar2(Hac_Util.Map_Dss_Device_Status(v_Device.r_Varchar2('status'))));
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Hik_Device_Update_Request return Gmap is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url       varchar2,
      i_Partner_Key    varchar2,
      i_Partner_Secret varchar2
    ) return Gmap is
      v_Details Gmap := Gmap();
    begin
      v_Details.Put('partner_key', i_Partner_Key);
      v_Details.Put('partner_secret', i_Partner_Secret);
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('request_path', Hac_Pref.c_Hik_Request_Path_Get_Devices);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map return Gmap is
      v_Data Gmap := Gmap();
    begin
      v_Data.Val.Put('pageNo', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      return v_Data;
    end;
  begin
    for Cmp in (select Sv.Server_Id,
                       Sv.Partner_Key,
                       Sv.Partner_Secret,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = Sv.Server_Id) Host_Url
                  from Hac_Hik_Servers Sv
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Hik_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where Dv.Server_Id = Sv.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url       => Cmp.Host_Url,
                                         i_Partner_Key    => Cmp.Partner_Key,
                                         i_Partner_Secret => Cmp.Partner_Secret);
      v_Data_Map   := Prepare_Data_Map;
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('iterator_key', 'pageNo');
      v_Company_Data.Put('device_key', 'list');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('hik', v_Company_List);
    Result.Put('hik_procedure', 'HAC_JOB.HIK_DEVICE_UPDATE_RESPONSE');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Hik_Device_Update_Response(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Device_List Glist;
    v_Device      Gmap;
    v_Server_Id   varchar2(20);
    r_Device      Hac_Hik_Devices%rowtype;
  begin
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Device_List := Nvl(v_Data.o_Glist('devices'), Glist());
    v_Server_Id   := v_Data.r_Varchar2('server_id');
  
    for i in 0 .. v_Device_List.Count - 1
    loop
      v_Device := Gmap(Json_Object_t(v_Device_List.Val.Get(i)));
    
      r_Device := Hac_Util.Take_Hik_Device_By_Device_Code(i_Server_Id   => v_Server_Id,
                                                          i_Device_Code => v_Device.r_Varchar2('acsDevIndexCode'));
    
      if r_Device.Device_Id is not null then
        z_Hac_Hik_Ex_Devices.Update_One(i_Device_Code => v_Device.r_Varchar2('acsDevIndexCode'),
                                        i_Server_Id   => v_Server_Id,
                                        i_Status      => Option_Varchar2(v_Device.r_Varchar2('status')));
      
        z_Hac_Devices.Update_One(i_Device_Id => r_Device.Device_Id,
                                 i_Server_Id => v_Server_Id,
                                 i_Status    => Option_Varchar2(Hac_Util.Map_Hik_Device_Status(v_Device.r_Varchar2('status'))));
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Request(o_Output out Array_Varchar2) is
    v_Hik_Data Gmap := Hik_Device_Update_Request;
    v_Dss_Data Gmap := Dss_Device_Update_Request;
    result     Gmap := Gmap();
  begin
    Result.Put_All(v_Hik_Data);
    Result.Put_All(v_Dss_Data);
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Status_Update
  (
    i_Company_Id        number,
    i_Hikvision_Type_Id number,
    i_Dahua_Type_Id     number,
    i_Terminal_Type_Id  number
  ) is
  begin
    Biruni_Route.Context_Begin;
    Ui_Auth.Logon_As_System(i_Company_Id);
  
    for Hik in (select Dev.Company_Id, Dev.Device_Id, Dc.Status
                  from Htt_Devices Dev
                  join Hac_Hik_Devices Hd
                    on Hd.Serial_Number = Dev.Serial_Number
                  join Hac_Devices Dc
                    on Dc.Server_Id = Hd.Server_Id
                   and Dc.Device_Id = Hd.Device_Id
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Hikvision_Type_Id)
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Hik.Company_Id,
                               i_Device_Id  => Hik.Device_Id,
                               i_Status     => Option_Varchar2(Hik.Status));
    end loop;
  
    for Dss in (select Dev.Company_Id, Dev.Device_Id, Dc.Status
                  from Htt_Devices Dev
                  join Hac_Dss_Devices Hd
                    on Hd.Serial_Number = Dev.Serial_Number
                  join Hac_Devices Dc
                    on Dc.Server_Id = Hd.Server_Id
                   and Dc.Device_Id = Hd.Device_Id
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Dahua_Type_Id)
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Dss.Company_Id,
                               i_Device_Id  => Dss.Device_Id,
                               i_Status     => Option_Varchar2(Dss.Status));
    end loop;
  
    for Ter in (select Dev.Company_Id,
                       Dev.Device_Id,
                       ((sysdate - Dev.Last_Seen_On) * 24 * 60) as Min_Diff
                  from Htt_Devices Dev
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Terminal_Type_Id)
    loop
      if Ter.Min_Diff > 2 then
        z_Htt_Devices.Update_One(i_Company_Id => Ter.Company_Id,
                                 i_Device_Id  => Ter.Device_Id,
                                 i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Offline));
      else
        z_Htt_Devices.Update_One(i_Company_Id => Ter.Company_Id,
                                 i_Device_Id  => Ter.Device_Id,
                                 i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Online));
      end if;
    end loop;
  
    Biruni_Route.Context_End;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Response(i_Input Array_Varchar2) is
    v_Company_Ids       Array_Number;
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dahua_Type_Id     number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    v_Terminal_Type_Id  number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal);
  begin
    select q.Company_Id
      bulk collect
      into v_Company_Ids
      from Htt_Devices q
     where exists
     (select 1
              from Md_Companies w
             where w.Company_Id = q.Company_Id
               and w.State = 'A')
       and q.Device_Type_Id in (v_Hikvision_Type_Id, v_Dahua_Type_Id, v_Terminal_Type_Id)
     group by q.Company_Id;
  
    for i in 1 .. v_Company_Ids.Count
    loop
      Device_Status_Update(i_Company_Id        => v_Company_Ids(i),
                           i_Hikvision_Type_Id => v_Hikvision_Type_Id,
                           i_Dahua_Type_Id     => v_Dahua_Type_Id,
                           i_Terminal_Type_Id  => v_Terminal_Type_Id);
    end loop;
  end;

end Hac_Job;
/

create or replace package Hac_Pref is
  ----------------------------------------------------------------------------------------------------
  type Dss_Server_Rt is record(
    Acms     Hac_Servers%rowtype,
    Username varchar2(300 char),
    Password varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Dss_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Register_Code varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Server_Rt is record(
    Acms           Hac_Servers%rowtype,
    Partner_Key    varchar2(300 char),
    Partner_Secret varchar2(300 char),
    Token          varchar2(64 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Isup_Password varchar2(300 char),
    Event_Types   Array_Number);
  ----------------------------------------------------------------------------------------------------
  c_Acms_Final_Service_Name constant varchar2(100) := 'com.verifix.vhr.AcmsFinalService';
  ----------------------------------------------------------------------------------------------------
  -- Dahua integration preferences
  ----------------------------------------------------------------------------------------------------
  c_Dahua_Api_Service_Name        constant varchar2(100) := 'com.verifix.vhr.dahua.DahuaRuntimeService';
  c_Start_Page_Num                constant number := 1; -- used in get list requests
  c_Default_Page_Size             constant number := 500; -- used in get list requests, max number of items in list
  c_Ascending_Order_Direction     constant number := 0; -- used in get list requests
  c_Descending_Order_Direction    constant number := 1; -- used in get list requests
  c_Dahua_Gender_Neutral          constant number := 0;
  c_Person_Source_Management_List constant number := 0;
  c_Auth_Start_Time               constant number := 1615824000; -- unix timestamp in seconds, 01.01.2000 00:00:00
  c_Auth_End_Time                 constant number := 1931443199; -- unix timestamp in seconds, 01.01.2050 00:00:00
  ----------------------------------------------------------------------------------------------------
  -- DAHUA DEVICE CHANNEL CODE
  ---------------------------------------------------------------------------------------------------- 
  -- channel code consists of: 
  -- device_code + '$' + device_type + '$' + channel_sequence_val + '$' + unit_sequence_val
  -- by default device type is '7' (access_control)
  -- by default channel_sequence_val is '0' (only one)
  -- by default unit_sequence_val is '0' (only one)
  ---------------------------------------------------------------------------------------------------- 
  c_Default_Channel_Id_Tail constant varchar2(10) := '$7$0$0';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API METHODS
  ---------------------------------------------------------------------------------------------------- 
  c_Org_Tree_Uri     constant varchar2(50) := '/brms/api/v1.0/tree/deviceOrg';
  c_Person_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/person-group';
  c_Device_Uri       constant varchar2(50) := '/brms/api/v1.1/device';
  c_Door_Group_Uri   constant varchar2(50) := '/obms/api/v1.0/accessControl/doorGroup';
  c_Access_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access-group';
  c_Person_Uri       constant varchar2(50) := '/obms/api/v1.1/acs/person';
  c_Tracks_Fetch_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access/record/fetch/page';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API RESOURCE uris (are added to the api method uris)
  ----------------------------------------------------------------------------------------------------
  c_List_Uri                  constant varchar2(50) := '/list';
  c_Page_Uri                  constant varchar2(50) := '/page';
  c_Person_Access_Authorize   constant varchar2(50) := '/person/authorize';
  c_Person_Access_Deauthorize constant varchar2(50) := '/person/unauthorize';
  ----------------------------------------------------------------------------------------------------
  -- Dahua default role ids (are kept in DSS server)
  ----------------------------------------------------------------------------------------------------
  c_Superadmin_Role_Id constant number := 1;
  c_Admin_Role_Id      constant number := 2;
  ----------------------------------------------------------------------------------------------------
  -- Dahua default org code
  ----------------------------------------------------------------------------------------------------
  c_Default_Root_Org_Code constant varchar2(3) := '001';
  ----------------------------------------------------------------------------------------------------
  c_Utc_Timezone_Code constant varchar2(3) := 'UTC';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Api_Service_Name constant varchar2(100) := 'com.verifix.vhr.hikvision.HikvisionRuntimeService';
  c_Hik_Begin_Time       constant varchar2(50) := '2020-01-01T00:00:00+00:00';
  c_Hik_End_Time         constant varchar2(50) := '2037-12-31T23:59:59+00:00'; -- max allowed effective date
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision request paths
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Request_Path_Get_Events              constant varchar2(100 char) := '/artemis/api/acs/v1/door/events';
  c_Hik_Request_Path_Get_Access_Levels       constant varchar2(100 char) := '/artemis/api/acs/v1/privilege/group';
  c_Hik_Request_Path_Get_Devices             constant varchar2(100 char) := '/artemis/api/resource/v1/acsDevice/acsDeviceList';
  c_Hik_Request_Path_Get_Doors               constant varchar2(100 char) := '/artemis/api/resource/v1/acsDoor/acsDoorList';
  c_Hik_Request_Path_Get_Organizations       constant varchar2(100 char) := '/artemis/api/resource/v1/org/orgList';
  c_Hik_Request_Path_Get_Persons             constant varchar2(100 char) := '/artemis/api/resource/v1/person/personList';
  c_Hik_Request_Path_Get_Person_Photo        constant varchar2(100 char) := '/artemis/api/resource/v1/person/picture_data';
  c_Hik_Request_Path_Subscribe_To_Tracks     constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionByEventTypes';
  c_Hik_Request_Path_Unsubscribe_From_Tracks constant varchar2(100 char) := '/artemis/api/eventService/v1/eventUnSubscriptionByEventTypes';
  c_Hik_Request_Path_Subscriptions_List      constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionView';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Device_Status_Offline constant number := 2;
  c_Hik_Device_Status_Online  constant number := 1;
  c_Hik_Device_Status_Unknown constant number := 0;
  ----------------------------------------------------------------------------------------------------  
  -- Dahua device statuses
  ----------------------------------------------------------------------------------------------------  
  c_Dss_Device_Status_Offline constant number := 0;
  c_Dss_Device_Status_Online  constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision door states
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Door_State_Remain_Open   constant varchar2(2) := 'RO';
  c_Hik_Door_State_Closed        constant varchar2(1) := 'C';
  c_Hik_Door_State_Open          constant varchar2(1) := 'O';
  c_Hik_Door_State_Remain_Closed constant varchar2(2) := 'RC';
  c_Hik_Door_State_Offline       constant varchar2(1) := 'F';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision access level types
  ----------------------------------------------------------------------------------------------------
  c_Hik_Access_Level_Type_Access_Control number := 1;
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event types (Verifix side)
  ----------------------------------------------------------------------------------------------------
  c_Hik_Event_Type_From_Notifications constant varchar2(1) := 'N';
  c_Hik_Event_Type_Manually_Retrieved constant varchar2(1) := 'M';
  c_Hik_Event_Type_Loaded_By_Job      constant varchar2(1) := 'J';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event type codes
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Code_By_Face        constant number := 196893;
  c_Hik_Event_Code_By_Fingerprint constant number := 200516;
  c_Hik_Event_Code_By_Card        constant number := 198914;
  ----------------------------------------------------------------------------------------------------
  -- Hikvision event receiver data
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Receiver_Route_Uri constant varchar2(100 char) := 'hik/event_receiver';
  ----------------------------------------------------------------------------------------------------
  -- device attach kind
  ----------------------------------------------------------------------------------------------------
  c_Device_Attach_Primary   constant varchar2(1) := 'P';
  c_Device_Attach_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- device types 
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- DSS TRACK SOURCE
  ----------------------------------------------------------------------------------------------------
  c_Dss_Track_Source_Manual constant varchar2(1) := 'M';
  c_Dss_Track_Source_Queue  constant varchar2(1) := 'Q';
  c_Dss_Track_Source_Job    constant varchar2(1) := 'J';
  ----------------------------------------------------------------------------------------------------
  -- HIK TRACK TYPES
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Track_Type_Input  constant number := 1;
  c_Hik_Track_Type_Output constant number := 2;
  ----------------------------------------------------------------------------------------------------
  c_Unknown_Person_Code constant number := -1;
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Delimiter constant varchar2(1) := '#';
end Hac_Pref;
/
create or replace package body Hac_Pref is
end Hac_Pref;
/

create or replace package Hes_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Face_Register_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Face_Register_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Request_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Request_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Schedule_Change_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Track_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Track_Settings_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Gps_Tracking_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Gps_Tracking_Settings_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timepad_Track_Settings_Save
  (
    i_Company_Id number,
    i_Settings   Hes_Pref.Timepad_Track_Settings_Rt
  );

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Daye_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Change_Day_Limit_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Settings_Save
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Staff_Track_Settings  Hes_Pref.Staff_Track_Settings_Rt,
    i_Gps_Tracking_Settings Hes_Pref.Staff_Gps_Tracking_Settings_Rt,
    i_Face_Register         Hes_Pref.Staff_Face_Register_Rt,
    i_Request_Settings      Hes_Pref.Staff_Request_Manager_Approval_Rt,
    i_Change_Settings       Hes_Pref.Staff_Change_Manager_Approval_Rt,
    i_Change_Day_Limit      Hes_Pref.Change_Day_Limit_Rt
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Billz_Credential_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Subject_Name varchar2,
    i_Secret_Key   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Build_Billz_Runtime_Service
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Date_Begin date,
    i_Date_End   date
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Billz_Sales_Response_Handler(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_State_Token(i_Session Hes_Oauth2_Session_States%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Oauth2_Credentials(i_Credentials Hes_Oauth2_Credentials%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Oauth2_Credentials
  (
    i_Company_Id  number,
    i_Provider_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Use_Task_Manager_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
end Hes_Api;
/
create or replace package body Hes_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HES:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Face_Register_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Face_Register_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Face_Register);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Face_Register,
                               i_Setting_Value => Nvl(i_Settings.Face_Register, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Face_Register,
                             i_Value      => i_Settings.Face_Register);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Request_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Request_Manager_Approval);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                               i_Setting_Value => Nvl(i_Settings.Request_Settings, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                             i_Value      => i_Settings.Request_Settings);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Request_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Enable_Request);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Request,
                               i_Setting_Value => Nvl(i_Settings.Enable_Request, 'Y'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Enable_Request,
                             i_Value      => i_Settings.Enable_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Manager_Approval);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                               i_Setting_Value => Nvl(i_Settings.Change_Settings, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                             i_Value      => i_Settings.Change_Settings);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Schedule_Change_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                               i_Setting_Value => Nvl(i_Settings.Enable_Schedule_Change, 'Y'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                             i_Value      => i_Settings.Enable_Schedule_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Track_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Track_Settings_Rt
  ) is
    v_User_Settings boolean := false;
  
    -------------------------------------------------
    Procedure Setting_Save
    (
      i_Code          varchar2,
      i_Value         varchar2,
      i_Default_Value varchar2 := null
    ) is
    begin
      if v_User_Settings then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => i_Code,
                                 i_Setting_Value => Nvl(i_Value, i_Default_Value));
      else
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => i_Code,
                               i_Value      => i_Value);
      end if;
    end;
  
    -------------------------------------------------
    Procedure Setting_Delete(i_Code varchar2) is
    begin
      Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => i_Code);
    end;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Input);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Output);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Check);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Check_Location);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Start);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Determination);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Face_Recognition);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Emotion_Wink);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Emotion_Smile);
        return;
      end if;
    end if;
  
    if i_Settings.Gps_Determination = 'N' and i_Settings.Face_Recognition = 'N' then
      Hes_Error.Raise_001;
    end if;
  
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Input, i_Settings.Track_Type_Input, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Output, i_Settings.Track_Type_Output, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Check, i_Settings.Track_Type_Check, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Check_Location, i_Settings.Track_Check_Location, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code, i_Settings.Track_By_Qr_Code, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Start,
                 i_Settings.Track_Start,
                 Hes_Pref.c_Pref_Staff_Ts_Gps_Determination);
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Determination, i_Settings.Gps_Determination, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Face_Recognition, i_Settings.Face_Recognition, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track, i_Settings.Ignore_Invalid_Track, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Emotion_Wink, i_Settings.Emotion_Wink, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Emotion_Smile, i_Settings.Emotion_Smile, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Last_Track_Type, i_Settings.Last_Track_Type, 'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Gps_Tracking_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Gps_Tracking_Settings_Rt
  ) is
    v_User_Settings boolean := false;
    v_Data          Hashmap := Hashmap();
    v_Date          date := Trunc(sysdate);
    v_Old_Settings  Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
    -------------------------------------------------
    Procedure Setting_Save
    (
      i_Code          varchar2,
      i_Value         varchar2,
      i_Default_Value varchar2 := null
    ) is
    begin
      if v_User_Settings then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => i_Code,
                                 i_Setting_Value => Nvl(i_Value, i_Default_Value));
      else
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => i_Code,
                               i_Value      => i_Value);
      end if;
    end;
    -------------------------------------------------
    Procedure Setting_Delete(i_Code varchar2) is
    begin
      Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => i_Code);
    end;
    --------------------------------------------------           
    Procedure Notify_Gps_Tracking_Settings is
    begin
      if Fazo.Equal(v_Old_Settings.Enabled, i_Settings.Enabled) and
         Fazo.Equal(v_Old_Settings.Gps_Track_Collect_Enabled, i_Settings.Gps_Track_Collect_Enabled) and
         Fazo.Equal(v_Old_Settings.Auto_Output_Enabled, i_Settings.Auto_Output_Enabled) and
         Fazo.Equal(v_Old_Settings.Distance, i_Settings.Distance) and
         Fazo.Equal(v_Old_Settings.Interval, i_Settings.Interval) or
         (Fazo.Equal(v_Old_Settings.Enabled, i_Settings.Enabled) and v_Old_Settings.Enabled = 'N') then
        return;
      end if;
    
      v_Data := Fazo.Zip_Map('notify_type', Hes_Pref.c_Pref_Nt_Gps_Tracking_Change);
    
      if i_User_Id is not null and
         Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                 i_User_Id      => i_User_Id,
                                 i_Setting_Code => Hes_Pref.c_Pref_Nt_Gps_Tracking_Change) then
        Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                    i_User_Id    => i_User_Id,
                    i_Data       => v_Data);
      else
        for r in (select q.Employee_Id
                    from Href_Staffs q
                   where q.Company_Id = i_Company_Id
                     and q.Filial_Id = i_Filial_Id
                     and q.Hiring_Date <= v_Date
                     and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)
                     and q.State = 'A'
                   group by q.Employee_Id)
        loop
          continue when not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                                    i_User_Id      => r.Employee_Id,
                                                    i_Setting_Code => Hes_Pref.c_Pref_Nt_Gps_Tracking_Change) or --
          Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => r.Employee_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Setting_Code => Hes_Pref.c_Pref_Staff_Gps_Tracking) is not null;
        
          Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                      i_User_Id    => r.Employee_Id,
                      i_Data       => v_Data);
        end loop;
      end if;
    end;
  begin
    v_Old_Settings := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_User_Id    => i_User_Id);
  
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval);
        return;
      end if;
    end if;
  
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking, i_Settings.Enabled, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect,
                 i_Settings.Gps_Track_Collect_Enabled,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output,
                 i_Settings.Auto_Output_Enabled,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout,
                 i_Settings.Disable_Auto_Checkout,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance,
                 Greatest(i_Settings.Distance, Hes_Pref.c_Staff_Gps_Tracking_Distance_Min),
                 Hes_Pref.c_Staff_Gps_Tracking_Distance_Min);
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval,
                 Greatest(i_Settings.Interval, Hes_Pref.c_Staff_Gps_Tracking_Interval_Min),
                 Hes_Pref.c_Staff_Gps_Tracking_Interval_Min);
  
    Notify_Gps_Tracking_Settings;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timepad_Track_Settings_Save
  (
    i_Company_Id number,
    i_Settings   Hes_Pref.Timepad_Track_Settings_Rt
  ) is
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
  
    --------------------------------------------------
    Procedure Setting_Save
    (
      i_Code  varchar2,
      i_Value varchar2
    ) is
    begin
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => v_Filial_Head,
                             i_Code       => i_Code,
                             i_Value      => i_Value);
    end;
  begin
    if i_Settings.Qr_Code_Limit_Time < 1440 then
      Setting_Save(i_Code  => Hes_Pref.c_Timepad_Qr_Code_Limit_Time,
                   i_Value => i_Settings.Qr_Code_Limit_Time);
    else
      Hes_Error.Raise_002;
    end if;
  
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Track_Types, i_Value => i_Settings.Track_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Mark_Types, i_Value => i_Settings.Mark_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Emotion_Types, i_Value => i_Settings.Emotion_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Lang_Code, i_Value => i_Settings.Lang_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Daye_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Change_Day_Limit_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days);
      
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                               i_Setting_Value => Nvl(i_Settings.Change_With_Restriction_Days, 'N'));
    
      if i_Settings.Change_With_Restriction_Days = 'Y' then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Restriction_Days,
                                 i_Setting_Value => i_Settings.Change_Restriction_Days);
      end if;
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                             i_Value      => Nvl(i_Settings.Change_With_Restriction_Days, 'N'));
    
      if i_Settings.Change_With_Restriction_Days = 'Y' then
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => Hes_Pref.c_Pref_Staff_Change_Restriction_Days,
                               i_Value      => i_Settings.Change_Restriction_Days);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Settings_Save
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Staff_Track_Settings  Hes_Pref.Staff_Track_Settings_Rt,
    i_Gps_Tracking_Settings Hes_Pref.Staff_Gps_Tracking_Settings_Rt,
    i_Face_Register         Hes_Pref.Staff_Face_Register_Rt,
    i_Request_Settings      Hes_Pref.Staff_Request_Manager_Approval_Rt,
    i_Change_Settings       Hes_Pref.Staff_Change_Manager_Approval_Rt,
    i_Change_Day_Limit      Hes_Pref.Change_Day_Limit_Rt
  ) is
  begin
    Staff_Track_Settings_Save(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Settings   => i_Staff_Track_Settings);
  
    Staff_Gps_Tracking_Settings_Save(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Settings   => i_Gps_Tracking_Settings);
  
    Staff_Face_Register_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Settings   => i_Face_Register);
  
    Staff_Request_Manager_Approval_Save(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Settings   => i_Request_Settings);
  
    Staff_Enable_Request_Save(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Settings   => i_Request_Settings);
  
    Staff_Change_Manager_Approval_Save(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Settings   => i_Change_Settings);
  
    Staff_Enable_Schedule_Change_Save(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Settings   => i_Change_Settings);
  
    Staff_Change_Daye_Limit_Save(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Settings   => i_Change_Day_Limit);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Billz_Credential_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Subject_Name varchar2,
    i_Secret_Key   varchar2
  ) is
  begin
    if i_Subject_Name is null then
      Hes_Error.Raise_003;
    end if;
  
    if i_Secret_Key is null then
      Hes_Error.Raise_004;
    end if;
  
    z_Hes_Billz_Credentials.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Subject_Name => i_Subject_Name,
                                     i_Secret_Key   => i_Secret_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  -- builds and returns a runtime service for Billz's 'reports.sales' API
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Billz_Runtime_Service
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Date_Begin date,
    i_Date_End   date
  ) return Runtime_Service is
    v_Service           Runtime_Service;
    v_Details           Hashmap := Hashmap();
    r_Credential        Hes_Billz_Credentials%rowtype;
    c_Max_Days_In_Month number := 31;
  begin
    if not z_Hes_Billz_Credentials.Exist(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         o_Row        => r_Credential) then
      Hes_Error.Raise_005;
    else
      if r_Credential.Subject_Name is null then
        Hes_Error.Raise_003;
      end if;
    
      if r_Credential.Secret_Key is null then
        Hes_Error.Raise_004;
      end if;
    end if;
  
    if i_Date_End - i_Date_Begin + 1 > c_Max_Days_In_Month then
      Hes_Error.Raise_006(c_Max_Days_In_Month);
    end if;
  
    v_Details.Put('url', Hes_Pref.c_Billz_Api_Url);
    v_Details.Put('method', Hes_Pref.c_Billz_Api_Reports_Sales_Method);
    v_Details.Put('id', Hes_Pref.c_Billz_Api_Reports_Sales_Id);
    v_Details.Put('subject', r_Credential.Subject_Name);
    v_Details.Put('secret_key', r_Credential.Secret_Key);
    v_Details.Put('date_begin', to_char(i_Date_Begin, 'YYYY-MM-DD') || 'T00:00:00Z');
    v_Details.Put('date_end', to_char(i_Date_End, 'YYYY-MM-DD') || 'T00:00:00Z');
    v_Details.Put('currency', Hes_Pref.c_Billz_Api_Currency_Uzs);
  
    v_Service := Runtime_Service(Hes_Pref.c_Billz_Api_Service_Name);
    v_Service.Set_Detail(v_Details);
  
    v_Service.Set_Response_Procedure(Response_Procedure => 'hes_api.billz_sales_response_handler',
                                     Action_In          => Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2);
  
    Hes_Core.Sale_Dates_Lock(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Date_Begin => i_Date_Begin,
                             i_Date_End   => i_Date_End);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Billz_Sales_Response_Handler(i_Val Array_Varchar2) is
    v_Company_Id  number := Md_Env.Company_Id;
    v_Filial_Id   number := Md_Env.Filial_Id;
    v_Data        Gmap;
    v_Result      Gmap;
    v_Error       Gmap;
    v_Sales_List  Glist;
    v_Sale        Gmap;
    v_Office_Id   number;
    v_Office_Name Hes_Billz_Consolidated_Sales.Billz_Office_Name%type;
    v_Seller_Id   number;
    v_Seller_Name Hes_Billz_Consolidated_Sales.Billz_Seller_Name%type;
    v_Sale_Date   date;
    v_Sale_Amount number;
    v_Date_Begin  date;
    v_Date_End    date;
  
    -------------------------------------------------- 
    -- i_Raw_Date has the following format: 'YYYY-MM-DD"T"HH:MI:SS"Z"'
    Function Parse_Date(i_Raw_Date varchar2) return date is
    begin
      return to_date(Substr(i_Raw_Date, 0, 10), 'YYYY-MM-DD');
    end;
  begin
    v_Data := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
  
    if v_Data.Has('result') then
      v_Result     := v_Data.o_Gmap('result');
      v_Date_Begin := Parse_Date(v_Result.r_Varchar2('dateBegin'));
      v_Date_End   := Parse_Date(v_Result.r_Varchar2('dateEnd'));
      v_Sales_List := Nvl(v_Result.o_Glist('report'), Glist());
    
      for i in 0 .. v_Sales_List.Count - 1
      loop
        v_Sale := Gmap(Json_Object_t(v_Sales_List.Val.Get(i)));
      
        v_Office_Id   := v_Sale.r_Number('officeID');
        v_Office_Name := v_Sale.r_Varchar2('office');
        v_Seller_Id   := v_Sale.r_Number('sellerId');
      
        -- Billz api has a typo in key 'sellerFullName', as of 16.03.2023 it is 'sellerFullname'. Expected to be corrected
        begin
          v_Seller_Name := v_Sale.r_Varchar2('sellerFullName');
        exception
          when others then
            v_Seller_Name := v_Sale.r_Varchar2('sellerFullname');
        end;
      
        v_Sale_Date   := Trunc(v_Sale.r_Date('saleDate', 'YYYY.MM.DD HH24.MI.SS'));
        v_Sale_Amount := v_Sale.r_Number('salePrice');
      
        -- insert the needed field values from the response into temporary table
        insert into Hes_Billz_Raw_Sales
          (Company_Id,
           Filial_Id,
           Billz_Office_Id,
           Billz_Office_Name,
           Billz_Seller_Id,
           Billz_Seller_Name,
           Sale_Date,
           Sale_Amount)
        values
          (v_Company_Id,
           v_Filial_Id,
           v_Office_Id,
           v_Office_Name,
           v_Seller_Id,
           v_Seller_Name,
           v_Sale_Date,
           v_Sale_Amount);
      end loop;
    
      -- clean the records in the table for period requested
      delete from Hes_Billz_Consolidated_Sales t
       where t.Company_Id = v_Company_Id
         and t.Filial_Id = v_Filial_Id
         and t.Sale_Date between v_Date_Begin and v_Date_End;
    
      -- fill data in the consolidated table computing daily sale amounts for each seller
      insert into Hes_Billz_Consolidated_Sales
        (Company_Id,
         Filial_Id,
         Sale_Id,
         Billz_Office_Id,
         Billz_Office_Name,
         Billz_Seller_Id,
         Billz_Seller_Name,
         Sale_Date,
         Sale_Amount)
        select Company_Id,
               Filial_Id,
               Hes_Next.Sale_Id,
               Billz_Office_Id,
               Billz_Office_Name,
               Billz_Seller_Id,
               Billz_Seller_Name,
               Sale_Date,
               sum(Sale_Amount)
          from Hes_Billz_Raw_Sales t
         where t.Company_Id = v_Company_Id
           and t.Filial_Id = v_Filial_Id
         group by Company_Id,
                  Filial_Id,
                  Billz_Office_Id,
                  Billz_Office_Name,
                  Billz_Seller_Id,
                  Billz_Seller_Name,
                  Sale_Date;
    elsif v_Data.Has('error') then
      v_Error := v_Data.r_Gmap('error');
    
      Hes_Error.Raise_007(i_Error_Code    => v_Error.o_Varchar2('code'),
                          i_Error_Message => v_Error.o_Varchar2('message'));
    else
      Hes_Error.Raise_008;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_State_Token(i_Session Hes_Oauth2_Session_States%rowtype) is
  begin
    z_Hes_Oauth2_Session_States.Save_Row(i_Session);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Oauth2_Credentials(i_Credentials Hes_Oauth2_Credentials%rowtype) is
  begin
    z_Hes_Oauth2_Credentials.Save_Row(i_Credentials);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Oauth2_Credentials
  (
    i_Company_Id  number,
    i_Provider_Id number
  ) is
  begin
    z_Hes_Oauth2_Credentials.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Provider_Id => i_Provider_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Use_Task_Manager_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1) := 'Y';
  begin
    if i_Value <> 'Y' then
      v_Value := 'N';
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hes_Pref.c_Pref_Staff_Use_Task_Manager,
                           i_Value      => v_Value);
  end;

end Hes_Api;
/

create or replace package Hes_Pref is
  ----------------------------------------------------------------------------------------------------
  type Staff_Track_Settings_Rt is record(
    Vision_Server_Id     number,
    User_Settings        varchar2(1),
    Track_Type_Input     varchar2(1),
    Track_Type_Output    varchar2(1),
    Track_Type_Check     varchar2(1),
    Track_Check_Location varchar2(1),
    Track_By_Qr_Code     varchar2(1),
    Track_Start          varchar2(1),
    Gps_Determination    varchar2(1),
    Face_Recognition     varchar2(1),
    Ignore_Invalid_Track varchar2(1),
    Emotion_Wink         varchar2(1),
    Emotion_Smile        varchar2(1),
    Last_Track_Type      varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Timepad_Track_Settings_Rt is record(
    Qr_Code_Limit_Time number,
    Track_Types        varchar2(50),
    Mark_Types         varchar2(50),
    Emotion_Types      varchar2(50),
    Lang_Code          varchar2(10));
  ----------------------------------------------------------------------------------------------------  
  type Staff_Gps_Tracking_Settings_Rt is record(
    User_Settings             varchar2(1),
    Enabled                   varchar2(1),
    Gps_Track_Collect_Enabled varchar2(1),
    Auto_Output_Enabled       varchar2(1),
    Disable_Auto_Checkout     varchar2(1),
    Distance                  number,
    interval                  number);
  ----------------------------------------------------------------------------------------------------
  type Staff_Face_Register_Rt is record(
    User_Settings varchar2(1),
    Face_Register varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Staff_Request_Manager_Approval_Rt is record(
    User_Settings    varchar2(1),
    Request_Settings varchar2(1),
    Enable_Request   varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Staff_Change_Manager_Approval_Rt is record(
    User_Settings          varchar2(1),
    Change_Settings        varchar2(1),
    Enable_Schedule_Change varchar2(1));
  ----------------------------------------------------------------------------------------------------  
  type Staff_Notify_Settings_Rt is record(
    Calendar_Day_Change          varchar2(1),
    Late_Time                    varchar2(1),
    Early_Time                   varchar2(1),
    Request                      varchar2(1),
    Request_Change_Status        varchar2(1),
    Request_Manager_Approval     varchar2(1),
    Plan_Change                  varchar2(1),
    Plan_Change_Status_Change    varchar2(1),
    Plan_Change_Manager_Approval varchar2(1),
    Gps_Tracking_Change          varchar2(1));
  ----------------------------------------------------------------------------------------------------
  -- change day limit
  ----------------------------------------------------------------------------------------------------
  type Change_Day_Limit_Rt is record(
    User_Settings                varchar2(1),
    Change_With_Restriction_Days varchar2(1),
    Change_Restriction_Days      number);
  ----------------------------------------------------------------------------------------------------
  c_Staff_Form_Name constant varchar2(50) := '/vhr/hes/staff';
  ----------------------------------------------------------------------------------------------------
  -- notification settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Nt_Calendar_Day_Change          constant varchar2(50) := 'hes:nt:calendar_day_change';
  c_Pref_Nt_Late_Time                    constant varchar2(50) := 'hes:nt:late_time';
  c_Pref_Nt_Early_Time                   constant varchar2(50) := 'hes:nt:early_time';
  c_Pref_Nt_Request                      constant varchar2(50) := 'hes:nt:request';
  c_Pref_Nt_Request_Change_Status        constant varchar2(50) := 'hes:nt:request_change_status';
  c_Pref_Nt_Request_Manager_Approval     constant varchar2(50) := 'hes:nt:request_manager_approval';
  c_Pref_Nt_Plan_Change                  constant varchar2(50) := 'hes:nt:plan_change';
  c_Pref_Nt_Plan_Change_Status_Change    constant varchar2(50) := 'hes:nt:plan_change_status_change';
  c_Pref_Nt_Plan_Change_Manager_Approval constant varchar2(50) := 'hes:nt:plan_change_manager_approval';
  c_Pref_Nt_Gps_Tracking_Change          constant varchar2(50) := 'hes:nt:gps_tracking_change';
  ----------------------------------------------------------------------------------------------------
  c_Timepad_Qr_Code_Limit_Time constant varchar2(50) := 'hes:timepad:qr_code_limit_time';
  c_Timepad_Track_Types        constant varchar2(50) := 'hes:timepad:track_types';
  c_Timepad_Mark_Types         constant varchar2(50) := 'hes:timepad:mark_types';
  c_Timepad_Emotion_Types      constant varchar2(50) := 'hes:timepad:emotion_types';
  c_Timepad_Lang_Code          constant varchar2(50) := 'hes:timepad:lang_code';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Track_Type_Input     constant varchar2(50) := 'hes:staff:track_type_input';
  c_Pref_Staff_Track_Type_Output    constant varchar2(50) := 'hes:staff:track_type_output';
  c_Pref_Staff_Track_Type_Check     constant varchar2(50) := 'hes:staff:track_type_check';
  c_Pref_Staff_Track_Check_Location constant varchar2(50) := 'hes:staff:track_check_location';
  c_Pref_Staff_Track_By_Qr_Code     constant varchar2(50) := 'hes:staff:track_by_qr_code';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Track_Start                  constant varchar2(50) := 'hes:staff:track_start';
  c_Pref_Staff_Gps_Determination            constant varchar2(50) := 'hes:staff:gps_determination';
  c_Pref_Staff_Face_Recognition             constant varchar2(50) := 'hes:staff:face_recognition';
  c_Pref_Staff_Emotion_Wink                 constant varchar2(50) := 'hes:staff:emotion_wink';
  c_Pref_Staff_Emotion_Smile                constant varchar2(50) := 'hes:staff:emotion_smile';
  c_Pref_Staff_Face_Register                constant varchar2(50) := 'hes:staff:face_register';
  c_Pref_Staff_Ignore_Invalid_Track         constant varchar2(50) := 'hes:staff:ignore_invalid_track';
  c_Pref_Staff_Request_Manager_Approval     constant varchar2(50) := 'hes:staff:request_manager_approval';
  c_Pref_Staff_Enable_Request               constant varchar2(50) := 'hes:staff:enable_request';
  c_Pref_Staff_Change_Manager_Approval      constant varchar2(50) := 'hes:staff:change_manager_approval';
  c_Pref_Staff_Enable_Schedule_Change       constant varchar2(50) := 'hes:staff:enable_schedule_change';
  c_Pref_Staff_Last_Track_Type              constant varchar2(50) := 'hes:staff:last_track_type';
  c_Pref_Staff_Change_With_Restriction_Days constant varchar2(50) := 'hes:staff:change_with_restriction_days';
  c_Pref_Staff_Change_Restriction_Days      constant varchar2(50) := 'hes:staff:change_restriction_days';
  c_Pref_Staff_Use_Task_Manager             constant varchar2(50) := 'hes:staff:use_task_manager';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Gps_Tracking                   constant varchar2(50) := 'hes:staff:gps_tracking';
  c_Pref_Staff_Gps_Tracking_Gps_Track_Collect constant varchar2(50) := 'hes:staff:gps_tracking_gps_track_collect';
  c_Pref_Staff_Gps_Tracking_Auto_Output       constant varchar2(50) := 'hes:staff:gps_tracking_auto_output';
  c_Pref_Staff_Disable_Auto_Checkout          constant varchar2(50) := 'hes:staff:disable_auto_checkout';
  c_Pref_Staff_Gps_Tracking_Distance          constant varchar2(50) := 'hes:staff:gps_tracking_distance';
  c_Pref_Staff_Gps_Tracking_Interval          constant varchar2(50) := 'hes:staff:gps_tracking_interval';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Ts_Gps_Determination constant varchar2(1) := 'G';
  c_Pref_Staff_Ts_Face_Recognition  constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- bu constant faqat Apple iOSga ma'lumot yuborib aldash uchun chiqarilgan
  -- boshqa logic ahamiyati yo'q
  ----------------------------------------------------------------------------------------------------
  c_Pref_Biometric_Recognition_Enabled constant varchar2(50) := 'hes:staff:biometric_recognition_enabled';
  ----------------------------------------------------------------------------------------------------
  -- gps tracking min values
  ----------------------------------------------------------------------------------------------------
  c_Staff_Gps_Tracking_Distance_Min constant number := 1;
  c_Staff_Gps_Tracking_Interval_Min constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kinds
  ----------------------------------------------------------------------------------------------------
  c_Gps_Tracking_Qualty_Kind_High   constant varchar2(1) := 'H';
  c_Gps_Tracking_Qualty_Kind_Medium constant varchar2(1) := 'M';
  c_Gps_Tracking_Qualty_Kind_Low    constant varchar2(1) := 'L';
  c_Gps_Tracking_Qualty_Kind_Custom constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kind values
  ----------------------------------------------------------------------------------------------------
  c_Gps_Tracking_Qualty_Kind_High_Distance constant number := 1;
  c_Gps_Tracking_Qualty_Kind_High_Interval constant number := 1;

  c_Gps_Tracking_Qualty_Kind_Medium_Distance constant number := 5;
  c_Gps_Tracking_Qualty_Kind_Medium_Interval constant number := 5;

  c_Gps_Tracking_Qualty_Kind_Low_Distance constant number := 10;
  c_Gps_Tracking_Qualty_Kind_Low_Interval constant number := 10;
  ---------------------------------------------------------------------------------------------------- 
  -- Billz integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Billz_Api_Url                  varchar2(100) := 'https://api.billz.uz/v2/';
  c_Billz_Api_Reports_Sales_Method varchar2(100) := 'reports.sales';
  c_Billz_Api_Reports_Sales_Id     varchar2(100) := '1200';
  c_Billz_Api_Currency_Uzs         varchar2(100) := 'UZS';
  c_Billz_Api_Service_Name         varchar2(100) := 'com.verifix.vhr.BillzRuntimeService';
  ----------------------------------------------------------------------------------------------------
  -- key for notification uri
  ----------------------------------------------------------------------------------------------------
  c_Key_Uri_Request constant varchar2(50) := 'hes:staff:request';
  c_Key_Uri_Change  constant varchar2(50) := 'hes:staff:change';
  ----------------------------------------------------------------------------------------------------
  -- OAuth2 provider ids
  ----------------------------------------------------------------------------------------------------
  c_Provider_Hh_Id  constant number := 1;
  c_Provider_Olx_Id constant number := 2;
end Hes_Pref;
/
create or replace package body Hes_Pref is
end Hes_Pref;
/

create or replace package Hes_Util is
  ---------------------------------------------------------------------------------------------------
  Function Get_Lang_Code(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Get_Timepad_User_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Qr_Code_Limit_Time(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  -- bu funksiya faqat Apple iOSga ma'lumot yuborib aldash uchun chiqarilgan
  -- boshqa logic ahamiyati yo'q
  Function Biometric_Recognition_Enabled
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Task_Manager(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Staff_Track_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Track_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Face_Register_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Face_Register_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Request_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Request_Manager_Approval_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Change_Manager_Approval_Rt;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Day_Limit_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Change_Day_Limit_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Timepad_Track_Settings(i_Company_Id number) return Hes_Pref.Timepad_Track_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Gps_Tracking_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Notify_Settings
  (
    i_Company_Id number,
    i_User_Id    number
  ) return Hes_Pref.Staff_Notify_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Enabled_Notify
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Setting_Code varchar2
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Gen_State_Token
  (
    i_Company_Id number,
    i_Session_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind(i_Gps_Tracking_Qualty_Kind varchar2) return varchar2;
  Function Gps_Tracking_Qualty_Kinds return Matrix_Varchar2;
  Function Gps_Tracking_Qualty_Kind
  (
    i_Distance number,
    i_Interval number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Notification_Uri_Key(i_Uri varchar2) return varchar2;
end Hes_Util;
/
create or replace package body Hes_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HES:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Lang_Code(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hes_Pref.c_Timepad_Lang_Code),
               z_Md_Companies.Load(i_Company_Id).Lang_Code);
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Get_Timepad_User_Id(i_Company_Id number) return number is
  begin
    return z_Href_Timepad_Users.Load(i_Company_Id).User_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Qr_Code_Limit_Time(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hes_Pref.c_Timepad_Qr_Code_Limit_Time),
               10);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Nvl_Pref_Load
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Code          varchar2,
    i_Default_Value varchar2
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => i_Code),
               i_Default_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Biometric_Recognition_Enabled
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                         i_Filial_Id     => i_Filial_Id,
                         i_Code          => Hes_Pref.c_Pref_Biometric_Recognition_Enabled,
                         i_Default_Value => 'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Task_Manager(i_Company_Id number) return varchar2 is
  begin
    return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                         i_Filial_Id     => Md_Pref.Filial_Head(i_Company_Id),
                         i_Code          => Hes_Pref.c_Pref_Staff_Use_Task_Manager,
                         i_Default_Value => 'N');
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Staff_Track_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Track_Settings_Rt is
    result Hes_Pref.Staff_Track_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load
    (
      i_Code          varchar2,
      i_Default_Value varchar2
    ) return varchar2 is
    begin
      if Result.User_Settings = 'Y' then
        return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                        i_User_Id       => i_User_Id,
                                        i_Filial_Id     => i_Filial_Id,
                                        i_Setting_Code  => i_Code,
                                        i_Default_Value => i_Default_Value);
      end if;
    
      return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Code          => i_Code,
                           i_Default_Value => i_Default_Value);
    end;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Track_Type_Input) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    Result.Track_Type_Input     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Input, 'N');
    Result.Track_Type_Output    := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Output, 'N');
    Result.Track_Type_Check     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Check, 'N');
    Result.Track_Check_Location := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Check_Location, 'N');
    Result.Track_By_Qr_Code     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code, 'N');
    Result.Track_Start          := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Start,
                                                Hes_Pref.c_Pref_Staff_Ts_Gps_Determination);
    Result.Gps_Determination    := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Determination, 'N');
    Result.Face_Recognition     := Setting_Load(Hes_Pref.c_Pref_Staff_Face_Recognition, 'N');
    Result.Ignore_Invalid_Track := Setting_Load(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track, 'N');
    Result.Emotion_Wink         := Setting_Load(Hes_Pref.c_Pref_Staff_Emotion_Wink, 'N');
    Result.Emotion_Smile        := Setting_Load(Hes_Pref.c_Pref_Staff_Emotion_Smile, 'N');
    Result.Last_Track_Type      := Setting_Load(Hes_Pref.c_Pref_Staff_Last_Track_Type, 'Y');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Face_Register_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Face_Register_Rt is
    result Hes_Pref.Staff_Face_Register_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Face_Register) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Face_Register := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                       i_User_Id       => i_User_Id,
                                                       i_Filial_Id     => i_Filial_Id,
                                                       i_Setting_Code  => Hes_Pref.c_Pref_Staff_Face_Register,
                                                       i_Default_Value => 'N');
    else
      Result.Face_Register := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                            i_Filial_Id     => i_Filial_Id,
                                            i_Code          => Hes_Pref.c_Pref_Staff_Face_Register,
                                            i_Default_Value => 'N');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Request_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Request_Manager_Approval_Rt is
    result Hes_Pref.Staff_Request_Manager_Approval_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Request_Manager_Approval) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Request_Settings := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                          i_User_Id       => i_User_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Setting_Code  => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                                                          i_Default_Value => 'N');
    
      Result.Enable_Request := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                        i_User_Id       => i_User_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Request,
                                                        i_Default_Value => 'Y');
    else
      Result.Request_Settings := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                               i_Filial_Id     => i_Filial_Id,
                                               i_Code          => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                                               i_Default_Value => 'N');
    
      Result.Enable_Request := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Code          => Hes_Pref.c_Pref_Staff_Enable_Request,
                                             i_Default_Value => 'Y');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Change_Manager_Approval_Rt is
    result Hes_Pref.Staff_Change_Manager_Approval_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Manager_Approval) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Change_Settings := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                         i_User_Id       => i_User_Id,
                                                         i_Filial_Id     => i_Filial_Id,
                                                         i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                                                         i_Default_Value => 'N');
    
      Result.Enable_Schedule_Change := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                                i_User_Id       => i_User_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                                                                i_Default_Value => 'Y');
    else
      Result.Change_Settings := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                              i_Filial_Id     => i_Filial_Id,
                                              i_Code          => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                                              i_Default_Value => 'N');
    
      Result.Enable_Schedule_Change := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                                     i_Filial_Id     => i_Filial_Id,
                                                     i_Code          => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                                                     i_Default_Value => 'Y');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Day_Limit_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Change_Day_Limit_Rt is
    result Hes_Pref.Change_Day_Limit_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Change_With_Restriction_Days := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                                      i_User_Id       => i_User_Id,
                                                                      i_Filial_Id     => i_Filial_Id,
                                                                      i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                                                                      i_Default_Value => 'N');
      if Result.Change_With_Restriction_Days = 'Y' then
        Result.Change_Restriction_Days := Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                                                   i_User_Id      => i_User_Id,
                                                                   i_Filial_Id    => i_Filial_Id,
                                                                   i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      end if;
    else
      Result.Change_With_Restriction_Days := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                                           i_Filial_Id     => i_Filial_Id,
                                                           i_Code          => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                                                           i_Default_Value => 'N');
    
      if Result.Change_With_Restriction_Days = 'Y' then
        Result.Change_Restriction_Days := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Code       => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      end if;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timepad_Track_Settings(i_Company_Id number) return Hes_Pref.Timepad_Track_Settings_Rt is
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    result        Hes_Pref.Timepad_Track_Settings_Rt;
  begin
    Result.Qr_Code_Limit_Time := Get_Qr_Code_Limit_Time(i_Company_Id);
    Result.Track_Types        := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Track_Types);
    Result.Mark_Types         := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Mark_Types);
    Result.Emotion_Types      := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Emotion_Types);
    Result.Lang_Code          := Get_Lang_Code(i_Company_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Gps_Tracking_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Gps_Tracking_Settings_Rt is
    result Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load
    (
      i_Code          varchar2,
      i_Default_Value varchar2
    ) return varchar2 is
    begin
      if i_User_Id is not null and Result.User_Settings = 'Y' then
        return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                        i_User_Id       => i_User_Id,
                                        i_Filial_Id     => i_Filial_Id,
                                        i_Setting_Code  => i_Code,
                                        i_Default_Value => i_Default_Value);
      end if;
    
      return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Code       => i_Code),
                 i_Default_Value);
    end;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Gps_Tracking) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    Result.Enabled                   := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking, 'N');
    Result.Gps_Track_Collect_Enabled := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect,
                                                     'N');
    Result.Auto_Output_Enabled       := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output,
                                                     'N');
    Result.Disable_Auto_Checkout     := Setting_Load(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout,
                                                     'N');
    Result.Distance                  := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance,
                                                     Hes_Pref.c_Staff_Gps_Tracking_Distance_Min);
    Result.Interval                  := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval,
                                                     Hes_Pref.c_Staff_Gps_Tracking_Interval_Min);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Notify_Settings
  (
    i_Company_Id number,
    i_User_Id    number
  ) return Hes_Pref.Staff_Notify_Settings_Rt is
    v_Filial_Id number := Md_Pref.Filial_Head(i_Company_Id);
    result      Hes_Pref.Staff_Notify_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load(i_Code varchar2) return varchar2 is
    begin
      return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                      i_User_Id       => i_User_Id,
                                      i_Filial_Id     => v_Filial_Id,
                                      i_Setting_Code  => i_Code,
                                      i_Default_Value => 'Y');
    end;
  begin
    Result.Calendar_Day_Change          := Setting_Load(Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
    Result.Late_Time                    := Setting_Load(Hes_Pref.c_Pref_Nt_Late_Time);
    Result.Early_Time                   := Setting_Load(Hes_Pref.c_Pref_Nt_Early_Time);
    Result.Request                      := Setting_Load(Hes_Pref.c_Pref_Nt_Request);
    Result.Request_Change_Status        := Setting_Load(Hes_Pref.c_Pref_Nt_Request_Change_Status);
    Result.Request_Manager_Approval     := Setting_Load(Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    Result.Plan_Change                  := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change);
    Result.Plan_Change_Status_Change    := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
    Result.Plan_Change_Manager_Approval := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    Result.Gps_Tracking_Change          := Setting_Load(Hes_Pref.c_Pref_Nt_Gps_Tracking_Change);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Enabled_Notify
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Setting_Code varchar2
  ) return boolean is
  begin
    return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                    i_User_Id       => i_User_Id,
                                    i_Filial_Id     => Md_Pref.Filial_Head(i_Company_Id),
                                    i_Setting_Code  => i_Setting_Code,
                                    i_Default_Value => 'Y') = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gen_State_Token
  (
    i_Company_Id number,
    i_Session_Id number
  ) return varchar2 is
    v_Src raw(256) := Utl_Raw.Cast_To_Raw(i_Company_Id || '#' || i_Session_Id) ||
                      Dbms_Crypto.Randombytes(128);
  begin
    return Dbms_Crypto.Hash(Src => v_Src, Typ => Dbms_Crypto.Hash_Sh512);
  end;

  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_High return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: high');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Medium return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: medium');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Low return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: low');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Custom return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind(i_Gps_Tracking_Qualty_Kind varchar2) return varchar2 is
  begin
    return case i_Gps_Tracking_Qualty_Kind --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_High then t_Gps_Tracking_Qualty_Kind_High --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium then t_Gps_Tracking_Qualty_Kind_Medium --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low then t_Gps_Tracking_Qualty_Kind_Low --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom then t_Gps_Tracking_Qualty_Kind_Custom --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Tracking_Qualty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hes_Pref.c_Gps_Tracking_Qualty_Kind_High,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom),
                           Array_Varchar2(t_Gps_Tracking_Qualty_Kind_High,
                                          t_Gps_Tracking_Qualty_Kind_Medium,
                                          t_Gps_Tracking_Qualty_Kind_Low,
                                          t_Gps_Tracking_Qualty_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Tracking_Qualty_Kind
  (
    i_Distance number,
    i_Interval number
  ) return varchar2 is
    v_Kind varchar2(1);
  begin
    if i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_High_Distance and
       i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_High_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_High;
    elsif i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium_Distance and
          i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium;
    elsif i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low_Distance and
          i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low;
    else
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom;
    end if;
  
    return v_Kind;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Notification_Uri_Key(i_Uri varchar2) return varchar2 is
  begin
    return case i_Uri --
    when Htt_Pref.c_Form_Request_View then Hes_Pref.c_Key_Uri_Request --
    when Htt_Pref.c_Form_Change_View then Hes_Pref.c_Key_Uri_Change --
    else null end;
  end;

end Hes_Util;
/

create or replace package Hpd_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Save
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Journal_Id               number,
    i_Journal_Type_Id          number,
    i_Journal_Number           varchar2,
    i_Journal_Date             date,
    i_Journal_Name             varchar2,
    i_Source_Table             varchar2 := null,
    i_Source_Id                number := null,
    i_Acceptable_Journal_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Repairing
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Save
  (
    i_Journal         Hpd_Pref.Hiring_Journal_Rt,
    i_Delay_Repairing boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Save
  (
    i_Journal         Hpd_Pref.Transfer_Journal_Rt,
    i_Delay_Repairing boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Save(i_Journal Hpd_Pref.Dismissal_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Save(i_Journal Hpd_Pref.Wage_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Save(i_Journal Hpd_Pref.Rank_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Save(i_Journal Hpd_Pref.Limit_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Save(i_Journal Hpd_Pref.Schedule_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_Save(i_Journal Hpd_Pref.Sick_Leave_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_Save(i_Journal Hpd_Pref.Business_Trip_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_Save(i_Journal Hpd_Pref.Vacation_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_Save(i_Journal Hpd_Pref.Overtime_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_Save(i_Journal Hpd_Pref.Timebook_Adjustment_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Save(i_Contract Hpd_Pref.Cv_Contract_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_Save(i_Create_Robot Hpd_Pref.Application_Create_Robot_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_Save(i_Hiring Hpd_Pref.Application_Hiring_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_Save
  (
    i_Application_Type varchar2,
    i_Transfer         Hpd_Pref.Application_Transfer_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_Save(i_Dismissal Hpd_Pref.Application_Dismissal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_In_Progress
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Completed
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Closing_Note   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Robot
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Robot_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Employee
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Employee_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Journal
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Journal_Id     number
  );
end Hpd_Api;
/
create or replace package body Hpd_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Create_By_Hiring
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Hiring     Hpd_Pref.Hiring_Rt,
    i_Setting    Hrm_Settings%rowtype
  ) return number is
    r_Page  Hpd_Journal_Pages%rowtype;
    r_Staff Href_Staffs%rowtype;
  begin
    r_Page := z_Hpd_Journal_Pages.Take(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Page_Id    => i_Hiring.Page_Id);
  
    if z_Hpd_Journal_Pages.Exist_Lock(i_Company_Id => i_Company_Id, --
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Page_Id    => i_Hiring.Page_Id,
                                      o_Row        => r_Page) then
      if not Fazo.Equal(r_Page.Employee_Id, i_Hiring.Employee_Id) then
        z_Href_Staffs.Update_One(i_Company_Id   => i_Company_Id,
                                 i_Filial_Id    => i_Filial_Id,
                                 i_Staff_Id     => r_Page.Staff_Id,
                                 i_Staff_Number => Option_Varchar2(null));
      
        r_Staff            := null;
        r_Staff.Company_Id := i_Company_Id;
        r_Staff.Filial_Id  := i_Filial_Id;
        r_Staff.Staff_Id   := Href_Next.Staff_Id;
      else
        r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => r_Page.Staff_Id);
      end if;
    else
      r_Staff            := null;
      r_Staff.Company_Id := i_Company_Id;
      r_Staff.Filial_Id  := i_Filial_Id;
      r_Staff.Staff_Id   := Href_Next.Staff_Id;
    end if;
  
    r_Staff.Staff_Number        := i_Hiring.Staff_Number;
    r_Staff.Staff_Kind          := Hpd_Util.Cast_Staff_Kind_By_Emp_Type(i_Hiring.Robot.Employment_Type);
    r_Staff.Employee_Id         := i_Hiring.Employee_Id;
    r_Staff.Hiring_Date         := i_Hiring.Hiring_Date;
    r_Staff.Dismissal_Date      := i_Hiring.Dismissal_Date;
    r_Staff.Robot_Id            := i_Hiring.Robot.Robot_Id;
    r_Staff.Division_Id         := i_Hiring.Robot.Division_Id;
    r_Staff.Job_Id              := i_Hiring.Robot.Job_Id;
    r_Staff.Org_Unit_Id         := Nvl(i_Hiring.Robot.Org_Unit_Id, i_Hiring.Robot.Division_Id);
    r_Staff.Fte                 := Nvl(i_Hiring.Robot.Fte, 1);
    r_Staff.Fte_Id              := i_Hiring.Robot.Fte_Id;
    r_Staff.Rank_Id             := i_Hiring.Robot.Rank_Id;
    r_Staff.Schedule_Id         := i_Hiring.Schedule_Id;
    r_Staff.Employment_Type     := i_Hiring.Robot.Employment_Type;
    r_Staff.Dismissal_Date      := null;
    r_Staff.Dismissal_Note      := null;
    r_Staff.Dismissal_Reason_Id := null;
    r_Staff.State               := 'P';
  
    if i_Setting.Autogen_Staff_Number = 'Y' and i_Hiring.Staff_Number is null then
      r_Staff.Staff_Number := Mkr_Core.Gen_Document_Number(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Table      => Zt.Href_Staffs,
                                                           i_Column     => z.Staff_Number);
    end if;
  
    z_Href_Staffs.Save_Row(r_Staff);
  
    Hpd_Core.Update_Insert_Valid_Auto_Staff(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => r_Staff.Staff_Id,
                                            i_Journal_Id => i_Journal_Id,
                                            i_Page_Id    => i_Hiring.Page_Id);
  
    return r_Staff.Staff_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'A' then
      Hpd_Error.Raise_033(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => i_Staff_Id));
    end if;
  
    z_Href_Staffs.Delete_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return Hpd_Util.Journal_Type_Name(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Save
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Journal_Id               number,
    i_Journal_Type_Id          number,
    i_Journal_Number           varchar2,
    i_Journal_Date             date,
    i_Journal_Name             varchar2,
    i_Source_Table             varchar2 := null,
    i_Source_Id                number := null,
    i_Acceptable_Journal_Types Array_Varchar2
  ) is
    r_Journal  Hpd_Journals%rowtype;
    v_Type_Ids Array_Number := Array_Number();
    v_Exists   boolean;
  
    v_Expected_Types Array_Varchar2 := Array_Varchar2();
  begin
    for i in 1 .. i_Acceptable_Journal_Types.Count
    loop
      Fazo.Push(v_Type_Ids,
                Hpd_Util.Journal_Type_Id(i_Company_Id => i_Company_Id,
                                         i_Pcode      => i_Acceptable_Journal_Types(i)));
    end loop;
  
    if i_Journal_Type_Id not member of v_Type_Ids then
      for i in 1 .. v_Type_Ids.Count
      loop
        Fazo.Push(v_Expected_Types, Journal_Type_Name(i_Company_Id, v_Type_Ids(i)));
      end loop;
    
      Hpd_Error.Raise_034(i_Journal_Type   => Journal_Type_Name(i_Company_Id, i_Journal_Type_Id),
                          i_Expected_Types => v_Expected_Types);
    end if;
  
    if z_Hpd_Journals.Exist_Lock(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Journal_Id => i_Journal_Id,
                                 o_Row        => r_Journal) then
      if r_Journal.Posted = 'Y' then
        Hpd_Error.Raise_035(r_Journal.Journal_Number);
      end if;
    
      if r_Journal.Journal_Type_Id not member of v_Type_Ids then
        for i in 1 .. v_Type_Ids.Count
        loop
          Fazo.Push(v_Expected_Types, Journal_Type_Name(i_Company_Id, v_Type_Ids(i)));
        end loop;
      
        Hpd_Error.Raise_036(i_Journal_Type   => Journal_Type_Name(i_Company_Id, i_Journal_Type_Id),
                            i_Expected_Types => v_Expected_Types);
      end if;
    
      if r_Journal.Journal_Type_Id <> i_Journal_Type_Id then
        Hpd_Error.Raise_046(Journal_Type_Name(i_Company_Id, r_Journal.Journal_Type_Id));
      end if;
    
      if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
         not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
        Hpd_Error.Raise_068(i_Jounal_Id         => r_Journal.Journal_Id,
                            i_Journal_Number    => r_Journal.Journal_Number,
                            i_Journal_Type_Name => Journal_Type_Name(i_Company_Id,
                                                                     r_Journal.Journal_Type_Id),
                            i_Source_Table      => r_Journal.Source_Table,
                            i_Source_Id         => r_Journal.Source_Id);
      end if;
    
      v_Exists := true;
    else
      r_Journal.Company_Id      := i_Company_Id;
      r_Journal.Filial_Id       := i_Filial_Id;
      r_Journal.Journal_Id      := i_Journal_Id;
      r_Journal.Journal_Type_Id := i_Journal_Type_Id;
      r_Journal.Source_Table    := i_Source_Table;
      r_Journal.Source_Id       := i_Source_Id;
    
      v_Exists := false;
    end if;
  
    r_Journal.Journal_Number := i_Journal_Number;
    r_Journal.Journal_Date   := i_Journal_Date;
    r_Journal.Journal_Name   := i_Journal_Name;
    r_Journal.Posted         := 'N';
  
    if v_Exists then
      z_Hpd_Journals.Update_Row(r_Journal);
    else
      if r_Journal.Journal_Number is null then
        r_Journal.Journal_Number := Md_Core.Gen_Number(i_Company_Id => r_Journal.Company_Id,
                                                       i_Filial_Id  => r_Journal.Filial_Id,
                                                       i_Table      => Zt.Hpd_Journals,
                                                       i_Column     => z.Journal_Number);
      end if;
    
      z_Hpd_Journals.Insert_Row(r_Journal);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Page_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
    v_Page        Hpd_Journal_Pages%rowtype;
    v_Employee_Id number := z_Href_Staffs.Take(i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Staff_Id => i_Staff_Id).Employee_Id;
  begin
    z_Hpd_Journal_Pages.Init(p_Row         => v_Page,
                             i_Company_Id  => i_Company_Id,
                             i_Filial_Id   => i_Filial_Id,
                             i_Journal_Id  => i_Journal_Id,
                             i_Page_Id     => i_Page_Id,
                             i_Staff_Id    => i_Staff_Id,
                             i_Employee_Id => v_Employee_Id);
  
    z_Hpd_Journal_Pages.Save_Row(v_Page);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Contract_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Contract   Hpd_Pref.Contract_Rt
  ) is
  begin
    if i_Contract.Contract_Number is null and i_Contract.Contract_Date is null and
       i_Contract.Fixed_Term is null and i_Contract.Expiry_Date is null and
       i_Contract.Fixed_Term_Base_Id is null and i_Contract.Concluding_Term is null and
       i_Contract.Hiring_Conditions is null and i_Contract.Other_Conditions is null and
       i_Contract.Workplace_Equipment is null and i_Contract.Representative_Basis is null then
      return;
    end if;
  
    z_Hpd_Page_Contracts.Save_One(i_Company_Id           => i_Company_Id,
                                  i_Filial_Id            => i_Filial_Id,
                                  i_Page_Id              => i_Page_Id,
                                  i_Contract_Number      => i_Contract.Contract_Number,
                                  i_Contract_Date        => i_Contract.Contract_Date,
                                  i_Fixed_Term           => i_Contract.Fixed_Term,
                                  i_Expiry_Date          => i_Contract.Expiry_Date,
                                  i_Fixed_Term_Base_Id   => i_Contract.Fixed_Term_Base_Id,
                                  i_Concluding_Term      => i_Contract.Concluding_Term,
                                  i_Hiring_Conditions    => i_Contract.Hiring_Conditions,
                                  i_Other_Conditions     => i_Contract.Other_Conditions,
                                  i_Workplace_Equipment  => i_Contract.Workplace_Equipment,
                                  i_Representative_Basis => i_Contract.Representative_Basis);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Page_Robot_Is_Null
  (
    i_Robot           Hpd_Pref.Robot_Rt,
    i_Position_Enable varchar2
  ) return boolean is
  begin
    if i_Position_Enable = 'N' and (i_Robot.Division_Id is null or i_Robot.Job_Id is null) and
       i_Robot.Fte_Id is null and i_Robot.Fte is null then
      return true;
    end if;
  
    if i_Robot.Robot_Id is null and i_Robot.Rank_Id is null and i_Robot.Fte_Id is null and
       i_Robot.Fte is null then
      return true;
    end if;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date := null,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt,
    i_Settings    Hrm_Settings%rowtype
  ) is
    v_Robot Hpd_Pref.Robot_Rt;
    r_Robot Mrf_Robots%rowtype;
  begin
    v_Robot := i_Robot;
  
    if i_Settings.Parttime_Enable = 'N' or v_Robot.Fte_Id is null and Nvl(v_Robot.Fte, 1) = 1 then
      v_Robot.Fte_Id := Href_Util.Fte_Id(i_Company_Id => i_Company_Id,
                                         i_Pcode      => Href_Pref.c_Pcode_Fte_Full_Time);
      v_Robot.Fte    := 1;
    end if;
  
    if i_Settings.Position_Enable = 'N' then
      if i_Settings.Wage_Scale_Enable = 'N' or v_Robot.Rank_Id is null then
        v_Robot.Wage_Scale_Id := null;
      end if;
    
      Hpd_Core.Implicit_Robot_Save(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Journal_Id  => i_Journal_Id,
                                   i_Page_Id     => i_Page_Id,
                                   i_Open_Date   => i_Open_Date,
                                   i_Close_Date  => i_Close_Date,
                                   i_Schedule_Id => i_Schedule_Id,
                                   i_Days_Limit  => i_Days_Limit,
                                   i_Robot       => v_Robot,
                                   i_Indicators  => i_Indicators,
                                   i_Oper_Types  => i_Oper_Types);
    end if;
  
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => v_Robot.Robot_Id);
  
    z_Hpd_Page_Robots.Save_One(i_Company_Id      => i_Company_Id,
                               i_Filial_Id       => i_Filial_Id,
                               i_Page_Id         => i_Page_Id,
                               i_Robot_Id        => v_Robot.Robot_Id,
                               i_Division_Id     => r_Robot.Division_Id,
                               i_Job_Id          => r_Robot.Job_Id,
                               i_Rank_Id         => v_Robot.Rank_Id,
                               i_Employment_Type => v_Robot.Employment_Type,
                               i_Fte_Id          => v_Robot.Fte_Id,
                               i_Fte             => v_Robot.Fte);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Page_Id     number,
    i_Schedule_Id number
  ) is
  begin
    if i_Schedule_Id is not null then
      z_Hpd_Page_Schedules.Save_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Page_Id     => i_Page_Id,
                                    i_Schedule_Id => i_Schedule_Id);
    else
      z_Hpd_Page_Schedules.Delete_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Page_Id    => i_Page_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Vacation_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Days_Limit number
  ) is
  begin
    z_Hpd_Page_Vacation_Limits.Save_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Page_Id    => i_Page_Id,
                                        i_Days_Limit => i_Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Operation_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Page_Id     number,
    i_Job_Id      number,
    i_Currency_Id number,
    i_User_Id     number,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  ) is
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
  
    --------------------------------------------------
    Procedure Page_Currency_Save
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Page_Id     number,
      i_Currency_Id number
    ) is
      v_Allowed_Currency_Ids Array_Number := Hpr_Util.Load_Currency_Settings(i_Company_Id => i_Company_Id,
                                                                             i_Filial_Id  => i_Filial_Id);
    begin
      if i_Oper_Types.Count = 0 then
        z_Hpd_Page_Currencies.Delete_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => i_Page_Id);
        return;
      end if;
    
      if v_Allowed_Currency_Ids.Count > 0 and
         (i_Currency_Id is null or i_Currency_Id not member of v_Allowed_Currency_Ids) then
        Hpd_Error.Raise_072;
      end if;
    
      if i_Currency_Id is not null then
        z_Hpd_Page_Currencies.Save_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Page_Id     => i_Page_Id,
                                       i_Currency_Id => i_Currency_Id);
      end if;
    end;
  
  begin
    if z_Hpd_Journal_Pages.Lock_Load(i_Company_Id => i_Company_Id, --
     i_Filial_Id => i_Filial_Id, --
     i_Page_Id => i_Page_Id).Employee_Id <> i_User_Id and not
         Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Company_Id,
                                                                               i_Filial_Id  => i_Filial_Id,
                                                                               i_Job_Id     => i_Job_Id,
                                                                               i_User_Id    => i_User_Id) then
      return;
    end if;
  
    v_Oper_Type_Ids := Array_Number();
    v_Oper_Type_Ids.Extend(i_Oper_Types.Count);
  
    for i in 1 .. i_Indicators.Count
    loop
      v_Indicator := i_Indicators(i);
    
      z_Hpd_Page_Indicators.Save_One(i_Company_Id      => i_Company_Id,
                                     i_Filial_Id       => i_Filial_Id,
                                     i_Page_Id         => i_Page_Id,
                                     i_Indicator_Id    => v_Indicator.Indicator_Id,
                                     i_Indicator_Value => v_Indicator.Indicator_Value);
    end loop;
  
    for i in 1 .. i_Oper_Types.Count
    loop
      v_Oper_Type := i_Oper_Types(i);
      v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
    
      z_Hpd_Page_Oper_Types.Insert_Try(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Page_Id      => i_Page_Id,
                                       i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
    
      for j in 1 .. v_Oper_Type.Indicator_Ids.Count
      loop
        z_Hpd_Oper_Type_Indicators.Insert_Try(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Page_Id      => i_Page_Id,
                                              i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                              i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
      end loop;
    
      for r in (select *
                  from Hpd_Oper_Type_Indicators t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Page_Id = i_Page_Id
                   and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                   and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
      loop
        z_Hpd_Oper_Type_Indicators.Delete_One(i_Company_Id   => r.Company_Id,
                                              i_Filial_Id    => r.Filial_Id,
                                              i_Page_Id      => r.Page_Id,
                                              i_Oper_Type_Id => r.Oper_Type_Id,
                                              i_Indicator_Id => r.Indicator_Id);
      end loop;
    end loop;
  
    Page_Currency_Save(i_Company_Id  => i_Company_Id,
                       i_Filial_Id   => i_Filial_Id,
                       i_Page_Id     => i_Page_Id,
                       i_Currency_Id => i_Currency_Id);
  
    for r in (select *
                from Hpd_Page_Oper_Types t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Page_Id = i_Page_Id
                 and t.Oper_Type_Id not member of v_Oper_Type_Ids)
    loop
      z_Hpd_Page_Oper_Types.Delete_One(i_Company_Id   => r.Company_Id,
                                       i_Filial_Id    => r.Filial_Id,
                                       i_Page_Id      => r.Page_Id,
                                       i_Oper_Type_Id => r.Oper_Type_Id);
    end loop;
  
    for r in (select q.Indicator_Id
                from Hpd_Page_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id
                 and not exists (select 1
                        from Hpd_Oper_Type_Indicators w
                       where w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Page_Id = q.Page_Id
                         and w.Indicator_Id = q.Indicator_Id))
    loop
      z_Hpd_Page_Indicators.Delete_One(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Page_Id      => i_Page_Id,
                                       i_Indicator_Id => r.Indicator_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Remove_Vacation_Limits
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  ) is
  begin
    z_Hpd_Page_Vacation_Limits.Delete_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Page_Id    => i_Page_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Employees_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    -- deleting divisions from journal
    delete from Hpd_Journal_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- deleting employees from journal
    delete from Hpd_Journal_Employees q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- deleting staffs from journal
    delete from Hpd_Journal_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- inserting divisions into journal
    insert into Hpd_Journal_Divisions
      (Company_Id, Filial_Id, Journal_Id, Division_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Division_Id
        from Hpd_Journal_Timebook_Adjustments q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
         and q.Division_Id is not null;
  
    -- inserting employees into journal
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Timeoffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Overtimes q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    -- inserting staffs into journal
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Timeoffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Overtimes q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Pages_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number
  ) is
    r_Journal Hpd_Journals%rowtype;
  begin
    r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Journal_Id => i_Journal_Id);
  
    if Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hpd_Core.Hiring_Cv_Contract_Delete(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Journal_Id => i_Journal_Id,
                                         i_Page_Ids   => i_Page_Ids);
    end if;
  
    for r in (select *
                from Hpd_Journal_Pages t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Journal_Id = i_Journal_Id
                 and t.Page_Id not member of i_Page_Ids)
    loop
      z_Hpd_Journal_Pages.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Filial_Id  => r.Filial_Id,
                                     i_Page_Id    => r.Page_Id);
    end loop;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Staffs_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    insert into Hpd_Auto_Created_Staffs p
      (p.Company_Id, p.Filial_Id, p.Staff_Id, p.Journal_Id, p.Page_Id, p.Valid)
      select q.Company_Id, q.Filial_Id, q.Staff_Id, q.Journal_Id, q.Page_Id, 'N'
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Auto_Robots_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    insert into Hpd_Auto_Created_Robots p
      (p.Company_Id, p.Filial_Id, p.Robot_Id, p.Journal_Id, p.Page_Id, p.Valid)
      select i_Company_Id, i_Filial_Id, q.Robot_Id, i_Journal_Id, q.Page_Id, 'N'
        from Hpd_Page_Robots q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and exists (select *
                from Hpd_Journal_Pages Jp
               where Jp.Company_Id = q.Company_Id
                 and Jp.Filial_Id = q.Filial_Id
                 and Jp.Page_Id = q.Page_Id
                 and Jp.Journal_Id = i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    v_Linked_Journal_Id number;
  
    --------------------------------------------------
    Function Staff_Linked_Other_Journal(i_Staff_Id number) return number is
      result number;
    begin
      select q.Journal_Id
        into result
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Journal_Id != i_Journal_Id
         and Rownum = 1;
    
      return result;
    exception
      when No_Data_Found then
        return result;
    end;
  begin
    for r in (select *
                from Hpd_Auto_Created_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id
                 and q.Valid = 'N')
    loop
      v_Linked_Journal_Id := Staff_Linked_Other_Journal(r.Staff_Id);
    
      if v_Linked_Journal_Id is not null then
        Hpd_Error.Raise_037(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r.Company_Id,
                                                                     i_Filial_Id  => r.Filial_Id,
                                                                     i_Staff_Id   => r.Staff_Id),
                            i_Journal_Number => z_Hpd_Journals.Load(i_Company_Id => i_Company_Id, --
                                                i_Filial_Id => i_Filial_Id, --
                                                i_Journal_Id => v_Linked_Journal_Id).Journal_Number);
      end if;
    
      Staff_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => r.Staff_Id);
    end loop;
  
    delete Hpd_Auto_Created_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Repairing
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    Delete_Unnecessary_Staffs(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
  
    Hpd_Core.Delete_Unnecessary_Robots(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Save
  (
    i_Journal         Hpd_Pref.Hiring_Journal_Rt,
    i_Delay_Repairing boolean
  ) is
    v_Staff_Id           number;
    r_Setting            Hrm_Settings%rowtype;
    v_Hiring             Hpd_Pref.Hiring_Rt;
    v_Page_Ids           Array_Number;
    v_User_Id            number;
    v_Contractor_Type_Id number;
  begin
    v_Contractor_Type_Id := Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                     i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor);
  
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Hirings.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Hirings(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Hiring),
                                     i_Pages_Cnt        => i_Journal.Hirings.Count);
  
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Hirings.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Hirings(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => v_Contractor_Type_Id,
                                     i_Pages_Cnt        => i_Journal.Hirings.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Hiring,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id,
                                       i_Filial_Id  => i_Journal.Filial_Id);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Hirings.Count);
  
    Hiring_Staffs_Invalid(i_Company_Id => i_Journal.Company_Id,
                          i_Filial_Id  => i_Journal.Filial_Id,
                          i_Journal_Id => i_Journal.Journal_Id);
  
    Auto_Robots_Invalid(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
  
    for i in 1 .. i_Journal.Hirings.Count
    loop
      v_Hiring := i_Journal.Hirings(i);
    
      v_Page_Ids(i) := v_Hiring.Page_Id;
    
      v_Staff_Id := Staff_Create_By_Hiring(i_Company_Id => i_Journal.Company_Id,
                                           i_Filial_Id  => i_Journal.Filial_Id,
                                           i_Journal_Id => i_Journal.Journal_Id,
                                           i_Hiring     => v_Hiring,
                                           i_Setting    => r_Setting);
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Hiring.Page_Id,
                        i_Staff_Id   => v_Staff_Id);
    
      if v_Contractor_Type_Id = i_Journal.Journal_Type_Id and v_Hiring.Dismissal_Date is null then
        Hpd_Error.Raise_081;
      end if;
    
      z_Hpd_Hirings.Save_One(i_Company_Id           => i_Journal.Company_Id,
                             i_Filial_Id            => i_Journal.Filial_Id,
                             i_Page_Id              => v_Hiring.Page_Id,
                             i_Staff_Id             => v_Staff_Id,
                             i_Hiring_Date          => v_Hiring.Hiring_Date,
                             i_Dismissal_Date       => v_Hiring.Dismissal_Date,
                             i_Trial_Period         => v_Hiring.Trial_Period,
                             i_Employment_Source_Id => v_Hiring.Employment_Source_Id);
    
      Page_Robot_Save(i_Company_Id  => i_Journal.Company_Id,
                      i_Filial_Id   => i_Journal.Filial_Id,
                      i_Journal_Id  => i_Journal.Journal_Id,
                      i_Page_Id     => v_Hiring.Page_Id,
                      i_Open_Date   => v_Hiring.Hiring_Date,
                      i_Schedule_Id => v_Hiring.Schedule_Id,
                      i_Days_Limit  => v_Hiring.Vacation_Days_Limit,
                      i_Robot       => v_Hiring.Robot,
                      i_Indicators  => v_Hiring.Indicators,
                      i_Oper_Types  => v_Hiring.Oper_Types,
                      i_Settings    => r_Setting);
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Hiring.Page_Id,
                         i_Schedule_Id => v_Hiring.Schedule_Id);
    
      if i_Journal.Journal_Type_Id <> v_Contractor_Type_Id then
        if v_Hiring.Vacation_Days_Limit is not null then
          Page_Vacation_Limit_Save(i_Company_Id => i_Journal.Company_Id,
                                   i_Filial_Id  => i_Journal.Filial_Id,
                                   i_Page_Id    => v_Hiring.Page_Id,
                                   i_Days_Limit => v_Hiring.Vacation_Days_Limit);
        else
          Page_Remove_Vacation_Limits(i_Company_Id => i_Journal.Company_Id,
                                      i_Filial_Id  => i_Journal.Filial_Id,
                                      i_Page_Id    => v_Hiring.Page_Id);
        end if;
      
        Page_Contract_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Page_Id    => v_Hiring.Page_Id,
                           i_Contract   => v_Hiring.Contract);
      else
        Cv_Contract_Save(v_Hiring.Cv_Contract);
      end if;
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Hiring.Page_Id,
                          i_Job_Id      => v_Hiring.Robot.Job_Id,
                          i_Currency_Id => v_Hiring.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Hiring.Indicators,
                          i_Oper_Types  => v_Hiring.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  
    if not i_Delay_Repairing then
      Journal_Repairing(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Save
  (
    i_Journal         Hpd_Pref.Transfer_Journal_Rt,
    i_Delay_Repairing boolean
  ) is
    r_Setting  Hrm_Settings%rowtype;
    r_Staff    Href_Staffs%rowtype;
    v_Transfer Hpd_Pref.Transfer_Rt;
    v_Page_Ids Array_Number;
    v_Job_Id   number;
    v_User_Id  number;
  begin
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Transfers.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Transfers(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Transfer),
                                     i_Pages_Cnt        => i_Journal.Transfers.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Transfer,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id,
                                       i_Filial_Id  => i_Journal.Filial_Id);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Transfers.Count);
  
    Auto_Robots_Invalid(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
  
    for i in 1 .. i_Journal.Transfers.Count
    loop
      v_Transfer := i_Journal.Transfers(i);
      v_Page_Ids(i) := v_Transfer.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Transfer.Page_Id,
                        i_Staff_Id   => v_Transfer.Staff_Id);
    
      z_Hpd_Transfers.Save_One(i_Company_Id      => i_Journal.Company_Id,
                               i_Filial_Id       => i_Journal.Filial_Id,
                               i_Page_Id         => v_Transfer.Page_Id,
                               i_Transfer_Begin  => v_Transfer.Transfer_Begin,
                               i_Transfer_End    => v_Transfer.Transfer_End,
                               i_Transfer_Reason => v_Transfer.Transfer_Reason,
                               i_Transfer_Base   => v_Transfer.Transfer_Base);
    
      Page_Contract_Save(i_Company_Id => i_Journal.Company_Id,
                         i_Filial_Id  => i_Journal.Filial_Id,
                         i_Page_Id    => v_Transfer.Page_Id,
                         i_Contract   => v_Transfer.Contract);
    
      if not Page_Robot_Is_Null(v_Transfer.Robot, r_Setting.Position_Enable) then
        if v_Transfer.Robot.Employment_Type = Hpd_Pref.c_Employment_Type_Contractor then
          Hpd_Error.Raise_082(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                   i_Filial_Id  => i_Journal.Filial_Id,
                                                   i_Staff_Id   => v_Transfer.Staff_Id));
        end if;
      
        r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Journal.Company_Id,
                                      i_Filial_Id  => i_Journal.Filial_Id,
                                      i_Staff_Id   => v_Transfer.Staff_Id);
      
        if r_Staff.Employment_Type = Hpd_Pref.c_Employment_Type_Contractor then
          Hpd_Error.Raise_083(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                   i_Filial_Id  => i_Journal.Filial_Id,
                                                   i_Staff_Id   => v_Transfer.Staff_Id));
        end if;
      
        Page_Robot_Save(i_Company_Id  => i_Journal.Company_Id,
                        i_Filial_Id   => i_Journal.Filial_Id,
                        i_Journal_Id  => i_Journal.Journal_Id,
                        i_Page_Id     => v_Transfer.Page_Id,
                        i_Open_Date   => v_Transfer.Transfer_Begin,
                        i_Close_Date  => v_Transfer.Transfer_End,
                        i_Schedule_Id => v_Transfer.Schedule_Id,
                        i_Days_Limit  => v_Transfer.Vacation_Days_Limit,
                        i_Robot       => v_Transfer.Robot,
                        i_Indicators  => v_Transfer.Indicators,
                        i_Oper_Types  => v_Transfer.Oper_Types,
                        i_Settings    => r_Setting);
      
        v_Job_Id := v_Transfer.Robot.Job_Id;
      else
        v_Job_Id := Hpd_Util.Get_Closest_Job_Id(i_Company_Id => i_Journal.Company_Id,
                                                i_Filial_Id  => i_Journal.Filial_Id,
                                                i_Staff_Id   => v_Transfer.Staff_Id,
                                                i_Period     => v_Transfer.Transfer_Begin);
      end if;
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Transfer.Page_Id,
                         i_Schedule_Id => v_Transfer.Schedule_Id);
    
      if v_Transfer.Vacation_Days_Limit is not null then
        Page_Vacation_Limit_Save(i_Company_Id => i_Journal.Company_Id,
                                 i_Filial_Id  => i_Journal.Filial_Id,
                                 i_Page_Id    => v_Transfer.Page_Id,
                                 i_Days_Limit => v_Transfer.Vacation_Days_Limit);
      else
        Page_Remove_Vacation_Limits(i_Company_Id => i_Journal.Company_Id,
                                    i_Filial_Id  => i_Journal.Filial_Id,
                                    i_Page_Id    => v_Transfer.Page_Id);
      end if;
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Transfer.Page_Id,
                          i_Job_Id      => v_Job_Id,
                          i_Currency_Id => v_Transfer.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Transfer.Indicators,
                          i_Oper_Types  => v_Transfer.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  
    if not i_Delay_Repairing then
      Journal_Repairing(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Save(i_Journal Hpd_Pref.Dismissal_Journal_Rt) is
    v_Dismissal Hpd_Pref.Dismissal_Rt;
    v_Page_Ids  Array_Number;
  begin
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Dismissals.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Dismissals(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Dismissal),
                                     i_Pages_Cnt        => i_Journal.Dismissals.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Dismissal,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple));
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Dismissals.Count);
  
    for i in 1 .. i_Journal.Dismissals.Count
    loop
      v_Dismissal := i_Journal.Dismissals(i);
      v_Page_Ids(i) := v_Dismissal.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Dismissal.Page_Id,
                        i_Staff_Id   => v_Dismissal.Staff_Id);
    
      z_Hpd_Dismissals.Save_One(i_Company_Id           => i_Journal.Company_Id,
                                i_Filial_Id            => i_Journal.Filial_Id,
                                i_Page_Id              => v_Dismissal.Page_Id,
                                i_Dismissal_Date       => v_Dismissal.Dismissal_Date,
                                i_Dismissal_Reason_Id  => v_Dismissal.Dismissal_Reason_Id,
                                i_Employment_Source_Id => v_Dismissal.Employment_Source_Id,
                                i_Based_On_Doc         => v_Dismissal.Based_On_Doc,
                                i_Note                 => v_Dismissal.Note);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Save(i_Journal Hpd_Pref.Wage_Change_Journal_Rt) is
    v_Wage_Change Hpd_Pref.Wage_Change_Rt;
    v_Page_Ids    Array_Number;
    v_User_Id     number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Wage_Change,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Wage_Change_Multiple));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Wage_Changes.Count);
  
    for i in 1 .. i_Journal.Wage_Changes.Count
    loop
      v_Wage_Change := i_Journal.Wage_Changes(i);
      v_Page_Ids(i) := v_Wage_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Wage_Change.Page_Id,
                        i_Staff_Id   => v_Wage_Change.Staff_Id);
    
      z_Hpd_Wage_Changes.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                  i_Filial_Id   => i_Journal.Filial_Id,
                                  i_Page_Id     => v_Wage_Change.Page_Id,
                                  i_Change_Date => v_Wage_Change.Change_Date);
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Wage_Change.Page_Id,
                          i_Job_Id      => Hpd_Util.Get_Closest_Job_Id(i_Company_Id => i_Journal.Company_Id,
                                                                       i_Filial_Id  => i_Journal.Filial_Id,
                                                                       i_Staff_Id   => v_Wage_Change.Staff_Id,
                                                                       i_Period     => v_Wage_Change.Change_Date),
                          i_Currency_Id => v_Wage_Change.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Wage_Change.Indicators,
                          i_Oper_Types  => v_Wage_Change.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Save(i_Journal Hpd_Pref.Rank_Change_Journal_Rt) is
    v_Rank_Change Hpd_Pref.Rank_Change_Rt;
    v_Page_Ids    Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Source_Table             => i_Journal.Source_Table,
                 i_Source_Id                => i_Journal.Source_Id,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Rank_Change,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Rank_Change_Multiple));
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Rank_Changes.Count);
  
    for i in 1 .. i_Journal.Rank_Changes.Count
    loop
      v_Rank_Change := i_Journal.Rank_Changes(i);
      v_Page_Ids(i) := v_Rank_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Rank_Change.Page_Id,
                        i_Staff_Id   => v_Rank_Change.Staff_Id);
    
      z_Hpd_Rank_Changes.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                  i_Filial_Id   => i_Journal.Filial_Id,
                                  i_Page_Id     => v_Rank_Change.Page_Id,
                                  i_Change_Date => v_Rank_Change.Change_Date,
                                  i_Rank_Id     => v_Rank_Change.Rank_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Save(i_Journal Hpd_Pref.Limit_Change_Journal_Rt) is
    r_Limit_Change Hpd_Vacation_Limit_Changes%rowtype;
    v_Page         Hpd_Pref.Page_Rt;
    v_Page_Ids     Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Limit_Change),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Limit_Change));
  
    r_Limit_Change.Company_Id  := i_Journal.Company_Id;
    r_Limit_Change.Filial_Id   := i_Journal.Filial_Id;
    r_Limit_Change.Journal_Id  := i_Journal.Journal_Id;
    r_Limit_Change.Division_Id := i_Journal.Division_Id;
    r_Limit_Change.Days_Limit  := i_Journal.Days_Limit;
    r_Limit_Change.Change_Date := i_Journal.Change_Date;
  
    z_Hpd_Vacation_Limit_Changes.Save_Row(r_Limit_Change);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Pages.Count);
  
    for i in 1 .. i_Journal.Pages.Count
    loop
      v_Page := i_Journal.Pages(i);
      v_Page_Ids(i) := v_Page.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Page.Page_Id,
                        i_Staff_Id   => v_Page.Staff_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Save(i_Journal Hpd_Pref.Schedule_Change_Journal_Rt) is
    r_Schedule_Change Hpd_Schedule_Changes%rowtype;
    v_Schedule_Change Hpd_Pref.Schedule_Change_Rt;
    v_Page_Ids        Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change));
  
    r_Schedule_Change.Company_Id  := i_Journal.Company_Id;
    r_Schedule_Change.Filial_Id   := i_Journal.Filial_Id;
    r_Schedule_Change.Journal_Id  := i_Journal.Journal_Id;
    r_Schedule_Change.Division_Id := i_Journal.Division_Id;
    r_Schedule_Change.Begin_Date  := i_Journal.Begin_Date;
    r_Schedule_Change.End_Date    := i_Journal.End_Date;
  
    z_Hpd_Schedule_Changes.Save_Row(r_Schedule_Change);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Schedule_Changes.Count);
  
    for i in 1 .. i_Journal.Schedule_Changes.Count
    loop
      v_Schedule_Change := i_Journal.Schedule_Changes(i);
      v_Page_Ids(i) := v_Schedule_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Schedule_Change.Page_Id,
                        i_Staff_Id   => v_Schedule_Change.Staff_Id);
    
      if v_Schedule_Change.Schedule_Id is null then
        Hpd_Error.Raise_049(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                 i_Filial_Id  => i_Journal.Filial_Id,
                                                 i_Staff_Id   => v_Schedule_Change.Staff_Id));
      end if;
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Schedule_Change.Page_Id,
                         i_Schedule_Id => v_Schedule_Change.Schedule_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  -- timeoff
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Timeoff_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Timeoff_Id number,
    i_Journal_Id number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Shas       Array_Varchar2
  ) is
    r_Timeoff Hpd_Journal_Timeoffs%rowtype;
    v_Exists  boolean := false;
  begin
    if z_Hpd_Journal_Timeoffs.Exist_Lock(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Timeoff_Id => i_Timeoff_Id,
                                         o_Row        => r_Timeoff) then
      if r_Timeoff.Journal_Id <> i_Journal_Id then
        Hpd_Error.Raise_032(i_Timeoff_Id => i_Timeoff_Id, i_Journal_Id => r_Timeoff.Journal_Id);
      end if;
    
      v_Exists := true;
    end if;
  
    r_Timeoff.Employee_Id := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                             i_Filial_Id => i_Filial_Id, --
                             i_Staff_Id => i_Staff_Id).Employee_Id;
    r_Timeoff.Staff_Id    := i_Staff_Id;
    r_Timeoff.Begin_Date  := i_Begin_Date;
    r_Timeoff.End_Date    := i_End_Date;
  
    if v_Exists then
      z_Hpd_Journal_Timeoffs.Update_Row(r_Timeoff);
    
      delete Hpd_Timeoff_Files q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Timeoff_Id = i_Timeoff_Id
         and q.Sha not member of i_Shas;
    else
      r_Timeoff.Company_Id := i_Company_Id;
      r_Timeoff.Filial_Id  := i_Filial_Id;
      r_Timeoff.Timeoff_Id := i_Timeoff_Id;
      r_Timeoff.Journal_Id := i_Journal_Id;
    
      z_Hpd_Journal_Timeoffs.Insert_Row(r_Timeoff);
    end if;
  
    for i in 1 .. i_Shas.Count
    loop
      z_Hpd_Timeoff_Files.Insert_Try(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Timeoff_Id => i_Timeoff_Id,
                                     i_Sha        => i_Shas(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Timeoffs_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Timeoff_Ids Array_Number
  ) is
  begin
    delete Hpd_Journal_Timeoffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id
       and q.Timeoff_Id not member of i_Timeoff_Ids;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Overtime_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number,
    i_Journal_Id  number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Overtime Hpd_Journal_Overtimes%rowtype;
    v_Exists   boolean := false;
  begin
    if z_Hpd_Journal_Overtimes.Exist_Lock(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Overtime_Id => i_Overtime_Id,
                                          o_Row         => r_Overtime) then
      if r_Overtime.Journal_Id <> i_Journal_Id then
        Hpd_Error.Raise_042(i_Overtime_Id => i_Overtime_Id, i_Journal_Id => i_Journal_Id);
      end if;
    
      v_Exists := true;
    end if;
  
    r_Overtime.Employee_Id := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                              i_Filial_Id => i_Filial_Id, --
                              i_Staff_Id => i_Staff_Id).Employee_Id;
    r_Overtime.Staff_Id    := i_Staff_Id;
    r_Overtime.Begin_Date  := i_Begin_Date;
    r_Overtime.End_Date    := i_End_Date;
  
    if v_Exists then
      z_Hpd_Journal_Overtimes.Update_Row(r_Overtime);
    else
      r_Overtime.Company_Id  := i_Company_Id;
      r_Overtime.Filial_Id   := i_Filial_Id;
      r_Overtime.Overtime_Id := i_Overtime_Id;
      r_Overtime.Journal_Id  := i_Journal_Id;
    
      z_Hpd_Journal_Overtimes.Insert_Row(r_Overtime);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Overtimes_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Overtime_Ids Array_Number
  ) is
  begin
    delete Hpd_Journal_Overtimes q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id
       and q.Overtime_Id not member of i_Overtime_Ids;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_Save(i_Journal Hpd_Pref.Sick_Leave_Journal_Rt) is
    v_Sick_Leave  Hpd_Pref.Sick_Leave_Rt;
    v_Timeoff_Ids Array_Number := Array_Number();
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave));
  
    for i in 1 .. i_Journal.Sick_Leaves.Count
    loop
      v_Sick_Leave := i_Journal.Sick_Leaves(i);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Sick_Leave.Timeoff_Id,
                           i_Staff_Id   => v_Sick_Leave.Staff_Id,
                           i_Begin_Date => v_Sick_Leave.Begin_Date,
                           i_End_Date   => v_Sick_Leave.End_Date,
                           i_Shas       => v_Sick_Leave.Shas);
    
      z_Hpd_Sick_Leaves.Save_One(i_Company_Id        => i_Journal.Company_Id,
                                 i_Filial_Id         => i_Journal.Filial_Id,
                                 i_Timeoff_Id        => v_Sick_Leave.Timeoff_Id,
                                 i_Reason_Id         => v_Sick_Leave.Reason_Id,
                                 i_Coefficient       => v_Sick_Leave.Coefficient,
                                 i_Sick_Leave_Number => v_Sick_Leave.Sick_Leave_Number);
    
      Fazo.Push(v_Timeoff_Ids, v_Sick_Leave.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_Save(i_Journal Hpd_Pref.Business_Trip_Journal_Rt) is
    v_Trip        Hpd_Pref.Business_Trip_Rt;
    v_Timeoff_Ids Array_Number := Array_Number();
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Business_Trip,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Business_Trip_Multiple));
  
    for i in 1 .. i_Journal.Business_Trips.Count
    loop
      v_Trip := i_Journal.Business_Trips(i);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Trip.Timeoff_Id,
                           i_Staff_Id   => v_Trip.Staff_Id,
                           i_Begin_Date => v_Trip.Begin_Date,
                           i_End_Date   => v_Trip.End_Date,
                           i_Shas       => v_Trip.Shas);
    
      z_Hpd_Business_Trips.Save_One(i_Company_Id => i_Journal.Company_Id,
                                    i_Filial_Id  => i_Journal.Filial_Id,
                                    i_Timeoff_Id => v_Trip.Timeoff_Id,
                                    i_Person_Id  => v_Trip.Person_Id,
                                    i_Reason_Id  => v_Trip.Reason_Id,
                                    i_Note       => v_Trip.Note);
    
      if v_Trip.Region_Ids.Count = 0 then
        Hpd_Error.Raise_077;
      end if;
    
      delete from Hpd_Business_Trip_Regions q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Timeoff_Id = v_Trip.Timeoff_Id;
    
      for i in 1 .. v_Trip.Region_Ids.Count
      loop
        z_Hpd_Business_Trip_Regions.Insert_Try(i_Company_Id => i_Journal.Company_Id,
                                               i_Filial_Id  => i_Journal.Filial_Id,
                                               i_Timeoff_Id => v_Trip.Timeoff_Id,
                                               i_Region_Id  => v_Trip.Region_Ids(i),
                                               i_Order_No   => i);
      end loop;
    
      Fazo.Push(v_Timeoff_Ids, v_Trip.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_Save(i_Journal Hpd_Pref.Vacation_Journal_Rt) is
    v_Vacation_Tk_Id number;
    v_Vacation       Hpd_Pref.Vacation_Rt;
    v_Timeoff_Ids    Array_Number := Array_Number();
  
    --------------------------------------------------
    Procedure Assert_Vacation_Time_Kind
    (
      i_Company_Id   number,
      i_Time_Kind_Id number
    ) is
      r_Time_Kind Htt_Time_Kinds%rowtype;
    begin
      if i_Time_Kind_Id = v_Vacation_Tk_Id then
        return;
      end if;
    
      r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Company_Id,
                                           i_Time_Kind_Id => i_Time_Kind_Id);
    
      if not Fazo.Equal(r_Time_Kind.Parent_Id, v_Vacation_Tk_Id) then
        Hpd_Error.Raise_052(r_Time_Kind.Name);
      end if;
    end;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Vacation),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Vacation));
  
    for i in 1 .. i_Journal.Vacations.Count
    loop
      v_Vacation := i_Journal.Vacations(i);
    
      v_Vacation.Time_Kind_Id := Nvl(v_Vacation.Time_Kind_Id, v_Vacation_Tk_Id);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Vacation.Timeoff_Id,
                           i_Staff_Id   => v_Vacation.Staff_Id,
                           i_Begin_Date => v_Vacation.Begin_Date,
                           i_End_Date   => v_Vacation.End_Date,
                           i_Shas       => v_Vacation.Shas);
    
      Assert_Vacation_Time_Kind(i_Company_Id   => i_Journal.Company_Id,
                                i_Time_Kind_Id => v_Vacation.Time_Kind_Id);
    
      z_Hpd_Vacations.Save_One(i_Company_Id   => i_Journal.Company_Id,
                               i_Filial_Id    => i_Journal.Filial_Id,
                               i_Timeoff_Id   => v_Vacation.Timeoff_Id,
                               i_Time_Kind_Id => v_Vacation.Time_Kind_Id);
    
      Fazo.Push(v_Timeoff_Ids, v_Vacation.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_Save(i_Journal Hpd_Pref.Overtime_Journal_Rt) is
    v_Overtime       Hpd_Pref.Overtime_Rt;
    v_Overtime_Staff Hpd_Pref.Overtime_Staff_Rt;
    v_Overtime_Ids   Array_Number := Array_Number();
    v_Month          date;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Overtime),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Overtime));
  
    -- save division to journal
    if i_Journal.Division_Id is not null then
      z_Hpd_Overtime_Journal_Divisions.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                                i_Filial_Id   => i_Journal.Filial_Id,
                                                i_Journal_Id  => i_Journal.Journal_Id,
                                                i_Division_Id => i_Journal.Division_Id);
    elsif z_Hpd_Overtime_Journal_Divisions.Exist_Lock(i_Company_Id => i_Journal.Company_Id,
                                                      i_Filial_Id  => i_Journal.Filial_Id,
                                                      i_Journal_Id => i_Journal.Journal_Id) then
      z_Hpd_Overtime_Journal_Divisions.Delete_One(i_Company_Id => i_Journal.Company_Id,
                                                  i_Filial_Id  => i_Journal.Filial_Id,
                                                  i_Journal_Id => i_Journal.Journal_Id);
    end if;
  
    for i in 1 .. i_Journal.Overtime_Staffs.Count
    loop
      v_Overtime_Staff := i_Journal.Overtime_Staffs(i);
      v_Month          := Trunc(v_Overtime_Staff.Month, 'mm');
    
      Journal_Overtime_Save(i_Company_Id  => i_Journal.Company_Id,
                            i_Filial_Id   => i_Journal.Filial_Id,
                            i_Journal_Id  => i_Journal.Journal_Id,
                            i_Overtime_Id => v_Overtime_Staff.Overtime_Id,
                            i_Staff_Id    => v_Overtime_Staff.Staff_Id,
                            i_Begin_Date  => v_Month,
                            i_End_Date    => Last_Day(v_Overtime_Staff.Month));
    
      delete from Hpd_Overtime_Days q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Overtime_Id = v_Overtime_Staff.Overtime_Id;
    
      for j in 1 .. v_Overtime_Staff.Overtimes.Count
      loop
        v_Overtime := v_Overtime_Staff.Overtimes(j);
      
        if Trunc(v_Overtime.Overtime_Date, 'MON') <> v_Month then
          Hpd_Error.Raise_050(i_Date  => v_Overtime.Overtime_Date,
                              i_Month => v_Overtime_Staff.Month);
        end if;
      
        z_Hpd_Overtime_Days.Insert_One(i_Company_Id       => i_Journal.Company_Id,
                                       i_Filial_Id        => i_Journal.Filial_Id,
                                       i_Staff_Id         => v_Overtime_Staff.Staff_Id,
                                       i_Overtime_Date    => v_Overtime.Overtime_Date,
                                       i_Overtime_Seconds => v_Overtime.Overtime_Seconds,
                                       i_Overtime_Id      => v_Overtime_Staff.Overtime_Id);
      end loop;
    
      Fazo.Push(v_Overtime_Ids, v_Overtime_Staff.Overtime_Id);
    end loop;
  
    Unnecessary_Overtimes_Delete(i_Company_Id   => i_Journal.Company_Id,
                                 i_Filial_Id    => i_Journal.Filial_Id,
                                 i_Journal_Id   => i_Journal.Journal_Id,
                                 i_Overtime_Ids => v_Overtime_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_Save(i_Journal Hpd_Pref.Timebook_Adjustment_Journal_Rt) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Adjustment          Hpd_Pref.Adjustment_Rt;
    v_Page_Ids            Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment));
  
    r_Timebook_Adjustment.Company_Id      := i_Journal.Company_Id;
    r_Timebook_Adjustment.Filial_Id       := i_Journal.Filial_Id;
    r_Timebook_Adjustment.Journal_Id      := i_Journal.Journal_Id;
    r_Timebook_Adjustment.Division_Id     := i_Journal.Division_Id;
    r_Timebook_Adjustment.Adjustment_Date := i_Journal.Adjustment_Date;
  
    z_Hpd_Journal_Timebook_Adjustments.Save_Row(r_Timebook_Adjustment);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Adjustments.Count);
  
    for i in 1 .. i_Journal.Adjustments.Count
    loop
      v_Adjustment := i_Journal.Adjustments(i);
    
      continue when v_Adjustment.Kinds.Count = 0;
    
      v_Page_Ids(i) := v_Adjustment.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Adjustment.Page_Id,
                        i_Staff_Id   => v_Adjustment.Staff_Id);
    
      delete from Hpd_Page_Adjustments q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Page_Id = v_Adjustment.Page_Id;
    
      for j in 1 .. v_Adjustment.Kinds.Count
      loop
        z_Hpd_Page_Adjustments.Save_One(i_Company_Id   => i_Journal.Company_Id,
                                        i_Filial_Id    => i_Journal.Filial_Id,
                                        i_Page_Id      => v_Adjustment.Page_Id,
                                        i_Kind         => v_Adjustment.Kinds(j).Kind,
                                        i_Free_Time    => v_Adjustment.Kinds(j).Free_Time,
                                        i_Overtime     => v_Adjustment.Kinds(j).Overtime,
                                        i_Turnout_Time => v_Adjustment.Kinds(j).Turnout_Time);
      end loop;
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
    r_Journal Hpd_Journals%rowtype;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'Y' then
      Hpd_Error.Raise_038(r_Journal.Journal_Number);
    end if;
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Staffs_Invalid(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => i_Journal_Id);
    end if;
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
       Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Auto_Robots_Invalid(i_Company_Id => r_Journal.Company_Id,
                          i_Filial_Id  => r_Journal.Filial_Id,
                          i_Journal_Id => r_Journal.Journal_Id);
    end if;
  
    if Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hpd_Core.Hiring_Cv_Contract_Delete(i_Company_Id => r_Journal.Company_Id,
                                         i_Filial_Id  => r_Journal.Filial_Id,
                                         i_Journal_Id => r_Journal.Journal_Id);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_070(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => Journal_Type_Name(i_Company_Id,
                                                                   r_Journal.Journal_Type_Id),
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    z_Hpd_Journals.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
       Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Journal_Repairing(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Journal_Id => i_Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
  begin
    Hpd_Core.Journal_Post(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Journal_Id   => i_Journal_Id,
                          i_Source_Table => i_Source_Table,
                          i_Source_Id    => i_Source_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  ) is
  begin
    Hpd_Core.Journal_Unpost(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Journal_Id   => i_Journal_Id,
                            i_Source_Table => i_Source_Table,
                            i_Source_Id    => i_Source_Id,
                            i_Repost       => i_Repost);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
  begin
    Hpd_Core.Timebook_Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Timebook_Id => i_Timebook_Id,
                                           i_Staff_Id    => i_Staff_Id,
                                           i_Begin_Date  => i_Begin_Date,
                                           i_End_Date    => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
  begin
    Hpd_Core.Perf_Lock_Interval_Insert(i_Company_Id    => i_Company_Id,
                                       i_Filial_Id     => i_Filial_Id,
                                       i_Staff_Plan_Id => i_Staff_Plan_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Begin_Date    => i_Begin_Date,
                                       i_End_Date      => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  ) is
  begin
    Hpd_Core.Sales_Bonus_Payment_Lock_Interval_Insert(i_Company_Id    => i_Company_Id,
                                                      i_Filial_Id     => i_Filial_Id,
                                                      i_Operation_Id  => i_Operation_Id,
                                                      i_Staff_Id      => i_Staff_Id,
                                                      i_Begin_Date    => i_Begin_Date,
                                                      i_End_Date      => i_End_Date,
                                                      i_Interval_Kind => i_Interval_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number
  ) is
  begin
    Hpd_Core.Lock_Interval_Delete(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Interval_Id => i_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Save(i_Contract Hpd_Pref.Cv_Contract_Rt) is
    r_Contract           Hpd_Cv_Contracts%rowtype;
    v_Contract_Item_Ids  Array_Number := Array_Number();
    v_Contract_File_Shas Array_Varchar2 := Array_Varchar2();
    v_Contract_Item      Hpd_Pref.Cv_Contract_Item_Rt;
    v_Contract_File      Hpd_Pref.Cv_Contract_File_Rt;
    v_Exists             boolean;
  begin
    if i_Contract.Access_To_Add_Item = 'N' and i_Contract.Items.Count = 0 then
      Hpd_Error.Raise_039(i_Contract.Contract_Id);
    end if;
  
    if z_Hpd_Cv_Contracts.Exist(i_Company_Id  => i_Contract.Company_Id,
                                i_Filial_Id   => i_Contract.Filial_Id,
                                i_Contract_Id => i_Contract.Contract_Id,
                                o_Row         => r_Contract) then
      if r_Contract.Posted = 'Y' then
        Hpd_Error.Raise_040(r_Contract.Contract_Id);
      end if;
    
      v_Exists := true;
    else
      r_Contract.Company_Id               := i_Contract.Company_Id;
      r_Contract.Filial_Id                := i_Contract.Filial_Id;
      r_Contract.Contract_Id              := i_Contract.Contract_Id;
      r_Contract.Contract_Employment_Kind := i_Contract.Contract_Employment_Kind;
    
      if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Staff_Member then
        r_Contract.Page_Id := i_Contract.Page_Id;
      end if;
    
      v_Exists := false;
    end if;
  
    r_Contract.Contract_Number    := i_Contract.Contract_Number;
    r_Contract.Division_Id        := i_Contract.Division_Id;
    r_Contract.Person_Id          := i_Contract.Person_Id;
    r_Contract.Begin_Date         := i_Contract.Begin_Date;
    r_Contract.End_Date           := i_Contract.End_Date;
    r_Contract.Contract_Kind      := i_Contract.Contract_Kind;
    r_Contract.Access_To_Add_Item := i_Contract.Access_To_Add_Item;
    r_Contract.Early_Closed_Date  := null;
    r_Contract.Early_Closed_Note  := null;
    r_Contract.Note               := i_Contract.Note;
    r_Contract.Posted             := 'N';
  
    if v_Exists then
      z_Hpd_Cv_Contracts.Update_Row(r_Contract);
    else
      if r_Contract.Contract_Number is null then
        r_Contract.Contract_Number := Md_Core.Gen_Number(i_Company_Id => i_Contract.Company_Id,
                                                         i_Filial_Id  => i_Contract.Filial_Id,
                                                         i_Table      => Zt.Hpd_Cv_Contracts,
                                                         i_Column     => z.Contract_Number);
      end if;
    
      z_Hpd_Cv_Contracts.Insert_Row(r_Contract);
    end if;
  
    v_Contract_Item_Ids.Extend(i_Contract.Items.Count);
  
    for i in 1 .. i_Contract.Items.Count
    loop
      v_Contract_Item := i_Contract.Items(i);
      v_Contract_Item_Ids(i) := v_Contract_Item.Contract_Item_Id;
    
      z_Hpd_Cv_Contract_Items.Save_One(i_Company_Id       => i_Contract.Company_Id,
                                       i_Filial_Id        => i_Contract.Filial_Id,
                                       i_Contract_Item_Id => v_Contract_Item.Contract_Item_Id,
                                       i_Contract_Id      => i_Contract.Contract_Id,
                                       i_Name             => v_Contract_Item.Name,
                                       i_Quantity         => v_Contract_Item.Quantity,
                                       i_Amount           => v_Contract_Item.Amount);
    
      z_Href_Cached_Contract_Item_Names.Insert_Try(i_Company_Id => i_Contract.Company_Id,
                                                   i_Name       => Lower(v_Contract_Item.Name));
    end loop;
  
    -- delete items
    delete from Hpd_Cv_Contract_Items q
     where q.Company_Id = i_Contract.Company_Id
       and q.Filial_Id = i_Contract.Filial_Id
       and q.Contract_Id = i_Contract.Contract_Id
       and q.Contract_Item_Id not member of v_Contract_Item_Ids;
  
    v_Contract_File_Shas.Extend(i_Contract.Files.Count);
  
    for i in 1 .. i_Contract.Files.Count
    loop
      v_Contract_File := i_Contract.Files(i);
      v_Contract_File_Shas(i) := v_Contract_File.File_Sha;
    
      z_Hpd_Cv_Contract_Files.Save_One(i_Company_Id  => i_Contract.Company_Id,
                                       i_Filial_Id   => i_Contract.Filial_Id,
                                       i_Contract_Id => i_Contract.Contract_Id,
                                       i_File_Sha    => v_Contract_File.File_Sha,
                                       i_Note        => v_Contract_File.Note);
    end loop;
  
    -- delete files
    delete from Hpd_Cv_Contract_Files q
     where q.Company_Id = i_Contract.Company_Id
       and q.Filial_Id = i_Contract.Filial_Id
       and q.Contract_Id = i_Contract.Contract_Id
       and q.File_Sha not member of v_Contract_File_Shas;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Post(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Journal_Post(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Unpost(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Journal_Unpost(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                 i_Filial_Id         => i_Filial_Id,
                                 i_Contract_Id       => i_Contract_Id,
                                 i_Early_Closed_Date => i_Early_Closed_Date,
                                 i_Early_Closed_Note => i_Early_Closed_Note);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Hiring_Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Journal_Id        => r_Page.Journal_Id,
                                        i_Early_Closed_Date => i_Early_Closed_Date,
                                        i_Early_Closed_Note => i_Early_Closed_Note);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Delete(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Journal_Delete(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
  begin
    Hpd_Core.Hiring_Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                      i_Filial_Id         => i_Filial_Id,
                                      i_Journal_Id        => i_Journal_Id,
                                      i_Early_Closed_Date => i_Early_Closed_Date,
                                      i_Early_Closed_Note => i_Early_Closed_Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Save
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Application_Id         number,
    i_Application_Type_Pcode varchar2
  ) is
    r_Row                 Hpd_Applications%rowtype;
    v_Application_Type_Id number;
  begin
    v_Application_Type_Id := Hpd_Util.Application_Type_Id(i_Company_Id => i_Company_Id,
                                                          i_Pcode      => i_Application_Type_Pcode);
  
    if z_Hpd_Applications.Exist_Lock(i_Company_Id     => i_Company_Id,
                                     i_Filial_Id      => i_Filial_Id,
                                     i_Application_Id => i_Application_Id,
                                     o_Row            => r_Row) then
      if r_Row.Status <> Hpd_Pref.c_Application_Status_New then
        Hpd_Error.Raise_056(i_Application_Number => r_Row.Application_Number,
                            i_Status             => r_Row.Status);
      end if;
    
      if r_Row.Application_Type_Id <> v_Application_Type_Id then
        Hpd_Error.Raise_071(i_Wrong_Application_Type    => Hpd_Util.Application_Type_Name(i_Company_Id          => i_Company_Id,
                                                                                          i_Application_Type_Id => v_Application_Type_Id),
                            i_Expected_Application_Type => Hpd_Util.Application_Type_Name(i_Company_Id          => i_Company_Id,
                                                                                          i_Application_Type_Id => r_Row.Application_Type_Id));
      end if;
    
      z_Hpd_Applications.Update_Row(r_Row);
    
      return;
    end if;
  
    r_Row.Company_Id          := i_Company_Id;
    r_Row.Filial_Id           := i_Filial_Id;
    r_Row.Application_Id      := i_Application_Id;
    r_Row.Application_Type_Id := v_Application_Type_Id;
    r_Row.Application_Number  := Md_Core.Gen_Number(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Table      => Zt.Hpd_Applications,
                                                    i_Column     => z.Application_Number);
    r_Row.Application_Date    := Trunc(sysdate);
    r_Row.Status              := Hpd_Pref.c_Application_Status_New;
  
    z_Hpd_Applications.Insert_Row(r_Row);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_Save(i_Create_Robot Hpd_Pref.Application_Create_Robot_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Create_Robot.Company_Id,
                     i_Filial_Id              => i_Create_Robot.Filial_Id,
                     i_Application_Id         => i_Create_Robot.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Create_Robot);
  
    z_Hpd_Application_Create_Robots.Save_One(i_Company_Id     => i_Create_Robot.Company_Id,
                                             i_Filial_Id      => i_Create_Robot.Filial_Id,
                                             i_Application_Id => i_Create_Robot.Application_Id,
                                             i_Name           => i_Create_Robot.Name,
                                             i_Opened_Date    => i_Create_Robot.Opened_Date,
                                             i_Division_Id    => i_Create_Robot.Division_Id,
                                             i_Job_Id         => i_Create_Robot.Job_Id,
                                             i_Quantity       => i_Create_Robot.Quantity,
                                             i_Note           => i_Create_Robot.Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_Save(i_Hiring Hpd_Pref.Application_Hiring_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Hiring.Company_Id,
                     i_Filial_Id              => i_Hiring.Filial_Id,
                     i_Application_Id         => i_Hiring.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Hiring);
  
    z_Hpd_Application_Hirings.Save_One(i_Company_Id      => i_Hiring.Company_Id,
                                       i_Filial_Id       => i_Hiring.Filial_Id,
                                       i_Application_Id  => i_Hiring.Application_Id,
                                       i_Hiring_Date     => i_Hiring.Hiring_Date,
                                       i_Robot_Id        => i_Hiring.Robot_Id,
                                       i_Note            => i_Hiring.Note,
                                       i_First_Name      => i_Hiring.First_Name,
                                       i_Last_Name       => i_Hiring.Last_Name,
                                       i_Middle_Name     => i_Hiring.Middle_Name,
                                       i_Birthday        => i_Hiring.Birthday,
                                       i_Gender          => i_Hiring.Gender,
                                       i_Phone           => i_Hiring.Phone,
                                       i_Email           => i_Hiring.Email,
                                       i_Photo_Sha       => i_Hiring.Photo_Sha,
                                       i_Address         => i_Hiring.Address,
                                       i_Legal_Address   => i_Hiring.Legal_Address,
                                       i_Region_Id       => i_Hiring.Region_Id,
                                       i_Passport_Series => i_Hiring.Passport_Series,
                                       i_Passport_Number => i_Hiring.Passport_Number,
                                       i_Npin            => i_Hiring.Npin,
                                       i_Iapa            => i_Hiring.Iapa,
                                       i_Employment_Type => i_Hiring.Employment_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_Save
  (
    i_Application_Type varchar2,
    i_Transfer         Hpd_Pref.Application_Transfer_Rt
  ) is
    v_Transfer             Hpd_Pref.Application_Transfer_Unit_Rt;
    v_Application_Unit_Ids Array_Number := Array_Number();
  begin
    Application_Save(i_Company_Id             => i_Transfer.Company_Id,
                     i_Filial_Id              => i_Transfer.Filial_Id,
                     i_Application_Id         => i_Transfer.Application_Id,
                     i_Application_Type_Pcode => i_Application_Type);
  
    if i_Application_Type = Hpd_Pref.c_Pcode_Application_Type_Transfer and
       i_Transfer.Transfer_Units.Count <> 1 then
      Hpd_Error.Raise_080(Hpd_Util.Application_Type_Name(i_Company_Id          => i_Transfer.Company_Id,
                                                         i_Application_Type_Id => i_Application_Type));
    end if;
  
    v_Application_Unit_Ids.Extend(i_Transfer.Transfer_Units.Count);
  
    for i in 1 .. i_Transfer.Transfer_Units.Count
    loop
      v_Transfer := i_Transfer.Transfer_Units(i);
    
      z_Hpd_Application_Transfers.Save_One(i_Company_Id          => i_Transfer.Company_Id,
                                           i_Filial_Id           => i_Transfer.Filial_Id,
                                           i_Application_Unit_Id => v_Transfer.Application_Unit_Id,
                                           i_Application_Id      => i_Transfer.Application_Id,
                                           i_Staff_Id            => v_Transfer.Staff_Id,
                                           i_Transfer_Begin      => v_Transfer.Transfer_Begin,
                                           i_Robot_Id            => v_Transfer.Robot_Id,
                                           i_Note                => v_Transfer.Note);
    
      v_Application_Unit_Ids(i) := v_Transfer.Application_Unit_Id;
    end loop;
  
    delete from Hpd_Application_Transfers t
     where t.Company_Id = i_Transfer.Company_Id
       and t.Filial_Id = i_Transfer.Filial_Id
       and t.Application_Id = i_Transfer.Application_Id
       and t.Application_Unit_Id not member of v_Application_Unit_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_Save(i_Dismissal Hpd_Pref.Application_Dismissal_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Dismissal.Company_Id,
                     i_Filial_Id              => i_Dismissal.Filial_Id,
                     i_Application_Id         => i_Dismissal.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Dismissal);
  
    z_Hpd_Application_Dismissals.Save_One(i_Company_Id          => i_Dismissal.Company_Id,
                                          i_Filial_Id           => i_Dismissal.Filial_Id,
                                          i_Application_Id      => i_Dismissal.Application_Id,
                                          i_Staff_Id            => i_Dismissal.Staff_Id,
                                          i_Dismissal_Date      => i_Dismissal.Dismissal_Date,
                                          i_Dismissal_Reason_Id => i_Dismissal.Dismissal_Reason_Id,
                                          i_Note                => i_Dismissal.Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_New then
      Hpd_Error.Raise_055(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Delete_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_Waiting then
      Hpd_Error.Raise_058(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_New));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_New),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_New,
        Hpd_Pref.c_Application_Status_Approved,
        Hpd_Pref.c_Application_Status_Canceled) then
      Hpd_Error.Raise_059(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    if r_Application.Application_Type_Id =
       Hpd_Util.Application_Type_Id(i_Company_Id => i_Company_Id,
                                    i_Pcode      => Hpd_Pref.c_Pcode_Application_Type_Transfer_Multiple) then
      declare
        v_Count number;
      begin
        select count(1)
          into v_Count
          from Hpd_Application_Transfers t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id;
      
        if v_Count < 1 then
          Hpd_Error.Raise_079(i_Application_Number => r_Application.Application_Number);
        end if;
      end;
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Waiting));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    if r_Application.Status in
       (Hpd_Pref.c_Application_Status_New, Hpd_Pref.c_Application_Status_Canceled) then
      v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
    else
      v_Grants                 := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
      r_Application.Created_By := null;
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Waiting),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_Waiting, Hpd_Pref.c_Application_Status_In_Progress) then
      Hpd_Error.Raise_060(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Approved));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr);
  
    if r_Application.Status = Hpd_Pref.c_Application_Status_Waiting then
      Fazo.Push(v_Grants, v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Approved),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_In_Progress
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_Approved, Hpd_Pref.c_Application_Status_Completed) then
      Hpd_Error.Raise_061(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_In_Progress));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    if r_Application.Status = Hpd_Pref.c_Application_Status_Approved then
      v_Grants                 := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr);
      r_Application.Created_By := null;
    else
      v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_In_Progress),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Completed
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_062(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    if Hpd_Util.Application_Has_Result(i_Company_Id     => i_Company_Id,
                                       i_Filial_Id      => i_Filial_Id,
                                       i_Application_Id => i_Application_Id) <> 'Y' then
      Hpd_Error.Raise_065(r_Application.Application_Number);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Completed));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Completed),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Closing_Note   varchar2
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_Waiting then
      Hpd_Error.Raise_063(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Canceled),
                                  i_Closing_Note   => Option_Varchar2(i_Closing_Note));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Canceled),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Robot
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Robot_Id       number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Application_Robots.Insert_One(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Application_Id => i_Application_Id,
                                        i_Robot_Id       => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Employee
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Employee_Id    number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Application_Hirings.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Application_Id => i_Application_Id,
                                         i_Employee_Id    => Option_Number(i_Employee_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Journal
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Journal_Id     number
  ) is
    r_Application       Hpd_Applications%rowtype;
    r_Journal           Hpd_Journals%rowtype;
    v_Application_Pcode varchar2(50);
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Journal_Id => i_Journal_Id);
  
    if z_Hpd_Application_Journals.Exist_Lock(i_Company_Id     => i_Company_Id,
                                             i_Filial_Id      => i_Filial_Id,
                                             i_Application_Id => i_Application_Id) then
      Hpd_Error.Raise_067(i_Application_Number => r_Application.Application_Number,
                          i_Journal_Number     => r_Journal.Journal_Number);
    end if;
  
    v_Application_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, --
                           i_Application_Type_Id => r_Application.Application_Type_Id).Pcode;
  
    -- TODO: assert: journal_type matches application_type
  
    if v_Application_Pcode = Hpd_Pref.c_Pcode_Application_Type_Hiring then
      declare
        v_Application_Employee_Name varchar2(1000);
        v_Journal_Employee_Name     varchar2(1000);
        v_Dummy                     number;
      begin
        select 1
          into v_Dummy
          from Hpd_Journal_Employees t
          join Hpd_Application_Hirings q
            on q.Company_Id = t.Company_Id
           and q.Filial_Id = t.Filial_Id
           and q.Application_Id = i_Application_Id
           and q.Employee_Id = t.Employee_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Journal_Id = i_Journal_Id
           and exists
         (select 1
                  from Hpd_Journals k
                 where k.Company_Id = t.Company_Id
                   and k.Filial_Id = t.Filial_Id
                   and k.Journal_Id = t.Journal_Id
                   and exists (select 1
                          from Hpd_Journal_Types h
                         where h.Company_Id = k.Company_Id
                           and h.Journal_Type_Id = k.Journal_Type_Id
                           and h.Pcode = Hpd_Pref.c_Pcode_Journal_Type_Hiring))
           and Rownum = 1;
      exception
        when No_Data_Found then
          select (select q.Name
                    from Mr_Natural_Persons q
                   where q.Company_Id = t.Company_Id
                     and q.Person_Id = t.Employee_Id)
            into v_Application_Employee_Name
            from Hpd_Application_Hirings t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Application_Id = i_Application_Id;
        
          select (select q.Name
                    from Mr_Natural_Persons q
                   where q.Company_Id = t.Company_Id
                     and q.Person_Id = t.Employee_Id)
            into v_Journal_Employee_Name
            from Hpd_Journal_Employees t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Journal_Id = r_Journal.Journal_Id
             and Rownum = 1;
        
          Hpd_Error.Raise_066(i_Application_Number        => r_Application.Application_Number,
                              i_Journal_Number            => r_Journal.Journal_Number,
                              i_Journal_Employee_Name     => v_Journal_Employee_Name,
                              i_Application_Employee_Name => v_Application_Employee_Name);
      end;
    end if;
  
    z_Hpd_Application_Journals.Insert_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Application_Id => i_Application_Id,
                                          i_Journal_Id     => i_Journal_Id);
  end;

end Hpd_Api;
/

create or replace package Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache;
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  );
end Hpd_Core;
/
create or replace package body Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Staffs p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Staffs p
        (p.Company_Id, p.Filial_Id, p.Staff_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Robots p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Robot_Id = i_Robot_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Robots p
        (p.Company_Id, p.Filial_Id, p.Robot_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Robot_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  ) is
    r_Setting Hrm_Settings%rowtype;
    v_Robot   Hrm_Pref.Robot_Rt;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    Update_Insert_Valid_Auto_Robot(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot.Robot_Id,
                                   i_Journal_Id => i_Journal_Id,
                                   i_Page_Id    => i_Page_Id);
  
    Hrm_Util.Robot_New(o_Robot                    => v_Robot,
                       i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Robot_Id                 => i_Robot.Robot_Id,
                       i_Name                     => Hrm_Util.Robot_Name(i_Company_Id  => i_Company_Id,
                                                                         i_Filial_Id   => i_Filial_Id,
                                                                         i_Robot_Id    => i_Robot.Robot_Id,
                                                                         i_Division_Id => i_Robot.Division_Id,
                                                                         i_Job_Id      => i_Robot.Job_Id,
                                                                         i_Rank_Id     => i_Robot.Rank_Id),
                       i_Code                     => null,
                       i_Robot_Group_Id           => null,
                       i_Division_Id              => i_Robot.Division_Id,
                       i_Job_Id                   => i_Robot.Job_Id,
                       i_Org_Unit_Id              => i_Robot.Org_Unit_Id,
                       i_State                    => 'A',
                       i_Opened_Date              => i_Open_Date,
                       i_Closed_Date              => i_Close_Date,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Rank_Id                  => i_Robot.Rank_Id,
                       i_Vacation_Days_Limit      => i_Days_Limit,
                       i_Labor_Function_Id        => null,
                       i_Description              => null,
                       i_Hiring_Condition         => null,
                       i_Contractual_Wage         => case
                                                       when i_Robot.Wage_Scale_Id is not null then
                                                        'N'
                                                       else
                                                        'Y'
                                                     end,
                       i_Position_Employment_Kind => case
                                                       when i_Robot.Employment_Type =
                                                            Hpd_Pref.c_Employment_Type_Contractor then
                                                        Hrm_Pref.c_Position_Employment_Contractor
                                                       else
                                                        Hrm_Pref.c_Position_Employment_Staff
                                                     end,
                       i_Wage_Scale_Id            => i_Robot.Wage_Scale_Id,
                       i_Access_Hidden_Salary     => 'N');
    v_Robot.Indicators := i_Indicators;
    v_Robot.Oper_Types := i_Oper_Types;
  
    Hrm_Api.Robot_Save(v_Robot,
                       i_Self => z_Hpd_Journal_Pages.Lock_Load(i_Company_Id => i_Company_Id, --
                                 i_Filial_Id => i_Filial_Id, --
                                 i_Page_Id => i_Page_Id).Employee_Id = Md_Env.User_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Robot_Id
                from Hpd_Auto_Created_Robots p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Journal_Id = i_Journal_Id
                 and p.Valid = 'N')
    loop
      Hrm_Api.Robot_Delete(i_Company_Id => r.Company_Id,
                           i_Filial_Id  => r.Filial_Id,
                           i_Robot_Id   => r.Robot_Id);
    end loop;
  
    delete Hpd_Auto_Created_Robots;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'A' then
      Hpd_Error.Raise_001(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => i_Staff_Id));
    end if;
  
    z_Href_Staffs.Delete_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  ) is
    r_Staff     Href_Staffs%rowtype;
    r_Robot     Mrf_Robots%rowtype;
    r_Hrm_Robot Hrm_Robots%rowtype;
    r_Employee  Mhr_Employees%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Employee_Id => r_Staff.Employee_Id);
  
    z_Href_Staffs.Update_One(i_Company_Id      => i_Company_Id,
                             i_Filial_Id       => i_Filial_Id,
                             i_Staff_Id        => i_Staff_Id,
                             i_Robot_Id        => Option_Number(r_Robot.Robot_Id),
                             i_Division_Id     => Option_Number(r_Robot.Division_Id),
                             i_Job_Id          => Option_Number(r_Robot.Job_Id),
                             i_Org_Unit_Id     => Option_Number(r_Hrm_Robot.Org_Unit_Id),
                             i_Fte             => Option_Number(i_Fte),
                             i_Fte_Id          => Option_Number(i_Fte_Id),
                             i_Rank_Id         => Option_Number(i_Rank_Id),
                             i_Schedule_Id     => Option_Number(i_Schedule_Id),
                             i_Employment_Type => Option_Varchar2(i_Employment_Type));
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and
       not (Fazo.Equal(r_Employee.Division_Id, r_Robot.Division_Id) and
        Fazo.Equal(r_Employee.Job_Id, r_Robot.Job_Id) and --
        Fazo.Equal(r_Employee.Rank_Id, i_Rank_Id)) --
     then
      Href_Api.Employee_Update(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Employee_Id => r_Staff.Employee_Id,
                               i_Division_Id => r_Robot.Division_Id,
                               i_Job_Id      => r_Robot.Job_Id,
                               i_Rank_Id     => i_Rank_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) is
    v_Dismissal_Date       date;
    v_Staff_Id             number;
    v_Intersected_Staff_Id number;
    v_Intersection_Date    date;
  begin
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                 and q.State = 'A'
               order by q.Hiring_Date)
    loop
      if v_Dismissal_Date is not null and r.Hiring_Date <= v_Dismissal_Date then
        v_Intersected_Staff_Id := r.Staff_Id;
        v_Intersection_Date    := Least(Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date),
                                        v_Dismissal_Date);
        exit;
      end if;
      v_Staff_Id       := r.Staff_Id;
      v_Dismissal_Date := Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date);
    end loop;
  
    if v_Intersected_Staff_Id is not null then
      Hpd_Error.Raise_002(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => v_Staff_Id),
                          i_Intersection_Date => v_Intersection_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    r_Robot        Hpd_Trans_Robots%rowtype;
    r_Rank         Hpd_Trans_Ranks%rowtype;
    r_Schedule     Hpd_Trans_Schedules%rowtype;
    v_Date         date := Trunc(sysdate);
    v_Desired_Date date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'P' then
      return;
    end if;
  
    v_Desired_Date := Greatest(r_Staff.Hiring_Date,
                               Least(v_Date, Nvl(r_Staff.Dismissal_Date, v_Date)));
  
    r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Period     => v_Desired_Date);
  
    r_Rank := Hpd_Util.Closest_Rank(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Period     => v_Desired_Date);
  
    r_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Period     => v_Desired_Date);
  
    Staff_Update(i_Company_Id      => i_Company_Id,
                 i_Filial_Id       => i_Filial_Id,
                 i_Staff_Id        => i_Staff_Id,
                 i_Robot_Id        => r_Robot.Robot_Id,
                 i_Fte             => r_Robot.Fte,
                 i_Fte_Id          => r_Robot.Fte_Id,
                 i_Rank_Id         => r_Rank.Rank_Id,
                 i_Schedule_Id     => r_Schedule.Schedule_Id,
                 i_Employment_Type => r_Robot.Employment_Type);
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and --
       r_Staff.Dismissal_Date < v_Date then
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = r_Staff.Employee_Id)
      loop
        Htt_Core.Location_Remove_Person(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Location_Id => r.Location_Id,
                                        i_Person_Id   => r.Person_Id);
      end loop;
    
      if z_Md_User_Filials.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_User_Id    => r_Staff.Employee_Id,
                                      i_Filial_Id  => i_Filial_Id) then
        Md_Api.User_Remove_Filial(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => r_Staff.Employee_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Remove_Roles => false);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for St in (select *
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date - 1)
                  order by q.Hiring_Date)
      loop
        Staff_Refresh_Cache(i_Company_Id => St.Company_Id,
                            i_Filial_Id  => St.Filial_Id,
                            i_Staff_Id   => St.Staff_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Staff_Refresh_Cache is
  begin
    for r in (select q.*
                from Hpd_Journal_Page_Cache q)
    loop
      Staff_Refresh_Cache(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Person_Locations
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Employee_Id
                from Hpd_Journal_Page_Cache p
               group by p.Company_Id, p.Filial_Id, p.Employee_Id)
    loop
      Htt_Core.Person_Sync_Locations(i_Company_Id => r.Company_Id,
                                     i_Filial_Id  => r.Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Staff_Id
                from Hpd_Journal_Page_Cache p)
    loop
      Hrm_Core.Sync_Division_Managers(i_Company_Id => r.Company_Id,
                                      i_Filial_Id  => r.Filial_Id,
                                      i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissed_To_Candidate
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.*, Ds.Employment_Source_Id
                from Hpd_Journal_Page_Cache p
                join Hpd_Dismissal_Transactions Dt
                  on Dt.Company_Id = p.Company_Id
                 and Dt.Filial_Id = p.Filial_Id
                 and Dt.Staff_Id = p.Staff_Id
                join Hpd_Dismissals Ds
                  on Ds.Company_Id = Dt.Company_Id
                 and Ds.Filial_Id = Dt.Filial_Id
                 and Ds.Page_Id = Dt.Page_Id)
    loop
      Href_Core.Dismissed_Candidate_Save(i_Company_Id           => r.Company_Id,
                                         i_Filial_Id            => r.Filial_Id,
                                         i_Staff_Id             => r.Staff_Id,
                                         i_Employment_Source_Id => r.Employment_Source_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Journal_Staff_Refresh_Cache;
    end if;
  
    Sync_Person_Locations(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Sync_Division_Managers(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Dismissed_To_Candidate(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    delete Hpd_Journal_Page_Cache;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fill_Journal_Staff_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    insert into Hpd_Journal_Page_Cache
      (Company_Id, Filial_Id, Staff_Id, Employee_Id)
      select p.Company_Id, p.Filial_Id, p.Staff_Id, p.Employee_Id
        from Hpd_Journal_Pages p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Journal_Id = i_Journal_Id
         and not exists (select *
                from Hpd_Journal_Page_Cache q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache is
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Staff_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Robot_Person_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Sync_Division_Managers(Cmp.Company_Id);
      
        Htt_Core.Person_Sync_Locations(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Turnover_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Days_Kind  varchar2,
    i_Days_Count number
  ) is
    v_Planned_Days number;
    v_Used_Days    number := 0;
    v_Periods      Array_Date;
  
    --------------------------------------------------
    Procedure Insert_Turnover is
      g Hpd_Vacation_Turnover%rowtype;
    begin
      for r in (select *
                  from (select *
                          from Hpd_Vacation_Turnover t
                         where t.Company_Id = i_Company_Id
                           and t.Filial_Id = i_Filial_Id
                           and t.Staff_Id = i_Staff_Id
                           and t.Period < i_Begin_Date
                           and t.Period >= Trunc(i_Begin_Date, 'yyyy')
                         order by t.Period desc)
                 where Rownum = 1)
      loop
        g              := r;
        g.Period       := i_Begin_Date;
        g.Planned_Days := Nvl(v_Planned_Days, g.Planned_Days);
        g.Used_Days    := g.Used_Days + v_Used_Days;
      
        z_Hpd_Vacation_Turnover.Insert_Row(g);
        return;
      end loop;
    
      g.Company_Id   := i_Company_Id;
      g.Filial_Id    := i_Filial_Id;
      g.Staff_Id     := i_Staff_Id;
      g.Period       := i_Begin_Date;
      g.Planned_Days := Coalesce(v_Planned_Days,
                                 Hpd_Util.Get_Closest_Vacation_Days_Limit(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id,
                                                                          i_Staff_Id   => i_Staff_Id,
                                                                          i_Period     => i_Begin_Date),
                                 0);
      g.Used_Days    := v_Used_Days;
    
      z_Hpd_Vacation_Turnover.Insert_Row(g);
    end;
  begin
    case i_Days_Kind
      when Hpd_Pref.c_Vacation_Turnover_Planned_Days then
        v_Planned_Days := i_Days_Count;
      when Hpd_Pref.c_Vacation_Turnover_Used_Days then
        v_Used_Days := i_Days_Count;
      else
        Hpd_Error.Raise_003;
    end case;
  
    update Hpd_Vacation_Turnover Lt
       set Lt.Planned_Days = Nvl(v_Planned_Days, Lt.Planned_Days),
           Lt.Used_Days    = Lt.Used_Days + v_Used_Days
     where Lt.Company_Id = i_Company_Id
       and Lt.Filial_Id = i_Filial_Id
       and Lt.Staff_Id = i_Staff_Id
       and Lt.Period >= i_Begin_Date
       and (i_End_Date is null or Lt.Period <= i_End_Date)
    returning Lt.Period bulk collect into v_Periods;
  
    if i_Begin_Date not member of v_Periods then
      Insert_Turnover;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Default_Calendar_Id number;
    v_Vacation_Tk_Id      number;
    v_Official_Days_Cnt   number;
    v_Vacation_Days_Cnt   number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Days_Cnt := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Calendar_Id => v_Default_Calendar_Id,
                                                             i_Begin_Date  => i_Begin_Date,
                                                             i_End_Date    => i_End_Date);
  
    select count(*)
      into v_Vacation_Days_Cnt
      from Hpd_Timeoff_Days p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timeoff_Date between i_Begin_Date and i_End_Date
       and p.Time_Kind_Id = v_Vacation_Tk_Id
       and p.Turnout_Locked = 'N';
  
    return Greatest(v_Vacation_Days_Cnt - v_Official_Days_Cnt, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Min_Cloned date;
  
    --------------------------------------------------
    Function Limit_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Agreements p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
         and p.Period < i_Start_Date
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Limit_Exists then
      return;
    end if;
  
    select Nvl(min(q.Period), Href_Pref.c_Max_Date)
      into v_Min_Cloned
      from Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    for r in (select p.*
                from Hpd_Journal_Timeoffs p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Begin_Date >= i_Start_Date
                 and p.Begin_Date < v_Min_Cloned
                 and exists (select *
                        from Hpd_Vacations q
                       where q.Company_Id = p.Company_Id
                         and q.Filial_Id = p.Filial_Id
                         and q.Timeoff_Id = p.Timeoff_Id))
    loop
      Spend_Vacation_Days(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id,
                          i_Begin_Date => r.Begin_Date,
                          i_End_Date   => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Vacation_Turnovers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Min_Date   date;
    v_Days_Count number;
  begin
    select min(q.Period)
      into v_Min_Date
      from Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    delete Hpd_Vacation_Turnover p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Period < Nvl(v_Min_Date, Href_Pref.c_Max_Date);
  
    if sql%rowcount > 0 and v_Min_Date is not null then
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => Trunc(v_Min_Date, 'yyyy'),
                                         i_End_Date   => v_Min_Date - 1);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Min_Date,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Min_Date),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => -v_Days_Count);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Vacation_Turnover
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Staff_Name Mr_Natural_Persons.Name%type;
    v_Period     date;
    v_Planned    number;
    v_Used       number;
  begin
    v_Staff_Name := Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
  
    select Qr.Period, Qr.Planned_Days, Qr.Used_Days
      into v_Period, v_Planned, v_Used
      from (select *
              from Hpd_Vacation_Turnover p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Staff_Id = i_Staff_Id
               and p.Free_Days < 0
             order by p.Period) Qr
     where Rownum = 1;
  
    Hpd_Error.Raise_004(i_Staff_Name    => v_Staff_Name,
                        i_Exceed_Date   => v_Period,
                        i_Exceed_Amount => v_Used - v_Planned);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Clone
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date
  ) is
  begin
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  
    insert into Hpd_Cloned_Agreements
      (Company_Id, Filial_Id, Staff_Id, Trans_Type, Period, Trans_Id, Action)
      select q.Company_Id, q.Filial_Id, q.Staff_Id, q.Trans_Type, q.Period, q.Trans_Id, q.Action
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period >= i_Begin_Date;
  
    delete Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Period >= i_Begin_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) is
    c_Format constant varchar2(20) := 'yyyymmdd';
    v_Start          date := i_Start_Date;
    f_Date_Set       Fazo.Boolean_Code_Aat;
    v_Key            varchar2(100);
    r_Trans          Hpd_Transactions%rowtype;
    r_Last_Trans     Hpd_Transactions%rowtype;
    v_Dismissal_Date date;
  begin
    f_Date_Set(to_char(v_Start, c_Format)) := true;
  
    for r in (select q.Begin_Date, q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.Begin_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.Begin_Date, c_Format)) := true;
    
      if r.End_Date is not null then
        f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
      end if;
    end loop;
  
    for r in (select q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.End_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
    end loop;
  
    for r in (select q.Dismissal_Date
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted)
    loop
      if v_Dismissal_Date is not null then
        Hpd_Error.Raise_005(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_First_Dismissal  => v_Dismissal_Date,
                            i_Second_Dismissal => r.Dismissal_Date);
      end if;
    
      f_Date_Set(to_char(r.Dismissal_Date, c_Format)) := true;
      v_Dismissal_Date := r.Dismissal_Date;
    end loop;
  
    Agreement_Clone(i_Company_Id => i_Company_Id, --
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type,
                    i_Begin_Date => v_Start);
  
    v_Key := f_Date_Set.First;
  
    r_Last_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Trans_Type => i_Trans_Type,
                                                      i_Period     => to_date(v_Key, c_Format) - 1);
    while v_Key is not null
    loop
      v_Start := to_date(v_Key, c_Format);
    
      if v_Start = v_Dismissal_Date then
        if r_Last_Trans.Trans_Id is not null then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => null,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Stop);
        end if;
      
        exit;
      end if;
    
      r_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => v_Start);
    
      if r_Trans.Trans_Id is not null then
        if not Fazo.Equal(r_Trans.Trans_Id, r_Last_Trans.Trans_Id) then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => r_Trans.Trans_Id,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Continue);
        end if;
      
        r_Last_Trans := r_Trans;
      end if;
    
      v_Key := f_Date_Set.Next(v_Key);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Robot_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    r_Robot          Hpd_Trans_Robots%rowtype;
    v_Last_Trans_Id  number;
    v_Robot_Trans_Id number;
    v_Last_Action    varchar2(1);
  begin
    -- clear robot transactions
    for r in (select q.Trans_Id, q.Robot_Id
                from Hrm_Robot_Transactions q
                join Hpd_Robot_Trans_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Trans_Id = w.Robot_Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and w.Staff_Id = i_Staff_Id
                 and q.Trans_Date >= i_Start_Date)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    Hpd_Util.Closest_Trans_Info(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                i_Period     => i_Start_Date - 1,
                                o_Trans_Id   => v_Last_Trans_Id,
                                o_Action     => v_Last_Action);
  
    if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
      r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Last_Trans_Id);
    end if;
  
    for r in (select *
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Robot
                 and q.Period >= i_Start_Date
               order by q.Period)
    loop
      if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Robot_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Robot_Id    => r_Robot.Robot_Id,
                                                    i_Occupy_Date => r.Period,
                                                    i_Fte         => r_Robot.Fte,
                                                    i_Tag         => v_Last_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => r.Trans_Id);
      
        v_Robot_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Robot_Id    => r_Robot.Robot_Id,
                                                  i_Occupy_Date => r.Period,
                                                  i_Fte         => r_Robot.Fte,
                                                  i_Tag         => r.Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      v_Last_Trans_Id := r.Trans_Id;
      v_Last_Action   := r.Action;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Schedule_Agreements
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Schedule_Id number;
    v_Interval    Hpd_Pref.Transaction_Part_Rt;
  begin
    for i in 1 .. i_Changed_Intervals.Count
    loop
      v_Interval := i_Changed_Intervals(i);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Interval.Part_Begin);
    
      Htt_Core.Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Schedule_Id => v_Schedule_Id,
                                     i_Begin_Date  => v_Interval.Part_Begin,
                                     i_End_Date    => v_Interval.Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Vacation_Limit_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Weighted_Plan_Sum number;
    v_Period_Plan       number := 0;
    v_Year_Begin        date;
    v_Year_End          date;
  begin
    for r in (select p.Days_Limit,
                     Greatest(q.Period, Trunc(i_Start_Date, 'yyyy')) Period_Begin,
                     Lead(q.Period) Over(order by q.Period) - 1 Period_End
                from Hpd_Agreements q
                join Hpd_Trans_Vacation_Limits p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Trans_Id = q.Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                 and q.Action = Hpd_Pref.c_Transaction_Action_Continue
                 and (q.Period >= Trunc(i_Start_Date, 'yyyy') or
                     q.Period = (select max(k.Period)
                                    from Hpd_Agreements k
                                   where k.Company_Id = i_Company_Id
                                     and k.Filial_Id = i_Filial_Id
                                     and k.Staff_Id = i_Staff_Id
                                     and k.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                                     and k.Period <= Trunc(i_Start_Date, 'yyyy')))
               order by q.Period)
    loop
      v_Year_Begin  := Trunc(r.Period_Begin, 'yyyy');
      v_Year_End    := Htt_Util.Year_Last_Day(r.Period_Begin);
      v_Period_Plan := r.Days_Limit * (v_Year_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := case
                               when r.Period_Begin <> v_Year_Begin then
                                Nvl(v_Weighted_Plan_Sum, r.Days_Limit * (r.Period_Begin - v_Year_Begin))
                               else
                                0
                             end;
    
      while Trunc(r.Period_Begin, 'yyyy') <> Trunc(r.Period_End, 'yyyy') or r.Period_End is null
      loop
        Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => r.Period_Begin,
                                   i_End_Date   => v_Year_End,
                                   i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                   i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                   (v_Year_End - v_Year_Begin + 1));
      
        r.Period_Begin      := v_Year_End + 1;
        v_Year_Begin        := Trunc(r.Period_Begin, 'yyyy');
        v_Year_End          := Htt_Util.Year_Last_Day(r.Period_Begin);
        v_Weighted_Plan_Sum := 0;
        v_Period_Plan       := r.Days_Limit * (v_Year_End - v_Year_Begin + 1);
      
        exit when r.Period_End is null;
      end loop;
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => r.Period_Begin,
                                 i_End_Date   => r.Period_End,
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                 i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                 (v_Year_End - v_Year_Begin + 1));
    
      v_Period_Plan := r.Days_Limit * (r.Period_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := v_Weighted_Plan_Sum + v_Period_Plan;
    end loop;
  
    Delete_Vacation_Turnovers(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Staff_Id   => i_Staff_Id);
  
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Start_Date => i_Start_Date);
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Changed_Intervals
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) return Hpd_Pref.Transaction_Part_Nt is
    v_Last_Trans_Id number;
    v_Orig_Code     varchar2(4000);
    v_Clone_Code    varchar2(4000);
    v_Part          Hpd_Pref.Transaction_Part_Rt;
    result          Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
  begin
    v_Last_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => i_Start_Date - 1);
  
    v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => v_Last_Trans_Id,
                                           i_Trans_Type => i_Trans_Type);
  
    v_Clone_Code := v_Orig_Code;
  
    for r in (select Nvl(p.Period, q.Period) Period_Start,
                     Lead(Nvl(p.Period, q.Period)) --
                     Over(order by Nvl(p.Period, q.Period)) - 1 Period_End,
                     p.Trans_Id,
                     q.Trans_Id Clone_Trans_Id,
                     p.Action,
                     q.Action Clone_Action
                from (select *
                        from Hpd_Agreements Og
                       where Og.Company_Id = i_Company_Id
                         and Og.Filial_Id = i_Filial_Id
                         and Og.Staff_Id = i_Staff_Id
                         and Og.Trans_Type = i_Trans_Type
                         and Og.Period >= i_Start_Date) p
                full join (select *
                            from Hpd_Cloned_Agreements Cl
                           where Cl.Company_Id = i_Company_Id
                             and Cl.Filial_Id = i_Filial_Id
                             and Cl.Staff_Id = i_Staff_Id
                             and Cl.Trans_Type = i_Trans_Type) q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Trans_Type = p.Trans_Type
                 and q.Period = p.Period
               order by Nvl(p.Period, q.Period))
    loop
      if r.Clone_Trans_Id is not null and --
         r.Clone_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Clone_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Trans_Id   => r.Clone_Trans_Id,
                                                i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Clone_Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Clone_Code := Gmap().Json();
      end if;
    
      if r.Trans_Id is not null and --
         r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Trans_Id   => r.Trans_Id,
                                               i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Orig_Code := Gmap().Json();
      end if;
    
      if v_Orig_Code <> v_Clone_Code then
        v_Part.Part_Begin := r.Period_Start;
        v_Part.Part_End   := r.Period_End;
      
        Result.Extend;
        result(Result.Count) := v_Part;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Timeoff_Interval_Kind
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Timeoff_Id number
  ) return varchar2 is
    result varchar2(1);
  begin
    select Coalesce((select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation
                      from Hpd_Vacations Vc
                     where Vc.Company_Id = Tn.Company_Id
                       and Vc.Filial_Id = Tn.Filial_Id
                       and Vc.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave
                       from Hpd_Sick_Leaves Sl
                      where Sl.Company_Id = Tn.Company_Id
                        and Sl.Filial_Id = Tn.Filial_Id
                        and Sl.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip
                       from Hpd_Business_Trips Bt
                      where Bt.Company_Id = Tn.Company_Id
                        and Bt.Filial_Id = Tn.Filial_Id
                        and Bt.Timeoff_Id = Tn.Timeoff_Id),
                    null)
      into result
      from Hpd_Journal_Timeoffs Tn
     where Tn.Company_Id = i_Company_Id
       and Tn.Filial_Id = i_Filial_Id
       and Tn.Timeoff_Id = i_Timeoff_Id;
  
    if result is null then
      b.Raise_Not_Implemented;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Changed_Intervals
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Trans_Type        varchar2,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Begin_Date    date;
    v_End_Date      date;
    v_Interval_Id   number;
    v_Timeoff_Id    number;
    v_Interval_Kind varchar2(1);
  begin
    if i_Trans_Type <> Hpd_Pref.c_Transaction_Type_Vacation_Limit then
      begin
        select Lc.Begin_Date, Lc.End_Date, Lc.Interval_Id, Lc.Kind
          into v_Begin_Date, v_End_Date, v_Interval_Id, v_Interval_Kind
          from Hpd_Lock_Intervals Lc
         where Lc.Company_Id = i_Company_Id
           and Lc.Filial_Id = i_Filial_Id
           and Lc.Staff_Id = i_Staff_Id
           and exists (select *
                  from table(i_Changed_Intervals) Ch
                 where Ch.Part_Begin <= Lc.End_Date
                   and Nvl(Ch.Part_End, Href_Pref.c_Max_Date) >= Lc.Begin_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          select p.Timeoff_Id
            into v_Timeoff_Id
            from Hpd_Timeoff_Intervals p
           where p.Company_Id = i_Company_Id
             and p.Filial_Id = i_Filial_Id
             and p.Interval_Id = v_Interval_Id;
        
          v_Interval_Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Timeoff_Id => v_Timeoff_Id);
        end if;
      
        Hpd_Error.Raise_006(i_Interval_Kind => v_Interval_Kind,
                            i_Trans_Type    => i_Trans_Type,
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                            i_Begin_Date    => v_Begin_Date,
                            i_End_Date      => v_End_Date);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Aggreement_Check
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy    varchar2(1);
    v_Count    number;
    v_Min_Date date;
    r_Journal  Hpd_Journals%rowtype;
  begin
    select count(1), min(w.Begin_Date)
      into v_Count, v_Min_Date
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress);
  
    -- TODO comment  
    if v_Count = 0 then
      return;
    end if;
  
    select 'x'
      into v_Dummy
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress)
       and w.Begin_Date = v_Min_Date
       and w.End_Date is null
       and Rownum = 1;
  exception
    when No_Data_Found then
      select w.Journal_Id
        into r_Journal.Journal_Id
        from Hpd_Transactions w
       where w.Company_Id = i_Company_Id
         and w.Filial_Id = i_Filial_Id
         and w.Staff_Id = i_Staff_Id
         and w.Trans_Type = i_Trans_Type
         and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                         Hpd_Pref.c_Transaction_Event_In_Progress)
         and w.Begin_Date = v_Min_Date
       order by w.Order_No desc
       fetch first row only;
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Journal_Id => r_Journal.Journal_Id);
    
      Hpd_Error.Raise_074(i_Journal_Id     => r_Journal.Journal_Id, --
                          i_Journal_Number => r_Journal.Journal_Number,
                          i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Evaluate
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Staff_Id               number,
    i_Trans_Type             varchar2,
    i_Changed_Dismissal_Date date
  ) is
    v_Start             date := i_Changed_Dismissal_Date;
    v_Trans_Start       date;
    v_Changed_Intervals Hpd_Pref.Transaction_Part_Nt;
  begin
    Assert_Aggreement_Check(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Trans_Type => i_Trans_Type);
  
    select min(q.Begin_Date)
      into v_Trans_Start
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                       Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
  
    v_Start := Least(Nvl(v_Start, v_Trans_Start), Nvl(v_Trans_Start, v_Start));
  
    if v_Start is null then
      Hpd_Error.Raise_030;
    end if;
  
    Agreement_Fill(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => i_Staff_Id,
                   i_Trans_Type => i_Trans_Type,
                   i_Start_Date => v_Start);
  
    if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
      v_Changed_Intervals := Get_Changed_Intervals(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Start_Date => v_Start);
    
      Assert_Changed_Intervals(i_Company_Id        => i_Company_Id,
                               i_Filial_Id         => i_Filial_Id,
                               i_Staff_Id          => i_Staff_Id,
                               i_Trans_Type        => i_Trans_Type,
                               i_Changed_Intervals => v_Changed_Intervals);
    end if;
  
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        Integrate_Robot_Agreements(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Start_Date => v_Start);
      when Hpd_Pref.c_Transaction_Type_Schedule then
        if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
          Integrate_Schedule_Agreements(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Staff_Id          => i_Staff_Id,
                                        i_Changed_Intervals => v_Changed_Intervals);
        end if;
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        if not Hpd_Pref.g_Migration_Active and v_Changed_Intervals.Count > 0 then
          Integrate_Vacation_Limit_Agreements(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Start_Date => v_Start);
        end if;
      else
        null;
    end case;
  
    -- deleting stacked transactions
    delete from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked transactions
    update Hpd_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Start_Date date first in progress trans before first to_be_integrated/to_be_deleted trans 
  -- %param i_Finish_Date date first in progress trans after last to_be_integrated/to_be_deleted trans max among different trans types
  Procedure Fill_Agreements_Cache
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Start_Date     date,
    i_Finish_Date    date,
    i_Dismissal_Date date
  ) is
    v_Finish_Date date := Least(i_Finish_Date, Nvl(i_Dismissal_Date - 1, i_Finish_Date));
    v_Old_Cache   Hpd_Pref.Agreement_Cache_Nt;
  
    v_Min_Old_Begin date;
    v_Max_Old_End   date;
  
    -------------------------------------------------- 
    Procedure Integrate_Individual_Robot_Schedules is
      v_Cache             Hpd_Pref.Agreement_Cache_Rt;
      v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                         i_Filial_Id  => i_Filial_Id,
                                                         i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    begin
      if v_Old_Cache.Count = 0 then
        v_Old_Cache.Extend;
        v_Old_Cache(1) := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                                      Robot_Id    => -1,
                                                      Schedule_Id => -1,
                                                      Begin_Date  => i_Start_Date,
                                                      End_Date    => v_Finish_Date);
      end if;
    
      if v_Min_Old_Begin is not null then
        -- adding period before old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => Href_Pref.c_Min_Date,
                                               End_Date    => v_Min_Old_Begin - 1);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      if v_Max_Old_End is not null then
        -- adding period after old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => case
                                                                when v_Max_Old_End <> Href_Pref.c_Max_Date then
                                                                 v_Max_Old_End + 1
                                                                else
                                                                 v_Max_Old_End
                                                              end,
                                               End_Date    => Href_Pref.c_Max_Date);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      for r in (with Old_Cache as
                   (select Oc.Begin_Date,
                          Oc.End_Date,
                          Oc.Robot_Id,
                          Nvl(Oc.Schedule_Id, -1) Schedule_Id
                     from table(v_Old_Cache) Oc),
                  New_Cache as
                   (select Nc.Begin_Date, Nc.End_Date, Nc.Robot_Id
                     from Hpd_Agreements_Cache Nc
                    where Nc.Company_Id = i_Company_Id
                      and Nc.Filial_Id = i_Filial_Id
                      and Nc.Staff_Id = i_Staff_Id
                      and Nc.Begin_Date between i_Start_Date and v_Finish_Date
                      and Nc.Schedule_Id = v_Robot_Schedule_Id)
                  select q.Robot_Id,
                         Greatest(q.Begin_Date, p.Begin_Date) Begin_Date,
                         Least(q.End_Date, p.End_Date) End_Date
                    from New_Cache q
                    join Old_Cache p
                      on p.Begin_Date <= q.End_Date
                     and p.End_Date >= q.Begin_Date
                     and (p.Robot_Id <> q.Robot_Id or p.Schedule_Id <> v_Robot_Schedule_Id))
      loop
        -- used min with max_date - 1 because later it may be used as end_date + 1
        -- and using max_date + 1 will cause error
        Htt_Core.Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Staff_Id    => i_Staff_Id,
                                               i_Robot_Id    => r.Robot_Id,
                                               i_Schedule_Id => v_Robot_Schedule_Id,
                                               i_Begin_Date  => r.Begin_Date,
                                               i_End_Date    => Least(r.End_Date,
                                                                      Href_Pref.c_Max_Date - 1));
      end loop;
    end;
  begin
    select min(q.Begin_Date), max(q.End_Date)
      into v_Min_Old_Begin, v_Max_Old_End
      from Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date;
  
    delete Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date
    returning q.Staff_Id, q.Robot_Id, q.Schedule_Id, q.Begin_Date, q.End_Date bulk collect into v_Old_Cache;
  
    insert into Hpd_Agreements_Cache
      (Company_Id, Filial_Id, Staff_Id, Begin_Date, End_Date, Robot_Id, Schedule_Id)
      with Last_Cache as
       (select Gc.Robot_Id, Gc.Schedule_Id
          from Hpd_Agreements_Cache Gc
         where Gc.Company_Id = i_Company_Id
           and Gc.Filial_Id = i_Filial_Id
           and Gc.Staff_Id = i_Staff_Id
           and i_Start_Date - 1 between Gc.Begin_Date and Gc.End_Date)
      select i_Company_Id,
             i_Filial_Id,
             i_Staff_Id,
             Qr.Period Begin_Date,
             Lead(Qr.Period - 1, 1, v_Finish_Date) Over(order by Qr.Period) End_Date,
             Last_Value(Qr.Robot_Id Ignore nulls) Over(order by Qr.Period) Robot_Id,
             Last_Value(Qr.Schedule_Id Ignore nulls) Over(order by Qr.Period) Schedule_Id
        from (select p.Period, --
                     Nvl(max(Ts.Schedule_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Schedule_Id
                                   from Last_Cache Lc),
                                null)) Schedule_Id,
                     Nvl(max(Tr.Robot_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Robot_Id
                                   from Last_Cache Lc),
                                null)) Robot_Id
                from Hpd_Agreements p
                left join Hpd_Trans_Schedules Ts
                  on Ts.Company_Id = p.Company_Id
                 and Ts.Filial_Id = p.Filial_Id
                 and Ts.Trans_Id = p.Trans_Id
                left join Hpd_Trans_Robots Tr
                  on Tr.Company_Id = p.Company_Id
                 and Tr.Filial_Id = p.Filial_Id
                 and Tr.Trans_Id = p.Trans_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Period between i_Start_Date and v_Finish_Date
                 and p.Trans_Type in
                     (Hpd_Pref.c_Transaction_Type_Robot, Hpd_Pref.c_Transaction_Type_Schedule)
                 and p.Action = Hpd_Pref.c_Transaction_Action_Continue
               group by p.Period) Qr;
  
    Integrate_Individual_Robot_Schedules;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number) is
    r_Staff                  Href_Staffs%rowtype;
    r_Employee               Mhr_Employees%rowtype;
    r_Person                 Md_Persons%rowtype;
    v_Changed_Dismissal_Date date;
    v_Dismissal_Date         date;
    v_Min_Change_Date        date;
    v_Max_Change_Date        date;
  
    --------------------------------------------------
    Procedure Check_Transactions(i_Staff Href_Staffs%rowtype) is
    begin
      -- check exists transactions before hiring
      for r in (select *
                  from Hpd_Transactions q
                 where q.Company_Id = i_Staff.Company_Id
                   and q.Filial_Id = i_Staff.Filial_Id
                   and q.Staff_Id = i_Staff.Staff_Id
                   and q.Begin_Date < i_Staff.Hiring_Date
                   and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                   Hpd_Pref.c_Transaction_Event_In_Progress)
                   and Rownum = 1)
      loop
        r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                           i_Filial_Id   => i_Staff.Filial_Id,
                                           i_Employee_Id => i_Staff.Employee_Id);
      
        r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                      i_Person_Id  => i_Staff.Employee_Id);
      
        Hpd_Error.Raise_007(i_Staff_Name  => r_Person.Name,
                            i_Trans_Type  => r.Trans_Type,
                            i_Trans_Date  => r.Begin_Date,
                            i_Hiring_Date => i_Staff.Hiring_Date);
      end loop;
    
      -- check there are other documents after dismissal document
      if i_Staff.Dismissal_Date is not null then
        for r in (select *
                    from Hpd_Transactions q
                   where q.Company_Id = i_Staff.Company_Id
                     and q.Filial_Id = i_Staff.Filial_Id
                     and q.Staff_Id = i_Staff.Staff_Id
                     and q.Begin_Date > i_Staff.Dismissal_Date
                     and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                     Hpd_Pref.c_Transaction_Event_In_Progress)
                   order by q.Begin_Date
                   fetch first row only)
        loop
          r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                             i_Filial_Id   => i_Staff.Filial_Id,
                                             i_Employee_Id => i_Staff.Employee_Id);
        
          r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                        i_Person_Id  => i_Staff.Employee_Id);
        
          Hpd_Error.Raise_008(i_Staff_Name     => r_Person.Name,
                              i_Trans_Type     => r.Trans_Type,
                              i_Trans_Date     => r.Begin_Date,
                              i_Dismissal_Date => i_Staff.Dismissal_Date);
        end loop;
      end if;
    end;
  begin
    --
    for r in (select q.Company_Id, --
                     q.Filial_Id,
                     q.Staff_Id
                from Hpd_Dirty_Agreements q
               group by q.Company_Id, q.Filial_Id, q.Staff_Id)
    loop
      r_Staff := z_Href_Staffs.Load(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Staff_Id   => r.Staff_Id);
    
      -- check exists transactions before hiring
      Check_Transactions(r_Staff);
    
      -- get lowest changed dismissal date
      select min(q.Dismissal_Date),
             min(Decode(q.Event, Hpd_Pref.c_Transaction_Event_To_Be_Deleted, null, q.Dismissal_Date))
        into v_Changed_Dismissal_Date, v_Dismissal_Date
        from Hpd_Dismissal_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id;
    
      select min(q.Begin_Date), max(q.Begin_Date)
        into v_Min_Change_Date, v_Max_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                         Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
    
      v_Min_Change_Date := Nvl(Least(Nvl(v_Min_Change_Date, v_Changed_Dismissal_Date),
                                     Nvl(v_Changed_Dismissal_Date, v_Min_Change_Date)),
                               Href_Pref.c_Min_Date);
    
      v_Max_Change_Date := Nvl(v_Max_Change_Date, v_Min_Change_Date);
    
      select max(Qr.Begin_Date)
        into v_Max_Change_Date
        from (select min(Tr.Begin_Date) Begin_Date
                from (select q.Trans_Type, q.Begin_Date - 1 Begin_Date
                        from Hpd_Transactions q
                       where q.Company_Id = r.Company_Id
                         and q.Filial_Id = r.Filial_Id
                         and q.Staff_Id = r.Staff_Id
                         and q.Trans_Type in
                             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
                         and q.Begin_Date > v_Max_Change_Date
                         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
                      union all
                      select Hpd_Pref.c_Transaction_Type_Schedule, Href_Pref.c_Max_Date
                        from Dual
                      union all
                      select Hpd_Pref.c_Transaction_Type_Robot, Href_Pref.c_Max_Date
                        from Dual) Tr
               group by Tr.Trans_Type) Qr;
    
      select max(q.Begin_Date)
        into v_Min_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Begin_Date < v_Min_Change_Date
         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress;
    
      v_Min_Change_Date := Nvl(v_Min_Change_Date, Href_Pref.c_Min_Date);
    
      for Agr in (select q.Trans_Type
                    from Hpd_Dirty_Agreements q
                   where q.Company_Id = r.Company_Id
                     and q.Filial_Id = r.Filial_Id
                     and q.Staff_Id = r.Staff_Id)
      loop
        Agreement_Evaluate(i_Company_Id             => r.Company_Id,
                           i_Filial_Id              => r.Filial_Id,
                           i_Staff_Id               => r.Staff_Id,
                           i_Trans_Type             => Agr.Trans_Type,
                           i_Changed_Dismissal_Date => v_Changed_Dismissal_Date);
      end loop;
    
      -- if staff is passive, check that there are no more transactions
      if r_Staff.State = 'P' then
        for Trans in (select *
                        from Hpd_Transactions St
                       where St.Company_Id = r.Company_Id
                         and St.Filial_Id = r.Filial_Id
                         and St.Staff_Id = r.Staff_Id)
        loop
          Hpd_Error.Raise_009(Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                   i_Staff_Id   => r_Staff.Staff_Id));
        end loop;
      end if;
    
      Fill_Agreements_Cache(i_Company_Id     => r.Company_Id,
                            i_Filial_Id      => r.Filial_Id,
                            i_Staff_Id       => r.Staff_Id,
                            i_Start_Date     => v_Min_Change_Date,
                            i_Finish_Date    => v_Max_Change_Date,
                            i_Dismissal_Date => v_Dismissal_Date);
    end loop;
  
    -- deleting stacked dismissal transactions
    delete Hpd_Dismissal_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked dismissal transactions
    update Hpd_Dismissal_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id;
  
    delete Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Dirty
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Agreements
        (Company_Id, Filial_Id, Staff_Id, Trans_Type)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Trans_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number is
    v_Dismissal_Date date := Nvl(i_Dismissal_Date, Href_Pref.c_Max_Date);
    result           Href_Staffs%rowtype;
  begin
    select q.*
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Employee_Id = i_Employee_Id
       and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and q.State = 'A'
       and Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) >= i_Hiring_Date
       and q.Hiring_Date <= v_Dismissal_Date;
  
    -- check cross out from primary job
    if Result.Hiring_Date <= i_Hiring_Date and
       Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) >= v_Dismissal_Date then
      return Result.Staff_Id;
    end if;
  
    if i_Hiring_Date < Result.Hiring_Date then
      Hpd_Error.Raise_010(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                     i_Filial_Id  => Result.Filial_Id,
                                                                     i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Hiring   => Result.Hiring_Date,
                          i_Secondary_Hiring => i_Hiring_Date);
    end if;
  
    if v_Dismissal_Date > Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) then
      Hpd_Error.Raise_011(i_Staff_Name          => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                        i_Filial_Id  => Result.Filial_Id,
                                                                        i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Dismissal   => Result.Dismissal_Date,
                          i_Secondary_Dismissal => v_Dismissal_Date);
    end if;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_012(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
    when Too_Many_Rows then
      Hpd_Error.Raise_013(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Begin_Date then
      Hpd_Error.Raise_014(i_Staff_Name  => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                i_Filial_Id  => i_Filial_Id,
                                                                i_Staff_Id   => i_Staff_Id),
                          i_Trans_Type  => i_Trans_Type,
                          i_Trans_Date  => i_Begin_Date,
                          i_Hiring_Date => r_Staff.Hiring_Date);
    end if;
  
    r_Trans.Company_Id := i_Company_Id;
    r_Trans.Filial_Id  := i_Filial_Id;
    r_Trans.Trans_Id   := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id   := i_Staff_Id;
    r_Trans.Trans_Type := i_Trans_Type;
    r_Trans.Begin_Date := i_Begin_Date;
    r_Trans.End_Date   := i_End_Date;
    r_Trans.Order_No   := i_Order_No;
    r_Trans.Journal_Id := i_Journal_Id;
    r_Trans.Page_Id    := i_Page_Id;
    r_Trans.Tag        := i_Tag;
    r_Trans.Event      := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Transactions.Insert_Row(r_Trans);
  
    Agreement_Dirty(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type);
  
    return r_Trans.Trans_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Life_Cycle_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff  Href_Staffs%rowtype;
    v_Cnt    number;
    r_Person Md_Persons%rowtype;
    --------------------------------------------------
    Function Staff_State return varchar2 is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Hirings q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and exists (select *
                from Hpd_Journal_Pages w
                join Hpd_Journals k
                  on k.Company_Id = i_Company_Id
                 and k.Filial_Id = i_Filial_Id
                 and k.Journal_Id = w.Journal_Id
               where w.Company_Id = i_Company_Id
                 and w.Filial_Id = i_Filial_Id
                 and w.Page_Id = q.Page_Id
                 and k.Posted = 'Y');
    
      return 'A';
    exception
      when No_Data_Found then
        return 'P';
    end;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    r_Staff.State := Staff_State;
  
    select min(Dt.Dismissal_Date) - 1, min(k.Dismissal_Reason_Id), min(k.Note), count(1)
      into r_Staff.Dismissal_Date, r_Staff.Dismissal_Reason_Id, r_Staff.Dismissal_Note, v_Cnt
      from Hpd_Journal_Pages Jp
      join Hpd_Dismissal_Transactions Dt
        on Dt.Company_Id = Jp.Company_Id
       and Dt.Filial_Id = Jp.Filial_Id
       and Dt.Page_Id = Jp.Page_Id
       and Dt.Event in
           (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, Hpd_Pref.c_Transaction_Event_In_Progress)
      left join Hpd_Dismissals k
        on k.Company_Id = Dt.Company_Id
       and k.Filial_Id = Dt.Filial_Id
       and k.Page_Id = Dt.Page_Id
     where Jp.Company_Id = i_Company_Id
       and Jp.Filial_Id = i_Filial_Id
       and Jp.Staff_Id = i_Staff_Id;
  
    if Nvl(v_Cnt, 0) > 1 then
      r_Person := z_Md_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                    i_Person_Id  => r_Staff.Employee_Id);
    
      Hpd_Error.Raise_015(i_Staff_Name => r_Person.Name, i_Dismissed_Cnt => v_Cnt);
    end if;
  
    if r_Staff.Hiring_Date > r_Staff.Dismissal_Date then
      Hpd_Error.Raise_016(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                                   i_Staff_Id   => r_Staff.Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => r_Staff.Dismissal_Date);
    end if;
  
    z_Href_Staffs.Save_Row(r_Staff);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Relationship_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
    v_Count number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
    if r_Staff.State = 'P' then
      if r_Staff.Dismissal_Date is not null then
        Hpd_Error.Raise_017(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      select count(1)
        into v_Count
        from Href_Staffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Parent_Id = i_Staff_Id
         and q.State = 'A';
    
      if v_Count > 0 then
        Hpd_Error.Raise_018(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      return;
    end if;
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary then
      Assert_Intersection_Staff(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Employee_Id => r_Staff.Employee_Id);
      for r in (select *
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Parent_Id = i_Staff_Id
                   and q.State = 'A'
                   and not (r_Staff.Hiring_Date <= q.Hiring_Date and
                        Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) <=
                        Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date)))
      loop
        Hpd_Error.Raise_019(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_Secondary_Hiring => r.Hiring_Date,
                            i_Primary_Hiring   => r_Staff.Hiring_Date);
      end loop;
    else
      z_Href_Staffs.Update_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Parent_Id  => Option_Number(Get_Parent_Staff(i_Company_Id     => r_Staff.Company_Id,
                                                                              i_Filial_Id      => r_Staff.Filial_Id,
                                                                              i_Employee_Id    => r_Staff.Employee_Id,
                                                                              i_Hiring_Date    => r_Staff.Hiring_Date,
                                                                              i_Dismissal_Date => r_Staff.Dismissal_Date)));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Employee_Number
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    v_Staff_Number varchar2(50 char);
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    select p.Staff_Number
      into v_Staff_Number
      from Href_Staffs p
     where p.Company_Id = r_Staff.Company_Id
       and p.Filial_Id = r_Staff.Filial_Id
       and p.Employee_Id = r_Staff.Employee_Id
       and p.State = 'A'
       and p.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
     order by p.Hiring_Date desc
     fetch first row only;
  
    z_Mhr_Employees.Update_One(i_Company_Id      => r_Staff.Company_Id,
                               i_Filial_Id       => r_Staff.Filial_Id,
                               i_Employee_Id     => r_Staff.Employee_Id,
                               i_Employee_Number => Option_Varchar2(v_Staff_Number));
  exception
    when No_Data_Found then
      return;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attach_User_Filial
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff   Href_Staffs%rowtype;
    r_Person  Mr_Natural_Persons%rowtype;
    r_User    Md_Users%rowtype;
    v_Role_Id number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Staff_Kind <> Href_Pref.c_Staff_Kind_Primary or --
       r_Staff.Dismissal_Date is not null then
      return;
    end if;
  
    if not z_Md_Users.Exist_Lock(i_Company_Id => i_Company_Id, --
                                 i_User_Id    => r_Staff.Employee_Id) then
      r_Person := z_Mr_Natural_Persons.Lock_Load(i_Company_Id => i_Company_Id,
                                                 i_Person_Id  => r_Staff.Employee_Id);
    
      z_Md_Users.Init(p_Row        => r_User,
                      i_Company_Id => r_Person.Company_Id,
                      i_User_Id    => r_Person.Person_Id,
                      i_Name       => r_Person.Name,
                      i_User_Kind  => Md_Pref.c_Uk_Normal,
                      i_Gender     => r_Person.Gender,
                      i_State      => 'A');
    
      Md_Api.User_Save(r_User);
    end if;
  
    if not z_Md_User_Filials.Exist(i_Company_Id => i_Company_Id,
                                   i_User_Id    => r_Staff.Employee_Id,
                                   i_Filial_Id  => i_Filial_Id) then
      Md_Api.User_Add_Filial(i_Company_Id => i_Company_Id,
                             i_User_Id    => r_Staff.Employee_Id,
                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    v_Role_Id := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                 i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
  
    if not z_Md_User_Roles.Exist(i_Company_Id => i_Company_Id,
                                 i_User_Id    => r_Staff.Employee_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Role_Id    => v_Role_Id) then
      Md_Api.Role_Grant(i_Company_Id => i_Company_Id,
                        i_User_Id    => r_Staff.Employee_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Role_Id    => v_Role_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Staff_Ids Array_Number;
  begin
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Life_Cycle_Evaluate(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Relationship_Evaluate(i_Company_Id => r.Company_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Update_Employee_Number(i_Company_Id => r.Company_Id,
                             i_Filial_Id  => r.Filial_Id,
                             i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id)
    loop
      Attach_User_Filial(i_Company_Id => r.Company_Id,
                         i_Filial_Id  => r.Filial_Id,
                         i_Staff_Id   => r.Staff_Id);
    end loop;
  
    select q.Staff_Id
      bulk collect
      into v_Staff_Ids
      from Hpd_Dirty_Staffs q
      join Href_Staffs w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Staff_Id = w.Staff_Id
     where q.Company_Id = i_Company_Id
     order by w.Employee_Id;
  
    Hlic_Core.Revise_License_By_Dirty_Staffs(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Staff_Ids  => v_Staff_Ids);
  
    delete Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    for r in (select Jp.Employee_Id
                from Hpd_Journal_Pages Jp
               where Jp.Company_Id = i_Company_Id
                 and Jp.Filial_Id = i_Filial_Id
                 and Jp.Journal_Id = i_Journal_Id
               group by Jp.Employee_Id)
    loop
      Htt_Api.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Staffs q
        (Company_Id, Filial_Id, Staff_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Terminate
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Journal_Id     number,
    i_Page_Id        number,
    i_Dismissal_Date date
  ) is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Dismissal_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Dismissal_Date then
      Hpd_Error.Raise_020(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => i_Dismissal_Date);
    end if;
  
    r_Trans.Company_Id     := i_Company_Id;
    r_Trans.Filial_Id      := i_Filial_Id;
    r_Trans.Trans_Id       := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id       := i_Staff_Id;
    r_Trans.Dismissal_Date := i_Dismissal_Date + 1;
    r_Trans.Journal_Id     := i_Journal_Id;
    r_Trans.Page_Id        := i_Page_Id;
    r_Trans.Event          := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Dismissal_Transactions.Insert_Row(r_Trans);
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Restore
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
  begin
    for r in (select *
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Dismissal_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                              i_Filial_Id  => r.Filial_Id,
                                              i_Trans_Id   => r.Trans_Id,
                                              i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    end loop;
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  ) is
    v_Fte      number := i_Fte;
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    if i_Fte_Id is not null then
      v_Fte := z_Href_Ftes.Load(i_Company_Id => i_Company_Id, i_Fte_Id => i_Fte_Id).Fte_Value;
    end if;
  
    z_Hpd_Trans_Robots.Insert_One(i_Company_Id       => i_Company_Id,
                                  i_Filial_Id        => i_Filial_Id,
                                  i_Trans_Id         => v_Trans_Id,
                                  i_Robot_Id         => i_Robot_Id,
                                  i_Division_Id      => i_Division_Id,
                                  i_Job_Id           => i_Job_Id,
                                  i_Employment_Type  => i_Employment_Type,
                                  i_Fte_Id           => i_Fte_Id,
                                  i_Fte              => v_Fte,
                                  i_Contractual_Wage => i_Contractual_Wage,
                                  i_Wage_Scale_Id    => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Schedule,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Schedules.Insert_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Trans_Id    => v_Trans_Id,
                                     i_Schedule_Id => i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Currency_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Currency,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Currencies.Insert_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Trans_Id    => v_Trans_Id,
                                      i_Currency_Id => i_Currency_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Vacation_Limit,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Vacation_Limits.Save_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Trans_Id,
                                         i_Days_Limit => i_Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Rank,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Ranks.Insert_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Trans_Id   => v_Trans_Id,
                                 i_Rank_Id    => i_Rank_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Indicator     Href_Pref.Indicator_Nt := Href_Pref.Indicator_Nt();
    v_Oper_Types    Href_Pref.Oper_Type_Nt := Href_Pref.Oper_Type_Nt();
    v_Indicator_Ids Array_Number;
    v_Trans_Id      number;
  begin
    for r in (select *
                from Hpd_Page_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      Hpd_Util.Indicator_Add(p_Indicator       => v_Indicator,
                             i_Indicator_Id    => r.Indicator_Id,
                             i_Indicator_Value => r.Indicator_Value);
    end loop;
  
    for r in (select q.*
                from Hpd_Page_Oper_Types q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      select q.Indicator_Id
        bulk collect
        into v_Indicator_Ids
        from Hpd_Oper_Type_Indicators q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Page_Id = r.Page_Id
         and q.Oper_Type_Id = r.Oper_Type_Id;
    
      Hpd_Util.Oper_Type_Add(p_Oper_Type     => v_Oper_Types,
                             i_Oper_Type_Id  => r.Oper_Type_Id,
                             i_Indicator_Ids => v_Indicator_Ids);
    end loop;
  
    if v_Oper_Types.Count > 0 then
      v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                 i_Journal_Id => i_Journal_Id,
                                 i_Page_Id    => i_Page_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => i_Begin_Date,
                                 i_End_Date   => i_End_Date,
                                 i_Order_No   => i_Order_No,
                                 i_Tag        => i_Source_Table.Name);
    
      for i in 1 .. v_Indicator.Count
      loop
        z_Hpd_Trans_Indicators.Insert_One(i_Company_Id      => i_Company_Id,
                                          i_Filial_Id       => i_Filial_Id,
                                          i_Trans_Id        => v_Trans_Id,
                                          i_Indicator_Id    => v_Indicator(i).Indicator_Id,
                                          i_Indicator_Value => v_Indicator(i).Indicator_Value);
      end loop;
    end if;
  
    for i in 1 .. v_Oper_Types.Count
    loop
      z_Hpd_Trans_Oper_Types.Insert_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => v_Trans_Id,
                                        
                                        i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id);
    
      v_Indicator_Ids := v_Oper_Types(i).Indicator_Ids;
    
      for j in 1 .. v_Indicator_Ids.Count
      loop
        z_Hpd_Trans_Oper_Type_Indicators.Insert_One(i_Company_Id   => i_Company_Id,
                                                    i_Filial_Id    => i_Filial_Id,
                                                    i_Trans_Id     => v_Trans_Id,
                                                    i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id,
                                                    i_Indicator_Id => v_Indicator_Ids(j));
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  ) is
  begin
    for r in (select *
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Trans_Id   => r.Trans_Id,
                                    i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    
      Agreement_Dirty(i_Company_Id => r.Company_Id,
                      i_Filial_Id  => r.Filial_Id,
                      i_Staff_Id   => r.Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Hiring_Date,
                     w.Dismissal_Date,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(k.Employment_Type, Hpd_Pref.c_Employment_Type_Internal_Parttime) nulls last) -- firstly primary jobs line opened
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                         i_Filial_Id        => r.Filial_Id,
                         i_Journal_Id       => r.Journal_Id,
                         i_Page_Id          => r.Page_Id,
                         i_Staff_Id         => r.Staff_Id,
                         i_Begin_Date       => r.Hiring_Date,
                         i_End_Date         => null,
                         i_Order_No         => i_Journal.Posted_Order_No,
                         i_Robot_Id         => r.Robot_Id,
                         i_Division_Id      => r.Division_Id,
                         i_Job_Id           => r.Job_Id,
                         i_Fte_Id           => r.Fte_Id,
                         i_Fte              => r.Fte,
                         i_Employment_Type  => r.Employment_Type,
                         i_Wage_Scale_Id    => r.Wage_Scale_Id,
                         i_Contractual_Wage => r.Contractual_Wage,
                         i_Source_Table     => Zt.Hpd_Hirings);
    
      if r.Dismissal_Date is not null then
        Staff_Terminate(i_Company_Id     => r.Company_Id,
                        i_Filial_Id      => r.Filial_Id,
                        i_Staff_Id       => r.Staff_Id,
                        i_Journal_Id     => r.Journal_Id,
                        i_Page_Id        => r.Page_Id,
                        i_Dismissal_Date => r.Dismissal_Date);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Rank_Id is not null then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Hiring_Date,
                          i_End_Date     => null,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Hiring_Date,
                                    i_End_Date     => null,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Hiring_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Hirings);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date,
                     Ct.Early_Closed_Note,
                     Ct.Posted Contract_Posted
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Contract_Posted = 'Y' and --
         r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date) then
        Cv_Contract_Close(i_Company_Id        => r.Company_Id,
                          i_Filial_Id         => r.Filial_Id,
                          i_Contract_Id       => r.Contract_Id,
                          i_Early_Closed_Date => r.Dismissal_Date,
                          i_Early_Closed_Note => r.Early_Closed_Note);
      
      else
        z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Contract_Id => r.Contract_Id,
                                      i_End_Date    => Option_Date(r.Dismissal_Date));
      
        Cv_Contract_Post(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Transfer_Begin,
                     w.Transfer_End,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     St.Staff_Kind,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Transfers w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Href_Staffs St
                  on St.Company_Id = q.Company_Id
                 and St.Filial_Id = q.Filial_Id
                 and St.Staff_Id = q.Staff_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Robot_Id is not null then
        if r.Staff_Kind != Hpd_Util.Cast_Staff_Kind_By_Emp_Type(r.Employment_Type) then
          Hpd_Error.Raise_021(Href_Util.Staff_Name(i_Company_Id => r.Company_Id,
                                                   i_Filial_Id  => r.Filial_Id,
                                                   i_Staff_Id   => r.Staff_Id));
        end if;
      
        Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                           i_Filial_Id        => r.Filial_Id,
                           i_Journal_Id       => r.Journal_Id,
                           i_Page_Id          => r.Page_Id,
                           i_Staff_Id         => r.Staff_Id,
                           i_Begin_Date       => r.Transfer_Begin,
                           i_End_Date         => r.Transfer_End,
                           i_Order_No         => i_Journal.Posted_Order_No,
                           i_Robot_Id         => r.Robot_Id,
                           i_Division_Id      => r.Division_Id,
                           i_Job_Id           => r.Job_Id,
                           i_Employment_Type  => r.Employment_Type,
                           i_Fte_Id           => r.Fte_Id,
                           i_Fte              => r.Fte,
                           i_Wage_Scale_Id    => r.Wage_Scale_Id,
                           i_Contractual_Wage => r.Contractual_Wage,
                           i_Source_Table     => Zt.Hpd_Transfers);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Rank_Id is not null then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Transfer_Begin,
                          i_End_Date     => r.Transfer_End,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Transfer_Begin,
                                    i_End_Date     => r.Transfer_End,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Transfer_Begin,
                             i_End_Date     => r.Transfer_End,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Transfers);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Dismissal_Date
                from Hpd_Journal_Pages q
                join Hpd_Dismissals w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls last) -- firstly secondary jobs line closed
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Terminate(i_Company_Id     => r.Company_Id,
                      i_Filial_Id      => r.Filial_Id,
                      i_Staff_Id       => r.Staff_Id,
                      i_Journal_Id     => i_Journal.Journal_Id,
                      i_Page_Id        => r.Page_Id,
                      i_Dismissal_Date => r.Dismissal_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, Pc.Currency_Id
                from Hpd_Journal_Pages q
                join Hpd_Wage_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Change_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Change_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Wage_Changes);
    
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, w.Rank_Id
                from Hpd_Journal_Pages q
                join Hpd_Rank_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                        i_Filial_Id    => r.Filial_Id,
                        i_Journal_Id   => r.Journal_Id,
                        i_Page_Id      => r.Page_Id,
                        i_Staff_Id     => r.Staff_Id,
                        i_Begin_Date   => r.Change_Date,
                        i_End_Date     => null,
                        i_Order_No     => i_Journal.Posted_Order_No,
                        i_Rank_Id      => r.Rank_Id,
                        i_Source_Table => Zt.Hpd_Rank_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, r.Page_Id, r.Staff_Id
                from Hpd_Vacation_Limit_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                  i_Filial_Id    => r.Filial_Id,
                                  i_Journal_Id   => r.Journal_Id,
                                  i_Page_Id      => r.Page_Id,
                                  i_Staff_Id     => r.Staff_Id,
                                  i_Begin_Date   => r.Change_Date,
                                  i_End_Date     => null,
                                  i_Order_No     => i_Journal.Posted_Order_No,
                                  i_Days_Limit   => r.Days_Limit,
                                  i_Source_Table => Zt.Hpd_Vacation_Limit_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.Begin_Date,
                     q.End_Date,
                     r.Page_Id,
                     r.Staff_Id,
                     (select s.Schedule_Id
                        from Hpd_Page_Schedules s
                       where s.Company_Id = i_Journal.Company_Id
                         and s.Filial_Id = i_Journal.Filial_Id
                         and s.Page_Id = r.Page_Id) as Schedule_Id
                from Hpd_Schedule_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = i_Journal.Company_Id
                 and r.Filial_Id = i_Journal.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Schedule_Trans_Insert(i_Company_Id   => i_Journal.Company_Id,
                            i_Filial_Id    => i_Journal.Filial_Id,
                            i_Journal_Id   => i_Journal.Journal_Id,
                            i_Page_Id      => r.Page_Id,
                            i_Staff_Id     => r.Staff_Id,
                            i_Begin_Date   => r.Begin_Date,
                            i_End_Date     => r.End_Date,
                            i_Order_No     => i_Journal.Posted_Order_No,
                            i_Schedule_Id  => r.Schedule_Id,
                            i_Source_Table => Zt.Hpd_Schedule_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Post(i_Journal Hpd_Journals%rowtype) is
    v_Interval_Id number;
  begin
    for r in (select q.*
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Interval_Id := Hpd_Next.Lock_Interval_Id;
    
      Timeoff_Lock_Interval_Insert(i_Company_Id      => r.Company_Id,
                                   i_Filial_Id       => r.Filial_Id,
                                   i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                                   i_Timeoff_Id      => r.Timeoff_Id,
                                   i_Staff_Id        => r.Staff_Id,
                                   i_Begin_Date      => r.Begin_Date,
                                   i_End_Date        => r.End_Date);
    
      Insert_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Insert_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Post(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Timesheet_Id        number;
  
    --------------------------------------------------
    Procedure Assert_No_Timeoff
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Timeoff_Date date
    ) is
      r_Timeoff Hpd_Timeoff_Days%rowtype;
    begin
      if z_Hpd_Timeoff_Days.Exist(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Timeoff_Date => i_Timeoff_Date,
                                  o_Row          => r_Timeoff) then
        Hpd_Error.Raise_075(i_Interval_Kind => Get_Timeoff_Interval_Kind(i_Company_Id => r_Timeoff.Company_Id,
                                                                         i_Filial_Id  => r_Timeoff.Filial_Id,
                                                                         i_Timeoff_Id => r_Timeoff.Timeoff_Id),
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                            i_Timeoff_Date  => i_Timeoff_Date);
      end if;
    end;
  
  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    -- check
    for r in (select q.Staff_Id,
                     (select j.Journal_Number
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Number,
                     (select j.Journal_Date
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and (q.Staff_Id, q.Kind) in
                     (select q.Staff_Id, Pa.Kind
                        from Hpd_Journal_Pages q
                        join Hpd_Page_Adjustments Pa
                          on Pa.Company_Id = i_Journal.Company_Id
                         and Pa.Filial_Id = i_Journal.Filial_Id
                         and Pa.Page_Id = q.Page_Id
                       where q.Company_Id = i_Journal.Company_Id
                         and q.Filial_Id = i_Journal.Filial_Id
                         and q.Journal_Id = i_Journal.Journal_Id)
                 and q.Adjustment_Date = r_Timebook_Adjustment.Adjustment_Date
                 and q.Journal_Id <> i_Journal.Journal_Id
                 and Rownum = 1)
    loop
      Hpd_Error.Raise_053(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                    i_Filial_Id  => i_Journal.Filial_Id,
                                                                    i_Staff_Id   => r.Staff_Id),
                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                          i_Journal_Number  => r.Journal_Number,
                          i_Journal_Date    => r.Journal_Date);
    end loop;
  
    for r in (select q.Staff_Id, q.Page_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      if v_Timesheet_Id is null then
        Hpd_Error.Raise_054(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                      i_Filial_Id  => i_Journal.Filial_Id,
                                                                      i_Staff_Id   => r.Staff_Id),
                            i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date);
      end if;
    
      Assert_No_Timeoff(i_Company_Id   => i_Journal.Company_Id,
                        i_Filial_Id    => i_Journal.Filial_Id,
                        i_Staff_Id     => r.Staff_Id,
                        i_Timeoff_Date => r_Timebook_Adjustment.Adjustment_Date);
    
      for Adj in (select a.Kind
                    from Hpd_Page_Adjustments a
                   where a.Company_Id = i_Journal.Company_Id
                     and a.Filial_Id = i_Journal.Filial_Id
                     and a.Page_Id = r.Page_Id)
      loop
        z_Hpd_Lock_Adjustments.Insert_One(i_Company_Id      => i_Journal.Company_Id,
                                          i_Filial_Id       => i_Journal.Filial_Id,
                                          i_Staff_Id        => r.Staff_Id,
                                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                                          i_Kind            => Adj.Kind,
                                          i_Journal_Id      => i_Journal.Journal_Id,
                                          i_Page_Id         => r.Page_Id);
      end loop;
    
      Htt_Core.Save_Adjustment_Fact(i_Company_Id     => i_Journal.Company_Id,
                                    i_Filial_Id      => i_Journal.Filial_Id,
                                    i_Staff_Id       => r.Staff_Id,
                                    i_Timesheet_Id   => v_Timesheet_Id,
                                    i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Fte_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    v_Current_Date date := Trunc(sysdate);
    v_Fte_Limit    Href_Pref.Fte_Limit_Rt := Href_Util.Load_Fte_Limit(i_Company_Id);
  begin
    if v_Fte_Limit.Fte_Limit_Setting = 'N' then
      return;
    end if;
  
    for r in (select e.Employee_Name
                from (select (select sum(St.Fte)
                                from Href_Staffs St
                               where St.Company_Id = w.Company_Id
                                 and St.Employee_Id = w.Employee_Id
                                 and St.State = 'A'
                                 and St.Hiring_Date <= v_Current_Date
                                 and (St.Dismissal_Date is null or --
                                     St.Dismissal_Date >= v_Current_Date)
                                 and exists (select 1
                                        from Md_Filials f
                                       where f.Company_Id = St.Company_Id
                                         and f.Filial_Id = St.Filial_Id
                                         and f.State = 'A')) Total_Fte,
                             (select Np.Name
                                from Mr_Natural_Persons Np
                               where Np.Company_Id = w.Company_Id
                                 and Np.Person_Id = w.Employee_Id) Employee_Name
                        from Hpd_Journal_Pages q
                        join Href_Staffs w
                          on w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Staff_Id = q.Staff_Id
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Journal_Id = i_Journal_Id) e
               where v_Fte_Limit.Fte_Limit < e.Total_Fte)
    loop
      Hpd_Error.Raise_078(r.Employee_Name);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'Y' and not Hpd_Pref.g_Migration_Active then
      Hpd_Error.Raise_022(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_069(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    r_Journal.Posted := 'Y';
  
    if r_Journal.Posted_Order_No is null then
      r_Journal.Posted_Order_No := Md_Core.Gen_Number(i_Company_Id => r_Journal.Company_Id,
                                                      i_Filial_Id  => r_Journal.Filial_Id,
                                                      i_Table      => Zt.Hpd_Journals,
                                                      i_Column     => z.Posted_Order_No);
    end if;
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      Hiring_Cv_Contract_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Post(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Post(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    if not Hpd_Pref.g_Migration_Active then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    
      if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
         Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
        Check_Fte_Limit(i_Company_Id => r_Journal.Company_Id,
                        i_Filial_Id  => r_Journal.Filial_Id,
                        i_Journal_Id => r_Journal.Journal_Id);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Secondary) nulls first) -- firstly secondary jobs line unposted
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Unpost
  (
    i_Journal Hpd_Journals%rowtype,
    i_Repost  boolean
  ) is
  begin
    for r in (select q.*, --
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      continue when i_Repost and r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date);
    
      Cv_Contract_Unpost(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Staff_Id = w.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(w.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls first) -- firstly primary jobs line reopen
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     (select w.Interval_Id
                        from Hpd_Timeoff_Intervals w
                       where w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Timeoff_Id = q.Timeoff_Id) as Interval_Id
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      z_Hpd_Timeoff_Intervals.Delete_One(i_Company_Id => r.Company_Id,
                                         i_Filial_Id  => r.Filial_Id,
                                         i_Timeoff_Id => r.Timeoff_Id);
    
      Lock_Interval_Delete(i_Company_Id  => r.Company_Id,
                           i_Filial_Id   => r.Filial_Id,
                           i_Interval_Id => r.Interval_Id,
                           i_Timeoff_Id  => r.Timeoff_Id);
    
      Remove_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Remove_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Unpost(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Turnout_Adjustment  number;
    v_Overtime_Adjustment number;
    v_Lack_Tk_Id          number;
    v_Timesheet_Id        number;
  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select q.Staff_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      continue when v_Timesheet_Id is null;
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Overtime_Adjustment);
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Turnout_Adjustment);
    end loop;
  
    for r in (select Df.*,
                     Ts.Timesheet_Id,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = La.Company_Id
                            and Tl.Filial_Id = La.Filial_Id
                            and Tl.Staff_Id = La.Staff_Id
                            and Tl.Timesheet_Date = La.Adjustment_Date),
                         'N') Timesheet_Locked
                from Hpd_Lock_Adjustments La
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = La.Company_Id
                 and Df.Filial_Id = La.Filial_Id
                 and Df.Staff_Id = La.Staff_Id
                 and Df.Adjustment_Date = La.Adjustment_Date
                join Htt_Timesheets Ts
                  on Ts.Company_Id = La.Company_Id
                 and Ts.Filial_Id = La.Filial_Id
                 and Ts.Staff_Id = La.Staff_Id
                 and Ts.Timesheet_Date = La.Adjustment_Date
               where La.Company_Id = i_Journal.Company_Id
                 and La.Filial_Id = i_Journal.Filial_Id
                 and La.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Timesheet_Locked = 'Y' then
        z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Journal.Company_Id,
                                         i_Filial_Id    => i_Journal.Filial_Id,
                                         i_Timesheet_Id => r.Timesheet_Id,
                                         i_Time_Kind_Id => v_Lack_Tk_Id,
                                         i_Fact_Value   => Option_Number(r.Fact_Value));
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Journal.Company_Id,
                                         i_Filial_Id      => i_Journal.Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Adjustment_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Htt_Core.Make_Dirty_Timesheet(i_Company_Id   => i_Journal.Company_Id,
                                      i_Filial_Id    => i_Journal.Filial_Id,
                                      i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    delete from Hpd_Lock_Adjustments q
     where q.Company_Id = i_Journal.Company_Id
       and q.Filial_Id = i_Journal.Filial_Id
       and q.Journal_Id = i_Journal.Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'N' then
      Hpd_Error.Raise_023(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_070(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      Hiring_Cv_Contract_Unpost(r_Journal, i_Repost);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Unpost(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Unpost(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    r_Journal.Posted := 'N';
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    if not i_Repost then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Accrual    boolean := true
  ) is
    v_Part       Hpd_Pref.Transaction_Part_Rt;
    v_Parts      Hpd_Pref.Transaction_Part_Nt;
    v_Days_Count number;
    v_Coef       number := 1;
  begin
    if not i_Accrual then
      v_Coef := -1;
    end if;
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Begin_Date        => i_Begin_Date,
                                                     i_End_Date          => i_End_Date,
                                                     i_Trans_Types       => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Vacation_Limit),
                                                     i_Partition_By_Year => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Part := v_Parts(i);
    
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => v_Part.Part_Begin,
                                         i_End_Date   => v_Part.Part_End);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Part.Part_Begin,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Part.Part_Begin),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => v_Coef * v_Days_Count);
    end loop;
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => true);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => false);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date,
    i_Kind            varchar2,
    i_Assertable      boolean := true,
    i_Journal_Type_Id number := null,
    o_Interval_Id     out number
  ) is
    v_Intersect_Begin date;
    v_Intersect_End   date;
    v_Interval_Kind   varchar2(1) := i_Kind;
  
    --------------------------------------------------
    Function Get_Timeoff_Interval_Kind return varchar2 is
    begin
      if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave;
      elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                              i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip;
      elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation;
      else
        b.Raise_Not_Implemented;
      end if;
    
      return null;
    end;
  begin
    if i_Assertable then
      -- assert locked interval intersection
      begin
        select q.Begin_Date, q.End_Date
          into v_Intersect_Begin, v_Intersect_End
          from Hpd_Lock_Intervals q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Staff_Id = i_Staff_Id
           and q.Kind = i_Kind
           and Greatest(q.Begin_Date, i_Begin_Date) <= Least(q.End_Date, i_End_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          v_Interval_Kind := Get_Timeoff_Interval_Kind;
        end if;
      
        Hpd_Error.Raise_024(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Interval_Begin  => i_Begin_Date,
                            i_Interval_End    => i_End_Date,
                            i_Intersect_Begin => v_Intersect_Begin,
                            i_Intersect_End   => v_Intersect_End,
                            i_Interval_Kind   => v_Interval_Kind);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  
    o_Interval_Id := Hpd_Next.Lock_Interval_Id;
  
    z_Hpd_Lock_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Interval_Id => o_Interval_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => i_End_Date,
                                    i_Kind        => i_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Trans_Id                   number;
    v_Parts                      Hpd_Pref.Transaction_Part_Nt;
    v_Oper_Type_Ids              Array_Number;
    v_Oper_Group_Id              number;
    v_No_Deduction_Oper_Group_Id number;
    v_Deduction_Oper_Group_Id    number;
    v_Overtime_Oper_Group_Id     number;
    o_Interval_Id                number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hpr_Timebook_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Timebook_Id => i_Timebook_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Interval_Id => o_Interval_Id);
  
    v_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_No_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage_No_Deduction);
  
    v_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                        i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Penalty_For_Discipline);
  
    v_Overtime_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                       i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Overtime);
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                     i_Filial_Id       => i_Filial_Id,
                                                     i_Staff_Id        => i_Staff_Id,
                                                     i_Begin_Date      => i_Begin_Date,
                                                     i_End_Date        => i_End_Date,
                                                     i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                         Hpd_Pref.c_Transaction_Type_Operation,
                                                                                         Hpd_Pref.c_Transaction_Type_Schedule,
                                                                                         Hpd_Pref.c_Transaction_Type_Currency),
                                                     i_With_Wage_Scale => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                                i_Period     => v_Parts(i).Part_Begin);
    
      select t.Oper_Type_Id
        bulk collect
        into v_Oper_Type_Ids
        from Hpd_Trans_Oper_Types t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Trans_Id = v_Trans_Id
         and exists (select 1
                from Hpr_Oper_Types s
               where s.Company_Id = t.Company_Id
                 and s.Oper_Type_Id = t.Oper_Type_Id
                 and s.Oper_Group_Id in (v_Oper_Group_Id,
                                         v_No_Deduction_Oper_Group_Id,
                                         v_Deduction_Oper_Group_Id,
                                         v_Overtime_Oper_Group_Id));
    
      for j in 1 .. v_Oper_Type_Ids.Count
      loop
        -- this situation must be taken into account
        Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                               i_Filial_Id    => i_Filial_Id,
                               i_Interval_Id  => o_Interval_Id,
                               i_Staff_Id     => i_Staff_Id,
                               i_Oper_Type_Id => v_Oper_Type_Ids(j),
                               i_Begin_Date   => v_Parts(i).Part_Begin,
                               i_End_Date     => v_Parts(i).Part_End);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Parts        Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
    v_Trans_Types  Array_Varchar2;
    v_Oper_Type_Id number;
    o_Interval_Id  number;
    r_Staff        Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Staff_Id        => i_Staff_Id,
                         i_Begin_Date      => i_Begin_Date,
                         i_End_Date        => i_End_Date,
                         i_Kind            => Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                         i_Journal_Type_Id => i_Journal_Type_Id,
                         o_Interval_Id     => o_Interval_Id);
  
    z_Hpd_Timeoff_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Timeoff_Id  => i_Timeoff_Id,
                                       i_Interval_Id => o_Interval_Id);
  
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Sick_Leave);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Business_Trip);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Vacation);
      v_Trans_Types  := Array_Varchar2();
    else
      b.Raise_Not_Implemented;
    end if;
  
    if v_Trans_Types.Count > 0 then
      v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                       i_Filial_Id       => i_Filial_Id,
                                                       i_Staff_Id        => i_Staff_Id,
                                                       i_Begin_Date      => i_Begin_Date,
                                                       i_End_Date        => i_End_Date,
                                                       i_Trans_Types     => v_Trans_Types,
                                                       i_With_Wage_Scale => true);
    else
      r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
    
      v_Parts.Extend();
      v_Parts(v_Parts.Count) := Hpd_Pref.Transaction_Part_Rt(Part_Begin => Greatest(i_Begin_Date,
                                                                                    r_Staff.Hiring_Date),
                                                             Part_End   => Least(i_End_Date,
                                                                                 Nvl(r_Staff.Dismissal_Date,
                                                                                     i_End_Date)));
    end if;
  
    for i in 1 .. v_Parts.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Id,
                             i_Begin_Date   => v_Parts(i).Part_Begin,
                             i_End_Date     => v_Parts(i).Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
    v_Trans_Id              number;
    r_Staff_Plan            Hper_Staff_Plans%rowtype;
    v_Oper_Type_Ids         Array_Number;
    v_Perf_Oper_Group_Id    number;
    v_Penalty_Oper_Group_Id number;
    v_Begin_Date            date;
    v_End_Date              date;
    v_Trans_Date            date;
    o_Interval_Id           number;
    r_Staff                 Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Performance,
                         i_Assertable  => false,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hper_Staff_Plan_Intervals.Insert_One(i_Company_Id    => i_Company_Id,
                                           i_Filial_Id     => i_Filial_Id,
                                           i_Staff_Plan_Id => i_Staff_Plan_Id,
                                           i_Interval_Id   => o_Interval_Id);
  
    v_Perf_Oper_Group_Id    := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf);
    v_Penalty_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf_Penalty);
  
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    v_Begin_Date := Greatest(i_Begin_Date, r_Staff.Hiring_Date);
    v_End_Date   := Least(i_End_Date, Nvl(r_Staff.Dismissal_Date, i_End_Date));
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => i_Staff_Plan_Id);
  
    select max(q.Begin_Date)
      into v_Trans_Date
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Page_Id = r_Staff_Plan.Journal_Page_Id;
  
    v_Trans_Date := Greatest(v_Trans_Date, v_Begin_Date);
  
    v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                              i_Period     => v_Trans_Date);
  
    select t.Oper_Type_Id
      bulk collect
      into v_Oper_Type_Ids
      from Hpd_Trans_Oper_Types t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Trans_Id = v_Trans_Id
       and exists
     (select 1
              from Hpr_Oper_Types s
             where s.Company_Id = t.Company_Id
               and s.Oper_Type_Id = t.Oper_Type_Id
               and s.Oper_Group_Id in (v_Perf_Oper_Group_Id, v_Penalty_Oper_Group_Id));
  
    for j in 1 .. v_Oper_Type_Ids.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Ids(j),
                             i_Begin_Date   => v_Begin_Date,
                             i_End_Date     => v_End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  ) is
    v_Interval_Id number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => i_Interval_Kind,
                         o_Interval_Id => v_Interval_Id);
  
    z_Hpr_Sales_Bonus_Payment_Intervals.Insert_One(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Operation_Id => i_Operation_Id,
                                                   i_Interval_Id  => v_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  ) is
    r_Interval   Hpd_Lock_Intervals%rowtype;
    v_Begin_Date date;
    v_End_Date   date;
  begin
    select q.Begin_Date, q.End_Date
      into v_Begin_Date, v_End_Date
      from Hpr_Charges q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = i_Interval_Id
       and q.Status <> Hpr_Pref.c_Charge_Status_New
       and Rownum = 1;
  
    r_Interval := z_Hpd_Lock_Intervals.Lock_Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Interval_Id => i_Interval_Id);
  
    if r_Interval.Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
      r_Interval.Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Timeoff_Id => i_Timeoff_Id);
    end if;
  
    Hpd_Error.Raise_025(i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => r_Interval.Company_Id,
                                                                i_Filial_Id  => r_Interval.Filial_Id,
                                                                i_Staff_Id   => r_Interval.Staff_Id),
                        i_Interval_Kind => r_Interval.Kind,
                        i_Charge_Begin  => v_Begin_Date,
                        i_Charge_End    => v_End_Date);
  exception
    when No_Data_Found then
      z_Hpd_Lock_Intervals.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Interval_Id => i_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Staff_Id       number,
    i_Begin_Date     date,
    i_End_Date       date,
    i_Remove_Timeoff boolean := false
  ) is
  begin
    Htt_Core.Gen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                               i_Filial_Id      => i_Filial_Id,
                               i_Timeoff_Id     => i_Timeoff_Id,
                               i_Remove_Timeoff => i_Remove_Timeoff);
  
    for r in (select Tl.Timebook_Id
                from Hpr_Timesheet_Locks Tl
               where Tl.Company_Id = i_Company_Id
                 and Tl.Filial_Id = i_Filial_Id
                 and Tl.Staff_Id = i_Staff_Id
                 and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
               group by Tl.Timebook_Id)
    loop
      -- careful with hpd_core <=> hpr_core recursion
      Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Timebook_Id => r.Timebook_Id,
                                    i_Staff_Id    => i_Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
    v_Timeoff_Tk_Id  number;
    v_Turnout_Id     number;
    v_Turnout_Locked varchar2(1);
    v_Timeoff_Date   date := i_Begin_Date;
  
    --------------------------------------------------
    Procedure Assert_No_Timesheet_Adjustments
    (
      i_Company_Id      number,
      i_Filial_Id       number,
      i_Staff_Id        number,
      i_Timeoff_Id      number,
      i_Adjustment_Date date
    ) is
    begin
      if z_Hpd_Lock_Adjustments.Exist(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Adjustment_Date => i_Adjustment_Date) then
        Hpd_Error.Raise_076(i_Interval_Kind   => Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                                           i_Filial_Id  => i_Filial_Id,
                                                                           i_Timeoff_Id => i_Timeoff_Id),
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Adjustment_Date => i_Adjustment_Date);
      end if;
    end;
  
  begin
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Sick);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Trip);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
      v_Timeoff_Tk_Id  := z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
                          i_Filial_Id => i_Filial_Id, --
                          i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    while v_Timeoff_Date <= i_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist_Lock(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => v_Timeoff_Date) and
         Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                 i_Filial_Id      => i_Filial_Id,
                                 i_Staff_Id       => i_Staff_Id,
                                 i_Timesheet_Date => v_Timeoff_Date,
                                 i_Time_Kind_Id   => v_Turnout_Id) > 0 then
        v_Turnout_Locked := 'Y';
      else
        v_Turnout_Locked := 'N';
      end if;
    
      Assert_No_Timesheet_Adjustments(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Timeoff_Id      => i_Timeoff_Id,
                                      i_Adjustment_Date => v_Timeoff_Date);
    
      z_Hpd_Timeoff_Days.Insert_One(i_Company_Id     => i_Company_Id,
                                    i_Filial_Id      => i_Filial_Id,
                                    i_Staff_Id       => i_Staff_Id,
                                    i_Timeoff_Date   => v_Timeoff_Date,
                                    i_Timeoff_Id     => i_Timeoff_Id,
                                    i_Time_Kind_Id   => v_Timeoff_Tk_Id,
                                    i_Turnout_Locked => v_Turnout_Locked);
    
      v_Timeoff_Date := v_Timeoff_Date + 1;
    end loop;
  
    Regen_Timeoff_Facts(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Timeoff_Id => i_Timeoff_Id,
                        i_Staff_Id   => i_Staff_Id,
                        i_Begin_Date => i_Begin_Date,
                        i_End_Date   => i_End_Date);
  
    if v_Vacation_Tk_Id = v_Timeoff_Tk_Id and
       Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) then
      Spend_Vacation_Days(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    if Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) and --
       v_Vacation_Tk_Id = --
       z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
       i_Filial_Id => i_Filial_Id, --
       i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id then
      Free_Vacation_Days(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
    end if;
  
    Regen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                        i_Filial_Id      => i_Filial_Id,
                        i_Timeoff_Id     => i_Timeoff_Id,
                        i_Staff_Id       => i_Staff_Id,
                        i_Begin_Date     => i_Begin_Date,
                        i_End_Date       => i_End_Date,
                        i_Remove_Timeoff => true);
  
    delete Hpd_Timeoff_Days Td
     where Td.Company_Id = i_Company_Id
       and Td.Filial_Id = i_Filial_Id
       and Td.Timeoff_Id = i_Timeoff_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_026(i_Contract_Id);
    end if;
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                            i_Filial_Id   => r_Contract.Filial_Id,
                                            i_Contract_Id => r_Contract.Contract_Id,
                                            i_Month       => Trunc(r_Contract.End_Date, 'mon'));
    else
      r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
      r_Contract.End_Date   := Trunc(r_Contract.End_Date, 'mon');
    
      while r_Contract.Begin_Date <= r_Contract.End_Date
      loop
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                              i_Filial_Id   => r_Contract.Filial_Id,
                                              i_Contract_Id => r_Contract.Contract_Id,
                                              i_Month       => r_Contract.Begin_Date);
      
        r_Contract.Begin_Date := Add_Months(r_Contract.Begin_Date, 1);
      end loop;
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r_Contract.Company_Id,
                                  i_Filial_Id   => r_Contract.Filial_Id,
                                  i_Contract_Id => r_Contract.Contract_Id,
                                  i_Posted      => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    v_Month    date;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_027(i_Contract_Id);
    end if;
  
    begin
      select q.Month
        into v_Month
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = r_Contract.Company_Id
         and q.Filial_Id = r_Contract.Filial_Id
         and q.Contract_Id = r_Contract.Contract_Id
         and q.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New
         and Rownum = 1;
    
      Hpd_Error.Raise_028(i_Person_Name => z_Mr_Natural_Persons.Load(i_Company_Id => r_Contract.Company_Id, --
                                           i_Person_Id => r_Contract.Person_Id).Name,
                          i_Fact_Month  => v_Month);
    exception
      when No_Data_Found then
        delete from Hpr_Cv_Contract_Facts q
         where q.Company_Id = r_Contract.Company_Id
           and q.Filial_Id = r_Contract.Filial_Id
           and q.Contract_Id = r_Contract.Contract_Id;
    end;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Posted            => Option_Varchar2('N'),
                                  i_Early_Closed_Date => Option_Date(null),
                                  i_Early_Closed_Note => Option_Varchar2(null));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
    r_Contract    Hpd_Cv_Contracts%rowtype;
    v_Begin_Month date;
  
    --------------------------------------------------
    Function Exist_Fact(i_Month date) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Contract_Id = i_Contract_Id
         and q.Month = i_Month
         and Rownum = 1;
      return true;
    
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Procedure Gen(i_Month date) is
    begin
      if not Exist_Fact(i_Month) then
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Contract_Id => i_Contract_Id,
                                              i_Month       => i_Month);
      end if;
    end;
  begin
    if i_Early_Closed_Date is null then
      Hpd_Error.Raise_031(i_Contract_Id);
    end if;
  
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_029(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Early_Closed_Date => Option_Date(i_Early_Closed_Date),
                                  i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
  
    r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
    r_Contract.End_Date   := Trunc(i_Early_Closed_Date, 'mon');
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Gen(r_Contract.End_Date);
    else
      v_Begin_Month := r_Contract.Begin_Date;
    
      while v_Begin_Month <= r_Contract.End_Date
      loop
        Gen(v_Begin_Month);
        v_Begin_Month := Add_Months(v_Begin_Month, 1);
      end loop;
    end if;
  
    Hpr_Core.Cv_Contract_Facts_Delete(i_Company_Id        => r_Contract.Company_Id,
                                      i_Filial_Id         => r_Contract.Filial_Id,
                                      i_Contract_Id       => r_Contract.Contract_Id,
                                      i_Begin_Date        => r_Contract.Begin_Date,
                                      i_Early_Closed_Date => i_Early_Closed_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_041(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Delete_One(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id)
    loop
      z_Hpd_Hirings.Update_One(i_Company_Id     => r.Company_Id,
                               i_Filial_Id      => r.Filial_Id,
                               i_Page_Id        => r.Page_Id,
                               i_Dismissal_Date => Option_Date(i_Early_Closed_Date));
    
      z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r.Company_Id,
                                    i_Filial_Id         => r.Filial_Id,
                                    i_Contract_Id       => r.Contract_Id,
                                    i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
    end loop;
  
    Hpd_Core.Journal_Unpost(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => i_Journal_Id,
                            i_Repost     => true);
  
    Hpd_Core.Journal_Post(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id
                 and q.Page_Id not member of i_Page_Ids)
    loop
      Cv_Contract_Delete(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  ) is
  begin
    Href_Core.Send_Application_Notification(i_Company_Id         => i_Company_Id,
                                            i_Filial_Id          => i_Filial_Id,
                                            i_Title              => i_Title,
                                            i_Form               => Hpd_Pref.c_Form_Application_List,
                                            i_Action_Keys        => i_Grants,
                                            i_Uri                => i_Uri,
                                            i_Uri_Param          => i_Uri_Param,
                                            i_Except_User_Id     => i_Except_User_Id,
                                            i_Additional_User_Id => i_Created_By);
  end;

end Hpd_Core;
/

create or replace package Hpd_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name        varchar2,
    i_Intersection_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name    varchar2,
    i_Exceed_Date   date,
    i_Exceed_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name       varchar2,
    i_First_Dismissal  date,
    i_Second_Dismissal date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Interval_Kind varchar2,
    i_Trans_Type    varchar2,
    i_Staff_Name    varchar2,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name     varchar2,
    i_Trans_Type     varchar2,
    i_Trans_Date     date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name       varchar2,
    i_Primary_Hiring   date,
    i_Secondary_Hiring date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name          varchar2,
    i_Primary_Dismissal   date,
    i_Secondary_Dismissal date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Dismissed_Cnt number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name       varchar2,
    i_Secondary_Hiring date,
    i_Primary_Hiring   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Staff_Name      varchar2,
    i_Interval_Begin  date,
    i_Interval_End    date,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Interval_Kind   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025
  (
    i_Staff_Name    varchar2,
    i_Interval_Kind varchar2,
    i_Charge_Begin  date,
    i_Charge_End    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Person_Name varchar2,
    i_Fact_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Timeoff_Id number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Staff_Name     varchar2,
    i_Journal_Number varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Overtime_Id number,
    i_Journal_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Staff_Name      varchar2,
    i_Oper_Group_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Journal_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Staff_Name varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_050
  (
    i_Date  date,
    i_Month date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date,
    i_Journal_Number  varchar2,
    i_Journal_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065(i_Application_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Application_Number        varchar2,
    i_Journal_Number            varchar2,
    i_Journal_Employee_Name     varchar2,
    i_Application_Employee_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Application_Number varchar2,
    i_Journal_Number     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Wrong_Application_Type    varchar2,
    i_Expected_Application_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073(i_Staff_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_074
  (
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Staff_Name     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Interval_Kind varchar2,
    i_Staff_Name    varchar2,
    i_Timeoff_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Interval_Kind   varchar2,
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078(i_Employee_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079(i_Application_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080(i_Application_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083(i_Staff_Name varchar2);
end Hpd_Error;
/
create or replace package body Hpd_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Href_Pref.c_Hpd_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Interval_Kind(i_Interval_Kind varchar2) return varchar2 is
  begin
    case i_Interval_Kind
      when Hpd_Pref.c_Lock_Interval_Kind_Timebook then
        return t('error:interval_kind:timebook');
      when Hpd_Pref.c_Lock_Interval_Kind_Performance then
        return t('error:interval_kind:perfomance');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip then
        return t('error:interval_kind:business_trip');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave then
        return t('error:interval_kind:sick_leave');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation then
        return t('error:interval_kind:vacation');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
        return t('error:interval_kind:timeoff');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales then
        return t('error:interval_kind:sales_bonus_personal_sales');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales then
        return t('error:interval_kind:sales_bonus_department_sales');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery then
        return t('error:interval_kind:sales_bonus_successful_delivery');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Trans_Type(i_Trans_Type varchar2) return varchar2 is
  begin
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        return t('error:trans_type:robot');
      when Hpd_Pref.c_Transaction_Type_Operation then
        return t('error:trans_type:operation');
      when Hpd_Pref.c_Transaction_Type_Schedule then
        return t('error:trans_type:schedule');
      when Hpd_Pref.c_Transaction_Type_Rank then
        return t('error:trans_type:rank');
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        return t('error:trans_type:vacation limit');
      when Hpd_Pref.c_Transaction_Type_Currency then
        return t('error:trans_type:currency');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Source_Info
  (
    i_Jounal_Id         number,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number,
    o_Source_Name       out varchar2,
    o_Source_Id         out number
  ) is
  begin
    if i_Source_Table is null then
      o_Source_Name := i_Journal_Type_Name;
      o_Source_Id   := i_Jounal_Id;
    elsif i_Source_Table = Zt.Htm_Recommended_Rank_Documents.Name then
      o_Source_Name := t('error:source:recommended rank document');
      o_Source_Id   := i_Source_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:unpost staff $1 hiring', i_Staff_Name),
          i_Title   => t('001:title:cannot delete staff'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name        varchar2,
    i_Intersection_Date date
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:employee $1{employee_name} staffs intersect on $2{intersection_date}',
                         i_Staff_Name,
                         i_Intersection_Date),
          i_Title   => t('002:title:staff intersection found'),
          i_S1      => t('002:solution:move hiring date after $2{intersection_date}',
                         i_Intersection_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:got unregistered vacation turnover days kind'),
          i_Title   => t('003:title:days kind not found {vacation turnover days kind}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name    varchar2,
    i_Exceed_Date   date,
    i_Exceed_Amount number
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:cannot post vacation for $1{staff_name} on $2{exceed_date}, exceed_amount=$3',
                         i_Staff_Name,
                         i_Exceed_Date,
                         i_Exceed_Amount),
          i_Title   => t('004:title:vacation limit exceeded'),
          i_S1      => t('004:solution:add vacation limit days or decrease vacation days'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name       varchar2,
    i_First_Dismissal  date,
    i_Second_Dismissal date
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:staff $1{staff_name} has dismissal on $1{first_dismissal_date} and $2{second_dismissal_data_two}',
                         i_Staff_Name,
                         i_First_Dismissal,
                         i_Second_Dismissal),
          i_Title   => t('005:title:two dismissals found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Interval_Kind varchar2,
    i_Trans_Type    varchar2,
    i_Staff_Name    varchar2,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
    v_t_Trans_Type    varchar2(50) := t_Trans_Type(i_Trans_Type);
  
    --------------------------------------------------
    Function Blocked_Period
    (
      i_Begin_Date date,
      i_End_Date   date
    ) return varchar2 is
      result varchar2(100) := to_char(i_End_Date, 'month yyyy');
    begin
      if Trunc(i_Begin_Date, 'mon') != Trunc(i_End_Date, 'mon') then
        result := to_char(i_Begin_Date, 'month yyyy') || ' – ' || result;
      end if;
    
      return result;
    end;
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:$1{interval_kind} blocks $2{trans_type} changes for staff $3{staff_name} between $4{begin_date} and $5{end_date}',
                         v_t_Interval_Kind,
                         v_t_Trans_Type,
                         i_Staff_Name,
                         i_Begin_Date,
                         i_End_Date),
          i_Title   => t('006:title:locked interval found'),
          i_S1      => t('006:solution:unpost $1{interval_kind} on $2{blocked_period}',
                         v_t_Interval_Kind,
                         Blocked_Period(i_Begin_Date, i_End_Date)),
          i_S2      => t('006:solution:move $1{trans_type} change date after $2{block_end_date}',
                         v_t_Trans_Type,
                         i_End_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes before hiring_date ($4{hiring_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Hiring_Date),
          i_Title   => t('007:title:found transaction before hiring'),
          i_S1      => t('007:solution:move transaction date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('007:solution:move hiring date before transaction date ($1{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name     varchar2,
    i_Trans_Type     varchar2,
    i_Trans_Date     date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes after dimissal ($4{dismissal_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Dismissal_Date),
          i_Title   => t('008:title:found transaction after dismissal'),
          i_S1      => t('008:solution:move transaction date before dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date),
          i_S2      => t('008:solution:move dismissal date after transaction date ($1{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:to remove $1{staff_name} hirings all transactions should be unposted',
                         i_Staff_Name),
          i_Title   => t('009:title:staff has posted transactions'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name       varchar2,
    i_Primary_Hiring   date,
    i_Secondary_Hiring date
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:secondary job for staff $1{staff_name} started ($2{secondary_hiring}) before primary job ($3{primary_hiring})',
                         i_Staff_Name,
                         i_Secondary_Hiring,
                         i_Primary_Hiring),
          i_Title   => t('010:title:secondary job cross out primary job'),
          i_S1      => t('010:solution:move secondary hiring date after primary hiring date ($1{primary_hiring})',
                         i_Primary_Hiring));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name          varchar2,
    i_Primary_Dismissal   date,
    i_Secondary_Dismissal date
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:secondary job for staff $1{staff_name} ended ($2{secondary_dismissal}) after primary job ($3{primary_dismissal})',
                         i_Staff_Name,
                         i_Secondary_Dismissal,
                         i_Primary_Dismissal),
          i_Title   => t('011:title:secondary job cross out primary job'),
          i_S1      => t('011:solution:move secondary dismissal date before primary dismissal date ($1{primary_hiring})',
                         i_Primary_Dismissal));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:staff $1{staff_name} secondary job requires primary job to be created',
                         i_Staff_Name),
          i_Title   => t('012:title:primary job not found'),
          i_S1      => t('012:solution:create primary job for staff $1{staff_name} before $2{hiring_date}',
                         i_Staff_Name,
                         i_Hiring_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:multiple primary jobs found after $1{hiring_date} for staff $2{staff_name}',
                         i_Hiring_Date,
                         i_Staff_Name),
          i_Title   => t('013:title:secondary job intersects multiple primary jobs'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes before hiring_date ($4{hiring_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Hiring_Date),
          i_Title   => t('014:title:transaction before hiring date'),
          i_S1      => t('014:solution:move transaction date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('014:solution:move hiring date before transaction date ($2{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Dismissed_Cnt number
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:staff $1{staff_name} was dismissed $2{dismissed_cnt} times',
                         i_Staff_Name,
                         i_Dismissed_Cnt),
          i_Title   => t('015:title:multiple dismissals found'),
          i_S1      => t('015:solution:unpost one of dismissals'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:hiring date ($1{hiring_date}) for staff $2{staff_name} should not come after dismissal date ($3{dismissal_date})',
                         i_Hiring_Date,
                         i_Staff_Name,
                         i_Dismissal_Date),
          i_Title   => t('016:title:hiring after dismissal'),
          i_S1      => t('016:solution:move hiring date before dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date),
          i_S2      => t('016:solution:move dismissal date after desired hiring date ($1{hiring_date})',
                         i_Hiring_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:cannot remove hiring. staff $1{staff_name} is already dismissed',
                         i_Staff_Name),
          i_S1      => t('017:solution:unpost dismissal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:cannot remove hiring. staff $1{staff_name} has secondary jobs',
                         i_Staff_Name),
          i_S1      => t('018:solution:remove all secondary jobs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name       varchar2,
    i_Secondary_Hiring date,
    i_Primary_Hiring   date
  ) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:cannot change hiring date. secondary job for staff $1{staff_name} starts ($2{secondary_hiring}) before hiring date ($3{primary_hiring})',
                         i_Staff_Name,
                         i_Secondary_Hiring,
                         i_Primary_Hiring),
          i_S1      => t('019:solution:move hiring date before secondary job start ($1{secondary_hiring})',
                         i_Secondary_Hiring),
          i_S2      => t('019:solution:move secondary job start after hiring date ($1{orimary_hiring})',
                         i_Primary_Hiring));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:dismissal date ($1{dismissal_date}) for staff $2{staff_name} should not come before hiring date ($3{hiring_date})',
                         i_Dismissal_Date,
                         i_Staff_Name,
                         i_Hiring_Date),
          i_Title   => t('020:title:dismissal before hiring'),
          i_S1      => t('020:solution:move dismissal date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('020:solution:move hiring date before desired dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:staff kind changed for staff $1{staff_name} when transfering other position',
                         i_Staff_Name),
          i_Title   => t('021:title:cannot change staff kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:journal $1{journal_number} already posted', i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:to unpost journal $1{journal_number} it should be initially posted',
                         i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Staff_Name      varchar2,
    i_Interval_Begin  date,
    i_Interval_End    date,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Interval_Kind   varchar2
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Begin_Inside boolean := i_Interval_Begin between i_Intersect_Begin and i_Intersect_End;
      v_End_Inside   boolean := i_Interval_End between i_Intersect_Begin and i_Intersect_End;
    begin
      case
        when v_Begin_Inside and not v_End_Inside then
          return t('024:solution:move $1{interval_kind} start date after $2{intersect_end}',
                   v_t_Interval_Kind,
                   i_Intersect_End);
        when not v_Begin_Inside and v_End_Inside then
          return t('024:solution:move $1{interval_kind} end date before $2{intersect_start}',
                   v_t_Interval_Kind,
                   i_Intersect_Begin);
        when v_Begin_Inside and v_End_Inside then
          return t('024:solution:move $1{interval_kind} out of $2{intersect_start} and $3{intersect_end}',
                   v_t_Interval_Kind,
                   i_Intersect_Begin,
                   i_Intersect_End);
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:found intersection for staff $1{staff_name} on $2{intersect_start} – $3{intersect_date}',
                         i_Staff_Name,
                         i_Intersect_Begin,
                         i_Intersect_End),
          i_Title   => t('024:title:cannot post $1{interval_kind}', v_t_Interval_Kind),
          i_S1      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025
  (
    i_Staff_Name    varchar2,
    i_Interval_Kind varchar2,
    i_Charge_Begin  date,
    i_Charge_End    date
  ) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot unpost $1{interval_kind} for staff $2{staff_name}, found charge linked to interval on $3{charge_begin} – $4{charge_end}',
                         t_Interval_Kind(i_Interval_Kind),
                         i_Staff_Name,
                         i_Charge_Begin,
                         i_Charge_End),
          i_Title   => t('025:title:used charge found'),
          i_S1      => t('025:solution:remove charge by deleting its book'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Contract_Id number) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:cv contract $1{contract_id} already posted', i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Contract_Id number) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:to unpost cv contract $1{contract_id} it should be initially posted',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Person_Name varchar2,
    i_Fact_Month  date
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:cannot unpost cv contract for $1{person_name}, found facts linked to interval on $2{facts_month}',
                         i_Person_Name,
                         to_char(i_Fact_Month, 'month yyyy')),
          i_Title   => t('028:title:used facts found'),
          i_S1      => t('028:solution:unpost facts and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Contract_Id number) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:to early close cv contract $1{contract_id} it should be initially posted',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030 is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:fatal:there is not any changed transactions'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Contract_Id number) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:cv contract $1{contract_id} must have date for early closure',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Timeoff_Id number,
    i_Journal_Id number
  ) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:cannot save timeoff. Timeoffs journal cannot be changed, trying to change timeoff $1{timeoff_id} in journal $2{journal_id}',
                         i_Timeoff_Id,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:to delete staff first unpost staff $1 hiring', i_Staff_Name),
          i_Title   => t('033:title:cannot delete staff'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:expected journal types $1{journal types} but got $2{wrong_journal_type}',
                         Fazo.Gather(i_Expected_Types, ', '),
                         i_Journal_Type),
          i_Title   => t('034:title:wrong journal type'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:cannot change/save journal. journal $1{journal_number} already posted',
                         i_Journal_Number),
          i_S1      => t('035:solution:post journal with changes'),
          i_S2      => t('035:solution:unpost journal then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:journal type was $1{wrong_journal_type} but got expected journal types $2{journal types}',
                         i_Journal_Type,
                         Fazo.Gather(i_Expected_Types, ', ')),
          i_Title   => t('036:title:journal type cannot change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Staff_Name     varchar2,
    i_Journal_Number varchar2
  ) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:cannot delete hiring for staff $1{staff_name} found journal $2{journal_number} linked to staff',
                         i_Staff_Name,
                         i_Journal_Number),
          i_Title   => t('037:title:staff linked other journals'),
          i_S1      => t('037:solution:remove staff from journal $1{journal_number} and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:cannot delete journal. journal $1{journal_number} already posted',
                         i_Journal_Number),
          i_S1      => t('038:solution:unpost journal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039(i_Contract_Id number) is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:contract $1{contract_id} has no items, when access to add item is No contract must have at least one item',
                         i_Contract_Id),
          i_Title   => t('039:title:no contract items'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040(i_Contract_Id number) is
  begin
    Error(i_Code    => '040',
          i_Message => t('040:message:cannot change/save cv contract. cv contract $1{contract_id} already posted',
                         i_Contract_Id),
          i_S1      => t('040:solution:post contract with changes'),
          i_S2      => t('040:solution:unpost contract then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041(i_Contract_Id number) is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:cannot delete cv contract. cv contract $1{contract_id} must be unposted',
                         i_Contract_Id),
          i_S1      => t('041:solution:unpost contract and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Overtime_Id number,
    i_Journal_Id  number
  ) is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:cannot save overtime. overtimes journal cannot be changed, trying to change overtime $1{overtime_id} in journal $2{journal_id}',
                         i_Overtime_Id,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043 is
  begin
    Error(i_Code => '043', i_Message => t('043:message:journal type not registered'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Staff_Name      varchar2,
    i_Oper_Group_Name varchar2
  ) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:staff $1{staff_name} has several oper types attached for $2{oper_group_name}',
                         i_Staff_Name,
                         i_Oper_Group_Name),
          i_S1      => t('044:solution:remove all but one oper types and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045 is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:singular type journal cannot contain more than 1 page'),
          i_S1      => t('045:solution:change journal type to multiple'),
          i_S2      => t('045:solution:send each page in separate journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Journal_Type_Name varchar2) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:cannot change existing journal type'),
          i_S1      => t('046:solution:restore old journal type $1{journal_type_name}',
                         i_Journal_Type_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047 is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:cannot change page in singular journal type'),
          i_S1      => t('047:solution:change journal type to multiple'),
          i_S2      => t('047:solution:send each employee in separate journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048 is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:too many pages. given journal has several journals, route ($1{request_route_uri}) allows only one page per journal',
                         b_Session.Request_Route_Uri));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '049',
          i_Message => t('049:message:schedule for $1{staff_name} is not selected in schedule change journal',
                         i_Staff_Name),
          i_S1      => t('049:solution:select schedule for $1{staff_name}', i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_050
  (
    i_Date  date,
    i_Month date
  ) is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:given overtime date $1 doesnt belong to the given month $2',
                         i_Date,
                         i_Month));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051 is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:too many overtime journals assigned to one journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:chosen time kind $1{time_kind_name} is not a vacation time kind',
                         i_Time_Kind_Name),
          i_Title   => t('052:title:wrong time kind'),
          i_S1      => t('052:solution:choose vacation time kind or one of its descendants'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date,
    i_Journal_Number  varchar2,
    i_Journal_Date    date
  ) is
  begin
    Error(i_Code    => '053',
          i_Message => t('053:message:timebook adjustment for $1{staff_name} on $2{adjustment_date} has already been calced in $3{journal_number} from $4{journal_date}',
                         i_Staff_Name,
                         i_Adjustment_Date,
                         i_Journal_Number,
                         i_Journal_Date),
          i_Title   => t('053:title:timebook adjustment has already been calced'),
          i_S1      => t('053:solution:remove adjustment  for $1{staff_name} on $2{adjustment_date} from journal and try again',
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_S2      => t('053:solution:unpost journal $1{journal_number} from $2{journal_date} and try again',
                         i_Journal_Number,
                         i_Journal_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  ) is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:timesheet for $1{staff_name} on $2{adjustment_date} is not found',
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_Title   => t('054:title:timesheet is not found'),
          i_S1      => t('054:solution:set daily schedule for $1{staff_name} on $2{adjustment_date} and try again',
                         i_Staff_Name,
                         i_Adjustment_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:application $1{application_number} cannot be deleted in status $2{status_name}',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_S1      => t('055:solution:change status to new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:application $1{application_number} cannot be edited in status $2{status_name}',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_S1      => t('056:solution:change status to new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057 is
  begin
    Error(i_Code => '057', i_Message => t('057:message:application type not registered'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:status new{status_name} can only be assigned from status waiting{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('058:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:status waiting{status_name} can only be assigned from statuses (new, approved, canceled){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('059:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:status approved{status_name} can only be assigned from statuses (waiting, in progress){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('060:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:status in progress{status_name} can only be assigned from statuses (approved, complete){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('061:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:status complete{status_name} can only be assigned from status in progress{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('062:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '063',
          i_Message => t('063:message:status canceled{status_name} can only be assigned from status waiting{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('063:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '064',
          i_Message => t('064:message:application $1{application_number} result can be binded only when status is in progress{status_name}, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065(i_Application_Number varchar2) is
  begin
    Error(i_Code    => '065',
          i_Message => t('065:message:application $1{application_number} result not found',
                         i_Application_Number),
          i_S1      => t('065:solution:you might need to add a posted journal based on this application'),
          i_S2      => t('065:solution:you might need to add a robot based on this application'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Application_Number        varchar2,
    i_Journal_Number            varchar2,
    i_Journal_Employee_Name     varchar2,
    i_Application_Employee_Name varchar2
  ) is
  begin
    Error(i_Code    => '066',
          i_Message => t('066:message:application $1{application_number} based journal $2{journal_number} employee $3{employee_name} does not match with employee $4{employee_name} in application',
                         i_Application_Number,
                         i_Journal_Number,
                         i_Journal_Employee_Name,
                         i_Application_Employee_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Application_Number varchar2,
    i_Journal_Number     varchar2
  ) is
  begin
    Error(i_Code    => '067',
          i_Message => t('067:message:application $1{application_number} based journal $2{journal_number} already exists',
                         i_Application_Number,
                         i_Journal_Number),
          i_S1      => t('067:solution:you can delete journal $1{journal_number} and try to add new',
                         i_Journal_Number),
          i_S2      => t('067:solution:you can edit existing journal $1{journal_number}',
                         i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '068',
          i_Message => t('068:message:cannot change/save journal. the source of the journal $1{journal_number} cannot be changed',
                         i_Journal_Number),
          i_Title   => t('063:title:the source is changed'),
          i_S1      => t('068:solution:do this action in $1{source_name} form and source_id is $2{source_id}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '069',
          i_Message => t('069:message:cannot post journal. the source of the journal $1{journal_number} and the source of this action are not equal',
                         i_Journal_Number),
          i_Title   => t('069:title:the source is changed'),
          i_S1      => t('069:solution:do this action in $1{source_name} form and source_id is $2{source_id}',
                         v_Source_Name,
                         v_Source_Id),
          i_S2      => t('069:solution:remove this jounal from the list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '070',
          i_Message => t('070:message:cannot unpost/delete journal. the source of the journal $1{journal_number} and the source of this action are not equal',
                         i_Journal_Number),
          i_Title   => t('070:title:the source is changed'),
          i_S1      => t('070:solution:do this action in $1{source_name} form and source_id is $2{source_id}',
                         v_Source_Name,
                         v_Source_Id),
          i_S2      => t('070:solution:remove this jounal from the list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Wrong_Application_Type    varchar2,
    i_Expected_Application_Type varchar2
  ) is
  begin
    Error(i_Code    => '071',
          i_Message => t('071:message:when saving application expected $1{expected_application_type_name} application type, but got $2{wrong_application_type_name} application type',
                         i_Wrong_Application_Type,
                         i_Expected_Application_Type),
          i_Title   => t('071:title:application type cannot be changed'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072 is
  begin
    Error(i_Code    => '072',
          i_Message => t('072:message:you must select currency when it is enabled'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073(i_Staff_Id number) is
  begin
    Error(i_Code    => '073',
          i_Message => t('073:message:hiring journal not found, staff_id: $1{staff_id}', i_Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_074
  (
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Staff_Name     varchar2
  ) is
  begin
    Error(i_Code    => '074',
          i_Title   => t('074:title:continuous transaction'),
          i_Message => t('074:message:staff $1{staff_name} must have at least one continuous transaction',
                         i_Staff_Name),
          i_S1      => t('074:solution:in journal $1{journal_number} (ID: $2{journal_id}) remove end date',
                         i_Journal_Number,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Interval_Kind varchar2,
    i_Staff_Name    varchar2,
    i_Timeoff_Date  date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  begin
    Error(i_Code    => '075',
          i_Message => t('075:message:$1{interval_kind} blocks timesheet adjustments for staff $2{staff_name} on $3{timeoff_date}',
                         v_t_Interval_Kind,
                         i_Staff_Name,
                         i_Timeoff_Date),
          i_Title   => t('075:title:timeoff found'),
          i_S1      => t('075:solution:unpost $1{interval_kind} on $2{timeoff_date}',
                         v_t_Interval_Kind,
                         i_Timeoff_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Interval_Kind   varchar2,
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  begin
    Error(i_Code    => '076',
          i_Message => t('076:message:timesheet adjustment blocks $1{interval_kind} for staff $2{staff_name} on $3{adjustment_date}',
                         v_t_Interval_Kind,
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_Title   => t('076:title:timesheet adjustment found'),
          i_S1      => t('076:solution:unpost timesheet adjustment on $1{adjustment_date}',
                         i_Adjustment_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077 is
  begin
    Error(i_Code => '077', i_Message => t('077:message:you must select at least one region'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078(i_Employee_Name varchar2) is
  begin
    Error(i_Code    => '078',
          i_Message => t('078:message:fte of $1{employee_name} has exceeded the fte limit',
                         i_Employee_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079(i_Application_Number varchar2) is
  begin
    Error(i_Code    => '079',
          i_Message => t('079:message:application $1{application_number} must have at least one transferred staff',
                         i_Application_Number),
          i_Title   => t('079:title:no transfers found'),
          i_S1      => t('079:solution:try to add at least one staff transfer into application $1{application_number} and try again',
                         i_Application_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080(i_Application_Type_Name varchar2) is
  begin
    Error(i_Code    => '080',
          i_Message => t('080:message:application must have at least one staff transfer, application_type=$1',
                         i_Application_Type_Name),
          i_Title   => t('080:title:no transfers found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081 is
  begin
    Error(i_Code => '081', i_Message => t('081:message:contractor journal must have an end date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '082',
          i_Message => t('082:message:cannot change employment type to contractor'),
          i_S1      => t('082:solution:remove staff $1 from journal', i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '083',
          i_Message => t('083:message:cannot have contractor employees in transfer journal'),
          i_S1      => t('082:solution:remove staff $1 from journal', i_Staff_Name));
  end;

end Hpd_Error;
/

create or replace package Hpd_Pref is
  ----------------------------------------------------------------------------------------------------
  type Contract_Rt is record(
    Contract_Number      varchar2(50 char),
    Contract_Date        date,
    Fixed_Term           varchar2(1),
    Expiry_Date          date,
    Fixed_Term_Base_Id   number,
    Concluding_Term      varchar2(300 char),
    Hiring_Conditions    varchar2(300 char),
    Other_Conditions     varchar2(300 char),
    Workplace_Equipment  varchar2(300 char),
    Representative_Basis varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Robot_Rt is record(
    Robot_Id        number,
    Division_Id     number,
    Job_Id          number,
    Org_Unit_Id     number,
    Rank_Id         number,
    Wage_Scale_Id   number,
    Employment_Type varchar2(1),
    Fte_Id          number,
    Fte             number);
  ----------------------------------------------------------------------------------------------------
  type Page_Rt is record(
    Page_Id  number,
    Staff_Id number);
  type Page_Nt is table of Page_Rt;
  ---------------------------------------------------------------------------------------------------- 
  -- CV Contracts
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Item_Rt is record(
    Contract_Item_Id number,
    name             varchar2(150 char),
    Quantity         number,
    Amount           number);
  type Cv_Contract_Item_Nt is table of Cv_Contract_Item_Rt;
  ---------------------------------------------------------------------------------------------------- 
  type Cv_Contract_File_Rt is record(
    File_Sha varchar2(64),
    Note     varchar2(300 char));
  type Cv_Contract_File_Nt is table of Cv_Contract_File_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Cv_Contract_Rt is record(
    Company_Id               number,
    Filial_Id                number,
    Contract_Id              number,
    Contract_Number          varchar2(50),
    Page_Id                  number,
    Division_Id              number,
    Person_Id                number,
    Begin_Date               date,
    End_Date                 date,
    Contract_Kind            varchar2(1),
    Contract_Employment_Kind varchar2(1),
    Access_To_Add_Item       varchar2(1),
    Early_Closed_Date        date,
    Early_Closed_Note        varchar2(300 char),
    Note                     varchar2(300 char),
    Items                    Cv_Contract_Item_Nt,
    Files                    Cv_Contract_File_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Hiring
  ----------------------------------------------------------------------------------------------------
  type Hiring_Rt is record(
    Page_Id              number,
    Employee_Id          number,
    Staff_Number         varchar2(50),
    Hiring_Date          date,
    Dismissal_Date       date,
    Trial_Period         number,
    Employment_Source_Id number,
    Schedule_Id          number,
    Currency_Id          number,
    Vacation_Days_Limit  number,
    Robot                Robot_Rt,
    Contract             Contract_Rt,
    Cv_Contract          Cv_Contract_Rt,
    Indicators           Href_Pref.Indicator_Nt,
    Oper_Types           Href_Pref.Oper_Type_Nt);
  type Hiring_Nt is table of Hiring_Rt;
  ----------------------------------------------------------------------------------------------------
  type Hiring_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Hirings         Hiring_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Transfer
  ----------------------------------------------------------------------------------------------------
  type Transfer_Rt is record(
    Page_Id             number,
    Transfer_Begin      date,
    Transfer_End        date,
    Staff_Id            number,
    Schedule_Id         number,
    Currency_Id         number,
    Vacation_Days_Limit number,
    Transfer_Reason     varchar2(300 char),
    Transfer_Base       varchar2(300 char),
    Robot               Robot_Rt,
    Contract            Contract_Rt,
    Indicators          Href_Pref.Indicator_Nt,
    Oper_Types          Href_Pref.Oper_Type_Nt);
  type Transfer_Nt is table of Transfer_Rt;
  ----------------------------------------------------------------------------------------------------
  type Transfer_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Transfers       Transfer_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal
  ----------------------------------------------------------------------------------------------------
  type Dismissal_Rt is record(
    Page_Id              number,
    Staff_Id             number,
    Dismissal_Date       date,
    Dismissal_Reason_Id  number,
    Employment_Source_Id number,
    Based_On_Doc         varchar2(300 char),
    Note                 varchar2(300 char));
  type Dismissal_Nt is table of Dismissal_Rt;
  ----------------------------------------------------------------------------------------------------
  type Dismissal_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Dismissals      Dismissal_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Wage Change
  ----------------------------------------------------------------------------------------------------  
  type Wage_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Change_Date date,
    Currency_Id number,
    Indicators  Href_Pref.Indicator_Nt,
    Oper_Types  Href_Pref.Oper_Type_Nt);
  type Wage_Change_Nt is table of Wage_Change_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Wage_Change_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Wage_Changes    Wage_Change_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Rank Change
  ----------------------------------------------------------------------------------------------------  
  type Rank_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Change_Date date,
    Rank_Id     number);
  type Rank_Change_Nt is table of Rank_Change_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Rank_Change_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Journal_Type_Id number,
    Source_Table    varchar2(100),
    Source_Id       number,
    Rank_Changes    Rank_Change_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Vacation limit change
  ----------------------------------------------------------------------------------------------------  
  type Limit_Change_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Division_Id    number,
    Days_Limit     number,
    Change_Date    date,
    Pages          Page_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Schedule Change
  ----------------------------------------------------------------------------------------------------
  type Schedule_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Schedule_Id number);
  type Schedule_Change_Nt is table of Schedule_Change_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Change_Journal_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Journal_Id       number,
    Journal_Number   varchar2(50 char),
    Journal_Date     date,
    Journal_Name     varchar2(150 char),
    Division_Id      number,
    Begin_Date       date,
    End_Date         date,
    Schedule_Changes Schedule_Change_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sick Leave
  ----------------------------------------------------------------------------------------------------
  type Sick_Leave_Rt is record(
    Timeoff_Id        number,
    Staff_Id          number,
    Reason_Id         number,
    Coefficient       number,
    Sick_Leave_Number varchar2(100 char),
    Begin_Date        date,
    End_Date          date,
    Shas              Array_Varchar2);
  type Sick_Leave_Nt is table of Sick_Leave_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Sick_Leave_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Sick_Leaves    Sick_Leave_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Businnes trip
  ----------------------------------------------------------------------------------------------------
  type Business_Trip_Rt is record(
    Timeoff_Id number,
    Staff_Id   number,
    Region_Ids Array_Number,
    Person_Id  number,
    Reason_Id  number,
    Begin_Date date,
    End_Date   date,
    Note       varchar2(300 char),
    Shas       Array_Varchar2);
  type Business_Trip_Nt is table of Business_Trip_Rt;
  ----------------------------------------------------------------------------------------------------
  type Business_Trip_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Business_Trips  Business_Trip_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Vacation
  ----------------------------------------------------------------------------------------------------
  type Vacation_Rt is record(
    Timeoff_Id   number,
    Staff_Id     number,
    Time_Kind_Id number,
    Begin_Date   date,
    End_Date     date,
    Shas         Array_Varchar2);
  type Vacation_Nt is table of Vacation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Vacation_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Vacations      Vacation_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Overtime 
  ---------------------------------------------------------------------------------------------------- 
  type Overtime_Rt is record(
    Overtime_Date    date,
    Overtime_Seconds number);
  type Overtime_Nt is table of Overtime_Rt;
  ----------------------------------------------------------------------------------------------------
  type Overtime_Staff_Rt is record(
    Staff_Id    number,
    month       date,
    Overtime_Id number,
    Overtimes   Overtime_Nt);
  type Overtime_Staff_Nt is table of Overtime_Staff_Rt;
  ----------------------------------------------------------------------------------------------------
  type Overtime_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Division_Id     number,
    Overtime_Staffs Overtime_Staff_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Timebook Adjustment
  ----------------------------------------------------------------------------------------------------
  type Adjustment_Kind_Rt is record(
    Kind         varchar2(1),
    Free_Time    number,
    Overtime     number,
    Turnout_Time number);
  type Adjustment_Kind_Nt is table of Adjustment_Kind_Rt;
  ----------------------------------------------------------------------------------------------------
  type Adjustment_Rt is record(
    Page_Id  number,
    Staff_Id number,
    Kinds    Adjustment_Kind_Nt);
  type Adjustment_Nt is table of Adjustment_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timebook_Adjustment_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Division_Id     number,
    Adjustment_Date date,
    Adjustments     Adjustment_Nt);
  ----------------------------------------------------------------------------------------------------
  type Transaction_Part_Rt is record(
    Part_Begin date,
    Part_End   date);
  type Transaction_Part_Nt is table of Transaction_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Agreement_Cache_Rt is record(
    Staff_Id    number,
    Robot_Id    number,
    Schedule_Id number,
    Begin_Date  date,
    End_Date    date);
  type Agreement_Cache_Nt is table of Agreement_Cache_Rt;
  ----------------------------------------------------------------------------------------------------
  type Application_Create_Robot_Rt is record(
    Company_Id     number(20),
    Filial_Id      number(20),
    Application_Id number(20),
    name           varchar2(200 char),
    Opened_Date    date,
    Division_Id    number(20),
    Job_Id         number(20),
    Quantity       number(20),
    Note           varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Application_Hiring_Rt is record(
    Company_Id      number(20),
    Filial_Id       number(20),
    Application_Id  number(20),
    Hiring_Date     date,
    Robot_Id        number(20),
    Note            varchar2(300 char),
    First_Name      varchar2(250 char),
    Last_Name       varchar2(250 char),
    Middle_Name     varchar2(250 char),
    Birthday        date,
    Gender          varchar2(1),
    Phone           varchar2(100 char),
    Email           varchar2(300),
    Photo_Sha       varchar2(64),
    Address         varchar2(500 char),
    Legal_Address   varchar2(300 char),
    Region_Id       number(20),
    Passport_Series varchar2(50 char),
    Passport_Number varchar2(50 char),
    Npin            varchar2(14 char),
    Iapa            varchar2(20 char),
    Employment_Type varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Application_Transfer_Unit_Rt is record(
    Application_Unit_Id number(20),
    Staff_Id            number(20),
    Transfer_Begin      date,
    Robot_Id            number(20),
    Note                varchar2(300 char));
  type Application_Transfer_Unit_Nt is table of Application_Transfer_Unit_Rt;
  ----------------------------------------------------------------------------------------------------
  type Application_Transfer_Rt is record(
    Company_Id     number(20),
    Filial_Id      number(20),
    Application_Id number(20),
    Transfer_Units Application_Transfer_Unit_Nt);
  ----------------------------------------------------------------------------------------------------
  type Application_Dismissal_Rt is record(
    Company_Id          number(20),
    Filial_Id           number(20),
    Application_Id      number(20),
    Staff_Id            number(20),
    Dismissal_Date      date,
    Dismissal_Reason_Id number(20),
    Note                varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  -- Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Journal_Type_Hiring                 constant varchar2(50) := 'VHR:HPD:1';
  c_Pcode_Journal_Type_Hiring_Multiple        constant varchar2(50) := 'VHR:HPD:2';
  c_Pcode_Journal_Type_Transfer               constant varchar2(50) := 'VHR:HPD:3';
  c_Pcode_Journal_Type_Transfer_Multiple      constant varchar2(50) := 'VHR:HPD:4';
  c_Pcode_Journal_Type_Dismissal              constant varchar2(50) := 'VHR:HPD:5';
  c_Pcode_Journal_Type_Dismissal_Multiple     constant varchar2(50) := 'VHR:HPD:6';
  c_Pcode_Journal_Type_Wage_Change            constant varchar2(50) := 'VHR:HPD:7';
  c_Pcode_Journal_Type_Schedule_Change        constant varchar2(50) := 'VHR:HPD:8';
  c_Pcode_Journal_Type_Sick_Leave             constant varchar2(50) := 'VHR:HPD:9';
  c_Pcode_Journal_Type_Business_Trip          constant varchar2(50) := 'VHR:HPD:10';
  c_Pcode_Journal_Type_Vacation               constant varchar2(50) := 'VHR:HPD:11';
  c_Pcode_Journal_Type_Rank_Change            constant varchar2(50) := 'VHR:HPD:12';
  c_Pcode_Journal_Type_Limit_Change           constant varchar2(50) := 'VHR:HPD:13';
  c_Pcode_Journal_Type_Overtime               constant varchar2(50) := 'VHR:HPD:14';
  c_Pcode_Journal_Type_Wage_Change_Multiple   constant varchar2(50) := 'VHR:HPD:15';
  c_Pcode_Journal_Type_Timebook_Adjustment    constant varchar2(50) := 'VHR:HPD:16';
  c_Pcode_Journal_Type_Rank_Change_Multiple   constant varchar2(50) := 'VHR:HPD:17';
  c_Pcode_Journal_Type_Business_Trip_Multiple constant varchar2(50) := 'VHR:HPD:18';
  c_Pcode_Journal_Type_Hiring_Contractor      constant varchar2(50) := 'VHR:HPD:19';
  ----------------------------------------------------------------------------------------------------
  -- Employment Type
  ----------------------------------------------------------------------------------------------------
  c_Employment_Type_Main_Job          constant varchar2(1) := 'M';
  c_Employment_Type_External_Parttime constant varchar2(1) := 'E';
  c_Employment_Type_Internal_Parttime constant varchar2(1) := 'I';
  c_Employment_Type_Contractor        constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Lock Interval Kind
  ----------------------------------------------------------------------------------------------------
  c_Lock_Interval_Kind_Timebook                        constant varchar2(1) := 'T';
  c_Lock_Interval_Kind_Timeoff                         constant varchar2(1) := 'O';
  c_Lock_Interval_Kind_Performance                     constant varchar2(1) := 'P';
  c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales      constant varchar2(1) := 'S';
  c_Lock_Interval_Kind_Sales_Bonus_Department_Sales    constant varchar2(1) := 'R';
  c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  -- Lock Interval Timeoff Kinds
  ---------------------------------------------------------------------------------------------------- 
  c_Lock_Interval_Kind_Timeoff_Business_Trip constant varchar2(1) := 'B';
  c_Lock_Interval_Kind_Timeoff_Sick_Leave    constant varchar2(1) := 'C';
  c_Lock_Interval_Kind_Timeoff_Vacation      constant varchar2(1) := 'V';
  ----------------------------------------------------------------------------------------------------
  -- Transaction Types Ro(B)ot, (O)peration, (S)chedule, (R)ank, Vacation (L)imit
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Type_Robot          constant varchar2(1) := 'B';
  c_Transaction_Type_Operation      constant varchar2(1) := 'O';
  c_Transaction_Type_Schedule       constant varchar2(1) := 'S';
  c_Transaction_Type_Rank           constant varchar2(1) := 'R';
  c_Transaction_Type_Vacation_Limit constant varchar2(1) := 'L';
  c_Transaction_Type_Currency       constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Transfer Kind
  ----------------------------------------------------------------------------------------------------
  c_Transfer_Kind_Permanently constant varchar2(1) := 'P';
  c_Transfer_Kind_Temporarily constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Action_Continue constant varchar2(1) := 'C';
  c_Transaction_Action_Stop     constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Event_To_Be_Integrated constant varchar2(1) := 'I';
  c_Transaction_Event_In_Progress      constant varchar2(1) := 'P';
  c_Transaction_Event_To_Be_Deleted    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  g_Migration_Active boolean := false;
  ----------------------------------------------------------------------------------------------------
  -- Journal Types
  ----------------------------------------------------------------------------------------------------
  c_Journal_Type_Hiring          constant varchar2(1) := 'H';
  c_Journal_Type_Transfer        constant varchar2(1) := 'T';
  c_Journal_Type_Dismissal       constant varchar2(1) := 'D';
  c_Journal_Type_Schedule_Change constant varchar2(1) := 'S';
  c_Journal_Type_Wage_Change     constant varchar2(1) := 'W';
  c_Journal_Type_Rank_Change     constant varchar2(1) := 'R';
  c_Journal_Type_Limit_Change    constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  -- Adjustment Kinds
  ----------------------------------------------------------------------------------------------------
  c_Adjustment_Kind_Full       constant varchar2(1) := 'F';
  c_Adjustment_Kind_Incomplete constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- vacation turnover days kind
  ----------------------------------------------------------------------------------------------------
  c_Vacation_Turnover_Planned_Days constant varchar2(1) := 'P';
  c_Vacation_Turnover_Used_Days    constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- fte kinds
  ----------------------------------------------------------------------------------------------------
  c_Fte_Kind_Full     constant varchar2(1) := 'F';
  c_Fte_Kind_Half     constant varchar2(1) := 'H';
  c_Fte_Kind_Quarter  constant varchar2(1) := 'Q';
  c_Fte_Kind_Occupied constant varchar2(1) := 'O';
  c_Fte_Kind_Custom   constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------  
  -- contracts
  ----------------------------------------------------------------------------------------------------  
  c_Cv_Contract_Kind_Simple   constant varchar2(1) := 'S';
  c_Cv_Contract_Kind_Cyclical constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Application Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Application_Type_Create_Robot      constant varchar2(50) := 'VHR:HPD:1';
  c_Pcode_Application_Type_Hiring            constant varchar2(50) := 'VHR:HPD:2';
  c_Pcode_Application_Type_Transfer          constant varchar2(50) := 'VHR:HPD:3';
  c_Pcode_Application_Type_Dismissal         constant varchar2(50) := 'VHR:HPD:4';
  c_Pcode_Application_Type_Transfer_Multiple constant varchar2(50) := 'VHR:HPD:5';
  ----------------------------------------------------------------------------------------------------
  -- Application Status
  ----------------------------------------------------------------------------------------------------
  c_Application_Status_New         constant varchar2(1) := 'N';
  c_Application_Status_Waiting     constant varchar2(1) := 'W';
  c_Application_Status_Approved    constant varchar2(1) := 'A';
  c_Application_Status_In_Progress constant varchar2(1) := 'P';
  c_Application_Status_Completed   constant varchar2(1) := 'O';
  c_Application_Status_Canceled    constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Hiring_Journal_View        constant varchar2(200) := '/vhr/hpd/view/hiring_view';
  c_Form_Hiring_Multiple_View       constant varchar2(200) := '/vhr/hpd/view/hiring_view';
  c_Form_Transfer_View              constant varchar2(200) := '/vhr/hpd/view/transfer_view';
  c_Form_Transfer_Multiple_View     constant varchar2(200) := '/vhr/hpd/view/transfer_view';
  c_Form_Dismissal_View             constant varchar2(200) := '/vhr/hpd/view/dismissal_view';
  c_Form_Dismissal_Multiple_View    constant varchar2(200) := '/vhr/hpd/view/dismissal_view';
  c_Form_Wage_Change_View           constant varchar2(200) := '/vhr/hpd/view/wage_change_view';
  c_Form_Schedule_Change_View       constant varchar2(200) := '/vhr/hpd/view/schedule_change_view';
  c_Form_Rank_Change_View           constant varchar2(200) := '/vhr/hpd/view/rank_change_view';
  c_Form_Vacation_Limit_Change_View constant varchar2(200) := '/vhr/hpd/view/vacation_limit_change_view';
  c_Form_Overtime_View              constant varchar2(200) := '/vhr/hpd/view/overtime_view';
  c_Form_Timebook_Adjustment_View   constant varchar2(200) := '/vhr/hpd/view/timebook_adjustment_view';
  ----------------------------------------------------------------------------------------------------
  -- Easy Report Origins
  ----------------------------------------------------------------------------------------------------
  c_Easy_Report_Form_Hiring             constant varchar2(200) := '/vhr/rep/hpd/hiring';
  c_Easy_Report_Form_Hiring_Multiple    constant varchar2(200) := '/vhr/rep/hpd/hiring_multiple';
  c_Easy_Report_Form_Transfer           constant varchar2(200) := '/vhr/rep/hpd/transfer';
  c_Easy_Report_Form_Transfer_Multiple  constant varchar2(200) := '/vhr/rep/hpd/transfer_multiple';
  c_Easy_Report_Form_Dismissal          constant varchar2(200) := '/vhr/rep/hpd/dismissal';
  c_Easy_Report_Form_Dismissal_Multiple constant varchar2(200) := '/vhr/rep/hpd/dismissal_multiple';
  c_Easy_Report_Form_Labor_Contract     constant varchar2(200) := '/vhr/rep/hpd/labor_contract';
  ----------------------------------------------------------------------------------------------------
  -- Application forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Application_List constant varchar2(200) := '/vhr/hpd/application/application_list';
  c_Uri_Application_Part  constant varchar2(200) := '/vhr/hpd/application/';
  ----------------------------------------------------------------------------------------------------
  -- Application Grant parts
  ----------------------------------------------------------------------------------------------------
  c_App_Grant_Part_Create_Robot constant varchar2(200) := 'create_robot_';
  c_App_Grant_Part_Hiring       constant varchar2(200) := 'hiring_';
  c_App_Grant_Part_Transfer     constant varchar2(200) := 'transfer_';
  c_App_Grant_Part_Dismissal    constant varchar2(200) := 'dismissal_';
  ----------------------------------------------------------------------------------------------------
  -- Application Grantees
  ----------------------------------------------------------------------------------------------------
  c_App_Grantee_Applicant constant varchar2(200) := 'applicant';
  c_App_Grantee_Manager   constant varchar2(200) := 'manager';
  c_App_Grantee_Hr        constant varchar2(200) := 'hr';
  ----------------------------------------------------------------------------------------------------
  -- Application form action
  ----------------------------------------------------------------------------------------------------
  c_App_Form_Action_Edit constant varchar2(200) := 'edit';
  c_App_Form_Action_View constant varchar2(200) := 'view';
  ----------------------------------------------------------------------------------------------------
  -- Contract Employment Kinds
  ----------------------------------------------------------------------------------------------------
  c_Contract_Employment_Freelancer   constant varchar2(1) := 'F';
  c_Contract_Employment_Staff_Member constant varchar2(1) := 'M';
end Hpd_Pref;
/
create or replace package body Hpd_Pref is
end Hpd_Pref;
/

create or replace package Hpd_Util is
  ----------------------------------------------------------------------------------------------------
  -- hiring
  ----------------------------------------------------------------------------------------------------
  Function Journal_View_Uri
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_New
  (
    o_Journal         out Hpd_Pref.Hiring_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Hiring
  (
    p_Journal              in out nocopy Hpd_Pref.Hiring_Journal_Rt,
    i_Page_Id              number,
    i_Employee_Id          number,
    i_Staff_Number         varchar2,
    i_Hiring_Date          date,
    i_Dismissal_Date       date := null,
    i_Trial_Period         number,
    i_Employment_Source_Id number,
    i_Schedule_Id          number,
    i_Vacation_Days_Limit  number,
    i_Robot                Hpd_Pref.Robot_Rt,
    i_Contract             Hpd_Pref.Contract_Rt,
    i_Cv_Contract          Hpd_Pref.Cv_Contract_Rt := null,
    i_Indicators           Href_Pref.Indicator_Nt,
    i_Oper_Types           Href_Pref.Oper_Type_Nt,
    i_Currency_Id          number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- transfer
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_New
  (
    o_Journal         out Hpd_Pref.Transfer_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Transfer
  (
    p_Journal             in out nocopy Hpd_Pref.Transfer_Journal_Rt,
    i_Page_Id             number,
    i_Transfer_Begin      date,
    i_Transfer_End        date,
    i_Staff_Id            number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Transfer_Reason     varchar2,
    i_Transfer_Base       varchar2,
    i_Robot               Hpd_Pref.Robot_Rt,
    i_Contract            Hpd_Pref.Contract_Rt,
    i_Indicators          Href_Pref.Indicator_Nt,
    i_Oper_Types          Href_Pref.Oper_Type_Nt,
    i_Currency_Id         number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- dismissal
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_New
  (
    o_Journal         out Hpd_Pref.Dismissal_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Dismissal
  (
    p_Journal              in out nocopy Hpd_Pref.Dismissal_Journal_Rt,
    i_Page_Id              number,
    i_Staff_Id             number,
    i_Dismissal_Date       date,
    i_Dismissal_Reason_Id  number,
    i_Employment_Source_Id number,
    i_Based_On_Doc         varchar2,
    i_Note                 varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- wage change
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Wage_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Wage_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Wage_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt,
    i_Currency_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- rank change
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Rank_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Journal_Type_Id number,
    i_Source_Table    varchar2 := null,
    i_Source_Id       number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Rank_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Rank_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Rank_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  -- vacation limit change
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Limit_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Days_Limit     number,
    i_Change_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Add_Page
  (
    p_Journal  in out nocopy Hpd_Pref.Limit_Change_Journal_Rt,
    i_Page_Id  number,
    i_Staff_Id number
  );
  ----------------------------------------------------------------------------------------------------
  -- schedule change
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Begin_Date     date,
    i_End_Date       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Schedule_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  -- sick leave
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_New
  (
    o_Journal        out Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Sick_Leave
  (
    p_Journal           in out nocopy Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Timeoff_Id        number,
    i_Staff_Id          number,
    i_Reason_Id         number,
    i_Coefficient       number,
    i_Sick_Leave_Number varchar2,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Shas              Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- business trips
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_New
  (
    o_Journal         out Hpd_Pref.Business_Trip_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Business_Trip
  (
    p_Journal    in out nocopy Hpd_Pref.Business_Trip_Journal_Rt,
    i_Timeoff_Id number,
    i_Staff_Id   number,
    i_Region_Ids Array_Number,
    i_Person_Id  number,
    i_Reason_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Note       varchar2,
    i_Shas       Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- vacations
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_New
  (
    o_Journal        out Hpd_Pref.Vacation_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Vacation
  (
    p_Journal      in out nocopy Hpd_Pref.Vacation_Journal_Rt,
    i_Timeoff_Id   number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Shas         Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Add
  (
    p_Overtimes        in out nocopy Hpd_Pref.Overtime_Nt,
    i_Overtime_Date    date,
    i_Overtime_Seconds number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Overtime
  (
    p_Journal     in out nocopy Hpd_Pref.Overtime_Journal_Rt,
    i_Staff_Id    number,
    i_Month       date,
    i_Overtime_Id number,
    i_Overtimes   Hpd_Pref.Overtime_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_New
  (
    o_Overtime_Journal out Hpd_Pref.Overtime_Journal_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Journal_Number   varchar2,
    i_Journal_Date     date,
    i_Journal_Name     varchar2,
    i_Division_Id      number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- timebook adjustment
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_New
  (
    o_Journal         out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Division_Id     number,
    i_Adjustment_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Add_Adjustment
  (
    p_Journal    in out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Adjustment Hpd_Pref.Adjustment_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_New
  (
    o_Adjustment out Hpd_Pref.Adjustment_Rt,
    i_Page_Id    number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_Add_Kind
  (
    p_Adjustment   in out Hpd_Pref.Adjustment_Rt,
    i_Kind         varchar2,
    i_Free_Time    number,
    i_Overtime     number,
    i_Turnout_Time number
  );
  ----------------------------------------------------------------------------------------------------
  -- journal page parts
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_New
  (
    o_Robot           out Hpd_Pref.Robot_Rt,
    i_Robot_Id        number,
    i_Division_Id     number,
    i_Job_Id          number,
    i_Org_Unit_Id     number := null,
    i_Rank_Id         number := null,
    i_Wage_Scale_Id   number := null,
    i_Employment_Type varchar2,
    i_Fte_Id          number,
    i_Fte             number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Contract_New
  (
    o_Contract             out Hpd_Pref.Contract_Rt,
    i_Contract_Number      varchar2,
    i_Contract_Date        date,
    i_Fixed_Term           varchar2,
    i_Expiry_Date          date,
    i_Fixed_Term_Base_Id   number,
    i_Concluding_Term      varchar2,
    i_Hiring_Conditions    varchar2,
    i_Other_Conditions     varchar2,
    i_Workplace_Equipment  varchar2,
    i_Representative_Basis varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Oper_Type     in out nocopy Href_Pref.Oper_Type_Nt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicator       in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_New
  (
    o_Contract                 out Hpd_Pref.Cv_Contract_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Contract_Id              number,
    i_Contract_Number          varchar2,
    i_Page_Id                  number := null,
    i_Division_Id              number,
    i_Person_Id                number,
    i_Begin_Date               date,
    i_End_Date                 date,
    i_Contract_Kind            varchar2,
    i_Contract_Employment_Kind varchar2,
    i_Access_To_Add_Item       varchar2,
    i_Early_Closed_Date        date := null,
    i_Early_Closed_Note        varchar2 := null,
    i_Note                     varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_Item
  (
    o_Contract         in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_Contract_Item_Id number,
    i_Name             varchar2,
    i_Quantity         number,
    i_Amount           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_File
  (
    o_Contract in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_File_Sha varchar2,
    i_Note     varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  -- application
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_New
  (
    o_Application    out Hpd_Pref.Application_Create_Robot_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Name           varchar2,
    i_Opened_Date    date,
    i_Division_Id    number,
    i_Job_Id         number,
    i_Quantity       number,
    i_Note           varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_New
  (
    o_Application    out Hpd_Pref.Application_Hiring_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Hiring_Date    date,
    i_Robot_Id       number,
    i_Note           varchar2,
    -- person info
    i_First_Name      varchar2,
    i_Last_Name       varchar2,
    i_Middle_Name     varchar2,
    i_Birthday        date,
    i_Gender          varchar2,
    i_Phone           varchar2,
    i_Email           varchar2,
    i_Photo_Sha       varchar2,
    i_Address         varchar2,
    i_Legal_Address   varchar2,
    i_Region_Id       number,
    i_Passport_Series varchar2,
    i_Passport_Number varchar2,
    i_Npin            varchar2,
    i_Iapa            varchar2,
    i_Employment_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_New
  (
    o_Application    out Hpd_Pref.Application_Transfer_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Add_Transfer
  (
    o_Application         in out nocopy Hpd_Pref.Application_Transfer_Rt,
    i_Application_Unit_Id number,
    i_Staff_Id            number,
    i_Transfer_Begin      date,
    i_Robot_Id            number,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_New
  (
    o_Application         out Hpd_Pref.Application_Dismissal_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Application_Id      number,
    i_Staff_Id            number,
    i_Dismissal_Date      date,
    i_Dismissal_Reason_Id number,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Is_Hiring_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Contractor_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Transfer_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Dismissal_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Wage_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Rank_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Limit_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Schedule_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Sick_Leave_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Business_Trip_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Vacation_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Overtime_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Timebook_Adjustment_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kind(i_Transfer_End date := null) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Cast_Staff_Kind_By_Emp_Type(i_Employment_Type varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Changing_Transaction
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return Hpd_Transactions%rowtype;
  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date,
    o_Trans_Id   out number,
    o_Action     out varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Trans_Type       varchar2,
    i_Period           date,
    i_Except_Jounal_Id number := null,
    o_Trans_Id         out number,
    o_Action           out varchar2,
    o_Period           out date
  );
  ----------------------------------------------------------------------------------------------------
  Function Trans_Id_By_Period
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Schedule
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Schedules%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Currency
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Currencies%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Vacation_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Vacation_Limits%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Ranks%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contract
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Page_Contracts%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Mrf_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Hrm_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hrm_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Org_Unit_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Division_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Job_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Rank_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Currency_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Vacation_Days_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contractual_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage_Scale_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Ids
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Limit_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Trans_Types       Array_Varchar2,
    i_With_Wage_Scale   boolean := false,
    i_Partition_By_Year boolean := false
  ) return Hpd_Pref.Transaction_Part_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Trans_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number,
    i_Trans_Type varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Singular_Journal
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Journal_Type_Id  number,
    i_Singular_Type_Id number,
    i_Pages_Cnt        number
  );
  ----------------------------------------------------------------------------------------------------
  Function Staff_Timebook_Adjustment_Calced
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Adjustment_Date date,
    i_Kind            varchar2,
    i_Journal_Id      number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function User_Name
  (
    i_Company_Id number,
    i_User_Id    number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Name
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Application_Has_Result
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Page(i_Page_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Overtime(i_Overtime_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Timeoffs(i_Timeoff_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Journal(i_Journal_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Page(i_Page_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Overtime(i_Overtime_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Timeoff(i_Timeoff_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Grant_Part
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Main_Job return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_External_Parttime return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Internal_Parttime return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type(i_Employment_Type varchar2) return varchar2;
  Function Employment_Types(i_Include_Contractors boolean := false) return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind(i_Lock_Interval_Kind varchar2) return varchar2;
  Function Lock_Interval_Kinds return Matrix_Varchar2;
  Function Charge_Lock_Interval_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period(i_Trial_Period varchar2) return varchar2;
  Function Trial_Periods return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind(i_Transfer_Kind varchar2) return varchar2;
  Function Transfer_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type(i_Journal_Type varchar2) return varchar2;
  Function Journal_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind(i_Adjustment_Kind varchar2) return varchar2;
  Function Adjustment_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind(i_Contract_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Cv_Contract_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2;
  Function Application_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment(i_Status varchar2) return varchar2;
  Function Contract_Employments return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  -- journal notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  -- application notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Created
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Status_Changed
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2,
    i_Old_Status          varchar2,
    i_New_Status          varchar2
  ) return varchar2;
end Hpd_Util;
/
create or replace package body Hpd_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- uri of journal view forms by journal_type id
  Function Journal_View_Uri
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
    v_Pcode varchar2(20);
  begin
    v_Pcode := z_Hpd_Journal_Types.Take(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id).Pcode;
  
    case v_Pcode
      when Hpd_Pref.c_Pcode_Journal_Type_Hiring then
        return Hpd_Pref.c_Form_Hiring_Journal_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple then
        return Hpd_Pref.c_Form_Hiring_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Transfer then
        return Hpd_Pref.c_Form_Transfer_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple then
        return Hpd_Pref.c_Form_Transfer_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Dismissal then
        return Hpd_Pref.c_Form_Dismissal_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple then
        return Hpd_Pref.c_Form_Dismissal_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Rank_Change then
        return Hpd_Pref.c_Form_Rank_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Limit_Change then
        return Hpd_Pref.c_Form_Vacation_Limit_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Wage_Change then
        return Hpd_Pref.c_Form_Wage_Change_View;
        --  you should add this part when multiple wage change view form created.
      when Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change then
        return Hpd_Pref.c_Form_Schedule_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment then
        return Hpd_Pref.c_Form_Timebook_Adjustment_View;
      else
        return null;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_New
  (
    o_Journal         out Hpd_Pref.Hiring_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
  
    o_Journal.Hirings := Hpd_Pref.Hiring_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Hiring
  (
    p_Journal              in out nocopy Hpd_Pref.Hiring_Journal_Rt,
    i_Page_Id              number,
    i_Employee_Id          number,
    i_Staff_Number         varchar2,
    i_Hiring_Date          date,
    i_Dismissal_Date       date := null,
    i_Trial_Period         number,
    i_Employment_Source_Id number,
    i_Schedule_Id          number,
    i_Vacation_Days_Limit  number,
    i_Robot                Hpd_Pref.Robot_Rt,
    i_Contract             Hpd_Pref.Contract_Rt,
    i_Cv_Contract          Hpd_Pref.Cv_Contract_Rt := null,
    i_Indicators           Href_Pref.Indicator_Nt,
    i_Oper_Types           Href_Pref.Oper_Type_Nt,
    i_Currency_Id          number := null
  ) is
    v_Hiring Hpd_Pref.Hiring_Rt;
  begin
    v_Hiring.Page_Id              := i_Page_Id;
    v_Hiring.Employee_Id          := i_Employee_Id;
    v_Hiring.Staff_Number         := i_Staff_Number;
    v_Hiring.Hiring_Date          := i_Hiring_Date;
    v_Hiring.Dismissal_Date       := i_Dismissal_Date;
    v_Hiring.Trial_Period         := i_Trial_Period;
    v_Hiring.Employment_Source_Id := i_Employment_Source_Id;
    v_Hiring.Schedule_Id          := i_Schedule_Id;
    v_Hiring.Currency_Id          := i_Currency_Id;
    v_Hiring.Vacation_Days_Limit  := i_Vacation_Days_Limit;
    v_Hiring.Robot                := i_Robot;
    v_Hiring.Contract             := i_Contract;
    v_Hiring.Cv_Contract          := i_Cv_Contract;
    v_Hiring.Indicators           := i_Indicators;
    v_Hiring.Oper_Types           := i_Oper_Types;
  
    p_Journal.Hirings.Extend();
    p_Journal.Hirings(p_Journal.Hirings.Count) := v_Hiring;
  end;

  ----------------------------------------------------------------------------------------------------
  -- transfer
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_New
  (
    o_Journal         out Hpd_Pref.Transfer_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Transfers       := Hpd_Pref.Transfer_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Transfer
  (
    p_Journal             in out nocopy Hpd_Pref.Transfer_Journal_Rt,
    i_Page_Id             number,
    i_Transfer_Begin      date,
    i_Transfer_End        date,
    i_Staff_Id            number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Transfer_Reason     varchar2,
    i_Transfer_Base       varchar2,
    i_Robot               Hpd_Pref.Robot_Rt,
    i_Contract            Hpd_Pref.Contract_Rt,
    i_Indicators          Href_Pref.Indicator_Nt,
    i_Oper_Types          Href_Pref.Oper_Type_Nt,
    i_Currency_Id         number := null
  ) is
    v_Transfer Hpd_Pref.Transfer_Rt;
  begin
    v_Transfer.Page_Id             := i_Page_Id;
    v_Transfer.Transfer_Begin      := i_Transfer_Begin;
    v_Transfer.Transfer_End        := i_Transfer_End;
    v_Transfer.Staff_Id            := i_Staff_Id;
    v_Transfer.Schedule_Id         := i_Schedule_Id;
    v_Transfer.Currency_Id         := i_Currency_Id;
    v_Transfer.Vacation_Days_Limit := i_Vacation_Days_Limit;
    v_Transfer.Transfer_Reason     := i_Transfer_Reason;
    v_Transfer.Transfer_Base       := i_Transfer_Base;
    v_Transfer.Robot               := i_Robot;
    v_Transfer.Contract            := i_Contract;
    v_Transfer.Indicators          := i_Indicators;
    v_Transfer.Oper_Types          := i_Oper_Types;
  
    p_Journal.Transfers.Extend();
    p_Journal.Transfers(p_Journal.Transfers.Count) := v_Transfer;
  end;

  ----------------------------------------------------------------------------------------------------
  -- dismissal
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_New
  (
    o_Journal         out Hpd_Pref.Dismissal_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
  
    o_Journal.Dismissals := Hpd_Pref.Dismissal_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Dismissal
  (
    p_Journal              in out nocopy Hpd_Pref.Dismissal_Journal_Rt,
    i_Page_Id              number,
    i_Staff_Id             number,
    i_Dismissal_Date       date,
    i_Dismissal_Reason_Id  number,
    i_Employment_Source_Id number,
    i_Based_On_Doc         varchar2,
    i_Note                 varchar2
  ) is
    v_Dismissal Hpd_Pref.Dismissal_Rt;
  begin
    v_Dismissal.Page_Id              := i_Page_Id;
    v_Dismissal.Staff_Id             := i_Staff_Id;
    v_Dismissal.Dismissal_Date       := i_Dismissal_Date;
    v_Dismissal.Dismissal_Reason_Id  := i_Dismissal_Reason_Id;
    v_Dismissal.Employment_Source_Id := i_Employment_Source_Id;
    v_Dismissal.Based_On_Doc         := i_Based_On_Doc;
    v_Dismissal.Note                 := i_Note;
  
    p_Journal.Dismissals.Extend();
    p_Journal.Dismissals(p_Journal.Dismissals.Count) := v_Dismissal;
  end;

  ----------------------------------------------------------------------------------------------------
  -- wage change
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Wage_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
  
    o_Journal.Wage_Changes := Hpd_Pref.Wage_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Wage_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Wage_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt,
    i_Currency_Id number := null
  ) is
    v_Wage_Change Hpd_Pref.Wage_Change_Rt;
  begin
    v_Wage_Change.Page_Id     := i_Page_Id;
    v_Wage_Change.Staff_Id    := i_Staff_Id;
    v_Wage_Change.Change_Date := i_Change_Date;
    v_Wage_Change.Currency_Id := i_Currency_Id;
    v_Wage_Change.Indicators  := i_Indicators;
    v_Wage_Change.Oper_Types  := i_Oper_Types;
  
    p_Journal.Wage_Changes.Extend();
    p_Journal.Wage_Changes(p_Journal.Wage_Changes.Count) := v_Wage_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- rank change
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Rank_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Journal_Type_Id number,
    i_Source_Table    varchar2 := null,
    i_Source_Id       number := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Source_Table    := i_Source_Table;
    o_Journal.Source_Id       := i_Source_Id;
  
    o_Journal.Rank_Changes := Hpd_Pref.Rank_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Rank_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Rank_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Rank_Id     number
  ) is
    v_Rank_Change Hpd_Pref.Rank_Change_Rt;
  begin
    v_Rank_Change.Page_Id     := i_Page_Id;
    v_Rank_Change.Staff_Id    := i_Staff_Id;
    v_Rank_Change.Change_Date := i_Change_Date;
    v_Rank_Change.Rank_Id     := i_Rank_Id;
  
    p_Journal.Rank_Changes.Extend();
    p_Journal.Rank_Changes(p_Journal.Rank_Changes.Count) := v_Rank_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- vacation limit change
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Limit_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Days_Limit     number,
    i_Change_Date    date
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Division_Id    := i_Division_Id;
    o_Journal.Days_Limit     := i_Days_Limit;
    o_Journal.Change_Date    := i_Change_Date;
  
    o_Journal.Pages := Hpd_Pref.Page_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Add_Page
  (
    p_Journal  in out nocopy Hpd_Pref.Limit_Change_Journal_Rt,
    i_Page_Id  number,
    i_Staff_Id number
  ) is
    v_Page Hpd_Pref.Page_Rt;
  begin
    v_Page.Page_Id  := i_Page_Id;
    v_Page.Staff_Id := i_Staff_Id;
  
    p_Journal.Pages.Extend();
    p_Journal.Pages(p_Journal.Pages.Count) := v_Page;
  end;

  ----------------------------------------------------------------------------------------------------
  -- schedule change
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Begin_Date     date,
    i_End_Date       date
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Division_Id    := i_Division_Id;
    o_Journal.Begin_Date     := i_Begin_Date;
    o_Journal.End_Date       := i_End_Date;
  
    o_Journal.Schedule_Changes := Hpd_Pref.Schedule_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Schedule_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Schedule_Id number
  ) is
    v_Schedule_Change Hpd_Pref.Schedule_Change_Rt;
  begin
    v_Schedule_Change.Page_Id     := i_Page_Id;
    v_Schedule_Change.Staff_Id    := i_Staff_Id;
    v_Schedule_Change.Schedule_Id := i_Schedule_Id;
  
    p_Journal.Schedule_Changes.Extend;
    p_Journal.Schedule_Changes(p_Journal.Schedule_Changes.Count) := v_Schedule_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- sick leave
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_New
  (
    o_Journal        out Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
  
    o_Journal.Sick_Leaves := Hpd_Pref.Sick_Leave_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Sick_Leave
  (
    p_Journal           in out nocopy Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Timeoff_Id        number,
    i_Staff_Id          number,
    i_Reason_Id         number,
    i_Coefficient       number,
    i_Sick_Leave_Number varchar2,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Shas              Array_Varchar2
  ) is
    v_Sick_Leave Hpd_Pref.Sick_Leave_Rt;
  begin
    v_Sick_Leave.Timeoff_Id        := i_Timeoff_Id;
    v_Sick_Leave.Staff_Id          := i_Staff_Id;
    v_Sick_Leave.Reason_Id         := i_Reason_Id;
    v_Sick_Leave.Coefficient       := i_Coefficient;
    v_Sick_Leave.Sick_Leave_Number := i_Sick_Leave_Number;
    v_Sick_Leave.Begin_Date        := i_Begin_Date;
    v_Sick_Leave.End_Date          := i_End_Date;
    v_Sick_Leave.Shas              := i_Shas;
  
    p_Journal.Sick_Leaves.Extend();
    p_Journal.Sick_Leaves(p_Journal.Sick_Leaves.Count) := v_Sick_Leave;
  end;

  ----------------------------------------------------------------------------------------------------
  -- business trips
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_New
  (
    o_Journal         out Hpd_Pref.Business_Trip_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
  
    o_Journal.Business_Trips := Hpd_Pref.Business_Trip_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Business_Trip
  (
    p_Journal    in out nocopy Hpd_Pref.Business_Trip_Journal_Rt,
    i_Timeoff_Id number,
    i_Staff_Id   number,
    i_Region_Ids Array_Number,
    i_Person_Id  number,
    i_Reason_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Note       varchar2,
    i_Shas       Array_Varchar2
  ) is
    v_Business_Trip Hpd_Pref.Business_Trip_Rt;
  begin
    v_Business_Trip.Timeoff_Id := i_Timeoff_Id;
    v_Business_Trip.Staff_Id   := i_Staff_Id;
    v_Business_Trip.Region_Ids := i_Region_Ids;
    v_Business_Trip.Person_Id  := i_Person_Id;
    v_Business_Trip.Reason_Id  := i_Reason_Id;
    v_Business_Trip.Begin_Date := i_Begin_Date;
    v_Business_Trip.End_Date   := i_End_Date;
    v_Business_Trip.Note       := i_Note;
    v_Business_Trip.Shas       := i_Shas;
  
    p_Journal.Business_Trips.Extend();
    p_Journal.Business_Trips(p_Journal.Business_Trips.Count) := v_Business_Trip;
  end;

  ----------------------------------------------------------------------------------------------------
  -- vacations
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_New
  (
    o_Journal        out Hpd_Pref.Vacation_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
  
    o_Journal.Vacations := Hpd_Pref.Vacation_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Vacation
  (
    p_Journal      in out nocopy Hpd_Pref.Vacation_Journal_Rt,
    i_Timeoff_Id   number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Shas         Array_Varchar2
  ) is
    v_Vacation Hpd_Pref.Vacation_Rt;
  begin
    v_Vacation.Timeoff_Id   := i_Timeoff_Id;
    v_Vacation.Staff_Id     := i_Staff_Id;
    v_Vacation.Time_Kind_Id := i_Time_Kind_Id;
    v_Vacation.Begin_Date   := i_Begin_Date;
    v_Vacation.End_Date     := i_End_Date;
    v_Vacation.Shas         := i_Shas;
  
    p_Journal.Vacations.Extend();
    p_Journal.Vacations(p_Journal.Vacations.Count) := v_Vacation;
  end;

  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Add
  (
    p_Overtimes        in out nocopy Hpd_Pref.Overtime_Nt,
    i_Overtime_Date    date,
    i_Overtime_Seconds number
  ) is
    v_Overtime Hpd_Pref.Overtime_Rt;
  begin
    v_Overtime.Overtime_Date    := i_Overtime_Date;
    v_Overtime.Overtime_Seconds := i_Overtime_Seconds;
  
    p_Overtimes.Extend();
    p_Overtimes(p_Overtimes.Count) := v_Overtime;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Overtime
  (
    p_Journal     in out nocopy Hpd_Pref.Overtime_Journal_Rt,
    i_Staff_Id    number,
    i_Month       date,
    i_Overtime_Id number,
    i_Overtimes   Hpd_Pref.Overtime_Nt
  ) is
    v_Overtime_Staff Hpd_Pref.Overtime_Staff_Rt;
  begin
    v_Overtime_Staff.Staff_Id    := i_Staff_Id;
    v_Overtime_Staff.Month       := i_Month;
    v_Overtime_Staff.Overtime_Id := i_Overtime_Id;
    v_Overtime_Staff.Overtimes   := i_Overtimes;
  
    p_Journal.Overtime_Staffs.Extend();
    p_Journal.Overtime_Staffs(p_Journal.Overtime_Staffs.Count) := v_Overtime_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_New
  (
    o_Overtime_Journal out Hpd_Pref.Overtime_Journal_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Journal_Number   varchar2,
    i_Journal_Date     date,
    i_Journal_Name     varchar2,
    i_Division_Id      number := null
  ) is
  begin
    o_Overtime_Journal.Company_Id      := i_Company_Id;
    o_Overtime_Journal.Filial_Id       := i_Filial_Id;
    o_Overtime_Journal.Journal_Id      := i_Journal_Id;
    o_Overtime_Journal.Journal_Number  := i_Journal_Number;
    o_Overtime_Journal.Journal_Date    := i_Journal_Date;
    o_Overtime_Journal.Journal_Name    := i_Journal_Name;
    o_Overtime_Journal.Division_Id     := i_Division_Id;
    o_Overtime_Journal.Overtime_Staffs := Hpd_Pref.Overtime_Staff_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  -- timebook adjustment
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_New
  (
    o_Journal         out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Division_Id     number,
    i_Adjustment_Date date
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Division_Id     := i_Division_Id;
    o_Journal.Adjustment_Date := i_Adjustment_Date;
  
    o_Journal.Adjustments := Hpd_Pref.Adjustment_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Add_Adjustment
  (
    p_Journal    in out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Adjustment Hpd_Pref.Adjustment_Rt
  ) is
  begin
    p_Journal.Adjustments.Extend;
    p_Journal.Adjustments(p_Journal.Adjustments.Count) := i_Adjustment;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_New
  (
    o_Adjustment out Hpd_Pref.Adjustment_Rt,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
  begin
    o_Adjustment.Page_Id  := i_Page_Id;
    o_Adjustment.Staff_Id := i_Staff_Id;
  
    o_Adjustment.Kinds := Hpd_Pref.Adjustment_Kind_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_Add_Kind
  (
    p_Adjustment   in out Hpd_Pref.Adjustment_Rt,
    i_Kind         varchar2,
    i_Free_Time    number,
    i_Overtime     number,
    i_Turnout_Time number
  ) is
    v_Kind Hpd_Pref.Adjustment_Kind_Rt;
  begin
    v_Kind.Kind         := i_Kind;
    v_Kind.Free_Time    := i_Free_Time;
    v_Kind.Overtime     := i_Overtime;
    v_Kind.Turnout_Time := i_Turnout_Time;
  
    p_Adjustment.Kinds.Extend;
    p_Adjustment.Kinds(p_Adjustment.Kinds.Count) := v_Kind;
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal page parts
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_New
  (
    o_Robot           out Hpd_Pref.Robot_Rt,
    i_Robot_Id        number,
    i_Division_Id     number,
    i_Job_Id          number,
    i_Org_Unit_Id     number := null,
    i_Rank_Id         number := null,
    i_Wage_Scale_Id   number := null,
    i_Employment_Type varchar2,
    i_Fte_Id          number,
    i_Fte             number
  ) is
  begin
    o_Robot.Robot_Id        := i_Robot_Id;
    o_Robot.Division_Id     := i_Division_Id;
    o_Robot.Job_Id          := i_Job_Id;
    o_Robot.Org_Unit_Id     := i_Org_Unit_Id;
    o_Robot.Rank_Id         := i_Rank_Id;
    o_Robot.Wage_Scale_Id   := i_Wage_Scale_Id;
    o_Robot.Employment_Type := i_Employment_Type;
    o_Robot.Fte_Id          := i_Fte_Id;
    o_Robot.Fte             := i_Fte;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Contract_New
  (
    o_Contract             out Hpd_Pref.Contract_Rt,
    i_Contract_Number      varchar2,
    i_Contract_Date        date,
    i_Fixed_Term           varchar2,
    i_Expiry_Date          date,
    i_Fixed_Term_Base_Id   number,
    i_Concluding_Term      varchar2,
    i_Hiring_Conditions    varchar2,
    i_Other_Conditions     varchar2,
    i_Workplace_Equipment  varchar2,
    i_Representative_Basis varchar2
  ) is
  begin
    o_Contract.Contract_Number      := i_Contract_Number;
    o_Contract.Contract_Date        := i_Contract_Date;
    o_Contract.Fixed_Term           := i_Fixed_Term;
    o_Contract.Expiry_Date          := i_Expiry_Date;
    o_Contract.Fixed_Term_Base_Id   := i_Fixed_Term_Base_Id;
    o_Contract.Concluding_Term      := i_Concluding_Term;
    o_Contract.Hiring_Conditions    := i_Hiring_Conditions;
    o_Contract.Other_Conditions     := i_Other_Conditions;
    o_Contract.Workplace_Equipment  := i_Workplace_Equipment;
    o_Contract.Representative_Basis := i_Representative_Basis;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Oper_Type     in out nocopy Href_Pref.Oper_Type_Nt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Oper_Type.Extend;
    p_Oper_Type(p_Oper_Type.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicator       in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Indicator.Extend;
    p_Indicator(p_Indicator.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  -- CV Contracts
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_New
  (
    o_Contract                 out Hpd_Pref.Cv_Contract_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Contract_Id              number,
    i_Contract_Number          varchar2,
    i_Page_Id                  number := null,
    i_Division_Id              number,
    i_Person_Id                number,
    i_Begin_Date               date,
    i_End_Date                 date,
    i_Contract_Kind            varchar2,
    i_Contract_Employment_Kind varchar2,
    i_Access_To_Add_Item       varchar2,
    i_Early_Closed_Date        date := null,
    i_Early_Closed_Note        varchar2 := null,
    i_Note                     varchar2 := null
  ) is
  begin
    o_Contract.Company_Id               := i_Company_Id;
    o_Contract.Filial_Id                := i_Filial_Id;
    o_Contract.Contract_Id              := i_Contract_Id;
    o_Contract.Contract_Number          := i_Contract_Number;
    o_Contract.Page_Id                  := i_Page_Id;
    o_Contract.Division_Id              := i_Division_Id;
    o_Contract.Person_Id                := i_Person_Id;
    o_Contract.Begin_Date               := i_Begin_Date;
    o_Contract.End_Date                 := i_End_Date;
    o_Contract.Contract_Kind            := i_Contract_Kind;
    o_Contract.Contract_Employment_Kind := i_Contract_Employment_Kind;
    o_Contract.Access_To_Add_Item       := i_Access_To_Add_Item;
    o_Contract.Early_Closed_Date        := i_Early_Closed_Date;
    o_Contract.Early_Closed_Note        := i_Early_Closed_Note;
    o_Contract.Note                     := i_Note;
  
    o_Contract.Items := Hpd_Pref.Cv_Contract_Item_Nt();
    o_Contract.Files := Hpd_Pref.Cv_Contract_File_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_Item
  (
    o_Contract         in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_Contract_Item_Id number,
    i_Name             varchar2,
    i_Quantity         number,
    i_Amount           number
  ) is
    v_Item Hpd_Pref.Cv_Contract_Item_Rt;
  begin
    v_Item.Contract_Item_Id := i_Contract_Item_Id;
    v_Item.Name             := i_Name;
    v_Item.Quantity         := i_Quantity;
    v_Item.Amount           := i_Amount;
  
    o_Contract.Items.Extend;
    o_Contract.Items(o_Contract.Items.Count) := v_Item;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_File
  (
    o_Contract in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_File_Sha varchar2,
    i_Note     varchar2 := null
  ) is
    v_File Hpd_Pref.Cv_Contract_File_Rt;
  begin
    v_File.File_Sha := i_File_Sha;
    v_File.Note     := i_Note;
  
    o_Contract.Files.Extend;
    o_Contract.Files(o_Contract.Files.Count) := v_File;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Application
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_New
  (
    o_Application    out Hpd_Pref.Application_Create_Robot_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Name           varchar2,
    i_Opened_Date    date,
    i_Division_Id    number,
    i_Job_Id         number,
    i_Quantity       number,
    i_Note           varchar2
  ) is
  begin
    o_Application.Company_Id     := i_Company_Id;
    o_Application.Filial_Id      := i_Filial_Id;
    o_Application.Application_Id := i_Application_Id;
    o_Application.Name           := i_Name;
    o_Application.Opened_Date    := i_Opened_Date;
    o_Application.Division_Id    := i_Division_Id;
    o_Application.Job_Id         := i_Job_Id;
    o_Application.Quantity       := i_Quantity;
    o_Application.Note           := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_New
  (
    o_Application    out Hpd_Pref.Application_Hiring_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Hiring_Date    date,
    i_Robot_Id       number,
    i_Note           varchar2,
    -- person info
    i_First_Name      varchar2,
    i_Last_Name       varchar2,
    i_Middle_Name     varchar2,
    i_Birthday        date,
    i_Gender          varchar2,
    i_Phone           varchar2,
    i_Email           varchar2,
    i_Photo_Sha       varchar2,
    i_Address         varchar2,
    i_Legal_Address   varchar2,
    i_Region_Id       number,
    i_Passport_Series varchar2,
    i_Passport_Number varchar2,
    i_Npin            varchar2,
    i_Iapa            varchar2,
    i_Employment_Type varchar2
  ) is
  begin
    o_Application.Company_Id      := i_Company_Id;
    o_Application.Filial_Id       := i_Filial_Id;
    o_Application.Application_Id  := i_Application_Id;
    o_Application.Hiring_Date     := i_Hiring_Date;
    o_Application.Robot_Id        := i_Robot_Id;
    o_Application.Note            := i_Note;
    o_Application.First_Name      := i_First_Name;
    o_Application.Last_Name       := i_Last_Name;
    o_Application.Middle_Name     := i_Middle_Name;
    o_Application.Birthday        := i_Birthday;
    o_Application.Gender          := i_Gender;
    o_Application.Phone           := i_Phone;
    o_Application.Email           := i_Email;
    o_Application.Photo_Sha       := i_Photo_Sha;
    o_Application.Address         := i_Address;
    o_Application.Legal_Address   := i_Legal_Address;
    o_Application.Region_Id       := i_Region_Id;
    o_Application.Passport_Series := i_Passport_Series;
    o_Application.Passport_Number := i_Passport_Number;
    o_Application.Npin            := i_Npin;
    o_Application.Iapa            := i_Iapa;
    o_Application.Employment_Type := i_Employment_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_New
  (
    o_Application    out Hpd_Pref.Application_Transfer_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
  begin
    o_Application.Company_Id     := i_Company_Id;
    o_Application.Filial_Id      := i_Filial_Id;
    o_Application.Application_Id := i_Application_Id;
  
    o_Application.Transfer_Units := Hpd_Pref.Application_Transfer_Unit_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Add_Transfer
  (
    o_Application         in out nocopy Hpd_Pref.Application_Transfer_Rt,
    i_Application_Unit_Id number,
    i_Staff_Id            number,
    i_Transfer_Begin      date,
    i_Robot_Id            number,
    i_Note                varchar2
  ) is
    v_Transfer Hpd_Pref.Application_Transfer_Unit_Rt;
  begin
    v_Transfer.Application_Unit_Id := i_Application_Unit_Id;
    v_Transfer.Staff_Id            := i_Staff_Id;
    v_Transfer.Transfer_Begin      := i_Transfer_Begin;
    v_Transfer.Robot_Id            := i_Robot_Id;
    v_Transfer.Note                := i_Note;
  
    o_Application.Transfer_Units.Extend();
    o_Application.Transfer_Units(o_Application.Transfer_Units.Count) := v_Transfer;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_New
  (
    o_Application         out Hpd_Pref.Application_Dismissal_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Application_Id      number,
    i_Staff_Id            number,
    i_Dismissal_Date      date,
    i_Dismissal_Reason_Id number,
    i_Note                varchar2
  ) is
  begin
    o_Application.Company_Id          := i_Company_Id;
    o_Application.Filial_Id           := i_Filial_Id;
    o_Application.Application_Id      := i_Application_Id;
    o_Application.Staff_Id            := i_Staff_Id;
    o_Application.Dismissal_Date      := i_Dismissal_Date;
    o_Application.Dismissal_Reason_Id := i_Dismissal_Reason_Id;
    o_Application.Note                := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select q.Journal_Type_Id
      into result
      from Hpd_Journal_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_043;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Hiring_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id, Hpd_Pref.c_Pcode_Journal_Type_Hiring),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Contractor_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Transfer_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Transfer),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Dismissal_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Dismissal),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Wage_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Wage_Change),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Wage_Change_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Rank_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Rank_Change),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Rank_Change_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Limit_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Limit_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Schedule_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Sick_Leave_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Business_Trip_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Business_Trip),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Business_Trip_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Vacation_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Vacation);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Timebook_Adjustment_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Overtime_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Overtime);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kind(i_Transfer_End date := null) return varchar2 is
  begin
    if i_Transfer_End is null then
      return Hpd_Pref.c_Transfer_Kind_Permanently;
    end if;
  
    return Hpd_Pref.c_Transfer_Kind_Temporarily;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cast_Staff_Kind_By_Emp_Type(i_Employment_Type varchar2) return varchar2 is
  begin
    if i_Employment_Type = Hpd_Pref.c_Employment_Type_Internal_Parttime then
      return Href_Pref.c_Staff_Kind_Secondary;
    end if;
  
    return Href_Pref.c_Staff_Kind_Primary;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Changing_Transaction
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return Hpd_Transactions%rowtype is
    result Hpd_Transactions%rowtype;
  begin
    select q.*
      into result
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event in
           (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, Hpd_Pref.c_Transaction_Event_In_Progress)
       and q.Begin_Date <= i_Period
       and Nvl(q.End_Date, Href_Pref.c_Max_Date) >= i_Period
     order by q.Begin_Date desc, q.Order_No desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date,
    o_Trans_Id   out number,
    o_Action     out varchar2
  ) is
  begin
    select q.Trans_Id, q.Action
      into o_Trans_Id, o_Action
      from Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Period = (select max(w.Period)
                         from Hpd_Agreements w
                        where w.Company_Id = i_Company_Id
                          and w.Filial_Id = i_Filial_Id
                          and w.Staff_Id = i_Staff_Id
                          and w.Trans_Type = i_Trans_Type
                          and w.Period <= i_Period);
  exception
    when No_Data_Found then
      o_Trans_Id := null;
      o_Action   := null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Trans_Type       varchar2,
    i_Period           date,
    i_Except_Jounal_Id number := null,
    o_Trans_Id         out number,
    o_Action           out varchar2,
    o_Period           out date
  ) is
  begin
    if i_Except_Jounal_Id is null then
      select q.Trans_Id, q.Action, q.Period
        into o_Trans_Id, o_Action, o_Period
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period = (select max(w.Period)
                           from Hpd_Agreements w
                          where w.Company_Id = i_Company_Id
                            and w.Filial_Id = i_Filial_Id
                            and w.Staff_Id = i_Staff_Id
                            and w.Trans_Type = i_Trans_Type
                            and w.Period <= i_Period);
    else
      select q.Trans_Id, q.Action, q.Period
        into o_Trans_Id, o_Action, o_Period
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period = (select max(w.Period)
                           from Hpd_Agreements w
                          where w.Company_Id = i_Company_Id
                            and w.Filial_Id = i_Filial_Id
                            and w.Staff_Id = i_Staff_Id
                            and w.Trans_Type = i_Trans_Type
                            and w.Period <= i_Period
                            and exists (select *
                                   from Hpd_Transactions Tr
                                  where Tr.Company_Id = i_Company_Id
                                    and Tr.Filial_Id = i_Filial_Id
                                    and Tr.Trans_Id = w.Trans_Id
                                    and Tr.Journal_Id <> i_Except_Jounal_Id))
         and exists (select *
                from Hpd_Transactions Tr
               where Tr.Company_Id = i_Company_Id
                 and Tr.Filial_Id = i_Filial_Id
                 and Tr.Trans_Id = q.Trans_Id
                 and Tr.Journal_Id <> i_Except_Jounal_Id);
    end if;
  exception
    when No_Data_Found then
      o_Trans_Id := null;
      o_Action   := null;
      o_Period   := null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trans_Id_By_Period
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return number is
    v_Trans_Id number;
    v_Action   varchar2(1);
  begin
    Closest_Trans_Info(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Staff_Id   => i_Staff_Id,
                       i_Trans_Type => i_Trans_Type,
                       i_Period     => i_Period,
                       o_Trans_Id   => v_Trans_Id,
                       o_Action     => v_Action);
  
    if v_Action = Hpd_Pref.c_Transaction_Action_Continue then
      return v_Trans_Id;
    end if;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Schedule
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Schedules%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Schedule,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Schedules.Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Currency
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Currencies%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Currency,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Currencies.Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Ranks%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Rank,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Ranks.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Vacation_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Vacation_Limits%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Vacation_Limit,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Vacation_Limits.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Trans_Id   => v_Trans_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contract
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Page_Contracts%rowtype is
    v_Trans_Id number;
    v_Page_Id  number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    v_Page_Id := z_Hpd_Transactions.Load(i_Company_Id => i_Company_Id, --
                 i_Filial_Id => i_Filial_Id, --
                 i_Trans_Id => v_Trans_Id).Page_Id;
  
    return z_Hpd_Page_Contracts.Take(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Page_Id    => v_Page_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Robots%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Mrf_Robots%rowtype is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return z_Mrf_Robots.Load(i_Company_Id => r_Closest_Robot.Company_Id,
                             i_Filial_Id  => r_Closest_Robot.Filial_Id,
                             i_Robot_Id   => r_Closest_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Hrm_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hrm_Robots%rowtype is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return z_Hrm_Robots.Load(i_Company_Id => r_Closest_Robot.Company_Id,
                             i_Filial_Id  => r_Closest_Robot.Filial_Id,
                             i_Robot_Id   => r_Closest_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return r_Closest_Robot.Fte;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Robot_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Org_Unit_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Hrm_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Hrm_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    return r_Robot.Org_Unit_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Division_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Mrf_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => i_Period);
  
    return r_Robot.Division_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Job_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Mrf_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => i_Period);
  
    return r_Robot.Job_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Rank_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Rank(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Staff_Id   => i_Staff_Id,
                        i_Period     => i_Period).Rank_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Schedule(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Period     => i_Period).Schedule_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Currency_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Currency(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Period     => i_Period).Currency_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Vacation_Days_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Vacation_Limit(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id,
                                  i_Period     => i_Period).Days_Limit;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contractual_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return varchar2 is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Contractual_Wage;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage_Scale_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Wage_Scale_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Indicators.Take(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Trans_Id     => v_Trans_Id,
                                       i_Indicator_Id => i_Indicator_Id).Indicator_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return number is
    v_Trans_Id number;
  
    --------------------------------------------------
    Function Take_Oper_Type_Id
    (
      i_Company_Id    number,
      i_Filial_Id     number,
      i_Trans_Id      number,
      i_Oper_Group_Id number
    ) return number is
      result number;
    begin
      begin
        select t.Oper_Type_Id
          into result
          from Hpd_Trans_Oper_Types t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Trans_Id = i_Trans_Id
           and exists (select *
                  from Hpr_Oper_Types s
                 where s.Company_Id = t.Company_Id
                   and s.Oper_Type_Id = t.Oper_Type_Id
                   and s.Oper_Group_Id = i_Oper_Group_Id);
      
        return result;
      exception
        when No_Data_Found then
          return null;
        when Too_Many_Rows then
          Hpd_Error.Raise_044(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                        i_Filial_Id  => i_Filial_Id,
                                                                        i_Staff_Id   => i_Staff_Id),
                              i_Oper_Group_Name => z_Hpr_Oper_Groups.Load(i_Company_Id => i_Company_Id, --
                                                   i_Oper_Group_Id => i_Oper_Group_Id).Name);
      end;
    end;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return Take_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                             i_Filial_Id     => i_Filial_Id,
                             i_Trans_Id      => v_Trans_Id,
                             i_Oper_Group_Id => i_Oper_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Ids
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return Array_Number is
    v_Trans_Id number;
  
    --------------------------------------------------
    Function Load_Oper_Type_Ids
    (
      i_Company_Id    number,
      i_Filial_Id     number,
      i_Trans_Id      number,
      i_Oper_Group_Id number
    ) return Array_Number is
      result Array_Number;
    begin
      begin
        select t.Oper_Type_Id
          bulk collect
          into result
          from Hpd_Trans_Oper_Types t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Trans_Id = i_Trans_Id
           and exists (select *
                  from Hpr_Oper_Types s
                 where s.Company_Id = t.Company_Id
                   and s.Oper_Type_Id = t.Oper_Type_Id
                   and s.Oper_Group_Id = i_Oper_Group_Id);
      
        return result;
      end;
    end;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return Array_Number();
    end if;
  
    return Load_Oper_Type_Ids(i_Company_Id    => i_Company_Id,
                              i_Filial_Id     => i_Filial_Id,
                              i_Trans_Id      => v_Trans_Id,
                              i_Oper_Group_Id => i_Oper_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    if Get_Closest_Contractual_Wage(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Period     => i_Period) = 'N' then
      return Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                   i_Filial_Id     => i_Filial_Id,
                                   i_Wage_Scale_Id => Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                                                i_Filial_Id  => i_Filial_Id,
                                                                                i_Staff_Id   => i_Staff_Id,
                                                                                i_Period     => i_Period),
                                   i_Period        => i_Period,
                                   i_Rank_Id       => Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id,
                                                                          i_Staff_Id   => i_Staff_Id,
                                                                          i_Period     => i_Period));
    else
      return Get_Closest_Indicator_Value(i_Company_Id   => i_Company_Id,
                                         i_Filial_Id    => i_Filial_Id,
                                         i_Staff_Id     => i_Staff_Id,
                                         i_Indicator_Id => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                         i_Period       => i_Period);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Limit_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    result number;
  begin
    select q.Free_Days
      into result
      from Hpd_Vacation_Turnover q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Period = (select max(q.Period)
                         from Hpd_Vacation_Turnover q
                        where q.Company_Id = i_Company_Id
                          and q.Filial_Id = i_Filial_Id
                          and q.Staff_Id = i_Staff_Id
                          and q.Period < i_Period
                          and q.Period >= Trunc(i_Period, 'yyyy'));
  
    return result;
  
  exception
    when No_Data_Found then
      return Get_Closest_Vacation_Days_Limit(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Staff_Id   => i_Staff_Id,
                                             i_Period     => i_Period);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date,
    i_Trans_Type      varchar2,
    i_With_Wage_Scale boolean := false
  ) return Array_Date is
    v_Trans_Id        number;
    v_Action          varchar2(1);
    v_Prev_Trans_Code varchar2(4000);
    v_Trans_Code      varchar2(4000);
    r_Robot           Hpd_Trans_Robots%rowtype;
    result            Array_Date := Array_Date();
  begin
    Closest_Trans_Info(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Staff_Id   => i_Staff_Id,
                       i_Trans_Type => i_Trans_Type,
                       i_Period     => i_Begin_Date,
                       o_Trans_Id   => v_Trans_Id,
                       o_Action     => v_Action);
  
    v_Prev_Trans_Code := Get_Trans_Code(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => null,
                                        i_Trans_Type => i_Trans_Type);
  
    for r in (select Qr.Period Period_Begin,
                     Lead(Qr.Period) Over(order by Qr.Period) - 1 Period_End,
                     Qr.Trans_Id,
                     Qr.Action
                from (select p.Period, p.Trans_Id, p.Action
                        from Hpd_Agreements p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Staff_Id = i_Staff_Id
                         and p.Trans_Type = i_Trans_Type
                         and p.Period between i_Begin_Date and i_End_Date
                      union
                      select i_Begin_Date, v_Trans_Id, v_Action
                        from Dual) Qr)
    loop
      exit when r.Action = Hpd_Pref.c_Transaction_Action_Stop;
    
      if i_With_Wage_Scale and i_Trans_Type = Hpd_Pref.c_Transaction_Type_Robot then
        r_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => r.Period_Begin);
      
        result := result multiset union distinct
                  Hrm_Util.Register_Change_Dates(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Wage_Scale_Id => r_Robot.Wage_Scale_Id,
                                                 i_Begin_Date    => r.Period_Begin,
                                                 i_End_Date      => Nvl(r.Period_End, i_End_Date));
      end if;
    
      v_Trans_Code := Get_Trans_Code(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Trans_Id   => r.Trans_Id,
                                     i_Trans_Type => i_Trans_Type);
    
      if v_Prev_Trans_Code <> v_Trans_Code then
        Fazo.Push(result, r.Period_Begin);
      
        v_Prev_Trans_Code := v_Trans_Code;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Trans_Types       Array_Varchar2,
    i_With_Wage_Scale   boolean := false,
    i_Partition_By_Year boolean := false
  ) return Hpd_Pref.Transaction_Part_Nt is
    v_Partition_Fmt  varchar2(4) := 'Mon';
    v_Dismissal_Date date;
    v_Opened_Dates   Array_Date;
    v_Part           Hpd_Pref.Transaction_Part_Rt;
    result           Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
    v_Index          number;
    v_Count          number;
  
    --------------------------------------------------
    Function Get_Last_Day(i_Date date) return date is
    begin
      if i_Partition_By_Year then
        return Htt_Util.Year_Last_Day(i_Date);
      end if;
      return Last_Day(i_Date);
    end;
  begin
    if i_Partition_By_Year then
      v_Partition_Fmt := 'yyyy';
    end if;
  
    v_Dismissal_Date := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                        i_Filial_Id => i_Filial_Id, --
                        i_Staff_Id => i_Staff_Id).Dismissal_Date;
  
    v_Opened_Dates := Array_Date(Least(i_End_Date, Nvl(v_Dismissal_Date, i_End_Date)) + 1);
  
    for i in 1 .. i_Trans_Types.Count
    loop
      v_Opened_Dates := v_Opened_Dates multiset union distinct
                        Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                     i_Filial_Id       => i_Filial_Id,
                                                     i_Staff_Id        => i_Staff_Id,
                                                     i_Begin_Date      => i_Begin_Date,
                                                     i_End_Date        => i_End_Date,
                                                     i_Trans_Type      => i_Trans_Types(i),
                                                     i_With_Wage_Scale => i_With_Wage_Scale);
    end loop;
  
    Fazo.Sort(v_Opened_Dates);
  
    v_Part.Part_Begin := v_Opened_Dates(1);
    v_Index           := 2;
    v_Count           := v_Opened_Dates.Count;
  
    while v_Index <= v_Count
    loop
      v_Part.Part_End := v_Opened_Dates(v_Index) - 1;
    
      if Trunc(v_Part.Part_Begin, v_Partition_Fmt) = Trunc(v_Part.Part_End, v_Partition_Fmt) then
        v_Index := v_Index + 1;
      else
        v_Part.Part_End := Get_Last_Day(v_Part.Part_Begin);
      end if;
    
      Result.Extend;
      result(Result.Count) := v_Part;
    
      v_Part.Part_Begin := v_Part.Part_End + 1;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Trans_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number,
    i_Trans_Type varchar2
  ) return varchar2 is
    r_Robot      Hpd_Trans_Robots%rowtype;
    v_Indicators Array_Varchar2;
    result       Gmap := Gmap;
  begin
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        r_Robot := z_Hpd_Trans_Robots.Take(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => i_Trans_Id);
      
        Result.Put(z.Robot_Id, r_Robot.Robot_Id);
        Result.Put(z.Division_Id, r_Robot.Division_Id);
        Result.Put(z.Job_Id, r_Robot.Job_Id);
        Result.Put(z.Fte_Id, r_Robot.Fte_Id);
        Result.Put(z.Fte, r_Robot.Fte);
        Result.Put(z.Wage_Scale_Id, r_Robot.Wage_Scale_Id);
      when Hpd_Pref.c_Transaction_Type_Schedule then
        Result.Put(z.Schedule_Id,
                   z_Hpd_Trans_Schedules.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Schedule_Id);
      when Hpd_Pref.c_Transaction_Type_Currency then
        Result.Put(z.Currency_Id,
                   z_Hpd_Trans_Currencies.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Currency_Id);
      when Hpd_Pref.c_Transaction_Type_Rank then
        Result.Put(z.Rank_Id,
                   z_Hpd_Trans_Ranks.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Rank_Id);
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        Result.Put(z.Days_Limit,
                   z_Hpd_Trans_Vacation_Limits.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Days_Limit);
      when Hpd_Pref.c_Transaction_Type_Operation then
        select Json_Object('o' value Ti.Oper_Type_Id,
                           'i' value Tv.Indicator_Id,
                           'e' value Tv.Indicator_Value null on null)
          bulk collect
          into v_Indicators
          from Hpd_Trans_Oper_Type_Indicators Ti
          join Hpd_Trans_Indicators Tv
            on Tv.Company_Id = Ti.Company_Id
           and Tv.Filial_Id = Ti.Filial_Id
           and Tv.Trans_Id = Ti.Trans_Id
           and Tv.Indicator_Id = Ti.Indicator_Id
         where Ti.Company_Id = i_Company_Id
           and Ti.Filial_Id = i_Filial_Id
           and Ti.Trans_Id = i_Trans_Id
         order by Ti.Oper_Type_Id, Tv.Indicator_Id, Tv.Indicator_Value;
      
        Result.Put(Zt.Hpd_Trans_Oper_Types.Name, v_Indicators);
      else
        null;
    end case;
  
    return Result.Json();
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Page(i_Page_Id number) return varchar2 is
    r_Page Hpd_Journal_Pages%rowtype;
    result varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Pages.Name)));
  
    if i_Page_Id is null then
      return result;
    end if;
  
    r_Page := z_Hpd_Journal_Pages.Take(i_Company_Id => Md_Env.Company_Id,
                                       i_Filial_Id  => Md_Env.Filial_Id,
                                       i_Page_Id    => i_Page_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Page.Company_Id,
                                                    i_Filial_Id  => r_Page.Filial_Id,
                                                    i_Staff_Id   => r_Page.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Overtime(i_Overtime_Id number) return varchar2 is
    r_Overtime Hpd_Journal_Overtimes%rowtype;
    result     varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Overtimes.Name)));
  
    if i_Overtime_Id is null then
      return result;
    end if;
  
    r_Overtime := z_Hpd_Journal_Overtimes.Take(i_Company_Id  => Md_Env.Company_Id,
                                               i_Filial_Id   => Md_Env.Filial_Id,
                                               i_Overtime_Id => i_Overtime_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Overtime.Company_Id,
                                                    i_Filial_Id  => r_Overtime.Filial_Id,
                                                    i_Staff_Id   => r_Overtime.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Timeoffs(i_Timeoff_Id number) return varchar2 is
    r_Timeoffs Hpd_Journal_Timeoffs%rowtype;
    result     varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Timeoffs.Name)));
  
    if i_Timeoff_Id is null then
      return result;
    end if;
  
    r_Timeoffs := z_Hpd_Journal_Timeoffs.Take(i_Company_Id => Md_Env.Company_Id,
                                              i_Filial_Id  => Md_Env.Filial_Id,
                                              i_Timeoff_Id => i_Timeoff_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Timeoffs.Company_Id,
                                                    i_Filial_Id  => r_Timeoffs.Filial_Id,
                                                    i_Staff_Id   => r_Timeoffs.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Journal(i_Journal_Id number) return varchar2 is
    v_Journal_Type_Id number;
    v_Pcode           varchar2(20);
    v_Uri             varchar2(100);
  begin
    v_Journal_Type_Id := z_Hpd_Journals.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Journal_Id => i_Journal_Id).Journal_Type_Id;
    v_Pcode           := z_Hpd_Journal_Types.Take(i_Company_Id => Ui.Company_Id, i_Journal_Type_Id => v_Journal_Type_Id).Pcode;
  
    if v_Pcode in
       (Hpd_Pref.c_Pcode_Journal_Type_Hiring, Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple) then
      v_Uri := '/vhr/hpd/audit/hiring_audit';
    elsif v_Pcode in
          (Hpd_Pref.c_Pcode_Journal_Type_Transfer, Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple) then
      v_Uri := '/vhr/hpd/audit/transfer_audit';
    elsif v_Pcode in (Hpd_Pref.c_Pcode_Journal_Type_Dismissal,
                      Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple) then
      v_Uri := '/vhr/hpd/audit/dismissal_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Wage_Change then
      v_Uri := '/vhr/hpd/audit/wage_change_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change then
      v_Uri := '/vhr/hpd/audit/schedule_change_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave then
      v_Uri := '/vhr/hpd/audit/sick_leave_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Business_Trip then
      v_Uri := '/vhr/hpd/audit/businnes_trip_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Overtime then
      v_Uri := '/vhr/hpd/audit/overtime_audit';
    end if;
  
    return v_Uri || '?journal_id=' || i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Page(i_Page_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Pages.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Page_Id => i_Page_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Overtime(i_Overtime_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Overtimes.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Overtime_Id => i_Overtime_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Timeoff(i_Timeoff_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Timeoffs.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Timeoff_Id => i_Timeoff_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Singular_Journal
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Journal_Type_Id  number,
    i_Singular_Type_Id number,
    i_Pages_Cnt        number
  ) is
    --------------------------------------------------
    Function Has_Other_Pages return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Journal_Pages Jp
       where Jp.Company_Id = i_Company_Id
         and Jp.Filial_Id = i_Filial_Id
         and Jp.Journal_Id = i_Journal_Id
         and Jp.Page_Id <> i_Page_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if i_Journal_Type_Id <> i_Singular_Type_Id then
      return;
    end if;
  
    if i_Pages_Cnt <> 1 then
      Hpd_Error.Raise_045;
    end if;
  
    if Has_Other_Pages then
      Hpd_Error.Raise_047;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Timebook_Adjustment_Calced
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Adjustment_Date date,
    i_Kind            varchar2,
    i_Journal_Id      number := null
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'X'
      into v_Dummy
      from Hpd_Lock_Adjustments q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Adjustment_Date = i_Adjustment_Date
       and q.Kind = i_Kind
       and (i_Journal_Id is null or q.Journal_Id <> i_Journal_Id);
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Name
  (
    i_Company_Id number,
    i_User_Id    number
  ) return varchar2 is
  begin
    return z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return z_Hpd_Journal_Types.Load(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Name
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2 is
  begin
    return z_Hpd_Application_Types.Load(i_Company_Id          => i_Company_Id,
                                        i_Application_Type_Id => i_Application_Type_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select q.Application_Type_Id
      into result
      from Hpd_Application_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_057;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Has_Result
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) return varchar2 is
    v_Application_Type_Id number;
    v_Pcode               varchar2(50);
    v_Dummy               number;
  begin
    v_Application_Type_Id := z_Hpd_Applications.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, --
                             i_Application_Id => i_Application_Id).Application_Type_Id;
  
    v_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, i_Application_Type_Id => v_Application_Type_Id).Pcode;
  
    begin
      if v_Pcode = Hpd_Pref.c_Pcode_Application_Type_Create_Robot then
        --------------------------------------------------
        select 1
          into v_Dummy
          from Hpd_Application_Robots t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id
           and Rownum = 1;
      else
        --------------------------------------------------
        select 1
          into v_Dummy
          from Hpd_Application_Journals t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id
           and exists (select *
                  from Hpd_Journals q
                 where q.Company_Id = t.Company_Id
                   and q.Filial_Id = t.Filial_Id
                   and q.Journal_Id = t.Journal_Id
                   and q.Posted = 'Y');
      end if;
    exception
      when No_Data_Found then
        return 'N';
    end;
  
    return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  -- application grant part
  ----------------------------------------------------------------------------------------------------
  Function Application_Grant_Part
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2 is
    v_Pcode Hpd_Application_Types.Pcode%type;
  begin
    v_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, i_Application_Type_Id => i_Application_Type_Id).Pcode;
  
    case v_Pcode
      when Hpd_Pref.c_Pcode_Application_Type_Create_Robot then
        return Hpd_Pref.c_App_Grant_Part_Create_Robot;
      when Hpd_Pref.c_Pcode_Application_Type_Hiring then
        return Hpd_Pref.c_App_Grant_Part_Hiring;
      when Hpd_Pref.c_Pcode_Application_Type_Transfer then
        return Hpd_Pref.c_App_Grant_Part_Transfer;
      when Hpd_Pref.c_Pcode_Application_Type_Transfer_Multiple then
        return Hpd_Pref.c_App_Grant_Part_Transfer;
      when Hpd_Pref.c_Pcode_Application_Type_Dismissal then
        return Hpd_Pref.c_App_Grant_Part_Dismissal;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  -- employment type
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Main_Job return varchar2 is
  begin
    return t('employment_type:main_job');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_External_Parttime return varchar2 is
  begin
    return t('employment_type:external_parttime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Internal_Parttime return varchar2 is
  begin
    return t('employment_type:internal_parttime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Contractor return varchar2 is
  begin
    return t('employment_type:contractor');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type(i_Employment_Type varchar2) return varchar2 is
  begin
    return --
    case i_Employment_Type --
    when Hpd_Pref.c_Employment_Type_Main_Job then t_Employment_Type_Main_Job --
    when Hpd_Pref.c_Employment_Type_External_Parttime then t_Employment_Type_External_Parttime --
    when Hpd_Pref.c_Employment_Type_Internal_Parttime then t_Employment_Type_Internal_Parttime --
    when Hpd_Pref.c_Employment_Type_Contractor then t_Employment_Type_Contractor --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employment_Types(i_Include_Contractors boolean := false) return Matrix_Varchar2 is
    v_Types      Array_Varchar2 := Array_Varchar2(Hpd_Pref.c_Employment_Type_Main_Job,
                                                  Hpd_Pref.c_Employment_Type_External_Parttime,
                                                  Hpd_Pref.c_Employment_Type_Internal_Parttime);
    v_Translates Array_Varchar2 := Array_Varchar2(t_Employment_Type_Main_Job,
                                                  t_Employment_Type_External_Parttime,
                                                  t_Employment_Type_Internal_Parttime);
  begin
    if i_Include_Contractors then
      Fazo.Push(v_Types, Hpd_Pref.c_Employment_Type_Contractor);
      Fazo.Push(v_Translates, t_Employment_Type_Contractor);
    end if;
  
    return Matrix_Varchar2(v_Types, v_Translates);
  end;

  ----------------------------------------------------------------------------------------------------
  -- lock interval kind
  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Timebook return varchar2 is
  begin
    return t('lock_interval_kind:timebook');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Timeoff return varchar2 is
  begin
    return t('lock_interval_kind:timeoff');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Performance return varchar2 is
  begin
    return t('lock_interval_kind:performance');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus personal sales');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Department_Sales return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus department sales');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus successful delivery');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind(i_Lock_Interval_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Lock_Interval_Kind --
    when Hpd_Pref.c_Lock_Interval_Kind_Timebook then t_Lock_Interval_Kind_Timebook --
    when Hpd_Pref.c_Lock_Interval_Kind_Timeoff then t_Lock_Interval_Kind_Timeoff --
    when Hpd_Pref.c_Lock_Interval_Kind_Performance then t_Lock_Interval_Kind_Performance --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales then t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales then t_Lock_Interval_Kind_Sales_Bonus_Department_Sales --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery then t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Lock_Interval_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                                          Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                                          Hpd_Pref.c_Lock_Interval_Kind_Performance,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery),
                           Array_Varchar2(t_Lock_Interval_Kind_Timebook,
                                          t_Lock_Interval_Kind_Timeoff,
                                          t_Lock_Interval_Kind_Performance,
                                          t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales,
                                          t_Lock_Interval_Kind_Sales_Bonus_Department_Sales,
                                          t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Charge_Lock_Interval_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                                          Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                                          Hpd_Pref.c_Lock_Interval_Kind_Performance),
                           Array_Varchar2(t_Lock_Interval_Kind_Timebook,
                                          t_Lock_Interval_Kind_Timeoff,
                                          t_Lock_Interval_Kind_Performance));
  end;

  ----------------------------------------------------------------------------------------------------
  -- trial period
  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period_Exists return varchar2 is
  begin
    return t('trial_period:exists');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period_Not_Exists return varchar2 is
  begin
    return t('trial_period:not_exists');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period(i_Trial_Period varchar2) return varchar2 is
  begin
    return --
    case i_Trial_Period --
    when 'Y' then t_Trial_Period_Exists --
    when 'N' then t_Trial_Period_Not_Exists --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trial_Periods return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2('Y', --
                                          'N'),
                           Array_Varchar2(t_Trial_Period_Exists, --
                                          t_Trial_Period_Not_Exists));
  end;

  ----------------------------------------------------------------------------------------------------
  -- transfer kind
  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind_Permanently return varchar2 is
  begin
    return t('transfer_kind:permanently');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind_Temporarily return varchar2 is
  begin
    return t('transfer_kind:temporarily');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind(i_Transfer_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Transfer_Kind --
    when Hpd_Pref.c_Transfer_Kind_Permanently then t_Transfer_Kind_Permanently --
    when Hpd_Pref.c_Transfer_Kind_Temporarily then t_Transfer_Kind_Temporarily --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Transfer_Kind_Permanently,
                                          Hpd_Pref.c_Transfer_Kind_Temporarily),
                           Array_Varchar2(t_Transfer_Kind_Permanently, --
                                          t_Transfer_Kind_Temporarily));
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal types
  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Hiring return varchar2 is
  begin
    return t('journal_type: hiring');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Transfer return varchar2 is
  begin
    return t('journal_type: transfer');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Dismissal return varchar2 is
  begin
    return t('journal_type: dismissal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Schedule_Change return varchar2 is
  begin
    return t('journal_type: schedule_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Wage_Change return varchar2 is
  begin
    return t('journal_type: wage_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Rank_Change return varchar2 is
  begin
    return t('journal_type: rank_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Limit_Change return varchar2 is
  begin
    return t('journal_type: vacation_limit_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type(i_Journal_Type varchar2) return varchar2 is
  begin
    return --
    case i_Journal_Type --
    when Hpd_Pref.c_Journal_Type_Hiring then t_Journal_Type_Hiring --
    when Hpd_Pref.c_Journal_Type_Transfer then t_Journal_Type_Transfer --
    when Hpd_Pref.c_Journal_Type_Dismissal then t_Journal_Type_Dismissal --
    when Hpd_Pref.c_Journal_Type_Schedule_Change then t_Journal_Type_Schedule_Change --
    when Hpd_Pref.c_Journal_Type_Wage_Change then t_Journal_Type_Wage_Change --
    when Hpd_Pref.c_Journal_Type_Rank_Change then t_Journal_Type_Rank_Change --
    when Hpd_Pref.c_Journal_Type_Limit_Change then t_Journal_Type_Limit_Change --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Journal_Type_Hiring,
                                          Hpd_Pref.c_Journal_Type_Transfer,
                                          Hpd_Pref.c_Journal_Type_Dismissal,
                                          Hpd_Pref.c_Journal_Type_Schedule_Change,
                                          Hpd_Pref.c_Journal_Type_Wage_Change,
                                          Hpd_Pref.c_Journal_Type_Rank_Change,
                                          Hpd_Pref.c_Journal_Type_Limit_Change),
                           Array_Varchar2(t_Journal_Type_Hiring,
                                          t_Journal_Type_Transfer,
                                          t_Journal_Type_Dismissal,
                                          t_Journal_Type_Schedule_Change,
                                          t_Journal_Type_Wage_Change,
                                          t_Journal_Type_Rank_Change,
                                          t_Journal_Type_Limit_Change));
  end;

  ----------------------------------------------------------------------------------------------------
  -- fte kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Full return varchar2 is
  begin
    return t('fte_kind:full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Half return varchar2 is
  begin
    return t('fte_kind:half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Quarter return varchar2 is
  begin
    return t('fte_kind:quarter');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Occupied return varchar2 is
  begin
    return t('fte_kind:occupied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Custom return varchar2 is
  begin
    return t('fte_kind:custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Fte_Kind_Full,
                                          Hpd_Pref.c_Fte_Kind_Half,
                                          Hpd_Pref.c_Fte_Kind_Quarter,
                                          Hpd_Pref.c_Fte_Kind_Occupied,
                                          Hpd_Pref.c_Fte_Kind_Custom),
                           Array_Varchar2(t_Fte_Kind_Full,
                                          t_Fte_Kind_Half,
                                          t_Fte_Kind_Quarter,
                                          t_Fte_Kind_Occupied,
                                          t_Fte_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Adjustment Kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind_Full return varchar2 is
  begin
    return t('adjustment_kind: full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind_Incomplete return varchar2 is
  begin
    return t('adjustment_kind: incomplete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind(i_Adjustment_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Adjustment_Kind --
    when Hpd_Pref.c_Adjustment_Kind_Full then t_Adjustment_Kind_Full --
    when Hpd_Pref.c_Adjustment_Kind_Incomplete then t_Adjustment_Kind_Incomplete --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Adjustment_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Adjustment_Kind_Full,
                                          Hpd_Pref.c_Adjustment_Kind_Incomplete),
                           Array_Varchar2(t_Adjustment_Kind_Full, t_Adjustment_Kind_Incomplete));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind_Simple return varchar2 is
  begin
    return t('cv_contract_kind:simple');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind_Cyclical return varchar2 is
  begin
    return t('cv_contract_kind:cyclical');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind(i_Contract_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Contract_Kind --
    when Hpd_Pref.c_Cv_Contract_Kind_Simple then t_Cv_Contract_Kind_Simple --
    when Hpd_Pref.c_Cv_Contract_Kind_Cyclical then t_Cv_Contract_Kind_Cyclical --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cv_Contract_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Cv_Contract_Kind_Simple,
                                          Hpd_Pref.c_Cv_Contract_Kind_Cyclical),
                           Array_Varchar2(t_Cv_Contract_Kind_Simple, t_Cv_Contract_Kind_Cyclical));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Application Status
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_New return varchar2 is
  begin
    return t('application_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Waiting return varchar2 is
  begin
    return t('application_status:waiting');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Approved return varchar2 is
  begin
    return t('application_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_In_Progress return varchar2 is
  begin
    return t('application_status:in_progress');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Completed return varchar2 is
  begin
    return t('application_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Canceled return varchar2 is
  begin
    return t('application_status:canceled');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpd_Pref.c_Application_Status_New then t_Application_Status_New --
    when Hpd_Pref.c_Application_Status_Waiting then t_Application_Status_Waiting --
    when Hpd_Pref.c_Application_Status_Approved then t_Application_Status_Approved --
    when Hpd_Pref.c_Application_Status_In_Progress then t_Application_Status_In_Progress --
    when Hpd_Pref.c_Application_Status_Completed then t_Application_Status_Completed --
    when Hpd_Pref.c_Application_Status_Canceled then t_Application_Status_Canceled --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Application_Status_New,
                                          Hpd_Pref.c_Application_Status_Waiting,
                                          Hpd_Pref.c_Application_Status_Approved,
                                          Hpd_Pref.c_Application_Status_In_Progress,
                                          Hpd_Pref.c_Application_Status_Completed,
                                          Hpd_Pref.c_Application_Status_Canceled),
                           Array_Varchar2(t_Application_Status_New,
                                          t_Application_Status_Waiting,
                                          t_Application_Status_Approved,
                                          t_Application_Status_In_Progress,
                                          t_Application_Status_Completed,
                                          t_Application_Status_Canceled));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Contract Employment
  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment_Freelancer return varchar2 is
  begin
    return t('contract_employment:freelancer');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment_Staff_Member return varchar2 is
  begin
    return t('contract_employment:staff member');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpd_Pref.c_Contract_Employment_Freelancer then t_Contract_Employment_Freelancer --
    when Hpd_Pref.c_Contract_Employment_Staff_Member then t_Contract_Employment_Staff_Member --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Contract_Employments return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Contract_Employment_Freelancer,
                                          Hpd_Pref.c_Contract_Employment_Staff_Member),
                           Array_Varchar2(t_Contract_Employment_Freelancer,
                                          t_Contract_Employment_Staff_Member));
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} posted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} unposted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} saved $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} updated $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} deleted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  -- application notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Created
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2
  ) return varchar2 is
  begin
    return t('$1{user_name} created an application for $2{application_type_name} $3{application_number}',
             User_Name(i_Company_Id, i_User_Id),
             Application_Type_Name(i_Company_Id, i_Application_Type_Id),
             i_Application_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Status_Changed
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2,
    i_Old_Status          varchar2,
    i_New_Status          varchar2
  ) return varchar2 is
  begin
    return t('$1{user_name} changed status of application for $2{application_type_name} $3{application_number} from $4{old_status_name} to $5{new_status_name}',
             User_Name(i_Company_Id, i_User_Id),
             Application_Type_Name(i_Company_Id, i_Application_Type_Id),
             i_Application_Number,
             t_Application_Status(i_Old_Status),
             t_Application_Status(i_New_Status));
  end;

end Hpd_Util;
/

create or replace package Hrec_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Stage_Save(i_Stage Hrec_Stages%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Stage_Delete
  (
    i_Company_Id number,
    i_Stage_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_Save(i_Funnel Hrec_Pref.Funnel_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_Delete
  (
    i_Company_Id number,
    i_Funnel_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Reject_Reason_Save(i_Reject_Reason Hrec_Reject_Reasons%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Reject_Reason_Delete
  (
    i_Company_Id       number,
    i_Reject_Reason_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Save(i_Application Hrec_Pref.Application_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Draft
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Complited
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Group_Save(i_Group Hrec_Vacancy_Groups%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Group_Delete
  (
    i_Company_Id       number,
    i_Vacancy_Group_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Type_Save(i_Type Hrec_Vacancy_Types%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Type_Delete
  (
    i_Company_Id      number,
    i_Vacancy_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Save(i_Vacancy Hrec_Pref.Vacancy_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Add_Candidate(i_Candidate Hrec_Vacancy_Candidates%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Remove_Candidate
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Id   number,
    i_Candidate_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Operation_Save(i_Operation Hrec_Pref.Candidate_Operation_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Operation_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Operation_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Hh_Published_Vacancy_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Id   number,
    i_Vacancy_Code varchar2,
    i_Billing_Type varchar2,
    i_Vacancy_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------      
  Function Vacancy_Runtime_Service
  (
    i_Company_Id         number,
    i_User_Id            number,
    i_Host_Uri           varchar2,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Use_Access_Token   boolean := true,
    i_Use_Refresh_Token  boolean := false,
    i_Uri_Query_Params   Gmap := null,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Head_Hunter_Job_Save
  (
    i_Company_Id number,
    i_Code       number,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Head_Hunter_Jobs_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------   
  Procedure Head_Hunter_Region_Save
  (
    i_Company_Id number,
    i_Code       number,
    i_Name       varchar2,
    i_Parent_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Head_Hunter_Region_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Experience_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Experience_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Employments_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employments_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Driver_Licence_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Driver_Licence_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Schedule_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Schedule_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Level_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Level_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Key_Skill_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Key_Skill_Clear(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Job_Save
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Integration_Job Hrec_Pref.Hh_Integration_Job_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Region_Save
  (
    i_Company_Id         number,
    i_Integration_Region Hrec_Pref.Hh_Integration_Region_Nt
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Hh_Integration_Stage_Save
  (
    i_Company_Id number,
    i_Stage      Hrec_Pref.Hh_Integration_Stage_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Experience_Save
  (
    i_Company_Id number,
    i_Experience Hrec_Pref.Hh_Integration_Experience_Nt
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Integration_Employments_Save
  (
    i_Company_Id number,
    i_Employment Hrec_Pref.Hh_Integration_Employments_Nt
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Integration_Driver_Licence_Save
  (
    i_Company_Id number,
    i_Licences   Hrec_Pref.Hh_Integration_Driver_Licence_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Schedule_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Schedule   Hrec_Pref.Hh_Integration_Schedule_Nt
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Lang_Save
  (
    i_Company_Id number,
    i_Lang       Hrec_Pref.Hh_Integration_Lang_Nt
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Lang_Level_Save
  (
    i_Company_Id number,
    i_Lang_Level Hrec_Pref.Hh_Integration_Lang_Level_Nt
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employer_Id_Save(i_Employer_Id Hrec_Hh_Employer_Ids%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employer_Id_Delete(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Resume_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Resume_Code   varchar2,
    i_Candidate_Id  number,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Middle_Name   varchar2,
    i_Gender_Code   varchar2,
    i_Date_Of_Birth date,
    i_Extra_Data    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Subscription_Save
  (
    i_Company_Id        number,
    i_Subscription_Code varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Subscription_Delete(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Negotiation_Save
  (
    i_Company_Id       number,
    i_Filial_Id        varchar2,
    i_Topic_Code       varchar2,
    i_Event_Code       varchar2,
    i_Negotiation_Date varchar2,
    i_Vacancy_Code     varchar2,
    i_Resume_Code      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Event_Save
  (
    i_Company_Id        number,
    i_Event_Code        varchar2,
    i_Subscription_Code varchar2,
    i_Event_Type        varchar2,
    i_User_Code         varchar2
  );
  ----------------------------------------------------------------------------------------------------      
  Function Olx_Runtime_Service
  (
    i_Company_Id         number,
    i_User_Id            number,
    i_Host_Uri           varchar2,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Use_Access_Token   boolean := true,
    i_Use_Refresh_Token  boolean := false,
    i_Uri_Query_Params   Gmap := null,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Job_Category_Save(i_Category Hrec_Olx_Job_Categories%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Job_Category_Delete(i_Category_Code number);
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Save(i_Attribute Hrec_Pref.Olx_Attribute_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Delete
  (
    i_Category_Code  number,
    i_Attribute_Code varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Region_Save(i_Region Hrec_Olx_Regions%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Region_Clear;
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_City_Save(i_City Hrec_Olx_Cities%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_City_Delete(i_City_Code number);
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_District_Save(i_District Hrec_Olx_Districts%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_District_Delete(i_District_Code number);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Olx_Integration_Region_Save
  (
    i_Company_Id number,
    i_Regions    Hrec_Pref.Olx_Integration_Region_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Published_Vacancy_Save(i_Vacancy Hrec_Pref.Olx_Published_Vacancy_Rt);
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Published_Vacancy_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Vacancy_Candidates_Save
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Vacancy_Id      number,
    i_Candidate_Codes Array_Number
  );
  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Vacancy_Candidate_Save
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Vacancy_Id     number,
    i_Candidate_Code number,
    i_Candidate_Id   number
  );
end Hrec_Api;
/
create or replace package body Hrec_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Stage_Save(i_Stage Hrec_Stages%rowtype) is
    v_State varchar2(1) := i_Stage.State;
    v_Dummy number;
    r_Stage Hrec_Stages%rowtype;
  begin
    if z_Hrec_Stages.Exist_Lock(i_Company_Id => i_Stage.Company_Id,
                                i_Stage_Id   => i_Stage.Stage_Id,
                                o_Row        => r_Stage) then
      if v_State = 'P' then
        if r_Stage.Pcode is not null then
          v_State := 'A';
        end if;
      
        begin
          select 1
            into v_Dummy
            from Hrec_Vacancy_Candidates q
           where q.Company_Id = r_Stage.Company_Id
             and q.Stage_Id = r_Stage.Stage_Id
             and Rownum = 1;
        
          Hrec_Error.Raise_016(i_Stage.Name);
        exception
          when No_Data_Found then
            null;
        end;
      end if;
    
      z_Hrec_Stages.Update_One(i_Company_Id => r_Stage.Company_Id,
                               i_Stage_Id   => r_Stage.Stage_Id,
                               i_Name       => Option_Varchar2(i_Stage.Name),
                               i_Order_No   => Option_Number(i_Stage.Order_No),
                               i_Code       => Option_Varchar2(i_Stage.Code),
                               i_State      => Option_Varchar2(v_State));
    else
      z_Hrec_Stages.Insert_One(i_Company_Id => i_Stage.Company_Id,
                               i_Stage_Id   => i_Stage.Stage_Id,
                               i_Name       => i_Stage.Name,
                               i_State      => v_State,
                               i_Order_No   => i_Stage.Order_No,
                               i_Code       => i_Stage.Code,
                               i_Pcode      => null);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Stage_Delete
  (
    i_Company_Id number,
    i_Stage_Id   number
  ) is
    r_Stage Hrec_Stages%rowtype;
  begin
    r_Stage := z_Hrec_Stages.Lock_Load(i_Company_Id => i_Company_Id, i_Stage_Id => i_Stage_Id);
  
    if r_Stage.Pcode is not null then
      Hrec_Error.Raise_003(r_Stage.Name);
    end if;
  
    z_Hrec_Stages.Delete_One(i_Company_Id => r_Stage.Company_Id, i_Stage_Id => r_Stage.Stage_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_Save(i_Funnel Hrec_Pref.Funnel_Rt) is
    r_Funnel Hrec_Funnels%rowtype;
  begin
    if z_Hrec_Funnels.Exist_Lock(i_Company_Id => i_Funnel.Company_Id,
                                 i_Funnel_Id  => i_Funnel.Funnel_Id,
                                 o_Row        => r_Funnel) then
      if r_Funnel.Pcode is not null then
        Hrec_Error.Raise_014(r_Funnel.Name);
      end if;
    else
      r_Funnel.Company_Id := i_Funnel.Company_Id;
      r_Funnel.Funnel_Id  := i_Funnel.Funnel_Id;
    end if;
  
    r_Funnel.Name  := i_Funnel.Name;
    r_Funnel.Code  := i_Funnel.Code;
    r_Funnel.State := i_Funnel.State;
  
    z_Hrec_Funnels.Save_Row(r_Funnel);
  
    for i in 1 .. i_Funnel.Stage_Ids.Count
    loop
      z_Hrec_Funnel_Stages.Insert_Try(i_Company_Id => i_Funnel.Company_Id,
                                      i_Funnel_Id  => i_Funnel.Funnel_Id,
                                      i_Stage_Id   => i_Funnel.Stage_Ids(i));
    end loop;
  
    delete from Hrec_Funnel_Stages q
     where q.Company_Id = i_Funnel.Company_Id
       and q.Funnel_Id = i_Funnel.Funnel_Id
       and q.Stage_Id not member of i_Funnel.Stage_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_Delete
  (
    i_Company_Id number,
    i_Funnel_Id  number
  ) is
    r_Funnel Hrec_Funnels%rowtype;
  begin
    r_Funnel := z_Hrec_Funnels.Lock_Load(i_Company_Id => i_Company_Id, i_Funnel_Id => i_Funnel_Id);
  
    if r_Funnel.Pcode is not null then
      Hrec_Error.Raise_005(r_Funnel.Name);
    end if;
  
    z_Hrec_Funnels.Delete_One(i_Company_Id => i_Company_Id, i_Funnel_Id => i_Funnel_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reject_Reason_Save(i_Reject_Reason Hrec_Reject_Reasons%rowtype) is
  begin
    z_Hrec_Reject_Reasons.Save_Row(i_Reject_Reason);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reject_Reason_Delete
  (
    i_Company_Id       number,
    i_Reject_Reason_Id number
  ) is
  begin
    z_Hrec_Reject_Reasons.Delete_One(i_Company_Id       => i_Company_Id,
                                     i_Reject_Reason_Id => i_Reject_Reason_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Save(i_Application Hrec_Pref.Application_Rt) is
    r_Application Hrec_Applications%rowtype;
    v_Exists      boolean := false;
  begin
    if z_Hrec_Applications.Exist_Lock(i_Company_Id     => i_Application.Company_Id,
                                      i_Filial_Id      => i_Application.Filial_Id,
                                      i_Application_Id => i_Application.Application_Id,
                                      o_Row            => r_Application) then
      if r_Application.Status not in
         (Hrec_Pref.c_Application_Status_Draft, Hrec_Pref.c_Application_Status_Waiting) then
        Hrec_Error.Raise_001(r_Application.Application_Id,
                             Hrec_Util.t_Application_Status(r_Application.Status));
      end if;
    
      v_Exists := true;
    else
      r_Application.Company_Id     := i_Application.Company_Id;
      r_Application.Filial_Id      := i_Application.Filial_Id;
      r_Application.Application_Id := i_Application.Application_Id;
    end if;
  
    r_Application.Application_Number := i_Application.Application_Number;
    r_Application.Division_Id        := i_Application.Division_Id;
    r_Application.Job_Id             := i_Application.Job_Id;
    r_Application.Quantity           := i_Application.Quantity;
    r_Application.Wage               := i_Application.Wage;
    r_Application.Responsibilities   := i_Application.Responsibilities;
    r_Application.Requirements       := i_Application.Requirements;
    r_Application.Status             := i_Application.Status;
    r_Application.Note               := i_Application.Note;
  
    if r_Application.Status not in
       (Hrec_Pref.c_Application_Status_Draft, Hrec_Pref.c_Application_Status_Waiting) then
      Hrec_Error.Raise_006(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    if v_Exists then
      z_Hrec_Applications.Update_Row(r_Application);
    else
      if r_Application.Application_Number is null then
        r_Application.Application_Number := Md_Core.Gen_Number(i_Company_Id => r_Application.Company_Id,
                                                               i_Filial_Id  => r_Application.Filial_Id,
                                                               i_Table      => Zt.Hrec_Applications,
                                                               i_Column     => z.Application_Number);
      end if;
    
      z_Hrec_Applications.Insert_Row(r_Application);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Draft
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hrec_Pref.c_Application_Status_Canceled then
      Hrec_Error.Raise_009(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Update_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id,
                                   i_Status         => Option_Varchar2(Hrec_Pref.c_Application_Status_Draft));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hrec_Pref.c_Application_Status_Draft then
      Hrec_Error.Raise_010(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Update_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id,
                                   i_Status         => Option_Varchar2(Hrec_Pref.c_Application_Status_Waiting));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hrec_Pref.c_Application_Status_Waiting then
      Hrec_Error.Raise_011(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Update_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id,
                                   i_Status         => Option_Varchar2(Hrec_Pref.c_Application_Status_Approved));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Complited
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hrec_Pref.c_Application_Status_Approved then
      Hrec_Error.Raise_012(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Update_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id,
                                   i_Status         => Option_Varchar2(Hrec_Pref.c_Application_Status_Complited));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hrec_Pref.c_Application_Status_Waiting then
      Hrec_Error.Raise_013(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Update_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id,
                                   i_Status         => Option_Varchar2(Hrec_Pref.c_Application_Status_Canceled));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hrec_Applications%rowtype;
  begin
    r_Application := z_Hrec_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                   i_Filial_Id      => i_Filial_Id,
                                                   i_Application_Id => i_Application_Id);
  
    if r_Application.Status not in
       (Hrec_Pref.c_Application_Status_Draft, Hrec_Pref.c_Application_Status_Waiting) then
      Hrec_Error.Raise_002(r_Application.Application_Id,
                           Hrec_Util.t_Application_Status(r_Application.Status));
    end if;
  
    z_Hrec_Applications.Delete_One(i_Company_Id     => r_Application.Company_Id,
                                   i_Filial_Id      => r_Application.Filial_Id,
                                   i_Application_Id => r_Application.Application_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Group_Save(i_Group Hrec_Vacancy_Groups%rowtype) is
    r_Data Hrec_Vacancy_Groups%rowtype;
  begin
    if z_Hrec_Vacancy_Groups.Exist_Lock(i_Company_Id       => i_Group.Company_Id,
                                        i_Vacancy_Group_Id => i_Group.Vacancy_Group_Id,
                                        o_Row              => r_Data) and
       r_Data.Pcode <> i_Group.Pcode then
      Hrec_Error.Raise_034(i_Group.Name);
    end if;
  
    z_Hrec_Vacancy_Groups.Save_Row(i_Group);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Group_Delete
  (
    i_Company_Id       number,
    i_Vacancy_Group_Id number
  ) is
    r_Data Hrec_Vacancy_Groups%rowtype;
  begin
    if z_Hrec_Vacancy_Groups.Exist_Lock(i_Company_Id       => i_Company_Id,
                                        i_Vacancy_Group_Id => i_Vacancy_Group_Id,
                                        o_Row              => r_Data) and r_Data.Pcode is not null then
      Hrec_Error.Raise_035(r_Data.Name);
    end if;
  
    z_Hrec_Vacancy_Groups.Delete_One(i_Company_Id       => i_Company_Id,
                                     i_Vacancy_Group_Id => i_Vacancy_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Type_Save(i_Type Hrec_Vacancy_Types%rowtype) is
    r_Data Hrec_Vacancy_Types%rowtype;
  begin
    if z_Hrec_Vacancy_Types.Exist_Lock(i_Company_Id      => i_Type.Company_Id,
                                       i_Vacancy_Type_Id => i_Type.Vacancy_Type_Id,
                                       o_Row             => r_Data) and
       r_Data.Pcode <> i_Type.Pcode then
      Hrec_Error.Raise_036(i_Type.Name);
    end if;
  
    z_Hrec_Vacancy_Types.Save_Row(i_Type);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Type_Delete
  (
    i_Company_Id      number,
    i_Vacancy_Type_Id number
  ) is
    r_Data Hrec_Vacancy_Types%rowtype;
  begin
    if z_Hrec_Vacancy_Types.Exist_Lock(i_Company_Id      => i_Company_Id,
                                       i_Vacancy_Type_Id => i_Vacancy_Type_Id,
                                       o_Row             => r_Data) and r_Data.Pcode is not null then
      Hrec_Error.Raise_037(r_Data.Name);
    end if;
  
    z_Hrec_Vacancy_Types.Delete_One(i_Company_Id      => i_Company_Id,
                                    i_Vacancy_Type_Id => i_Vacancy_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Save(i_Vacancy Hrec_Pref.Vacancy_Rt) is
    r_Vacancy   Hrec_Vacancies%rowtype;
    v_Lang      Hrec_Pref.Vacancy_Lang_Rt;
    v_Type      Hrec_Pref.Vacancy_Type_Rt;
    v_Lang_Ids  Array_Number := Array_Number();
    v_Group_Ids Array_Number := Array_Number();
    v_Exists    boolean := false;
  begin
    if z_Hrec_Vacancies.Exist_Lock(i_Company_Id => i_Vacancy.Company_Id,
                                   i_Filial_Id  => i_Vacancy.Filial_Id,
                                   i_Vacancy_Id => i_Vacancy.Vacancy_Id,
                                   o_Row        => r_Vacancy) then
      if r_Vacancy.Status <> Hrec_Pref.c_Vacancy_Status_Open then
        Hrec_Error.Raise_007(i_Vacancy_Id => r_Vacancy.Vacancy_Id,
                             i_State_Name => Hrec_Util.t_Vacancy_Status(r_Vacancy.Status));
      end if;
    
      v_Exists := true;
    else
      r_Vacancy.Company_Id := i_Vacancy.Company_Id;
      r_Vacancy.Filial_Id  := i_Vacancy.Filial_Id;
      r_Vacancy.Vacancy_Id := i_Vacancy.Vacancy_Id;
    end if;
  
    r_Vacancy.Name                := i_Vacancy.Name;
    r_Vacancy.Opened_Date         := i_Vacancy.Opened_Date;
    r_Vacancy.Deadline            := i_Vacancy.Deadline;
    r_Vacancy.Closed_Date         := i_Vacancy.Closed_Date;
    r_Vacancy.Application_Id      := i_Vacancy.Application_Id;
    r_Vacancy.Division_Id         := i_Vacancy.Division_Id;
    r_Vacancy.Job_Id              := i_Vacancy.Job_Id;
    r_Vacancy.Funnel_Id           := i_Vacancy.Funnel_Id;
    r_Vacancy.Region_Id           := i_Vacancy.Region_Id;
    r_Vacancy.Schedule_Id         := i_Vacancy.Schedule_Id;
    r_Vacancy.Quantity            := i_Vacancy.Quantity;
    r_Vacancy.Scope               := i_Vacancy.Scope;
    r_Vacancy.Urgent              := i_Vacancy.Urgent;
    r_Vacancy.Wage_From           := i_Vacancy.Wage_From;
    r_Vacancy.Wage_To             := i_Vacancy.Wage_To;
    r_Vacancy.Description         := i_Vacancy.Description;
    r_Vacancy.Description_In_Html := i_Vacancy.Description_In_Html;
    r_Vacancy.Status              := Hrec_Pref.c_Vacancy_Status_Open;
  
    if v_Exists then
      z_Hrec_Vacancies.Update_Row(r_Vacancy);
    else
      z_Hrec_Vacancies.Insert_Row(r_Vacancy);
    end if;
  
    -- save recruiters
    for i in 1 .. i_Vacancy.Recruiter_Ids.Count
    loop
      z_Hrec_Vacancy_Recruiters.Insert_Try(i_Company_Id => r_Vacancy.Company_Id,
                                           i_Filial_Id  => r_Vacancy.Filial_Id,
                                           i_Vacancy_Id => r_Vacancy.Vacancy_Id,
                                           i_User_Id    => i_Vacancy.Recruiter_Ids(i));
    end loop;
  
    delete from Hrec_Vacancy_Recruiters q
     where q.Company_Id = r_Vacancy.Company_Id
       and q.Filial_Id = r_Vacancy.Filial_Id
       and q.Vacancy_Id = r_Vacancy.Vacancy_Id
       and q.User_Id not member of i_Vacancy.Recruiter_Ids;
  
    -- save langs
    v_Lang_Ids.Extend(i_Vacancy.Langs.Count);
  
    for i in 1 .. i_Vacancy.Langs.Count
    loop
      v_Lang := i_Vacancy.Langs(i);
      v_Lang_Ids(i) := v_Lang.Lang_Id;
    
      z_Hrec_Vacancy_Langs.Save_One(i_Company_Id    => r_Vacancy.Company_Id,
                                    i_Filial_Id     => r_Vacancy.Filial_Id,
                                    i_Vacancy_Id    => r_Vacancy.Vacancy_Id,
                                    i_Lang_Id       => v_Lang.Lang_Id,
                                    i_Lang_Level_Id => v_Lang.Lang_Level_Id);
    end loop;
  
    delete from Hrec_Vacancy_Langs q
     where q.Company_Id = r_Vacancy.Company_Id
       and q.Filial_Id = r_Vacancy.Filial_Id
       and q.Vacancy_Id = r_Vacancy.Vacancy_Id
       and q.Lang_Id not member of v_Lang_Ids;
  
    -- save vacancy types
    v_Group_Ids.Extend(i_Vacancy.Vacancy_Types.Count);
  
    for i in 1 .. i_Vacancy.Vacancy_Types.Count
    loop
      v_Type := i_Vacancy.Vacancy_Types(i);
      v_Group_Ids(i) := v_Type.Vacancy_Group_Id;
    
      for j in 1 .. v_Type.Vacancy_Type_Ids.Count
      loop
        z_Hrec_Vacancy_Type_Binds.Insert_Try(i_Company_Id       => r_Vacancy.Company_Id,
                                             i_Filial_Id        => r_Vacancy.Filial_Id,
                                             i_Vacancy_Id       => r_Vacancy.Vacancy_Id,
                                             i_Vacancy_Group_Id => v_Type.Vacancy_Group_Id,
                                             i_Vacancy_Type_Id  => v_Type.Vacancy_Type_Ids(j));
      end loop;
    
      delete from Hrec_Vacancy_Type_Binds q
       where q.Company_Id = r_Vacancy.Company_Id
         and q.Filial_Id = r_Vacancy.Filial_Id
         and q.Vacancy_Id = r_Vacancy.Vacancy_Id
         and q.Vacancy_Group_Id = v_Type.Vacancy_Group_Id
         and q.Vacancy_Type_Id not member of v_Type.Vacancy_Type_Ids;
    end loop;
  
    delete from Hrec_Vacancy_Type_Binds q
     where q.Company_Id = r_Vacancy.Company_Id
       and q.Filial_Id = r_Vacancy.Filial_Id
       and q.Vacancy_Id = r_Vacancy.Vacancy_Id
       and q.Vacancy_Group_Id not member of v_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  ) is
    r_Vacancy Hrec_Vacancies%rowtype;
  begin
    r_Vacancy := z_Hrec_Vacancies.Lock_Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Vacancy_Id => i_Vacancy_Id);
  
    if r_Vacancy.Status <> Hrec_Pref.c_Vacancy_Status_Open then
      Hrec_Error.Raise_017(r_Vacancy.Vacancy_Id, r_Vacancy.Closed_Date);
    end if;
  
    z_Hrec_Vacancies.Update_One(i_Company_Id  => r_Vacancy.Company_Id,
                                i_Filial_Id   => r_Vacancy.Filial_Id,
                                i_Vacancy_Id  => r_Vacancy.Vacancy_Id,
                                i_Closed_Date => Option_Date(Trunc(Htt_Util.Get_Current_Date(i_Company_Id => r_Vacancy.Company_Id,
                                                                                             i_Filial_Id  => r_Vacancy.Filial_Id))),
                                i_Status      => Option_Varchar2(Hrec_Pref.c_Vacancy_Status_Close));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Add_Candidate(i_Candidate Hrec_Vacancy_Candidates%rowtype) is
    v_Todo_Stage_Id number := Hrec_Util.Stage_Id_By_Pcode(i_Company_Id => i_Candidate.Company_Id,
                                                          i_Pcode      => Hrec_Pref.c_Pcode_Stage_Todo);
  begin
    z_Hrec_Vacancy_Candidates.Insert_One(i_Company_Id       => i_Candidate.Company_Id,
                                         i_Filial_Id        => i_Candidate.Filial_Id,
                                         i_Vacancy_Id       => i_Candidate.Vacancy_Id,
                                         i_Candidate_Id     => i_Candidate.Candidate_Id,
                                         i_Stage_Id         => v_Todo_Stage_Id,
                                         i_Reject_Reason_Id => null);
  
    z_Hrec_Operations.Insert_One(i_Company_Id       => i_Candidate.Company_Id,
                                 i_Filial_Id        => i_Candidate.Filial_Id,
                                 i_Operation_Id     => Hrec_Next.Operation_Id,
                                 i_Operation_Kind   => Hrec_Pref.c_Operation_Kind_Action,
                                 i_Vacancy_Id       => i_Candidate.Vacancy_Id,
                                 i_Candidate_Id     => i_Candidate.Candidate_Id,
                                 i_From_Stage_Id    => null,
                                 i_To_Stage_Id      => v_Todo_Stage_Id,
                                 i_Reject_Reason_Id => null,
                                 i_Note             => null);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Remove_Candidate
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Id   number,
    i_Candidate_Id number
  ) is
    r_Candidate Hrec_Vacancy_Candidates%rowtype;
  begin
    r_Candidate := z_Hrec_Vacancy_Candidates.Lock_Load(i_Company_Id   => i_Company_Id,
                                                       i_Filial_Id    => i_Filial_Id,
                                                       i_Vacancy_Id   => i_Vacancy_Id,
                                                       i_Candidate_Id => i_Candidate_Id);
  
    if r_Candidate.Stage_Id <>
       Hrec_Util.Stage_Id_By_Pcode(i_Company_Id => i_Company_Id,
                                   i_Pcode      => Hrec_Pref.c_Pcode_Stage_Todo) then
      Hrec_Error.Raise_008(r_Candidate.Candidate_Id,
                           z_Hrec_Stages.Load(i_Company_Id => r_Candidate.Company_Id, i_Stage_Id => r_Candidate.Stage_Id).Name);
    end if;
  
    z_Hrec_Vacancy_Candidates.Delete_One(i_Company_Id   => r_Candidate.Company_Id,
                                         i_Filial_Id    => r_Candidate.Filial_Id,
                                         i_Vacancy_Id   => r_Candidate.Vacancy_Id,
                                         i_Candidate_Id => r_Candidate.Candidate_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  ) is
  begin
    z_Hrec_Vacancies.Delete_One(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Vacancy_Id => i_Vacancy_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Operation_Save(i_Operation Hrec_Pref.Candidate_Operation_Rt) is
    r_Vacancy_Candidate Hrec_Vacancy_Candidates%rowtype;
  begin
    if z_Hrec_Operations.Exist(i_Company_Id   => i_Operation.Company_Id,
                               i_Filial_Id    => i_Operation.Filial_Id,
                               i_Operation_Id => i_Operation.Operation_Id) then
      z_Hrec_Operations.Update_One(i_Company_Id       => i_Operation.Company_Id,
                                   i_Filial_Id        => i_Operation.Filial_Id,
                                   i_Operation_Id     => i_Operation.Operation_Id,
                                   i_Reject_Reason_Id => Option_Number(i_Operation.Reject_Reason_Id),
                                   i_Note             => Option_Varchar2(i_Operation.Note));
    else
      r_Vacancy_Candidate := z_Hrec_Vacancy_Candidates.Lock_Load(i_Company_Id   => i_Operation.Company_Id,
                                                                 i_Filial_Id    => i_Operation.Filial_Id,
                                                                 i_Vacancy_Id   => i_Operation.Vacancy_Id,
                                                                 i_Candidate_Id => i_Operation.Candidate_Id);
    
      z_Hrec_Operations.Insert_One(i_Company_Id       => i_Operation.Company_Id,
                                   i_Filial_Id        => i_Operation.Filial_Id,
                                   i_Operation_Id     => i_Operation.Operation_Id,
                                   i_Operation_Kind   => i_Operation.Operation_Kind,
                                   i_Vacancy_Id       => i_Operation.Vacancy_Id,
                                   i_Candidate_Id     => i_Operation.Candidate_Id,
                                   i_From_Stage_Id    => r_Vacancy_Candidate.Stage_Id,
                                   i_To_Stage_Id      => i_Operation.To_Stage_Id,
                                   i_Reject_Reason_Id => i_Operation.Reject_Reason_Id,
                                   i_Note             => i_Operation.Note);
    
      if i_Operation.Operation_Kind = Hrec_Pref.c_Operation_Kind_Action then
        z_Hrec_Vacancy_Candidates.Update_One(i_Company_Id       => i_Operation.Company_Id,
                                             i_Filial_Id        => i_Operation.Filial_Id,
                                             i_Vacancy_Id       => i_Operation.Vacancy_Id,
                                             i_Candidate_Id     => i_Operation.Candidate_Id,
                                             i_Stage_Id         => Option_Number(i_Operation.To_Stage_Id),
                                             i_Reject_Reason_Id => Option_Number(i_Operation.Reject_Reason_Id));
      
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Operation_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Operation_Id number
  ) is
    r_Operation Hrec_Operations%rowtype;
  begin
    r_Operation := z_Hrec_Operations.Lock_Load(i_Company_Id   => i_Company_Id,
                                               i_Filial_Id    => i_Filial_Id,
                                               i_Operation_Id => i_Operation_Id);
  
    if r_Operation.Operation_Kind <> Hrec_Pref.c_Operation_Kind_Comment then
      Hrec_Error.Raise_015(i_Operation_Id   => r_Operation.Operation_Id,
                           i_Operation_Kind => Hrec_Util.t_Operation_Kind(r_Operation.Operation_Kind));
    end if;
  
    z_Hrec_Operations.Delete_One(i_Company_Id   => r_Operation.Company_Id,
                                 i_Filial_Id    => r_Operation.Filial_Id,
                                 i_Operation_Id => r_Operation.Operation_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Published_Vacancy_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Id   number,
    i_Vacancy_Code varchar2,
    i_Billing_Type varchar2,
    i_Vacancy_Type varchar2
  ) is
  begin
    z_Hrec_Hh_Published_Vacancies.Save_One(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Vacancy_Id   => i_Vacancy_Id,
                                           i_Vacancy_Code => i_Vacancy_Code,
                                           i_Billing_Type => i_Billing_Type,
                                           i_Vacancy_Type => i_Vacancy_Type);
  end;

  ----------------------------------------------------------------------------------------------------      
  Function Vacancy_Runtime_Service
  (
    i_Company_Id         number,
    i_User_Id            number,
    i_Host_Uri           varchar2,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Use_Access_Token   boolean := true,
    i_Use_Refresh_Token  boolean := false,
    i_Uri_Query_Params   Gmap := null,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Api_Uri     varchar2(300) := i_Api_Uri;
    r_Oauth_Token Hes_Oauth2_Tokens%rowtype;
  
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  
    --------------------------------------------------
    Function Get_Oauth2_Token return Hes_Oauth2_Tokens%rowtype is
      r_Oauth_Token Hes_Oauth2_Tokens%rowtype;
    begin
      r_Oauth_Token := z_Hes_Oauth2_Tokens.Take(i_Company_Id  => i_Company_Id,
                                                i_User_Id     => i_User_Id,
                                                i_Provider_Id => Hes_Pref.c_Provider_Hh_Id);
    
      if i_Use_Access_Token and
         (r_Oauth_Token.Access_Token is null or
         i_Use_Refresh_Token and r_Oauth_Token.Expires_On < Current_Timestamp) then
        Hrec_Error.Raise_018;
      end if;
    
      return r_Oauth_Token;
    end;
  
    --------------------------------------------------
    Procedure Put_Refresh_Token_Info is
      r_Credentials Hes_Oauth2_Credentials%rowtype;
      r_Provider    Hes_Oauth2_Providers%rowtype;
    begin
      v_Details.Put('refresh_token', r_Oauth_Token.Refresh_Token);
    
      r_Provider    := z_Hes_Oauth2_Providers.Load(Hes_Pref.c_Provider_Hh_Id);
      r_Credentials := z_Hes_Oauth2_Credentials.Load(i_Company_Id  => i_Company_Id,
                                                     i_Provider_Id => Hes_Pref.c_Provider_Hh_Id);
    
      v_Details.Put('provider_id', r_Provider.Provider_Id);
      v_Details.Put('token_url', r_Provider.Token_Url);
      v_Details.Put('content_type', r_Provider.Content_Type);
      v_Details.Put('scope', r_Provider.Scope);
    
      v_Details.Put('company_id', i_Company_Id);
      v_Details.Put('user_id', i_User_Id);
    
      v_Details.Put('client_id', r_Credentials.Client_Id);
      v_Details.Put('client_secret', r_Credentials.Client_Secret);
    end;
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys Array_Varchar2;
      v_Delimiter  varchar2(1) := '&';
      v_Key        varchar2(100);
      result       varchar2(4000);
    begin
      if i_Uri_Query_Params is null then
        return result;
      end if;
    
      v_Param_Keys := i_Uri_Query_Params.Keyset;
    
      if v_Param_Keys.Count = 0 then
        return result;
      end if;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || i_Uri_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return '?' || result;
    end;
  
  begin
    if i_Uri_Query_Params is not null then
      v_Api_Uri := v_Api_Uri || Gather_Query_Params;
    end if;
  
    r_Oauth_Token := Get_Oauth2_Token;
  
    v_Details.Put('host', i_Host_Uri);
    v_Details.Put('request_path', v_Api_Uri);
    v_Details.Put('method', i_Api_Method);
  
    if i_Use_Access_Token then
      v_Details.Put('token', r_Oauth_Token.Access_Token);
    end if;
  
    if i_Use_Access_Token and i_Use_Refresh_Token and r_Oauth_Token.Expires_On < Current_Timestamp and
       r_Oauth_Token.Refresh_Token is not null then
      Put_Refresh_Token_Info;
    end if;
  
    v_Service := Runtime_Service(Hrec_Pref.c_Head_Hunter_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Head_Hunter_Job_Save
  (
    i_Company_Id number,
    i_Code       number,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Head_Hunter_Jobs.Save_One(i_Company_Id => i_Company_Id,
                                     i_Code       => i_Code,
                                     i_Name       => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Head_Hunter_Jobs_Clear(i_Company_Id number) is
  begin
    delete Hrec_Head_Hunter_Jobs q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------   
  Procedure Head_Hunter_Region_Save
  (
    i_Company_Id number,
    i_Code       number,
    i_Name       varchar2,
    i_Parent_Id  number
  ) is
  begin
    z_Hrec_Head_Hunter_Regions.Save_One(i_Company_Id => i_Company_Id,
                                        i_Code       => i_Code,
                                        i_Name       => i_Name,
                                        i_Parent_Id  => i_Parent_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Head_Hunter_Region_Clear(i_Company_Id number) is
  begin
    delete Hrec_Head_Hunter_Regions q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Experience_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Experiences.Save_One(i_Company_Id => i_Company_Id,
                                   i_Code       => i_Code,
                                   i_Name       => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Experience_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Experiences q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Employments_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Employments.Save_One(i_Company_Id => i_Company_Id,
                                   i_Code       => i_Code,
                                   i_Name       => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employments_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Employments q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Driver_Licence_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Driver_Licences.Save_One(i_Company_Id => i_Company_Id,
                                       i_Code       => i_Code,
                                       i_Name       => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Driver_Licence_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Driver_Licences q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Schedule_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Schedules.Save_One(i_Company_Id => i_Company_Id, i_Code => i_Code, i_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Schedule_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Schedules q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Langs.Save_One(i_Company_Id => i_Company_Id, i_Code => i_Code, i_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Langs q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Level_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Lang_Levels.Save_One(i_Company_Id => i_Company_Id,
                                   i_Code       => i_Code,
                                   i_Name       => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Lang_Level_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Lang_Levels q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Key_Skill_Save
  (
    i_Company_Id number,
    i_Code       varchar2,
    i_Name       varchar2
  ) is
  begin
    z_Hrec_Hh_Key_Skills.Save_One(i_Company_Id => i_Company_Id, i_Code => i_Code, i_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Key_Skill_Clear(i_Company_Id number) is
  begin
    delete Hrec_Hh_Key_Skills q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Job_Save
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Integration_Job Hrec_Pref.Hh_Integration_Job_Nt
  ) is
    v_Integration_Job Hrec_Pref.Hh_Integration_Job_Rt;
    v_Job_Codes       Array_Number := Array_Number();
  begin
    v_Job_Codes.Extend(i_Integration_Job.Count);
  
    for i in 1 .. i_Integration_Job.Count
    loop
      v_Integration_Job := i_Integration_Job(i);
      v_Job_Codes(i) := v_Integration_Job.Job_Code;
    
      for j in 1 .. v_Integration_Job.Job_Ids.Count
      loop
        z_Hrec_Hh_Integration_Jobs.Insert_Try(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Job_Code   => v_Integration_Job.Job_Code,
                                              i_Job_Id     => v_Integration_Job.Job_Ids(j));
      end loop;
    
      delete Hrec_Hh_Integration_Jobs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Job_Code = v_Integration_Job.Job_Code
         and q.Job_Id not member of v_Integration_Job.Job_Ids;
    end loop;
  
    delete Hrec_Hh_Integration_Jobs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Job_Code not member of v_Job_Codes;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Region_Save
  
  (
    i_Company_Id         number,
    i_Integration_Region Hrec_Pref.Hh_Integration_Region_Nt
  ) is
    v_Integration_Region Hrec_Pref.Hh_Integration_Region_Rt;
    v_Region_Ids         Array_Number := Array_Number();
  begin
    v_Region_Ids.Extend(i_Integration_Region.Count);
  
    for i in 1 .. i_Integration_Region.Count
    loop
      v_Integration_Region := i_Integration_Region(i);
      v_Region_Ids(i) := v_Integration_Region.Region_Id;
    
      z_Hrec_Hh_Integration_Regions.Save_One(i_Company_Id  => i_Company_Id,
                                             i_Region_Id   => v_Integration_Region.Region_Id,
                                             i_Region_Code => v_Integration_Region.Region_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Regions q
     where q.Company_Id = i_Company_Id
       and q.Region_Id not member of v_Region_Ids;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Hh_Integration_Stage_Save
  (
    i_Company_Id number,
    i_Stage      Hrec_Pref.Hh_Integration_Stage_Nt
  ) is
    v_Stage     Hrec_Pref.Hh_Integration_Stage_Rt;
    v_Stage_Ids Array_Number := Array_Number();
  begin
    for i in 1 .. i_Stage.Count
    loop
      v_Stage := i_Stage(i);
    
      for j in 1 .. v_Stage.Stage_Ids.Count
      loop
        v_Stage_Ids.Extend;
        v_Stage_Ids(v_Stage_Ids.Count) := v_Stage.Stage_Ids(j);
      
        z_Hrec_Hh_Integration_Stages.Save_One(i_Company_Id => i_Company_Id,
                                              i_Stage_Id   => v_Stage.Stage_Ids(j),
                                              i_Stage_Code => v_Stage.Stage_Code);
      end loop;
    end loop;
  
    delete Hrec_Hh_Integration_Stages q
     where q.Company_Id = i_Company_Id
       and q.Stage_Id not member of v_Stage_Ids
       and q.Stage_Code <> Hrec_Pref.c_Hh_Todo_Stage_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Experience_Save
  (
    i_Company_Id number,
    i_Experience Hrec_Pref.Hh_Integration_Experience_Nt
  ) is
    v_Experience       Hrec_Pref.Hh_Integration_Experience_Rt;
    v_Vacancy_Type_Ids Array_Number := Array_Number();
  begin
    v_Vacancy_Type_Ids.Extend(i_Experience.Count);
  
    for i in 1 .. i_Experience.Count
    loop
      v_Experience := i_Experience(i);
      v_Vacancy_Type_Ids(i) := v_Experience.Vacancy_Type_Id;
    
      z_Hrec_Hh_Integration_Experiences.Save_One(i_Company_Id      => i_Company_Id,
                                                 i_Vacancy_Type_Id => v_Experience.Vacancy_Type_Id,
                                                 i_Experience_Code => v_Experience.Experience_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Experiences q
     where q.Company_Id = i_Company_Id
       and q.Vacancy_Type_Id not member of v_Vacancy_Type_Ids;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Integration_Employments_Save
  (
    i_Company_Id number,
    i_Employment Hrec_Pref.Hh_Integration_Employments_Nt
  ) is
    v_Employment       Hrec_Pref.Hh_Integration_Employments_Rt;
    v_Vacancy_Type_Ids Array_Number := Array_Number();
  begin
    v_Vacancy_Type_Ids.Extend(i_Employment.Count);
  
    for i in 1 .. i_Employment.Count
    loop
      v_Employment := i_Employment(i);
      v_Vacancy_Type_Ids(i) := v_Employment.Vacancy_Type_Id;
    
      z_Hrec_Hh_Integration_Employments.Save_One(i_Company_Id      => i_Company_Id,
                                                 i_Vacancy_Type_Id => v_Employment.Vacancy_Type_Id,
                                                 i_Employment_Code => v_Employment.Employment_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Employments q
     where q.Company_Id = i_Company_Id
       and q.Vacancy_Type_Id not member of v_Vacancy_Type_Ids;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Integration_Driver_Licence_Save
  (
    i_Company_Id number,
    i_Licences   Hrec_Pref.Hh_Integration_Driver_Licence_Nt
  ) is
    v_Licence          Hrec_Pref.Hh_Integration_Driver_Licence_Rt;
    v_Vacancy_Type_Ids Array_Number := Array_Number();
  begin
    v_Vacancy_Type_Ids.Extend(i_Licences.Count);
  
    for i in 1 .. i_Licences.Count
    loop
      v_Licence := i_Licences(i);
      v_Vacancy_Type_Ids(i) := v_Licence.Vacancy_Type_Id;
    
      z_Hrec_Hh_Integration_Driver_Licences.Save_One(i_Company_Id      => i_Company_Id,
                                                     i_Vacancy_Type_Id => v_Licence.Vacancy_Type_Id,
                                                     i_Licence_Code    => v_Licence.Licence_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Driver_Licences q
     where q.Company_Id = i_Company_Id
       and q.Vacancy_Type_Id not member of v_Vacancy_Type_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Integration_Schedule_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Schedule   Hrec_Pref.Hh_Integration_Schedule_Nt
  ) is
    v_Schedule     Hrec_Pref.Hh_Integration_Schedule_Rt;
    v_Schedule_Ids Array_Number := Array_Number();
  begin
    v_Schedule_Ids.Extend(i_Schedule.Count);
  
    for i in 1 .. i_Schedule.Count
    loop
      v_Schedule := i_Schedule(i);
      v_Schedule_Ids(i) := v_Schedule.Schedule_Id;
    
      z_Hrec_Hh_Integration_Schedules.Save_One(i_Company_Id    => i_Company_Id,
                                               i_Filial_Id     => i_Filial_Id,
                                               i_Schedule_Id   => v_Schedule.Schedule_Id,
                                               i_Schedule_Code => v_Schedule.Schedule_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Schedule_Id not member of v_Schedule_Ids;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Lang_Save
  (
    i_Company_Id number,
    i_Lang       Hrec_Pref.Hh_Integration_Lang_Nt
  ) is
    v_Lang     Hrec_Pref.Hh_Integration_Lang_Rt;
    v_Lang_Ids Array_Number := Array_Number();
  begin
    v_Lang_Ids.Extend(i_Lang.Count);
  
    for i in 1 .. i_Lang.Count
    loop
      v_Lang := i_Lang(i);
      v_Lang_Ids(i) := v_Lang.Lang_Id;
    
      z_Hrec_Hh_Integration_Langs.Save_One(i_Company_Id => i_Company_Id,
                                           i_Lang_Id    => v_Lang.Lang_Id,
                                           i_Lang_Code  => v_Lang.Lang_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Langs q
     where q.Company_Id = i_Company_Id
       and q.Lang_Id not member of v_Lang_Ids;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Hh_Integration_Lang_Level_Save
  (
    i_Company_Id number,
    i_Lang_Level Hrec_Pref.Hh_Integration_Lang_Level_Nt
  ) is
    v_Lang_Level     Hrec_Pref.Hh_Integration_Lang_Level_Rt;
    v_Lang_Level_Ids Array_Number := Array_Number();
  begin
    v_Lang_Level_Ids.Extend(i_Lang_Level.Count);
  
    for i in 1 .. i_Lang_Level.Count
    loop
      v_Lang_Level := i_Lang_Level(i);
      v_Lang_Level_Ids(i) := v_Lang_Level.Lang_Level_Id;
    
      z_Hrec_Hh_Integration_Lang_Levels.Save_One(i_Company_Id      => i_Company_Id,
                                                 i_Lang_Level_Id   => v_Lang_Level.Lang_Level_Id,
                                                 i_Lang_Level_Code => v_Lang_Level.Lang_Level_Code);
    end loop;
  
    delete Hrec_Hh_Integration_Lang_Levels q
     where q.Company_Id = i_Company_Id
       and q.Lang_Level_Id not member of v_Lang_Level_Ids;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employer_Id_Save(i_Employer_Id Hrec_Hh_Employer_Ids%rowtype) is
  begin
    z_Hrec_Hh_Employer_Ids.Save_Row(i_Employer_Id);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Hh_Employer_Id_Delete(i_Company_Id number) is
  begin
    z_Hrec_Hh_Employer_Ids.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Resume_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Resume_Code   varchar2,
    i_Candidate_Id  number,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Middle_Name   varchar2,
    i_Gender_Code   varchar2,
    i_Date_Of_Birth date,
    i_Extra_Data    varchar2
  ) is
  begin
    z_Hrec_Hh_Resumes.Save_One(i_Company_Id    => i_Company_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Resume_Code   => i_Resume_Code,
                               i_Candidate_Id  => i_Candidate_Id,
                               i_First_Name    => i_First_Name,
                               i_Last_Name     => i_Last_Name,
                               i_Middle_Name   => i_Middle_Name,
                               i_Gender_Code   => i_Gender_Code,
                               i_Date_Of_Birth => i_Date_Of_Birth,
                               i_Extra_Data    => i_Extra_Data);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Subscription_Save
  (
    i_Company_Id        number,
    i_Subscription_Code varchar2
  ) is
  begin
    z_Hrec_Hh_Subscriptions.Insert_One(i_Company_Id        => i_Company_Id,
                                       i_Subscription_Code => i_Subscription_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Subscription_Delete(i_Company_Id number) is
  begin
    z_Hrec_Hh_Subscriptions.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Negotiation_Save
  (
    i_Company_Id       number,
    i_Filial_Id        varchar2,
    i_Topic_Code       varchar2,
    i_Event_Code       varchar2,
    i_Negotiation_Date varchar2,
    i_Vacancy_Code     varchar2,
    i_Resume_Code      varchar2
  ) is
  begin
    z_Hrec_Hh_Negotiations.Save_One(i_Company_Id       => i_Company_Id,
                                    i_Filial_Id        => i_Filial_Id,
                                    i_Topic_Code       => i_Topic_Code,
                                    i_Event_Code       => i_Event_Code,
                                    i_Negotiation_Date => i_Negotiation_Date,
                                    i_Vacancy_Code     => i_Vacancy_Code,
                                    i_Resume_Code      => i_Resume_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hh_Event_Save
  (
    i_Company_Id        number,
    i_Event_Code        varchar2,
    i_Subscription_Code varchar2,
    i_Event_Type        varchar2,
    i_User_Code         varchar2
  ) is
  begin
    if i_Event_Type not in (Hrec_Pref.c_Hh_Event_Type_New_Negotiation) then
      b.Raise_Not_Implemented;
    end if;
  
    z_Hrec_Hh_Events.Save_One(i_Company_Id        => i_Company_Id,
                              i_Event_Code        => i_Event_Code,
                              i_Subscription_Code => i_Subscription_Code,
                              i_Event_Type        => i_Event_Type,
                              i_User_Code         => i_User_Code);
  end;

  ----------------------------------------------------------------------------------------------------      
  Function Olx_Runtime_Service
  (
    i_Company_Id         number,
    i_User_Id            number,
    i_Host_Uri           varchar2,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Use_Access_Token   boolean := true,
    i_Use_Refresh_Token  boolean := false,
    i_Uri_Query_Params   Gmap := null,
    i_Data               Gmap := Gmap(),
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Api_Uri     varchar2(300) := i_Api_Uri;
    r_Oauth_Token Hes_Oauth2_Tokens%rowtype;
  
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  
    --------------------------------------------------
    Function Get_Oauth2_Token return Hes_Oauth2_Tokens%rowtype is
      r_Oauth_Token Hes_Oauth2_Tokens%rowtype;
    begin
      r_Oauth_Token := z_Hes_Oauth2_Tokens.Take(i_Company_Id  => i_Company_Id,
                                                i_User_Id     => i_User_Id,
                                                i_Provider_Id => Hes_Pref.c_Provider_Olx_Id);
    
      if i_Use_Access_Token and
         (r_Oauth_Token.Access_Token is null or
         i_Use_Refresh_Token and r_Oauth_Token.Expires_On < Current_Timestamp) then
        Hrec_Error.Raise_026;
      end if;
    
      return r_Oauth_Token;
    end;
  
    --------------------------------------------------
    Procedure Put_Refresh_Token_Info is
      r_Credentials Hes_Oauth2_Credentials%rowtype;
      r_Provider    Hes_Oauth2_Providers%rowtype;
    begin
      v_Details.Put('refresh_token', r_Oauth_Token.Refresh_Token);
    
      r_Provider    := z_Hes_Oauth2_Providers.Load(Hes_Pref.c_Provider_Olx_Id);
      r_Credentials := z_Hes_Oauth2_Credentials.Load(i_Company_Id  => i_Company_Id,
                                                     i_Provider_Id => Hes_Pref.c_Provider_Olx_Id);
    
      v_Details.Put('provider_id', r_Provider.Provider_Id);
      v_Details.Put('token_url', r_Provider.Token_Url);
      v_Details.Put('content_type', r_Provider.Content_Type);
      v_Details.Put('scope', r_Provider.Scope);
    
      v_Details.Put('company_id', i_Company_Id);
      v_Details.Put('user_id', i_User_Id);
    
      v_Details.Put('client_id', r_Credentials.Client_Id);
      v_Details.Put('client_secret', r_Credentials.Client_Secret);
    end;
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys Array_Varchar2;
      v_Delimiter  varchar2(1) := '&';
      v_Key        varchar2(100);
      result       varchar2(4000);
    begin
      if i_Uri_Query_Params is null then
        return result;
      end if;
    
      v_Param_Keys := i_Uri_Query_Params.Keyset;
    
      if v_Param_Keys.Count = 0 then
        return result;
      end if;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || i_Uri_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return '?' || result;
    end;
  
  begin
    if i_Uri_Query_Params is not null then
      v_Api_Uri := v_Api_Uri || Gather_Query_Params;
    end if;
  
    r_Oauth_Token := Get_Oauth2_Token;
  
    v_Details.Put('host', i_Host_Uri);
    v_Details.Put('request_path', v_Api_Uri);
    v_Details.Put('method', i_Api_Method);
  
    if i_Use_Access_Token then
      v_Details.Put('token', r_Oauth_Token.Access_Token);
    end if;
  
    if i_Use_Access_Token and i_Use_Refresh_Token and r_Oauth_Token.Expires_On < Current_Timestamp and
       r_Oauth_Token.Refresh_Token is not null then
      Put_Refresh_Token_Info;
    end if;
  
    v_Service := Runtime_Service(Hrec_Pref.c_Olx_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Job_Category_Save(i_Category Hrec_Olx_Job_Categories%rowtype) is
  begin
    z_Hrec_Olx_Job_Categories.Save_Row(i_Category);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Job_Category_Delete(i_Category_Code number) is
  begin
    z_Hrec_Olx_Job_Categories.Delete_One(i_Category_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Save(i_Attribute Hrec_Pref.Olx_Attribute_Rt) is
    v_Attribute_Value Hrec_Pref.Olx_Attribute_Value_Rt;
    v_Codes           Array_Varchar2 := Array_Varchar2();
  begin
    z_Hrec_Olx_Attributes.Save_One(i_Category_Code            => i_Attribute.Category_Code,
                                   i_Attribute_Code           => i_Attribute.Attribute_Code,
                                   i_Label                    => i_Attribute.Label,
                                   i_Validation_Type          => i_Attribute.Validation_Type,
                                   i_Is_Require               => i_Attribute.Is_Required,
                                   i_Is_Number                => i_Attribute.Is_Number,
                                   i_Min_Value                => i_Attribute.Min_Value,
                                   i_Max_Value                => i_Attribute.Max_Value,
                                   i_Is_Allow_Multiple_Values => i_Attribute.Is_Allow_Multiple_Values);
  
    v_Codes.Extend(i_Attribute.Attribute_Values.Count);
    for i in 1 .. i_Attribute.Attribute_Values.Count
    loop
      v_Attribute_Value := i_Attribute.Attribute_Values(i);
      v_Codes(i) := v_Attribute_Value.Code;
    
      z_Hrec_Olx_Attribute_Values.Save_One(i_Category_Code  => i_Attribute.Category_Code,
                                           i_Attribute_Code => i_Attribute.Attribute_Code,
                                           i_Code           => v_Attribute_Value.Code,
                                           i_Label          => v_Attribute_Value.Label);
    end loop;
  
    delete Hrec_Olx_Attribute_Values q
     where q.Category_Code = i_Attribute.Category_Code
       and q.Attribute_Code = i_Attribute.Attribute_Code
       and q.Code not member of v_Codes;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Delete
  (
    i_Category_Code  number,
    i_Attribute_Code varchar2
  ) is
  begin
    z_Hrec_Olx_Attributes.Delete_One(i_Category_Code  => i_Category_Code,
                                     i_Attribute_Code => i_Attribute_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Region_Save(i_Region Hrec_Olx_Regions%rowtype) is
  begin
    z_Hrec_Olx_Regions.Save_Row(i_Region);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Region_Clear is
  begin
    delete Hrec_Olx_Regions;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_City_Save(i_City Hrec_Olx_Cities%rowtype) is
  begin
    z_Hrec_Olx_Cities.Save_Row(i_City);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_City_Delete(i_City_Code number) is
  begin
    z_Hrec_Olx_Cities.Delete_One(i_City_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_District_Save(i_District Hrec_Olx_Districts%rowtype) is
  begin
    z_Hrec_Olx_Districts.Save_Row(i_District);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_District_Delete(i_District_Code number) is
  begin
    z_Hrec_Olx_Districts.Delete_One(i_District_Code);
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Integration_Region_Save
  (
    i_Company_Id number,
    i_Regions    Hrec_Pref.Olx_Integration_Region_Nt
  ) is
    v_Region_Ids Array_Number := Array_Number();
    v_Region     Hrec_Pref.Olx_Integration_Region_Rt;
  begin
    v_Region_Ids.Extend(i_Regions.Count);
  
    for i in 1 .. i_Regions.Count
    loop
      v_Region := i_Regions(i);
      v_Region_Ids(i) := v_Region.Region_Id;
    
      z_Hrec_Olx_Integration_Regions.Save_One(i_Company_Id    => i_Company_Id,
                                              i_Region_Id     => v_Region.Region_Id,
                                              i_City_Code     => v_Region.City_Code,
                                              i_District_Code => v_Region.District_Code);
    end loop;
  
    delete Hrec_Olx_Integration_Regions q
     where q.Company_Id = i_Company_Id
       and q.Region_Id not member of v_Region_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Published_Vacancy_Save(i_Vacancy Hrec_Pref.Olx_Published_Vacancy_Rt) is
    v_Attribute Hrec_Pref.Olx_Vacancy_Attributes_Rt;
    v_Codes     Array_Varchar2 := Array_Varchar2();
  begin
    z_Hrec_Olx_Published_Vacancies.Save_One(i_Company_Id   => i_Vacancy.Company_Id,
                                            i_Filial_Id    => i_Vacancy.Filial_Id,
                                            i_Vacancy_Id   => i_Vacancy.Vacancy_Id,
                                            i_Vacancy_Code => i_Vacancy.Vacancy_Code);
  
    v_Codes.Extend(i_Vacancy.Attributes.Count);
    for i in 1 .. i_Vacancy.Attributes.Count
    loop
      v_Attribute := i_Vacancy.Attributes(i);
      v_Codes(i) := v_Attribute.Code;
    
      z_Hrec_Olx_Published_Vacancy_Attributes.Save_One(i_Company_Id    => i_Vacancy.Company_Id,
                                                       i_Filial_Id     => i_Vacancy.Filial_Id,
                                                       i_Vacancy_Id    => i_Vacancy.Vacancy_Id,
                                                       i_Category_Code => v_Attribute.Category_Code,
                                                       i_Code          => v_Attribute.Code,
                                                       i_Value         => v_Attribute.Value);
    end loop;
  
    delete Hrec_Olx_Published_Vacancy_Attributes q
     where q.Company_Id = i_Vacancy.Company_Id
       and q.Filial_Id = i_Vacancy.Filial_Id
       and q.Vacancy_Id = i_Vacancy.Vacancy_Id
       and q.Code not member of v_Codes;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Published_Vacancy_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Vacancy_Id number
  ) is
  begin
    z_Hrec_Olx_Published_Vacancies.Delete_One(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Vacancy_Id => i_Vacancy_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Vacancy_Candidates_Save
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Vacancy_Id      number,
    i_Candidate_Codes Array_Number
  ) is
  begin
    for i in 1 .. i_Candidate_Codes.Count
    loop
      z_Hrec_Olx_Vacancy_Candidates.Insert_Try(i_Company_Id     => i_Company_Id,
                                               i_Filial_Id      => i_Filial_Id,
                                               i_Vacancy_Id     => i_Vacancy_Id,
                                               i_Candidate_Code => i_Candidate_Codes(i));
    end loop;
  
    delete Hrec_Olx_Vacancy_Candidates q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Vacancy_Id = i_Vacancy_Id
       and q.Candidate_Code not member of i_Candidate_Codes;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Olx_Vacancy_Candidate_Save
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Vacancy_Id     number,
    i_Candidate_Code number,
    i_Candidate_Id   number
  ) is
  begin
    z_Hrec_Olx_Vacancy_Candidates.Save_One(i_Company_Id     => i_Company_Id,
                                           i_Filial_Id      => i_Filial_Id,
                                           i_Vacancy_Id     => i_Vacancy_Id,
                                           i_Candidate_Code => i_Candidate_Code,
                                           i_Candidate_Id   => i_Candidate_Id);
  end;

end Hrec_Api;
/

create or replace package Hrec_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Funnel_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Vacancy_Id number,
    i_State_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Candidate_Id number,
    i_Stage_Name   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Funnel_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Operation_Id   number,
    i_Operation_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Vacancy_Id  number,
    i_Closed_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Error_Code varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_020(i_Job_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Region_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_026;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Region_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Vacancy_Name varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_030(i_Error_Title varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Group_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Group_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Type_Name varchar2);
end Hrec_Error;
/
create or replace package body Hrec_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Href_Pref.c_Hrec_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:for save application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('001:title:status must be draft'),
          i_S1      => t('001:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:for delete application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('002:title:status must be draft or waiting'),
          i_S1      => t('002:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:this stage $1{stage_name} is system entity, you can not delete it',
                         i_Stage_Name),
          i_Title   => t('003:title:system entities cannot delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:for save stage pcode must be null, stage name: $1{stage_name}',
                         i_Stage_Name),
          i_Title   => t('003:title:pcode must be null'),
          i_S1      => t('004:solution:please delete pcode and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Funnel_Name varchar2) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:this funnel $1{stage_name} is system entity, you can not delete it',
                         i_Funnel_Name),
          i_Title   => t('005:title:system entities cannot delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:for save application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('006:title:status must be draft'),
          i_S1      => t('006:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Vacancy_Id number,
    i_State_Name varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:for save vacancy status must be opened, current state: $1{state_name}, vacancy id: $2{vacancy_id}',
                         i_State_Name,
                         i_Vacancy_Id),
          i_Title   => t('007:title:state must be opend'),
          i_S1      => t('007:solution:change vacancy state to opened and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Candidate_Id number,
    i_Stage_Name   varchar2
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:for remove candidate, stage must be todo, cancidate id: $1{candidate_id}, current stage: $2{stage_name}',
                         i_Candidate_Id,
                         i_Stage_Name),
          i_Title   => t('008:title:current stage must be todo'),
          i_S1      => t('008:solution:change stage todo and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:for change application status to draft current status must be canceled, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('009:title:status must be canceled'),
          i_S1      => t('009:solution:change status to canceled and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:for change application status to waiting current status must be draft, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('010:title:status must be draft'),
          i_S1      => t('010:solution:change status to draft and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:for change application status to approved current status must be waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('011:title:status must be waiting'),
          i_S1      => t('011:solution:change status to waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:for change application status to complited current status must be approved, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('012:title:status must be approved'),
          i_S1      => t('012:solution:change status to approved and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:for change application status to complited canceled status must be waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('013:title:status must be waiting'),
          i_S1      => t('013:solution:change status to waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Funnel_Name varchar2) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:you can not edit system funnel, funnel name: $1{funnel_name}',
                         i_Funnel_Name),
          i_Title   => t('014:title:system entity can not edit'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Operation_Id   number,
    i_Operation_Kind varchar2
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:you can delete only comment operation, not action operation, operation id: $1{operation_id}, operation kind: $2{operation_kind}',
                         i_Operation_Id,
                         i_Operation_Kind),
          i_Title   => t('015:title:you can delete only comment operation'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:you can not make a passive, in this stage $1{stage_name} has a candidates',
                         i_Stage_Name),
          i_Title   => t('016:title:you can not make a passive'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Vacancy_Id  number,
    i_Closed_Date date
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:vacancy is already closed, vacancy id: $1{vacancy_id}, closed date: $2{closed_date}',
                         i_Vacancy_Id,
                         i_Closed_Date),
          i_Title   => t('017:title:you can close vacancy'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018 is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:you must be auth to hh.ru'),
          i_Title   => t('018:title:no access'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Error_Code varchar2) is
    --------------------------------------------------
    Function Error_Message(i_Error_Code varchar2) return varchar2 is
    begin
      case i_Error_Code
        when Hrec_Pref.c_Hh_Error_Bad_Authorization then
          return t('019:message:access token invalid or does not exist');
        when Hrec_Pref.c_Hh_Error_Token_Expired then
          return t('019:message:access token lifetime exprired');
        when Hrec_Pref.c_Hh_Error_Token_Revoked then
          return t('019:message:access token was revoked');
        when Hrec_Pref.c_Hh_Error_Application_Not_Found then
          return t('019:message:your hh application was deleted');
        when Hrec_Pref.c_Hh_Error_Used_Manager_Account_Forbidden then
          return t('019:message:your manager account was blocked');
        else
          null;
      end case;
    
      return i_Error_Code;
    end;
  
  begin
    Error(i_Code    => '019',
          i_Message => Error_Message(i_Error_Code),
          i_Title   => t('019:title:hh error'),
          i_S1      => t('019:solution:try reloggin to hh'),
          i_S2      => t('019:solution:contact your admin to see if your hh application was not deleted'),
          i_S3      => t('019:solution:contact your admin to see if your hh account was not blocked'));
  end;
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_020(i_Job_Name varchar2) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:for this job connect with head hunter not found, job name: $1{job_name}',
                         i_Job_Name),
          i_Title   => t('020:title:connect not found'),
          i_S1      => t('020:solution:set data map with head hunter for this job and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Region_Name varchar2) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:for this region connect with head hunter not found, region name: $1{region_name}',
                         i_Region_Name),
          i_Title   => t('021:title:connect not found'),
          i_S1      => t('021:solution:set data map with head hunter for this region and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('023:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('024:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('025:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_026 is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:you must be auth to olx.uz'),
          i_Title   => t('026:title:no access'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('027:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Region_Name varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:you must be integrate system region to Olx region, system region name: $1{region_name}',
                         i_Region_Name),
          i_Title   => t('028:title:region is not integrated'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('029:title:vacancy already published'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_030(i_Error_Title varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:$1{error_title}', i_Error_Title),
          i_Title   => t('030:title:error in publish vacancy to olx'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('031:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032 is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:find some problems in olx serve, please wait'),
          i_Title   => t('032:title:find problem in OLX server'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033 is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:error in load, candidate info, plase try again'),
          i_Title   => t('033:title:error in load candidate info'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Group_Name varchar2) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:you can not change system pcode, vacancy group name: $1',
                         i_Group_Name),
          i_Title   => t('034:title:you can not change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Group_Name varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:you can not delete system vacancy group, vacancy group name: $1',
                         i_Group_Name),
          i_Title   => t('035:title:you can not delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Type_Name varchar2) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:you can not change system pcode, vacancy type name: $1',
                         i_Type_Name),
          i_Title   => t('036:title:you can not change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Type_Name varchar2) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:you can not delete system vacancy type, vacancy type name: $1',
                         i_Type_Name),
          i_Title   => t('037:title:you can not delete'));
  end;

end Hrec_Error;
/

create or replace package Hrec_Next is
  ----------------------------------------------------------------------------------------------------
  Function Stage_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Reject_Reason_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Application_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Operation_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id return number;
end Hrec_Next;
/
create or replace package body Hrec_Next is
  ----------------------------------------------------------------------------------------------------
  Function Stage_Id return number is
  begin
    return Hrec_Stages_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id return number is
  begin
    return Hrec_Funnels_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Reject_Reason_Id return number is
  begin
    return Hrec_Reject_Reasons_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Id return number is
  begin
    return Hrec_Applications_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Id return number is
  begin
    return Hrec_Vacancies_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Operation_Id return number is
  begin
    return Hrec_Operations_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id return number is
  begin
    return Hrec_Vacancy_Groups_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id return number is
  begin
    return Hrec_Vacancy_Types_Sq.Nextval;
  end;

end Hrec_Next;
/

create or replace package Hrec_Pref is
  ----------------------------------------------------------------------------------------------------
  -- Funnel
  ----------------------------------------------------------------------------------------------------
  type Funnel_Rt is record(
    Company_Id number,
    Funnel_Id  number,
    name       varchar2(200 char),
    State      varchar2(1),
    Code       varchar2(50),
    Stage_Ids  Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- Application
  ----------------------------------------------------------------------------------------------------  
  type Application_Rt is record(
    Company_Id         number,
    Filial_Id          number,
    Application_Id     number,
    Application_Number varchar2(50 char),
    Division_Id        number,
    Job_Id             number,
    Quantity           number,
    Wage               number,
    Responsibilities   varchar2(4000 char),
    Requirements       varchar2(4000 char),
    Status             varchar2(1),
    Note               varchar2(300 char));
  ----------------------------------------------------------------------------------------------------  
  -- Vacancy Types
  ----------------------------------------------------------------------------------------------------  
  type Vacancy_Type_Rt is record(
    Vacancy_Group_Id number,
    Vacancy_Type_Ids Array_Number);
  type Vacancy_Type_Nt is table of Vacancy_Type_Rt;
  ----------------------------------------------------------------------------------------------------  
  -- Vacancy Langs
  ----------------------------------------------------------------------------------------------------  
  type Vacancy_Lang_Rt is record(
    Lang_Id       number,
    Lang_Level_Id number);
  type Vacancy_Lang_Nt is table of Vacancy_Lang_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Vacancies
  ----------------------------------------------------------------------------------------------------
  type Vacancy_Rt is record(
    Company_Id          number,
    Filial_Id           number,
    Vacancy_Id          number,
    name                varchar2(100 char),
    Division_Id         number,
    Job_Id              number,
    Application_Id      number,
    Quantity            number,
    Opened_Date         date,
    Closed_Date         date,
    Scope               varchar2(1),
    Urgent              varchar2(1),
    Funnel_Id           number,
    Region_Id           number,
    Schedule_Id         number,
    Deadline            date,
    Description         varchar2(4000),
    Description_In_Html varchar2(4000),
    Wage_From           number,
    Wage_To             number,
    Status              varchar2(1),
    Recruiter_Ids       Array_Number,
    Langs               Vacancy_Lang_Nt,
    Vacancy_Types       Vacancy_Type_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Candidate Change Stage
  ----------------------------------------------------------------------------------------------------
  type Candidate_Operation_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Operation_Id     number,
    Vacancy_Id       number,
    Candidate_Id     number,
    Operation_Kind   varchar2(1),
    To_Stage_Id      number,
    Reject_Reason_Id number,
    Note             varchar2(2000));
  ----------------------------------------------------------------------------------------------------  
  -- Head Hunter Integration    
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Job_Rt is record(
    Job_Code number,
    Job_Ids  Array_Number);
  type Hh_Integration_Job_Nt is table of Hh_Integration_Job_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Region_Rt is record(
    Region_Id   number,
    Region_Code number);
  type Hh_Integration_Region_Nt is table of Hh_Integration_Region_Rt;
  ----------------------------------------------------------------------------------------------------
  type Hh_Integration_Stage_Rt is record(
    Stage_Code varchar2(50 char),
    Stage_Ids  Array_Number);
  type Hh_Integration_Stage_Nt is table of Hh_Integration_Stage_Rt;
  ----------------------------------------------------------------------------------------------------
  type Hh_Integration_Experience_Rt is record(
    Vacancy_Type_Id number,
    Experience_Code varchar2(50));
  type Hh_Integration_Experience_Nt is table of Hh_Integration_Experience_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Employments_Rt is record(
    Vacancy_Type_Id number,
    Employment_Code varchar2(50));
  type Hh_Integration_Employments_Nt is table of Hh_Integration_Employments_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Driver_Licence_Rt is record(
    Vacancy_Type_Id number,
    Licence_Code    varchar2(50));
  type Hh_Integration_Driver_Licence_Nt is table of Hh_Integration_Driver_Licence_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Schedule_Rt is record(
    Schedule_Id   number,
    Schedule_Code varchar2(50));
  type Hh_Integration_Schedule_Nt is table of Hh_Integration_Schedule_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Lang_Rt is record(
    Lang_Id   number,
    Lang_Code varchar2(50));
  type Hh_Integration_Lang_Nt is table of Hh_Integration_Lang_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Hh_Integration_Lang_Level_Rt is record(
    Lang_Level_Id   number,
    Lang_Level_Code varchar2(50));
  type Hh_Integration_Lang_Level_Nt is table of Hh_Integration_Lang_Level_Rt;
  ----------------------------------------------------------------------------------------------------
  -- OLX Integration
  ----------------------------------------------------------------------------------------------------
  type Olx_Integration_Region_Rt is record(
    Region_Id     number,
    City_Code     number,
    District_Code number);
  type Olx_Integration_Region_Nt is table of Olx_Integration_Region_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Olx_Attribute_Value_Rt is record(
    Code  varchar2(50),
    Label varchar2(100));
  type Olx_Attribute_Value_Nt is table of Olx_Attribute_Value_Rt;
  ----------------------------------------------------------------------------------------------------
  type Olx_Attribute_Rt is record(
    Category_Code            number,
    Attribute_Code           varchar2(50),
    Label                    varchar2(200),
    Validation_Type          varchar2(50),
    Is_Required              varchar2(1),
    Is_Number                varchar2(1),
    Min_Value                number,
    Max_Value                number,
    Is_Allow_Multiple_Values varchar2(1),
    Attribute_Values         Olx_Attribute_Value_Nt);
  ----------------------------------------------------------------------------------------------------  
  type Olx_Vacancy_Attributes_Rt is record(
    Category_Code number,
    Code          varchar2(50),
    value         varchar2(50));
  type Olx_Vacancy_Attributes_Nt is table of Olx_Vacancy_Attributes_Rt;
  ----------------------------------------------------------------------------------------------------
  type Olx_Published_Vacancy_Rt is record(
    Company_Id   number,
    Filial_Id    number,
    Vacancy_Id   number,
    Vacancy_Code number,
    Attributes   Olx_Vacancy_Attributes_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Application Statuses
  ----------------------------------------------------------------------------------------------------
  c_Application_Status_Draft     constant varchar2(1) := 'D';
  c_Application_Status_Waiting   constant varchar2(1) := 'W';
  c_Application_Status_Approved  constant varchar2(1) := 'A';
  c_Application_Status_Complited constant varchar2(1) := 'O';
  c_Application_Status_Canceled  constant varchar2(1) := 'C';
  ---------------------------------------------------------------------------------------------------- 
  -- Vacancy
  ----------------------------------------------------------------------------------------------------  
  c_Vacancy_Scope_All           constant varchar2(1) := 'A';
  c_Vacancy_Scope_Employees     constant varchar2(1) := 'E';
  c_Vacancy_Scope_Non_Employees constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------  
  c_Vacancy_Status_Open  constant varchar2(1) := 'O';
  c_Vacancy_Status_Close constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------  
  -- Operation kinds
  ----------------------------------------------------------------------------------------------------  
  c_Operation_Kind_Comment constant varchar2(1) := 'N';
  c_Operation_Kind_Action  constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- System Stages
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Stage_Todo     constant varchar2(50) := 'VHR:HREC:1';
  c_Pcode_Stage_Accepted constant varchar2(50) := 'VHR:HREC:2';
  c_Pcode_Stage_Rejected constant varchar2(50) := 'VHR:HREC:3';
  ----------------------------------------------------------------------------------------------------  
  -- System Funnels
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Funnel_All constant varchar2(50) := 'VHR:HREC:1';
  ----------------------------------------------------------------------------------------------------
  -- Head Hunter Integration Preferences
  ----------------------------------------------------------------------------------------------------  
  c_Head_Hunter_Api_Url        constant varchar2(100) := 'https://api.hh.ru';
  c_Head_Hunter_Service_Name   constant varchar2(100) := 'com.verifix.vhr.recruitment.HeadHunterRuntimeService';
  c_Save_Vacancy_Url           constant varchar2(50) := '/vacancies';
  c_Negotiations_Url           constant varchar2(50) := '/negotiations';
  c_Webhook_Subscriptions_Url  constant varchar2(50) := '/webhook/subscriptions';
  c_Load_Candidate_Resume_Url  constant varchar2(50) := '/resumes';
  c_Get_General_References_Url constant varchar2(50) := '/dictionaries';
  c_Get_Jobs_Url               constant varchar2(50) := '/professional_roles';
  c_Get_Regions_Url            constant varchar2(50) := '/areas';
  c_Get_Languages_Url          constant varchar2(50) := '/languages';
  ----------------------------------------------------------------------------------------------------  
  -- Head Hunter Dictionary Keys
  ----------------------------------------------------------------------------------------------------  
  c_Dictionary_Lang_Level_Key constant varchar2(50) := 'language_level';
  c_Dictionary_Schedule_Key   constant varchar2(50) := 'schedule';
  c_Dictionary_Experience_Key constant varchar2(50) := 'experience';
  c_Dictionary_Employment_Key constant varchar2(50) := 'employment';
  c_Dictionary_Driver_Licence constant varchar2(50) := 'driver_license_types';
  ----------------------------------------------------------------------------------------------------
  -- HH Auth error code
  ---------------------------------------------------------------------------------------------------- 
  c_Hh_Error_Bad_Authorization              constant varchar2(50) := 'bad_authorization';
  c_Hh_Error_Token_Expired                  constant varchar2(50) := 'token_expired';
  c_Hh_Error_Token_Revoked                  constant varchar2(50) := 'token_revoked';
  c_Hh_Error_Application_Not_Found          constant varchar2(50) := 'application_not_found';
  c_Hh_Error_Used_Manager_Account_Forbidden constant varchar2(50) := 'used_manager_account_forbidden';
  ----------------------------------------------------------------------------------------------------
  c_Hh_Todo_Stage_Code constant varchar2(50) := 'response';
  ----------------------------------------------------------------------------------------------------
  c_Hh_Event_Type_New_Negotiation constant varchar2(50) := 'NEW_NEGOTIATION_VACANCY';
  ----------------------------------------------------------------------------------------------------  
  -- Head Hunter Billing Types
  ----------------------------------------------------------------------------------------------------  
  c_Hh_Billing_Type_Standart      constant varchar2(20) := 'standard';
  c_Hh_Billing_Type_Free          constant varchar2(20) := 'free';
  c_Hh_Billing_Type_Standart_Plus constant varchar2(20) := 'standard_plus';
  c_Hh_Billing_Type_Premium       constant varchar2(20) := 'premium';
  ----------------------------------------------------------------------------------------------------  
  -- Head Hunter Vacancy Types
  ----------------------------------------------------------------------------------------------------  
  c_Hh_Vacancy_Type_Open      constant varchar2(20) := 'open';
  c_Hh_Vacancy_Type_Closed    constant varchar2(20) := 'closed';
  c_Hh_Vacancy_Type_Direct    constant varchar2(20) := 'direct'; -- TODO do not use this type for MVP
  c_Hh_Vacancy_Type_Anonymous constant varchar2(20) := 'anonymous'; -- TODO do not use this type for MVP
  ----------------------------------------------------------------------------------------------------
  c_Hh_Default_Page_Limit constant number := 50;
  ----------------------------------------------------------------------------------------------------
  c_Hh_Gender_Male   constant varchar2(10) := 'male';
  c_Hh_Gender_Female constant varchar2(10) := 'female';
  ----------------------------------------------------------------------------------------------------
  c_Hh_Contact_Type_Phone constant varchar2(10) := 'cell';
  c_Hh_Contact_Type_Email constant varchar2(10) := 'email';
  ----------------------------------------------------------------------------------------------------
  c_Hh_Event_Receiver_Path constant varchar2(50) := '/b/vhr/hrec/hh_event_receiver:event_handler';
  ---------------------------------------------------------------------------------------------------- 
  -- OLX Integration Constants
  ----------------------------------------------------------------------------------------------------
  c_Olx_Api_Url                  constant varchar2(100) := 'https://www.olx.uz';
  c_Olx_Service_Name             constant varchar2(100) := 'com.verifix.vhr.recruitment.OlxRuntimeService';
  c_Olx_Get_Regions_Url          constant varchar2(50) := '/api/partner/regions';
  c_Olx_Get_Cities_Url           constant varchar2(50) := '/api/partner/cities';
  c_Olx_Get_Districts_Url        constant varchar2(50) := '/api/partner/districts';
  c_Olx_Get_Categories_Url       constant varchar2(50) := '/api/partner/categories';
  c_Olx_Post_Adverts_Url         constant varchar2(50) := '/api/partner/adverts';
  c_Olx_Get_Thread_Url           constant varchar2(50) := '/api/partner/threads';
  v_Olx_Get_Users_Url            constant varchar2(50) := '/api/partner/users';
  c_Olx_Advertiser_Type_Private  constant varchar2(50) := 'private';
  c_Olx_Advertiser_Type_Businnes constant varchar2(50) := 'business';
  c_Olx_Salary_Type_Monthly      constant varchar2(50) := 'monthly';
  c_Olx_Salary_Type_Hourly       constant varchar2(50) := 'hourly';
  c_Olx_Job_Category_Code        constant number := 6; -- Code From Olx Server
  ----------------------------------------------------------------------------------------------------
  -- System Vacancy Groups
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Vacancy_Group_Experience      constant varchar2(20) := 'VHR:HREC:1';
  c_Pcode_Vacancy_Group_Employments     constant varchar2(20) := 'VHR:HREC:2';
  c_Pcode_Vacancy_Group_Driver_Licences constant varchar2(20) := 'VHR:HREC:3';
  c_Pcode_Vacancy_Group_Key_Skills      constant varchar2(20) := 'VHR:HREC:4';
  ----------------------------------------------------------------------------------------------------  
  -- System Vacancy Types
  ----------------------------------------------------------------------------------------------------  
  -- Experience
  c_Pcode_Vacancy_Type_Experience_No_Experience   constant varchar2(20) := 'VHR:HREC:1';
  c_Pcode_Vacancy_Type_Experience_Between_1_And_3 constant varchar2(20) := 'VHR:HREC:2';
  c_Pcode_Vacancy_Type_Experience_Between_3_And_6 constant varchar2(20) := 'VHR:HREC:3';
  c_Pcode_Vacancy_Type_Experience_More_Than_6     constant varchar2(20) := 'VHR:HREC:4';
  -- Employments
  c_Pcode_Vacancy_Type_Employment_Full constant varchar2(20) := 'VHR:HREC:5';
  c_Pcode_Vacancy_Type_Employment_Part constant varchar2(20) := 'VHR:HREC:6';
  -- Driver Licence
  c_Pcode_Vacancy_Type_Driver_Licence_a constant varchar2(20) := 'VHR:HREC:7';
  c_Pcode_Vacancy_Type_Driver_Licence_b constant varchar2(20) := 'VHR:HREC:8';
  c_Pcode_Vacancy_Type_Driver_Licence_c constant varchar2(20) := 'VHR:HREC:9';
  -- Key Skills
  c_Pcode_Vacancy_Type_Key_Skill_Ambitious constant varchar2(20) := 'VHR:HREC:10';

end Hrec_Pref;
/
create or replace package body Hrec_Pref is
end Hrec_Pref;
/

create or replace package Hrec_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Application_New
  (
    o_Application        out Hrec_Pref.Application_Rt,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Application_Id     number,
    i_Application_Number varchar2,
    i_Division_Id        number,
    i_Job_Id             number,
    i_Quantity           number,
    i_Wage               number,
    i_Responsibilities   varchar2,
    i_Requirements       varchar2,
    i_Status             varchar2,
    i_Note               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_New
  (
    o_Vacancy             out Hrec_Pref.Vacancy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Vacancy_Id          number,
    i_Name                varchar2,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Application_Id      number,
    i_Quantity            number,
    i_Opened_Date         date,
    i_Closed_Date         date,
    i_Scope               varchar2,
    i_Urgent              varchar2,
    i_Funnel_Id           number,
    i_Region_Id           number,
    i_Schedule_Id         number,
    i_Deadline            date,
    i_Wage_From           number,
    i_Wage_To             number,
    i_Description         varchar2,
    i_Description_In_Html varchar2,
    i_Status              varchar2,
    i_Recruiter_Ids       Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Lang
  (
    o_Vacancy       in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Vacancy_Types
  (
    o_Vacancy          in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Vacancy_Group_Id number,
    i_Vacancy_Type_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_New
  (
    o_Funnel     out Hrec_Pref.Funnel_Rt,
    i_Company_Id number,
    i_Funnel_Id  number,
    i_Name       varchar2,
    i_State      varchar2,
    i_Code       varchar2,
    i_Stage_Ids  Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Candidate_Operation_Fill
  (
    o_Operation        out Hrec_Pref.Candidate_Operation_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Operation_Id     number,
    i_Vacancy_Id       number,
    i_Candidate_Id     number,
    i_Operation_Kind   varchar2,
    i_To_Stage_Id      number,
    i_Reject_Reason_Id number,
    i_Note             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Stage_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Company_Id_By_Employer_Code(i_Employer_Code varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Published_Vacancy
  (
    i_Company_Id   number,
    i_Vacancy_Code varchar2
  ) return Hrec_Hh_Published_Vacancies%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Subscription_User_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Region_Id
  (
    i_Company_Id number,
    i_Area_Code  varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Resume_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Candidate_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Topic_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Code varchar2,
    i_Resume_Code  varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Process_Auth_Response_Errors(i_Data Hashmap);
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_New
  (
    o_Attribute                out Hrec_Pref.Olx_Attribute_Rt,
    i_Category_Code            number,
    i_Attribute_Code           varchar2,
    i_Label                    varchar2,
    i_Validation_Type          varchar2,
    i_Is_Required              varchar2,
    i_Is_Number                varchar2,
    i_Min_Value                number,
    i_Max_Value                number,
    i_Is_Allow_Multiple_Values varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Olx_Attribute_Add_Value
  (
    o_Attribute in out nocopy Hrec_Pref.Olx_Attribute_Rt,
    i_Code      varchar2,
    i_Label     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Scope(i_Scope varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Scopes return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Operation_Kind(i_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Operation_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Billing_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Vacancy_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Olx_Advertiser_Types return Matrix_Varchar2;
end Hrec_Util;
/
create or replace package body Hrec_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_New
  (
    o_Application        out Hrec_Pref.Application_Rt,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Application_Id     number,
    i_Application_Number varchar2,
    i_Division_Id        number,
    i_Job_Id             number,
    i_Quantity           number,
    i_Wage               number,
    i_Responsibilities   varchar2,
    i_Requirements       varchar2,
    i_Status             varchar2,
    i_Note               varchar2
  ) is
  begin
    o_Application.Company_Id         := i_Company_Id;
    o_Application.Filial_Id          := i_Filial_Id;
    o_Application.Application_Id     := i_Application_Id;
    o_Application.Application_Number := i_Application_Number;
    o_Application.Division_Id        := i_Division_Id;
    o_Application.Job_Id             := i_Job_Id;
    o_Application.Quantity           := i_Quantity;
    o_Application.Wage               := i_Wage;
    o_Application.Responsibilities   := i_Responsibilities;
    o_Application.Requirements       := i_Requirements;
    o_Application.Status             := i_Status;
    o_Application.Note               := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_New
  (
    o_Vacancy             out Hrec_Pref.Vacancy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Vacancy_Id          number,
    i_Name                varchar2,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Application_Id      number,
    i_Quantity            number,
    i_Opened_Date         date,
    i_Closed_Date         date,
    i_Scope               varchar2,
    i_Urgent              varchar2,
    i_Funnel_Id           number,
    i_Region_Id           number,
    i_Schedule_Id         number,
    i_Deadline            date,
    i_Wage_From           number,
    i_Wage_To             number,
    i_Description         varchar2,
    i_Description_In_Html varchar2,
    i_Status              varchar2,
    i_Recruiter_Ids       Array_Number
  ) is
  begin
    o_Vacancy.Company_Id          := i_Company_Id;
    o_Vacancy.Filial_Id           := i_Filial_Id;
    o_Vacancy.Vacancy_Id          := i_Vacancy_Id;
    o_Vacancy.Name                := i_Name;
    o_Vacancy.Division_Id         := i_Division_Id;
    o_Vacancy.Job_Id              := i_Job_Id;
    o_Vacancy.Application_Id      := i_Application_Id;
    o_Vacancy.Quantity            := i_Quantity;
    o_Vacancy.Opened_Date         := i_Opened_Date;
    o_Vacancy.Closed_Date         := i_Closed_Date;
    o_Vacancy.Scope               := i_Scope;
    o_Vacancy.Urgent              := i_Urgent;
    o_Vacancy.Funnel_Id           := i_Funnel_Id;
    o_Vacancy.Region_Id           := i_Region_Id;
    o_Vacancy.Schedule_Id         := i_Schedule_Id;
    o_Vacancy.Deadline            := i_Deadline;
    o_Vacancy.Wage_From           := i_Wage_From;
    o_Vacancy.Wage_To             := i_Wage_To;
    o_Vacancy.Description         := i_Description;
    o_Vacancy.Description_In_Html := i_Description_In_Html;
    o_Vacancy.Status              := i_Status;
    o_Vacancy.Recruiter_Ids       := i_Recruiter_Ids;
  
    o_Vacancy.Langs         := Hrec_Pref.Vacancy_Lang_Nt();
    o_Vacancy.Vacancy_Types := Hrec_Pref.Vacancy_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Lang
  (
    o_Vacancy       in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  ) is
    v_Lang Hrec_Pref.Vacancy_Lang_Rt;
  begin
    v_Lang.Lang_Id       := i_Lang_Id;
    v_Lang.Lang_Level_Id := i_Lang_Level_Id;
  
    o_Vacancy.Langs.Extend();
    o_Vacancy.Langs(o_Vacancy.Langs.Count) := v_Lang;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Vacancy_Types
  (
    o_Vacancy          in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Vacancy_Group_Id number,
    i_Vacancy_Type_Ids Array_Number
  ) is
    v_Type Hrec_Pref.Vacancy_Type_Rt;
  begin
    v_Type.Vacancy_Group_Id := i_Vacancy_Group_Id;
    v_Type.Vacancy_Type_Ids := i_Vacancy_Type_Ids;
  
    o_Vacancy.Vacancy_Types.Extend();
    o_Vacancy.Vacancy_Types(o_Vacancy.Vacancy_Types.Count) := v_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_New
  (
    o_Funnel     out Hrec_Pref.Funnel_Rt,
    i_Company_Id number,
    i_Funnel_Id  number,
    i_Name       varchar2,
    i_State      varchar2,
    i_Code       varchar2,
    i_Stage_Ids  Array_Number
  ) is
  begin
    o_Funnel.Company_Id := i_Company_Id;
    o_Funnel.Funnel_Id  := i_Funnel_Id;
    o_Funnel.Name       := i_Name;
    o_Funnel.State      := i_State;
    o_Funnel.Code       := i_Code;
    o_Funnel.Stage_Ids  := i_Stage_Ids;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Candidate_Operation_Fill
  (
    o_Operation        out Hrec_Pref.Candidate_Operation_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Operation_Id     number,
    i_Vacancy_Id       number,
    i_Candidate_Id     number,
    i_Operation_Kind   varchar2,
    i_To_Stage_Id      number,
    i_Reject_Reason_Id number,
    i_Note             varchar2
  ) is
  begin
    o_Operation.Company_Id       := i_Company_Id;
    o_Operation.Filial_Id        := i_Filial_Id;
    o_Operation.Operation_Id     := i_Operation_Id;
    o_Operation.Vacancy_Id       := i_Vacancy_Id;
    o_Operation.Candidate_Id     := i_Candidate_Id;
    o_Operation.Operation_Kind   := i_Operation_Kind;
    o_Operation.To_Stage_Id      := i_To_Stage_Id;
    o_Operation.Reject_Reason_Id := i_Reject_Reason_Id;
    o_Operation.Note             := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Stage_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Stage_Id number;
  begin
    select q.Stage_Id
      into v_Stage_Id
      from Hrec_Stages q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Stage_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Funnel_Id number;
  begin
    select q.Funnel_Id
      into v_Funnel_Id
      from Hrec_Funnels q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Funnel_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Group_Id number;
  begin
    select q.Vacancy_Group_Id
      into v_Group_Id
      from Hrec_Vacancy_Groups q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Group_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Type_Id number;
  begin
    select q.Vacancy_Type_Id
      into v_Type_Id
      from Hrec_Vacancy_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Type_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Company_Id_By_Employer_Code(i_Employer_Code varchar2) return number is
    v_Company_Id number;
  begin
    select t.Company_Id
      into v_Company_Id
      from Hrec_Hh_Employer_Ids t
     where t.Employer_Id = i_Employer_Code;
  
    return v_Company_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Published_Vacancy
  (
    i_Company_Id   number,
    i_Vacancy_Code varchar2
  ) return Hrec_Hh_Published_Vacancies%rowtype is
    r_Vacancy Hrec_Hh_Published_Vacancies%rowtype;
  begin
    select t.*
      into r_Vacancy
      from Hrec_Hh_Published_Vacancies t
     where t.Company_Id = i_Company_Id
       and t.Vacancy_Code = i_Vacancy_Code;
  
    return r_Vacancy;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Subscription_User_Id(i_Company_Id number) return number is
    v_User_Id number;
  begin
    select t.Created_By
      into v_User_Id
      from Hrec_Hh_Subscriptions t
     where t.Company_Id = i_Company_Id;
  
    return v_User_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Region_Id
  (
    i_Company_Id number,
    i_Area_Code  varchar2
  ) return number is
    result number;
  begin
    select q.Region_Id
      into result
      from Hrec_Hh_Integration_Regions q
     where q.Company_Id = i_Company_Id
       and q.Region_Code = i_Area_Code
       and Rownum = 1;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Resume_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Candidate_Id number
  ) return varchar2 is
    result varchar2(100);
  begin
    select q.Resume_Code
      into result
      from Hrec_Hh_Resumes q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Candidate_Id = i_Candidate_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Topic_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Code varchar2,
    i_Resume_Code  varchar2
  ) return varchar2 is
    result varchar2(100);
  begin
    select q.Topic_Code
      into result
      from Hrec_Hh_Negotiations q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Vacancy_Code = i_Vacancy_Code
       and q.Resume_Code = i_Resume_Code;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Process_Auth_Response_Errors(i_Data Hashmap) is
    v_Errors     Arraylist := i_Data.o_Arraylist('errors');
    v_Error      Hashmap;
    v_Error_Code varchar2(50);
  begin
    if v_Errors is null or v_Errors.Count = 0 then
      return;
    end if;
  
    for i in 1 .. v_Errors.Count
    loop
      v_Error := Treat(v_Errors.r_Hashmap(i) as Hashmap);
    
      v_Error_Code := v_Error.r_Varchar2('value');
    
      if v_Error_Code in (Hrec_Pref.c_Hh_Error_Bad_Authorization,
                          Hrec_Pref.c_Hh_Error_Token_Expired,
                          Hrec_Pref.c_Hh_Error_Token_Revoked,
                          Hrec_Pref.c_Hh_Error_Application_Not_Found,
                          Hrec_Pref.c_Hh_Error_Used_Manager_Account_Forbidden) then
        Hrec_Error.Raise_019(v_Error_Code);
      end if;
    end loop;
  
    if v_Error_Code is not null then
      Hrec_Error.Raise_019(v_Error_Code);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_New
  (
    o_Attribute                out Hrec_Pref.Olx_Attribute_Rt,
    i_Category_Code            number,
    i_Attribute_Code           varchar2,
    i_Label                    varchar2,
    i_Validation_Type          varchar2,
    i_Is_Required              varchar2,
    i_Is_Number                varchar2,
    i_Min_Value                number,
    i_Max_Value                number,
    i_Is_Allow_Multiple_Values varchar2
  ) is
  begin
    o_Attribute.Category_Code            := i_Category_Code;
    o_Attribute.Attribute_Code           := i_Attribute_Code;
    o_Attribute.Label                    := i_Label;
    o_Attribute.Validation_Type          := i_Validation_Type;
    o_Attribute.Is_Required              := i_Is_Required;
    o_Attribute.Is_Number                := i_Is_Number;
    o_Attribute.Min_Value                := i_Min_Value;
    o_Attribute.Max_Value                := i_Max_Value;
    o_Attribute.Is_Allow_Multiple_Values := i_Is_Allow_Multiple_Values;
  
    o_Attribute.Attribute_Values := Hrec_Pref.Olx_Attribute_Value_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Add_Value
  (
    o_Attribute in out nocopy Hrec_Pref.Olx_Attribute_Rt,
    i_Code      varchar2,
    i_Label     varchar2
  ) is
    v_Attribute_Value Hrec_Pref.Olx_Attribute_Value_Rt;
  begin
    v_Attribute_Value.Code  := i_Code;
    v_Attribute_Value.Label := i_Label;
  
    o_Attribute.Attribute_Values.Extend();
    o_Attribute.Attribute_Values(o_Attribute.Attribute_Values.Count) := v_Attribute_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Draft return varchar2 is
  begin
    return t('application_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Waiting return varchar2 is
  begin
    return t('application_status:waiting');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Approved return varchar2 is
  begin
    return t('application_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Complited return varchar2 is
  begin
    return t('application_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Canceled return varchar2 is
  begin
    return t('application_status:canceled');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hrec_Pref.c_Application_Status_Draft then t_Application_Status_Draft --
    when Hrec_Pref.c_Application_Status_Waiting then t_Application_Status_Waiting --
    when Hrec_Pref.c_Application_Status_Approved then t_Application_Status_Approved --
    when Hrec_Pref.c_Application_Status_Complited then t_Application_Status_Complited --
    when Hrec_Pref.c_Application_Status_Canceled then t_Application_Status_Canceled --   
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Application_Status_Draft,
                                          Hrec_Pref.c_Application_Status_Waiting,
                                          Hrec_Pref.c_Application_Status_Approved,
                                          Hrec_Pref.c_Application_Status_Complited,
                                          Hrec_Pref.c_Application_Status_Canceled),
                           Array_Varchar2(t_Application_Status_Draft,
                                          t_Application_Status_Waiting,
                                          t_Application_Status_Approved,
                                          t_Application_Status_Complited,
                                          t_Application_Status_Canceled));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_All return varchar2 is
  begin
    return t('vacancy_scope:all');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_Employees return varchar2 is
  begin
    return t('vacancy_scope:employees');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_Non_Employees return varchar2 is
  begin
    return t('vacancy_scope:non employees');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Scope(i_Scope varchar2) return varchar2 is
  begin
    return --
    case i_Scope --
    when Hrec_Pref.c_Vacancy_Scope_All then t_Vacancy_Scope_All --
    when Hrec_Pref.c_Vacancy_Scope_Employees then t_Vacancy_Scope_Employees --
    when Hrec_Pref.c_Vacancy_Scope_Non_Employees then t_Vacancy_Scope_Non_Employees --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Scopes return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Vacancy_Scope_All,
                                          Hrec_Pref.c_Vacancy_Scope_Employees,
                                          Hrec_Pref.c_Vacancy_Scope_Non_Employees),
                           Array_Varchar2(t_Vacancy_Scope_All,
                                          t_Vacancy_Scope_Employees,
                                          t_Vacancy_Scope_Non_Employees));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Status_Open return varchar2 is
  begin
    return t('vacancy_status:open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Status_Close return varchar2 is
  begin
    return t('vacancy_status:closed');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hrec_Pref.c_Vacancy_Status_Open then t_Vacancy_Status_Open --
    when Hrec_Pref.c_Vacancy_Status_Close then t_Vacancy_Status_Close --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Vacancy_Status_Open,
                                          Hrec_Pref.c_Vacancy_Status_Close),
                           Array_Varchar2(t_Vacancy_Status_Open, t_Vacancy_Status_Close));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Operation_Kind_Action return varchar2 is
  begin
    return t('operation_kind:action');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Operation_Kind_Comment return varchar2 is
  begin
    return t('operation_kind:comment');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Operation_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Hrec_Pref.c_Operation_Kind_Action then t_Operation_Kind_Action --
    when Hrec_Pref.c_Operation_Kind_Comment then t_Operation_Kind_Comment --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Operation_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Operation_Kind_Action,
                                          Hrec_Pref.c_Operation_Kind_Comment),
                           Array_Varchar2(t_Operation_Kind_Action, t_Operation_Kind_Comment));
  end;

  ----------------------------------------------------------------------------------------------------  
  Function t_Vacancy_Type_Open return varchar2 is
  begin
    return t('vacancy_type:open');
  end;

  ----------------------------------------------------------------------------------------------------  
  Function t_Vacancy_Type_Closed return varchar2 is
  begin
    return t('vacancy_type:closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Billing_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Hh_Billing_Type_Standart,
                                          Hrec_Pref.c_Hh_Billing_Type_Free,
                                          Hrec_Pref.c_Hh_Billing_Type_Standart_Plus,
                                          Hrec_Pref.c_Hh_Billing_Type_Premium),
                           Array_Varchar2(t('billing_type:standard'),
                                          t('billing_type:free'),
                                          t('billing_type:standart plus'),
                                          t('billing_type:premium')));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Vacancy_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Hh_Vacancy_Type_Open,
                                          Hrec_Pref.c_Hh_Vacancy_Type_Closed),
                           Array_Varchar2(t_Vacancy_Type_Open, t_Vacancy_Type_Closed));
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Olx_Advertiser_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Olx_Advertiser_Type_Private,
                                          Hrec_Pref.c_Olx_Advertiser_Type_Businnes),
                           Array_Varchar2(t('olx_advertiser_type:private'),
                                          t('olx_advertiser_type:businnes')));
  end;

end Hrec_Util;
/

create or replace package Hrec_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Hrec_Watcher;
/
create or replace package body Hrec_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head       number := Md_Pref.c_Company_Head;
    v_Lang_Code          varchar2(5) := z_Md_Companies.Load(i_Company_Id).Lang_Code;
    v_Pcode_Like         varchar2(10) := Upper(Href_Pref.c_Pc_Verifix_Hr) || '%';
    v_Query              varchar2(4000);
    v_Vacancy_Type_Query varchar2(4000);
    r_Stage              Hrec_Stages%rowtype;
    r_Funnel             Hrec_Funnels%rowtype;
    r_Vacancy_Group      Hrec_Vacancy_Groups%rowtype;
    r_Vacancy_Type       Hrec_Vacancy_Types%rowtype;
  begin
    -- add default vacancy group
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Vacancy_Groups,
                                                i_Lang_Code => v_Lang_Code);
  
    v_Vacancy_Type_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Vacancy_Types,
                                                             i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Vacancy_Groups q
               where q.Company_Id = v_Company_Head
                 and q.Pcode like v_Pcode_Like
               order by q.Order_No)
    loop
      r_Vacancy_Group                  := r;
      r_Vacancy_Group.Company_Id       := i_Company_Id;
      r_Vacancy_Group.Vacancy_Group_Id := Hrec_Next.Vacancy_Group_Id;
    
      execute immediate v_Query
        using in r_Vacancy_Group, out r_Vacancy_Group;
    
      z_Hrec_Vacancy_Groups.Save_Row(r_Vacancy_Group);
    
      for t in (select *
                  from Hrec_Vacancy_Types w
                 where w.Company_Id = v_Company_Head
                   and w.Vacancy_Group_Id = r.Vacancy_Group_Id
                   and w.Pcode like v_Pcode_Like)
      loop
        r_Vacancy_Type                  := t;
        r_Vacancy_Type.Company_Id       := i_Company_Id;
        r_Vacancy_Type.Vacancy_Group_Id := r_Vacancy_Group.Vacancy_Group_Id;
        r_Vacancy_Type.Vacancy_Type_Id  := Hrec_Next.Vacancy_Type_Id;
      
        execute immediate v_Vacancy_Type_Query
          using in r_Vacancy_Type, out r_Vacancy_Type;
      
        z_Hrec_Vacancy_Types.Save_Row(r_Vacancy_Type);
      end loop;
    end loop;
  
    -- add default stages
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Stages,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Stages t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Order_No)
    loop
      r_Stage            := r;
      r_Stage.Company_Id := i_Company_Id;
      r_Stage.Stage_Id   := Hrec_Next.Stage_Id;
    
      execute immediate v_Query
        using in r_Stage, out r_Stage;
    
      z_Hrec_Stages.Save_Row(r_Stage);
    end loop;
  
    -- add default funnels
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Funnels,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Funnels t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like)
    loop
      r_Funnel            := r;
      r_Funnel.Company_Id := i_Company_Id;
      r_Funnel.Funnel_Id  := Hrec_Next.Funnel_Id;
    
      execute immediate v_Query
        using in r_Funnel, out r_Funnel;
    
      z_Hrec_Funnels.Save_Row(r_Funnel);
    end loop;
  
    -- connect todo stage with Head Hunter's To do stage
  
    z_Hrec_Hh_Integration_Stages.Save_One(i_Company_Id => i_Company_Id,
                                          i_Stage_Id   => Hrec_Util.Stage_Id_By_Pcode(i_Company_Id => i_Company_Id,
                                                                                      i_Pcode      => Hrec_Pref.c_Pcode_Stage_Todo),
                                          i_Stage_Code => Hrec_Pref.c_Hh_Todo_Stage_Code);
  end;

end Hrec_Watcher;
/

create or replace package Href_Pref is
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id           number,
    Person_Id            number,
    First_Name           varchar2(250 char),
    Last_Name            varchar2(250 char),
    Middle_Name          varchar2(250 char),
    Gender               varchar2(1),
    Birthday             date,
    Nationality_Id       number,
    Photo_Sha            varchar2(64),
    Tin                  varchar2(18 char),
    Iapa                 varchar2(20 char),
    Npin                 varchar2(14 char),
    Region_Id            number,
    Main_Phone           varchar2(100 char),
    Email                varchar2(100 char),
    Address              varchar2(500 char),
    Legal_Address        varchar2(300 char),
    Key_Person           varchar2(1),
    Access_All_Employees varchar2(1),
    Access_Hidden_Salary varchar2(1),
    State                varchar2(1),
    Code                 varchar2(50 char));
  ----------------------------------------------------------------------------------------------------
  type Person_Lang_Rt is record(
    Lang_Id       number,
    Lang_Level_Id number);
  type Person_Lang_Nt is table of Person_Lang_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Experience_Rt is record(
    Person_Experience_Id number,
    Experience_Type_Id   number,
    Is_Working           varchar2(1),
    Start_Date           date,
    Num_Year             number,
    Num_Month            number,
    Num_Day              number);
  type Person_Experience_Nt is table of Person_Experience_Rt;
  ----------------------------------------------------------------------------------------------------
  type Employee_Info_Rt is record(
    Context_Id number,
    Column_Key varchar2(100),
    Event      varchar2(1),
    value      varchar2(2000),
    timestamp  date,
    User_Id    number);
  type Employee_Info_Nt is table of Employee_Info_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Recom_Rt is record(
    Recommendation_Id   number,
    Sender_Name         varchar2(300 char),
    Sender_Phone_Number varchar2(30 char),
    Sender_Email        varchar2(320 char),
    File_Sha            varchar2(64),
    Order_No            number,
    Feedback            varchar2(300 char),
    Note                varchar2(300 char));
  type Candidate_Recom_Nt is table of Candidate_Recom_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Person_Type_Id   number,
    Candidate_Kind   varchar2(1),
    Source_Id        number,
    Wage_Expectation number,
    Cv_Sha           varchar2(64),
    Note             varchar2(300 char),
    Extra_Phone      varchar2(100 char),
    Edu_Stages       Array_Number,
    Candidate_Jobs   Array_Number,
    Person           Person_Rt,
    Langs            Person_Lang_Nt,
    Experiences      Person_Experience_Nt,
    Recommendations  Candidate_Recom_Nt);
  ----------------------------------------------------------------------------------------------------
  type Employee_Rt is record(
    Person    Person_Rt,
    Filial_Id number,
    State     varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Indicator_Rt is record(
    Indicator_Id    number,
    Indicator_Value number);
  type Indicator_Nt is table of Indicator_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Licensed_Rt is record(
    Staff_Id number,
    Period   date,
    Licensed varchar2(1));
  type Staff_Licensed_Nt is table of Staff_Licensed_Rt;
  ----------------------------------------------------------------------------------------------------
  type Oper_Type_Rt is record(
    Oper_Type_Id  number,
    Indicator_Ids Array_Number);
  type Oper_Type_Nt is table of Oper_Type_Rt;
  ----------------------------------------------------------------------------------------------------
  type Period_Rt is record(
    Period_Begin date,
    Period_End   date);
  type Period_Nt is table of Period_Rt;
  -- Fte limit
  ----------------------------------------------------------------------------------------------------
  type Fte_Limit_Rt is record(
    Fte_Limit_Setting varchar2(1),
    Fte_Limit         number);
  ---------------------------------------------------------------------------------------------------- 
  c_Fte_Limit_Setting constant varchar2(50) := 'VHR:FTE_LIMIT_SETTING';
  c_Fte_Limit         constant varchar2(50) := 'VHR:FTE_LIMIT';
  c_Fte_Limit_Default constant number := 1.5;
  ----------------------------------------------------------------------------------------------------
  type Col_Required_Setting_Rt is record(
    Last_Name              varchar2(1) := 'N',
    Middle_Name            varchar2(1) := 'N',
    Birthday               varchar2(1) := 'N',
    Phone_Number           varchar2(1) := 'N',
    Email                  varchar2(1) := 'N',
    Region                 varchar2(1) := 'N',
    Address                varchar2(1) := 'N',
    Legal_Address          varchar2(1) := 'N',
    Passport               varchar2(1) := 'N',
    Npin                   varchar2(1) := 'N',
    Iapa                   varchar2(1) := 'N',
    Request_Note           varchar2(1) := 'N',
    Request_Note_Limit     number := 0,
    Plan_Change_Note       varchar2(1) := 'N',
    Plan_Change_Note_Limit number := 0);
  ----------------------------------------------------------------------------------------------------
  -- Project Code
  ----------------------------------------------------------------------------------------------------
  c_Pc_Verifix_Hr constant varchar2(10) := 'vhr';
  ----------------------------------------------------------------------------------------------------
  -- Project Version
  ----------------------------------------------------------------------------------------------------
  c_Pv_Verifix_Hr constant varchar2(10) := '2.36.0';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Role
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Role_Hr         constant varchar2(10) := 'VHR:1';
  c_Pcode_Role_Supervisor constant varchar2(10) := 'VHR:2';
  c_Pcode_Role_Staff      constant varchar2(10) := 'VHR:3';
  c_Pcode_Role_Accountant constant varchar2(10) := 'VHR:4';
  c_Pcode_Role_Timepad    constant varchar2(10) := 'VHR:5';
  c_Pcode_Role_Recruiter  constant varchar2(10) := 'VHR:6';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Document_Type_Default_Passport constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Status_New      constant varchar2(1) := 'N';
  c_Person_Document_Status_Approved constant varchar2(1) := 'A';
  c_Person_Document_Status_Rejected constant varchar2(1) := 'R';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Owe Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Owe_Status_Complete constant varchar2(1) := 'C';
  c_Person_Document_Owe_Status_Partial  constant varchar2(1) := 'P';
  c_Person_Document_Owe_Status_Exempt   constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Indicator
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Indicator_Wage                     constant varchar2(20) := 'VHR:1';
  c_Pcode_Indicator_Rate                     constant varchar2(20) := 'VHR:2';
  c_Pcode_Indicator_Plan_Days                constant varchar2(20) := 'VHR:3';
  c_Pcode_Indicator_Fact_Days                constant varchar2(20) := 'VHR:4';
  c_Pcode_Indicator_Plan_Hours               constant varchar2(20) := 'VHR:5';
  c_Pcode_Indicator_Fact_Hours               constant varchar2(20) := 'VHR:6';
  c_Pcode_Indicator_Perf_Bonus               constant varchar2(20) := 'VHR:7';
  c_Pcode_Indicator_Perf_Extra_Bonus         constant varchar2(20) := 'VHR:8';
  c_Pcode_Indicator_Working_Days             constant varchar2(20) := 'VHR:9';
  c_Pcode_Indicator_Working_Hours            constant varchar2(20) := 'VHR:10';
  c_Pcode_Indicator_Sick_Leave_Coefficient   constant varchar2(20) := 'VHR:11';
  c_Pcode_Indicator_Business_Trip_Days       constant varchar2(20) := 'VHR:12';
  c_Pcode_Indicator_Vacation_Days            constant varchar2(20) := 'VHR:13';
  c_Pcode_Indicator_Mean_Working_Days        constant varchar2(20) := 'VHR:14';
  c_Pcode_Indicator_Sick_Leave_Days          constant varchar2(20) := 'VHR:15';
  c_Pcode_Indicator_Hourly_Wage              constant varchar2(20) := 'VHR:16';
  c_Pcode_Indicator_Overtime_Hours           constant varchar2(20) := 'VHR:17';
  c_Pcode_Indicator_Overtime_Coef            constant varchar2(20) := 'VHR:18';
  c_Pcode_Indicator_Penalty_For_Late         constant varchar2(20) := 'VHR:19';
  c_Pcode_Indicator_Penalty_For_Early_Output constant varchar2(20) := 'VHR:20';
  c_Pcode_Indicator_Penalty_For_Absence      constant varchar2(20) := 'VHR:21';
  c_Pcode_Indicator_Penalty_For_Day_Skip     constant varchar2(20) := 'VHR:22';
  c_Pcode_Indicator_Perf_Penalty             constant varchar2(20) := 'VHR:23';
  c_Pcode_Indicator_Perf_Extra_Penalty       constant varchar2(20) := 'VHR:24';
  c_Pcode_Indicator_Penalty_For_Mark_Skip    constant varchar2(20) := 'VHR:25';
  ----------------------------------------------------------------------------------------------------
  -- Fte Pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Fte_Full_Time    constant varchar2(20) := 'VHR:1';
  c_Pcode_Fte_Part_Time    constant varchar2(20) := 'VHR:2';
  c_Pcode_Fte_Quarter_Time constant varchar2(20) := 'VHR:3';
  ----------------------------------------------------------------------------------------------------
  c_Custom_Fte_Id constant number := -1;
  c_Default_Fte   constant number := 1.0;
  ----------------------------------------------------------------------------------------------------
  -- Staff Status
  ----------------------------------------------------------------------------------------------------
  c_Staff_Status_Working   constant varchar2(1) := 'W';
  c_Staff_Status_Dismissed constant varchar2(1) := 'D';
  c_Staff_Status_Unknown   constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- Staff Kind
  ----------------------------------------------------------------------------------------------------
  c_Staff_Kind_Primary   constant varchar2(1) := 'P';
  c_Staff_Kind_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Candidate Kind
  ----------------------------------------------------------------------------------------------------
  c_Candidate_Kind_New constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Specialty Kind
  ----------------------------------------------------------------------------------------------------
  c_Specialty_Kind_Group     constant varchar2(1) := 'G';
  c_Specialty_Kind_Specialty constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Employment Source Kind
  ----------------------------------------------------------------------------------------------------
  c_Employment_Source_Kind_Hiring    constant varchar2(1) := 'H';
  c_Employment_Source_Kind_Dismissal constant varchar2(1) := 'D';
  c_Employment_Source_Kind_Both      constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- User Access Level
  ----------------------------------------------------------------------------------------------------
  c_User_Access_Level_Personal          constant varchar2(1) := 'P';
  c_User_Access_Level_Direct_Employee   constant varchar2(1) := 'D';
  c_User_Access_Level_Undirect_Employee constant varchar2(1) := 'U';
  c_User_Access_Level_Manual            constant varchar2(1) := 'M';
  c_User_Access_Level_Other             constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- Indicator Used
  ----------------------------------------------------------------------------------------------------
  c_Indicator_Used_Constantly    constant varchar2(1) := 'C';
  c_Indicator_Used_Automatically constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Time Formats
  ----------------------------------------------------------------------------------------------------
  c_Time_Format_Minute       constant varchar2(50) := 'hh24:mi';
  c_Date_Format_Year         constant varchar2(50) := 'yyyy';
  c_Date_Format_Month        constant varchar2(50) := 'mm.yyyy';
  c_Date_Format_Day          constant varchar2(50) := 'dd.mm.yyyy';
  c_Date_Format_Minute       constant varchar2(50) := 'dd.mm.yyyy hh24:mi';
  c_Date_Format_Second       constant varchar2(50) := 'dd.mm.yyyy hh24:mi:ss';
  c_Date_Format_Year_Quarter constant varchar2(50) := 'yyyy "Q"q';
  ---------------------------------------------------------------------------------------------------- 
  -- Date trunc formats
  ---------------------------------------------------------------------------------------------------- 
  c_Date_Trunc_Format_Year    constant varchar2(50) := 'yyyy';
  c_Date_Trunc_Format_Month   constant varchar2(50) := 'mm';
  c_Date_Trunc_Format_Quarter constant varchar2(50) := 'q';
  ----------------------------------------------------------------------------------------------------
  -- Max Date
  ----------------------------------------------------------------------------------------------------
  c_Max_Date constant date := to_date('31.12.9999', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Min Date
  ----------------------------------------------------------------------------------------------------
  c_Min_Date constant date := to_date('01.01.0001', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal Reason Types
  ----------------------------------------------------------------------------------------------------
  c_Dismissal_Reasons_Type_Positive constant varchar2(1) := 'P';
  c_Dismissal_Reasons_Type_Negative constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Working Time Differences
  ----------------------------------------------------------------------------------------------------
  c_Diff_Hiring    constant number := -2;
  c_Diff_Dismissal constant number := 7;
  ----------------------------------------------------------------------------------------------------
  -- Module error codes
  ----------------------------------------------------------------------------------------------------
  c_Href_Error_Code  constant varchar2(10) := 'A05-01';
  c_Hes_Error_Code   constant varchar2(10) := 'A05-02';
  c_Hlic_Error_Code  constant varchar2(10) := 'A05-03';
  c_Htt_Error_Code   constant varchar2(10) := 'A05-04';
  c_Hzk_Error_Code   constant varchar2(10) := 'A05-05';
  c_Hrm_Error_Code   constant varchar2(10) := 'A05-06';
  c_Hpd_Error_Code   constant varchar2(10) := 'A05-07';
  c_Hln_Error_Code   constant varchar2(10) := 'A05-08';
  c_Hper_Error_Code  constant varchar2(10) := 'A05-09';
  c_Hpr_Error_Code   constant varchar2(10) := 'A05-10';
  c_Hac_Error_Code   constant varchar2(10) := 'A05-11';
  c_Htm_Error_Code   constant varchar2(10) := 'A05-12';
  c_Hrec_Error_Code  constant varchar2(10) := 'A05-13';
  c_Hsc_Error_Code   constant varchar2(10) := 'A05-14';
  c_Hface_Error_Code constant varchar2(10) := 'A05-15';
  c_Uit_Error_Code   constant varchar2(10) := 'A05-99';
  ----------------------------------------------------------------------------------------------------
  -- Column required settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Crs_Last_Name              constant varchar2(50) := 'vhr:href:crs:last_name';
  c_Pref_Crs_Middle_Name            constant varchar2(50) := 'vhr:href:crs:middle_name';
  c_Pref_Crs_Birthday               constant varchar2(50) := 'vhr:href:crs:birthday';
  c_Pref_Crs_Phone_Number           constant varchar2(50) := 'vhr:href:crs:phone_number';
  c_Pref_Crs_Email                  constant varchar2(50) := 'vhr:href:crs:email';
  c_Pref_Crs_Region                 constant varchar2(50) := 'vhr:href:crs:region';
  c_Pref_Crs_Address                constant varchar2(50) := 'vhr:href:crs:address';
  c_Pref_Crs_Legal_Address          constant varchar2(50) := 'vhr:href:crs:legal_address';
  c_Pref_Crs_Passport               constant varchar2(50) := 'vhr:href:crs:passport';
  c_Pref_Crs_Npin                   constant varchar2(50) := 'vhr:href:crs:npin';
  c_Pref_Crs_Iapa                   constant varchar2(50) := 'vhr:href:crs:iapa';
  c_Pref_Crs_Request_Note           constant varchar2(50) := 'vhr:href:crs:request_note';
  c_Pref_Crs_Request_Note_Limit     constant varchar2(50) := 'vhr:href:crs:request_note_limit';
  c_Pref_Crs_Plan_Change_Note       constant varchar2(50) := 'vhr:href:crs:plan_change_note';
  c_Pref_Crs_Plan_Change_Note_Limit constant varchar2(50) := 'vhr:href:crs:plan_change_note_limit';
  ----------------------------------------------------------------------------------------------------
  -- Company badge template
  ----------------------------------------------------------------------------------------------------
  c_Pref_Badge_Template_Id constant varchar2(50) := 'href:company_badge_template_id';
  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  c_Pref_Vpu_Setting constant varchar2(50) := 'href:vpu:setting';
  c_Pref_Vpu_Column  constant varchar2(50) := 'href:vpu:column';
  ----------------------------------------------------------------------------------------------------
  c_Vpu_Column_Name            constant varchar2(1) := 'N';
  c_Vpu_Column_Passport_Number constant varchar2(1) := 'P';
  c_Vpu_Column_Npin            constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  c_Settings_Separator constant varchar2(1) := '$';
  ----------------------------------------------------------------------------------------------------
  -- HTTP METHODS
  ----------------------------------------------------------------------------------------------------
  c_Http_Method_Get    constant varchar2(10) := 'GET';
  c_Http_Method_Put    constant varchar2(10) := 'PUT';
  c_Http_Method_Post   constant varchar2(10) := 'POST';
  c_Http_Method_Delete constant varchar2(10) := 'DELETE';

end Href_Pref;
/
create or replace package body Href_Pref is
end Href_Pref;
/

create or replace package Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  );
end Hrm_Api;
/
create or replace package body Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype) is
    v_Robot_Id number;
    r_Setting  Hrm_Settings%rowtype;
  
    -------------------------------------------------- 
    Function Get_Journal_Numbers
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number
    ) return Array_Varchar2 is
      result Array_Varchar2;
    begin
      select (select w.Journal_Number
                from Hpd_Journals w
               where w.Company_Id = q.Company_Id
                 and w.Filial_Id = q.Filial_Id
                 and w.Journal_Id = q.Journal_Id)
        bulk collect
        into result
        from Hpd_Page_Robots Pr
        join Hpd_Journal_Pages q
          on q.Company_Id = Pr.Company_Id
         and q.Filial_Id = Pr.Filial_Id
         and q.Page_Id = Pr.Page_Id
       where Pr.Company_Id = i_Company_Id
         and Pr.Filial_Id = i_Filial_Id
         and Pr.Robot_Id = i_Robot_Id;
    
      return set(result);
    end;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Setting.Company_Id,
                                       i_Filial_Id  => i_Setting.Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' and i_Setting.Position_Enable = 'N' then
      if Hrm_Core.Exists_Robot_With_Multiple_Staffs(i_Company_Id => i_Setting.Company_Id,
                                                    i_Filial_Id  => i_Setting.Filial_Id,
                                                    o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_013(i_Robot_Name      => z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                                                 i_Filial_Id => i_Setting.Filial_Id, --
                                                 i_Robot_Id => v_Robot_Id).Name,
                            i_Journal_Numbers => Get_Journal_Numbers(i_Company_Id => i_Setting.Company_Id, --
                                                                     i_Filial_Id  => i_Setting.Filial_Id, --
                                                                     i_Robot_Id   => v_Robot_Id));
      end if;
    
      if Hrm_Core.Exists_Robot_With_Booked_Trans(i_Company_Id => i_Setting.Company_Id,
                                                 i_Filial_Id  => i_Setting.Filial_Id,
                                                 o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_014(z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                            i_Filial_Id => i_Setting.Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    
      Hrm_Core.Insert_Division_Manager_Infos(i_Company_Id => i_Setting.Company_Id,
                                             i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    if r_Setting.Advanced_Org_Structure = 'Y' and i_Setting.Advanced_Org_Structure = 'N' then
      Hrm_Core.Assert_Advanced_Org_Structure_Changeable(i_Company_Id => i_Setting.Company_Id,
                                                        i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    z_Hrm_Settings.Save_Row(i_Setting);
  
    if r_Setting.Position_Enable = 'N' and i_Setting.Position_Enable = 'Y' then
      Hrm_Core.Open_Unopened_Robots(i_Company_Id => i_Setting.Company_Id,
                                    i_Filial_Id  => i_Setting.Filial_Id);
    
      Hrm_Core.Insert_Robot_Roles(i_Company_Id => i_Setting.Company_Id,
                                  i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype) is
  begin
    z_Hrm_Wage_Scales.Save_Row(i_Wage_Scale);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  ) is
  begin
    z_Hrm_Wage_Scales.Delete_One(i_Company_Id    => i_Company_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Wage_Scale_Id => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt) is
  begin
    Hrm_Core.Wage_Scale_Register_Save(i_Wage_Scale_Reg);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'Y' then
      Hrm_Error.Raise_015(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('Y'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'N' then
      Hrm_Error.Raise_016(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('N'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
  begin
    z_Hrm_Wage_Scale_Registers.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Register_Id => i_Register_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  ) is
    r_Robot        Mrf_Robots%rowtype;
    r_Hrm_Robot    Hrm_Robots%rowtype;
    r_Hrm_Division Hrm_Divisions%rowtype;
    r_Setting      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id,
                                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Division_Id Option_Number;
    v_Job_Id      Option_Number;
    v_Robot_Name  Option_Varchar2;
  begin
    if r_Setting.Position_Fixing = 'N' then
      return;
    end if;
  
    if not z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id) then
      return;
    end if;
  
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Division := z_Hrm_Divisions.Lock_Load(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Division_Id => r_Hrm_Robot.Org_Unit_Id);
  
    if r_Robot.Division_Id <> i_New_Division_Id then
      v_Division_Id := Option_Number(i_New_Division_Id);
    else
      v_Division_Id := null;
    end if;
  
    if r_Robot.Job_Id <> i_New_Job_Id then
      v_Job_Id := Option_Number(i_New_Job_Id);
    else
      v_Job_Id := null;
    end if;
  
    if r_Robot.Name <> i_New_Robot_Name then
      v_Robot_Name := Option_Varchar2(i_New_Robot_Name);
    else
      v_Robot_Name := null;
    end if;
  
    if v_Division_Id is null and v_Job_Id is null and v_Robot_Name is null then
      return;
    end if;
  
    z_Mrf_Robots.Update_One(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Robot_Id    => i_Robot_Id,
                            i_Division_Id => v_Division_Id,
                            i_Job_Id      => v_Job_Id,
                            i_Name        => v_Robot_Name);
  
    if v_Division_Id is not null and
       (r_Hrm_Division.Is_Department = 'Y' and i_New_Division_Id <> r_Hrm_Robot.Org_Unit_Id or
       r_Hrm_Division.Is_Department = 'N' and
       r_Hrm_Division.Parent_Department_Id <> i_New_Division_Id) then
      z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Robot_Id    => i_Robot_Id,
                              i_Org_Unit_Id => v_Division_Id);
    end if;
  
    for r in (select *
                from Hpd_Page_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Page_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Page_Id     => r.Page_Id,
                                   i_Division_Id => v_Division_Id,
                                   i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Hpd_Trans_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Trans_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Trans_Id    => r.Trans_Id,
                                    i_Division_Id => v_Division_Id,
                                    i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      Hpd_Core.Staff_Refresh_Cache(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => r.Staff_Id);
    
      Htt_Core.Person_Sync_Locations(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  ) is
    v_Org_Unit_Id number;
    r_Robot       Mrf_Robots%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    v_Org_Unit_Id := Nvl(i_Org_Unit_Id, r_Robot.Division_Id);
  
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Advanced_Org_Structure = 'N' then
      return;
    elsif v_Org_Unit_Id <> r_Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => r_Robot.Division_Id,
                                          i_Org_Unit_Id => v_Org_Unit_Id);
    end if;
  
    z_Hrm_Robots.Update_One(i_Company_Id  => r_Robot.Company_Id,
                            i_Filial_Id   => r_Robot.Filial_Id,
                            i_Robot_Id    => r_Robot.Robot_Id,
                            i_Org_Unit_Id => Option_Number(v_Org_Unit_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  ) is
    r_Settings      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Robot.Robot.Company_Id,
                                                                  i_Filial_Id  => i_Robot.Robot.Filial_Id);
    r_Mrf_Robot     Mrf_Robots%rowtype;
    r_Robot         Hrm_Robots%rowtype;
    r_Old_Robot     Hrm_Robots%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Register_Id   number;
    v_Value         number;
    v_User_Id       number;
  
    --------------------------------------------------
    Procedure Attach_Roles
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Robot_Id     number,
      i_Role_Ids     Array_Number,
      i_Is_New_Robot boolean
    ) is
      v_Role_Ids      Array_Number := i_Role_Ids;
      v_Staff_Role_Id number := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
    begin
      if i_Is_New_Robot and not Fazo.Contains(v_Role_Ids, v_Staff_Role_Id) then
        Fazo.Push(v_Role_Ids, v_Staff_Role_Id);
      end if;
    
      for r in (select *
                  from Mrf_Robot_Roles t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Robot_Id = i_Robot_Id
                   and t.Role_Id not in (select Column_Value
                                           from table(v_Role_Ids)))
      loop
        Mrf_Api.Robot_Remove_Role(i_Company_Id => r.Company_Id,
                                  i_Robot_Id   => r.Robot_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Role_Id    => r.Role_Id);
      end loop;
    
      for i in 1 .. v_Role_Ids.Count
      loop
        Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                               i_Robot_Id   => i_Robot_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Role_Id    => v_Role_Ids(i));
      end loop;
    end;
  
  begin
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) and
       z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Old_Robot) and --
       r_Settings.Position_Enable = 'Y' and
       Hrm_Util.Access_Edit_Div_Job_Of_Robot(i_Company_Id => i_Robot.Robot.Company_Id,
                                             i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                             i_Robot_Id   => i_Robot.Robot.Robot_Id) = 'N' then
      if r_Mrf_Robot.Division_Id <> i_Robot.Robot.Division_Id then
        Hrm_Error.Raise_017(i_Robot_Name   => r_Mrf_Robot.Name,
                            i_Old_Division => z_Mhr_Divisions.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                              i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                              i_Division_Id => r_Mrf_Robot.Division_Id).Name);
      end if;
    
      if r_Mrf_Robot.Job_Id <> i_Robot.Robot.Job_Id then
        Hrm_Error.Raise_018(i_Robot_Name => r_Mrf_Robot.Name,
                            i_Old_Job    => z_Mhr_Jobs.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                            i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                            i_Job_Id => r_Mrf_Robot.Job_Id).Name);
      end if;
    end if;
  
    if i_Robot.Planned_Fte > 1 or i_Robot.Planned_Fte < 0 then
      Hrm_Error.Raise_020(i_Robot.Planned_Fte);
    end if;
  
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) then
      r_Mrf_Robot.Name           := i_Robot.Robot.Name;
      r_Mrf_Robot.Code           := i_Robot.Robot.Code;
      r_Mrf_Robot.Robot_Group_Id := i_Robot.Robot.Robot_Group_Id;
      r_Mrf_Robot.Division_Id    := i_Robot.Robot.Division_Id;
      r_Mrf_Robot.Job_Id         := i_Robot.Robot.Job_Id;
      r_Mrf_Robot.State          := i_Robot.Robot.State;
    
      Mrf_Api.Robot_Save(r_Mrf_Robot);
    else
      Mrf_Api.Robot_Save(i_Robot.Robot);
    end if;
  
    z_Hrm_Robots.Init(p_Row                      => r_Robot,
                      i_Company_Id               => i_Robot.Robot.Company_Id,
                      i_Filial_Id                => i_Robot.Robot.Filial_Id,
                      i_Robot_Id                 => i_Robot.Robot.Robot_Id,
                      i_Org_Unit_Id              => Nvl(i_Robot.Org_Unit_Id,
                                                        i_Robot.Robot.Division_Id),
                      i_Opened_Date              => i_Robot.Opened_Date,
                      i_Closed_Date              => i_Robot.Closed_Date,
                      i_Schedule_Id              => i_Robot.Schedule_Id,
                      i_Rank_Id                  => i_Robot.Rank_Id,
                      i_Labor_Function_Id        => i_Robot.Labor_Function_Id,
                      i_Description              => i_Robot.Description,
                      i_Hiring_Condition         => i_Robot.Hiring_Condition,
                      i_Contractual_Wage         => i_Robot.Contractual_Wage,
                      i_Access_Hidden_Salary     => i_Robot.Access_Hidden_Salary,
                      i_Position_Employment_Kind => Nvl(i_Robot.Position_Employment_Kind,
                                                        Hrm_Pref.c_Position_Employment_Staff));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Mrf_Robots.Load(i_Company_Id => i_Robot.Robot.Company_Id, i_Filial_Id => i_Robot.Robot.Filial_Id, i_Robot_Id => i_Robot.Robot.Robot_Id).Modified_By;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      if r_Robot.Contractual_Wage = 'N' then
        r_Robot.Wage_Scale_Id := i_Robot.Wage_Scale_Id;
      end if;
    else
      r_Robot.Contractual_Wage := Nvl(r_Old_Robot.Contractual_Wage, 'Y');
      r_Robot.Wage_Scale_Id    := r_Old_Robot.Wage_Scale_Id;
    end if;
  
    if r_Settings.Position_Enable = 'N' and r_Old_Robot.Company_Id is not null then
      r_Robot.Opened_Date := r_Old_Robot.Opened_Date;
      r_Robot.Closed_Date := r_Old_Robot.Closed_Date;
    end if;
  
    if r_Settings.Advanced_Org_Structure = 'N' then
      r_Robot.Org_Unit_Id := i_Robot.Robot.Division_Id;
    elsif r_Robot.Org_Unit_Id <> i_Robot.Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => i_Robot.Robot.Division_Id,
                                          i_Org_Unit_Id => r_Robot.Org_Unit_Id);
    end if;
  
    if r_Old_Robot.Position_Employment_Kind is not null then
      r_Robot.Position_Employment_Kind := r_Old_Robot.Position_Employment_Kind;
    end if;
  
    z_Hrm_Robots.Save_Row(r_Robot);
  
    -- save robot vacation days limits
    if i_Robot.Vacation_Days_Limit is not null then
      z_Hrm_Robot_Vacation_Limits.Save_One(i_Company_Id => r_Robot.Company_Id,
                                           i_Filial_Id  => r_Robot.Filial_Id,
                                           i_Robot_Id   => r_Robot.Robot_Id,
                                           i_Days_Limit => i_Robot.Vacation_Days_Limit);
    end if;
  
    if r_Settings.Position_Enable = 'Y' then
      Hrm_Core.Robot_Plans_Delete(i_Company_Id => r_Robot.Company_Id,
                                  i_Filial_Id  => r_Robot.Filial_Id,
                                  i_Robot_Id   => r_Robot.Robot_Id);
    
      Hrm_Core.Robot_Open(i_Company_Id  => r_Robot.Company_Id,
                          i_Filial_Id   => r_Robot.Filial_Id,
                          i_Robot_Id    => r_Robot.Robot_Id,
                          i_Open_Date   => r_Robot.Opened_Date,
                          i_Planned_Fte => i_Robot.Planned_Fte);
    
      if r_Robot.Closed_Date is not null then
        Hrm_Core.Robot_Close(i_Company_Id => r_Robot.Company_Id,
                             i_Filial_Id  => r_Robot.Filial_Id,
                             i_Robot_Id   => r_Robot.Robot_Id,
                             i_Close_Date => r_Robot.Closed_Date);
      end if;
    end if;
  
    -- save oper types and indicators
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Robot.Oper_Types.Count);
    
      for i in 1 .. i_Robot.Indicators.Count
      loop
        v_Indicator := i_Robot.Indicators(i);
      
        z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                        i_Filial_Id       => r_Robot.Filial_Id,
                                        i_Robot_Id        => r_Robot.Robot_Id,
                                        i_Indicator_Id    => v_Indicator.Indicator_Id,
                                        i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Robot.Oper_Types.Count
      loop
        v_Oper_Type := i_Robot.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Robot_Oper_Types.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Oper_Type_Indicators t
                   where t.Company_Id = r_Robot.Company_Id
                     and t.Filial_Id = r_Robot.Filial_Id
                     and t.Robot_Id = r_Robot.Robot_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => r.Oper_Type_Id,
                                                i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Robot_Oper_Types t
                 where t.Company_Id = r_Robot.Company_Id
                   and t.Filial_Id = r_Robot.Filial_Id
                   and t.Robot_Id = r_Robot.Robot_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Robot_Oper_Types.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Robot_Indicators q
                 where q.Company_Id = r_Robot.Company_Id
                   and q.Filial_Id = r_Robot.Filial_Id
                   and q.Robot_Id = r_Robot.Robot_Id
                   and not exists (select 1
                          from Hrm_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Robot_Id = q.Robot_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Robot_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  
    -- fix not contractual wage indicator
    if r_Robot.Contractual_Wage = 'N' then
      v_Register_Id := Hrm_Util.Closest_Register_Id(i_Company_Id    => r_Robot.Company_Id,
                                                    i_Filial_Id     => r_Robot.Filial_Id,
                                                    i_Wage_Scale_Id => r_Robot.Wage_Scale_Id,
                                                    i_Period        => r_Robot.Opened_Date);
    
      if r_Robot.Rank_Id is not null then
        v_Value := z_Hrm_Register_Ranks.Take(i_Company_Id => r_Robot.Company_Id, --
                   i_Filial_Id => r_Robot.Filial_Id, --
                   i_Register_Id => v_Register_Id, --
                   i_Rank_Id => r_Robot.Rank_Id).Wage;
      else
        select max(q.Wage)
          into v_Value
          from Hrm_Register_Ranks q
         where q.Company_Id = r_Robot.Company_Id
           and q.Filial_Id = r_Robot.Filial_Id
           and q.Register_Id = v_Register_Id;
      end if;
    
      z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                      i_Filial_Id       => r_Robot.Filial_Id,
                                      i_Robot_Id        => r_Robot.Robot_Id,
                                      i_Indicator_Id    => Href_Util.Indicator_Id(i_Company_Id => r_Robot.Company_Id,
                                                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                      i_Indicator_Value => Nvl(v_Value, 0));
    end if;
  
    Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => r_Robot.Company_Id,
                                 i_Filial_Id            => r_Robot.Filial_Id,
                                 i_Robot_Id             => r_Robot.Robot_Id,
                                 i_Allowed_Division_Ids => i_Robot.Allowed_Division_Ids);
  
    if r_Settings.Position_Enable = 'Y' then
      Attach_Roles(i_Company_Id   => r_Robot.Company_Id,
                   i_Filial_Id    => r_Robot.Filial_Id,
                   i_Robot_Id     => r_Robot.Robot_Id,
                   i_Role_Ids     => i_Robot.Role_Ids,
                   i_Is_New_Robot => case
                                       when r_Old_Robot.Robot_Id is null then
                                        true
                                       else
                                        false
                                     end);
    end if;
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id);
  
    Hrm_Core.Staff_Refresh_Cache(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id,
                                 i_Robot_Id   => r_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    Hrm_Core.Robot_Plans_Delete(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Robot_Id   => i_Robot_Id);
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    z_Hrm_Robots.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id);
  
    Mrf_Api.Robot_Delete(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Robot_Id   => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Position_Enable = 'N' then
      return;
    end if;
  
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                              i_Job_Group_Id => i_Job_Group_Ids(i)) then
        z_Hrm_Robot_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => i_Robot_Id,
                                                        i_Job_Group_Id => i_Job_Group_Ids(i));
      end if;
    end loop;
  
    delete Hrm_Robot_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  ) is
  begin
    z_Mrf_Robots.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Person_Id  => Option_Number(i_Person_Id));
  
    z_Mrf_Robot_Persons.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  ) is
    r_Template      Hrm_Job_Templates%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Exists        boolean := true;
  begin
    if not z_Hrm_Job_Templates.Exist_Lock(i_Company_Id  => i_Template.Company_Id,
                                          i_Filial_Id   => i_Template.Filial_Id,
                                          i_Template_Id => i_Template.Template_Id,
                                          o_Row         => r_Template) then
      v_Exists               := false;
      r_Template.Company_Id  := i_Template.Company_Id;
      r_Template.Filial_Id   := i_Template.Filial_Id;
      r_Template.Template_Id := i_Template.Template_Id;
    end if;
  
    r_Template.Division_Id         := i_Template.Division_Id;
    r_Template.Job_Id              := i_Template.Job_Id;
    r_Template.Rank_Id             := i_Template.Rank_Id;
    r_Template.Schedule_Id         := i_Template.Schedule_Id;
    r_Template.Vacation_Days_Limit := i_Template.Vacation_Days_Limit;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      r_Template.Wage_Scale_Id := i_Template.Wage_Scale_Id;
    end if;
  
    if v_Exists then
      z_Hrm_Job_Templates.Update_Row(r_Template);
    else
      z_Hrm_Job_Templates.Insert_Row(r_Template);
    end if;
  
    -- oper types
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Template.Oper_Types.Count);
    
      for i in 1 .. i_Template.Indicators.Count
      loop
        v_Indicator := i_Template.Indicators(i);
      
        z_Hrm_Template_Indicators.Save_One(i_Company_Id      => r_Template.Company_Id,
                                           i_Filial_Id       => r_Template.Filial_Id,
                                           i_Template_Id     => r_Template.Template_Id,
                                           i_Indicator_Id    => v_Indicator.Indicator_Id,
                                           i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Template.Oper_Types.Count
      loop
        v_Oper_Type := i_Template.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Template_Oper_Types.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                     i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Temp_Oper_Type_Indicators t
                   where t.Company_Id = r_Template.Company_Id
                     and t.Filial_Id = r_Template.Filial_Id
                     and t.Template_Id = r_Template.Template_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => r.Oper_Type_Id,
                                                     i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Template_Oper_Types t
                 where t.Company_Id = r_Template.Company_Id
                   and t.Filial_Id = r_Template.Filial_Id
                   and t.Template_Id = r_Template.Template_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Template_Oper_Types.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Template_Indicators q
                 where q.Company_Id = r_Template.Company_Id
                   and q.Filial_Id = r_Template.Filial_Id
                   and q.Template_Id = r_Template.Template_Id
                   and not exists (select 1
                          from Hrm_Temp_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Template_Id = q.Template_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Template_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  ) is
  begin
    z_Hrm_Job_Templates.Delete_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Template_Id => i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  ) is
  begin
    if i_Schedule_Id is not null then
      z_Hrm_Division_Schedules.Save_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => i_Division_Id,
                                        i_Schedule_Id => i_Schedule_Id);
    else
      z_Hrm_Division_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Division_Id => i_Division_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  ) is
    r_Setting Hrm_Settings%rowtype;
    r_Robot   Mrf_Robots%rowtype;
    r_Manager Mrf_Division_Managers%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Robot_Id   => i_Robot_Id);
    
      z_Hrm_Division_Managers.Save_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Division_Id,
                                       i_Employee_Id => r_Robot.Person_Id);
    end if;
  
    r_Manager.Company_Id  := i_Company_Id;
    r_Manager.Filial_Id   := i_Filial_Id;
    r_Manager.Division_Id := i_Division_Id;
    r_Manager.Manager_Id  := i_Robot_Id;
  
    Mrf_Api.Division_Manager_Save(r_Manager);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      z_Hrm_Division_Managers.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    end if;
  
    Mrf_Api.Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  ) is
  begin
    for r in (select q.*
                from Mhr_Parent_Divisions q
                join Hrm_Divisions Hd
                  on Hd.Company_Id = q.Company_Id
                 and Hd.Filial_Id = q.Filial_Id
                 and Hd.Division_Id = q.Division_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Parent_Id = i_Division_Id
                 and Hd.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Auto
                 and q.Lvl = (select min(p.Lvl)
                                from Mhr_Parent_Divisions p
                                join Hrm_Divisions d
                                  on d.Company_Id = p.Company_Id
                                 and d.Filial_Id = p.Filial_Id
                                 and d.Division_Id = p.Parent_Id
                               where p.Company_Id = q.Company_Id
                                 and p.Filial_Id = q.Filial_Id
                                 and p.Division_Id = q.Division_Id
                                 and (p.Parent_Id = q.Parent_Id or
                                     d.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Manual)
                                 and p.Lvl <= q.Lvl))
    loop
      if i_New_Manager_Id is not null then
        Division_Manager_Save(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Division_Id => r.Division_Id,
                              i_Robot_Id    => i_New_Manager_Id);
      else
        Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Division_Id => r.Division_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  ) is
    r_Setting      Hrm_Settings%rowtype;
    v_Robot_Id     number;
    v_Division_Ids Array_Number := Array_Number();
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      begin
        select r.Robot_Id
          into v_Robot_Id
          from Mrf_Robots r
         where r.Company_Id = i_Company_Id
           and r.Filial_Id = i_Filial_Id
           and r.Person_Id = i_Employee_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Robot_Id := null;
      end;
    
      v_Division_Ids := Hrm_Util.Fix_Allowed_Divisions(i_Company_Id           => i_Company_Id,
                                                       i_Filial_Id            => i_Filial_Id,
                                                       i_Robot_Id             => v_Robot_Id,
                                                       i_Allowed_Division_Ids => i_Division_Ids);
    
      for r in (select *
                  from Href_Employee_Divisions Ed
                 where Ed.Company_Id = i_Company_Id
                   and Ed.Filial_Id = i_Filial_Id
                   and Ed.Employee_Id = i_Employee_Id
                   and Ed.Division_Id not member of v_Division_Ids)
      loop
        z_Href_Employee_Divisions.Delete_One(i_Company_Id  => r.Company_Id,
                                             i_Filial_Id   => r.Filial_Id,
                                             i_Employee_Id => r.Employee_Id,
                                             i_Division_Id => r.Division_Id);
      end loop;
    
      for i in 1 .. v_Division_Ids.Count
      loop
        z_Href_Employee_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                             i_Filial_Id   => i_Filial_Id,
                                             i_Employee_Id => i_Employee_Id,
                                             i_Division_Id => v_Division_Ids(i));
      end loop;
    
      if v_Robot_Id is not null then
        Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => i_Company_Id,
                                     i_Filial_Id            => i_Filial_Id,
                                     i_Robot_Id             => v_Robot_Id,
                                     i_Allowed_Division_Ids => v_Division_Ids);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt) is
    r_Division Mhr_Divisions%rowtype := i_Division.Division;
    r_Hrm_Old  Hrm_Divisions%rowtype;
    r_Settings Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => r_Division.Company_Id,
                                                             i_Filial_Id  => r_Division.Filial_Id);
  
    v_Parent_Department_Id number;
    v_Is_Department        varchar2(1) := i_Division.Is_Department;
    v_Manager_Id           number := i_Division.Manager_Id;
    v_Manager_Status       varchar2(1) := Hrm_Pref.c_Division_Manager_Status_Manual;
    v_Kind_Changed         boolean := false;
    v_Parent_Changed       boolean := false;
  begin
    if v_Is_Department = 'N' and r_Settings.Advanced_Org_Structure = 'N' then
      v_Is_Department := 'Y';
    end if;
  
    if z_Hrm_Divisions.Exist_Lock(i_Company_Id  => r_Division.Company_Id,
                                  i_Filial_Id   => r_Division.Filial_Id,
                                  i_Division_Id => r_Division.Division_Id,
                                  o_Row         => r_Hrm_Old) then
      if r_Hrm_Old.Is_Department <> v_Is_Department then
        Hrm_Core.Assert_Department_Status_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                     i_Filial_Id     => r_Division.Filial_Id,
                                                     i_Division_Id   => r_Division.Division_Id,
                                                     i_Is_Department => v_Is_Department);
      
        v_Kind_Changed := true;
      end if;
    end if;
  
    Mhr_Api.Division_Save(r_Division);
  
    v_Parent_Department_Id := Hrm_Util.Closest_Parent_Department_Id(i_Company_Id  => r_Division.Company_Id,
                                                                    i_Filial_Id   => r_Division.Filial_Id,
                                                                    i_Division_Id => r_Division.Division_Id);
  
    if r_Hrm_Old.Company_Id is not null and
       not Fazo.Equal(r_Hrm_Old.Parent_Department_Id, v_Parent_Department_Id) then
      Hrm_Core.Assert_Division_Parent_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                 i_Filial_Id     => r_Division.Filial_Id,
                                                 i_Division_Id   => r_Division.Division_Id,
                                                 i_Is_Department => v_Is_Department);
    
      v_Parent_Changed := true;
    end if;
  
    if v_Parent_Department_Id is null and v_Is_Department = 'N' then
      Hrm_Error.Raise_027(Hrm_Util.t_Division_Kind_Team);
    end if;
  
    if v_Is_Department = 'N' and v_Manager_Id is null then
      v_Manager_Status := Hrm_Pref.c_Division_Manager_Status_Auto;
    
      v_Manager_Id := z_Mrf_Division_Managers.Take(i_Company_Id => r_Division.Company_Id, --
                      i_Filial_Id => r_Division.Filial_Id, --
                      i_Division_Id => r_Division.Parent_Id).Manager_Id;
    end if;
  
    z_Hrm_Divisions.Save_One(i_Company_Id           => r_Division.Company_Id,
                             i_Filial_Id            => r_Division.Filial_Id,
                             i_Division_Id          => r_Division.Division_Id,
                             i_Parent_Department_Id => v_Parent_Department_Id,
                             i_Is_Department        => v_Is_Department,
                             i_Manager_Status       => v_Manager_Status,
                             i_Subfilial_Id         => i_Division.Subfilial_Id);
  
    if v_Manager_Id is not null then
      Division_Manager_Save(i_Company_Id  => r_Division.Company_Id,
                            i_Filial_Id   => r_Division.Filial_Id,
                            i_Division_Id => r_Division.Division_Id,
                            i_Robot_Id    => v_Manager_Id);
    else
      Division_Manager_Delete(i_Company_Id  => r_Division.Company_Id,
                              i_Filial_Id   => r_Division.Filial_Id,
                              i_Division_Id => r_Division.Division_Id);
    end if;
  
    Update_Child_Manager(i_Company_Id     => r_Division.Company_Id,
                         i_Filial_Id      => r_Division.Filial_Id,
                         i_Division_Id    => r_Division.Division_Id,
                         i_New_Manager_Id => v_Manager_Id);
  
    Division_Schedule_Save(i_Company_Id  => r_Division.Company_Id,
                           i_Filial_Id   => r_Division.Filial_Id,
                           i_Division_Id => r_Division.Division_Id,
                           i_Schedule_Id => i_Division.Schedule_Id);
  
    if v_Kind_Changed or v_Parent_Changed then
      Hrm_Core.Update_Parent_Departments(i_Company_Id    => r_Division.Company_Id,
                                         i_Filial_Id     => r_Division.Filial_Id,
                                         i_Division_Id   => r_Division.Division_Id,
                                         i_Old_Parent_Id => case
                                                              when r_Hrm_Old.Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               r_Hrm_Old.Parent_Department_Id
                                                            end,
                                         i_New_Parent_Id => case
                                                              when v_Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               v_Parent_Department_Id
                                                            end);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt) is
  begin
    delete from Hrm_Job_Bonus_Types q
     where q.Company_Id = i_Job_Bonus_Type.Company_Id
       and q.Filial_Id = i_Job_Bonus_Type.Filial_Id
       and q.Job_Id = i_Job_Bonus_Type.Job_Id
       and q.Bonus_Type not member of i_Job_Bonus_Type.Bonus_Types;
  
    for i in 1 .. i_Job_Bonus_Type.Bonus_Types.Count
    loop
      z_Hrm_Job_Bonus_Types.Save_One(i_Company_Id => i_Job_Bonus_Type.Company_Id,
                                     i_Filial_Id  => i_Job_Bonus_Type.Filial_Id,
                                     i_Job_Id     => i_Job_Bonus_Type.Job_Id,
                                     i_Bonus_Type => i_Job_Bonus_Type.Bonus_Types(i),
                                     i_Percentage => i_Job_Bonus_Type.Percentages(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      z_Hrm_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Ids(i));
    end loop;
  
    delete from Hrm_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Hrm_Error.Raise_019(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries,
                           i_Value      => i_Value);
  end;

end Hrm_Api;
/

create or replace package Hrm_Pref is
  ----------------------------------------------------------------------------------------------------  
  type Register_Ranks_Rt is record(
    Rank_Id     number,
    Wage        number(20, 6),
    Coefficient number);
  type Register_Ranks_Nt is table of Register_Ranks_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Wage_Scale_Register_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Register_Id     number,
    Register_Date   date,
    Register_Number varchar2(50),
    Wage_Scale_Id   number,
    With_Base_Wage  varchar2(1),
    Round_Model     varchar2(5),
    Base_Wage       number(20, 6),
    Valid_From      date,
    Posted          varchar2(1),
    Note            varchar2(300 char),
    Ranks           Register_Ranks_Nt);
  ----------------------------------------------------------------------------------------------------
  type Robot_Rt is record(
    Robot                    Mrf_Robots%rowtype,
    Org_Unit_Id              number,
    Opened_Date              date,
    Closed_Date              date,
    Schedule_Id              number(20),
    Rank_Id                  number(20),
    Labor_Function_Id        number(20),
    Description              varchar2(300 char),
    Hiring_Condition         varchar2(300 char),
    Vacation_Days_Limit      number(20),
    Contractual_Wage         varchar2(1),
    Wage_Scale_Id            number(20),
    Access_Hidden_Salary     varchar2(1),
    Position_Employment_Kind varchar2(1),
    Planned_Fte              number,
    Role_Ids                 Array_Number,
    Allowed_Division_Ids     Array_Number,
    Indicators               Href_Pref.Indicator_Nt,
    Oper_Types               Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------  
  type Job_Template_Rt is record(
    Company_Id          number,
    Filial_Id           number,
    Template_Id         number,
    Division_Id         number,
    Job_Id              number,
    Rank_Id             number,
    Schedule_Id         number,
    Vacation_Days_Limit number,
    Wage_Scale_Id       number,
    Indicators          Href_Pref.Indicator_Nt,
    Oper_Types          Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------
  type Job_Bonus_Type_Rt is record(
    Company_Id  number,
    Filial_Id   number,
    Job_Id      number,
    Bonus_Types Array_Varchar2,
    Percentages Array_Number);
  ---------------------------------------------------------------------------------------------------- 
  type Division_Rt is record(
    Division      Mhr_Divisions%rowtype,
    Schedule_Id   number,
    Manager_Id    number,
    Is_Department varchar2(1),
    Subfilial_Id  number);
  ----------------------------------------------------------------------------------------------------
  -- employment type
  ----------------------------------------------------------------------------------------------------
  c_Employment_Type_Main_Job          constant varchar2(1) := 'M';
  c_Employment_Type_External_Parttime constant varchar2(1) := 'E';
  c_Employment_Type_Internal_Parttime constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- fte kind
  ----------------------------------------------------------------------------------------------------
  c_Fte_Kind_Planed   constant varchar2(1) := 'P';
  c_Fte_Kind_Booked   constant varchar2(1) := 'B';
  c_Fte_Kind_Occupied constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------  
  -- access type
  ----------------------------------------------------------------------------------------------------
  c_Access_Type_Structural constant varchar2(1) := 'S';
  c_Access_Type_Manual     constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------  
  -- bonus type
  ----------------------------------------------------------------------------------------------------
  c_Bonus_Type_Personal_Sales      constant varchar2(1) := 'P';
  c_Bonus_Type_Department_Sales    constant varchar2(1) := 'D';
  c_Bonus_Type_Successful_Delivery constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- restrict to view all salaries
  ----------------------------------------------------------------------------------------------------
  c_Pref_Restrict_To_View_All_Salaries constant varchar2(200) := 'VHR:HRM:RESTRICT_TO_VIEW_ALL_SALARIES';
  ----------------------------------------------------------------------------------------------------
  --- manager status of division 
  ----------------------------------------------------------------------------------------------------
  c_Division_Manager_Status_Manual constant varchar2(1) := 'M';
  c_Division_Manager_Status_Auto   constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Position Employment Kind
  ----------------------------------------------------------------------------------------------------
  c_Position_Employment_Contractor constant varchar2(1) := 'C';
  c_Position_Employment_Staff      constant varchar2(1) := 'S';
end Hrm_Pref;
/
create or replace package body Hrm_Pref is
end Hrm_Pref;
/

create or replace package Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ---------------------------------------------------------------------------------------------------- 
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2 := null,
    i_Round_Model     varchar2 := null,
    i_Base_Wage       number := null,
    i_Valid_From      date,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register    in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id     number,
    i_Wage        number := null,
    i_Coefficient number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                    out Hrm_Pref.Robot_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Robot_Id                 number,
    i_Name                     varchar2,
    i_Code                     varchar2,
    i_Robot_Group_Id           number,
    i_Division_Id              number,
    i_Job_Id                   number,
    i_Org_Unit_Id              number,
    i_State                    varchar2,
    i_Opened_Date              date,
    i_Closed_Date              date,
    i_Schedule_Id              number,
    i_Rank_Id                  number,
    i_Vacation_Days_Limit      number,
    i_Labor_Function_Id        number,
    i_Description              varchar2,
    i_Hiring_Condition         varchar2,
    i_Contractual_Wage         varchar2,
    i_Wage_Scale_Id            number,
    i_Access_Hidden_Salary     varchar2,
    i_Position_Employment_Kind varchar2 := Hrm_Pref.c_Position_Employment_Staff,
    i_Planned_Fte              number := 1,
    i_Role_Ids                 Array_Number := Array_Number(),
    i_Allowed_Division_Ids     Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2;
  Function Bonus_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2;
  Function t_Division_Kind_Team return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment(i_Employment_Kind varchar2) return varchar2;
  Function Position_Employments return Matrix_Varchar2;
end Hrm_Util;
/
create or replace package body Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache is
    result Hrm_Settings%rowtype;
  begin
    if not z_Hrm_Settings.Exist(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                o_Row        => result) then
      Result.Company_Id             := i_Company_Id;
      Result.Filial_Id              := i_Filial_Id;
      Result.Position_Enable        := 'N';
      Result.Position_Check         := 'N';
      Result.Position_Booking       := 'N';
      Result.Position_History       := 'N';
      Result.Position_Fixing        := 'N';
      Result.Parttime_Enable        := 'N';
      Result.Rank_Enable            := 'N';
      Result.Wage_Scale_Enable      := 'N';
      Result.Notification_Enable    := 'N';
      Result.Autogen_Staff_Number   := 'Y';
      Result.Advanced_Org_Structure := 'N';
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype is
    r_Template Hrm_Job_Templates%rowtype;
  begin
    if i_Rank_Id is not null then
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id = i_Rank_Id;
    else
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id is null;
    end if;
  
    return r_Template;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'N' then
      b.Raise_Error(t('initially, to do enabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'Y' then
      b.Raise_Error(t('initially, to do disabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2 is
    v_Name varchar2(200 char);
    result varchar2(200 char);
  begin
    v_Name := z_Mhr_Divisions.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Division_Id => i_Division_Id).Name;
  
    result := '/' || v_Name || '/(' || i_Robot_Id || ')';
  
    if i_Rank_Id is not null then
      v_Name := z_Mhr_Ranks.Load(i_Company_Id => i_Company_Id, --
                i_Filial_Id => i_Filial_Id, --
                i_Rank_Id => i_Rank_Id).Name;
    
      result := ', ' || v_Name || result;
    end if;
  
    v_Name := z_Mhr_Jobs.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Job_Id => i_Job_Id).Name;
  
    return v_Name || result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2,
    i_Round_Model     varchar2,
    i_Base_Wage       number,
    i_Valid_From      date,
    i_Note            varchar2
  ) is
  begin
    o_Register.Company_Id      := i_Company_Id;
    o_Register.Filial_Id       := i_Filial_Id;
    o_Register.Register_Id     := i_Register_Id;
    o_Register.Register_Date   := i_Register_Date;
    o_Register.Register_Number := i_Register_Number;
    o_Register.Wage_Scale_Id   := i_Wage_Scale_Id;
    o_Register.With_Base_Wage  := i_With_Base_Wage;
    o_Register.Round_Model     := i_Round_Model;
    o_Register.Base_Wage       := i_Base_Wage;
    o_Register.Valid_From      := i_Valid_From;
    o_Register.Note            := i_Note;
  
    o_Register.Ranks := Hrm_Pref.Register_Ranks_Nt();
  end;
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register    in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id     number,
    i_Wage        number,
    i_Coefficient number
  ) is
    v_Rank Hrm_Pref.Register_Ranks_Rt;
  begin
    v_Rank.Rank_Id     := i_Rank_Id;
    v_Rank.Wage        := i_Wage;
    v_Rank.Coefficient := i_Coefficient;
  
    p_Register.Ranks.Extend();
    p_Register.Ranks(p_Register.Ranks.Count) := v_Rank;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                    out Hrm_Pref.Robot_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Robot_Id                 number,
    i_Name                     varchar2,
    i_Code                     varchar2,
    i_Robot_Group_Id           number,
    i_Division_Id              number,
    i_Job_Id                   number,
    i_Org_Unit_Id              number,
    i_State                    varchar2,
    i_Opened_Date              date,
    i_Closed_Date              date,
    i_Schedule_Id              number,
    i_Rank_Id                  number,
    i_Vacation_Days_Limit      number,
    i_Labor_Function_Id        number,
    i_Description              varchar2,
    i_Hiring_Condition         varchar2,
    i_Contractual_Wage         varchar2,
    i_Wage_Scale_Id            number,
    i_Access_Hidden_Salary     varchar2,
    i_Position_Employment_Kind varchar2 := Hrm_Pref.c_Position_Employment_Staff,
    i_Planned_Fte              number := 1,
    i_Role_Ids                 Array_Number,
    i_Allowed_Division_Ids     Array_Number
  ) is
  begin
    z_Mrf_Robots.Init(p_Row            => o_Robot.Robot,
                      i_Company_Id     => i_Company_Id,
                      i_Filial_Id      => i_Filial_Id,
                      i_Robot_Id       => i_Robot_Id,
                      i_Name           => i_Name,
                      i_Code           => i_Code,
                      i_Robot_Group_Id => i_Robot_Group_Id,
                      i_Division_Id    => i_Division_Id,
                      i_Job_Id         => i_Job_Id,
                      i_State          => i_State);
  
    o_Robot.Org_Unit_Id              := i_Org_Unit_Id;
    o_Robot.Opened_Date              := i_Opened_Date;
    o_Robot.Closed_Date              := i_Closed_Date;
    o_Robot.Schedule_Id              := i_Schedule_Id;
    o_Robot.Rank_Id                  := i_Rank_Id;
    o_Robot.Vacation_Days_Limit      := i_Vacation_Days_Limit;
    o_Robot.Labor_Function_Id        := i_Labor_Function_Id;
    o_Robot.Description              := i_Description;
    o_Robot.Hiring_Condition         := i_Hiring_Condition;
    o_Robot.Contractual_Wage         := i_Contractual_Wage;
    o_Robot.Wage_Scale_Id            := i_Wage_Scale_Id;
    o_Robot.Access_Hidden_Salary     := i_Access_Hidden_Salary;
    o_Robot.Planned_Fte              := i_Planned_Fte;
    o_Robot.Position_Employment_Kind := i_Position_Employment_Kind;
    o_Robot.Allowed_Division_Ids     := i_Allowed_Division_Ids;
    o_Robot.Role_Ids                 := i_Role_Ids;
  
    o_Robot.Indicators := Href_Pref.Indicator_Nt();
    o_Robot.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Robot.Oper_Types.Extend;
    p_Robot.Oper_Types(p_Robot.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Robot.Indicators.Extend;
    p_Robot.Indicators(p_Robot.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  ) is
  begin
    o_Template.Company_Id          := i_Company_Id;
    o_Template.Filial_Id           := i_Filial_Id;
    o_Template.Template_Id         := i_Template_Id;
    o_Template.Division_Id         := i_Division_Id;
    o_Template.Job_Id              := i_Job_Id;
    o_Template.Rank_Id             := i_Rank_Id;
    o_Template.Schedule_Id         := i_Schedule_Id;
    o_Template.Vacation_Days_Limit := i_Vacation_Days_Limit;
    o_Template.Wage_Scale_Id       := i_Wage_Scale_Id;
  
    o_Template.Indicators := Href_Pref.Indicator_Nt();
    o_Template.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Template.Oper_Types.Extend;
    p_Template.Oper_Types(p_Template.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Template.Indicators.Extend;
    p_Template.Indicators(p_Template.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  ) is
  begin
    o_Job_Bonus_Type.Company_Id  := i_Company_Id;
    o_Job_Bonus_Type.Filial_Id   := i_Filial_Id;
    o_Job_Bonus_Type.Job_Id      := i_Job_Id;
    o_Job_Bonus_Type.Bonus_Types := i_Bonus_Types;
    o_Job_Bonus_Type.Percentages := i_Percentages;
  end;

  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  ) is
  begin
    o_Division.Division      := i_Division;
    o_Division.Schedule_Id   := i_Schedule_Id;
    o_Division.Manager_Id    := i_Manager_Id;
    o_Division.Is_Department := i_Is_Department;
    o_Division.Subfilial_Id  := i_Subfilial_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date is
    result Array_Date;
  begin
    select q.Valid_From
      bulk collect
      into result
      from Hrm_Wage_Scale_Registers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Wage_Scale_Id = i_Wage_Scale_Id
       and q.Valid_From between i_Begin_Date and i_End_Date
       and q.Posted = 'Y';
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number is
    result number;
  begin
    select Pd.Parent_Id
      into result
      from Mhr_Parent_Divisions Pd
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Division_Id = i_Division_Id
       and Pd.Lvl = (select min(q.Lvl)
                       from Mhr_Parent_Divisions q
                       join Hrm_Divisions p
                         on p.Company_Id = q.Company_Id
                        and p.Filial_Id = q.Filial_Id
                        and p.Division_Id = q.Parent_Id
                      where q.Company_Id = i_Company_Id
                        and q.Filial_Id = i_Filial_Id
                        and q.Division_Id = i_Division_Id
                        and p.Is_Department = 'Y');
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number is
    result number;
  begin
    select (select r.Wage
              from Hrm_Register_Ranks r
             where r.Company_Id = t.Company_Id
               and r.Filial_Id = t.Filial_Id
               and r.Register_Id = t.Register_Id
               and r.Rank_Id = i_Rank_Id)
      into result
      from Hrm_Wage_Scale_Registers t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number is
    v_Current_Date      date := Trunc(sysdate);
    v_Wage_Indicator_Id number;
  
    ----------------------------------------------------------------------------------------------------
    Function Get_Max_Wage_Scale return number is
      result number;
    begin
      select (select max(r.Wage)
                from Hrm_Register_Ranks r
               where r.Company_Id = t.Company_Id
                 and r.Filial_Id = t.Filial_Id
                 and r.Register_Id = t.Register_Id)
        into result
        from Hrm_Wage_Scale_Registers t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Wage_Scale_Id = i_Wage_Scale_Id
         and t.Valid_From <= v_Current_Date
         and t.Posted = 'Y'
       order by t.Valid_From desc
       fetch first row only;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Contractual_Wage = 'N' then
      if i_Rank_Id is null then
        return Get_Max_Wage_Scale;
      end if;
    
      return Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                   i_Filial_Id     => i_Filial_Id,
                                   i_Wage_Scale_Id => i_Wage_Scale_Id,
                                   i_Period        => v_Current_Date,
                                   i_Rank_Id       => i_Rank_Id);
    end if;
  
    v_Wage_Indicator_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage);
  
    return z_Hrm_Robot_Indicators.Take(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Robot_Id     => i_Robot_Id,
                                       i_Indicator_Id => v_Wage_Indicator_Id).Indicator_Value;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number is
    result number;
  begin
    select t.Register_Id
      into result
      from Hrm_Wage_Scale_Registers t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number is
    v_Is_Child                boolean;
    v_Structural_Division_Ids Array_Number;
    v_Allowed_Division_Ids    Array_Number := Nvl(i_Allowed_Division_Ids, Array_Number());
    result                    Array_Number := Array_Number();
  begin
    if i_Robot_Id is not null then
      select d.Division_Id
        bulk collect
        into v_Structural_Division_Ids
        from Hrm_Robot_Divisions d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Robot_Id = i_Robot_Id
         and d.Access_Type = Hrm_Pref.c_Access_Type_Structural;
    
      v_Allowed_Division_Ids := v_Allowed_Division_Ids multiset Except v_Structural_Division_Ids;
    end if;
  
    for i in 1 .. v_Allowed_Division_Ids.Count
    loop
      v_Is_Child := false;
    
      for j in 1 .. v_Allowed_Division_Ids.Count
      loop
        if z_Mhr_Parent_Divisions.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => v_Allowed_Division_Ids(i),
                                        i_Parent_Id   => v_Allowed_Division_Ids(j)) then
          v_Is_Child := true;
          exit;
        end if;
      end loop;
    
      if not v_Is_Child then
        Fazo.Push(result, v_Allowed_Division_Ids(i));
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_User_Setting varchar2(1);
  begin
    v_User_Setting := Href_Util.Access_Hidden_Salary(i_Company_Id => i_Company_Id,
                                                     i_User_Id    => i_User_Id);
    if v_User_Setting = 'Y' then
      return 'Y';
    else
      if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                              i_Job_Group_Id => i_Job_Group_Id) then
        if z_Href_Person_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Person_Id    => i_User_Id,
                                                        i_Job_Group_Id => i_Job_Group_Id) then
          return 'Y';
        else
          return 'N';
        end if;
      else
        return 'Y';
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_Robot_Setting  varchar2(1);
    v_User_Robot_Ids Array_Number;
  begin
    select q.Robot_Id
      bulk collect
      into v_User_Robot_Ids
      from Mrf_Robot_Persons q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_User_Id;
  
    for i in 1 .. v_User_Robot_Ids.Count
    loop
      v_Robot_Setting := Nvl(z_Hrm_Robots.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Robot_Id => v_User_Robot_Ids(i)).Access_Hidden_Salary,
                             'N');
    
      if v_Robot_Setting = 'Y' then
        return 'Y';
      else
        if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Id) then
          if z_Hrm_Robot_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => v_User_Robot_Ids(i),
                                                        i_Job_Group_Id => i_Job_Group_Id) then
            return 'Y';
          else
            continue;
          end if;
        else
          return 'Y';
        end if;
      end if;
    end loop;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2 is
    v_System_Setting varchar2(1);
    v_Job_Group_Id   number;
    r_Setting        Hrm_Settings%rowtype;
  begin
    v_System_Setting := Hrm_Util.Restrict_To_View_All_Salaries(i_Company_Id);
    v_Job_Group_Id   := z_Mhr_Jobs.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Job_Id => i_Job_Id).Job_Group_Id;
  
    if i_User_Id = Md_Pref.User_Admin(i_Company_Id) --
       or v_System_Setting = 'N' --
       or v_Job_Group_Id is null --
       or not z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                   i_Job_Group_Id => v_Job_Group_Id) then
      return 'Y';
    end if;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      return User_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                          i_User_Id      => i_User_Id,
                                          i_Job_Group_Id => v_Job_Group_Id);
    else
      return Robot_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_User_Id      => i_User_Id,
                                           i_Job_Group_Id => v_Job_Group_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean is
  begin
    return Access_To_Hidden_Salary_Job(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Job_Id     => i_Job_Id,
                                       i_User_Id    => i_User_Id) = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'N'
      into v_Dummy
      from Hpd_Page_Robots q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and Rownum = 1;
  
    return v_Dummy;
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number is
    v_Planned_Fte number;
  begin
    select q.Fte
      into v_Planned_Fte
      from Hrm_Robot_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
       and q.Fte > 0
       and q.Trans_Date = (select max(t.Trans_Date)
                             from Hrm_Robot_Transactions t
                            where t.Company_Id = q.Company_Id
                              and t.Filial_Id = q.Filial_Id
                              and t.Robot_Id = q.Robot_Id
                              and t.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
                              and t.Fte > 0
                              and t.Trans_Date <= i_Period)
       and Rownum = 1;
  
    return v_Planned_Fte;
  exception
    when No_Data_Found then
      return 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  -- bonus types
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type_Personal_Sales return varchar2 is
  begin
    return t('bonus_type: personal sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Department_Sales return varchar2 is
  begin
    return t('bonus_type: department sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Successful_Delivery return varchar2 is
  begin
    return t('bonus_type: successful delivery');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2 is
  begin
    return --
    case i_Bonus_Type --
    when Hrm_Pref.c_Bonus_Type_Personal_Sales then t_Bonus_Type_Personal_Sales --
    when Hrm_Pref.c_Bonus_Type_Department_Sales then t_Bonus_Type_Department_Sales --
    when Hrm_Pref.c_Bonus_Type_Successful_Delivery then t_Bonus_Type_Successful_Delivery --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Bonus_Types return Matrix_Varchar2 is
  begin
    -- todo: Owner: Sherzod; text: umcommit them
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Bonus_Type_Personal_Sales,
                                          Hrm_Pref.c_Bonus_Type_Department_Sales
                                          /*, Hrm_Pref.c_Bonus_Type_Successful_Delivery*/),
                           Array_Varchar2(t_Bonus_Type_Personal_Sales,
                                          t_Bonus_Type_Department_Sales
                                          /*, t_Bonus_Type_Successful_Delivery*/));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2 is
  begin
    return t('division_kind:department');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Team return varchar2 is
  begin
    return t('division_kind:team');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2 is
  begin
    return case i_Is_Division --
    when 'Y' then t_Division_Kind_Department --
    when 'N' then t_Division_Kind_Team --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Position Employment Kind
  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment_Contractor return varchar2 is
  begin
    return t('position_employment:contractor');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment_Staff return varchar2 is
  begin
    return t('position_employment:staff');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment(i_Employment_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Employment_Kind --
    when Hrm_Pref.c_Position_Employment_Contractor then t_Position_Employment_Contractor --
    when Hrm_Pref.c_Position_Employment_Staff then t_Position_Employment_Staff --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Position_Employments return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Position_Employment_Staff,
                                          Hrm_Pref.c_Position_Employment_Contractor),
                           Array_Varchar2(t_Position_Employment_Staff,
                                          t_Position_Employment_Contractor));
  end;

end Hrm_Util;
/

create or replace package Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Add(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Request_Save(i_Request Htt_Requests%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
end Htt_Api;
/
create or replace package body Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- notifications
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  ) is
    r_Person      Mr_Natural_Persons%rowtype;
    r_Request     Htt_Requests%rowtype;
    r_Staff       Href_Staffs%rowtype;
    v_User_Id     number;
    v_Manager_Id  number;
    v_Employee_Id number;
    result        Hashmap := Hashmap();
  begin
    r_Request    := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Request_Id => i_Request_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id,
                                       i_Filial_Id  => r_Request.Filial_Id,
                                       i_Staff_Id   => r_Request.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('request_id', r_Request.Request_Id);
    Result.Put('status', r_Request.Status);
    Result.Put('status_name', Htt_Util.t_Request_Status(r_Request.Status));
    Result.Put('request_kind_name',
               z_Htt_Request_Kinds.Load(i_Company_Id => r_Request.Company_Id, i_Request_Kind_Id => r_Request.Request_Kind_Id).Name);
    Result.Put('request_type', r_Request.Request_Type);
    Result.Put('begin_time', to_char(r_Request.Begin_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('end_time', to_char(r_Request.End_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('employee_name', r_Person.Name);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id, i_Filial_Id => r_Request.Filial_Id, i_Staff_Id => r_Request.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Request_Notification_Title(i_Company_Id      => i_Company_Id,
                                                                                      i_User_Id         => v_Employee_Id,
                                                                                      i_Notify_Type     => i_Notify_Type,
                                                                                      t_Request_Kind_Id => r_Request.Request_Kind_Id),
                                i_Uri        => Htt_Pref.c_Form_Request_View,
                                i_Uri_Param  => Fazo.Zip_Map('request_id', r_Request.Request_Id),
                                i_User_Id    => r_Request.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  ) is
    r_Person       Mr_Natural_Persons%rowtype;
    r_Change       Htt_Plan_Changes%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_User_Id      number;
    v_Manager_Id   number;
    v_Change_Date  date;
    v_Swapped_Date date;
    v_Employee_Id  number;
    result         Hashmap := Hashmap();
  begin
    r_Change     := z_Htt_Plan_Changes.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Change_Id  => i_Change_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id,
                                       i_Filial_Id  => r_Change.Filial_Id,
                                       i_Staff_Id   => r_Change.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    select q.Change_Date, q.Swapped_Date
      into v_Change_Date, v_Swapped_Date
      from Htt_Change_Days q
     where q.Company_Id = r_Change.Company_Id
       and q.Filial_Id = r_Change.Filial_Id
       and q.Change_Id = r_Change.Change_Id
       and Rownum = 1;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('change_id', r_Change.Change_Id);
    Result.Put('change_kind', r_Change.Change_Kind);
    Result.Put('change_kind_name', Htt_Util.t_Change_Kind(r_Change.Change_Kind));
    Result.Put('status', r_Change.Status);
    Result.Put('status_name', Htt_Util.t_Change_Status(r_Change.Status));
    Result.Put('employee_name', r_Person.Name);
    Result.Put('change_date', v_Change_Date);
    Result.Put('swapped_date', v_Swapped_Date);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id, i_Filial_Id => r_Change.Filial_Id, i_Staff_Id => r_Change.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Change_Notification_Title(i_Company_Id  => i_Company_Id,
                                                                                     i_User_Id     => v_Employee_Id,
                                                                                     i_Notify_Type => i_Notify_Type,
                                                                                     i_Change_Kind => r_Change.Change_Kind),
                                i_Uri        => Htt_Pref.c_Form_Change_View,
                                i_Uri_Param  => Fazo.Zip_Map('change_id', r_Change.Change_Id),
                                i_User_Id    => r_Change.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt) is
    r_Calendar           Htt_Calendars%rowtype;
    r_Week_Day           Htt_Calendar_Week_Days%rowtype;
    r_Old_Day            Htt_Calendar_Days%rowtype;
    r_New_Day            Htt_Calendar_Days%rowtype;
    r_Rest_Day           Htt_Calendar_Rest_Days%rowtype;
    v_Dates              Array_Date := Array_Date();
    v_Changed_Dates      Array_Date := Array_Date();
    v_Deleted_Dates      Array_Date;
    v_Swap_Changed_Dates Array_Date := Array_Date();
    v_Swap_Deleted_Dates Array_Date;
  begin
    if not z_Htt_Calendars.Exist_Lock(i_Company_Id  => i_Calendar.Company_Id,
                                      i_Filial_Id   => i_Calendar.Filial_Id,
                                      i_Calendar_Id => i_Calendar.Calendar_Id,
                                      o_Row         => r_Calendar) then
      r_Calendar.Company_Id  := i_Calendar.Company_Id;
      r_Calendar.Filial_Id   := i_Calendar.Filial_Id;
      r_Calendar.Calendar_Id := i_Calendar.Calendar_Id;
    end if;
  
    r_Calendar.Name          := i_Calendar.Name;
    r_Calendar.Code          := i_Calendar.Code;
    r_Calendar.Monthly_Limit := i_Calendar.Monthly_Limit;
    r_Calendar.Daily_Limit   := i_Calendar.Daily_Limit;
  
    z_Htt_Calendars.Save_Row(r_Calendar);
  
    r_New_Day.Company_Id  := i_Calendar.Company_Id;
    r_New_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_New_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Days.Count
    loop
      r_Old_Day               := null;
      r_New_Day.Calendar_Date := i_Calendar.Days(i).Calendar_Date;
      r_New_Day.Name          := i_Calendar.Days(i).Name;
      r_New_Day.Day_Kind      := i_Calendar.Days(i).Day_Kind;
      r_New_Day.Swapped_Date  := i_Calendar.Days(i).Swapped_Date;
    
      if not z_Htt_Calendar_Days.Exist_Lock(i_Company_Id    => r_New_Day.Company_Id,
                                            i_Filial_Id     => r_New_Day.Filial_Id,
                                            i_Calendar_Id   => r_New_Day.Calendar_Id,
                                            i_Calendar_Date => r_New_Day.Calendar_Date,
                                            o_Row           => r_Old_Day) or
         r_New_Day.Day_Kind <> r_Old_Day.Day_Kind --
         or r_New_Day.Swapped_Date <> r_Old_Day.Swapped_Date then
        Fazo.Push(v_Changed_Dates, r_New_Day.Calendar_Date);
      
        if r_Old_Day.Swapped_Date is not null then
          Fazo.Push(v_Swap_Changed_Dates, r_Old_Day.Swapped_Date);
        end if;
      end if;
    
      if Extract(year from r_New_Day.Calendar_Date) <> i_Calendar.Year then
        Htt_Error.Raise_018(i_Chosen_Year   => i_Calendar.Year,
                            i_Calendar_Date => r_New_Day.Calendar_Date);
      end if;
    
      if r_New_Day.Calendar_Date member of v_Dates then
        Htt_Error.Raise_019(r_New_Day.Calendar_Date);
      end if;
    
      z_Htt_Calendar_Days.Save_Row(r_New_Day);
    
      Fazo.Push(v_Dates, r_New_Day.Calendar_Date);
    end loop;
  
    r_Week_Day.Company_Id  := i_Calendar.Company_Id;
    r_Week_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_Week_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Week_Days.Count
    loop
      r_Week_Day.Order_No        := i_Calendar.Week_Days(i).Order_No;
      r_Week_Day.Plan_Time       := i_Calendar.Week_Days(i).Plan_Time;
      r_Week_Day.Preholiday_Time := i_Calendar.Week_Days(i).Preholiday_Hour;
      r_Week_Day.Preweekend_Time := i_Calendar.Week_Days(i).Preweekend_Hour;
    
      z_Htt_Calendar_Week_Days.Save_Row(r_Week_Day);
    end loop;
  
    delete Htt_Calendar_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id
       and Extract(year from q.Calendar_Date) = i_Calendar.Year
       and q.Calendar_Date not in (select *
                                     from table(v_Dates))
    returning q.Calendar_Date, Nvl(q.Swapped_Date, q.Calendar_Date) bulk collect into v_Deleted_Dates, v_Swap_Deleted_Dates;
  
    for i in 1 .. v_Changed_Dates.Count
    loop
      r_New_Day := z_Htt_Calendar_Days.Lock_Load(i_Company_Id    => r_New_Day.Company_Id,
                                                 i_Filial_Id     => r_New_Day.Filial_Id,
                                                 i_Calendar_Id   => r_New_Day.Calendar_Id,
                                                 i_Calendar_Date => v_Changed_Dates(i));
      begin
        select q.*
          into r_Old_Day
          from Htt_Calendar_Days q
         where q.Company_Id = r_New_Day.Company_Id
           and q.Filial_Id = r_New_Day.Filial_Id
           and q.Calendar_Id = r_New_Day.Calendar_Id
           and (q.Calendar_Date = r_New_Day.Swapped_Date --
               or q.Calendar_Date <> r_New_Day.Calendar_Date and
               q.Swapped_Date = r_New_Day.Swapped_Date or q.Swapped_Date = r_New_Day.Calendar_Date)
           and Rownum = 1;
      
        if r_New_Day.Calendar_Date = r_Old_Day.Calendar_Date or
           r_New_Day.Calendar_Date = r_Old_Day.Swapped_Date then
          Htt_Error.Raise_020(r_New_Day.Calendar_Date);
        else
          Htt_Error.Raise_020(r_New_Day.Swapped_Date);
        end if;
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    delete Htt_Calendar_Rest_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Rest_Days.Count
    loop
      r_Rest_Day.Company_Id  := i_Calendar.Company_Id;
      r_Rest_Day.Filial_Id   := i_Calendar.Filial_Id;
      r_Rest_Day.Calendar_Id := i_Calendar.Calendar_Id;
      r_Rest_Day.Week_Day_No := i_Calendar.Rest_Days(i);
    
      z_Htt_Calendar_Rest_Days.Insert_Row(r_Rest_Day);
    end loop;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union distinct v_Swap_Deleted_Dates;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union v_Swap_Changed_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Changed_Dates);
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Deleted_Dates);
  
    Htt_Core.Notify_Calendar_Day_Change(i_Company_Id  => i_Calendar.Company_Id,
                                        i_Filial_Id   => i_Calendar.Filial_Id,
                                        i_Calendar_Id => i_Calendar.Calendar_Id,
                                        i_Dates       => v_Changed_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  ) is
    r_Calendar Htt_Calendars%rowtype;
  begin
    r_Calendar := z_Htt_Calendars.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Pcode is not null then
      Htt_Error.Raise_021(i_Calendar_Id);
    end if;
  
    z_Htt_Calendars.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Calendar_Id => i_Calendar_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt) is
    r_Schedule                Htt_Schedules%rowtype;
    r_Day                     Htt_Schedule_Origin_Days%rowtype;
    r_Pattern                 Htt_Schedule_Patterns%rowtype;
    r_Pattern_Day             Htt_Schedule_Pattern_Days%rowtype;
    v_Pattern_Day             Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark                    Htt_Pref.Mark_Rt;
    v_Marks                   Htt_Pref.Mark_Nt;
    v_Marks_Day               Htt_Pref.Schedule_Day_Marks_Rt;
    v_Schedule_Days           Htt_Pref.Schedule_Day_Nt := Htt_Pref.Schedule_Day_Nt();
    v_Dates                   Array_Date := Array_Date();
    v_Calendar_Dates          Array_Date := Array_Date();
    v_Mark_Dates              Array_Date := Array_Date();
    v_Old_Calendar_Id         number;
    v_Shift_Changed           boolean := false;
    v_Borders_Changed         boolean := false;
    v_Allowed_Late_Changed    boolean := false;
    v_Allowed_Early_Changed   boolean := false;
    v_Begin_Late_Changed      boolean := false;
    v_End_Early_Changed       boolean := false;
    v_Calendar_Changed        varchar2(1) := 'N';
    v_Holidays_Changed        varchar2(1) := 'N';
    v_Additional_Rest_Changes varchar2(1) := 'N';
    v_Nonworking_Changed      varchar2(1) := 'N';
    v_Schedule_Attached       varchar2(1) := 'N';
    v_Schedule_Kind           varchar2(1) := i_Schedule.Schedule_Kind;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Schedule.Company_Id,
                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                  o_Row         => r_Schedule) then
      v_Schedule_Kind := r_Schedule.Schedule_Kind;
    
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_101(r_Schedule.Name);
      end if;
    
      begin
        select 'Y'
          into v_Schedule_Attached
          from Htt_Timesheets t
         where t.Company_Id = i_Schedule.Company_Id
           and t.Filial_Id = i_Schedule.Filial_Id
           and t.Schedule_Id = i_Schedule.Schedule_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Schedule_Attached := 'N';
      end;
    
      v_Shift_Changed         := r_Schedule.Shift <> i_Schedule.Shift;
      v_Borders_Changed       := (r_Schedule.Input_Acceptance <> i_Schedule.Input_Acceptance or
                                 r_Schedule.Output_Acceptance <> i_Schedule.Output_Acceptance);
      v_Allowed_Late_Changed  := r_Schedule.Allowed_Late_Time <> i_Schedule.Allowed_Late_Time;
      v_Allowed_Early_Changed := r_Schedule.Allowed_Early_Time <> i_Schedule.Allowed_Early_Time;
      v_Begin_Late_Changed    := r_Schedule.Begin_Late_Time <> i_Schedule.Begin_Late_Time;
      v_End_Early_Changed     := r_Schedule.End_Early_Time <> i_Schedule.End_Early_Time;
    
      if v_Shift_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_022;
      end if;
    
      if v_Borders_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_023;
      end if;
    
      if v_Allowed_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_113;
      end if;
    
      if v_Allowed_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_114;
      end if;
    
      if v_Begin_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_115;
      end if;
    
      if v_End_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_116;
      end if;
    
      if r_Schedule.Track_Duration <> i_Schedule.Track_Duration and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_024;
      end if;
    
      if (r_Schedule.Count_Late <> i_Schedule.Count_Late or
         r_Schedule.Count_Early <> i_Schedule.Count_Early or
         r_Schedule.Count_Lack <> i_Schedule.Count_Lack or
         r_Schedule.Count_Free <> i_Schedule.Count_Free or
         Nvl(r_Schedule.Gps_Turnout_Enabled, 'N') <> Nvl(i_Schedule.Gps_Turnout_Enabled, 'N') or
         Nvl(r_Schedule.Gps_Use_Location, 'N') <> Nvl(i_Schedule.Gps_Use_Location, 'N') or
         Nvl(r_Schedule.Gps_Max_Interval, 0) <> Nvl(i_Schedule.Gps_Max_Interval, 0)) and
         v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_025;
      end if;
    
      v_Old_Calendar_Id := r_Schedule.Calendar_Id;
    
      if not Fazo.Equal(v_Old_Calendar_Id, i_Schedule.Calendar_Id) then
        v_Calendar_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Holidays <> i_Schedule.Take_Holidays then
        v_Holidays_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or
         v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Additional_Rest_Days <> i_Schedule.Take_Additional_Rest_Days then
        v_Additional_Rest_Changes := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Nonworking <> i_Schedule.Take_Nonworking then
        v_Nonworking_Changed := 'Y';
      end if;
    else
      r_Schedule.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Schedules,
                                                i_Id    => i_Schedule.Schedule_Id);
    end if;
  
    r_Schedule.Company_Id                := i_Schedule.Company_Id;
    r_Schedule.Filial_Id                 := i_Schedule.Filial_Id;
    r_Schedule.Schedule_Id               := i_Schedule.Schedule_Id;
    r_Schedule.Name                      := i_Schedule.Name;
    r_Schedule.Schedule_Kind             := v_Schedule_Kind;
    r_Schedule.Shift                     := i_Schedule.Shift;
    r_Schedule.Input_Acceptance          := i_Schedule.Input_Acceptance;
    r_Schedule.Output_Acceptance         := i_Schedule.Output_Acceptance;
    r_Schedule.Track_Duration            := i_Schedule.Track_Duration;
    r_Schedule.Count_Late                := i_Schedule.Count_Late;
    r_Schedule.Count_Early               := i_Schedule.Count_Early;
    r_Schedule.Count_Lack                := i_Schedule.Count_Lack;
    r_Schedule.Count_Free                := i_Schedule.Count_Free;
    r_Schedule.Allowed_Late_Time         := i_Schedule.Allowed_Late_Time;
    r_Schedule.Allowed_Early_Time        := i_Schedule.Allowed_Early_Time;
    r_Schedule.Begin_Late_Time           := i_Schedule.Begin_Late_Time;
    r_Schedule.End_Early_Time            := i_Schedule.End_Early_Time;
    r_Schedule.Calendar_Id               := i_Schedule.Calendar_Id;
    r_Schedule.Take_Holidays             := i_Schedule.Take_Holidays;
    r_Schedule.Take_Nonworking           := i_Schedule.Take_Nonworking;
    r_Schedule.Take_Additional_Rest_Days := i_Schedule.Take_Additional_Rest_Days;
    r_Schedule.Gps_Turnout_Enabled       := i_Schedule.Gps_Turnout_Enabled;
    r_Schedule.Gps_Use_Location          := i_Schedule.Gps_Use_Location;
    r_Schedule.Gps_Max_Interval          := i_Schedule.Gps_Max_Interval;
    r_Schedule.State                     := i_Schedule.State;
    r_Schedule.Code                      := i_Schedule.Code;
  
    if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      if r_Schedule.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
        Htt_Error.Raise_108;
      end if;
    
      if i_Schedule.Advanced_Setting = 'Y' then
        Htt_Error.Raise_117;
      end if;
    
      r_Schedule.Shift             := 0;
      r_Schedule.Input_Acceptance  := r_Schedule.Track_Duration;
      r_Schedule.Output_Acceptance := r_Schedule.Track_Duration;
    
      r_Schedule.Count_Late  := 'N';
      r_Schedule.Count_Early := 'N';
      r_Schedule.Count_Lack  := 'N';
      r_Schedule.Count_Free  := 'N';
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    elsif r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      r_Schedule.Shift             := null;
      r_Schedule.Input_Acceptance  := null;
      r_Schedule.Output_Acceptance := null;
      r_Schedule.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    end if;
  
    if r_Schedule.Gps_Turnout_Enabled = 'N' then
      r_Schedule.Gps_Use_Location := 'N';
      r_Schedule.Gps_Max_Interval := null;
    end if;
  
    z_Htt_Schedules.Save_Row(r_Schedule);
  
    if (v_Shift_Changed or v_Borders_Changed or v_Allowed_Late_Changed or v_Allowed_Early_Changed or
       v_Begin_Late_Changed or v_End_Early_Changed) and v_Schedule_Attached = 'N' then
      v_Schedule_Days := i_Schedule.Days;
    else
      select Td.Schedule_Date,
             Td.Day_Kind,
             Td.Begin_Time,
             Td.End_Time,
             Decode(Td.Day_Kind, Htt_Pref.c_Day_Kind_Work, Td.Break_Enabled, null),
             Td.Break_Begin_Time,
             Td.Break_End_Time,
             Td.Plan_Time
        bulk collect
        into v_Schedule_Days
        from table(i_Schedule.Days) Td
      minus
      select Od.Schedule_Date,
             Od.Day_Kind,
             (Od.Begin_Time - Trunc(Od.Begin_Time)) * 1440,
             (Od.End_Time - Trunc(Od.End_Time)) * 1440,
             Od.Break_Enabled,
             (Od.Break_Begin_Time - Trunc(Od.Break_Begin_Time)) * 1440,
             (Od.Break_End_Time - Trunc(Od.Break_End_Time)) * 1440,
             Od.Plan_Time
        from Htt_Schedule_Origin_Days Od
       where Od.Company_Id = i_Schedule.Company_Id
         and Od.Filial_Id = i_Schedule.Filial_Id
         and Od.Schedule_Id = i_Schedule.Schedule_Id
         and Extract(year from Od.Schedule_Date) = i_Schedule.Year;
    end if;
  
    for i in 1 .. v_Schedule_Days.Count
    loop
      r_Day := null;
    
      if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        v_Schedule_Days(i).Begin_Time := 0;
        v_Schedule_Days(i).End_Time := 0;
        v_Schedule_Days(i).Break_Enabled := 'N';
      end if;
    
      r_Day.Company_Id    := i_Schedule.Company_Id;
      r_Day.Filial_Id     := i_Schedule.Filial_Id;
      r_Day.Schedule_Id   := i_Schedule.Schedule_Id;
      r_Day.Schedule_Date := v_Schedule_Days(i).Schedule_Date;
      r_Day.Day_Kind      := v_Schedule_Days(i).Day_Kind;
      r_Day.Break_Enabled := v_Schedule_Days(i).Break_Enabled;
    
      if Extract(year from r_Day.Schedule_Date) <> i_Schedule.Year then
        Htt_Error.Raise_026(i_Chosen_Year   => i_Schedule.Year,
                            i_Schedule_Date => r_Day.Schedule_Date);
      end if;
    
      if v_Schedule_Days(i).Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Day.Begin_Time := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).Begin_Time, 'minute');
        r_Day.End_Time   := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).End_Time, 'minute');
      
        if r_Day.End_Time <= r_Day.Begin_Time then
          r_Day.End_Time := r_Day.End_Time + 1;
        end if;
      
        if v_Schedule_Days(i).Break_Enabled = 'Y' then
          r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_Begin_Time, 'minute');
          r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_End_Time, 'minute');
        
          if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
            r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
          end if;
        
          if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
            r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
          end if;
        end if;
      
        r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                   i_Begin_Time       => r_Day.Begin_Time,
                                                   i_End_Time         => r_Day.End_Time,
                                                   i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                   i_Break_End_Time   => r_Day.Break_End_Time);
      
        r_Day.Plan_Time := v_Schedule_Days(i).Plan_Time;
      else
        r_Day.Full_Time     := 0;
        r_Day.Plan_Time     := 0;
        r_Day.Break_Enabled := null;
      end if;
    
      r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Schedule.Shift, 'minute');
      r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
      r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                Numtodsinterval(r_Schedule.Input_Acceptance, 'minute');
      r_Day.Output_Border    := r_Day.Shift_End_Time +
                                Numtodsinterval(r_Schedule.Output_Acceptance, 'minute');
    
      z_Htt_Schedule_Origin_Days.Save_Row(r_Day);
    
      Fazo.Push(v_Dates, r_Day.Schedule_Date);
    end loop;
  
    r_Pattern.Company_Id     := i_Schedule.Company_Id;
    r_Pattern.Filial_Id      := i_Schedule.Filial_Id;
    r_Pattern.Schedule_Id    := i_Schedule.Schedule_Id;
    r_Pattern.Schedule_Kind  := i_Schedule.Pattern.Pattern_Kind;
    r_Pattern.All_Days_Equal := i_Schedule.Pattern.All_Days_Equal;
    r_Pattern.Count_Days     := i_Schedule.Pattern.Count_Days;
    r_Pattern.Begin_Date     := i_Schedule.Pattern.Begin_Date;
    r_Pattern.End_Date       := i_Schedule.Pattern.End_Date;
  
    z_Htt_Schedule_Patterns.Save_Row(r_Pattern);
  
    delete Htt_Schedule_Pattern_Days t
     where t.Company_Id = i_Schedule.Company_Id
       and t.Filial_Id = i_Schedule.Filial_Id
       and t.Schedule_Id = i_Schedule.Schedule_Id;
  
    for i in 1 .. i_Schedule.Pattern.Pattern_Day.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule.Pattern.Pattern_Day(i);
    
      r_Pattern_Day.Company_Id  := i_Schedule.Company_Id;
      r_Pattern_Day.Filial_Id   := i_Schedule.Filial_Id;
      r_Pattern_Day.Schedule_Id := i_Schedule.Schedule_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          r_Pattern_Day.Begin_Time    := 0;
          r_Pattern_Day.End_Time      := 0;
          r_Pattern_Day.Break_Enabled := 'N';
        end if;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Pattern_Days.Save_Row(r_Pattern_Day);
    
      if v_Pattern_Day.End_Time < v_Pattern_Day.Begin_Time then
        v_Pattern_Day.End_Time := v_Pattern_Day.End_Time + 1440;
      end if;
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
      
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
          v_Mark.End_Time   := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_027(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_028(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Pattern_Day.Begin_Time,
                                                                                               1440),
                                                                         i_Show_Minutes => true,
                                                                         i_Show_Words   => false),
                              i_End_Time_Text   => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Pattern_Day.End_Time,
                                                                                               1440),
                                                                         i_Show_Minutes => true,
                                                                         i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_029(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Pattern_Marks.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                i_Filial_Id   => i_Schedule.Filial_Id,
                                                i_Schedule_Id => i_Schedule.Schedule_Id,
                                                i_Day_No      => v_Pattern_Day.Day_No,
                                                i_Begin_Time  => v_Mark.Begin_Time,
                                                i_End_Time    => v_Mark.End_Time);
      end loop;
    end loop;
  
    for i in 1 .. i_Schedule.Marks.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Marks_Day := i_Schedule.Marks(i);
    
      -- symmetric differrence
      with Old_Marks as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time
          from Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date),
      New_Marks as
       (select m.Begin_Time, m.End_Time
          from table(v_Marks_Day.Marks) m)
      select Begin_Time, End_Time
        bulk collect
        into v_Marks
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              union
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm)
      minus
      select Begin_Time, End_Time
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              intersect
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm);
    
      if v_Marks.Count > 0 then
        delete Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date;
      
        if v_Marks_Day.End_Time < v_Marks_Day.Begin_Time then
          v_Marks_Day.End_Time := v_Marks_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Marks_Day.Marks.Count
        loop
          v_Mark := v_Marks_Day.Marks(j);
        
          if v_Mark.Begin_Time < v_Marks_Day.Begin_Time then
            v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
            v_Mark.End_Time   := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.End_Time < v_Mark.Begin_Time then
            v_Mark.End_Time := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.Begin_Time = v_Mark.End_Time then
            Htt_Error.Raise_030(v_Marks_Day.Schedule_Date);
          end if;
        
          if v_Mark.End_Time > v_Marks_Day.End_Time then
            Htt_Error.Raise_031(i_Schedule_Date   => v_Marks_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Marks_Day.Begin_Time,
                                                                                                 1440),
                                                                           i_Show_Minutes => true,
                                                                           i_Show_Words   => false),
                                i_End_Time_Text   => Htt_Util.To_Time_Text(i_Minutes      => mod(v_Marks_Day.End_Time,
                                                                                                 1440),
                                                                           i_Show_Minutes => true,
                                                                           i_Show_Words   => false));
          end if;
        
          z_Htt_Schedule_Origin_Day_Marks.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                     i_Filial_Id     => i_Schedule.Filial_Id,
                                                     i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                     i_Schedule_Date => v_Marks_Day.Schedule_Date,
                                                     i_Begin_Time    => v_Mark.Begin_Time,
                                                     i_End_Time      => v_Mark.End_Time);
        end loop;
      
        Fazo.Push(v_Mark_Dates, v_Marks_Day.Schedule_Date);
      end if;
    end loop;
  
    if Md_Pref.c_Migr_Company_Id != i_Schedule.Company_Id then
      Htt_Util.Assert_Schedule_Marks(i_Company_Id  => i_Schedule.Company_Id,
                                     i_Filial_Id   => i_Schedule.Filial_Id,
                                     i_Schedule_Id => i_Schedule.Schedule_Id,
                                     i_Dates       => v_Mark_Dates);
    end if;
  
    select Cd.Calendar_Date
      bulk collect
      into v_Calendar_Dates
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Schedule.Company_Id
       and Cd.Filial_Id = i_Schedule.Filial_Id
       and Cd.Calendar_Id in (v_Old_Calendar_Id, i_Schedule.Calendar_Id)
       and (Cd.Day_Kind = Htt_Pref.c_Day_Kind_Swapped and v_Calendar_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Holiday and v_Holidays_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest and v_Additional_Rest_Changes = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking and v_Nonworking_Changed = 'Y');
  
    v_Dates := v_Dates multiset union v_Calendar_Dates;
    v_Dates := v_Dates multiset union distinct v_Mark_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Schedule.Company_Id,
                                 i_Filial_Id   => i_Schedule.Filial_Id,
                                 i_Schedule_Id => i_Schedule.Schedule_Id,
                                 i_Year        => i_Schedule.Year,
                                 i_Dates       => v_Dates);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => i_Schedule.Company_Id,
                                        i_Filial_Id   => i_Schedule.Filial_Id,
                                        i_Schedule_Id => i_Schedule.Schedule_Id,
                                        i_Calendar_Id => i_Schedule.Calendar_Id,
                                        i_Year_Begin  => to_date('01.01.' || i_Schedule.Year,
                                                                 'DD.MM.YYYY'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  o_Row         => r_Schedule) then
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_102(r_Schedule.Name);
      end if;
    
      z_Htt_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Schedule_Id => i_Schedule_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt) is
    r_Schedule_Template Htt_Schedule_Templates%rowtype;
    r_Pattern_Day       Htt_Schedule_Template_Days%rowtype;
    v_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark              Htt_Pref.Mark_Rt;
    v_Mark_Day_Numbers  Array_Number := Array_Number();
  begin
    r_Schedule_Template.Template_Id               := i_Schedule_Template.Template_Id;
    r_Schedule_Template.Name                      := i_Schedule_Template.Name;
    r_Schedule_Template.Shift                     := i_Schedule_Template.Shift;
    r_Schedule_Template.Description               := i_Schedule_Template.Description;
    r_Schedule_Template.Schedule_Kind             := i_Schedule_Template.Schedule_Kind;
    r_Schedule_Template.All_Days_Equal            := i_Schedule_Template.All_Days_Equal;
    r_Schedule_Template.Count_Days                := i_Schedule_Template.Count_Days;
    r_Schedule_Template.Input_Acceptance          := i_Schedule_Template.Input_Acceptance;
    r_Schedule_Template.Output_Acceptance         := i_Schedule_Template.Output_Acceptance;
    r_Schedule_Template.Track_Duration            := i_Schedule_Template.Track_Duration;
    r_Schedule_Template.Count_Late                := i_Schedule_Template.Count_Late;
    r_Schedule_Template.Count_Early               := i_Schedule_Template.Count_Early;
    r_Schedule_Template.Count_Lack                := i_Schedule_Template.Count_Lack;
    r_Schedule_Template.Take_Holidays             := i_Schedule_Template.Take_Holidays;
    r_Schedule_Template.Take_Nonworking           := i_Schedule_Template.Take_Nonworking;
    r_Schedule_Template.Take_Additional_Rest_Days := i_Schedule_Template.Take_Additional_Rest_Days;
    r_Schedule_Template.Order_No                  := i_Schedule_Template.Order_No;
    r_Schedule_Template.State                     := i_Schedule_Template.State;
    r_Schedule_Template.Code                      := i_Schedule_Template.Code;
  
    z_Htt_Schedule_Templates.Save_Row(r_Schedule_Template);
  
    for i in 1 .. i_Schedule_Template.Pattern_Days.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule_Template.Pattern_Days(i);
    
      r_Pattern_Day.Template_Id := i_Schedule_Template.Template_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Template_Days.Save_Row(r_Pattern_Day);
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < i_Schedule_Template.Shift then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_032(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > i_Schedule_Template.Shift + 1440 then
          Htt_Error.Raise_033(i_Day_No     => v_Pattern_Day.Day_No,
                              i_Shift_Text => Htt_Util.To_Time_Text(i_Minutes      => i_Schedule_Template.Shift,
                                                                    i_Show_Minutes => true,
                                                                    i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_034(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Template_Marks.Save_One(i_Template_Id => i_Schedule_Template.Template_Id,
                                               i_Day_No      => v_Pattern_Day.Day_No,
                                               i_Begin_Time  => v_Mark.Begin_Time,
                                               i_End_Time    => v_Mark.End_Time);
      
        Fazo.Push(v_Mark_Day_Numbers, v_Pattern_Day.Day_No);
      end loop;
    end loop;
  
    Htt_Util.Assert_Schedule_Template_Marks(i_Template_Id => i_Schedule_Template.Template_Id,
                                            i_Day_Numbers => v_Mark_Day_Numbers);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number) is
  begin
    z_Htt_Schedule_Templates.Delete_One(i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype) is
    r_Time_Kind   Htt_Time_Kinds%rowtype;
    r_Parent      Htt_Time_Kinds%rowtype;
    v_Pcode       Htt_Time_Kinds.Pcode%type;
    v_Requestable Htt_Time_Kinds.Requestable%type := 'Y';
  begin
    if z_Htt_Time_Kinds.Exist_Lock(i_Company_Id   => i_Time_Kind.Company_Id,
                                   i_Time_Kind_Id => i_Time_Kind.Time_Kind_Id,
                                   o_Row          => r_Time_Kind) then
    
      if r_Time_Kind.Parent_Id <> i_Time_Kind.Parent_Id or
         (r_Time_Kind.Parent_Id is not null and i_Time_Kind.Parent_Id is null) then
        Htt_Error.Raise_035(z_Htt_Time_Kinds.Load(i_Company_Id => r_Time_Kind.Company_Id, --
                            i_Time_Kind_Id => r_Time_Kind.Parent_Id).Name);
      end if;
    
      v_Pcode       := r_Time_Kind.Pcode;
      v_Requestable := r_Time_Kind.Requestable;
    
      if v_Pcode is not null then
        if i_Time_Kind.Parent_Id is not null and r_Time_Kind.Parent_Id is null then
          Htt_Error.Raise_036;
        end if;
      
        if r_Time_Kind.Plan_Load <> i_Time_Kind.Plan_Load then
          Htt_Error.Raise_037(Htt_Util.t_Plan_Load(r_Time_Kind.Plan_Load));
        end if;
      
        if r_Time_Kind.Requestable <> i_Time_Kind.Requestable then
          Htt_Error.Raise_038;
        end if;
      end if;
    end if;
  
    if v_Pcode is null then
      if i_Time_Kind.Parent_Id is null then
        Htt_Error.Raise_039;
      end if;
    
      if i_Time_Kind.Requestable = 'N' then
        Htt_Error.Raise_040;
      end if;
    
      r_Parent := z_Htt_Time_Kinds.Take(i_Company_Id   => i_Time_Kind.Company_Id,
                                        i_Time_Kind_Id => i_Time_Kind.Parent_Id);
    
      if r_Parent.Pcode is null then
        Htt_Error.Raise_041;
      end if;
    
      if r_Parent.Parent_Id is not null then
        Htt_Error.Raise_042;
      end if;
    end if;
  
    if i_Time_Kind.Plan_Load <> r_Parent.Plan_Load then
      Htt_Error.Raise_043(Htt_Util.t_Plan_Load(r_Parent.Plan_Load));
    end if;
  
    r_Time_Kind             := i_Time_Kind;
    r_Time_Kind.Pcode       := v_Pcode;
    r_Time_Kind.Requestable := v_Requestable;
  
    z_Htt_Time_Kinds.Save_Row(r_Time_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  ) is
    r_Time_Kind Htt_Time_Kinds%rowtype;
  begin
    r_Time_Kind := z_Htt_Time_Kinds.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Time_Kind_Id => i_Time_Kind_Id);
  
    if r_Time_Kind.Pcode is not null then
      Htt_Error.Raise_044(i_Time_Kind_Id);
    end if;
  
    z_Htt_Time_Kinds.Delete_One(i_Company_Id   => i_Company_Id, --
                                i_Time_Kind_Id => i_Time_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt) is
    r_Person_Old Htt_Persons%rowtype;
    r_Person_New Htt_Persons%rowtype;
    v_Photo_Shas Array_Varchar2 := Array_Varchar2();
    v_Count      number;
  begin
    if z_Htt_Persons.Exist_Lock(i_Company_Id => i_Person.Company_Id,
                                i_Person_Id  => i_Person.Person_Id,
                                o_Row        => r_Person_Old) then
      null;
    end if;
  
    r_Person_New.Company_Id := i_Person.Company_Id;
    r_Person_New.Person_Id  := i_Person.Person_Id;
    r_Person_New.Pin        := i_Person.Pin;
    r_Person_New.Pin_Code   := i_Person.Pin_Code;
    r_Person_New.Rfid_Code  := i_Person.Rfid_Code;
    r_Person_New.Qr_Code    := i_Person.Qr_Code;
  
    z_Htt_Persons.Save_Row(r_Person_New);
  
    v_Photo_Shas.Extend(i_Person.Photos.Count);
  
    for i in 1 .. i_Person.Photos.Count
    loop
      v_Photo_Shas(i) := i_Person.Photos(i).Photo_Sha;
    
      Person_Save_Photo(i_Company_Id => i_Person.Company_Id,
                        i_Person_Id  => i_Person.Person_Id,
                        i_Photo_Sha  => i_Person.Photos(i).Photo_Sha,
                        i_Is_Main    => i_Person.Photos(i).Is_Main);
    end loop;
  
    for r in (select *
                from Htt_Person_Photos q
               where q.Company_Id = i_Person.Company_Id
                 and q.Person_Id = i_Person.Person_Id
                 and q.Photo_Sha not member of v_Photo_Shas)
    loop
      z_Htt_Person_Photos.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Person_Id  => r.Person_Id,
                                     i_Photo_Sha  => r.Photo_Sha);
    end loop;
  
    select count(*)
      into v_Count
      from Htt_Person_Photos q
     where q.Company_Id = i_Person.Company_Id
       and q.Person_Id = i_Person.Person_Id
       and q.Is_Main = 'Y';
  
    if v_Count > 1 then
      Htt_Error.Raise_045(i_Main_Photo_Cnt => v_Count,
                          i_Person_Name    => z_Mr_Natural_Persons.Load(i_Company_Id => i_Person.Company_Id, --
                                              i_Person_Id => i_Person.Person_Id).Name);
    end if;
  
    if not (Fazo.Equal(r_Person_New.Pin, r_Person_Old.Pin) and
        Fazo.Equal(r_Person_New.Pin_Code, r_Person_Old.Pin_Code) and
        Fazo.Equal(r_Person_New.Rfid_Code, r_Person_Old.Rfid_Code) and
        Fazo.Equal(r_Person_New.Qr_Code, r_Person_Old.Qr_Code)) then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Person.Company_Id,
                                 i_Person_Id  => i_Person.Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  ) is
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha) then
      z_Htt_Person_Photos.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha);
    
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  ) is
    r_Person_Photo Htt_Person_Photos%rowtype;
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha,
                                      o_Row        => r_Person_Photo) then
      z_Htt_Person_Photos.Update_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => Option_Varchar2(i_Is_Main));
    else
      z_Htt_Person_Photos.Insert_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => i_Is_Main);
    end if;
  
    if r_Person_Photo.Company_Id is null or r_Person_Photo.Is_Main <> i_Is_Main then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  ) is
    v_Is_Main varchar2(1);
  
    --------------------------------------------------
    Function Photo_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Person_Photos Pp
       where Pp.Company_Id = i_Company_Id
         and Pp.Person_Id = i_Person_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    v_Is_Main := z_Htt_Person_Photos.Take(i_Company_Id => i_Company_Id, --
                 i_Person_Id => i_Person_Id, --
                 i_Photo_Sha => i_Old_Photo_Sha).Is_Main;
  
    Person_Photo_Delete(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_Old_Photo_Sha);
  
    if not Photo_Exists then
      v_Is_Main := 'Y';
    end if;
  
    if i_New_Photo_Sha is not null then
      Person_Save_Photo(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_New_Photo_Sha,
                        i_Is_Main    => Nvl(v_Is_Main, 'N'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Persons.Delete_One(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype) is
  begin
    z_Htt_Location_Types.Save_Row(i_Location_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  ) is
  begin
    z_Htt_Location_Types.Delete_One(i_Company_Id       => i_Company_Id,
                                    i_Location_Type_Id => i_Location_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Polygon_Save
  (
    i_Company_Id       number,
    i_Location_Id      number,
    i_Polygon_Vertices Array_Varchar2
  ) is
    v_Order_No         number := 0;
    v_Polygon_Vertices Array_Varchar2 := i_Polygon_Vertices;
  begin
    delete from Htt_Location_Polygon_Vertices t
     where t.Company_Id = i_Company_Id
       and t.Location_Id = i_Location_Id;
  
    if v_Polygon_Vertices.Count > 0 and
       v_Polygon_Vertices(v_Polygon_Vertices.Count) <> v_Polygon_Vertices(1) then
      v_Polygon_Vertices.Extend;
      v_Polygon_Vertices(v_Polygon_Vertices.Count) := v_Polygon_Vertices(1);
    end if;
  
    for i in 1 .. v_Polygon_Vertices.Count
    loop
      v_Order_No := v_Order_No + 1;
    
      z_Htt_Location_Polygon_Vertices.Insert_One(i_Company_Id  => i_Company_Id,
                                                 i_Location_Id => i_Location_Id,
                                                 i_Order_No    => v_Order_No,
                                                 i_Latlng      => v_Polygon_Vertices(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  ) is
    r_Row             Htt_Locations%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    if z_Htt_Locations.Exist_Lock(i_Company_Id  => i_Location.Company_Id,
                                  i_Location_Id => i_Location.Location_Id,
                                  o_Row         => r_Row) then
      z_Htt_Locations.Update_Row(i_Location);
    
      if not Fazo.Equal(r_Row.Timezone_Code, i_Location.Timezone_Code) then
        v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
        v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
      
        for r in (select q.Device_Id
                    from Htt_Devices q
                   where q.Company_Id = i_Location.Company_Id
                     and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                     and q.Location_Id = i_Location.Location_Id
                     and q.State = 'A')
        loop
          Htt_Api.Acms_Command_Add(i_Company_Id   => i_Location.Company_Id,
                                   i_Device_Id    => r.Device_Id,
                                   i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
        end loop;
      end if;
    else
      z_Htt_Locations.Insert_Row(i_Location);
    end if;
  
    Location_Polygon_Save(i_Company_Id       => i_Location.Company_Id,
                          i_Location_Id      => i_Location.Location_Id,
                          i_Polygon_Vertices => i_Polygon_Vertices);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Locations.Delete_One(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Insert_Try(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    for r in (select q.Company_Id, q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = i_Location_Id
                 and exists (select 1
                        from Hzk_Devices Dv
                       where Dv.Company_Id = q.Company_Id
                         and Dv.Device_Id = q.Device_Id))
    loop
      Hzk_Api.Device_Sync(i_Company_Id => r.Company_Id, i_Device_Id => r.Device_Id);
    end loop;
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Location_Id => i_Location_Id,
                                 i_Person_Id   => i_Person_Id,
                                 i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Remove_Person(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Location_Id => i_Location_Id,
                                    i_Person_Id   => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    Htt_Core.Location_Sync_Persons(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Person_Global_Sync_All_Location(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
    r_Qrcode Htt_Location_Qr_Codes%rowtype;
  begin
    r_Qrcode := z_Htt_Location_Qr_Codes.Lock_Load(i_Company_Id => i_Company_Id,
                                                  i_Unique_Key => i_Unique_Key);
  
    if r_Qrcode.State = 'P' then
      Htt_Error.Raise_082(i_Location_Id   => r_Qrcode.Location_Id,
                          i_Location_Name => z_Htt_Locations.Load(i_Company_Id => r_Qrcode.Company_Id, --
                                             i_Location_Id => r_Qrcode.Location_Id).Name,
                          i_Created_On    => r_Qrcode.Created_On);
    end if;
  
    r_Qrcode.State := 'P';
  
    z_Htt_Location_Qr_Codes.Update_Row(r_Qrcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
  begin
    z_Htt_Location_Qr_Codes.Delete_One(i_Company_Id => i_Company_Id, i_Unique_Key => i_Unique_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Random_Key varchar2(32) := to_char(Dbms_Crypto.Randombytes(16));
    v_Unique_Key varchar2(64);
  begin
    v_Unique_Key := Fazo.Hash_Sha1(i_Location_Id || ':' || Htt_Next.Qr_Code_Id || v_Random_Key);
  
    z_Htt_Location_Qr_Codes.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Unique_Key  => v_Unique_Key,
                                       i_Location_Id => i_Location_Id,
                                       i_State       => 'A');
  
    return v_Unique_Key;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype) is
    r_Terminal_Model Htt_Terminal_Models%rowtype;
  begin
    r_Terminal_Model := z_Htt_Terminal_Models.Lock_Load(i_Terminal_Model.Model_Id);
  
    if r_Terminal_Model.Pcode <> i_Terminal_Model.Pcode then
      Htt_Error.Raise_046(i_Old_Pcode => r_Terminal_Model.Pcode,
                          i_Model_Id  => i_Terminal_Model.Model_Id);
    end if;
  
    z_Htt_Terminal_Models.Update_Row(i_Terminal_Model);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype) is
    r_Device          Htt_Devices%rowtype := i_Device;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    r_Device.Use_Settings := Nvl(r_Device.Use_Settings, 'N');
  
    if r_Device.Model_Id is null and --
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_047;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if r_Device.Location_Id is null and --
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_048;
    end if;
  
    if r_Device.Use_Settings = 'Y' then
      r_Device.Track_Types   := null;
      r_Device.Mark_Types    := null;
      r_Device.Emotion_Types := null;
      r_Device.Lang_Code     := null;
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          r_Device.Lang_Code is null then
      Htt_Error.Raise_050;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      r_Device.Autogen_Inputs       := 'N';
      r_Device.Autogen_Outputs      := 'N';
      r_Device.Ignore_Tracks        := 'N';
      r_Device.Restricted_Type      := null;
      r_Device.Only_Last_Restricted := null;
    else
      r_Device.Autogen_Inputs  := Nvl(r_Device.Autogen_Inputs, 'N');
      r_Device.Autogen_Outputs := Nvl(r_Device.Autogen_Outputs, 'N');
    
      if r_Device.Restricted_Type not in
         (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
        r_Device.Only_Last_Restricted := null;
      end if;
    end if;
  
    r_Device.Status        := Nvl(r_Device.Status, Htt_Pref.c_Device_Status_Unknown);
    r_Device.Ignore_Tracks := Nvl(r_Device.Ignore_Tracks, 'N');
  
    z_Htt_Devices.Insert_Row(r_Device);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  ) is
    r_Device               Htt_Devices%rowtype;
    v_Track_Types          Option_Varchar2 := i_Track_Types;
    v_Mark_Types           Option_Varchar2 := i_Mark_Types;
    v_Emotion_Types        Option_Varchar2 := i_Emotion_Types;
    v_Lang_Code            Option_Varchar2 := i_Lang_Code;
    v_Autogen_Inputs       Option_Varchar2 := i_Autogen_Inputs;
    v_Autogen_Outputs      Option_Varchar2 := i_Autogen_Outputs;
    v_Ignore_Tracks        Option_Varchar2 := i_Ignore_Tracks;
    v_Restricted_Type      Option_Varchar2 := i_Restricted_Type;
    v_Only_Last_Restricted Option_Varchar2 := i_Only_Last_Restricted;
    v_Charge_Percentage    Option_Number := i_Charge_Percentage;
    v_Dt_Hikvision_Id      number;
    v_Dt_Dahua_Id          number;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, --
                                        i_Device_Id  => i_Device_Id);
  
    if i_Model_Id is not null and --
       i_Model_Id.Val is null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_051;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if i_Location_Id is not null and --
       i_Location_Id.Val is null and
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_052;
    end if;
  
    if i_Use_Settings is not null and --
       i_Use_Settings.Val = 'Y' then
      v_Track_Types   := Option_Varchar2(null);
      v_Mark_Types    := Option_Varchar2(null);
      v_Emotion_Types := Option_Varchar2(null);
      v_Lang_Code     := Option_Varchar2(null);
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          v_Lang_Code is not null and v_Lang_Code.Val is null then
      Htt_Error.Raise_054;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      v_Autogen_Inputs       := null;
      v_Autogen_Outputs      := null;
      v_Restricted_Type      := null;
      v_Only_Last_Restricted := null;
      v_Ignore_Tracks        := null;
    elsif v_Restricted_Type.Val not in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
      v_Only_Last_Restricted := Option_Varchar2(null);
    end if;
  
    if v_Charge_Percentage is not null and v_Charge_Percentage.Val is null then
      v_Charge_Percentage := null;
    end if;
  
    z_Htt_Devices.Update_One(i_Company_Id           => i_Company_Id,
                             i_Device_Id            => i_Device_Id,
                             i_Name                 => i_Name,
                             i_Model_Id             => i_Model_Id,
                             i_Location_Id          => i_Location_Id,
                             i_Charge_Percentage    => v_Charge_Percentage,
                             i_Track_Types          => v_Track_Types,
                             i_Mark_Types           => v_Mark_Types,
                             i_Emotion_Types        => v_Emotion_Types,
                             i_Lang_Code            => v_Lang_Code,
                             i_Use_Settings         => i_Use_Settings,
                             i_Autogen_Inputs       => v_Autogen_Inputs,
                             i_Autogen_Outputs      => v_Autogen_Outputs,
                             i_Ignore_Tracks        => v_Ignore_Tracks,
                             i_Restricted_Type      => v_Restricted_Type,
                             i_Only_Last_Restricted => v_Only_Last_Restricted,
                             i_Last_Seen_On         => i_Last_Seen_On,
                             i_State                => i_State);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) and i_Location_Id is not null and
       i_Location_Id.Val <> r_Device.Location_Id then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype) is
    r_Device Htt_Acms_Devices%rowtype;
  begin
    if not z_Htt_Acms_Devices.Exist_Lock(i_Company_Id => i_Device.Company_Id,
                                         i_Device_Id  => i_Device.Device_Id,
                                         o_Row        => r_Device) then
      r_Device.Company_Id := i_Device.Company_Id;
      r_Device.Device_Id  := i_Device.Device_Id;
    
      -- dynamic ip solution currently disabled
      -- see hac module integration instead 
      r_Device.Dynamic_Ip := 'N';
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := Nvl(i_Device.Host, i_Device.Login);
    else
      if not Fazo.Equal(r_Device.Dynamic_Ip, i_Device.Dynamic_Ip) or --
         not Fazo.Equal(r_Device.Ip_Address, i_Device.Ip_Address) or --
         not Fazo.Equal(r_Device.Port, i_Device.Port) or --
         not Fazo.Equal(r_Device.Protocol, i_Device.Protocol) or --
         not Fazo.Equal(r_Device.Host, i_Device.Host) or --
         not Fazo.Equal(r_Device.Login, i_Device.Login) or --
         not Fazo.Equal(r_Device.Password, i_Device.Password) then
        Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                         i_Device_Id    => r_Device.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
      end if;
    end if;
  
    r_Device.Dynamic_Ip := i_Device.Dynamic_Ip;
    r_Device.Login      := i_Device.Login;
    r_Device.Password   := Nvl(i_Device.Password, r_Device.Password);
  
    if r_Device.Dynamic_Ip = 'Y' then
      r_Device.Ip_Address := i_Device.Ip_Address;
      r_Device.Port       := i_Device.Port;
      r_Device.Protocol   := i_Device.Protocol;
      r_Device.Host       := null;
    else
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := i_Device.Host;
    end if;
  
    z_Htt_Acms_Devices.Save_Row(r_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
    v_Filial_Ids Array_Number;
    r_Device     Htt_Devices%rowtype;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  
    z_Htt_Device_Admins.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    if r_Device.Location_Id is not null then
      v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Device.Company_Id,
                                              i_Location_Id => r_Device.Location_Id,
                                              i_Person_Id   => i_Person_Id);
    
      for i in 1 .. v_Filial_Ids.Count
      loop
        Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => v_Filial_Ids(i),
                                     i_Location_Id => r_Device.Location_Id,
                                     i_Person_Id   => i_Person_Id,
                                     i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
      end loop;
    end if;
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Device_Admins.Delete_One(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Insert_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Device_Update(i_Company_Id => i_Company_Id,
                  i_Device_Id  => i_Device_Id,
                  i_State      => Option_Varchar2('P'));
  
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    for r in (select q.Filial_Id, q.Track_Id
                from Htt_Tracks q
               where q.Company_Id = i_Company_Id
                 and q.Device_Id = i_Device_Id)
    loop
      Track_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => r.Filial_Id,
                   i_Track_Id   => r.Track_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    Htt_Core.Acms_Command_Add(i_Company_Id   => i_Company_Id,
                              i_Device_Id    => i_Device_Id,
                              i_Command_Kind => i_Command_Kind,
                              i_Person_Id    => i_Person_Id,
                              i_Data         => i_Data);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_complete: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Complited),
                                   i_State_Changed_On => Option_Date(sysdate));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_fail: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Failed),
                                   i_State_Changed_On => Option_Date(sysdate),
                                   i_Error_Msg        => Option_Varchar2(i_Error_Msg));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1);
  begin
    if i_Value not in ('Y', 'N') then
      v_Value := 'N';
    else
      v_Value := i_Value;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks,
                           i_Value      => Nvl(v_Value, 'N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_079;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Pin_Autogenerate,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Photo_As_Face_Rec,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Invalid_Auto_Checkout_Enable
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number
  ) return boolean is
    r_Setting Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  begin
    r_Setting := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_User_Id    => i_User_Id);
  
    return r_Setting.Auto_Output_Enabled = 'Y' and r_Setting.Disable_Auto_Checkout = 'Y';
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Notify_Timesheet
  (
    i_Track       Htt_Tracks%rowtype,
    i_Notify_Type varchar2
  ) is
    r_Staff         Href_Staffs%rowtype;
    r_Timesheet     Htt_Timesheets%rowtype;
    v_Manager_Id    number;
    v_Staff_Id      number;
    v_Timesheet_Ids Array_Number;
    result          Hashmap := Hashmap();
  begin
    if not (i_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
        i_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and i_Track.Is_Valid = 'N' and
        Invalid_Auto_Checkout_Enable(i_Company_Id => i_Track.Company_Id,
                                         i_Filial_Id  => i_Track.Filial_Id,
                                         i_User_Id    => i_Track.Person_Id)) then
      return;
    end if;
  
    v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Track.Company_Id,
                                                 i_Filial_Id   => i_Track.Filial_Id,
                                                 i_Employee_Id => i_Track.Person_Id,
                                                 i_Date        => i_Track.Track_Datetime);
  
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Staff_Id   => v_Staff_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => i_Track.Company_Id,
                                             i_Filial_Id  => i_Track.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Track.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    v_Timesheet_Ids := Htt_Core.Find_Track_Timesheets(i_Company_Id     => i_Track.Company_Id,
                                                      i_Filial_Id      => i_Track.Filial_Id,
                                                      i_Staff_Id       => v_Staff_Id,
                                                      i_Track_Datetime => i_Track.Track_Datetime);
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Track.Company_Id,
                                           i_Filial_Id    => i_Track.Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if r_Timesheet.Count_Early = 'Y' and r_Timesheet.Input_Time is not null and
         r_Timesheet.Output_Time is null and i_Track.Track_Datetime between r_Timesheet.Begin_Time and
         r_Timesheet.End_Time then
        Result.Put('notify_type', i_Notify_Type);
        Result.Put('timesheet_id', r_Timesheet.Timesheet_Id);
        Result.Put('timesheet_date', r_Timesheet.Timesheet_Date);
        Result.Put('employee_name',
                   z_Mr_Natural_Persons.Take(i_Company_Id => i_Track.Company_Id, i_Person_Id => i_Track.Person_Id).Name);
        Result.Put('begin_time', to_char(r_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('end_time', to_char(r_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('input_time', to_char(r_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('output_time', to_char(i_Track.Track_Datetime, Href_Pref.c_Time_Format_Minute));
        Result.Put('early_time',
                   Trunc(Htt_Util.Time_Diff(r_Timesheet.End_Time, i_Track.Track_Datetime) / 60));
      
        Mt_Fcm.Send(i_Company_Id => r_Timesheet.Company_Id, --
                    i_User_Id    => v_Manager_Id,
                    i_Data       => result);
      
        return;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Datetime
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Time timestamp with time zone
  ) return date is
    v_Timezone Md_Timezones.Timezone_Code%type;
  begin
    v_Timezone := z_Md_Users.Take(i_Company_Id => i_Company_Id, i_User_Id => i_Person_Id).Timezone_Code;
  
    if v_Timezone is null then
      v_Timezone := Htt_Util.Load_Timezone(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    end if;
  
    return Htt_Util.Timestamp_To_Date(i_Timestamp => i_Track_Time, i_Timezone => v_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add(i_Track Htt_Tracks%rowtype) is
    r_Track     Htt_Tracks%rowtype := i_Track;
    r_Location  Htt_Locations%rowtype;
    r_Device    Htt_Devices%rowtype;
    r_Timesheet Htt_Timesheets%rowtype;
    --------------------------------------------------
    Function Track_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      if r_Track.Device_Id is not null then
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Device_Id = r_Track.Device_Id
           and q.Original_Type = r_Track.Original_Type;
      else
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Original_Type = r_Track.Original_Type;
      end if;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if r_Track.Location_Id is not null then
      r_Location := z_Htt_Locations.Load(i_Company_Id  => r_Track.Company_Id,
                                         i_Location_Id => r_Track.Location_Id);
    
      if r_Track.Latlng is null then
        r_Track.Latlng   := r_Location.Latlng;
        r_Track.Accuracy := r_Location.Accuracy;
      end if;
    end if;
  
    if r_Track.Device_Id is not null then
      r_Device := z_Htt_Devices.Load(i_Company_Id => r_Track.Company_Id,
                                     i_Device_Id  => r_Track.Device_Id);
    
      r_Track.Track_Type := Nvl(r_Device.Restricted_Type, r_Track.Track_Type);
    end if;
  
    if r_Device.Ignore_Tracks = 'Y' then
      return;
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date    := Trunc(r_Track.Track_Datetime);
    r_Track.Is_Valid      := Nvl(r_Track.Is_Valid, 'Y');
    r_Track.Status        := Htt_Pref.c_Track_Status_Draft;
    r_Track.Original_Type := r_Track.Track_Type;
    r_Track.Trans_Input   := Nvl(r_Device.Autogen_Inputs, 'N');
    r_Track.Trans_Output  := Nvl(r_Device.Autogen_Outputs, 'N');
    r_Track.Trans_Check := case
                             when r_Device.Only_Last_Restricted = 'Y' and
                                  r_Device.Restricted_Type in
                                  (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
                              'Y'
                             else
                              'N'
                           end;
  
    if Htt_Util.Schedule_Trim_Tracks(i_Company_Id => r_Track.Company_Id,
                                     i_Filial_Id  => r_Track.Filial_Id) = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => r_Track.Company_Id,
                                        i_Filial_Id      => r_Track.Filial_Id,
                                        i_Staff_Id       => Href_Util.Get_Primary_Staff_Id(i_Company_Id   => r_Track.Company_Id,
                                                                                           i_Filial_Id    => r_Track.Filial_Id,
                                                                                           i_Employee_Id  => r_Track.Person_Id,
                                                                                           i_Period_Begin => r_Track.Track_Date,
                                                                                           i_Period_End   => r_Track.Track_Date),
                                        i_Timesheet_Date => r_Track.Track_Date);
    
      if r_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Timesheet.Company_Id is null then
        return;
      end if;
    
      if r_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        r_Track.Track_Datetime := Greatest(Least(r_Track.Track_Datetime, r_Timesheet.End_Time),
                                           r_Timesheet.Begin_Time);
        r_Track.Track_Date     := Trunc(r_Track.Track_Date);
        r_Track.Track_Time     := cast(r_Track.Track_Datetime as timestamp with local time zone);
      end if;
    end if;
  
    if r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
       Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                    i_Filial_Id  => r_Track.Filial_Id,
                                    i_User_Id    => r_Track.Person_Id) then
      r_Track.Is_Valid := 'N';
    end if;
  
    if Track_Exists then
      return;
    end if;
  
    -- check if prohibited location
    if r_Track.Is_Valid = 'Y' and r_Track.Latlng is not null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) and
       Htt_Util.Is_Prohibited(i_Company_Id => r_Track.Company_Id,
                              i_Filial_Id  => r_Track.Filial_Id,
                              i_Person_Id  => r_Track.Person_Id,
                              i_Latlng     => r_Track.Latlng) or r_Location.Prohibited = 'Y' then
      r_Track.Is_Valid := 'N';
    end if;
  
    if true or Htt_Util.Is_Track_Accepted_Period(i_Company_Id  => r_Track.Company_Id,
                                                 i_Filial_Id   => r_Track.Filial_Id,
                                                 i_Employee_Id => r_Track.Person_Id,
                                                 i_Period      => r_Track.Track_Date) = 'Y' then
      z_Htt_Tracks.Insert_Row(r_Track);
    
      if Md_Pref.c_Migr_Company_Id != i_Track.Company_Id then
        if r_Track.Is_Valid = 'Y' then
          Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                             i_Filial_Id      => r_Track.Filial_Id,
                             i_Track_Id       => r_Track.Track_Id,
                             i_Employee_Id    => r_Track.Person_Id,
                             i_Track_Datetime => r_Track.Track_Datetime,
                             i_Track_Type     => r_Track.Track_Type,
                             i_Trans_Input    => r_Track.Trans_Input,
                             i_Trans_Output   => r_Track.Trans_Output,
                             i_Trans_Check    => r_Track.Trans_Check);
        elsif r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
              Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                           i_Filial_Id  => r_Track.Filial_Id,
                                           i_User_Id    => r_Track.Person_Id) then
          Notify_Timesheet(i_Track => r_Track, i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
        end if;
      
      end if;
    else
      Htt_Core.Trash_Track_Insert(r_Track);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'Y' then
      Htt_Error.Raise_055(i_Track_Id);
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date := Trunc(r_Track.Track_Datetime);
  
    z_Htt_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                            i_Filial_Id      => i_Filial_Id,
                            i_Track_Id       => i_Track_Id,
                            i_Track_Datetime => Option_Date(r_Track.Track_Datetime),
                            i_Track_Date     => Option_Date(r_Track.Track_Date),
                            i_Is_Valid       => Option_Varchar2('Y'));
  
    Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                       i_Filial_Id      => r_Track.Filial_Id,
                       i_Track_Id       => r_Track.Track_Id,
                       i_Employee_Id    => r_Track.Person_Id,
                       i_Track_Datetime => r_Track.Track_Datetime,
                       i_Track_Type     => r_Track.Track_Type,
                       i_Trans_Input    => r_Track.Trans_Input,
                       i_Trans_Output   => r_Track.Trans_Output,
                       i_Trans_Check    => r_Track.Trans_Check);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'N' then
      Htt_Error.Raise_056(i_Track_Id);
    end if;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Is_Valid   => Option_Varchar2('N'),
                            i_Track_Type => Option_Varchar2(r_Track.Original_Type));
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  
    z_Htt_Tracks.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt) is
    v_Track_Id number;
    v_Exists   varchar2(1) := 'Y';
  begin
    v_Track_Id := Htt_Util.Gps_Track_Id(i_Company_Id => i_Track.Company_Id,
                                        i_Filial_Id  => i_Track.Filial_Id,
                                        i_Person_Id  => i_Track.Person_Id,
                                        i_Track_Date => i_Track.Track_Date);
  
    if z_Htt_Gps_Track_Batches.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                          i_Filial_Id  => i_Track.Filial_Id,
                                          i_Track_Id   => v_Track_Id,
                                          i_Batch_Id   => i_Track.Batch_Id) then
      -- if batch saved then no need to resave it
      return;
    end if;
  
    if v_Track_Id is null then
      v_Track_Id := Htt_Next.Gps_Track_Id;
      v_Exists   := 'N';
    end if;
  
    if v_Exists = 'Y' then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = v_Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, i_Track.Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, v_Track_Id, i_Track.Data);
    end if;
  
    -- gps track batches
    z_Htt_Gps_Track_Batches.Insert_One(i_Company_Id => i_Track.Company_Id,
                                       i_Filial_Id  => i_Track.Filial_Id,
                                       i_Track_Id   => v_Track_Id,
                                       i_Batch_Id   => i_Track.Batch_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt) is
    v_Data blob;
    v_Text varchar2(4000);
  
    --------------------------------------------------
    Procedure Text_Append(i_Text varchar2) is
    begin
      v_Text := v_Text || i_Text || Htt_Pref.c_Gps_Track_Column_Delimiter;
    end;
  begin
    Text_Append(to_char(i_Track.Track_Time, 'hh24:mi:ss'));
    Text_Append(i_Track.Lat);
    Text_Append(i_Track.Lng);
    Text_Append(i_Track.Accuracy);
    Text_Append(i_Track.Provider);
  
    Dbms_Lob.Createtemporary(v_Data, false);
    Dbms_Lob.Open(v_Data, Dbms_Lob.Lob_Readwrite);
    Dbms_Lob.Writeappend(v_Data,
                         Length(v_Text) + 1,
                         Utl_Raw.Cast_To_Raw(v_Text || Htt_Pref.c_Gps_Track_Row_Delimiter));
  
    if z_Htt_Gps_Tracks.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                   i_Filial_Id  => i_Track.Filial_Id,
                                   i_Track_Id   => i_Track.Track_Id) then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = i_Track.Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, v_Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, i_Track.Track_Id, v_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    r_Time_Kind    Htt_Time_Kinds%rowtype;
  
    v_Pcode  Htt_Request_Kinds.Pcode%type;
    v_Date   date := sysdate;
    v_Exists boolean := false;
  begin
    -- TODO add restriction on time_kind_id change
    -- make time_kind_id unchangeable
    -- or allow change to time kind with same plan_load
    -- maybe add timsheets regen after request_kind edit
    -- TODO: add calendar of production days
  
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Request_Kind.Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind.Request_Kind_Id,
                                      o_Row             => r_Request_Kind) then
      if r_Request_Kind.Pcode is not null then
        v_Pcode := r_Request_Kind.Pcode;
      
        if r_Request_Kind.Time_Kind_Id <> i_Request_Kind.Time_Kind_Id then
          Htt_Error.Raise_057(z_Htt_Time_Kinds.Load(i_Company_Id => r_Request_Kind.Company_Id, --
                              i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Name);
        end if;
      end if;
    
      v_Exists := true;
    end if;
  
    r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Request_Kind.Company_Id,
                                         i_Time_Kind_Id => i_Request_Kind.Time_Kind_Id);
  
    if r_Time_Kind.Requestable = 'N' then
      Htt_Error.Raise_058(r_Time_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Init(p_Row                      => r_Request_Kind,
                             i_Company_Id               => i_Request_Kind.Company_Id,
                             i_Request_Kind_Id          => i_Request_Kind.Request_Kind_Id,
                             i_Name                     => i_Request_Kind.Name,
                             i_Time_Kind_Id             => i_Request_Kind.Time_Kind_Id,
                             i_Annually_Limited         => i_Request_Kind.Annually_Limited,
                             i_Day_Count_Type           => i_Request_Kind.Day_Count_Type,
                             i_User_Permitted           => i_Request_Kind.User_Permitted,
                             i_Allow_Unused_Time        => i_Request_Kind.Allow_Unused_Time,
                             i_Request_Restriction_Days => i_Request_Kind.Request_Restriction_Days,
                             i_State                    => i_Request_Kind.State,
                             i_Pcode                    => v_Pcode);
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request_Kind.Annual_Day_Limit := i_Request_Kind.Annual_Day_Limit;
      r_Request_Kind.Carryover_Policy := i_Request_Kind.Carryover_Policy;
    
      if r_Request_Kind.Carryover_Policy <> Htt_Pref.c_Carryover_Policy_Zero then
        if r_Request_Kind.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
          r_Request_Kind.Carryover_Cap_Days := i_Request_Kind.Carryover_Cap_Days;
        end if;
      
        r_Request_Kind.Carryover_Expires_Days := i_Request_Kind.Carryover_Expires_Days;
      end if;
    end if;
  
    z_Htt_Request_Kinds.Save_Row(r_Request_Kind);
  
    -- fix request kind accruals
    if v_Exists then
      for r in (select *
                  from Htt_Staff_Request_Kinds q
                 where q.Company_Id = i_Request_Kind.Company_Id
                   and q.Request_Kind_Id = i_Request_Kind.Request_Kind_Id)
      loop
        Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => r.Company_Id,
                                               i_Filial_Id       => r.Filial_Id,
                                               i_Staff_Id        => r.Staff_Id,
                                               i_Request_Kind_Id => r.Request_Kind_Id,
                                               i_Period          => v_Date);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind_Id,
                                      o_Row             => r_Request_Kind) and
       r_Request_Kind.Pcode is not null then
      Htt_Error.Raise_059(r_Request_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                   i_Request_Kind_Id => i_Request_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Insert_Try(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Helper_Save
  (
    i_Request     Htt_Requests%rowtype,
    i_Staff_Id    number,
    i_Only_Insert boolean := false
  ) is
    v_Begin date;
    v_End   date;
  begin
    v_Begin := Trunc(i_Request.Begin_Time);
    v_End   := Trunc(i_Request.End_Time);
  
    if not i_Only_Insert then
      delete Htt_Request_Helpers q
       where q.Company_Id = i_Request.Company_Id
         and q.Filial_Id = i_Request.Filial_Id
         and q.Request_Id = i_Request.Request_Id;
    end if;
  
    while v_Begin <= v_End
    loop
      z_Htt_Request_Helpers.Insert_One(i_Company_Id    => i_Request.Company_Id,
                                       i_Filial_Id     => i_Request.Filial_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Interval_Date => v_Begin,
                                       i_Request_Id    => i_Request.Request_Id);
      v_Begin := v_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Save(i_Request Htt_Requests%rowtype) is
    r_Request      Htt_Requests%rowtype;
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Exists       boolean;
    v_Diff_Days    number;
    v_Plan_Load    varchar(1);
    v_Min_Length   number;
  begin
    if z_Htt_Requests.Exist_Lock(i_Company_Id => i_Request.Company_Id,
                                 i_Filial_Id  => i_Request.Filial_Id,
                                 i_Request_Id => i_Request.Request_Id,
                                 o_Row        => r_Request) then
      if r_Request.Status <> Htt_Pref.c_Request_Status_New then
        Htt_Error.Raise_060(i_Request_Status   => r_Request.Status,
                            i_Request_Kind_New => Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New));
      end if;
    
      if r_Request.Staff_Id <> i_Request.Staff_Id then
        Htt_Error.Raise_061(Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                 i_Filial_Id  => r_Request.Filial_Id,
                                                 i_Staff_Id   => r_Request.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Request.Company_Id := i_Request.Company_Id;
      r_Request.Filial_Id  := i_Request.Filial_Id;
      r_Request.Request_Id := i_Request.Request_Id;
      r_Request.Staff_Id   := i_Request.Staff_Id;
      r_Request.Status     := Htt_Pref.c_Request_Status_New;
      r_Request.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Request_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit);
    
      if v_Min_Length > Length(i_Request.Note) then
        Htt_Error.Raise_110(v_Min_Length);
      end if;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Request.Company_Id,
                                               i_Request_Kind_Id => i_Request.Request_Kind_Id);
  
    v_Plan_Load := z_Htt_Time_Kinds.Load(i_Company_Id => i_Request.Company_Id, i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Plan_Load;
  
    if v_Plan_Load = Htt_Pref.c_Plan_Load_Extra then
      Htt_Error.Raise_081;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if v_Plan_Load = Htt_Pref.c_Plan_Load_Full and
         i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        Htt_Error.Raise_062(Array_Varchar2(Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Full_Day),
                                           Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Multiple_Days)));
      end if;
    end if;
  
    v_Diff_Days := i_Request.End_Time - i_Request.Begin_Time;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if not (i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and v_Diff_Days > 0 and
          v_Diff_Days < 1 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day and v_Diff_Days = 0 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Multiple_Days and v_Diff_Days >= 1) then
        Htt_Error.Raise_063(i_Request_Type      => i_Request.Request_Type,
                            i_Request_Type_Name => Htt_Util.t_Request_Type(i_Request.Request_Type));
      end if;
    end if;
  
    r_Request.Request_Kind_Id := i_Request.Request_Kind_Id;
    r_Request.Request_Type    := i_Request.Request_Type;
    r_Request.Begin_Time      := i_Request.Begin_Time;
    r_Request.End_Time        := i_Request.End_Time;
    r_Request.Note            := i_Request.Note;
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request.Accrual_Kind := Nvl(i_Request.Accrual_Kind, Htt_Pref.c_Accrual_Kind_Plan);
    else
      r_Request.Accrual_Kind := null;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if r_Request_Kind.Request_Restriction_Days is not null then
        if Trunc(r_Request.Begin_Time) - Trunc(r_Request.Created_On) <
           r_Request_Kind.Request_Restriction_Days then
          Htt_Error.Raise_064(i_Restriction_Days => r_Request_Kind.Request_Restriction_Days,
                              i_Request_Begin    => Trunc(r_Request.Begin_Time),
                              i_Created_On       => Trunc(r_Request.Created_On));
        end if;
      end if;
    end if;
  
    Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                             i_Filial_Id    => r_Request.Filial_Id,
                                             i_Request_Id   => r_Request.Request_Id,
                                             i_Staff_Id     => r_Request.Staff_Id,
                                             i_Begin_Time   => r_Request.Begin_Time,
                                             i_End_Time     => r_Request.End_Time,
                                             i_Request_Type => r_Request.Request_Type);
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    if v_Exists then
      z_Htt_Requests.Update_Row(r_Request);
      Request_Helper_Save(r_Request, i_Staff_Id => r_Request.Staff_Id);
    else
      r_Request.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Requests,
                                               i_Id    => r_Request.Request_Id);
    
      z_Htt_Requests.Insert_Row(r_Request);
    
      Request_Helper_Save(r_Request, --
                          i_Staff_Id    => r_Request.Staff_Id,
                          i_Only_Insert => true);
    
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
  begin
    Htt_Core.Gen_Timesheet_Requests(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet_Plan
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
  begin
    Htt_Core.Change_Timesheet_Plans(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status = Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_065(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Completed),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Denied)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_New),
                              i_Approved_By  => Option_Number(null),
                              i_Completed_By => Option_Number(null));
  
    Fix_Timesheet(i_Company_Id => i_Company_Id,
                  i_Filial_Id  => i_Filial_Id,
                  i_Request_Id => i_Request_Id);
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  ) is
    r_Request          Htt_Requests%rowtype;
    v_Request_Settings Hes_Pref.Staff_Request_Manager_Approval_Rt := Hes_Util.Staff_Request_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                      i_Filial_Id  => i_Filial_Id,
                                                                                                                      i_User_Id    => i_User_Id);
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_066(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Approved),
                              i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Request_Settings.Request_Settings = 'Y' then
      Request_Complete(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Request_Id => i_Request_Id);
    else
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_067(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Completed),
                              i_Completed_By => Option_Number(Md_Env.User_Id));
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Fix_Timesheet(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Request_Id => i_Request_Id);
    end if;
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_068(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Denied),
                              i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_069(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    z_Htt_Requests.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Change_Days_By_Calendar
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    v_Plan_Time_Limit number;
  begin
    for r in (select q.Staff_Id,
                     q.Change_Date,
                     q.Swapped_Date,
                     q.Plan_Time,
                     q.Day_Kind,
                     w.Preholiday_Time,
                     w.Preweekend_Time,
                     c.Monthly_Limit,
                     c.Daily_Limit,
                     w.Plan_Time       Plan_Time_Limit,
                     s.Name            Schedule_Name,
                     c.Name            Calendar_Name,
                     t.Schedule_Id,
                     Ch.Change_Kind
                from Htt_Change_Days q
                join Htt_Plan_Changes Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Change_Id = q.Change_Id
                join Htt_Timesheets t
                  on t.Company_Id = q.Company_Id
                 and t.Filial_Id = q.Filial_Id
                 and t.Staff_Id = q.Staff_Id
                 and t.Timesheet_Date = q.Change_Date
                join Htt_Schedules s
                  on s.Company_Id = t.Company_Id
                 and s.Filial_Id = t.Filial_Id
                 and s.Schedule_Id = t.Schedule_Id
                join Htt_Calendars c
                  on c.Company_Id = t.Company_Id
                 and c.Filial_Id = t.Filial_Id
                 and c.Calendar_Id = t.Calendar_Id
                join Htt_Calendar_Week_Days w
                  on w.Company_Id = c.Company_Id
                 and w.Filial_Id = c.Filial_Id
                 and w.Calendar_Id = c.Calendar_Id
                 and w.Order_No = Htt_Util.Iso_Week_Day_No(t.Timesheet_Date)
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Change_Id = i_Change_Id)
    loop
      if r.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        if r.Monthly_Limit = 'Y' and Trunc(r.Change_Date, 'mon') <> Trunc(r.Swapped_Date, 'mon') then
          Htt_Error.Raise_119(i_Change_Date   => r.Change_Date,
                              i_Swapped_Date  => r.Swapped_Date,
                              i_Calendar_Name => r.Calendar_Name,
                              i_Schedule_Name => r.Schedule_Name);
        end if;
      end if;
    
      v_Plan_Time_Limit := Htt_Util.Get_Plan_Time(i_Company_Id      => i_Company_Id,
                                                  i_Filial_Id       => i_Filial_Id,
                                                  i_Staff_Id        => r.Staff_Id,
                                                  i_Date            => r.Change_Date,
                                                  i_Plan_Time       => r.Plan_Time_Limit,
                                                  i_Preholiday_Time => r.Preholiday_Time,
                                                  i_Preweekend_Time => r.Preweekend_Time);
    
      if r.Daily_Limit = 'Y' and r.Plan_Time / 60 > v_Plan_Time_Limit then
        Htt_Error.Raise_120(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    
      if r.Monthly_Limit = 'Y' and r.Change_Kind = Htt_Pref.c_Change_Kind_Change_Plan and
         not Fazo.Equal(r.Day_Kind,
                        Htt_Util.Schedule_Day_Kind(i_Company_Id    => i_Company_Id,
                                                   i_Filial_Id     => i_Filial_Id,
                                                   i_Staff_Id      => r.Staff_Id,
                                                   i_Schedule_Id   => r.Schedule_Id,
                                                   i_Schedule_Date => r.Change_Date)) then
        Htt_Error.Raise_121(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt) is
    r_Change           Htt_Plan_Changes%rowtype;
    r_Change_Day       Htt_Change_Days%rowtype;
    v_Change_Dates     Array_Date := Array_Date();
    v_Change_Day       Htt_Pref.Change_Day_Rt;
    v_Swapped_Date     date;
    v_Exists           boolean;
    v_Min_Length       number;
    v_Employee_Id      number;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
  
    -------------------------------------------------- 
    Procedure Prepare_Change_Day(p_Change_Date in out nocopy Htt_Change_Days%rowtype) is
    begin
      if p_Change_Date.Day_Kind in (Htt_Pref.c_Day_Kind_Rest,
                                    Htt_Pref.c_Day_Kind_Holiday,
                                    Htt_Pref.c_Day_Kind_Additional_Rest) or
         p_Change_Date.Day_Kind is null then
        p_Change_Date.Begin_Time       := null;
        p_Change_Date.End_Time         := null;
        p_Change_Date.Break_Enabled    := null;
        p_Change_Date.Break_Begin_Time := null;
        p_Change_Date.Break_End_Time   := null;
        p_Change_Date.Plan_Time        := null;
      
        if p_Change_Date.Day_Kind is not null then
          p_Change_Date.Plan_Time := 0;
        end if;
      else
        p_Change_Date.Break_Enabled := Nvl(p_Change_Date.Break_Enabled, 'N');
      
        if p_Change_Date.End_Time <= p_Change_Date.Begin_Time then
          p_Change_Date.End_Time := p_Change_Date.End_Time + 1;
        end if;
      
        if p_Change_Date.Break_Enabled = 'Y' then
          if p_Change_Date.Break_Begin_Time <= p_Change_Date.Begin_Time then
            p_Change_Date.Break_Begin_Time := p_Change_Date.Break_Begin_Time + 1;
          end if;
        
          if p_Change_Date.Break_End_Time <= p_Change_Date.Break_Begin_Time then
            p_Change_Date.Break_End_Time := p_Change_Date.Break_End_Time + 1;
          end if;
        else
          p_Change_Date.Break_Begin_Time := null;
          p_Change_Date.Break_End_Time   := null;
        end if;
      end if;
    end;
  begin
    if i_Change.Change_Days.Count = 0 then
      Htt_Error.Raise_070;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit);
    
      if v_Min_Length > Length(i_Change.Note) then
        Htt_Error.Raise_109(v_Min_Length);
      end if;
    end if;
  
    if z_Htt_Plan_Changes.Exist_Lock(i_Company_Id => i_Change.Company_Id,
                                     i_Filial_Id  => i_Change.Filial_Id,
                                     i_Change_Id  => i_Change.Change_Id,
                                     o_Row        => r_Change) then
      if r_Change.Status <> Htt_Pref.c_Change_Status_New then
        Htt_Error.Raise_071(i_Change_Status   => r_Change.Status,
                            i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
      end if;
    
      if r_Change.Staff_Id <> i_Change.Staff_Id then
        Htt_Error.Raise_072(Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                 i_Filial_Id  => r_Change.Filial_Id,
                                                 i_Staff_Id   => r_Change.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Change.Company_Id := i_Change.Company_Id;
      r_Change.Filial_Id  := i_Change.Filial_Id;
      r_Change.Change_Id  := i_Change.Change_Id;
      r_Change.Staff_Id   := i_Change.Staff_Id;
      r_Change.Status     := Htt_Pref.c_Change_Status_New;
      r_Change.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if i_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
      if mod(i_Change.Change_Days.Count, 2) = 1 then
        Htt_Error.Raise_073;
      end if;
    end if;
  
    r_Change.Change_Kind := i_Change.Change_Kind;
    r_Change.Note        := i_Change.Note;
  
    if v_Exists then
      z_Htt_Plan_Changes.Update_Row(r_Change);
    else
      z_Htt_Plan_Changes.Insert_Row(r_Change);
    end if;
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Change.Company_Id,
                                               i_Filial_Id  => i_Change.Filial_Id,
                                               i_Staff_Id   => i_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Change.Company_Id,
                                                                   i_Filial_Id  => i_Change.Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    v_Change_Dates.Extend(i_Change.Change_Days.Count);
  
    for i in 1 .. i_Change.Change_Days.Count
    loop
      v_Change_Day := i_Change.Change_Days(i);
      v_Change_Dates(i) := v_Change_Day.Change_Date;
    
      v_Swapped_Date := null;
      if r_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        v_Swapped_Date := v_Change_Day.Swapped_Date;
      end if;
    
      if v_Change_Day_Limit.Change_With_Restriction_Days = 'Y' then
        if Trunc(Least(v_Change_Dates(i), Nvl(v_Swapped_Date, v_Change_Dates(i)))) -
           Trunc(r_Change.Created_On) < v_Change_Day_Limit.Change_Restriction_Days then
          Htt_Error.Raise_112(i_Restriction_Days => v_Change_Day_Limit.Change_Restriction_Days,
                              i_Change_Day       => Trunc(Least(v_Change_Dates(i),
                                                                Nvl(v_Swapped_Date, v_Change_Dates(i)))),
                              i_Created_On       => Trunc(r_Change.Created_On));
        end if;
      end if;
    
      r_Change_Day.Company_Id       := r_Change.Company_Id;
      r_Change_Day.Filial_Id        := r_Change.Filial_Id;
      r_Change_Day.Change_Id        := r_Change.Change_Id;
      r_Change_Day.Change_Date      := v_Change_Day.Change_Date;
      r_Change_Day.Swapped_Date     := v_Swapped_Date;
      r_Change_Day.Staff_Id         := r_Change.Staff_Id;
      r_Change_Day.Day_Kind         := v_Change_Day.Day_Kind;
      r_Change_Day.Begin_Time       := v_Change_Day.Begin_Time;
      r_Change_Day.End_Time         := v_Change_Day.End_Time;
      r_Change_Day.Break_Enabled    := v_Change_Day.Break_Enabled;
      r_Change_Day.Break_Begin_Time := v_Change_Day.Break_Begin_Time;
      r_Change_Day.Break_End_Time   := v_Change_Day.Break_End_Time;
      r_Change_Day.Plan_Time        := v_Change_Day.Plan_Time;
    
      Prepare_Change_Day(r_Change_Day);
    
      r_Change_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Change_Day.Day_Kind,
                                                        i_Begin_Time       => r_Change_Day.Begin_Time,
                                                        i_End_Time         => r_Change_Day.End_Time,
                                                        i_Break_Begin_Time => r_Change_Day.Break_Begin_Time,
                                                        i_Break_End_Time   => r_Change_Day.Break_End_Time);
      -- full time in seconds    
      r_Change_Day.Full_Time := r_Change_Day.Full_Time * 60;
    
      z_Htt_Change_Days.Save_Row(r_Change_Day);
    end loop;
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    if v_Exists then
      delete from Htt_Change_Days Cd
       where Cd.Company_Id = r_Change.Company_Id
         and Cd.Filial_Id = r_Change.Filial_Id
         and Cd.Change_Id = r_Change.Change_Id
         and Cd.Change_Date not member of v_Change_Dates;
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    if not v_Exists then
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_074(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    z_Htt_Plan_Changes.Delete_One(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_075(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Completed),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Denied)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_New),
                                  i_Approved_By  => Option_Number(null),
                                  i_Completed_By => Option_Number(null));
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Change_Id  => i_Change_Id);
    end if;
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  ) is
    r_Change          Htt_Plan_Changes%rowtype;
    v_Change_Settings Hes_Pref.Staff_Change_Manager_Approval_Rt := Hes_Util.Staff_Change_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                   i_Filial_Id  => i_Filial_Id,
                                                                                                                   i_User_Id    => i_User_Id);
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_076(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Approved),
                                  i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Change_Settings.Change_Settings = 'Y' then
      Change_Complete(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Change_Id  => i_Change_Id);
    else
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_077(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Completed),
                                  i_Completed_By => Option_Number(Md_Env.User_Id));
  
    Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Change_Id  => i_Change_Id);
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_078(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Denied),
                                  i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
  begin
    Htt_Core.Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  i_Dates       => i_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Total_Distance number;
  begin
    for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                 from Htt_Gps_Tracks q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Calculated = 'N')
    loop
      v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Person_Id  => Gt.Person_Id,
                                                           i_Track_Date => Gt.Track_Date);
    
      z_Htt_Gps_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Track_Id       => Gt.Track_Id,
                                  i_Total_Distance => Option_Number(v_Total_Distance),
                                  i_Calculated     => Option_Varchar2('Y'));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt) is
    r_Registry      Htt_Schedule_Registries%rowtype;
    r_Day           Htt_Unit_Schedule_Days%rowtype;
    v_Unit          Htt_Pref.Registry_Unit_Rt;
    v_Unit_Day      Htt_Pref.Schedule_Day_Rt;
    v_Used_Unit_Ids Array_Number := Array_Number();
  
    v_Old_Calendar_Id    number;
    v_Calendar_Changed   varchar2(1) := 'N';
    v_Holidays_Changed   varchar2(1) := 'N';
    v_Nonworking_Changed varchar2(1) := 'N';
  
    v_Company_Id number := i_Registry.Company_Id;
    v_Filial_Id  number := i_Registry.Filial_Id;
  
    v_Staff_Name varchar2(500 char);
    v_Robot_Name varchar2(500 char);
  
    --------------------------------------------------
    Procedure Save_Registry is
      v_Exists boolean;
    begin
      if z_Htt_Schedule_Registries.Exist_Lock(i_Company_Id  => i_Registry.Company_Id,
                                              i_Filial_Id   => i_Registry.Filial_Id,
                                              i_Registry_Id => i_Registry.Registry_Id,
                                              o_Row         => r_Registry) then
        if r_Registry.Posted = 'Y' then
          Htt_Error.Raise_083;
        end if;
      
        if r_Registry.Registry_Kind <> i_Registry.Registry_Kind then
          Htt_Error.Raise_084;
        end if;
      
        v_Old_Calendar_Id := r_Registry.Calendar_Id;
      
        if not Fazo.Equal(v_Old_Calendar_Id, i_Registry.Calendar_Id) then
          v_Calendar_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Holidays <> i_Registry.Take_Holidays then
          v_Holidays_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Nonworking <> i_Registry.Take_Nonworking then
          v_Nonworking_Changed := 'Y';
        end if;
      
        v_Exists := true;
      else
        r_Registry.Company_Id    := i_Registry.Company_Id;
        r_Registry.Filial_Id     := i_Registry.Filial_Id;
        r_Registry.Registry_Id   := i_Registry.Registry_Id;
        r_Registry.Registry_Kind := i_Registry.Registry_Kind;
        r_Registry.Schedule_Kind := i_Registry.Schedule_Kind;
      
        v_Exists := false;
      end if;
    
      r_Registry.Registry_Date             := i_Registry.Registry_Date;
      r_Registry.Registry_Number           := i_Registry.Registry_Number;
      r_Registry.Month                     := i_Registry.Month;
      r_Registry.Division_Id               := i_Registry.Division_Id;
      r_Registry.Note                      := i_Registry.Note;
      r_Registry.Posted                    := 'N';
      r_Registry.Shift                     := i_Registry.Shift;
      r_Registry.Input_Acceptance          := i_Registry.Input_Acceptance;
      r_Registry.Output_Acceptance         := i_Registry.Output_Acceptance;
      r_Registry.Track_Duration            := i_Registry.Track_Duration;
      r_Registry.Count_Late                := i_Registry.Count_Late;
      r_Registry.Count_Lack                := i_Registry.Count_Lack;
      r_Registry.Count_Early               := i_Registry.Count_Early;
      r_Registry.Count_Free                := i_Registry.Count_Free;
      r_Registry.Allowed_Late_Time         := i_Registry.Allowed_Late_Time;
      r_Registry.Allowed_Early_Time        := i_Registry.Allowed_Early_Time;
      r_Registry.Begin_Late_Time           := i_Registry.Begin_Late_Time;
      r_Registry.End_Early_Time            := i_Registry.End_Early_Time;
      r_Registry.Calendar_Id               := i_Registry.Calendar_Id;
      r_Registry.Take_Holidays             := i_Registry.Take_Holidays;
      r_Registry.Take_Nonworking           := i_Registry.Take_Nonworking;
      r_Registry.Take_Additional_Rest_Days := i_Registry.Take_Additional_Rest_Days;
    
      if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        if r_Registry.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
          Htt_Error.Raise_108;
        end if;
      
        if i_Registry.Advanced_Setting = 'Y' then
          Htt_Error.Raise_117;
        end if;
      
        r_Registry.Shift             := 0;
        r_Registry.Input_Acceptance  := r_Registry.Track_Duration;
        r_Registry.Output_Acceptance := r_Registry.Track_Duration;
      
        r_Registry.Count_Late  := 'N';
        r_Registry.Count_Early := 'N';
        r_Registry.Count_Lack  := 'N';
        r_Registry.Count_Free  := 'N';
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      elsif r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
        r_Registry.Shift             := null;
        r_Registry.Input_Acceptance  := null;
        r_Registry.Output_Acceptance := null;
        r_Registry.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      end if;
    
      if r_Registry.Gps_Turnout_Enabled = 'N' then
        r_Registry.Gps_Use_Location := 'N';
        r_Registry.Gps_Max_Interval := null;
      end if;
    
      if v_Exists then
        z_Htt_Schedule_Registries.Update_Row(r_Registry);
      else
        if r_Registry.Registry_Number is null then
          r_Registry.Registry_Number := Md_Core.Gen_Number(i_Company_Id => r_Registry.Company_Id,
                                                           i_Filial_Id  => r_Registry.Filial_Id,
                                                           i_Table      => Zt.Htt_Schedule_Registries,
                                                           i_Column     => z.Registry_Number);
        end if;
      
        z_Htt_Schedule_Registries.Insert_Row(r_Registry);
      end if;
    end;
  
  begin
    -- save registry start
    Save_Registry;
  
    for i in 1 .. i_Registry.Units.Count
    loop
      v_Unit := i_Registry.Units(i);
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff and
         (v_Unit.Robot_Id is not null or v_Unit.Staff_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_086;
      end if;
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot and
         (v_Unit.Staff_Id is not null or v_Unit.Robot_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_087;
      end if;
    
      z_Htt_Registry_Units.Save_One(i_Company_Id      => i_Registry.Company_Id,
                                    i_Filial_Id       => i_Registry.Filial_Id,
                                    i_Unit_Id         => v_Unit.Unit_Id,
                                    i_Registry_Id     => i_Registry.Registry_Id,
                                    i_Staff_Id        => v_Unit.Staff_Id,
                                    i_Robot_Id        => v_Unit.Robot_Id,
                                    i_Monthly_Minutes => v_Unit.Monthly_Minutes,
                                    i_Monthly_Days    => v_Unit.Monthly_Days);
    
      -- todo: assert v_unit.unit_days must be full month
    
      for k in 1 .. v_Unit.Unit_Days.Count
      loop
        v_Unit_Day := v_Unit.Unit_Days(k);
      
        if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          v_Unit_Day.Begin_Time    := 0;
          v_Unit_Day.End_Time      := 0;
          v_Unit_Day.Break_Enabled := 'N';
        end if;
      
        -- todo: comment
        -- check month
        if Trunc(v_Unit_Day.Schedule_Date, 'mon') <> i_Registry.Month then
          if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            v_Staff_Name := z_Md_Persons.Load(i_Company_Id => v_Company_Id, i_Person_Id => z_Href_Staffs.Load( --
                            i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Staff_Id => v_Unit.Staff_Id).Employee_Id).Name;
          
            Htt_Error.Raise_085(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Staff_Name    => v_Staff_Name);
          else
            v_Robot_Name := z_Mrf_Robots.Load(i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Robot_Id => v_Unit.Robot_Id).Name;
            Htt_Error.Raise_099(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Robot_Name    => v_Robot_Name);
          end if;
        end if;
      
        r_Day := null;
      
        r_Day.Company_Id    := i_Registry.Company_Id;
        r_Day.Filial_Id     := i_Registry.Filial_Id;
        r_Day.Unit_Id       := v_Unit.Unit_Id;
        r_Day.Schedule_Date := v_Unit_Day.Schedule_Date;
        r_Day.Day_Kind      := v_Unit_Day.Day_Kind;
      
        if v_Unit_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
          r_Day.Begin_Time := r_Day.Schedule_Date +
                              Numtodsinterval(v_Unit_Day.Begin_Time, 'minute');
          r_Day.End_Time   := r_Day.Schedule_Date + --
                              Numtodsinterval(v_Unit_Day.End_Time, 'minute');
        
          if r_Day.End_Time <= r_Day.Begin_Time then
            r_Day.End_Time := r_Day.End_Time + 1;
          end if;
        
          r_Day.Break_Enabled := v_Unit_Day.Break_Enabled;
        
          if v_Unit_Day.Break_Enabled = 'Y' then
            r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_Begin_Time, 'minute');
            r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_End_Time, 'minute');
          
            if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
              r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
            end if;
          
            if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
              r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
            end if;
          end if;
        
          r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                     i_Begin_Time       => r_Day.Begin_Time,
                                                     i_End_Time         => r_Day.End_Time,
                                                     i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                     i_Break_End_Time   => r_Day.Break_End_Time);
        
          r_Day.Plan_Time := v_Unit_Day.Plan_Time;
        else
          r_Day.Full_Time := 0;
          r_Day.Plan_Time := 0;
        end if;
      
        r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Registry.Shift, 'minute');
        r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
        r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                  Numtodsinterval(r_Registry.Input_Acceptance, 'minute');
        r_Day.Output_Border    := r_Day.Shift_End_Time +
                                  Numtodsinterval(r_Registry.Output_Acceptance, 'minute');
      
        z_Htt_Unit_Schedule_Days.Save_Row(r_Day);
      end loop;
    
      Fazo.Push(v_Used_Unit_Ids, v_Unit.Unit_Id);
    end loop;
  
    -- delete unnecessary rows
    delete Htt_Registry_Units p
     where p.Company_Id = i_Registry.Company_Id
       and p.Filial_Id = i_Registry.Filial_Id
       and p.Registry_Id = i_Registry.Registry_Id
       and p.Unit_Id not member of v_Used_Unit_Ids;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_088;
    end if;
  
    z_Htt_Schedule_Registries.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Registry_Id => i_Registry_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
    -------------------------------------------------- 
    Procedure Check_Same_Date
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Registry_Id number
    ) is
      v_Staff_Id number;
      v_Robot_Id number;
    begin
      -- todo: optimize query
      select q.Staff_Id, q.Robot_Id
        into v_Staff_Id, v_Robot_Id
        from Htt_Registry_Units q
        join Htt_Schedule_Registries d
          on d.Company_Id = q.Company_Id
         and d.Filial_Id = q.Filial_Id
         and d.Registry_Id = q.Registry_Id
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id <> i_Registry_Id
         and d.Posted = 'Y'
         and exists (select 1
                from Htt_Registry_Units r
                join Htt_Schedule_Registries s
                  on s.Company_Id = r.Company_Id
                 and s.Filial_Id = r.Filial_Id
                 and s.Registry_Id = r.Registry_Id
               where r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and s.Month = d.Month
                 and (r.Staff_Id = q.Staff_Id or r.Robot_Id = q.Robot_Id)
                 and r.Registry_Id = i_Registry_Id)
         and Rownum = 1;
    
      if v_Staff_Id is not null then
        Htt_Error.Raise_096(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => v_Staff_Id));
      end if;
      if v_Robot_Id is not null then
        Htt_Error.Raise_097(z_Mrf_Robots.Take( --
                            i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    exception
      when No_Data_Found then
        null;
    end;
  
    --------------------------------------------------
    Procedure Swap_Staff_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Staff_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Staff_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Staff_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Swap_Robot_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Robot_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Robot_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Robot_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Load_Calendar_Days is
      v_Unit_Ids                   Array_Number;
      v_Swappable                  boolean := false;
      r_Staff_Schedule_Date        Htt_Staff_Schedule_Days%rowtype;
      r_Staff_Schedule_Swaped_Date Htt_Staff_Schedule_Days%rowtype;
      r_Robot_Schedule_Date        Htt_Robot_Schedule_Days%rowtype;
      r_Robot_Schedule_Swaped_Date Htt_Robot_Schedule_Days%rowtype;
    begin
      select q.Unit_Id
        bulk collect
        into v_Unit_Ids
        from Htt_Registry_Units q
       where q.Company_Id = r_Registry.Company_Id
         and q.Filial_Id = r_Registry.Filial_Id
         and q.Registry_Id = r_Registry.Registry_Id;
    
      for r in (select *
                  from Htt_Calendar_Days q
                 where q.Company_Id = r_Registry.Company_Id
                   and q.Filial_Id = r_Registry.Filial_Id
                   and q.Calendar_Id = r_Registry.Calendar_Id
                   and Trunc(q.Calendar_Date, 'mon') = r_Registry.Month
                   and (q.Swapped_Date is null or --
                       Trunc(q.Swapped_Date, 'mon') = r_Registry.Month))
      loop
        for i in 1 .. v_Unit_Ids.Count
        loop
          if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            r_Staff_Schedule_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Staff_Schedule_Date.Begin_Time       := null;
              r_Staff_Schedule_Date.End_Time         := null;
              r_Staff_Schedule_Date.Break_Enabled    := null;
              r_Staff_Schedule_Date.Break_Begin_Time := null;
              r_Staff_Schedule_Date.Break_End_Time   := null;
              r_Staff_Schedule_Date.Full_Time        := 0;
              r_Staff_Schedule_Date.Plan_Time        := 0;
              r_Staff_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Staff_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Staff_Schedule_Swaped_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Swaped_Date,
                                          p_Work_Day => r_Staff_Schedule_Date);
                else
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Date,
                                          p_Work_Day => r_Staff_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Date);
          else
            r_Robot_Schedule_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Robot_Schedule_Date.Begin_Time       := null;
              r_Robot_Schedule_Date.End_Time         := null;
              r_Robot_Schedule_Date.Break_Enabled    := null;
              r_Robot_Schedule_Date.Break_Begin_Time := null;
              r_Robot_Schedule_Date.Break_End_Time   := null;
              r_Robot_Schedule_Date.Full_Time        := 0;
              r_Robot_Schedule_Date.Plan_Time        := 0;
              r_Robot_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Robot_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Robot_Schedule_Swaped_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Swaped_Date,
                                          p_Work_Day => r_Robot_Schedule_Date);
                else
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Date,
                                          p_Work_Day => r_Robot_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Date);
          end if;
        end loop;
      end loop;
    end;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_093;
    end if;
  
    Check_Same_Date(i_Company_Id  => i_Company_Id,
                    i_Filial_Id   => i_Filial_Id,
                    i_Registry_Id => r_Registry.Registry_Id);
  
    r_Registry.Posted := 'Y';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      insert into Htt_Staff_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Staff_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Staff_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      insert into Htt_Robot_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Robot_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Robot_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    if r_Registry.Calendar_Id is not null then
      Load_Calendar_Days;
    end if;
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    else
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    end if;
  
    Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Registry_Id => i_Registry_Id);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => r_Registry.Company_Id,
                                        i_Filial_Id   => r_Registry.Filial_Id,
                                        i_Schedule_Id => v_Schedule_Id,
                                        i_Calendar_Id => r_Registry.Calendar_Id,
                                        i_Year_Begin  => Trunc(r_Registry.Month, 'year'),
                                        i_Registry_Id => r_Registry.Registry_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    r_Registry.Posted := 'N';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      delete Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      delete Htt_Robot_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    -- when repost this function runs into post function
    if not i_Repost then
      Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Registry_Id => i_Registry_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype) is
    r_Server      Htt_Acms_Servers%rowtype;
    v_Secret_Code varchar2(4000);
  begin
    if not z_Htt_Acms_Servers.Exist_Lock(i_Server_Id => i_Server.Server_Id, --
                                         o_Row       => r_Server) then
    
      v_Secret_Code := i_Server.Url || Sys_Guid() || i_Server.Server_Id;
    
      r_Server.Server_Id   := i_Server.Server_Id;
      r_Server.Secret_Code := Fazo.Hash_Sha1(v_Secret_Code);
    end if;
  
    r_Server.Name     := i_Server.Name;
    r_Server.Url      := i_Server.Url;
    r_Server.Order_No := i_Server.Order_No;
  
    z_Htt_Acms_Servers.Save_Row(r_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
    v_Cnt number;
  begin
    select count(1)
      into v_Cnt
      from Htt_Company_Acms_Servers q
     where q.Server_Id = i_Server_Id;
  
    if v_Cnt > 0 then
      b.Raise_Error(t('some companies attached this server, initially you must detach companies. cnt: $1',
                      v_Cnt));
    end if;
  
    z_Htt_Acms_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Save_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                 and q.State = 'A')
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Delete_One(i_Company_Id => i_Company_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id))
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Device);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype) is
  begin
    z_Htt_Acms_Tracks.Insert_Row(i_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  ) is
    r_Hik_Track  Htt_Acms_Tracks%rowtype;
    r_Track      Htt_Tracks%rowtype;
    r_Device     Htt_Devices%rowtype;
    v_Filial_Ids Array_Number;
  begin
    r_Hik_Track := z_Htt_Acms_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Track_Id   => i_Track_Id);
  
    if r_Hik_Track.Status = Htt_Pref.c_Acms_Track_Status_Completed then
      b.Raise_Error(t('acms track was already integrate, track_id=$1', i_Track_Id));
    end if;
  
    r_Device := z_Htt_Devices.Load(i_Company_Id => r_Hik_Track.Company_Id,
                                   i_Device_Id  => r_Hik_Track.Device_Id);
  
    r_Track.Company_Id  := r_Hik_Track.Company_Id;
    r_Track.Track_Time  := Htt_Util.Convert_Timestamp(i_Date     => r_Hik_Track.Track_Datetime,
                                                      i_Timezone => Htt_Util.Load_Timezone(i_Company_Id  => r_Device.Company_Id,
                                                                                           i_Location_Id => r_Device.Location_Id));
    r_Track.Track_Type  := r_Hik_Track.Track_Type;
    r_Track.Person_Id   := r_Hik_Track.Person_Id;
    r_Track.Mark_Type   := r_Hik_Track.Mark_Type;
    r_Track.Device_Id   := r_Hik_Track.Device_Id;
    r_Track.Location_Id := r_Device.Location_Id;
    r_Track.Is_Valid    := 'Y';
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    if v_Filial_Ids.Count = 0 then
      Htt_Error.Raise_105(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Location_Id => r_Track.Location_Id,
                          i_Person_Id   => r_Track.Person_Id);
    end if;
  
    for i in 1 .. v_Filial_Ids.Count
    loop
      r_Track.Filial_Id := v_Filial_Ids(i);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    r_Hik_Track.Status     := Htt_Pref.c_Acms_Track_Status_Completed;
    r_Hik_Track.Error_Text := null;
  
    z_Htt_Acms_Tracks.Save_Row(r_Hik_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Copies tracks from other filials to given filial
  -- Tracks are copied from hiring date in given filial
  -- First migrated employees temporary employees is filled
  -- Then tracks are migrated with attention to attached locations
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  ) is
    r_Track Htt_Tracks%rowtype;
  
    --------------------------------------------------
    Procedure Fill_Migrated_Employees
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Employee_Ids Array_Number
    ) is
      v_Date  date := Trunc(sysdate);
      v_Count number := i_Employee_Ids.Count;
    begin
      insert into Htt_Migrated_Employees
        (Company_Id, Filial_Id, Employee_Id, Period_Begin)
        select i_Company_Id, p.Filial_Id, Qr.Employee_Id, Qr.Hiring_Date
          from (select q.Employee_Id, q.Hiring_Date
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and (v_Count = 0 or q.Employee_Id member of i_Employee_Ids)
                   and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                   and q.State = 'A'
                   and q.Hiring_Date <= v_Date
                   and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)) Qr
          join Md_Filials p
            on p.Company_Id = i_Company_Id
           and p.Filial_Id <> i_Filial_Id
           and p.State = 'A';
    end;
  begin
    Fill_Migrated_Employees(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Employee_Ids => i_Employee_Ids);
  
    for r in (select *
                from Htt_Tracks p
               where (p.Company_Id, p.Filial_Id, p.Person_Id) in
                     (select q.Company_Id, q.Filial_Id, q.Employee_Id
                        from Htt_Migrated_Employees q)
                 and p.Track_Date >= (select q.Period_Begin
                                        from Htt_Migrated_Employees q
                                       where q.Company_Id = p.Company_Id
                                         and q.Filial_Id = p.Filial_Id
                                         and q.Employee_Id = p.Person_Id)
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = p.Person_Id)
                 and not exists (select 1
                        from Htt_Tracks T1
                       where T1.Company_Id = i_Company_Id
                         and T1.Filial_Id = i_Filial_Id
                         and T1.Track_Time = p.Track_Time
                         and T1.Person_Id = p.Person_Id
                         and Nvl(T1.Device_Id, -1) = Nvl(p.Device_Id, -1)
                         and T1.Original_Type = p.Original_Type))
    loop
      r_Track := r;
    
      r_Track.Filial_Id  := i_Filial_Id;
      r_Track.Track_Type := r.Original_Type;
      r_Track.Track_Id   := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    -- cleanup
    delete Htt_Migrated_Employees p
     where p.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Location_Sync_Person_Global,
                           i_Value      => i_Value);
  
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Htt_Api;
/

create or replace package Htt_Core is
  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs;
  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets;
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  );
  ---------------------------------------------------------------------------------------------------- 
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once
  -- %param p_Tracks       array of all timesheet tracks, returns as with reordered and transformed tracks 
  -- %param p_Trans_Tracks array of transformed tracks, returns same array adding transformed tracks
  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts;
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  );
  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes;
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance;
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes;
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals;
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual staff schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual robot schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );

end Htt_Core;
/
create or replace package body Htt_Core is
  ----------------------------------------------------------------------------------------------------
  g_Is_Individual_Schedule Fazo.Boolean_Id_Aat;
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Individual_Staff_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) return boolean is
  begin
    if i_Schedule_Id is null then
      return false;
    end if;
  
    if g_Is_Individual_Schedule.Exists(i_Schedule_Id) then
      return g_Is_Individual_Schedule(i_Schedule_Id);
    end if;
  
    g_Is_Individual_Schedule(i_Schedule_Id) := Fazo.Equal(z_Htt_Schedules.Load( --
                                                          i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Schedule_Id => i_Schedule_Id).Pcode,
                                                          Htt_Pref.c_Pcode_Individual_Staff_Schedule);
  
    return g_Is_Individual_Schedule(i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number is
    result number;
  begin
    z_Htt_Pin_Locks.Lock_Only(i_Company_Id);
  
    select max(Rownum)
      into result
      from (select to_number(q.Pin) Pin
              from Htt_Persons q
             where q.Company_Id = i_Company_Id
               and to_number(q.Pin) is not null
             order by to_number(q.Pin)) q
     where q.Pin = Rownum;
  
    return Nvl(result, 0) + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Data         Hashmap;
  begin
    for i in 1 .. i_Dates.Count
    loop
      v_Data         := Hashmap();
      r_Calendar_Day := z_Htt_Calendar_Days.Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Calendar_Id   => i_Calendar_Id,
                                                 i_Calendar_Date => i_Dates(i));
    
      v_Data.Put('notify_type', Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      v_Data.Put('name', r_Calendar_Day.Name);
      v_Data.Put('day_kind', r_Calendar_Day.Day_Kind);
      v_Data.Put('day_kind_name', Htt_Util.t_Day_Kind(r_Calendar_Day.Day_Kind));
      v_Data.Put('calendar_date', r_Calendar_Day.Calendar_Date);
      v_Data.Put('swapped_date', r_Calendar_Day.Swapped_Date);
    
      for Emp in (select Ts.Employee_Id
                    from Htt_Timesheets Ts
                   where Ts.Company_Id = i_Company_Id
                     and Ts.Filial_Id = i_Filial_Id
                     and Ts.Schedule_Id in (select s.Schedule_Id
                                              from Htt_Schedules s
                                             where s.Company_Id = i_Company_Id
                                               and s.Filial_Id = i_Filial_Id
                                               and s.Calendar_Id = i_Calendar_Id)
                     and Ts.Timesheet_Date = r_Calendar_Day.Calendar_Date
                   group by Ts.Employee_Id)
      loop
        continue when not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                                  i_User_Id      => Emp.Employee_Id,
                                                  i_Setting_Code => Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      
        Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                    i_User_Id    => Emp.Employee_Id,
                    i_Data       => v_Data);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Timesheet
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Late_Time   number := 0,
    i_Early_Time  number := 0,
    i_Notify_Type varchar2
  ) is
    r_Person     Mr_Natural_Persons%rowtype;
    r_Staff      Href_Staffs%rowtype;
    v_Manager_Id number;
    result       Hashmap := Hashmap();
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Timesheet.Company_Id,
                                  i_Filial_Id  => i_Timesheet.Filial_Id,
                                  i_Staff_Id   => i_Timesheet.Staff_Id);
  
    r_Person := z_Mr_Natural_Persons.Take(i_Company_Id => r_Staff.Company_Id,
                                          i_Person_Id  => r_Staff.Employee_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Timesheet.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('timesheet_id', i_Timesheet.Timesheet_Id);
    Result.Put('timesheet_date', i_Timesheet.Timesheet_Date);
    Result.Put('employee_name', r_Person.Name);
    Result.Put('begin_time', to_char(i_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('end_time', to_char(i_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('input_time', to_char(i_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('output_time', to_char(i_Timesheet.Output_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('early_time', i_Early_Time);
    Result.Put('late_time', i_Late_Time);
  
    Mt_Fcm.Send(i_Company_Id => i_Timesheet.Company_Id, --
                i_User_Id    => v_Manager_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Day_Marks
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Schedule_Id   number,
    i_Schedule_Date date,
    i_Source_Date   date,
    i_Day_Kind      varchar2
  ) is
  begin
    if i_Day_Kind = Htt_Pref.c_Day_Kind_Work then
      insert into Htt_Schedule_Day_Marks Dm
        (Dm.Company_Id, --
         Dm.Filial_Id,
         Dm.Schedule_Id,
         Dm.Schedule_Date,
         Dm.Begin_Time,
         Dm.End_Time)
        select Om.Company_Id,
               Om.Filial_Id,
               Om.Schedule_Id,
               i_Schedule_Date,
               i_Schedule_Date + Numtodsinterval(Om.Begin_Time, 'minute'),
               i_Schedule_Date + Numtodsinterval(Om.End_Time, 'minute')
          from Htt_Schedule_Origin_Day_Marks Om
         where Om.Company_Id = i_Company_Id
           and Om.Filial_Id = i_Filial_Id
           and Om.Schedule_Id = i_Schedule_Id
           and Om.Schedule_Date = i_Source_Date;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- gen schedule day
  -- also gen swapped day if such exists
  -- return date of swapped day through o_swapped_date
  Procedure Gen_Schedule_Day
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Schedule_Id              number,
    i_Schedule_Date            date,
    i_Calendar_Id              number,
    i_Take_Holidays            varchar2,
    i_Take_Nonworking          varchar2,
    i_Take_Additional_Rest_Day varchar2,
    o_Swapped_Date             out date
  ) is
    r_Origin_Day   Htt_Schedule_Origin_Days%rowtype;
    r_First_Day    Htt_Schedule_Origin_Days%rowtype;
    r_Second_Day   Htt_Schedule_Origin_Days%rowtype;
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Swappable    boolean := false;
  
    --------------------------------------------------
    Procedure Swap_Days
    (
      p_Rest_Day in out nocopy Htt_Schedule_Origin_Days%rowtype,
      p_Work_Day in out nocopy Htt_Schedule_Origin_Days%rowtype
    ) is
      v_Swap_Distance number;
      r_Day           Htt_Schedule_Origin_Days%rowtype := p_Rest_Day;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
  begin
    if z_Htt_Schedule_Origin_Days.Exist_Lock(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Schedule_Id   => i_Schedule_Id,
                                             i_Schedule_Date => i_Schedule_Date,
                                             o_Row           => r_Origin_Day) then
      if Md_Pref.c_Migr_Company_Id != i_Company_Id then
        if i_Calendar_Id is not null and
           Htt_Util.Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Calendar_Id  => i_Calendar_Id,
                                    i_Date         => i_Schedule_Date,
                                    o_Calendar_Day => r_Calendar_Day) then
          if r_Calendar_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Nonworking then
            if r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_First_Day  := r_Origin_Day;
                r_Second_Day := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Swapped_Date);
              
              else
                r_First_Day  := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Calendar_Date);
                r_Second_Day := r_Origin_Day;
              end if;
            
              v_Swappable := r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Days(p_Rest_Day => r_First_Day, p_Work_Day => r_Second_Day);
                else
                  Swap_Days(p_Rest_Day => r_Second_Day, p_Work_Day => r_First_Day);
                end if;
              end if;
            
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_Origin_Day := r_First_Day;
              else
                r_Origin_Day := r_Second_Day;
                r_Second_Day := r_First_Day;
              end if;
            
              -- gen swapped day
              z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                           i_Filial_Id        => i_Filial_Id,
                                           i_Schedule_Id      => i_Schedule_Id,
                                           i_Schedule_Date    => r_Second_Day.Schedule_Date,
                                           i_Day_Kind         => r_Second_Day.Day_Kind,
                                           i_Begin_Time       => r_Second_Day.Begin_Time,
                                           i_End_Time         => r_Second_Day.End_Time,
                                           i_Break_Enabled    => r_Second_Day.Break_Enabled,
                                           i_Break_Begin_Time => r_Second_Day.Break_Begin_Time,
                                           i_Break_End_Time   => r_Second_Day.Break_End_Time,
                                           i_Full_Time        => r_Second_Day.Full_Time,
                                           i_Plan_Time        => r_Second_Day.Plan_Time,
                                           i_Shift_Begin_Time => r_Second_Day.Shift_Begin_Time,
                                           i_Shift_End_Time   => r_Second_Day.Shift_End_Time,
                                           i_Input_Border     => r_Second_Day.Input_Border,
                                           i_Output_Border    => r_Second_Day.Output_Border);
            
              delete Htt_Schedule_Day_Marks Dm
               where Dm.Company_Id = i_Company_Id
                 and Dm.Filial_Id = i_Filial_Id
                 and Dm.Schedule_Id = i_Schedule_Id
                 and Dm.Schedule_Date = r_Second_Day.Schedule_Date;
            
              Gen_Schedule_Day_Marks(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Schedule_Id   => i_Schedule_Id,
                                     i_Schedule_Date => r_Second_Day.Schedule_Date,
                                     i_Source_Date   => case
                                                          when v_Swappable then
                                                           r_Origin_Day.Schedule_Date
                                                          else
                                                           r_Second_Day.Schedule_Date
                                                        end,
                                     i_Day_Kind      => r_Second_Day.Day_Kind);
            
              o_Swapped_Date := r_Second_Day.Schedule_Date;
            else
              if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
                 i_Take_Additional_Rest_Day = 'Y' and
                 r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
                r_Origin_Day.Begin_Time       := null;
                r_Origin_Day.End_Time         := null;
                r_Origin_Day.Break_Enabled    := null;
                r_Origin_Day.Break_Begin_Time := null;
                r_Origin_Day.Break_End_Time   := null;
                r_Origin_Day.Full_Time        := 0;
                r_Origin_Day.Plan_Time        := 0;
              end if;
            end if;
          end if;
        
          if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
             i_Take_Nonworking = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking or
             i_Take_Additional_Rest_Day = 'Y' and
             r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
            r_Origin_Day.Day_Kind := r_Calendar_Day.Day_Kind;
          end if;
        end if;
      end if;
    
      z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                   i_Filial_Id        => i_Filial_Id,
                                   i_Schedule_Id      => i_Schedule_Id,
                                   i_Schedule_Date    => i_Schedule_Date,
                                   i_Day_Kind         => r_Origin_Day.Day_Kind,
                                   i_Begin_Time       => r_Origin_Day.Begin_Time,
                                   i_End_Time         => r_Origin_Day.End_Time,
                                   i_Break_Enabled    => r_Origin_Day.Break_Enabled,
                                   i_Break_Begin_Time => r_Origin_Day.Break_Begin_Time,
                                   i_Break_End_Time   => r_Origin_Day.Break_End_Time,
                                   i_Full_Time        => r_Origin_Day.Full_Time,
                                   i_Plan_Time        => r_Origin_Day.Plan_Time,
                                   i_Shift_Begin_Time => r_Origin_Day.Shift_Begin_Time,
                                   i_Shift_End_Time   => r_Origin_Day.Shift_End_Time,
                                   i_Input_Border     => r_Origin_Day.Input_Border,
                                   i_Output_Border    => r_Origin_Day.Output_Border);
    
      Gen_Schedule_Day_Marks(i_Company_Id    => i_Company_Id,
                             i_Filial_Id     => i_Filial_Id,
                             i_Schedule_Id   => i_Schedule_Id,
                             i_Schedule_Date => r_Origin_Day.Schedule_Date,
                             i_Source_Date   => case
                                                  when v_Swappable then
                                                   r_Second_Day.Schedule_Date
                                                  else
                                                   r_Origin_Day.Schedule_Date
                                                end,
                             i_Day_Kind      => r_Origin_Day.Day_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days
  -- dates of swapped days are added to p_dates
  ----------------------------------------------------------------------------------------------------  
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  ) is
    v_Swapped_Date  date;
    v_Swapped_Dates Array_Date := Array_Date();
    r_Schedule      Htt_Schedules%rowtype;
  
    v_Swapped_Dates_At Fazo.Date_Code_Aat;
  
    -------------------------------------------------- 
    Function Date_Swapped(i_Date date) return boolean is
    begin
      if v_Swapped_Dates_At.Exists(to_char(i_Date)) then
        return true;
      end if;
    
      return false;
    end;
  
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    delete Htt_Schedule_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of p_Dates;
  
    for i in 1 .. p_Dates.Count
    loop
      continue when Date_Swapped(p_Dates(i));
    
      Gen_Schedule_Day(i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Schedule_Date            => p_Dates(i),
                       i_Calendar_Id              => r_Schedule.Calendar_Id,
                       i_Take_Holidays            => r_Schedule.Take_Holidays,
                       i_Take_Nonworking          => r_Schedule.Take_Nonworking,
                       i_Take_Additional_Rest_Day => r_Schedule.Take_Additional_Rest_Days,
                       o_Swapped_Date             => v_Swapped_Date);
    
      if v_Swapped_Date is not null then
        v_Swapped_Dates_At(v_Swapped_Date) := p_Dates(i);
        v_Swapped_Dates_At(p_Dates(i)) := v_Swapped_Date;
      
        Fazo.Push(v_Swapped_Dates, v_Swapped_Date);
      end if;
    end loop;
  
    p_Dates := p_Dates multiset union v_Swapped_Dates;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- if new days are being added to schedule
  -- uses separate algorithm for timesheet generation
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  ) is
    v_Year_Existed varchar2(1);
    v_Dates        Array_Date := i_Dates;
  begin
    begin
      select 'Y'
        into v_Year_Existed
        from Htt_Schedule_Days d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Schedule_Id = i_Schedule_Id
         and Extract(year from d.Schedule_Date) = i_Year
         and Rownum = 1;
    
    exception
      when No_Data_Found then
        v_Year_Existed := 'N';
    end;
  
    Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Schedule_Id => i_Schedule_Id,
                      p_Dates       => v_Dates);
  
    v_Dates := set(v_Dates);
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      if v_Year_Existed = 'N' then
        Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => i_Schedule_Id,
                           i_Year        => i_Year);
      else
        Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                             i_Filial_Id   => i_Filial_Id,
                             i_Schedule_Id => i_Schedule_Id,
                             i_Dates       => v_Dates);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- for every schedule that is cnnected to this calendar
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    v_Dates Array_Date;
  begin
    for r in (select s.Schedule_Id
                from Htt_Schedules s
               where s.Company_Id = i_Company_Id
                 and s.Filial_Id = i_Filial_Id
                 and s.Calendar_Id = i_Calendar_Id)
    loop
      v_Dates := i_Dates;
    
      Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                        i_Filial_Id   => i_Filial_Id,
                        i_Schedule_Id => r.Schedule_Id,
                        p_Dates       => v_Dates);
    
      Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => r.Schedule_Id,
                           i_Dates       => v_Dates);
    end loop;
  
    for r in (select *
                from Htt_Schedule_Registries q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Calendar_Id = i_Calendar_Id)
    loop
      null;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Request_Begin);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and (i_Request_Begin >= q.Shift_Begin_Time and i_Request_Begin < q.Shift_End_Time or
           i_Request_End >= q.Shift_Begin_Time and i_Request_End < q.Shift_End_Time);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Track_Datetime);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and i_Track_Datetime >= q.Input_Border
       and i_Track_Datetime < q.Output_Border;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Dirty_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Timesheets
        (Company_Id, Filial_Id, Timesheet_Id, Locked)
        select i_Company_Id,
               i_Filial_Id,
               i_Timesheet_Id,
               Nvl((select 'Y'
                     from Htt_Timesheet_Locks Tl
                    where Tl.Company_Id = t.Company_Id
                      and Tl.Filial_Id = t.Filial_Id
                      and Tl.Staff_Id = t.Staff_Id
                      and Tl.Timesheet_Date = t.Timesheet_Date),
                   'N')
          from Htt_Timesheets t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Timesheet_Id = i_Timesheet_Id;
    
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      select t.Company_Id,
             t.Filial_Id,
             t.Timesheet_Id,
             Nvl((select 'Y'
                   from Htt_Timesheet_Locks Tl
                  where Tl.Company_Id = t.Company_Id
                    and Tl.Filial_Id = t.Filial_Id
                    and Tl.Staff_Id = t.Staff_Id
                    and Tl.Timesheet_Date = t.Timesheet_Date),
                 'N')
        from Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date
         and not exists (select *
                from Htt_Dirty_Timesheets p
               where p.Company_Id = t.Company_Id
                 and p.Filial_Id = t.Filial_Id
                 and p.Timesheet_Id = t.Timesheet_Id);
  
    b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Dates        Array_Date,
    i_Add_Callback boolean := true
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      (select t.Company_Id,
              t.Filial_Id,
              t.Timesheet_Id,
              Nvl((select 'Y'
                    from Htt_Timesheet_Locks Tl
                   where Tl.Company_Id = t.Company_Id
                     and Tl.Filial_Id = t.Filial_Id
                     and Tl.Staff_Id = t.Staff_Id
                     and Tl.Timesheet_Date = t.Timesheet_Date),
                  'N')
         from Htt_Timesheets t
        where t.Company_Id = i_Company_Id
          and t.Filial_Id = i_Filial_Id
          and t.Staff_Id = i_Staff_Id
          and t.Timesheet_Date member of i_Dates
          and not exists (select *
                 from Htt_Dirty_Timesheets p
                where p.Company_Id = t.Company_Id
                  and p.Filial_Id = t.Filial_Id
                  and p.Timesheet_Id = t.Timesheet_Id));
  
    if i_Add_Callback then
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number) is
    v_User_System number := Md_Pref.User_System(i_Company_Id);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for Po in (select Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id
                   from Htt_Timesheet_Tracks Tt
                  where Tt.Company_Id = r.Company_Id
                    and Tt.Filial_Id = r.Filial_Id
                    and Tt.Track_Type in
                        (Htt_Pref.c_Track_Type_Potential_Output, Htt_Pref.c_Track_Type_Gps_Output)
                  group by Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id)
      loop
        Make_Dirty_Timesheet(i_Company_Id   => Po.Company_Id,
                             i_Filial_Id    => Po.Filial_Id,
                             i_Timesheet_Id => Po.Timesheet_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs is
  begin
    for Cmp in (select c.Company_Id
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Transform_Potential_Outputs(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  
    Dbms_Mview.Refresh('Htt_Employee_Monthly_Attendances_Mv', --
                       Atomic_Refresh => true);
  end;

  ----------------------------------------------------------------------------------------------------
  -- adds i_begin_date - 1 and i_end_date + 1 to dirty timesheets
  -- sets shift begin/end values to null if its shift is flexible and not locked
  -- %warning
  -- timesheets at i_begin_date - 1 and i_end_date + 1 should be removed from dirty timesheets before any fact generation
  Procedure Update_Border_Timesheet_Shifts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Add_Callback boolean := true
  ) is
  begin
    update Htt_Timesheets q
       set q.Shift_Begin_Time = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Shift_Begin_Time, null),
           q.Input_Border     = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Input_Border, null),
           q.Shift_End_Time   = Decode(q.Timesheet_Date, i_End_Date + 1, q.Shift_End_Time, null),
           q.Output_Border    = Decode(q.Timesheet_Date, i_End_Date + 1, q.Output_Border, null)
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date in (i_Begin_Date - 1, i_End_Date + 1)
       and not exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = q.Company_Id
               and Tl.Filial_Id = q.Filial_Id
               and Tl.Staff_Id = q.Staff_Id
               and Tl.Timesheet_Date = q.Timesheet_Date)
       and q.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible;
  
    Make_Dirty_Timesheets(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Staff_Id     => i_Staff_Id,
                          i_Dates        => Array_Date(i_Begin_Date - 1, i_End_Date + 1),
                          i_Add_Callback => i_Add_Callback);
  end;

  ----------------------------------------------------------------------------------------------------
  -- updates shift begin/end and input/output borders for dirty timesheets with flexible shift 
  -- shift is determined as flexible if it is null at current moment
  -- deletes locked timesheets from dirty timesheets after updating shifts

  -- %raises Htt_Error.Raise_107 when end_time and begin_time for consecutive days intersect

  -- shift is calculated as middle between end_time and begin_time of consecutive days
  -- shift for work day is calculated as (24 - full_plan)/2 from begin/end_time if previous/next day is rest day
  -- shift for rest day is set to the shift of its neighbour
  -- shift between two rest days is set to the start/end of day
  -- input border is set to min(shift, merger)
  -- output border is set to max(shift, merger)
  -- merger appears when difference between end_time and begin_time of consecutive days is less than 30 minutes
  -- merger is set to shift +/- 15 minutes 

  -- flexible schedule guarantees that shift borders will not intersect between timesheets

  -- %example 1
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 09:00;
  -- then shift_begin_time := 01.01.2023 18:00 + (02.01.2023 09:00 - 01.01.2023 18:00) / 2;
  -- meaning shift_begin_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- %example 2
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next day to be rest day
  -- then shift_end_time := 01.01.2023 18:00 + (24 - (01.01.2023 18:00 - 01.01.2023 09:00)) / 2;
  -- meaning shift_end_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- not necessarily shift borders will fall at same hours every day
  -- this is easily seen in shifts with day/schedule

  -- %example 3
  -- let prev_end   := 31.12.2022 09:00;
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 18:00;
  -- then
  -- shift_end_time := 01.01.2023 18:00 + (02.01.2023 18:00 - 01.01.2023 18:00) / 2;
  -- shift_end_time := 01.01.2023 18:00 + 12 hours := 02.01.2023 06:00;
  -- and 
  -- shift_begin_time := 01.01.2023 09:00 - (01.01.2023 09:00 - 31.12.2022 09:00) / 2;
  -- shift_begin_time := 01.01.2023 09:00 - 12 hours := 31.01.2023 21:00;
  Procedure Adjust_Flexible_Shifts is
    --------------------------------------------------
    Procedure Assert_Nonintersecting_Work_Time is
      v_Company_Id     number;
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Begin_Time     date;
      v_End_Time       date;
    begin
      with Timesheets as
       (select Tt.Company_Id,
               Tt.Filial_Id,
               Tt.Staff_Id,
               Tt.Timesheet_Date,
               Tt.Begin_Time,
               Tt.End_Time,
               Tt.Shift_Begin_Time,
               Tt.Shift_End_Time
          from Htt_Timesheets Tt
         where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
               (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                  from Htt_Dirty_Timesheets Dt))
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Begin_Time,
             (select q.End_Time
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1)
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Begin_Time, v_End_Time
        from Timesheets p
       where exists (select 1
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1
                 and q.End_Time > p.Begin_Time)
         and Rownum = 1;
    
      Htt_Error.Raise_107(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                   i_Filial_Id  => v_Filial_Id,
                                                                   i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date => v_Timesheet_Date,
                          i_Begin_Time     => v_Begin_Time,
                          i_End_Time       => v_End_Time);
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Nonintersecting_Work_Time;
  
    update Htt_Timesheets Tt
       set (Tt.Shift_Begin_Time, Tt.Shift_End_Time, Tt.Input_Border, Tt.Output_Border) =
           (select Nvl(Tt.Shift_Begin_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin,
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Shift_End_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End,
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1)),
                   Nvl(Tt.Input_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Output_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1))
              from (select Qr.Timesheet_Date,
                           Qr.Day_Kind,
                           -- if next_begin - end_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Next_Begin - Qr.End_Time) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Output_Merger_Coef,
                           -- if begin_time - prev_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Begin_Time - Qr.Prev_End) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Input_Merger_Coef,
                           Qr.Begin_Time - (Qr.Begin_Time - Qr.Prev_End) / 2 Work_Work_Shift_Begin,
                           Qr.End_Time + (Qr.Next_Begin - Qr.End_Time) / 2 Work_Work_Shift_End,
                           -- current day rest, previous day work
                           Qr.Prev_End +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Prev_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_Begin,
                           -- current day rest, next day work
                           Qr.Next_Begin -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Next_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_End,
                           -- current day work, previous day rest
                           Qr.Begin_Time -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_Begin,
                           -- current day work, next day rest
                           Qr.End_Time +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_End
                      from (select Cr.Company_Id,
                                   Cr.Filial_Id,
                                   Cr.Timesheet_Id,
                                   Cr.Timesheet_Date,
                                   Cr.Day_Kind,
                                   Cr.Begin_Time,
                                   Cr.End_Time,
                                   (Cr.End_Time - Cr.Begin_Time) * 24 * 3600 Full_Time,
                                   Cr.Shift_Begin_Time,
                                   Cr.Shift_End_Time,
                                   Cr.Input_Border,
                                   Cr.Output_Border,
                                   Pv.End_Time Prev_End,
                                   (Pv.End_Time - Pv.Begin_Time) * 24 * 3600 Prev_Plan,
                                   Nx.Begin_Time Next_Begin,
                                   (Nx.End_Time - Nx.Begin_Time) * 24 * 3600 Next_Plan
                              from Htt_Timesheets Cr
                              left join Htt_Timesheets Pv
                                on Pv.Company_Id = Cr.Company_Id
                               and Pv.Filial_Id = Cr.Filial_Id
                               and Pv.Staff_Id = Cr.Staff_Id
                               and Pv.Timesheet_Date = Cr.Timesheet_Date - 1
                              left join Htt_Timesheets Nx
                                on Nx.Company_Id = Cr.Company_Id
                               and Nx.Filial_Id = Cr.Filial_Id
                               and Nx.Staff_Id = Cr.Staff_Id
                               and Nx.Timesheet_Date = Cr.Timesheet_Date + 1
                             where (Cr.Company_Id, Cr.Filial_Id, Cr.Timesheet_Id) in
                                   (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                                      from Htt_Dirty_Timesheets Dt)) Qr
                     where Qr.Company_Id = Tt.Company_Id
                       and Qr.Filial_Id = Tt.Filial_Id
                       and Qr.Timesheet_Id = Tt.Timesheet_Id) Upd)
     where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
           (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
              from Htt_Dirty_Timesheets Dt
             where Dt.Locked = 'N')
       and Tt.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible
       and (Tt.Shift_Begin_Time is null or Tt.Shift_End_Time is null);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Helpers_Save is
  begin
    delete Htt_Timesheet_Helpers q
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = q.Company_Id
               and Dt.Filial_Id = q.Filial_Id
               and Dt.Timesheet_Id = q.Timesheet_Id);
  
    -- see: https://community.oracle.com/tech/developers/discussion/2526535/reg-sys-guid
    insert into Htt_Timesheet_Helpers Th
      (Th.Company_Id,
       Th.Filial_Id,
       Th.Staff_Id,
       Th.Interval_Date,
       Th.Timesheet_Id,
       Th.Day_Kind,
       Th.Shift_Begin_Time,
       Th.Shift_End_Time,
       Th.Input_Border,
       Th.Output_Border)
      select Qr.Company_Id,
             Qr.Filial_Id,
             Staff_Id,
             Trunc(Qr.Input_Border) + level - 1 Interval_Date,
             Qr.Timesheet_Id,
             Qr.Day_Kind,
             Qr.Shift_Begin_Time,
             Qr.Shift_End_Time,
             Qr.Input_Border,
             Qr.Output_Border
        from (select Tt.*
                from Htt_Timesheets Tt
               where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
                     (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                        from Htt_Dirty_Timesheets Dt)) Qr
      connect by level <= Trunc(Qr.Output_Border) - Trunc(Qr.Input_Border) + 1
             and Qr.Timesheet_Id = prior Qr.Timesheet_Id
             and prior Sys_Guid() is not null
             and Trunc(Qr.Input_Border) + level - 1 < Qr.Output_Border;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Plans is
    r_Swapped_Date  Htt_Change_Days%rowtype;
    v_Swap_Distance number;
  begin
    for r in (select d.*,
                     t.Timesheet_Id,
                     t.Schedule_Id,
                     (select count(*)
                        from Htt_Schedule_Day_Marks Dm
                       where Dm.Company_Id = t.Company_Id
                         and Dm.Filial_Id = t.Filial_Id
                         and Dm.Schedule_Id = t.Schedule_Id
                         and Dm.Schedule_Date = Nvl(d.Swapped_Date, d.Change_Date)) Planned_Marks,
                     t.Schedule_Kind
                from Htt_Change_Days d
                join Htt_Timesheets t
                  on d.Company_Id = t.Company_Id
                 and d.Filial_Id = t.Filial_Id
                 and d.Staff_Id = t.Staff_Id
                 and d.Change_Date = t.Timesheet_Date
               where exists (select *
                        from Htt_Dirty_Timesheets Dt
                       where t.Company_Id = Dt.Company_Id
                         and t.Filial_Id = Dt.Filial_Id
                         and t.Timesheet_Id = Dt.Timesheet_Id)
                 and exists (select *
                        from Htt_Plan_Changes Pc
                       where Pc.Company_Id = d.Company_Id
                         and Pc.Filial_Id = d.Filial_Id
                         and Pc.Change_Id = d.Change_Id
                         and Pc.Status = Htt_Pref.c_Change_Status_Completed))
    loop
      if r.Day_Kind is null then
        r_Swapped_Date := z_Htt_Change_Days.Load(i_Company_Id  => r.Company_Id,
                                                 i_Filial_Id   => r.Filial_Id,
                                                 i_Staff_Id    => r.Staff_Id,
                                                 i_Change_Date => r.Swapped_Date,
                                                 i_Change_Id   => r.Change_Id);
      
        v_Swap_Distance := r.Change_Date - r.Swapped_Date;
      
        r.Day_Kind         := r_Swapped_Date.Day_Kind;
        r.Begin_Time       := r_Swapped_Date.Begin_Time + v_Swap_Distance;
        r.End_Time         := r_Swapped_Date.End_Time + v_Swap_Distance;
        r.Break_Enabled    := r_Swapped_Date.Break_Enabled;
        r.Break_Begin_Time := r_Swapped_Date.Break_Begin_Time + v_Swap_Distance;
        r.Break_End_Time   := r_Swapped_Date.Break_End_Time + v_Swap_Distance;
        r.Plan_Time        := r_Swapped_Date.Plan_Time;
        r.Full_Time        := r_Swapped_Date.Full_Time;
      end if;
    
      z_Htt_Timesheets.Update_One(i_Company_Id       => r.Company_Id,
                                  i_Filial_Id        => r.Filial_Id,
                                  i_Timesheet_Id     => r.Timesheet_Id,
                                  i_Day_Kind         => Option_Varchar2(r.Day_Kind),
                                  i_Begin_Time       => Option_Date(r.Begin_Time),
                                  i_End_Time         => Option_Date(r.End_Time),
                                  i_Break_Enabled    => Option_Varchar2(r.Break_Enabled),
                                  i_Break_Begin_Time => Option_Date(r.Break_Begin_Time),
                                  i_Break_End_Time   => Option_Date(r.Break_End_Time),
                                  i_Plan_Time        => Option_Number(r.Plan_Time),
                                  i_Full_Time        => Option_Number(r.Full_Time),
                                  i_Planned_Marks    => Option_Number(r.Planned_Marks),
                                  i_Done_Marks       => Option_Number(0),
                                  i_Shift_Begin_Time => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Shift_End_Time   => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Input_Border     => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Output_Border    => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end);
    
      delete Htt_Timesheet_Marks q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Timesheet_Id = r.Timesheet_Id;
    
      if Is_Individual_Staff_Schedule(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Schedule_Id => r.Schedule_Id) then
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time,
                 Dm.End_Time,
                 'N'
            from Htt_Staff_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Staff_Id = r.Staff_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        select count(*)
          into r.Planned_Marks
          from Htt_Staff_Schedule_Day_Marks Sd
         where Sd.Company_Id = r.Company_Id
           and Sd.Filial_Id = r.Filial_Id
           and Sd.Staff_Id = r.Staff_Id
           and Sd.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        z_Htt_Timesheets.Update_One(i_Company_Id    => r.Company_Id,
                                    i_Filial_Id     => r.Filial_Id,
                                    i_Timesheet_Id  => r.Timesheet_Id,
                                    i_Planned_Marks => Option_Number(r.Planned_Marks));
      else
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time,
                 Dm.End_Time,
                 'N'
            from Htt_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Schedule_Id = r.Schedule_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      end if;
    
      Update_Border_Timesheet_Shifts(i_Company_Id   => r.Company_Id,
                                     i_Filial_Id    => r.Filial_Id,
                                     i_Staff_Id     => r.Staff_Id,
                                     i_Begin_Date   => r.Change_Date,
                                     i_End_Date     => r.Change_Date,
                                     i_Add_Callback => false);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Request_Facts is
  begin
    -- remove old requests
    delete Htt_Timesheet_Requests Tr
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tr.Company_Id
               and t.Filial_Id = Tr.Filial_Id
               and t.Timesheet_Id = Tr.Timesheet_Id);
  
    -- add requests according to new plan
    insert into Htt_Timesheet_Requests Tr
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date = t.Timesheet_Date
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type in
             (Htt_Pref.c_Request_Type_Full_Day, Htt_Pref.c_Request_Type_Multiple_Days);
  
    insert into Htt_Timesheet_Requests Tr
      select distinct t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date between Trunc(t.Shift_Begin_Time) and Trunc(t.Shift_End_Time)
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day
         and Rq.Begin_Time < t.Shift_End_Time
         and Rq.End_Time >= t.Shift_Begin_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Track_Facts(p_Tracks in out Htt_Pref.Track_Nt) is
    v_Old_Tracks Htt_Pref.Track_Nt;
  begin
    -- remove old tracks
    delete Htt_Timesheet_Tracks Tt
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tt.Company_Id
               and t.Filial_Id = Tt.Filial_Id
               and t.Timesheet_Id = Tt.Timesheet_Id)
    returning Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id bulk collect into v_Old_Tracks;
  
    -- add new tracks according to new plan
    insert into Htt_Timesheet_Tracks Tt
      (Company_Id,
       Filial_Id,
       Timesheet_Id,
       Track_Id,
       Track_Datetime,
       Track_Type,
       Track_Used,
       Trans_Input,
       Trans_Output,
       Trans_Check)
      select Tr.Company_Id,
             Tr.Filial_Id,
             t.Timesheet_Id,
             Tr.Track_Id,
             Tr.Track_Datetime,
             Tr.Track_Type,
             'Y' Track_Used,
             Tr.Trans_Input,
             Tr.Trans_Output,
             Tr.Trans_Check
        from Htt_Timesheets t
        join Htt_Tracks Tr
          on Tr.Company_Id = t.Company_Id
         and Tr.Filial_Id = t.Filial_Id
         and Tr.Person_Id = t.Employee_Id
         and Tr.Track_Date between Trunc(t.Input_Border) and Trunc(t.Output_Border)
         and Tr.Track_Datetime >= t.Input_Border
         and Tr.Track_Datetime < t.Output_Border
         and Tr.Is_Valid = 'Y'
       where (t.Company_Id, t.Filial_Id, t.Timesheet_Id) in
             (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                from Htt_Dirty_Timesheets Dt);
  
    select Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id
      bulk collect
      into p_Tracks
      from Htt_Timesheet_Tracks Tt
      join Htt_Dirty_Timesheets Dt
        on Tt.Company_Id = Dt.Company_Id
       and Tt.Filial_Id = Dt.Filial_Id
       and Tt.Timesheet_Id = Dt.Timesheet_Id
    union
    select Ot.Company_Id, Ot.Filial_Id, Ot.Track_Id
      from table(v_Old_Tracks) Ot;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Approve_Timesheet_Marks is
  begin
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'N'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id);
  
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'Y'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id
               and exists
             (select *
                      from Htt_Timesheet_Tracks Tt
                     where Tt.Company_Id = t.Company_Id
                       and Tt.Filial_Id = t.Filial_Id
                       and Tt.Timesheet_Id = t.Timesheet_Id
                       and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                       and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time));
  
    update Htt_Timesheets t
       set t.Done_Marks =
           (select count(*)
              from Htt_Timesheet_Marks Tm
             where Tm.Company_Id = t.Company_Id
               and Tm.Filial_Id = t.Filial_Id
               and Tm.Timesheet_Id = t.Timesheet_Id
               and Tm.Done = 'Y')
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = t.Company_Id
               and Dt.Filial_Id = t.Filial_Id
               and Dt.Timesheet_Id = t.Timesheet_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets is
    v_Tracks Htt_Pref.Track_Nt;
  
    -------------------------------------------------- 
    Procedure Track_Update_Status is
    begin
      forall i in 1 .. v_Tracks.Count
        update Htt_Tracks t
           set t.Status =
               (select case
                          when Track_Count = 0 then
                           Htt_Pref.c_Track_Status_Draft
                          when Used_Count = 0 then
                           Htt_Pref.c_Track_Status_Not_Used
                          when Used_Count < Track_Count then
                           Htt_Pref.c_Track_Status_Partially_Used
                          else
                           Htt_Pref.c_Track_Status_Used
                        end Status
                  from (select count(*) Track_Count, --
                               count(Nullif(Tt.Track_Used, 'N')) Used_Count
                          from Htt_Tracks q
                          join Htt_Timesheet_Tracks Tt
                            on q.Company_Id = Tt.Company_Id
                           and q.Filial_Id = Tt.Filial_Id
                           and q.Track_Id = Tt.Track_Id
                         where q.Company_Id = v_Tracks(i).Company_Id
                           and q.Filial_Id = v_Tracks(i).Filial_Id
                           and q.Track_Id = v_Tracks(i).Track_Id))
         where t.Company_Id = v_Tracks(i).Company_Id
           and t.Filial_Id = v_Tracks(i).Filial_Id
           and t.Track_Id = v_Tracks(i).Track_Id;
    end;
  begin
    Revise_Timesheet_Plans;
  
    Adjust_Flexible_Shifts;
  
    delete Htt_Dirty_Timesheets Dt
     where Dt.Locked = 'Y';
  
    Timesheet_Helpers_Save;
  
    Revise_Timesheet_Request_Facts;
  
    Revise_Timesheet_Track_Facts(v_Tracks);
  
    Approve_Timesheet_Marks;
  
    Gen_Timesheet_Facts;
  
    Track_Update_Status;
  
    -- need to remove
    delete Htt_Dirty_Timesheets;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change       Htt_Plan_Changes%rowtype;
    v_Change_Dates Array_Date;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    select Cd.Change_Date
      bulk collect
      into v_Change_Dates
      from Htt_Change_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Change_Id = i_Change_Id;
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Htt_Util.Assert_Timesheet_Locks(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => r_Change.Staff_Id,
                                      i_Dates      => v_Change_Dates);
    
      Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => r_Change.Staff_Id,
                            i_Dates      => v_Change_Dates);
    else
      -- works when plan change is cancelled from completed status
      for r in (select t.*
                  from Htt_Timesheets t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Staff_Id = r_Change.Staff_Id
                   and t.Timesheet_Date member of v_Change_Dates)
      loop
        Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                           i_Filial_Id      => i_Filial_Id,
                           i_Staff_Id       => r.Staff_Id,
                           i_Schedule_Id    => r.Schedule_Id,
                           i_Calendar_Id    => r.Calendar_Id,
                           i_Timesheet_Date => r.Timesheet_Date,
                           i_Schedule_Kind  => r.Schedule_Kind,
                           i_Track_Duration => r.Track_Duration / 60,
                           i_Count_Late     => r.Count_Late,
                           i_Count_Early    => r.Count_Early,
                           i_Count_Lack     => r.Count_Lack,
                           i_Count_Free     => r.Count_Free);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Only_Insert boolean := false
  ) is
  begin
    if not i_Only_Insert then
      delete Htt_Timesheet_Marks q
       where q.Company_Id = i_Timesheet.Company_Id
         and q.Filial_Id = i_Timesheet.Filial_Id
         and q.Timesheet_Id = i_Timesheet.Timesheet_Id;
    end if;
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             i_Timesheet.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Timesheet.Company_Id
         and Dm.Filial_Id = i_Timesheet.Filial_Id
         and Dm.Schedule_Id = i_Timesheet.Schedule_Id
         and Dm.Schedule_Date = i_Timesheet.Timesheet_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             t.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Timesheets t
        join Htt_Schedule_Day_Marks Dm
          on Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = t.Schedule_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Staff_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Staff_Id = t.Staff_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Robot_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id in
           (select t.Timesheet_Id
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Robot_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Robot_Id = i_Robot_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swap
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Change_Id   number,
    i_Timesheet   Htt_Timesheets%rowtype
  ) is
    v_Swap_Distance number := i_Change_Date - i_Timesheet.Timesheet_Date;
  begin
    z_Htt_Change_Days.Update_One(i_Company_Id       => i_Company_Id,
                                 i_Filial_Id        => i_Filial_Id,
                                 i_Staff_Id         => i_Staff_Id,
                                 i_Change_Date      => i_Change_Date,
                                 i_Change_Id        => i_Change_Id,
                                 i_Day_Kind         => Option_Varchar2(i_Timesheet.Day_Kind),
                                 i_Swapped_Date     => Option_Date(i_Timesheet.Timesheet_Date),
                                 i_Begin_Time       => Option_Date(i_Timesheet.Begin_Time +
                                                                   v_Swap_Distance),
                                 i_End_Time         => Option_Date(i_Timesheet.End_Time +
                                                                   v_Swap_Distance),
                                 i_Break_Enabled    => Option_Varchar2(i_Timesheet.Break_Enabled),
                                 i_Break_Begin_Time => Option_Date(i_Timesheet.Break_Begin_Time +
                                                                   v_Swap_Distance),
                                 i_Break_End_Time   => Option_Date(i_Timesheet.Break_End_Time +
                                                                   v_Swap_Distance),
                                 i_Plan_Time        => Option_Number(i_Timesheet.Plan_Time),
                                 i_Full_Time        => Option_Number(i_Timesheet.Full_Time));
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Timesheet.Staff_Id,
                          i_Dates      => Array_Date(i_Change_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swaps
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    v_Dirty_Dates Array_Date;
  begin
    update Htt_Change_Days Cd
       set (Cd.Day_Kind,
            Cd.Begin_Time,
            Cd.End_Time,
            Cd.Break_Enabled,
            Cd.Break_Begin_Time,
            Cd.Break_End_Time,
            Cd.Plan_Time,
            Cd.Full_Time) =
           (select t.Day_Kind,
                   t.Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_Enabled,
                   t.Break_Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Plan_Time,
                   t.Full_Time
              from Htt_Timesheets t
             where t.Company_Id = Cd.Company_Id
               and t.Filial_Id = Cd.Filial_Id
               and t.Staff_Id = Cd.Staff_Id
               and t.Timesheet_Date = Cd.Swapped_Date)
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Staff_Id = i_Staff_Id
       and Cd.Swapped_Date between i_Begin_Date and i_End_Date
    returning Cd.Change_Date bulk collect into v_Dirty_Dates;
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Dates      => v_Dirty_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype) is
    r_Track Htt_Tracks%rowtype;
  
    v_Timesheet_Id number;
  
    v_Track_Ids     Array_Number;
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Id_Aat;
  begin
    delete Htt_Timesheet_Tracks q
     where q.Company_Id = i_Timesheet.Company_Id
       and q.Filial_Id = i_Timesheet.Filial_Id
       and q.Timesheet_Id = i_Timesheet.Timesheet_Id
    returning q.Track_Id bulk collect into v_Track_Ids;
  
    z_Htt_Timesheets.Delete_One(i_Company_Id   => i_Timesheet.Company_Id,
                                i_Filial_Id    => i_Timesheet.Filial_Id,
                                i_Timesheet_Id => i_Timesheet.Timesheet_Id);
  
    for i in 1 .. v_Track_Ids.Count
    loop
      r_Track := z_Htt_Tracks.Take(i_Company_Id => i_Timesheet.Company_Id,
                                   i_Filial_Id  => i_Timesheet.Filial_Id,
                                   i_Track_Id   => v_Track_Ids(i));
    
      if r_Track.Is_Valid = 'Y' then
        v_Timesheet_Ids := Find_Track_Timesheets(i_Company_Id     => i_Timesheet.Company_Id,
                                                 i_Filial_Id      => i_Timesheet.Filial_Id,
                                                 i_Staff_Id       => i_Timesheet.Staff_Id,
                                                 i_Track_Datetime => r_Track.Track_Datetime);
      
        for j in 1 .. v_Timesheet_Ids.Count
        loop
          f_Timesheet_Sets(v_Timesheet_Ids(j)) := true;
        end loop;
      end if;
    end loop;
  
    v_Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet_Id is not null
    loop
      Make_Dirty_Timesheet(i_Company_Id   => i_Timesheet.Company_Id,
                           i_Filial_Id    => i_Timesheet.Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Id);
    
      v_Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Blocking_Timebook
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Hpr_Timebooks%rowtype is
    r_Locked_Date Hpr_Timesheet_Locks%rowtype;
  begin
    r_Locked_Date := z_Hpr_Timesheet_Locks.Load(i_Company_Id     => i_Company_Id,
                                                i_Filial_Id      => i_Filial_Id,
                                                i_Staff_Id       => i_Staff_Id,
                                                i_Timesheet_Date => i_Timesheet_Date);
  
    return z_Hpr_Timebooks.Load(i_Company_Id  => r_Locked_Date.Company_Id,
                                i_Filial_Id   => r_Locked_Date.Filial_Id,
                                i_Timebook_Id => r_Locked_Date.Timebook_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) return Htt_Timesheets%rowtype is
    r_Schedule_Day       Htt_Schedule_Days%rowtype;
    r_Schedule           Htt_Schedules%rowtype;
    r_Staff_Schedule_Day Htt_Staff_Schedule_Days%rowtype;
    r_Robot_Schedule_Day Htt_Robot_Schedule_Days%rowtype;
    r_Schedule_Registry  Htt_Schedule_Registries%rowtype;
    r_Timebook           Hpr_Timebooks%rowtype;
    result               Htt_Timesheets%rowtype;
    v_Planned_Count      number;
  
    --------------------------------------------------
    Function Get_Robot_Schedule_Day
    (
      i_Company_Id        number,
      i_Filial_Id         number,
      i_Staff_Id          number,
      i_Robot_Schedule_Id number,
      i_Schedule_Date     date
    ) return Htt_Robot_Schedule_Days%rowtype is
      result Htt_Robot_Schedule_Days%rowtype;
    begin
      select p.*
        into result
        from Hpd_Agreements_Cache q
        join Htt_Robot_Schedule_Days p
          on p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = q.Robot_Id
         and p.Schedule_Date = i_Schedule_Date
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Schedule_Id = i_Robot_Schedule_Id
         and i_Schedule_Date between q.Begin_Date and q.End_Date;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => i_Company_Id,
                                   i_Filial_Id      => i_Filial_Id,
                                   i_Staff_Id       => i_Staff_Id,
                                   i_Timesheet_Date => i_Timesheet_Date) then
      r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => i_Timesheet_Date);
    
      Htt_Error.Raise_001(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => i_Timesheet_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    end if;
  
    if i_Schedule_Id =
       Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      r_Staff_Schedule_Day := z_Htt_Staff_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                             i_Filial_Id     => i_Filial_Id,
                                                             i_Staff_Id      => i_Staff_Id,
                                                             i_Schedule_Date => i_Timesheet_Date);
    
      if r_Staff_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Staff_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Staff_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Staff_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Staff_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Staff_Id = i_Staff_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Staff_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Staff_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Staff_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Staff_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Staff_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Staff_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Staff_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Staff_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Staff_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Staff_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Staff_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Staff_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    elsif i_Schedule_Id =
          Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      r_Robot_Schedule_Day := Get_Robot_Schedule_Day(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Robot_Schedule_Id => i_Schedule_Id,
                                                     i_Schedule_Date     => i_Timesheet_Date);
    
      if r_Robot_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Robot_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Robot_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Robot_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Robot_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Robot_Id = r_Robot_Schedule_Day.Robot_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Robot_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Robot_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Robot_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Robot_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Robot_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Robot_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Robot_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Robot_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Robot_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Robot_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Robot_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Robot_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    else
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => i_Schedule_Id);
    
      r_Schedule_Day := z_Htt_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Schedule_Id   => i_Schedule_Id,
                                                 i_Schedule_Date => i_Timesheet_Date);
    
      if r_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      select count(*)
        into v_Planned_Count
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = i_Schedule_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => i_Track_Duration * 60,
                            i_Schedule_Kind       => i_Schedule_Kind,
                            i_Count_Late          => i_Count_Late,
                            i_Count_Early         => i_Count_Early,
                            i_Count_Lack          => i_Count_Lack,
                            i_Count_Free          => i_Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule.End_Early_Time * 60);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Timesheet_Lock
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    select Tl.Timesheet_Date
      into v_Locked_Date
      from Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
       and Rownum = 1;
  
    r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Locked_Date);
  
    Htt_Error.Raise_002(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Timesheet_Date  => v_Locked_Date,
                        i_Timebook_Number => r_Timebook.Timebook_Number,
                        i_Timebook_Month  => r_Timebook.Month);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) is
    r_Plan         Htt_Timesheets%rowtype;
    r_Timesheet    Htt_Timesheets%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_Change_Ids   Array_Number;
    v_Change_Dates Array_Date;
  
    -------------------------------------------------- 
    Function Exist_Plan_Swap
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Swapped_Date date,
      o_Change_Ids   out Array_Number,
      o_Change_Dates out Array_Date
    ) return boolean is
    begin
      select Cd.Change_Id, Cd.Change_Date
        bulk collect
        into o_Change_Ids, o_Change_Dates
        from Htt_Change_Days Cd
       where Cd.Company_Id = i_Company_Id
         and Cd.Filial_Id = i_Filial_Id
         and Cd.Staff_Id = i_Staff_Id
         and Cd.Swapped_Date = i_Swapped_Date;
    
      return o_Change_Ids.Count > 0;
    end;
  begin
    z_Href_Staffs.Lock_Only(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id);
  
    r_Plan := Timesheet_Plan(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Schedule_Id    => i_Schedule_Id,
                             i_Calendar_Id    => i_Calendar_Id,
                             i_Timesheet_Date => i_Timesheet_Date,
                             i_Track_Duration => i_Track_Duration,
                             i_Schedule_Kind  => i_Schedule_Kind,
                             i_Count_Late     => i_Count_Late,
                             i_Count_Early    => i_Count_Early,
                             i_Count_Lack     => i_Count_Lack,
                             i_Count_Free     => i_Count_Free);
  
    -- delete timesheet when timetable is not set
    if r_Plan.Company_Id is null then
      if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Staff_Id       => i_Staff_Id,
                                  i_Timesheet_Date => i_Timesheet_Date,
                                  o_Timesheet      => r_Timesheet) then
      
        Timesheet_Delete(r_Timesheet);
      end if;
    
      return;
    end if;
  
    if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                i_Filial_Id      => i_Filial_Id,
                                i_Staff_Id       => i_Staff_Id,
                                i_Timesheet_Date => i_Timesheet_Date,
                                o_Timesheet      => r_Timesheet) then
      r_Timesheet.Schedule_Id         := r_Plan.Schedule_Id;
      r_Timesheet.Calendar_Id         := r_Plan.Calendar_Id;
      r_Timesheet.Day_Kind            := r_Plan.Day_Kind;
      r_Timesheet.Shift_Begin_Time    := r_Plan.Shift_Begin_Time;
      r_Timesheet.Shift_End_Time      := r_Plan.Shift_End_Time;
      r_Timesheet.Input_Border        := r_Plan.Input_Border;
      r_Timesheet.Output_Border       := r_Plan.Output_Border;
      r_Timesheet.Begin_Time          := r_Plan.Begin_Time;
      r_Timesheet.End_Time            := r_Plan.End_Time;
      r_Timesheet.Break_Enabled       := r_Plan.Break_Enabled;
      r_Timesheet.Break_Begin_Time    := r_Plan.Break_Begin_Time;
      r_Timesheet.Break_End_Time      := r_Plan.Break_End_Time;
      r_Timesheet.Plan_Time           := r_Plan.Plan_Time;
      r_Timesheet.Full_Time           := r_Plan.Full_Time;
      r_Timesheet.Track_Duration      := r_Plan.Track_Duration;
      r_Timesheet.Schedule_Kind       := r_Plan.Schedule_Kind;
      r_Timesheet.Count_Late          := r_Plan.Count_Late;
      r_Timesheet.Count_Early         := r_Plan.Count_Early;
      r_Timesheet.Count_Lack          := r_Plan.Count_Lack;
      r_Timesheet.Count_Free          := r_Plan.Count_Free;
      r_Timesheet.Gps_Turnout_Enabled := r_Plan.Gps_Turnout_Enabled;
      r_Timesheet.Gps_Use_Location    := r_Plan.Gps_Use_Location;
      r_Timesheet.Gps_Max_Interval    := r_Plan.Gps_Max_Interval;
      r_Timesheet.Planned_Marks       := r_Plan.Planned_Marks;
      r_Timesheet.Done_Marks          := r_Plan.Done_Marks;
      r_Timesheet.Allowed_Late_Time   := r_Plan.Allowed_Late_Time;
      r_Timesheet.Allowed_Early_Time  := r_Plan.Allowed_Early_Time;
      r_Timesheet.Begin_Late_Time     := r_Plan.Begin_Late_Time;
      r_Timesheet.End_Early_Time      := r_Plan.End_Early_Time;
    
      z_Htt_Timesheets.Update_Row(r_Timesheet);
    
      Timesheet_Marks_Save(r_Timesheet);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Timesheet.Company_Id,
                           i_Filial_Id    => r_Timesheet.Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      if Exist_Plan_Swap(i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Staff_Id     => i_Staff_Id,
                         i_Swapped_Date => i_Timesheet_Date,
                         o_Change_Ids   => v_Change_Ids,
                         o_Change_Dates => v_Change_Dates) then
        for i in 1 .. v_Change_Ids.Count
        loop
          Update_Timesheet_Plan_Swap(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Change_Date => v_Change_Dates(i),
                                     i_Change_Id   => v_Change_Ids(i),
                                     i_Timesheet   => r_Timesheet);
        end loop;
      end if;
    else
      r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id);
    
      r_Plan.Company_Id     := i_Company_Id;
      r_Plan.Filial_Id      := i_Filial_Id;
      r_Plan.Timesheet_Id   := Htt_Next.Timesheet_Id;
      r_Plan.Staff_Id       := i_Staff_Id;
      r_Plan.Employee_Id    := r_Staff.Employee_Id;
      r_Plan.Timesheet_Date := i_Timesheet_Date;
    
      z_Htt_Timesheets.Insert_Row(r_Plan);
    
      Timesheet_Marks_Save(i_Timesheet   => r_Plan, --
                           i_Only_Insert => true);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Plan.Company_Id,
                           i_Filial_Id    => r_Plan.Filial_Id,
                           i_Timesheet_Id => r_Plan.Timesheet_Id);
    end if;
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Timesheet_Date,
                                   i_End_Date   => i_Timesheet_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Schedule_Id = i_Schedule_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Schedule_Id = Sd.Schedule_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Schedule_Days Sd
             join Htt_Schedules s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Schedule_Id = Sd.Schedule_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Schedule_Id = i_Schedule_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    -- maybe just delete all timesheets 
    -- and insert them from source, removing merge statement
    -- need to check if unchanged timesheet_id is needed
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Robot_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Robot_Id = i_Robot_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Robot_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Robot_Id = Sd.Robot_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Robot_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Robot_Id = i_Robot_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Staff_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Staff_Id = i_Staff_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Staff_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Staff_Id = Sd.Staff_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Staff_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Staff_Id = i_Staff_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculate schedule change parts for every staff inside i_year
  -- determine schedule of staff inside every part
  -- if schedule is same as i_Schedule_Id
  -- generate timesheets for that part
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  ) is
    r_Schedule   Htt_Schedules%rowtype;
    v_Year_Begin date;
    v_Year_End   date;
  begin
    r_Schedule := z_Htt_Schedules.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    if Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Staff_Schedule) or
       Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      b.Raise_Fatal('htt_core.gen_timesheet_plan: yearly generation schedule for only odinary schedules');
    end if;
  
    v_Year_Begin := Trunc(to_date(i_Year, 'yyyy'), 'y');
    v_Year_End   := Add_Months(v_Year_Begin, 12) - 1;
  
    -- make schedule change intervals 
    -- for every staff of given year
    -- filter out unnecessary schedules  
    for r in (select Qr.Period_Begin, Nvl(Qr.Period_End - 1, v_Year_End) Period_End, Qr.Staff_Id
                from (select Greatest(p.Period, v_Year_Begin) Period_Begin,
                             Lead(p.Period) --
                             Over(partition by p.Staff_Id order by p.Period) Period_End,
                             p.Trans_Id,
                             p.Staff_Id
                        from Hpd_Agreements p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                         and (p.Period between v_Year_Begin and v_Year_End or
                             p.Period = (select max(Lp.Period)
                                            from Hpd_Agreements Lp
                                           where Lp.Company_Id = p.Company_Id
                                             and Lp.Filial_Id = p.Filial_Id
                                             and Lp.Staff_Id = p.Staff_Id
                                             and Lp.Trans_Type = p.Trans_Type
                                             and Lp.Period < v_Year_Begin))) Qr
                join Hpd_Trans_Schedules q
                  on q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Trans_Id = Qr.Trans_Id
                 and q.Schedule_Id = i_Schedule_Id
               order by Qr.Staff_Id, Qr.Period_Begin)
    loop
      Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Schedule_Id => i_Schedule_Id,
                            i_Begin_Date  => r.Period_Begin,
                            i_End_Date    => r.Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    for r in (select t.Staff_Id, t.Timesheet_Date, t.Schedule_Id
                from Htt_Timesheets t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Schedule_Id = i_Schedule_Id
                 and t.Timesheet_Date member of i_Dates)
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => r.Staff_Id,
                         i_Schedule_Id    => r.Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => r.Timesheet_Date,
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  ) is
    v_Official_Rest_Day varchar2(1) := 'N';
  begin
    if Htt_Util.Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Calendar_Id => i_Calendar_Id,
                                     i_Date        => i_Timesheet_Date) then
      v_Official_Rest_Day := 'Y';
    end if;
  
    o_Has_Fd_Request := false;
  
    select w.Request_Type, --
           w.Begin_Time,
           w.End_Time,
           k.Time_Kind_Id,
           Nvl(Tk.Parent_Id, Tk.Time_Kind_Id),
           k.Allow_Unused_Time
      bulk collect
      into o_Rq_Request_Types, --
           o_Rq_Begin_Dates,
           o_Rq_End_Dates,
           o_Rq_Time_Kind_Ids,
           o_Rq_Parent_Ids,
           o_Rq_Unused_Times
      from Htt_Timesheet_Requests q
      join Htt_Requests w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Request_Id = w.Request_Id
      join Htt_Request_Kinds k
        on k.Company_Id = w.Company_Id
       and k.Request_Kind_Id = w.Request_Kind_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = k.Company_Id
       and Tk.Time_Kind_Id = k.Time_Kind_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id
       and (k.Day_Count_Type <> Htt_Pref.c_Day_Count_Type_Production_Days or
           k.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
           v_Official_Rest_Day = 'N');
  
    o_Extra_Rq_Begin_Dates := Array_Date();
    o_Extra_Rq_End_Dates   := Array_Date();
    o_Extra_Rq_Begin_Dates.Extend(o_Rq_Begin_Dates.Count);
    o_Extra_Rq_End_Dates.Extend(o_Rq_Begin_Dates.Count);
  
    for i in 1 .. o_Rq_Request_Types.Count
    loop
      o_Extra_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Extra_Begin_Time);
      o_Extra_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_Extra_End_Time);
      o_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Begin_Time);
      o_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_End_Time);
    
      if o_Rq_Request_Types(i) != Htt_Pref.c_Request_Type_Part_Of_Day then
        o_Has_Fd_Request         := true;
        o_Fd_Rq_Time_Kind_Id     := o_Rq_Time_Kind_Ids(i);
        o_Fd_Request_Unused_Time := o_Rq_Unused_Times(i);
      
        o_Rq_Begin_Dates(i) := i_Begin_Time;
        o_Rq_End_Dates(i) := i_End_Time;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Insert_Timesheet_Overtime_Facts
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Timesheet_Id     number,
    i_Staff_Id         number,
    i_Timesheet_Date   date,
    i_Overtime_Seconds number
  ) is
    v_Free_Time             number;
    v_Free_Time_Kind_Id     number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    v_Overtime_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                           i_Filial_Id      => i_Filial_Id,
                                           i_Staff_Id       => i_Staff_Id,
                                           i_Timesheet_Date => i_Timesheet_Date,
                                           i_Time_Kind_Id   => v_Free_Time_Kind_Id);
  
    if v_Free_Time is null or i_Overtime_Seconds > v_Free_Time then
      Htt_Error.Raise_003(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id,
                                                                         i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date       => i_Timesheet_Date,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Overtime_Seconds -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    end if;
  
    z_Htt_Timesheet_Facts.Insert_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Time_Kind_Id,
                                     i_Fact_Value   => i_Overtime_Seconds);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  ) is
    v_Input     date;
    v_Output    date;
    v_Free_Time number := 0;
  
    v_Has_Request            boolean := false;
    v_Rest_Time_Kind_Pcode   varchar2(20);
    v_Request_Day_Count_Type varchar2(1);
    v_Allow_Unused_Time      varchar2(1);
    v_Request_Time_Kind_Id   number(20);
  begin
    -- calc input output parts
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    end loop;
  
    -- determine rest pcode
    case p_Timesheet.Day_Kind
      when Htt_Pref.c_Day_Kind_Holiday then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Holiday;
      when Htt_Pref.c_Day_Kind_Additional_Rest then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Additional_Rest;
      when Htt_Pref.c_Day_Kind_Nonworking then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Nonworking;
      else
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Rest;
    end case;
  
    if i_Requests_Exist then
      -- load full day resuest
      begin
        select Rk.Day_Count_Type, Rk.Time_Kind_Id, Rk.Allow_Unused_Time
          into v_Request_Day_Count_Type, v_Request_Time_Kind_Id, v_Allow_Unused_Time
          from Htt_Timesheet_Requests t
          join Htt_Requests q
            on q.Company_Id = t.Company_Id
           and q.Filial_Id = t.Filial_Id
           and q.Request_Id = t.Request_Id
          join Htt_Request_Kinds Rk
            on Rk.Company_Id = q.Company_Id
           and Rk.Request_Kind_Id = q.Request_Kind_Id
         where t.Company_Id = p_Timesheet.Company_Id
           and t.Filial_Id = p_Timesheet.Filial_Id
           and t.Timesheet_Id = p_Timesheet.Timesheet_Id
           and q.Request_Type <> Htt_Pref.c_Request_Type_Part_Of_Day;
      exception
        when No_Data_Found then
          null;
      end;
    
      -- save request if its saveable
      if v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days or
         v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Htt_Util.Is_Official_Rest_Day(i_Company_Id  => p_Timesheet.Company_Id,
                                           i_Filial_Id   => p_Timesheet.Filial_Id,
                                           i_Calendar_Id => p_Timesheet.Calendar_Id,
                                           i_Date        => p_Timesheet.Timesheet_Date) then
        Gen_Timesheet_Fact(p_Facts         => p_Facts,
                           i_Company_Id    => p_Timesheet.Company_Id,
                           i_Filial_Id     => p_Timesheet.Filial_Id,
                           i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                           i_Time_Kind_Id  => v_Request_Time_Kind_Id,
                           i_Fact_Value    => p_Timesheet.Plan_Time,
                           i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      
        v_Has_Request := true;
      end if;
    end if;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Request and v_Allow_Unused_Time = 'N' then
      v_Free_Time := 0;
    end if;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time := 0;
    end if;
  
    -- save rest fact only if no request exists this day
    if v_Rest_Time_Kind_Pcode <> Htt_Pref.c_Pcode_Time_Kind_Rest or not v_Has_Request then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => v_Rest_Time_Kind_Pcode),
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  
    -- save free time fact only when it exists
    if v_Free_Time > 0 then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                         i_Fact_Value    => v_Free_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  ) is
    v_Input      date;
    v_Output     date;
    v_Late_Input date := i_Late_Input;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time         number := 0;
    v_Excused_Late_Time number := 0;
  
    v_Lack_Time    number := 0;
    v_Omitted_Time number := 0;
  
    v_Extra_Begin_Late_Time   date := i_Begin_Late_Time +
                                      Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_Extra_Late_Time         number := 0;
    v_Excused_Extra_Late_Time number := 0;
  
    v_Request_Time          number := 0;
    v_Turnout_Requests_Time number := 0;
  
    v_Free_Time  number := 0;
    v_In_Time    number := 0;
    v_Beforework number := 0;
    v_Afterwork  number := 0;
    v_Lunchtime  number := 0;
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
    v_Plan_Time          number;
  begin
    v_Extra_Begin_Late_Time := Greatest(v_Extra_Begin_Late_Time, p_Timesheet.Shift_Begin_Time);
  
    -- TEMPORARY
    v_Plan_Time := p_Timesheet.Plan_Time;
  
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Extra_Begin_Late_Time,
                         i_Extra_End_Time         => p_Timesheet.End_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    end loop;
  
    --ignore late time with requests
    if not v_Has_Fd_Request and v_Late_Input is not null then
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        if v_Rq_Begin_Dates(i) between p_Timesheet.Begin_Time and v_Extra_Begin_Late_Time then
          v_Late_Input := null;
          exit;
        end if;
      end loop;
    end if;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
    
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        end loop;
      end if;
    end loop;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      -- eval full day request
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between Least(v_Extra_Begin_Late_Time, p_Timesheet.Begin_Time) and
         p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => i_Begin_Late_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                i_End_Time         => Least(i_Begin_Late_Time,
                                                                            v_Late_Input),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            v_Late_Input),
                                                i_Input            => v_Extra_Begin_Late_Time,
                                                i_Output           => Least(i_Begin_Late_Time,
                                                                            v_Late_Input));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                          i_End_Time         => Least(i_Begin_Late_Time,
                                                                                      v_Late_Input),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      v_Late_Input),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    else
      v_Late_Time := 0;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      v_Plan_Time := v_Plan_Time - v_Request_Time;
    
      if v_Rq_Unused_Times(i) = 'N' then
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      end if;
    
      -- Temporary solutions
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Plan_Time := v_Plan_Time + v_Rq_Intimes(i);
      end if;
    end loop;
    -- TEMPORARRY  
    v_Plan_Time := Greatest(v_Plan_Time, 0);
    v_In_Time   := Least(v_In_Time, v_Plan_Time);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        else
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      
        v_Turnout_Requests_Time := v_Turnout_Requests_Time + v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_In_Time := Least(v_In_Time, p_Timesheet.Plan_Time);
  
    if v_In_Time + v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
      if v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
        v_In_Time := 0;
      else
        v_In_Time := p_Timesheet.Plan_Time - v_Turnout_Requests_Time;
      end if;
    end if;
  
    v_Omitted_Time := Greatest(p_Timesheet.Plan_Time - v_In_Time - v_Turnout_Requests_Time, 0);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id <> v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        end if;
      
        v_Request_Time := Least(v_Request_Time, v_Omitted_Time);
        v_Omitted_Time := v_Omitted_Time - v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time := v_Omitted_Time - (v_Late_Time - v_Excused_Late_Time);
    end if;
  
    v_Late_Time := v_Late_Time + v_Extra_Late_Time - v_Excused_Late_Time -
                   v_Excused_Extra_Late_Time;
    v_Free_Time := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => 0,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free_Inside),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  ) is
    v_Input        date;
    v_Output       date;
    v_Late_Input   date := i_Late_Input;
    v_Early_Output date := i_Early_Output;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time  number := 0;
    v_Early_Time number := 0;
    v_Lack_Time  number := 0;
  
    v_Extra_Late_Time          number := 0;
    v_Extra_Early_Time         number := 0;
    v_Excused_Extra_Late_Time  number := 0;
    v_Excused_Extra_Early_Time number := 0;
  
    v_Excused_Late_Time  number := 0;
    v_Excused_Early_Time number := 0;
    v_Excused_Lack_Time  number := 0;
  
    v_Begin_Late interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_End_Early  interval day to second := Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
  
    v_Begin_Late_Time date := Greatest(p_Timesheet.Shift_Begin_Time,
                                       p_Timesheet.Begin_Time + v_Begin_Late);
    v_End_Early_Time  date := Least(p_Timesheet.Shift_End_Time, p_Timesheet.End_Time + v_End_Early);
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Request_Time      number := 0;
    v_Free_Time         number := 0;
    v_In_Time           number := 0;
    v_Beforework        number := 0;
    v_Afterwork         number := 0;
    v_Lunchtime         number := 0;
    v_Used_Request_Time number := 0;
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
  begin
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Begin_Late_Time,
                         i_Extra_End_Time         => v_End_Early_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    end loop;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        end loop;
      end if;
    end loop;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between v_Begin_Late_Time and p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => p_Timesheet.Begin_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                i_End_Time         => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            Least(v_Late_Input,
                                                                                  p_Timesheet.Begin_Time)),
                                                i_Input            => v_Begin_Late_Time,
                                                i_Output           => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                          i_End_Time         => Least(v_Late_Input,
                                                                                      p_Timesheet.Begin_Time),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      Least(v_Late_Input,
                                                                                            p_Timesheet.Begin_Time)),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- calculate early time
    if v_Early_Output is not null then
      p_Timesheet.Output_Time := v_Early_Output;
    
      v_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                           i_End_Time         => p_Timesheet.End_Time,
                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                          v_Early_Output),
                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                           i_Input            => v_Early_Output,
                                           i_Output           => p_Timesheet.End_Time);
    
      v_Extra_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_End_Time         => v_End_Early_Time,
                                                 i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                v_Early_Output),
                                                 i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                 i_Input            => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_Output           => v_End_Early_Time);
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Early_Time := v_Excused_Early_Time +
                                Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                                     i_End_Time         => p_Timesheet.End_Time,
                                                     i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                    v_Early_Output),
                                                     i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                     i_Input            => v_Rq_Begin_Dates(i),
                                                     i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Early_Time := v_Excused_Extra_Early_Time +
                                      Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                          p_Timesheet.End_Time),
                                                           i_End_Time         => v_End_Early_Time,
                                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                          Greatest(v_Early_Output,
                                                                                                   p_Timesheet.End_Time)),
                                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                           i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                           i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
      else
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      
        v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
      
        if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      end if;
    
      v_Used_Request_Time := v_Used_Request_Time + v_Request_Time;
    
      v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    -- calculate lack time
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time         := p_Timesheet.Plan_Time - v_In_Time - v_Late_Time - v_Early_Time;
      v_Excused_Lack_Time := v_Used_Request_Time - v_Excused_Late_Time - v_Excused_Early_Time;
    end if;
  
    -- eval result
    v_Early_Time := v_Early_Time - v_Excused_Early_Time + v_Extra_Early_Time -
                    v_Excused_Extra_Early_Time;
    v_Late_Time  := v_Late_Time - v_Excused_Late_Time + v_Extra_Late_Time -
                    v_Excused_Extra_Late_Time;
    v_Lack_Time  := v_Lack_Time - v_Excused_Lack_Time;
    v_Free_Time  := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => v_Early_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  ) is
    r_Timesheet Htt_Timesheets%rowtype;
  begin
    if i_Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly and
       i_Time_Kind_Id <>
       Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free) and
       i_Fact_Value > 86400 then
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id);
    
      Htt_Error.Raise_004(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                   i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                   i_Staff_Id   => r_Timesheet.Staff_Id),
                          i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                          i_Time_Kind_Name => z_Htt_Time_Kinds.Load(i_Company_Id => i_Company_Id, --
                                              i_Time_Kind_Id => i_Time_Kind_Id).Name);
    end if;
  
    Htt_Util.Timesheet_Fact_Add(o_Facts        => p_Facts,
                                i_Company_Id   => i_Company_Id,
                                i_Filial_Id    => i_Filial_Id,
                                i_Timesheet_Id => i_Timesheet_Id,
                                i_Time_Kind_Id => i_Time_Kind_Id,
                                i_Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timesheet_Facts(p_Facts in out nocopy Htt_Pref.Timesheet_Fact_Nt) is
  begin
    forall i in 1 .. p_Facts.Count
      insert into Htt_Timesheet_Facts Tf
      values
        (p_Facts(i).Company_Id,
         p_Facts(i).Filial_Id,
         p_Facts(i).Timesheet_Id,
         p_Facts(i).Time_Kind_Id,
         p_Facts(i).Fact_Value);
  
    p_Facts := Htt_Pref.Timesheet_Fact_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once

  -- merger transformation rules:
  -- <ul>
  --     <li>merger exists only with flexible schedules</li>
  --     <li>only two mergers per timesheet: input/output merger</li>
  --     <li>input merger exists only when previous day is working and ends within merger area</li>
  --     <li>output merger exists only when next day is working and starts within merger area</li>
  --     <li>input merger disabled when output exists in [shift_begin - merger_interval, shift_begin]</li>
  --     <li>input merger disabled when input exists in [shift_begin, shift_begin + merger_interval]</li>
  --     <li>output merger disabled when output exists in [shift_end - merger_interval, shift_end ]</li>
  --     <li>output merger disabled when input exists in [shift_end, shift_end + merger_interval]</li>
  --     <li>only first check that falls into merger area is transformed to merger</li>
  --     <li>these rules guarantee that merger will be last input and first output in merger area</li>
  -- </ul>

  -- input transformation rules:
  -- <ul>
  --     <li>input merger must be nonexistent</li>
  --     <li>must have trans_intput track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be first track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  -- </ul>

  -- output transformation rules:
  -- <ul>
  --     <li>output merger must be nonexistent</li>
  --     <li>must have trans_output track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be last track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  --     <li>must be different from track transformed to input</li>
  -- </ul>

  -- %example 1
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 02.01.2023 09:10; #check track type
  -- then
  -- track_1_type transformed to merger
  -- track_2_type transformed to merger

  -- %example 2
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger

  -- %example 3
  -- let begin_time := shift_begin := 31.12.2023 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger  

  -- %example 4
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type remains check
  -- track_2_type remains input

  -- %example 5
  -- let begin_time := shift_begin := 31.12.2022 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2022 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type transformed to input
  -- track_2_type remains input

  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  ) is
    v_Track             Htt_Pref.Timesheet_Track_Rt;
    v_Has_Input_Merger  boolean := false;
    v_Has_Output_Merger boolean := false;
    v_Allow_Trans_Input boolean := true;
    v_Input_Merger_Idx  number;
    v_Output_Merger_Idx number;
    v_Trans_Input_Idx   number;
    v_Trans_Output_Idx  number;
    v_Merger_Interval   interval day to second := Numtodsinterval(Htt_Pref.c_Default_Merge_Border,
                                                                  'second');
    v_Check_Trans_Idxs  Array_Number := Array_Number();
    v_Check_Trans_Type  varchar2(1);
  
    v_Trans_Track_Output_Idx number;
  
    --------------------------------------------------
    Procedure Transform_To_Check(i_Allow_Potential boolean := false) is
      v_Trans_Track Htt_Pref.Timesheet_Track_Rt;
    begin
      if v_Check_Trans_Idxs.Count = 0 then
        return;
      end if;
    
      for i in 1 .. v_Check_Trans_Idxs.Count - 1
      loop
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(i));
      
        v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Check;
      
        p_Tracks(v_Check_Trans_Idxs(i)) := v_Trans_Track;
      
        p_Trans_Tracks.Extend;
        p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
      end loop;
    
      if i_Allow_Potential then
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count));
      
        if v_Trans_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
           i_Timesheet.End_Time is not null and Greatest(v_Trans_Track.Track_Datetime,
                                                         Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                                                                   i_Filial_Id  => i_Timesheet.Filial_Id)) <
           i_Timesheet.End_Time then
          v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
        
          p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count)) := v_Trans_Track;
        
          p_Trans_Tracks.Extend;
          p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
        end if;
      end if;
    end;
  
    -------------------------------------------------- 
    Procedure Transform_Gps_Output is
      v_Transformable boolean := false;
    begin
      if i_Timesheet.Gps_Turnout_Enabled = 'N' or v_Output_Merger_Idx is not null then
        return;
      end if;
    
      v_Transformable := Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id,
                                                   i_Filial_Id  => i_Timesheet.Filial_Id) <
                         i_Timesheet.Output_Border;
    
      for i in 1 .. p_Tracks.Count
      loop
        v_Track := p_Tracks(i);
      
        continue when v_Track.Track_Datetime not between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Output and v_Transformable then
          v_Track.Track_Type := Htt_Pref.c_Track_Type_Gps_Output;
        
          p_Tracks(i) := v_Track;
        
          if v_Trans_Output_Idx = i then
            p_Trans_Tracks(v_Trans_Track_Output_Idx) := v_Track;
          else
            p_Trans_Tracks.Extend;
            p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
          end if;
        end if;
      end loop;
    end;
  
  begin
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      return;
    end if;
  
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      v_Has_Input_Merger  := i_Timesheet.Shift_Begin_Time <> i_Timesheet.Input_Border;
      v_Has_Output_Merger := i_Timesheet.Shift_End_Time <> i_Timesheet.Output_Border;
    end if;
  
    for i in 1 .. p_Tracks.Count
    loop
      v_Track := p_Tracks(i);
    
      if v_Has_Input_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Input_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_Begin_Time - v_Merger_Interval and
         i_Timesheet.Shift_Begin_Time + v_Merger_Interval then
        v_Input_Merger_Idx := i;
      end if;
    
      if v_Has_Output_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and Nvl(v_Input_Merger_Idx, -1) <> i and
         v_Output_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_End_Time - v_Merger_Interval and
         i_Timesheet.Shift_End_Time + v_Merger_Interval then
        v_Output_Merger_Idx := i;
      end if;
    
      if v_Allow_Trans_Input and --
         v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Trans_Input_Idx is null and
           v_Track.Trans_Input = 'Y' then
          v_Trans_Input_Idx := i;
        else
          v_Allow_Trans_Input := false;
        end if;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        v_Trans_Output_Idx := null;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and --
           v_Track.Trans_Output = 'Y' then
          v_Trans_Output_Idx := i;
        end if;
      end if;
    
      if v_Check_Trans_Idxs.Count > 0 and
         (not Fazo.Equal(v_Check_Trans_Type, v_Track.Track_Type) or v_Track.Trans_Check = 'N') then
        Transform_To_Check;
      
        v_Check_Trans_Idxs := Array_Number();
        v_Check_Trans_Type := null;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time and
         v_Track.Track_Type in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) and
         v_Track.Trans_Check = 'Y' then
        v_Check_Trans_Type := v_Track.Track_Type;
        Fazo.Push(v_Check_Trans_Idxs, i);
      end if;
    end loop;
  
    Transform_To_Check(true);
  
    if v_Input_Merger_Idx is not null then
      v_Track := p_Tracks(v_Input_Merger_Idx);
    
      p_Tracks(v_Input_Merger_Idx) := p_Tracks(1);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_Begin_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(1) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Input_Idx := null;
    
      if v_Input_Merger_Idx = v_Trans_Output_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Output_Merger_Idx is not null then
      v_Track := p_Tracks(v_Output_Merger_Idx);
    
      p_Tracks(v_Output_Merger_Idx) := p_Tracks(p_Tracks.Count);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_End_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(p_Tracks.Count) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Output_Idx := null;
    
      if v_Output_Merger_Idx = v_Trans_Input_Idx then
        v_Trans_Input_Idx := null;
      end if;
    end if;
  
    if v_Trans_Input_Idx is not null then
      v_Track := p_Tracks(v_Trans_Input_Idx);
    
      v_Track.Track_Type := Htt_Pref.c_Track_Type_Input;
    
      p_Tracks(v_Trans_Input_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      if v_Trans_Output_Idx = v_Trans_Input_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Trans_Output_Idx is not null then
      v_Track := p_Tracks(v_Trans_Output_Idx);
    
      if Greatest(v_Track.Track_Datetime,
                  Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                            i_Filial_Id  => i_Timesheet.Filial_Id)) >
         i_Timesheet.End_Time or i_Timesheet.End_Time is null then
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Output;
      else
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
      end if;
    
      p_Tracks(v_Trans_Output_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Track_Output_Idx := p_Trans_Tracks.Count;
    end if;
  
    Transform_Gps_Output;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Trans_Tracks   in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Tracks_Exist   boolean,
    i_Requests_Exist boolean,
    i_Timeoff_Tk_Id  number
  ) is
    v_Input          date;
    v_Time_Distance  number;
    v_Track_Duration number := p_Timesheet.Track_Duration;
  
    v_Begin_Late_Time  date := p_Timesheet.Begin_Time;
    v_Late_Input       date;
    v_Early_Output     date;
    v_First_Solo_Input date;
  
    v_Maybe_Late     boolean := p_Timesheet.Count_Late = 'Y';
    v_Maybe_Early    boolean := p_Timesheet.Count_Early = 'Y';
    v_End_Early_Time date := p_Timesheet.End_Time +
                             Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
    v_Begin_Late     interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time,
                                                               'second');
  
    v_Track  Htt_Pref.Timesheet_Track_Rt;
    v_Tracks Htt_Pref.Timesheet_Track_Nt;
  
    v_Inputs        Array_Date := Array_Date();
    v_Time_Parts    Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    v_Gps_Intervals Htt_Pref.Time_Part_Nt;
  
    --------------------------------------------------
    Function Gather_Gps_Track_Intervals return Htt_Pref.Time_Part_Nt is
      v_Interval  Htt_Pref.Time_Part_Rt;
      v_Intervals Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    
      --------------------------------------------------
      Function Is_In_Polygon(i_Track Htt_Pref.Gps_Track_Data_Rt) return boolean is
      begin
        if p_Timesheet.Gps_Use_Location = 'N' then
          return true;
        end if;
      
        for r in (select q.*
                    from Htt_Locations q
                   where q.Company_Id = p_Timesheet.Company_Id
                     and q.Location_Id in
                         (select Lp.Location_Id
                            from Htt_Location_Persons Lp
                           where Lp.Company_Id = p_Timesheet.Company_Id
                             and Lp.Filial_Id = p_Timesheet.Filial_Id
                             and Lp.Person_Id = p_Timesheet.Employee_Id)
                     and exists (select 1
                            from Htt_Location_Polygon_Vertices Pv
                           where Pv.Company_Id = q.Company_Id
                             and Pv.Location_Id = q.Location_Id))
        loop
          if Htt_Geo_Util.Is_Point_In_Polygon(i_Company_Id  => r.Company_Id,
                                              i_Location_Id => r.Location_Id,
                                              i_Point_Lat   => i_Track.Lat,
                                              i_Point_Lng   => i_Track.Lng) = 'Y' then
            return true;
          end if;
        end loop;
      
        return false;
      end;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return Htt_Pref.Time_Part_Nt();
      end if;
    
      v_Interval.Input_Time  := p_Timesheet.Begin_Time;
      v_Interval.Output_Time := p_Timesheet.Begin_Time;
    
      for r in (select q.*
                  from Htt_Util.Gps_Track_Datas(i_Company_Id => p_Timesheet.Company_Id,
                                                i_Filial_Id  => p_Timesheet.Filial_Id,
                                                i_Person_Id  => p_Timesheet.Employee_Id,
                                                i_Begin_Date => Trunc(p_Timesheet.Shift_Begin_Time),
                                                i_End_Date   => p_Timesheet.End_Time,
                                                i_Only_Gps   => 'N') q
                 where q.Track_Time between p_Timesheet.Begin_Time and p_Timesheet.End_Time
                 order by q.Track_Time)
      loop
        if Htt_Util.Time_Diff(i_Time1 => r.Track_Time, i_Time2 => v_Interval.Output_Time) <
           p_Timesheet.Gps_Max_Interval and Is_In_Polygon(r) then
          v_Interval.Output_Time := r.Track_Time;
        else
          if v_Interval.Input_Time <> v_Interval.Output_Time then
            v_Intervals.Extend;
            v_Intervals(v_Intervals.Count) := v_Interval;
          end if;
        
          v_Interval.Input_Time  := r.Track_Time;
          v_Interval.Output_Time := r.Track_Time;
        end if;
      end loop;
    
      if Htt_Util.Time_Diff(i_Time1 => p_Timesheet.End_Time, i_Time2 => v_Interval.Output_Time) <
         p_Timesheet.Gps_Max_Interval then
        v_Interval.Output_Time := p_Timesheet.End_Time;
      end if;
    
      if v_Interval.Input_Time <> v_Interval.Output_Time then
        v_Intervals.Extend;
        v_Intervals(v_Intervals.Count) := v_Interval;
      end if;
    
      return v_Intervals;
    end;
  
    --------------------------------------------------
    Function Trim_Time_Parts_By_Gps(i_Intervals Htt_Pref.Time_Part_Nt) return Htt_Pref.Time_Part_Nt is
      v_Gps_Intervals Htt_Pref.Time_Part_Nt;
    
      v_Track_Interval Htt_Pref.Time_Part_Rt;
      v_Gps_Interval   Htt_Pref.Time_Part_Rt;
      v_Interval       Htt_Pref.Time_Part_Rt;
    
      result Htt_Pref.Time_Part_Nt;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return i_Intervals;
      end if;
    
      if i_Intervals.Count = 0 then
        return i_Intervals;
      end if;
    
      result          := Htt_Pref.Time_Part_Nt();
      v_Gps_Intervals := Gather_Gps_Track_Intervals;
    
      for i in 1 .. i_Intervals.Count
      loop
        v_Track_Interval := i_Intervals(i);
      
        for j in 1 .. v_Gps_Intervals.Count
        loop
          v_Gps_Interval := v_Gps_Intervals(j);
        
          v_Interval.Input_Time  := Greatest(v_Gps_Interval.Input_Time, v_Track_Interval.Input_Time);
          v_Interval.Output_Time := Least(v_Gps_Interval.Output_Time, v_Track_Interval.Output_Time);
        
          if Htt_Util.Time_Diff(i_Time1 => v_Gps_Interval.Input_Time,
                                i_Time2 => v_Track_Interval.Input_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Track_Interval.Input_Time < v_Gps_Interval.Input_Time then
            v_Interval.Input_Time := v_Track_Interval.Input_Time;
          end if;
        
          if Htt_Util.Time_Diff(i_Time1 => v_Track_Interval.Output_Time,
                                i_Time2 => v_Gps_Interval.Output_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Gps_Interval.Output_Time < v_Track_Interval.Output_Time then
            v_Interval.Output_Time := v_Track_Interval.Output_Time;
          end if;
        
          if v_Interval.Input_Time < v_Interval.Output_Time then
            Result.Extend;
            result(Result.Count) := v_Interval;
          end if;
        end loop;
      end loop;
    
      return result;
    end;
  
  begin
    if p_Timesheet.Break_Enabled = 'N' then
      p_Timesheet.Break_Begin_Time := p_Timesheet.Begin_Time;
      p_Timesheet.Break_End_Time   := p_Timesheet.Begin_Time;
    end if;
  
    p_Timesheet.Input_Time  := null;
    p_Timesheet.Output_Time := null;
  
    if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
       p_Timesheet.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) then
      p_Timesheet.End_Time := p_Timesheet.Output_Border;
    end if;
  
    if i_Tracks_Exist then
      select Tt.Company_Id,
             Tt.Filial_Id,
             Tt.Timesheet_Id,
             Tt.Track_Id,
             Trunc(Tt.Track_Datetime, 'mi'),
             Tt.Track_Type,
             Tt.Trans_Input,
             Tt.Trans_Output,
             Tt.Trans_Check
        bulk collect
        into v_Tracks
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = p_Timesheet.Company_Id
         and Tt.Filial_Id = p_Timesheet.Filial_Id
         and Tt.Timesheet_Id = p_Timesheet.Timesheet_Id
       order by Tt.Track_Datetime,
                Decode(Tt.Track_Type,
                       Htt_Pref.c_Track_Type_Input,
                       1,
                       Htt_Pref.c_Track_Type_Output,
                       3,
                       2);
    
      if p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
         p_Timesheet.Plan_Time <=
         Htt_Util.Time_Diff(p_Timesheet.End_Time, p_Timesheet.Break_End_Time) then
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time, 'second');
      else
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time +
                                             Htt_Util.Time_Diff(p_Timesheet.Break_End_Time,
                                                                p_Timesheet.Break_Begin_Time),
                                             'second');
      end if;
    
      v_Begin_Late_Time := v_Begin_Late_Time + v_Begin_Late;
    
      if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Transform_Check_Tracks(p_Tracks       => v_Tracks,
                               p_Trans_Tracks => p_Trans_Tracks,
                               i_Timesheet    => p_Timesheet);
      end if;
    
      for i in 1 .. v_Tracks.Count
      loop
        v_Track := v_Tracks(i);
      
        if (v_Track.Track_Type = Htt_Pref.c_Track_Type_Input or
           v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = 1) and
           v_Track.Track_Datetime >= p_Timesheet.Input_Border and
           v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
        
          if p_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work and
             p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          elsif v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
                v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          end if;
        
          -- ignore late time
          if v_Track.Track_Datetime between p_Timesheet.Begin_Time and v_Begin_Late_Time and
             v_Begin_Late_Time > p_Timesheet.Begin_Time then
            v_Maybe_Late := false;
            v_Late_Input := null;
          end if;
        
          -- eval late time
          if v_Maybe_Late and v_Track.Track_Datetime > v_Begin_Late_Time and
             v_Track.Track_Datetime < p_Timesheet.End_Time then
            v_Late_Input := Nvl(v_Late_Input, v_Track.Track_Datetime);
          end if;
        
          Fazo.Push(v_Inputs, v_Track.Track_Datetime);
        elsif (v_Track.Track_Type in
              (Htt_Pref.c_Track_Type_Output, Htt_Pref.c_Track_Type_Gps_Output) or
              v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = v_Tracks.Count) and
              v_Inputs.Count > 0 then
        
          if v_Track.Track_Datetime >= p_Timesheet.Input_Border and
             v_Track.Track_Datetime < p_Timesheet.Shift_Begin_Time then
            p_Timesheet.Input_Time := null;
          end if;
        
          if v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
             v_Track.Track_Datetime <= p_Timesheet.Output_Border then
            for j in 1 .. v_Inputs.Count
            loop
              v_Input         := v_Inputs(j);
              v_Time_Distance := Htt_Util.Time_Diff(v_Track.Track_Datetime, v_Input);
              exit when v_Time_Distance <= v_Track_Duration;
            end loop;
          
            if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
               p_Timesheet.Input_Time between v_Input and v_Track.Track_Datetime then
              p_Timesheet.Input_Time := null;
            end if;
          
            if v_Time_Distance <= v_Track_Duration and
               (p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly or
               v_Input >= p_Timesheet.Shift_Begin_Time and v_Input < p_Timesheet.Shift_End_Time) then
              -- eval early time
              if v_Maybe_Early and v_Track.Track_Datetime < v_End_Early_Time and
                 v_Track.Track_Datetime >= p_Timesheet.Begin_Time then
                v_Early_Output := v_Track.Track_Datetime;
              end if;
            
              p_Timesheet.Input_Time := Least(Nvl(p_Timesheet.Input_Time, v_Input), v_Input);
            
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
                 p_Timesheet.Output_Time is null then
                p_Timesheet.Input_Time := v_Input;
              end if;
            
              p_Timesheet.Output_Time := v_Track.Track_Datetime;
            
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input := Greatest(v_Input, p_Timesheet.Shift_Begin_Time);
              end if;
            
              -- ignore late time
              if Least(p_Timesheet.Begin_Time, v_Begin_Late_Time) between v_Input and
                 v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.Begin_Time,
                                                                    p_Timesheet.Begin_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.Begin_Time,
                                                                       p_Timesheet.Begin_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Late := false;
                v_Late_Input := null;
              end if;
            
              -- ignore early time
              if v_Input < v_End_Early_Time and v_End_Early_Time <= v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.End_Time,
                                                                    p_Timesheet.End_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.End_Time,
                                                                       p_Timesheet.End_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Early  := false;
                v_Early_Output := null;
              end if;
            
              /*
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input                := Least(Greatest(v_Input, p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
                v_Track.Track_Datetime := Least(Greatest(v_Track.Track_Datetime,
                                                         p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
              end if;
              */
            
              if v_Track.Track_Type <> Htt_Pref.c_Track_Type_Gps_Output then
                v_Time_Parts.Extend;
                v_Time_Parts(v_Time_Parts.Count) := Htt_Pref.Time_Part_Rt(v_Input,
                                                                          v_Track.Track_Datetime);
              end if;
            end if;
          end if;
        
          v_Inputs           := Array_Date();
          v_First_Solo_Input := null;
        end if;
      end loop;
    
      if v_First_Solo_Input <= v_Begin_Late_Time then
        v_Late_Input := null;
      end if;
    
      if p_Timesheet.Output_Time < v_Late_Input then
        p_Timesheet.Output_Time := null;
      end if;
    end if;
  
    v_Time_Parts := Trim_Time_Parts_By_Gps(v_Time_Parts);
  
    -- timeoff exists
    if i_Timeoff_Tk_Id is null then
      if p_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
        Gen_Timesheet_Facts_Rest_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Requests_Exist => i_Requests_Exist);
      elsif p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
            p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Gen_Timesheet_Facts_Free_Day(p_Timesheet       => p_Timesheet,
                                     p_Facts           => p_Facts,
                                     i_Time_Parts      => v_Time_Parts,
                                     i_Begin_Late_Time => v_Begin_Late_Time - v_Begin_Late,
                                     i_Late_Input      => v_Late_Input,
                                     i_Requests_Exist  => i_Requests_Exist);
      else
        Gen_Timesheet_Facts_Work_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Late_Input     => v_Late_Input,
                                     i_Early_Output   => v_Early_Output,
                                     i_Requests_Exist => i_Requests_Exist);
      end if;
    else
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => i_Timeoff_Tk_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  ) is
    v_Tracks_Count    number;
    v_Requests_Count  number;
    v_Done_Mark_Count number;
  
    r_Timesheet      Htt_Timesheets%rowtype;
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    r_Timeoff        Hpd_Timeoff_Days%rowtype;
    r_Overtime       Hpd_Overtime_Days%rowtype;
    v_Facts          Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Trans_Tracks   Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
  
    v_Input_Time  date;
    v_Output_Time date;
  
    --------------------------------------------------
    Procedure Approve_Timesheet_Marks
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Timesheet_Id number
    ) is
    begin
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'N'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id;
    
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'Y'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id
         and exists (select *
                from Htt_Timesheet_Tracks Tt
               where Tt.Company_Id = Tm.Company_Id
                 and Tt.Filial_Id = Tm.Filial_Id
                 and Tt.Timesheet_Id = Tm.Timesheet_Id
                 and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                 and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time);
    end;
  
    -------------------------------------------------- 
    Function Overtime_Posted
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Overtime_Id number
    ) return boolean is
      r_Overtime Hpd_Journal_Overtimes%rowtype;
      r_Journal  Hpd_Journals%rowtype;
    begin
      r_Overtime := z_Hpd_Journal_Overtimes.Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Overtime_Id => i_Overtime_Id);
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => r_Overtime.Company_Id,
                                       i_Filial_Id  => r_Overtime.Filial_Id,
                                       i_Journal_Id => r_Overtime.Journal_Id);
    
      return r_Journal.Posted = 'Y';
    end;
  begin
    r_Timesheet := z_Htt_Timesheets.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Timesheet_Id => i_Timesheet_Id);
  
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                   i_Filial_Id      => r_Timesheet.Filial_Id,
                                   i_Staff_Id       => r_Timesheet.Staff_Id,
                                   i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
      z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => r_Timesheet.Company_Id,
                                       i_Filial_Id      => r_Timesheet.Filial_Id,
                                       i_Staff_Id       => r_Timesheet.Staff_Id,
                                       i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                                       i_Facts_Changed  => Option_Varchar2('Y'));
      return;
    end if;
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = r_Timesheet.Company_Id
       and Tf.Filial_Id = r_Timesheet.Filial_Id
       and Tf.Timesheet_Id = r_Timesheet.Timesheet_Id;
  
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Timesheet_Id = i_Timesheet_Id;
  
    select count(*)
      into v_Requests_Count
      from Htt_Timesheet_Requests Tr
     where Tr.Company_Id = i_Company_Id
       and Tr.Filial_Id = i_Filial_Id
       and Tr.Timesheet_Id = i_Timesheet_Id;
  
    if z_Hpd_Timeoff_Days.Exist_Lock(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Staff_Id     => r_Timesheet.Staff_Id,
                                     i_Timeoff_Date => r_Timesheet.Timesheet_Date,
                                     o_Row          => r_Timeoff) then
      null;
    end if;
  
    v_Input_Time  := r_Timesheet.Input_Time;
    v_Output_Time := r_Timesheet.Output_Time;
  
    Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                        p_Facts          => v_Facts,
                        p_Trans_Tracks   => v_Trans_Tracks,
                        i_Tracks_Exist   => v_Tracks_Count > 0,
                        i_Requests_Exist => v_Requests_Count > 0,
                        i_Timeoff_Tk_Id  => r_Timeoff.Time_Kind_Id);
  
    Insert_Timesheet_Facts(v_Facts);
  
    r_Overtime := z_Hpd_Overtime_Days.Take(i_Company_Id    => r_Timesheet.Company_Id,
                                           i_Filial_Id     => r_Timesheet.Filial_Id,
                                           i_Staff_Id      => r_Timesheet.Staff_Id,
                                           i_Overtime_Date => r_Timesheet.Timesheet_Date);
  
    if r_Overtime.Overtime_Seconds is not null then
      if Overtime_Posted(i_Company_Id  => r_Overtime.Company_Id,
                         i_Filial_Id   => r_Overtime.Filial_Id,
                         i_Overtime_Id => r_Overtime.Overtime_Id) then
        Insert_Timesheet_Overtime_Facts(i_Company_Id       => r_Timesheet.Company_Id,
                                        i_Filial_Id        => r_Timesheet.Filial_Id,
                                        i_Timesheet_Id     => r_Timesheet.Timesheet_Id,
                                        i_Staff_Id         => r_Timesheet.Staff_Id,
                                        i_Timesheet_Date   => r_Timesheet.Timesheet_Date,
                                        i_Overtime_Seconds => r_Overtime.Overtime_Seconds);
      end if;
    end if;
  
    -- timebook adjustment
    Save_Adjustment_Fact(i_Company_Id     => r_Timesheet.Company_Id,
                         i_Filial_Id      => r_Timesheet.Filial_Id,
                         i_Staff_Id       => r_Timesheet.Staff_Id,
                         i_Timesheet_Id   => r_Timesheet.Timesheet_Id,
                         i_Timesheet_Date => r_Timesheet.Timesheet_Date);
  
    Approve_Timesheet_Marks(i_Company_Id   => r_Timesheet.Company_Id,
                            i_Filial_Id    => r_Timesheet.Filial_Id,
                            i_Timesheet_Id => r_Timesheet.Timesheet_Id);
  
    select count(*)
      into v_Done_Mark_Count
      from Htt_Timesheet_Marks Tm
     where Tm.Company_Id = r_Timesheet.Company_Id
       and Tm.Filial_Id = r_Timesheet.Filial_Id
       and Tm.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tm.Done = 'Y';
  
    update Htt_Timesheet_Tracks Tt
       set Tt.Track_Used = 'Y'
     where Tt.Company_Id = r_Timesheet.Company_Id
       and Tt.Filial_Id = r_Timesheet.Filial_Id
       and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tt.Track_Used = 'N';
  
    forall i in 1 .. v_Trans_Tracks.Count
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type = v_Trans_Tracks(i).Track_Type
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Id = v_Trans_Tracks(i).Track_Id;
  
    z_Htt_Timesheets.Update_One(i_Company_Id   => r_Timesheet.Company_Id,
                                i_Filial_Id    => r_Timesheet.Filial_Id,
                                i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                i_Input_Time   => Option_Date(r_Timesheet.Input_Time),
                                i_Output_Time  => Option_Date(r_Timesheet.Output_Time),
                                i_Done_Marks   => Option_Number(v_Done_Mark_Count));
  
    -- send notification
    if i_Send_Notify and
       r_Timesheet.Timesheet_Date =
       Trunc(Htt_Util.Get_Current_Date(i_Company_Id => r_Timesheet.Company_Id,
                                       i_Filial_Id  => r_Timesheet.Filial_Id)) then
      if v_Input_Time is null and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Late_Time   => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Late_Time);
      end if;
    
      if not Fazo.Equal(r_Timesheet.Output_Time, v_Output_Time) and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Early_Time  => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
      end if;
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Facts is
    r_Timesheet    Htt_Timesheets%rowtype;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Timesheets   Htt_Pref.Timesheet_Nt := Htt_Pref.Timesheet_Nt();
    v_Trans_Tracks Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
  
    -------------------------------------------------- 
    Procedure Update_Timesheets
    (
      p_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
      p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt
    ) is
    begin
      forall i in 1 .. p_Timesheets.Count
        update Htt_Timesheets t
           set t.Input_Time  = p_Timesheets(i).Input_Time,
               t.Output_Time = p_Timesheets(i).Output_Time
         where t.Company_Id = p_Timesheets(i).Company_Id
           and t.Filial_Id = p_Timesheets(i).Filial_Id
           and t.Timesheet_Id = p_Timesheets(i).Timesheet_Id;
    
      forall i in 1 .. p_Trans_Tracks.Count
        update Htt_Timesheet_Tracks Tt
           set Tt.Track_Type = p_Trans_Tracks(i).Track_Type
         where Tt.Company_Id = p_Trans_Tracks(i).Company_Id
           and Tt.Filial_Id = p_Trans_Tracks(i).Filial_Id
           and Tt.Timesheet_Id = p_Trans_Tracks(i).Timesheet_Id
           and Tt.Track_Id = p_Trans_Tracks(i).Track_Id;
    
      p_Timesheets   := Htt_Pref.Timesheet_Nt();
      p_Trans_Tracks := Htt_Pref.Timesheet_Track_Nt();
    end;
  
    --------------------------------------------------
    Procedure Insert_Overtime_Days is
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Schedule_Id    number;
      v_Overtime       number;
      v_Free_Time      number;
    
      v_Company_Id            number;
      v_Company_Cnt           number;
      v_Free_Time_Kind_Id     number;
      v_Overtime_Time_Kind_Id number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Free_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    
      v_Overtime_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
    
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Schedule_Id,
             Od.Overtime_Seconds
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Schedule_Id, v_Overtime
        from Htt_Timesheets p
        join Hpd_Overtime_Days Od
          on Od.Company_Id = p.Company_Id
         and Od.Filial_Id = p.Filial_Id
         and Od.Staff_Id = p.Staff_Id
         and Od.Overtime_Date = p.Timesheet_Date
       where exists (select *
                from Hpd_Journal_Overtimes q
                join Hpd_Journals p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Journal_Id = q.Journal_Id
                 and p.Posted = 'Y'
               where q.Company_Id = Od.Company_Id
                 and q.Filial_Id = Od.Filial_Id
                 and q.Overtime_Id = Od.Overtime_Id)
         and exists (select 1
                from Htt_Dirty_Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Timesheet_Id = p.Timesheet_Id)
         and Nvl((select sum(Tf.Fact_Value)
                   from Htt_Timesheet_Facts Tf
                   join Htt_Time_Kinds Tk
                     on Tk.Company_Id = v_Company_Id
                    and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = v_Free_Time_Kind_Id
                    and Tk.Time_Kind_Id = Tf.Time_Kind_Id
                  where Tf.Company_Id = p.Company_Id
                    and Tf.Filial_Id = p.Filial_Id
                    and Tf.Timesheet_Id = p.Timesheet_Id),
                 0) < Od.Overtime_Seconds
         and Rownum = 1;
    
      v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => v_Company_Id,
                                             i_Filial_Id      => v_Filial_Id,
                                             i_Staff_Id       => v_Staff_Id,
                                             i_Timesheet_Date => v_Timesheet_Date,
                                             i_Time_Kind_Id   => v_Free_Time_Kind_Id);
    
      Htt_Error.Raise_005(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                         i_Filial_Id  => v_Filial_Id,
                                                                         i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date       => v_Timesheet_Date,
                          i_Schedule_Name        => z_Htt_Schedules.Load(i_Company_Id => v_Company_Id, --
                                                    i_Filial_Id => v_Filial_Id, --
                                                    i_Schedule_Id => v_Schedule_Id).Name,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => v_Overtime -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    
    exception
      when No_Data_Found then
        insert into Htt_Timesheet_Facts
          (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
          (select t.Company_Id,
                  t.Filial_Id,
                  t.Timesheet_Id,
                  v_Overtime_Time_Kind_Id,
                  Od.Overtime_Seconds
             from Htt_Timesheets t
             join Hpd_Overtime_Days Od
               on Od.Company_Id = t.Company_Id
              and Od.Filial_Id = t.Filial_Id
              and Od.Staff_Id = t.Staff_Id
              and Od.Overtime_Date = t.Timesheet_Date
            where exists (select *
                     from Hpd_Journal_Overtimes q
                     join Hpd_Journals p
                       on p.Company_Id = q.Company_Id
                      and p.Filial_Id = q.Filial_Id
                      and p.Journal_Id = q.Journal_Id
                      and p.Posted = 'Y'
                    where q.Company_Id = Od.Company_Id
                      and q.Filial_Id = Od.Filial_Id
                      and q.Overtime_Id = Od.Overtime_Id)
              and exists (select 1
                     from Htt_Dirty_Timesheets w
                    where w.Company_Id = t.Company_Id
                      and w.Filial_Id = t.Filial_Id
                      and w.Timesheet_Id = t.Timesheet_Id));
    end;
  
    --------------------------------------------------
    Procedure Insert_Timebook_Adjustments is
      v_Company_Id          number;
      v_Company_Cnt         number;
      v_Turnout_Adjustment  number;
      v_Overtime_Adjustment number;
      v_Lack_Tk_Id          number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
      v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
      v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
    
      insert all --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Turnout_Adjustment, Turnout_Time * 60) --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Overtime_Adjustment, Overtime * 60)
        select q.Company_Id,
               q.Filial_Id,
               q.Timesheet_Id,
               (select a.Overtime
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Overtime,
               (select a.Turnout_Time
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Turnout_Time
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets q
            on q.Company_Id = Dt.Company_Id
           and q.Filial_Id = Dt.Filial_Id
           and q.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = q.Company_Id
           and La.Filial_Id = q.Filial_Id
           and La.Staff_Id = q.Staff_Id
           and La.Adjustment_Date = q.Timesheet_Date;
    
      update (select Df.Fact_Value,
                     (select Tf.Fact_Value
                        from Htt_Timesheet_Facts Tf
                       where Tf.Company_Id = Dt.Company_Id
                         and Tf.Filial_Id = Dt.Filial_Id
                         and Tf.Timesheet_Id = Dt.Timesheet_Id
                         and Tf.Time_Kind_Id = v_Lack_Tk_Id) New_Value
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = Tm.Company_Id
                 and Df.Filial_Id = Tm.Filial_Id
                 and Df.Staff_Id = Tm.Staff_Id
                 and Df.Adjustment_Date = Tm.Timesheet_Date
                 and Df.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Nvl(q.New_Value, 0);
    
      insert into Hpd_Adjustment_Deleted_Facts
        (Company_Id, Filial_Id, Staff_Id, Adjustment_Date, Time_Kind_Id, Fact_Value)
        select Tf.Company_Id,
               Tf.Filial_Id,
               Tm.Staff_Id,
               Tm.Timesheet_Date,
               Tf.Time_Kind_Id,
               Tf.Fact_Value
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets Tm
            on Tm.Company_Id = Dt.Company_Id
           and Tm.Filial_Id = Dt.Filial_Id
           and Tm.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = Tm.Company_Id
           and La.Filial_Id = Tm.Filial_Id
           and La.Staff_Id = Tm.Staff_Id
           and La.Adjustment_Date = Tm.Timesheet_Date
           and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
          join Htt_Timesheet_Facts Tf
            on Tf.Company_Id = Dt.Company_Id
           and Tf.Filial_Id = Dt.Filial_Id
           and Tf.Timesheet_Id = Dt.Timesheet_Id
           and Tf.Time_Kind_Id = v_Lack_Tk_Id
         where not exists (select 1
                  from Hpd_Adjustment_Deleted_Facts p
                 where p.Company_Id = Tm.Company_Id
                   and p.Filial_Id = Tm.Filial_Id
                   and p.Staff_Id = Tm.Staff_Id
                   and p.Adjustment_Date = Tm.Timesheet_Date
                   and p.Time_Kind_Id = v_Lack_Tk_Id);
    
      update (select Tf.Fact_Value,
                     (select Pa.Turnout_Time * 60
                        from Hpd_Page_Adjustments Pa
                       where Pa.Company_Id = La.Company_Id
                         and Pa.Filial_Id = La.Filial_Id
                         and Pa.Page_Id = La.Page_Id) Turnout_Time
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Lock_Adjustments La
                  on La.Company_Id = Tm.Company_Id
                 and La.Filial_Id = Tm.Filial_Id
                 and La.Staff_Id = Tm.Staff_Id
                 and La.Adjustment_Date = Tm.Timesheet_Date
                 and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
                join Htt_Timesheet_Facts Tf
                  on Tf.Company_Id = Dt.Company_Id
                 and Tf.Filial_Id = Dt.Filial_Id
                 and Tf.Timesheet_Id = Dt.Timesheet_Id
                 and Tf.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Greatest(q.Fact_Value - Nvl(q.Turnout_Time, 0), 0);
    end;
  begin
    delete Htt_Timesheet_Facts Tf
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id);
  
    for r in (select t.*,
                     (select Td.Time_Kind_Id
                        from Hpd_Timeoff_Days Td
                       where Td.Company_Id = t.Company_Id
                         and Td.Filial_Id = t.Filial_Id
                         and Td.Staff_Id = t.Staff_Id
                         and Td.Timeoff_Date = t.Timesheet_Date) Timeoff_Tk_Id,
                     (select count(*)
                        from Htt_Timesheet_Tracks Tt
                       where Tt.Company_Id = t.Company_Id
                         and Tt.Filial_Id = t.Filial_Id
                         and Tt.Timesheet_Id = t.Timesheet_Id) Tracks_Count,
                     (select count(*)
                        from Htt_Timesheet_Requests Tr
                       where Tr.Company_Id = t.Company_Id
                         and Tr.Filial_Id = t.Filial_Id
                         and Tr.Timesheet_Id = t.Timesheet_Id) Requests_Count
                from Htt_Timesheets t
                join Htt_Dirty_Timesheets Dt
                  on t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
    loop
      z_Htt_Timesheets.Init(p_Row                 => r_Timesheet,
                            i_Company_Id          => r.Company_Id,
                            i_Filial_Id           => r.Filial_Id,
                            i_Timesheet_Id        => r.Timesheet_Id,
                            i_Timesheet_Date      => r.Timesheet_Date,
                            i_Staff_Id            => r.Staff_Id,
                            i_Employee_Id         => r.Employee_Id,
                            i_Schedule_Id         => r.Schedule_Id,
                            i_Day_Kind            => r.Day_Kind,
                            i_Begin_Time          => r.Begin_Time,
                            i_End_Time            => r.End_Time,
                            i_Break_Enabled       => r.Break_Enabled,
                            i_Break_Begin_Time    => r.Break_Begin_Time,
                            i_Break_End_Time      => r.Break_End_Time,
                            i_Plan_Time           => r.Plan_Time,
                            i_Full_Time           => r.Full_Time,
                            i_Input_Time          => null,
                            i_Output_Time         => null,
                            i_Track_Duration      => r.Track_Duration,
                            i_Schedule_Kind       => r.Schedule_Kind,
                            i_Count_Late          => r.Count_Late,
                            i_Count_Early         => r.Count_Early,
                            i_Count_Lack          => r.Count_Lack,
                            i_Count_Free          => r.Count_Free,
                            i_Gps_Turnout_Enabled => r.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r.Gps_Use_Location,
                            i_Gps_Max_Interval    => r.Gps_Max_Interval,
                            i_Shift_Begin_Time    => r.Shift_Begin_Time,
                            i_Shift_End_Time      => r.Shift_End_Time,
                            i_Input_Border        => r.Input_Border,
                            i_Output_Border       => r.Output_Border,
                            i_Calendar_Id         => r.Calendar_Id,
                            i_Allowed_Late_Time   => r.Allowed_Late_Time,
                            i_Allowed_Early_Time  => r.Allowed_Early_Time,
                            i_Begin_Late_Time     => r.Begin_Late_Time,
                            i_End_Early_Time      => r.End_Early_Time);
    
      Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                          p_Facts          => v_Facts,
                          p_Trans_Tracks   => v_Trans_Tracks,
                          i_Tracks_Exist   => r.Tracks_Count > 0,
                          i_Requests_Exist => r.Requests_Count > 0,
                          i_Timeoff_Tk_Id  => r.Timeoff_Tk_Id);
    
      Htt_Util.Timesheet_Add(o_Timesheets   => v_Timesheets,
                             i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id,
                             i_Input_Time   => r_Timesheet.Input_Time,
                             i_Output_Time  => r_Timesheet.Output_Time);
    
      if v_Facts.Count > 10000 then
        Insert_Timesheet_Facts(v_Facts);
      end if;
    
      if v_Timesheets.Count > 10000 then
        Update_Timesheets(p_Timesheets   => v_Timesheets, --
                          p_Trans_Tracks => v_Trans_Tracks);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(v_Facts);
  
    Update_Timesheets(p_Timesheets   => v_Timesheets, --
                      p_Trans_Tracks => v_Trans_Tracks);
  
    Insert_Overtime_Days;
    Insert_Timebook_Adjustments;
  end;

  ----------------------------------------------------------------------------------------------------
  -- o'zgartirish kerak structurani
  -- adashib ketish ehtimolligi juda katta
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    v_Begin_Date date;
    v_End_Date   date;
    v_Timesheet  Htt_Timesheets%rowtype;
  
    r_Request  Htt_Requests%rowtype;
    r_Timebook Hpr_Timebooks%rowtype;
  
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Code_Aat;
    --------------------------------------------------
    Procedure Put_Timesheet_Ids is
    begin
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        f_Timesheet_Sets(v_Timesheet_Ids(i)) := true;
      end loop;
    end;
  
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    v_Begin_Date := Trunc(r_Request.Begin_Time);
    v_End_Date   := Trunc(r_Request.End_Time);
  
    while v_Begin_Date <= v_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Request.Company_Id,
                                     i_Filial_Id      => r_Request.Filial_Id,
                                     i_Staff_Id       => r_Request.Staff_Id,
                                     i_Timesheet_Date => v_Begin_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Request.Company_Id,
                                            i_Filial_Id      => r_Request.Filial_Id,
                                            i_Staff_Id       => r_Request.Staff_Id,
                                            i_Timesheet_Date => v_Begin_Date);
      
        Htt_Error.Raise_006(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                                      i_Filial_Id  => r_Request.Filial_Id,
                                                                      i_Staff_Id   => r_Request.Staff_Id),
                            i_Timesheet_Date  => v_Begin_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      v_Begin_Date := v_Begin_Date + 1;
    end loop;
  
    -- buni mexanizmni fix qilish kerak, hozir butun staff lock bo'lib qoladi, buni htt o'zi uchun qilish kerak
    z_Href_Staffs.Lock_Only(i_Company_Id => r_Request.Company_Id,
                            i_Filial_Id  => r_Request.Filial_Id,
                            i_Staff_Id   => r_Request.Staff_Id);
  
    delete Htt_Timesheet_Requests q
     where q.Company_Id = r_Request.Company_Id
       and q.Request_Id = r_Request.Request_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    Put_Timesheet_Ids;
  
    if r_Request.Status = Htt_Pref.c_Request_Status_Completed then
      if r_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        v_Timesheet_Ids := Find_Request_Timesheets(i_Company_Id    => r_Request.Company_Id,
                                                   i_Filial_Id     => r_Request.Filial_Id,
                                                   i_Staff_Id      => r_Request.Staff_Id,
                                                   i_Request_Begin => r_Request.Begin_Time,
                                                   i_Request_End   => r_Request.End_Time);
      
      elsif r_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day then
        if Htt_Util.Exist_Timesheet(i_Company_Id     => r_Request.Company_Id,
                                    i_Filial_Id      => r_Request.Filial_Id,
                                    i_Staff_Id       => r_Request.Staff_Id,
                                    i_Timesheet_Date => Trunc(r_Request.Begin_Time),
                                    o_Timesheet      => v_Timesheet) then
          v_Timesheet_Ids := Array_Number(v_Timesheet.Timesheet_Id);
        end if;
      else
        v_Begin_Date := Trunc(r_Request.Begin_Time);
        v_End_Date   := Trunc(r_Request.End_Time);
      
        select q.Timesheet_Id
          bulk collect
          into v_Timesheet_Ids
          from Htt_Timesheets q
         where q.Company_Id = r_Request.Company_Id
           and q.Filial_Id = r_Request.Filial_Id
           and q.Staff_Id = r_Request.Staff_Id
           and q.Timesheet_Date between v_Begin_Date and v_End_Date;
      
      end if;
    
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        z_Htt_Timesheet_Requests.Insert_Try(i_Company_Id   => r_Request.Company_Id,
                                            i_Filial_Id    => r_Request.Filial_Id,
                                            i_Timesheet_Id => v_Timesheet_Ids(i),
                                            i_Request_Id   => r_Request.Request_Id);
      end loop;
    
      Put_Timesheet_Ids;
    end if;
  
    v_Timesheet.Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet.Timesheet_Id is not null
    loop
      Gen_Timesheet_Facts(i_Company_Id   => r_Request.Company_Id, --
                          i_Filial_Id    => r_Request.Filial_Id,
                          i_Timesheet_Id => v_Timesheet.Timesheet_Id);
    
      v_Timesheet.Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet.Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  ) is
    v_Turnout_Id   number;
    v_Lack_Id      number;
    v_Time_Kind_Id number;
    v_Turnout_Time number;
    v_Fact_Value   number;
    v_Turnout_Ids  Array_Number;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
  begin
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = i_Company_Id
       and Tf.Filial_Id = i_Filial_Id
       and (Tf.Time_Kind_Id not member of v_Turnout_Ids or Tf.Fact_Value = 0)
       and exists (select *
              from Hpd_Timeoff_Days Td
             where Td.Company_Id = i_Company_Id
               and Td.Filial_Id = i_Filial_Id
               and Td.Timeoff_Id = i_Timeoff_Id
               and exists (select *
                      from Htt_Timesheets t
                     where t.Company_Id = Td.Company_Id
                       and t.Filial_Id = Td.Filial_Id
                       and t.Staff_Id = Td.Staff_Id
                       and t.Timesheet_Date = Td.Timeoff_Date
                       and t.Timesheet_Id = Tf.Timesheet_Id));
  
    for r in (select t.Staff_Id,
                     t.Timesheet_Date,
                     t.Timesheet_Id,
                     t.Plan_Time,
                     t.Count_Lack,
                     Td.Time_Kind_Id,
                     t.Schedule_Kind,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = Td.Company_Id
                            and Tl.Filial_Id = Td.Filial_Id
                            and Tl.Staff_Id = Td.Staff_Id
                            and Tl.Timesheet_Date = Td.Timeoff_Date),
                         'N') Locked
                from Htt_Timesheets t
                join Hpd_Timeoff_Days Td
                  on Td.Company_Id = t.Company_Id
                 and Td.Filial_Id = t.Filial_Id
                 and Td.Staff_Id = t.Staff_Id
                 and Td.Timeoff_Date = t.Timesheet_Date
               where Td.Company_Id = i_Company_Id
                 and Td.Filial_Id = i_Filial_Id
                 and Td.Timeoff_Id = i_Timeoff_Id)
    loop
      if r.Locked = 'Y' then
        v_Turnout_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Staff_Id       => r.Staff_Id,
                                                  i_Timesheet_Date => r.Timesheet_Date,
                                                  i_Time_Kind_Id   => v_Turnout_Id);
      
        v_Fact_Value := r.Plan_Time - v_Turnout_Time;
      
        if i_Remove_Timeoff then
          v_Time_Kind_Id := v_Lack_Id;
        
          if r.Count_Lack = 'N' then
            v_Fact_Value := 0;
          end if;
        else
          v_Time_Kind_Id := r.Time_Kind_Id;
        end if;
      
        Gen_Timesheet_Fact(p_Facts         => v_Facts,
                           i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Timesheet_Id  => r.Timesheet_Id,
                           i_Time_Kind_Id  => v_Time_Kind_Id,
                           i_Fact_Value    => v_Fact_Value,
                           i_Schedule_Kind => r.Schedule_Kind);
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Timesheet_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(v_Facts);
  end;

  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      Insert_Timesheet_Overtime_Facts(i_Company_Id       => Od.Company_Id,
                                      i_Filial_Id        => Od.Filial_Id,
                                      i_Timesheet_Id     => Od.Timesheet_Id,
                                      i_Staff_Id         => Od.Staff_Id,
                                      i_Timesheet_Date   => Od.Overtime_Date,
                                      i_Overtime_Seconds => Od.Overtime_Seconds);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
    v_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => Od.Company_Id,
                                       i_Filial_Id    => Od.Filial_Id,
                                       i_Timesheet_Id => Od.Timesheet_Id,
                                       i_Time_Kind_Id => v_Time_Kind_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  ) is
    v_Turnout_Adjustment_Id  number;
    v_Overtime_Adjustment_Id number;
    v_Lack_Tk_Id             number;
    r_Fact                   Htt_Timesheet_Facts%rowtype;
  begin
    v_Turnout_Adjustment_Id  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id             := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select (select a.Overtime
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Overtime,
                     (select a.Turnout_Time
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Turnout_Time,
                     q.Kind,
                     q.Staff_Id,
                     q.Adjustment_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Adjustment_Date = i_Timesheet_Date)
    loop
      continue when r.Overtime is null or r.Turnout_Time is null;
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Adjustment_Id,
                                     i_Fact_Value   => r.Overtime * 60);
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Turnout_Adjustment_Id,
                                     i_Fact_Value   => r.Turnout_Time * 60);
    
      if r.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete and r.Turnout_Time > 0 and
         z_Htt_Timesheet_Facts.Exist_Lock(i_Company_Id   => i_Company_Id,
                                          i_Filial_Id    => i_Filial_Id,
                                          i_Timesheet_Id => i_Timesheet_Id,
                                          i_Time_Kind_Id => v_Lack_Tk_Id,
                                          o_Row          => r_Fact) then
        z_Hpd_Adjustment_Deleted_Facts.Save_One(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => r.Staff_Id,
                                                i_Adjustment_Date => r.Adjustment_Date,
                                                i_Time_Kind_Id    => v_Lack_Tk_Id,
                                                i_Fact_Value      => Nvl(r_Fact.Fact_Value, 0));
      
        if r_Fact.Fact_Value > 0 then
          z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id,
                                           i_Time_Kind_Id => v_Lack_Tk_Id,
                                           i_Fact_Value   => Option_Number(Greatest(r_Fact.Fact_Value -
                                                                                    r.Turnout_Time * 60,
                                                                                    0)));
        end if;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    v_Used_Count   number;
    v_Tracks_Count number;
    v_Track_Status varchar2(1);
  begin
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id;
  
    select count(*)
      into v_Used_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id
       and Tt.Track_Used = 'Y';
  
    case
      when v_Tracks_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Draft;
      when v_Used_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Not_Used;
      when v_Used_Count < v_Tracks_Count then
        v_Track_Status := Htt_Pref.c_Track_Status_Partially_Used;
      else
        v_Track_Status := Htt_Pref.c_Track_Status_Used;
    end case;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(v_Track_Status));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  ) is
    r_Track         Htt_Timesheet_Tracks%rowtype;
    v_Timesheet_Ids Array_Number := Array_Number();
    v_Track_Date    date := Trunc(i_Track_Datetime);
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    r_Track.Company_Id     := i_Company_Id;
    r_Track.Filial_Id      := i_Filial_Id;
    r_Track.Track_Id       := i_Track_Id;
    r_Track.Track_Datetime := i_Track_Datetime;
    r_Track.Track_Type     := i_Track_Type;
    r_Track.Track_Used     := 'N';
    r_Track.Trans_Input    := i_Trans_Input;
    r_Track.Trans_Output   := i_Trans_Output;
    r_Track.Trans_Check    := i_Trans_Check;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.State = 'A'
                 and q.Hiring_Date <= v_Track_Date
                 and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Track_Date))
    loop
      v_Timesheet_Ids := v_Timesheet_Ids multiset union
                         Find_Track_Timesheets(i_Company_Id     => i_Company_Id,
                                               i_Filial_Id      => i_Filial_Id,
                                               i_Staff_Id       => r.Staff_Id,
                                               i_Track_Datetime => i_Track_Datetime);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Track.Timesheet_Id := v_Timesheet_Ids(i);
    
      z_Htt_Timesheet_Tracks.Save_Row(r_Track);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type =
             (select t.Track_Type
                from Htt_Tracks t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Track_Id = Tt.Track_Id)
       where Tt.Company_Id = i_Company_Id
         and Tt.Filial_Id = i_Filial_Id
         and Tt.Timesheet_Id = v_Timesheet_Ids(i);
    
      Gen_Timesheet_Facts(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Timesheet_Id => v_Timesheet_Ids(i),
                          i_Send_Notify  => true);
    end loop;
  
    Track_Update_Status(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Track_Id   => i_Track_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  ) is
    r_Timesheet     Htt_Timesheets%rowtype;
    r_Timebook      Hpr_Timebooks%rowtype;
    v_Timesheet_Ids Array_Number;
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    -- unused tracks are free for deletion
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
       and q.Track_Used = 'N';
  
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    delete from Htt_Potential_Outputs Pt
     where Pt.Company_Id = i_Company_Id
       and Pt.Filial_Id = i_Filial_Id
       and Pt.Track_Id = i_Track_Id;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                     i_Filial_Id      => r_Timesheet.Filial_Id,
                                     i_Staff_Id       => r_Timesheet.Staff_Id,
                                     i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Timesheet.Company_Id,
                                            i_Filial_Id      => r_Timesheet.Filial_Id,
                                            i_Staff_Id       => r_Timesheet.Staff_Id,
                                            i_Timesheet_Date => r_Timesheet.Timesheet_Date);
      
        Htt_Error.Raise_007(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                      i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                      i_Staff_Id   => r_Timesheet.Staff_Id),
                            i_Timesheet_Date  => r_Timesheet.Timesheet_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Ids(i));
    end loop;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(Htt_Pref.c_Track_Status_Draft));
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype) is
    r_Track Htt_Trash_Tracks%rowtype;
  begin
    return;
    z_Htt_Trash_Tracks.Init(p_Row            => r_Track,
                            i_Company_Id     => i_Track.Company_Id,
                            i_Filial_Id      => i_Track.Filial_Id,
                            i_Track_Id       => i_Track.Track_Id,
                            i_Track_Date     => i_Track.Track_Date,
                            i_Track_Time     => i_Track.Track_Time,
                            i_Track_Datetime => i_Track.Track_Datetime,
                            i_Person_Id      => i_Track.Person_Id,
                            i_Track_Type     => i_Track.Track_Type,
                            i_Mark_Type      => i_Track.Mark_Type,
                            i_Device_Id      => i_Track.Device_Id,
                            i_Location_Id    => i_Track.Location_Id,
                            i_Latlng         => i_Track.Latlng,
                            i_Accuracy       => i_Track.Accuracy,
                            i_Photo_Sha      => i_Track.Photo_Sha,
                            i_Note           => i_Track.Note,
                            i_Is_Valid       => i_Track.Is_Valid);
  
    z_Htt_Trash_Tracks.Insert_Row(r_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Periods Href_Pref.Period_Nt;
  
    --------------------------------------------------
    Procedure Move_Tracks_To_Trash
    (
      i_Begin_Date date,
      i_End_Date   date
    ) is
    begin
      for r in (select *
                  from Htt_Tracks Ht
                 where Ht.Company_Id = i_Company_Id
                   and Ht.Filial_Id = i_Filial_Id
                   and Ht.Person_Id = i_Person_Id
                   and Ht.Track_Date between i_Begin_Date and i_End_Date)
      loop
        Trash_Track_Insert(r);
      
        z_Htt_Tracks.Delete_One(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Track_Id   => r.Track_Id);
      end loop;
    end;
  begin
    return;
    v_Periods := Htt_Util.Track_Not_Accepted_Periods(i_Company_Id  => i_Company_Id,
                                                     i_Filial_Id   => i_Filial_Id,
                                                     i_Employee_Id => i_Person_Id);
  
    for i in 1 .. v_Periods.Count
    loop
      Move_Tracks_To_Trash(i_Begin_Date => v_Periods(i).Period_Begin,
                           i_End_Date   => v_Periods(i).Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  
    select 'x'
      into v_Dummy
      from Htt_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin htt_core.notify_person_changes; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes is
  begin
    for r in (select *
                from Htt_Dirty_Persons)
    loop
      Htt_Global.w_Person.Company_Id := r.Company_Id;
      Htt_Global.w_Person.Person_Id  := r.Person_Id;
    
      b.Notify_Watchers(i_Watching_Expr => 'htt_global.w_person',
                        i_Expr_Type     => 'htt_global.person_rt');
    end loop;
  
    delete Htt_Dirty_Persons;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
  begin
    z_Htt_Timesheet_Locks.Insert_One(i_Company_Id     => i_Company_Id,
                                     i_Filial_Id      => i_Filial_Id,
                                     i_Staff_Id       => i_Staff_Id,
                                     i_Timesheet_Date => i_Timesheet_Date,
                                     i_Facts_Changed  => 'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
    v_Facts_Changed    varchar2(1);
    v_Unused_Track_Ids Array_Number;
    r_Timesheet        Htt_Timesheets%rowtype;
  begin
    delete Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date = i_Timesheet_Date
    returning Tl.Facts_Changed into v_Facts_Changed;
  
    if v_Facts_Changed = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => i_Timesheet_Date);
    
      select Tt.Track_Id
        bulk collect
        into v_Unused_Track_Ids
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Used = 'N';
    
      -- regen facts
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      -- change unused tracks status
      for i in 1 .. v_Unused_Track_Ids.Count
      loop
        Track_Update_Status(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => v_Unused_Track_Ids(i));
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    v_Staff_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    v_Begin_Date        date := Trunc(i_Begin_Date);
    v_End_Date          date := Trunc(i_End_Date);
  begin
    if i_Schedule_Id = v_Robot_Schedule_Id then
      return;
    end if;
  
    if v_End_Date is null then
      -- user wants to regenerate all timesheets
      -- take max available schedule date for this schedule
      -- and delete all timesheets after this date
      if i_Schedule_Id = v_Staff_Schedule_Id then
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Staff_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Staff_Id = i_Staff_Id
           and d.Schedule_Date >= v_Begin_Date;
      else
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Schedule_Id = i_Schedule_Id
           and d.Schedule_Date >= v_Begin_Date;
      end if;
    
      if v_End_Date is null then
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_Begin_Date - 1);
      else
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_End_Date);
      end if;
    
      v_End_Date := Nvl(v_End_Date, v_Begin_Date);
    end if;
  
    if i_Schedule_Id is null then
      delete Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and v_End_Date;
    end if;
  
    if i_Schedule_Id = v_Staff_Schedule_Id then
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => v_End_Date);
    else
      Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Schedule_Id => i_Schedule_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => v_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    for i in 1 .. i_Dates.Count
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => i_Staff_Id,
                         i_Schedule_Id    => i_Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => i_Dates(i),
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  ) is
  begin
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date > i_Lower_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    z_Htt_Acms_Commands.Insert_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => Htt_Next.Acms_Command_Id,
                                   i_Device_Id        => i_Device_Id,
                                   i_Command_Kind     => i_Command_Kind,
                                   i_Person_Id        => i_Person_Id,
                                   i_Data             => i_Data,
                                   i_Status           => Htt_Pref.c_Command_Status_New,
                                   i_State_Changed_On => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance is
    v_Total_Distance number;
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System,
                       (select i.Filial_Head
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) Filial_Head
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      for r in (select q.Company_Id, q.Filial_Id
                  from Md_Filials q
                 where q.Company_Id = Cmp.Company_Id
                   and q.Filial_Id <> Cmp.Filial_Head
                   and q.State = 'A')
      loop
        Biruni_Route.Context_Begin;
      
        Ui_Context.Init(i_User_Id      => Cmp.User_System,
                        i_Filial_Id    => r.Filial_Id,
                        i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
      
        for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                     from Htt_Gps_Tracks q
                    where q.Company_Id = r.Company_Id
                      and q.Filial_Id = r.Filial_Id
                      and q.Calculated = 'N')
        loop
          v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => r.Company_Id,
                                                               i_Filial_Id  => r.Filial_Id,
                                                               i_Person_Id  => Gt.Person_Id,
                                                               i_Track_Date => Gt.Track_Date);
        
          z_Htt_Gps_Tracks.Update_One(i_Company_Id     => r.Company_Id,
                                      i_Filial_Id      => r.Filial_Id,
                                      i_Track_Id       => Gt.Track_Id,
                                      i_Total_Distance => Option_Number(v_Total_Distance),
                                      i_Calculated     => Option_Varchar2('Y'));
        end loop;
      
        Biruni_Route.Context_End;
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_Person_Ids Array_Number;
    v_Date       date := Trunc(sysdate);
  begin
    select w.Employee_Id
      bulk collect
      into v_Person_Ids
      from Href_Staffs w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.State = 'A'
       and w.Hiring_Date <= v_Date
       and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
       and exists (select 1
              from Htt_Location_Divisions q
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Location_Id = i_Location_Id
               and w.Division_Id = q.Division_Id)
     group by w.Employee_Id;
  
    for i in 1 .. v_Person_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => i_Location_Id,
                          i_Person_Id   => v_Person_Ids(i),
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Location_Id = i_Location_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Person_Id not in (select *
                                           from table(v_Person_Ids)))
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Date         date := Trunc(sysdate);
  
    --------------------------------------------------
    Function Exists_Location_Person return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Person_Id = i_Person_Id
         and p.Attach_Type = Htt_Pref.c_Attach_Type_Auto
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Function Exists_Active_Staff(i_Date date) return boolean is
      v_Staff_Id number;
    begin
      v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Employee_Id => i_Person_Id,
                                                   i_Date        => i_Date);
    
      return v_Staff_Id is not null;
    end;
  begin
    if not Exists_Active_Staff(v_Date) and not Exists_Location_Person then
      return;
    end if;
  
    select q.Location_Id
      bulk collect
      into v_Location_Ids
      from Htt_Location_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select 1
              from Href_Staffs w
             where w.Company_Id = q.Company_Id
               and w.Filial_Id = q.Filial_Id
               and w.Division_Id = q.Division_Id
               and w.Employee_Id = i_Person_Id
               and w.Hiring_Date <= v_Date
               and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
               and w.State = 'A')
     group by q.Location_Id;
  
    for i in 1 .. v_Location_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => v_Location_Ids(i),
                          i_Person_Id   => i_Person_Id,
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Person_Id = i_Person_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Location_Id not member of v_Location_Ids)
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  ) is
    r_Location_Person Htt_Location_Persons%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
    v_Exists          boolean;
  begin
    v_Exists := z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Location_Id => i_Location_Id,
                                                  i_Person_Id   => i_Person_Id,
                                                  o_Row         => r_Location_Person);
  
    if not v_Exists or i_Attach_Type = Htt_Pref.c_Attach_Type_Manual or
       r_Location_Person.Attach_Type = Htt_Pref.c_Attach_Type_Global and
       i_Attach_Type = Htt_Pref.c_Attach_Type_Auto then
      z_Htt_Location_Persons.Save_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id,
                                      i_Person_Id   => i_Person_Id,
                                      i_Attach_Type => i_Attach_Type);
    
      if r_Location_Person.Company_Id is null then
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      end if;
    end if;
  
    if not v_Exists then
      v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
      v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    
      for r in (select q.Device_Id
                  from Htt_Devices q
                 where q.Company_Id = i_Company_Id
                   and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                   and q.Location_Id = i_Location_Id
                   and q.State = 'A')
      loop
        Acms_Command_Add(i_Company_Id   => i_Company_Id,
                         i_Device_Id    => r.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Person,
                         i_Person_Id    => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
    r_Location_Persons Htt_Location_Persons%rowtype;
    v_Exists           boolean;
    v_Global_Exist     boolean;
    v_Date             date := Trunc(sysdate);
  
    --------------------------------------------------           
    Function Exist_In_Global return boolean is
      v_Setting        varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id);
      v_Location_State varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
      v_Person_State   varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    begin
      return v_Setting = 'Y' and v_Location_State = 'A' and Nvl(v_Person_State, 'P') = 'A';
    end;
  
    -------------------------------------------------- 
    Function Exists_Auto_Attach return boolean is
      v_Dummy varchar2(1);
    begin
      begin
        select 'x'
          into v_Dummy
          from Htt_Location_Divisions q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Location_Id = i_Location_Id
           and exists (select 1
                  from Href_Staffs w
                 where w.Company_Id = q.Company_Id
                   and w.Filial_Id = q.Filial_Id
                   and w.Employee_Id = i_Person_Id
                   and w.Division_Id = q.Division_Id
                   and w.State = 'A'
                   and w.Hiring_Date <= v_Date
                   and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date))
           and Rownum = 1;
      
        return true;
      exception
        when No_Data_Found then
          return false;
      end;
    end;
  begin
    v_Exists       := Exists_Auto_Attach;
    v_Global_Exist := Exist_In_Global;
  
    if z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => i_Location_Id,
                                         i_Person_Id   => i_Person_Id,
                                         o_Row         => r_Location_Persons) then
      if v_Exists then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Auto));
      elsif v_Global_Exist then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Global));
      else
        z_Htt_Location_Persons.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id);
      
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      
        declare
          v_Dt_Hikvision_Id number;
          v_Dt_Dahua_Id     number;
          v_Dummy           varchar2(1);
          v_Date            date := Trunc(sysdate);
        begin
          select 'X'
            into v_Dummy
            from Mr_Natural_Persons q
           where q.Company_Id = i_Company_Id
             and q.Person_Id = i_Person_Id
             and q.State = 'A'
             and exists (select 1
                    from Htt_Persons Hp
                   where Hp.Company_Id = i_Company_Id
                     and Hp.Person_Id = i_Person_Id)
             and exists
           (select 1
                    from Href_Staffs s
                   where s.Company_Id = i_Company_Id
                     and s.Filial_Id in (select Lp.Filial_Id
                                           from Htt_Location_Persons Lp
                                          where Lp.Company_Id = i_Company_Id
                                            and Lp.Location_Id = i_Location_Id
                                            and Lp.Person_Id = i_Person_Id)
                     and s.Employee_Id = i_Person_Id
                     and s.State = 'A'
                     and s.Hiring_Date <= v_Date
                     and (s.Dismissal_Date is null or s.Dismissal_Date >= v_Date));
        exception
          when No_Data_Found then
            v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
            v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
          
            for r in (select q.Device_Id
                        from Htt_Devices q
                       where q.Company_Id = i_Company_Id
                         and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                         and q.Location_Id = i_Location_Id
                         and q.State = 'A')
            loop
              Acms_Command_Add(i_Company_Id   => i_Company_Id,
                               i_Device_Id    => r.Device_Id,
                               i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Person,
                               i_Person_Id    => i_Person_Id);
            end loop;
        end;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for St in (select q.Company_Id, q.Filial_Id, q.Employee_Id
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date + 1 >= v_Date)
                  group by q.Company_Id, q.Filial_Id, q.Employee_Id)
      loop
        Person_Sync_Locations(i_Company_Id => St.Company_Id,
                              i_Filial_Id  => St.Filial_Id,
                              i_Person_Id  => St.Employee_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
  begin
    if v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => v_Location_Ids(i));
      end loop;
    else
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_State        varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Employee_Ids Array_Number;
  begin
    if not z_Htt_Location_Filials.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id) or v_State = 'P' or
       v_Setting = 'N' then
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    else
      select q.Employee_Id
        bulk collect
        into v_Employee_Ids
        from Mhr_Employees q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.State = 'A';
    
      for i in 1 .. v_Employee_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => i_Location_Id,
                            i_Person_Id   => v_Employee_Ids(i),
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Person_Id not member of v_Employee_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_State        varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Location_Ids Array_Number;
  begin
    if v_State = 'A' and v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and q.State = 'A'
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => v_Location_Ids(i),
                            i_Person_Id   => i_Person_Id,
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Location_Id not member of v_Location_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    else
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes is
    v_Date date := Trunc(sysdate) - 1;
  begin
    delete from Htt_Location_Qr_Codes q
     where q.Created_On < v_Date;
  
    commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  ) is
    v_Period       date := Htt_Util.Year_Last_Day(Trunc(i_Period));
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    z_Htt_Request_Kind_Accruals.Delete_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
  
    -- check that employee binded to request_kind
    if not z_Htt_Staff_Request_Kinds.Exist(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id) then
      return;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                           i_Accrued_Days    => r_Request_Kind.Annual_Day_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number) is
    v_Curr_Date       date := Trunc(sysdate);
    v_Curr_Year_Begin date := Trunc(v_Curr_Date, 'yyyy');
    v_Curr_Year_End   date := Htt_Util.Year_Last_Day(v_Curr_Date);
    v_Prev_Year_End   date := v_Curr_Year_Begin - 1;
    v_Filial_Head     number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System     number := Md_Pref.User_System(i_Company_Id);
  
    r_Accrual        Htt_Request_Kind_Accruals%rowtype;
    v_Carryover_Days number;
    v_Period         date;
  begin
    for Fl in (select q.Company_Id, q.Filial_Id
                 from Md_Filials q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id <> v_Filial_Head
                  and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => Fl.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for r in (select *
                  from Htt_Request_Kinds q
                 where q.Company_Id = i_Company_Id
                   and q.Annually_Limited = 'Y'
                   and q.State = 'A')
      loop
        for k in (select *
                    from Htt_Staff_Request_Kinds p
                   where p.Company_Id = i_Company_Id
                     and p.Filial_Id = Fl.Filial_Id
                     and p.Request_Kind_Id = r.Request_Kind_Id
                     and not exists
                   (select 1
                            from Htt_Request_Kind_Accruals Rk
                           where Rk.Company_Id = p.Company_Id
                             and Rk.Filial_Id = p.Filial_Id
                             and Rk.Staff_Id = p.Staff_Id
                             and Rk.Request_Kind_Id = p.Request_Kind_Id
                             and Rk.Period = v_Curr_Year_End
                             and Rk.Accrual_Kind = Htt_Pref.c_Accrual_Kind_Plan))
        loop
          Request_Kind_Accrual_Evaluate(i_Company_Id      => k.Company_Id,
                                        i_Filial_Id       => k.Filial_Id,
                                        i_Staff_Id        => k.Staff_Id,
                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                        i_Period          => v_Curr_Year_End);
        
          -- when carryover policy is zero
          -- nothing should be carried over
          continue when r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Zero;
        
          r_Accrual := z_Htt_Request_Kind_Accruals.Take(i_Company_Id      => k.Company_Id,
                                                        i_Filial_Id       => k.Filial_Id,
                                                        i_Staff_Id        => k.Staff_Id,
                                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                                        i_Period          => v_Prev_Year_End,
                                                        i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
        
          -- when previous year accrual does not exist
          -- there is nothing to carryover
          continue when r_Accrual.Company_Id is null;
        
          v_Carryover_Days := r.Annual_Day_Limit -
                              Htt_Util.Get_Request_Kind_Used_Days(i_Company_Id      => k.Company_Id,
                                                                  i_Filial_Id       => k.Filial_Id,
                                                                  i_Staff_Id        => k.Staff_Id,
                                                                  i_Request_Kind_Id => k.Request_Kind_Id,
                                                                  i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                                                  i_Period          => v_Prev_Year_End);
        
          -- when prevous year limit is used up 
          -- there is nothing to carryover
          continue when v_Carryover_Days = 0;
        
          if r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
            v_Carryover_Days := Least(v_Carryover_Days, r.Carryover_Cap_Days);
          end if;
        
          -- add least on expiry date
          v_Period := Least(v_Curr_Year_Begin + r.Carryover_Expires_Days, v_Curr_Year_End);
        
          z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => k.Company_Id,
                                                 i_Filial_Id       => k.Filial_Id,
                                                 i_Staff_Id        => k.Staff_Id,
                                                 i_Request_Kind_Id => k.Request_Kind_Id,
                                                 i_Period          => v_Period,
                                                 i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Carryover,
                                                 i_Accrued_Days    => v_Carryover_Days);
        end loop;
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals is
  begin
    for Cmp in (select q.Company_Id
                  from Md_Companies q
                 where q.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = q.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        q.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Gen_Request_Kind_Accruals(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Registry_Staffs
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Format        varchar2(20) := 'yyyymmdd';
    v_Changed_Dates Fazo.Boolean_Code_Aat;
    v_Key           varchar2(20);
    v_Last_Date     date;
    v_Current_Date  date;
    v_Schedule_Id   number;
    --------------------------------------------------
    Procedure Put_Date(i_Date date) is
    begin
      v_Changed_Dates(to_char(i_Date, v_Format)) := true;
    end;
  
  begin
  
    Put_Date(i_Begin_Date);
    Put_Date(i_End_Date + 1);
  
    for r in (select q.Period
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                 and q.Period between i_Begin_Date and i_End_Date)
    loop
      Put_Date(r.Period);
    end loop;
  
    v_Key       := v_Changed_Dates.First;
    v_Last_Date := null;
    while v_Key is not null
    loop
      v_Current_Date := to_date(v_Key, v_Format);
    
      if v_Last_Date is not null then
        v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id,
                                                          i_Staff_Id   => i_Staff_Id,
                                                          i_Period     => v_Last_Date);
      
        if v_Schedule_Id is null then
          delete Htt_Timesheets t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Staff_Id = i_Staff_Id
             and t.Timesheet_Date between v_Last_Date and v_Current_Date - 1;
        end if;
      
        if v_Schedule_Id = i_Schedule_Id then
          Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Schedule_Id => i_Schedule_Id,
                                        i_Begin_Date  => v_Last_Date,
                                        i_End_Date    => v_Current_Date - 1);
        end if;
      end if;
    
      v_Key       := v_Changed_Dates.Next(v_Key);
      v_Last_Date := v_Current_Date;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Schedule_Id number individual robot schedule_id
  Procedure Gen_Registry_Robots
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Robot_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
  begin
    for r in (select p.Staff_Id,
                     Greatest(p.Begin_Date, i_Begin_Date) Begin_Date,
                     Least(p.End_Date, i_End_Date) End_Date
                from Hpd_Agreements_Cache p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Robot_Id = i_Robot_Id
                 and p.Begin_Date <= i_End_Date
                 and p.End_Date >= i_Begin_Date
                 and p.Schedule_Id = i_Schedule_Id)
    loop
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => r.Staff_Id,
                                    i_Robot_Id    => i_Robot_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => r.Begin_Date,
                                    i_End_Date    => r.End_Date);
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    else
      b.Raise_Not_Implemented;
    end if;
  
    for r in (select *
                from Htt_Registry_Units q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Registry_Id = i_Registry_Id)
    loop
      if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
        Gen_Registry_Staffs(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      else
        Gen_Registry_Robots(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Robot_Id    => r.Robot_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      end if;
    end loop;
  end;

end Htt_Core;
/

create or replace package Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_083;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_087;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_097(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2);

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_113;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_114;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_115;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_116;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  );
end Htt_Error;
/
create or replace package body Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Href_Pref.c_Htt_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('001:title:timesheet locked'),
          i_S1      => t('001:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('002:title:timesheet locked'),
          i_S1      => t('002:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('003:solution:reduce overtime by $1{overtime_exceed} and try again',
                              i_Overtime_Exceed_Text);
    end if;
  
    Error(i_Code    => '003',
          i_Message => t('003:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('003:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:fact value for $1{time_kind_name} exceeded 24 hours on timesheet $2{timesheet_date} for $3{staff_name}',
                         i_Time_Kind_Name,
                         i_Timesheet_Date,
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('005:solution:reduce overtime by $1{overtime_exceed} and try again');
    end if;
  
    Error(i_Code    => '005',
          i_Message => t('005:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('005:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => t('005:solution:increase free time on $1{timesheet_date} by changing plan hours in schedule $2{schedule_name}',
                         i_Timesheet_Date,
                         i_Schedule_Name),
          i_S3      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:request insertion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('006:title:timesheet locked'),
          i_S1      => t('006:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:track deletion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('007:title:timesheet locked'),
          i_S1      => t('007:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008 is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:{inserting overtime days} company id must be unique in dirty timesheet'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:cannot find location with $1{location_code}', i_Code),
          i_Title   => t('009:title:no data found'),
          i_S1      => t('009:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:cannot find location with $1{location_name}', i_Name),
          i_Title   => t('010:title:no data found'),
          i_S1      => t('010:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:cannot find schedule with $1{schedule_code}', i_Code),
          i_Title   => t('011:title:no data found'),
          i_S1      => t('011:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:cannot find schedule with $1{schedule_name}', i_Name),
          i_Title   => t('012:title:no data found'),
          i_S1      => t('012:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:marks for schedule $1{schedule_name} intersect on day $2{schedule_date}',
                         i_Schedule_Name,
                         i_Schedule_Date),
          i_S1      => t('013:solution:resolve intersection on $1{schedule_date} and try again',
                         i_Schedule_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:marks for template $1{template_name} intersect on day $2{day_no}',
                         i_Template_Name,
                         i_Day_No),
          i_S1      => t('014:solution:resolve intersection on $1{day_no} and try again', i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('015:title:timesheet locked'),
          i_S1      => t('015:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  ) is
    v_Exceed_Amount number := i_Used_Cnt + i_Request_Cnt - i_Annual_Limit;
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:staff $1{staff_name} request $2{request_kind_name} exceed annual limit $3{annual_limit} for year $4{exceed_year} by $5{exceed_amount}, used_amount:$6',
                         i_Staff_Name,
                         i_Request_Kind_Name,
                         i_Annual_Limit,
                         Extract(year from i_Year),
                         v_Exceed_Amount,
                         i_Used_Cnt),
          i_Title   => t('016:title:request annual limit exceeded'),
          i_S1      => t('016:solution:add annual limit for $1{request_kind_name}',
                         i_Request_Kind_Name),
          i_S2      => t('016:solution:decrease request days count by $1{exceed_amount}',
                         v_Exceed_Amount));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  ) is
  
    --------------------------------------------------
    Function Request_Time
    (
      i_Request_Type varchar2,
      i_Begin_Time   date,
      i_End_Time     date
    ) return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)') || to_char(i_Begin_Time, ', hh24:mi-') || to_char(i_End_Time,
                                                                                                          'hh24:mi');
        when Htt_Pref.c_Request_Type_Full_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return to_char(i_Begin_Time, 'fmdd mon (dy) - ') || to_char(i_End_Time, 'fmdd mon (dy)');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Begin_Inside boolean := i_Begin_Time between i_Intersect_Begin and i_Intersect_End;
      v_End_Inside   boolean := i_End_Time between i_Intersect_Begin and i_Intersect_End;
    begin
      case
        when v_Begin_Inside and not v_End_Inside then
          return t('017:solution:move request begin time after $1{intersect_end}', i_Intersect_End);
        when not v_Begin_Inside and v_End_Inside then
          return t('017:solution:move request end time before $1{intersect_start}',
                   i_Intersect_Begin);
        else
          return t('017:solution:move request out of $1{intersect_start} and $2{intersect_end}',
                   i_Intersect_Begin,
                   i_Intersect_End);
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:staff $1{staff_name} already has completed request during $2{request_time}',
                         i_Staff_Name,
                         Request_Time(i_Request_Type, i_Begin_Time, i_End_Time)),
          i_Title   => t('017:title:requests intersection'),
          i_S1      => t('017:solution:reset request with ID $1{request_id} and try again',
                         i_Intersect_Id),
          i_S2      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:chosen year ($1{chosen_year}) and calendar date year ($2{calendar_date}) are different',
                         i_Chosen_Year,
                         i_Calendar_Date),
          i_S1      => t('018:solution:change chosen year and try again'),
          i_S2      => t('018:solution:remove $1{calendar_date} from calendar and try again',
                         i_Calendar_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('019:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('020:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:cannot delete system calendar $1{calendar_id}', i_Calendar_Id),
          i_S1      => t('021:solution:remove this calendar from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022 is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:cannot change shift when schedule is attached to any staff'),
          i_Title   => t('022:title:used schedule'),
          i_S1      => t('022:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023 is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:cannot change track acceptance borders when schedule is attached to any staff'),
          i_Title   => t('023:title:used schedule'),
          i_S1      => t('023:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024 is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:cannot change track duration when schedule is attached to any staff'),
          i_Title   => t('024:title:used schedule'),
          i_S1      => t('024:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025 is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot change fact settings when schedule is attached to any staff'),
          i_Title   => t('025:title:used schedule'),
          i_S1      => t('025:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:chosen year ($1{chosen_year}) and schedule date year ($2{schedule_date}) are different',
                         i_Chosen_Year,
                         i_Schedule_Date),
          i_S1      => t('026:solution:change chosen year and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('027:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:pattern mark outside of worktime on day $1{day_no}', i_Day_No),
          i_S1      => t('028:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('028:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:marks begin time and end time is same on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('030:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:pattern mark outside of worktime on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('031:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('031:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('032:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  ) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:pattern mark outside of shift on day $1{day_no}', i_Day_No),
          i_S1      => t('033:solution:set mark end time before $1{shift_value}', i_Shift_Text),
          i_S2      => t('033:solution:set mark begin time after $1{shift_value}', i_Shift_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:cannot change time kind parent'),
          i_S1      => t('035:solution:restore old parent ($1{old_parent_name}) and try again',
                         i_Old_Parent_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036 is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:cannot set parent for system time kind'),
          i_S1      => t('036:solution:remove parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:cannot change plan load of system time kind'),
          i_S1      => t('037:solution:restore old plan load ($1{old_plan_load}) and try again',
                         i_Old_Plan_Load_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038 is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:cannot change requestable type of system time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039 is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:cannot create non system time kind without parent'),
          i_S1      => t('039:solution:set parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040 is
  begin
    Error(i_Code => '040', i_Message => t('040:message:cannot create non requestable time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041 is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:cannot set non system parent'),
          i_S1      => t('041:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042 is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:cannot set second level parent'),
          i_S1      => t('042:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2) is
  begin
    Error(i_Code    => '043',
          i_Message => t('043:message:time kind and its parent have different plan loads'),
          i_S1      => t('043:solution:set plan load to $1{parent_plan_load} and try again',
                         i_Parent_Plan_Load));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:cannot delete system time kind $1{time_kind_id}',
                         i_Time_Kind_Id),
          i_S1      => t('044:solution:remove this time kind from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  ) is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:found $1{main_photo_cnt} photos marked as main, only one photo can be main, person_name:$2',
                         i_Main_Photo_Cnt,
                         i_Person_Name),
          i_Title   => t('045:title:multiple main photos'),
          i_S1      => t('045:solution:unmark all photos and leave only one main photo'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  ) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:cannot change terminal model pcode'),
          i_S1      => t('046:solution:restore old pcode ($1{old_pcode}) for terminal model with ID $2{model_id}',
                         i_Old_Pcode,
                         i_Model_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047 is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:terminal must have model selected'),
          i_Title   => t('047:title:null model value'),
          i_S1      => t('047:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048 is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:location cannot be null'),
          i_Title   => t('048:title:null location value'),
          i_S1      => t('048:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050 is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:timepad must have language selected'),
          i_Title   => t('050:title:null language value'),
          i_S1      => t('050:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051 is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:terminal must have model selected'),
          i_Title   => t('051:title:null model value'),
          i_S1      => t('051:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052 is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:location cannot be null'),
          i_Title   => t('052:title:null location value'),
          i_S1      => t('052:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054 is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:timepad must have language selected'),
          i_Title   => t('054:title:null language value'),
          i_S1      => t('054:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:track $1{track_id} is already valid', i_Track_Id),
          i_S1      => t('055:solution:remove track $1{track_id} from validation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:track $1{track_id} is already invalid', i_Track_Id),
          i_S1      => t('056:solution:remove track $1{track_id} from invalidation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '057',
          i_Message => t('057:message:cant change time kind for system defined request kind'),
          i_S1      => t('057:solution:restore old time kind ($1{time_kind_name}) and try again',
                         i_Time_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:time kind $1{time_kind_name} is not requestable, it cannot be used for request kind',
                         i_Time_Kind_Name),
          i_S1      => t('058:solution:choose requestable time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:cant delete system defined request kind'),
          i_S1      => t('059:solution:remove request kind $1{request_kind_name} from deletion list and try again',
                         i_Request_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:to change/save request it shouldnt be approved, completed or denied {its status should be $1{request_status_new}}',
                         i_Request_Kind_New),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('060:solution:reset request and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:request staff cannot be changed'),
          i_S1      => t('061:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:request type and time kind plan load dont match'),
          i_S1      => t('062:solution:change requets type to one of $1{request_types} and try again',
                         Fazo.Gather(i_Allowed_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  ) is
  
    --------------------------------------------------
    Function Request_Time_Msg return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return t('063:request_time_msg:only part of day');
        when Htt_Pref.c_Request_Type_Full_Day then
          return t('063:request_time_msg:only one full day');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return t('063:request_time_msg:at least two days');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '063',
          i_Message => t('063:message:when request type is $1{request_type_name} request time should take $2{request_time_msg}',
                         i_Request_Type_Name,
                         Request_Time_Msg),
          i_Title   => t('063:title:request time is wrong'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('064:restriction_reason:request should be created $1{restriction_days} days in advance of request begin date $2{request_begin_date}',
                 v_Restriction_Days,
                 Trunc(i_Request_Begin));
      end if;
    
      return t('064:restriction_reason:request cannot be created $1{restriction_days} days after requst begin date $2{request_begin_date}',
               v_Restriction_Days,
               Trunc(i_Request_Begin));
    end;
  
  begin
    Error(i_Code    => '064',
          i_Message => t('064:message:exceeded request restriction days, $1{restriction_reason}',
                         Restriction_Reason),
          i_Title   => t('064:title:request restriction days'),
          i_S1      => t('064:solution:move request begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '065',
          i_Message => t('065:message:to reset request it must be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('065:solution:remove request (ID $1{request_id}) from reset list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '066',
          i_Message => t('066:message:to approve request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('066:solution:remove request (ID $1{request_id}) from approval list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '067',
          i_Message => t('067:message:to complete request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('067:solution:remove request (ID $1{request_id}) from completion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '068',
          i_Message => t('068:message:to deny request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('068:solution:remove request (ID $1{request_id}) from denial list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '069',
          i_Message => t('069:message:to delete request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('069:solution:remove request (ID $1{request_id}) from deletion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070 is
  begin
    Error(i_Code    => '070',
          i_Message => t('070:message:change must have at least one change day'),
          i_Title   => t('070:title:no change days'),
          i_S1      => t('070:solution:add change days and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '071',
          i_Message => t('071:message:to change/save plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('071:solution:reset plan change and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '072',
          i_Message => t('072:message:plan change staff cannot be changed'),
          i_S1      => t('072:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073 is
  begin
    Error(i_Code    => '073',
          i_Message => t('073:message:one date has not changed date'),
          i_S1      => t('073:title:add changed date for date which has not change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '074',
          i_Message => t('074:message:to delete plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('074:solution:remove plan change (ID $1{change_id}) from deletion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '075',
          i_Message => t('075:message:to reset plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('075:solution:remove plan change (ID $1{change_id}) from reset list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '076',
          i_Message => t('076:message:to approve plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('076:solution:remove plan change (ID $1{change_id}) from approval list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '077',
          i_Message => t('077:message:to complete plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('077:solution:remove plan change (ID $1{change_id}) from completion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '078',
          i_Message => t('078:message:to deny plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('078:solution:remove plan change (ID $1{change_id}) from denial list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079 is
  begin
    Error(i_Code => '079', i_Message => t('079:message:pin autogenerate value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080 is
  begin
    Error(i_Code => '080', i_Message => t('080:message:photo as face rec value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081 is
  begin
    Error(i_Code    => '081',
          i_Message => t('081:message:plan load cannot be extra'),
          i_S1      => t('081:solution:set another time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  ) is
  begin
    Error(i_Code    => '082',
          i_Message => t('082:message:qr code already deactivated, location_id:$1, location_name:$2, created_on:$3',
                         i_Location_Id,
                         i_Location_Name,
                         to_char(i_Created_On, Href_Pref.c_Date_Format_Second)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083 is
  begin
    Error(i_Code => '083', i_Message => t('083:message:cannot change posted, unpost first'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084 is
  begin
    Error(i_Code    => '084',
          i_Message => t('084:message:cannot change registry kind, registry kinds must be same'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '085',
          i_Message => t('085:message:chosen month for staff ($1{staff_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Staff_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('085:solution:change chosen month and try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086 is
  begin
    Error(i_Code    => '086',
          i_Message => t('086:message:cannot have robot unit in staff individual staff schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_087 is
  begin
    Error(i_Code    => '087',
          i_Message => t('087:message:cannot have staff unit in robot individual robot schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088 is
  begin
    Error(i_Code => '088', i_Message => t('088:message:cannot delete posted schedule registry'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '089',
          i_Message => t('089:message:Date ($1{i_date}) is missing in staff individual schedule for staff ($2{i_staff_name})',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '090',
          i_Message => t('090:message:Date ($1{i_date}) is missing in robot individual schedule for position: ($2{i_robot_name})',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  ) is
  begin
    Error(i_Code    => '091',
          i_Message => t('091:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) intersect',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '092',
          i_Message => t('092:message:At the date of ($1{i_date}) marks of robot ($2{i_robot_name}) intersect',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093 is
  begin
    Error(i_Code => '093', i_Message => t('093:message:cannot post posted documnent'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date) is
  begin
    Error(i_Code    => '094',
          i_Message => t('094:message:At the date of ($1{i_date}) there are no robot marks and no staff marks',
                         i_Date));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '095',
          i_Message => t('095:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) and of robot ($3{i_robot_name}) are present',
                         i_Date,
                         i_Staff_Name,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '096',
          i_Message => t('096:message:staff ($1{i_staff_name}) has at least two registries for individual schedule with intersecting dates.',
                         i_Staff_Name),
          i_S1      => t('096:Delete/unpost other registries then try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_097(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '097',
          i_Message => t('097:message:robot ($1{i_robot_name}) has at least two registries for individual schedule with intersecting date.',
                         i_Robot_Name),
          i_S1      => t('097:Delete/unpost other registries then try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '99',
          i_Message => t('099:message:chosen month for robot ($1{robot_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Robot_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('099:solution:change chosen month and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  ) is
  begin
    Error(i_Code    => '100',
          i_Message => t('100:message:staff $1{staff_name} already has approved plan change on $2{change_date}',
                         i_Staff_Name,
                         i_Change_Date),
          i_Title   => t('100:title:plan change intersection'),
          i_S1      => t('100:solution:reset change with ID $1{change_id} and try again',
                         i_Intersect_Id),
          i_S2      => t('100:solution:choose another change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '101',
          i_Message => t('101:message:$1{schedule_name} is system schedule, system schedule cannot be edited',
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '102',
          i_Message => t('102:message:$1{schedule_name} is system schedule, system schedule cannot be deleted',
                         i_Schedule_Name),
          i_S1      => t('102:solution:exclude $1{schedule_name} from delete list'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  ) is
  begin
    Error(i_Code    => '103',
          i_Message => t('103:message:found undefined days in schedule $1{schedule_name} on $2{undefined_month}',
                         i_Schedule_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('103:title:Undefined month'),
          i_S1      => t('103:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '104',
          i_Message => t('104:message:found undefined days in individual schedule for $1{staff_name} on $2{undefined_month}',
                         i_Staff_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('104:title:Undefined month'),
          i_S1      => t('104:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Error(i_Code    => '105',
          i_Message => t('105:message:the person is not attached to the location where the device is installed, filial=$2, location=$1, person=$3',
                         
                         z_Md_Filials.Take        (i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Name,
                         z_Htt_Locations.Take     (i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Name,
                         z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id).Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '106',
          i_Message => t('106:message:found undefined days in individual schedule for $1{robot_name} on $2{undefined_month}',
                         i_Robot_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('106:title:Undefined month'),
          i_S1      => t('106:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  ) is
  begin
    Error(i_Code    => '107',
          i_Message => t('107:message:employee $1{staff_name} has worktime intersection on $2{intersection_date}, end time for previous date $3{end_time} comes after begin time for current date $4{begin_time}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_End_Time, Href_Pref.c_Date_Format_Minute),
                         to_char(i_Begin_Time, Href_Pref.c_Date_Format_Minute)),
          i_Title   => t('107:title:work time intersection'),
          i_S1      => t('107:solution:move schedule change date after closest rest day, so worktime will not intersect'),
          i_S2      => t('107:solution:move begin time for $1{work_day_date} after $2{end_time} to remove intersection',
                         i_Timesheet_Date,
                         i_End_Time),
          i_S3      => t('107:solution:move end time for $1{work_day_date} before $2{begin_time} to remove intersection',
                         i_Timesheet_Date - 1,
                         i_Begin_Time));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108 is
  begin
    Error(i_Code    => '108',
          i_Message => t('108:message:max length of work day cannot exceed $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600),
          i_Title   => t('108:title:worktime limit'),
          i_S1      => t('108:solution:reduce max length of work day {defined by track_duration} to be less than $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number) is
  begin
    Error(i_Code    => '109',
          i_Message => t('109:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('109:title:length of note is not enough'),
          i_S1      => t('109:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number) is
  begin
    Error(i_Code    => '110',
          i_Message => t('110:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('110:title:length of note is not enough'),
          i_S1      => t('110:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2) is
  begin
    Error(i_Code    => '111',
          i_Message => t('111:message:you do not have access $1{schedule_kind} kind of schedule',
                         i_Schedule_Kind));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('112:message:restriction_reason:change should be created $1{restriction_days} days in advance of change day $2{change_day}',
                 v_Restriction_Days,
                 i_Change_Day);
      end if;
    
      return t('112:message:restriction_reason:change cannot be created $1{restriction_days} days after change day $2{change_day}',
               v_Restriction_Days,
               i_Change_Day);
    end;
  
  begin
    Error(i_Code    => '112',
          i_Message => Restriction_Reason,
          i_Title   => t('112:title:change restriction days'),
          i_S1      => t('112:solution:move change begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_113 is
  begin
    Error(i_Code    => '113',
          i_Message => t('113:message:cannot change allowed late time when schedule is attached to any staff'),
          i_Title   => t('113:title:used schedule'),
          i_S1      => t('113:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_114 is
  begin
    Error(i_Code    => '114',
          i_Message => t('114:message:cannot change allowed early time when schedule is attached to any staff'),
          i_Title   => t('114:title:used schedule'),
          i_S1      => t('114:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_115 is
  begin
    Error(i_Code    => '115',
          i_Message => t('115:message:cannot change begin late time when schedule is attached to any staff'),
          i_Title   => t('115:title:used schedule'),
          i_S1      => t('115:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_116 is
  begin
    Error(i_Code    => '116',
          i_Message => t('116:message:cannot change end early time when schedule is attached to any staff'),
          i_Title   => t('116:title:used schedule'),
          i_S1      => t('116:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117 is
  begin
    Error(i_Code    => '117',
          i_Message => t('117:message:cannot use advansed setting for $1{schedule_kind_name} schedule',
                         Htt_Util.t_Schedule_Kind(Htt_Pref.c_Schedule_Kind_Hourly)),
          i_Title   => t('117:title:used schedule'),
          i_S1      => t('117:solution:turn of advansed setting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118 is
  begin
    Error(i_Code    => '118',
          i_Message => t('118:message:location sync person global must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '119',
          i_Message => t('119:message:if there is a monthly limit in the staff calendar, swapped days should be in one month.
                                        you cannot swap $1{change_date} with $2{swapped_day} as there is a monthly limit on staff calendar',
                         i_Change_Date,
                         i_Swapped_Date),
          i_Title   => t('119:title:swapped dates are in different months'),
          i_S1      => t('119:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('119:solution:make the same month of swapped dates'),
          i_S3      => t('119:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '120',
          i_Message => t('120:message:plan time for $1{change_date} has exceeded the daily limit of calendar',
                         i_Change_Date),
          i_Title   => t('120:title:daily plan exceeded'),
          i_S1      => t('120:solution:turn off daily limit from $1{calendar_name}', i_Calendar_Name),
          i_S2      => t('120:solution:reduce plan time'),
          i_S3      => t('120:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '121',
          i_Message => t('121:message:because of monthly limit of calendar is on you cannot change day kind of $1{change_date}',
                         i_Change_Date),
          i_Title   => t('121:title:day kind changed'),
          i_S1      => t('121:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('121:solution:do not change the day kind'),
          i_S3      => t('121:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('122:message:in $1{robot_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    elsif i_Staff_Name is not null then
      v_Message := t('122:message:in $1{staff_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    else
      v_Message := t('122:message:for $1{schedule_date}, plan time has exceeded the limit of the calendar, plan_time = $2{plan_time}, limit_time = $3{limit_time}',
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    end if;
  
    Error(i_Code    => '122',
          i_Message => v_Message,
          i_Title   => t('122:title:daily plan time exceeded from calendar plan time'),
          i_S1      => t('122:solution:turn of daily limit from calendar'),
          i_S2      => t('122:solution:reduse daily plan time'),
          i_S3      => t('122:solution:remove calendar'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('123:message:in $1{robot_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Robot_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    elsif i_Staff_Name is not null then
      v_Message := t('123:message:in $1{staff_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Staff_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    else
      v_Message := t('123:message:plan days count must be the same with plan day limit in calendar for $1{month}, plan days = $2{plan_day}, limit day = $3{limit_day}',
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    end if;
  
    Error(i_Code    => '123',
          i_Message => v_Message,
          i_Title   => t('123:title:monthly working day count is not the same with calendar day limit'),
          i_S1      => t('123:solution:turn of monthly limit from calendar'),
          i_S2      => t('123:solution:make the same working day count with working day limit of calendar'),
          i_S3      => t('123:solution:remove calendar'));
  end;

end Htt_Error;
/

create or replace package Htt_Pref is
  ----------------------------------------------------------------------------------------------------
  type Photo_Rt is record(
    Photo_Sha varchar2(64),
    Is_Main   varchar2(1));
  type Photo_Nt is table of Photo_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id number(20),
    Person_Id  number(20),
    Pin        varchar2(15),
    Pin_Code   number(8),
    Rfid_Code  varchar2(20),
    Qr_Code    varchar2(64),
    Photos     Photo_Nt);
  ----------------------------------------------------------------------------------------------------
  type Calendar_Day_Rt is record(
    Calendar_Date date,
    name          varchar2(100),
    year          number(4),
    Day_Kind      varchar2(1),
    Swapped_Date  date);
  type Calendar_Day_Nt is table of Calendar_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Calendar_Week_Days_Rt is record(
    Order_No        number,
    Plan_Time       number,
    Preholiday_Hour number,
    Preweekend_Hour number);
  type Calender_Week_Days_Nt is table of Calendar_Week_Days_Rt;
  ----------------------------------------------------------------------------------------------------
  type Calendar_Rt is record(
    Company_Id    number(20),
    Filial_Id     number(20),
    Calendar_Id   number(20),
    name          varchar2(100 char),
    Code          varchar2(50 char),
    year          number,
    Monthly_Limit varchar2(1),
    Daily_Limit   varchar2(1),
    Days          Calendar_Day_Nt,
    Week_Days     Calender_Week_Days_Nt,
    Rest_Days     Array_Number);
  ----------------------------------------------------------------------------------------------------
  type Mark_Rt is record(
    Begin_Time number(4),
    End_Time   number(4));
  type Mark_Nt is table of Mark_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Day_Marks_Rt is record(
    Schedule_Date date,
    Begin_Time    number,
    End_Time      number,
    Marks         Mark_Nt);
  type Schedule_Day_Marks_Nt is table of Schedule_Day_Marks_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Day_Rt is record(
    Schedule_Date    date,
    Day_Kind         varchar2(1),
    Begin_Time       number(4),
    End_Time         number(4),
    Break_Enabled    varchar2(1),
    Break_Begin_Time number(4),
    Break_End_Time   number(4),
    Plan_Time        number(4));
  type Schedule_Day_Nt is table of Schedule_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Pattern_Day_Rt is record(
    Day_No           number(4),
    Day_Kind         varchar2(1),
    Begin_Time       number(4),
    End_Time         number(4),
    Break_Enabled    varchar2(1),
    Break_Begin_Time number(4),
    Break_End_Time   number(4),
    Plan_Time        number(4),
    Pattern_Marks    Mark_Nt);
  type Schedule_Pattern_Day_Nt is table of Schedule_Pattern_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Pattern_Rt is record(
    Pattern_Kind   varchar2(1),
    All_Days_Equal varchar2(1),
    Count_Days     number(4),
    Begin_Date     date,
    End_Date       date,
    Pattern_Day    Schedule_Pattern_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  type Schedule_Rt is record(
    Company_Id                number(20),
    Filial_Id                 number(20),
    Schedule_Id               number(20),
    name                      varchar2(100 char),
    Schedule_Kind             varchar2(1),
    Shift                     number(4),
    Input_Acceptance          number(4),
    Output_Acceptance         number(4),
    Track_Duration            number(4),
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Count_Free                varchar2(1),
    Advanced_Setting          varchar2(1),
    Allowed_Late_Time         number,
    Allowed_Early_Time        number,
    Begin_Late_Time           number,
    End_Early_Time            number,
    Calendar_Id               number(20),
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Gps_Turnout_Enabled       varchar2(1),
    Gps_Use_Location          varchar2(1),
    Gps_Max_Interval          number,
    State                     varchar2(1),
    Code                      varchar2(50 char),
    Days                      Schedule_Day_Nt,
    Marks                     Schedule_Day_Marks_Nt,
    Pattern                   Schedule_Pattern_Rt,
    year                      number(4));
  ----------------------------------------------------------------------------------------------------  
  type Schedule_Template_Rt is record(
    Template_Id               number(20),
    name                      varchar2(100 char),
    Description               varchar2(3000 char),
    Schedule_Kind             varchar2(1),
    All_Days_Equal            varchar2(1),
    Count_Days                number(4),
    Shift                     number(4),
    Input_Acceptance          number(4),
    Output_Acceptance         number(4),
    Track_Duration            number(4),
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Order_No                  number(6),
    State                     varchar2(1),
    Code                      varchar2(50),
    Pattern_Days              Schedule_Pattern_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Rt is record(
    Company_Id   number(20),
    Filial_Id    number(20),
    Timesheet_Id number(20),
    Input_Time   date,
    Output_Time  date);
  type Timesheet_Nt is table of Timesheet_Rt;
  ----------------------------------------------------------------------------------------------------
  type Time_Part_Rt is record(
    Input_Time  date,
    Output_Time date);
  type Time_Part_Nt is table of Time_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Track_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Timesheet_Id   number,
    Track_Id       number,
    Track_Datetime date,
    Track_Type     varchar2(1),
    Trans_Input    varchar2(1),
    Trans_Output   varchar2(1),
    Trans_Check    varchar2(1));
  type Timesheet_Track_Nt is table of Timesheet_Track_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Fact_Rt is record(
    Company_Id   number(20),
    Filial_Id    number(20),
    Timesheet_Id number(20),
    Time_Kind_Id number(20),
    Fact_Value   number(20));
  type Timesheet_Fact_Nt is table of Timesheet_Fact_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timesheet_Aggregated_Fact_Rt is record(
    Time_Kind_Id number(20),
    Fact_Value   number(20));
  type Timesheet_Aggregated_Fact_Nt is table of Timesheet_Aggregated_Fact_Rt;
  ----------------------------------------------------------------------------------------------------
  type Time_Kind_Rt is record(
    name  varchar2(100 char),
    Pcode varchar2(20));
  type Time_Kind_Nt is table of Time_Kind_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Part_Rt is record(
    Staff_Id   number(20),
    Part_Begin date,
    Part_End   date);
  type Staff_Part_Nt is table of Staff_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Track_Rt is record(
    Company_Id number(20),
    Filial_Id  number(20),
    Track_Id   number(20));
  type Track_Nt is table of Track_Rt;
  ----------------------------------------------------------------------------------------------------
  type Gps_Track_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Person_Id  number,
    Track_Date date,
    Data       blob,
    Batch_Id   number);
  ----------------------------------------------------------------------------------------------------
  type Gps_Track_Data_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Track_Id   number,
    Person_Id  number,
    Track_Date date,
    Track_Time date,
    Lat        number,
    Lng        number,
    Accuracy   number,
    Provider   varchar2(1));
  type Gps_Track_Data_Nt is table of Gps_Track_Data_Rt;
  ----------------------------------------------------------------------------------------------------
  type Change_Day_Rt is record(
    Change_Date      date,
    Swapped_Date     date,
    Day_Kind         varchar2(1),
    Begin_Time       date,
    End_Time         date,
    Break_Enabled    varchar2(1),
    Break_Begin_Time date,
    Break_End_Time   date,
    Plan_Time        number(5));
  type Change_Day_Nt is table of Change_Day_Rt;
  ----------------------------------------------------------------------------------------------------
  type Change_Rt is record(
    Company_Id  number(20),
    Filial_Id   number(20),
    Change_Id   number(20),
    Staff_Id    number(20),
    Change_Kind varchar2(1),
    Note        varchar2(300 char),
    Change_Days Change_Day_Nt);
  ----------------------------------------------------------------------------------------------------
  -- individual schedules  
  ----------------------------------------------------------------------------------------------------
  type Registry_Unit_Rt is record(
    Unit_Id         number,
    Staff_Id        number,
    Robot_Id        number,
    Monthly_Minutes number,
    Monthly_Days    number,
    Unit_Days       Schedule_Day_Nt,
    Unit_Marks      Schedule_Day_Marks_Nt);
  type Registry_Unit_Nt is table of Registry_Unit_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Registry_Rt is record(
    Company_Id                number,
    Filial_Id                 number,
    Registry_Id               number,
    Registry_Date             date,
    Registry_Number           varchar2(50 char),
    Registry_Kind             varchar2(1),
    Schedule_Kind             varchar2(1),
    month                     date,
    Division_Id               number,
    Note                      varchar2(300 char),
    Shift                     number,
    Input_Acceptance          number,
    Output_Acceptance         number,
    Track_Duration            number,
    Count_Late                varchar2(1),
    Count_Early               varchar2(1),
    Count_Lack                varchar2(1),
    Count_Free                varchar2(1),
    Advanced_Setting          varchar2(1),
    Allowed_Late_Time         number,
    Allowed_Early_Time        number,
    Begin_Late_Time           number,
    End_Early_Time            number,
    Calendar_Id               number,
    Take_Holidays             varchar(1),
    Take_Nonworking           varchar2(1),
    Take_Additional_Rest_Days varchar2(1),
    Gps_Turnout_Enabled       varchar2(1),
    Gps_Use_Location          varchar2(1),
    Gps_Max_Interval          number,
    Units                     Registry_Unit_Nt);
  ----------------------------------------------------------------------------------------------------
  -- attach type
  ----------------------------------------------------------------------------------------------------
  c_Attach_Type_Manual constant varchar2(1) := 'M';
  c_Attach_Type_Auto   constant varchar2(1) := 'A';
  c_Attach_Type_Global constant varchar2(1) := 'G';
  ----------------------------------------------------------------------------------------------------
  -- day kind
  ----------------------------------------------------------------------------------------------------
  c_Day_Kind_Work            constant varchar2(1) := 'W';
  c_Day_Kind_Rest            constant varchar2(1) := 'R';
  c_Day_Kind_Holiday         constant varchar2(1) := 'H';
  c_Day_Kind_Additional_Rest constant varchar2(1) := 'A';
  c_Day_Kind_Nonworking      constant varchar2(1) := 'N';
  c_Day_Kind_Swapped         constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- schedule kind 
  ----------------------------------------------------------------------------------------------------
  c_Schedule_Kind_Custom   constant varchar2(1) := 'C';
  c_Schedule_Kind_Flexible constant varchar2(1) := 'F';
  c_Schedule_Kind_Hourly   constant varchar2(1) := 'H';
  ----------------------------------------------------------------------------------------------------
  -- pattern kind
  ----------------------------------------------------------------------------------------------------
  c_Pattern_Kind_Weekly   constant varchar2(1) := 'W';
  c_Pattern_Kind_Periodic constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- protocol
  ----------------------------------------------------------------------------------------------------
  c_Protocol_Http  constant varchar2(1) := 'H';
  c_Protocol_Https constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- command kind
  ----------------------------------------------------------------------------------------------------
  c_Command_Kind_Update_Device             constant varchar2(1) := 'U';
  c_Command_Kind_Update_All_Device_Persons constant varchar2(1) := 'A';
  c_Command_Kind_Update_Person             constant varchar2(1) := 'P';
  c_Command_Kind_Remove_Device             constant varchar2(1) := 'D';
  c_Command_Kind_Remove_Person             constant varchar2(1) := 'R';
  c_Command_Kind_Sync_Tracks               constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  -- command status
  ----------------------------------------------------------------------------------------------------
  c_Command_Status_New       constant varchar2(1) := 'N';
  c_Command_Status_Sent      constant varchar2(1) := 'S';
  c_Command_Status_Complited constant varchar2(1) := 'C';
  c_Command_Status_Failed    constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- person role
  ----------------------------------------------------------------------------------------------------
  c_Person_Role_Admin  constant varchar2(1) := 'A';
  c_Person_Role_Normal constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- track type
  ----------------------------------------------------------------------------------------------------
  c_Track_Type_Input            constant varchar2(1) := 'I';
  c_Track_Type_Output           constant varchar2(1) := 'O';
  c_Track_Type_Check            constant varchar2(1) := 'C';
  c_Track_Type_Merger           constant varchar2(1) := 'M';
  c_Track_Type_Potential_Output constant varchar2(1) := 'P';
  c_Track_Type_Gps_Output       constant varchar2(1) := 'G';
  ----------------------------------------------------------------------------------------------------
  -- provider
  ----------------------------------------------------------------------------------------------------
  c_Provider_Gps     constant varchar2(1) := 'G';
  c_Provider_Network constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- gps track delimetr
  ----------------------------------------------------------------------------------------------------
  c_Gps_Track_Row_Delimiter    constant varchar2(1) := Chr(10);
  c_Gps_Track_Column_Delimiter constant varchar2(1) := Chr(9);
  ----------------------------------------------------------------------------------------------------
  -- emotion type
  ----------------------------------------------------------------------------------------------------
  c_Emotion_Type_Smile constant varchar2(1) := 'S';
  c_Emotion_Type_Wink  constant varchar2(1) := 'W';
  ----------------------------------------------------------------------------------------------------
  -- mark type
  ----------------------------------------------------------------------------------------------------
  c_Mark_Type_Password  constant varchar2(1) := 'P';
  c_Mark_Type_Touch     constant varchar2(1) := 'T';
  c_Mark_Type_Rfid_Card constant varchar2(1) := 'R';
  c_Mark_Type_Qr_Code   constant varchar2(1) := 'Q';
  c_Mark_Type_Face      constant varchar2(1) := 'F';
  c_Mark_Type_Manual    constant varchar2(1) := 'M';
  c_Mark_Type_Auto      constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- track status
  ----------------------------------------------------------------------------------------------------
  c_Track_Status_Draft          constant varchar2(1) := 'D';
  c_Track_Status_Not_Used       constant varchar2(1) := 'N';
  c_Track_Status_Partially_Used constant varchar2(1) := 'P';
  c_Track_Status_Used           constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- pcode time kind
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Time_Kind_Turnout             constant varchar2(20) := 'VHR:1';
  c_Pcode_Time_Kind_Late                constant varchar2(20) := 'VHR:2';
  c_Pcode_Time_Kind_Early               constant varchar2(20) := 'VHR:3';
  c_Pcode_Time_Kind_Leave               constant varchar2(20) := 'VHR:4';
  c_Pcode_Time_Kind_Rest                constant varchar2(20) := 'VHR:5';
  c_Pcode_Time_Kind_Lack                constant varchar2(20) := 'VHR:6';
  c_Pcode_Time_Kind_Free                constant varchar2(20) := 'VHR:7';
  c_Pcode_Time_Kind_Sick                constant varchar2(20) := 'VHR:8';
  c_Pcode_Time_Kind_Leave_Full          constant varchar2(20) := 'VHR:9';
  c_Pcode_Time_Kind_Trip                constant varchar2(20) := 'VHR:10';
  c_Pcode_Time_Kind_Vacation            constant varchar2(20) := 'VHR:11';
  c_Pcode_Time_Kind_Overtime            constant varchar2(20) := 'VHR:12';
  c_Pcode_Time_Kind_Meeting             constant varchar2(20) := 'VHR:13';
  c_Pcode_Time_Kind_Holiday             constant varchar2(20) := 'VHR:14';
  c_Pcode_Time_Kind_Nonworking          constant varchar2(20) := 'VHR:15';
  c_Pcode_Time_Kind_Before_Work         constant varchar2(20) := 'VHR:16';
  c_Pcode_Time_Kind_After_Work          constant varchar2(20) := 'VHR:17';
  c_Pcode_Time_Kind_Lunchtime           constant varchar2(20) := 'VHR:18';
  c_Pcode_Time_Kind_Free_Inside         constant varchar2(20) := 'VHR:19';
  c_Pcode_Time_Kind_Turnout_Adjustment  constant varchar2(20) := 'VHR:20';
  c_Pcode_Time_Kind_Overtime_Adjustment constant varchar2(20) := 'VHR:21';
  c_Pcode_Time_Kind_Additional_Rest     constant varchar2(20) := 'VHR:22';
  ----------------------------------------------------------------------------------------------------
  -- pcode request kinds
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Request_Kind_Sick_Leave constant varchar2(20) := 'VHR:1';
  c_Pcode_Request_Kind_Vacation   constant varchar2(20) := 'VHR:2';
  c_Pcode_Request_Kind_Trip       constant varchar2(20) := 'VHR:3';
  c_Pcode_Request_Kind_Leave      constant varchar2(20) := 'VHR:4';
  c_Pcode_Request_Kind_Meeting    constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Request_View constant varchar2(200) := '/vhr/htt/request_view+view';
  c_Form_Change_View  constant varchar2(200) := '/vhr/htt/change_view+view';
  ----------------------------------------------------------------------------------------------------
  -- pcode default calendar
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Default_Calendar constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- plan load
  ----------------------------------------------------------------------------------------------------
  c_Plan_Load_Full  constant varchar2(1) := 'F';
  c_Plan_Load_Part  constant varchar2(1) := 'P';
  c_Plan_Load_Extra constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- day count type
  ----------------------------------------------------------------------------------------------------
  c_Day_Count_Type_Calendar_Days   constant varchar2(1) := 'C';
  c_Day_Count_Type_Work_Days       constant varchar2(1) := 'W';
  c_Day_Count_Type_Production_Days constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- carryover policy
  ----------------------------------------------------------------------------------------------------
  c_Carryover_Policy_All  constant varchar2(1) := 'A';
  c_Carryover_Policy_Zero constant varchar2(1) := 'Z';
  c_Carryover_Policy_Cap  constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- pcode device type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Terminal  constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Timepad   constant varchar2(20) := 'VHR:2';
  c_Pcode_Device_Type_Staff     constant varchar2(20) := 'VHR:3';
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:4';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- request type
  ----------------------------------------------------------------------------------------------------
  c_Request_Type_Part_Of_Day   constant varchar2(1) := 'P';
  c_Request_Type_Full_Day      constant varchar2(1) := 'F';
  c_Request_Type_Multiple_Days constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------
  -- request status
  ----------------------------------------------------------------------------------------------------
  c_Request_Status_New       constant varchar2(1) := 'N';
  c_Request_Status_Approved  constant varchar2(1) := 'A';
  c_Request_Status_Completed constant varchar2(1) := 'C';
  c_Request_Status_Denied    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  -- change status
  ----------------------------------------------------------------------------------------------------
  c_Change_Status_New       constant varchar2(1) := 'N';
  c_Change_Status_Approved  constant varchar2(1) := 'A';
  c_Change_Status_Completed constant varchar2(1) := 'C';
  c_Change_Status_Denied    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  -- change kind
  ----------------------------------------------------------------------------------------------------
  c_Change_Kind_Swap        constant varchar2(1) := 'S';
  c_Change_Kind_Change_Plan constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  c_Dashboard_Worktime_Not_Started constant varchar2(2) := 'WN';
  c_Dashboard_Leave_Exists         constant varchar2(2) := 'LV';
  c_Dashboard_Staff_Late           constant varchar2(2) := 'L';
  c_Dashboard_Staff_Intime         constant varchar2(2) := 'I';
  c_Dashboard_Staff_Not_Come       constant varchar2(2) := 'NC';
  c_Dashboard_Rest_Day             constant varchar2(2) := 'R';
  c_Dashboard_Additional_Rest_Day  constant varchar2(2) := 'A';
  c_Dashboard_Holiday              constant varchar2(2) := 'H';
  c_Dashboard_Nonworking_Day       constant varchar2(2) := 'NW';
  c_Dashboard_Not_Licensed_Day     constant varchar2(2) := 'NL';
  c_Dashboard_No_Timesheet         constant varchar2(2) := 'N';
  ----------------------------------------------------------------------------------------------------
  c_Pin_Autogenerate            constant varchar2(50) := 'VHR:PIN_AUTOGENERATE';
  c_Photo_As_Face_Rec           constant varchar2(50) := 'VHR:PHOTO_AS_FACE_REC'; -- person main photo save as face recognation photo default value
  c_Location_Sync_Person_Global constant varchar2(50) := 'VHR:LOCATION_SYNC_PERSON_GLOBAL';
  c_Schedule_Trimmed_Tracks     constant varchar2(50) := 'VHR:SCHEDULE_TRIMMED_TRACKS';
  ----------------------------------------------------------------------------------------------------
  -- terminal model pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Zkteco_F18     constant varchar2(20) := 'VHR:1';
  c_Pcode_Zkteco_Eface10 constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- registry kinds
  ----------------------------------------------------------------------------------------------------
  c_Registry_Kind_Staff constant varchar2(1) := 'S';
  c_Registry_Kind_Robot constant varchar2(1) := 'R';
  ---------------------------------------------------------------------------------------------------- 
  -- individual schedules pcodes
  ---------------------------------------------------------------------------------------------------- 
  c_Pcode_Individual_Staff_Schedule constant varchar2(10) := 'VHR:1';
  c_Pcode_Individual_Robot_Schedule constant varchar2(10) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- request kind accrual kinds
  ----------------------------------------------------------------------------------------------------
  c_Accrual_Kind_Carryover constant varchar2(1) := 'C';
  c_Accrual_Kind_Plan      constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- acms track status
  ----------------------------------------------------------------------------------------------------
  c_Acms_Track_Status_New       constant varchar2(1) := 'N';
  c_Acms_Track_Status_Completed constant varchar2(1) := 'C';
  c_Acms_Track_Status_Failed    constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------    
  -- acms mark types
  ----------------------------------------------------------------------------------------------------
  c_Acms_Mark_Type_Touch constant varchar2(1) := 'T';
  c_Acms_Mark_Type_Face  constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- shift limits (in seconds)
  ----------------------------------------------------------------------------------------------------
  c_Max_Shift_Border     constant number := 8 * 3600;
  c_Min_Shift_Border     constant number := 4 * 3600;
  c_Max_Full_Plan        constant number := 24 * 3600;
  c_Default_Merge_Border constant number := 15 * 60;
  c_Max_Track_Duration   constant number := 72 * 3600;
  ----------------------------------------------------------------------------------------------------
  -- hourly wage limits (in seconds)
  ----------------------------------------------------------------------------------------------------
  c_Max_Worktime_Length constant number := 24 * 3600;
  ---------------------------------------------------------------------------------------------------- 
  -- location defined type
  ----------------------------------------------------------------------------------------------------
  c_Location_Defined_By_Gps   constant varchar2(1) := 'G';
  c_Location_Defined_By_Bssid constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- current work statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Work_Status_Out      constant varchar2(1) := 'O';
  c_Work_Status_Returned constant varchar2(1) := 'R';
  c_Work_Status_In       constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- schedulr list forms
  c_Schedule_List_Form                constant varchar2(100) := '/vhr/htt/schedule_list';
  c_Staff_Schedule_Registry_List_Form constant varchar2(100) := '/vhr/htt/schedule_registry_list+staff';
  c_Robot_Schedule_Registry_List_Form constant varchar2(100) := '/vhr/htt/schedule_registry_list+robot';
  ----------------------------------------------------------------------------------------------------
  -- additional time type
  c_Additional_Time_Type_Allowed constant varchar2(1) := 'A';
  c_Additional_Time_Type_Extra   constant varchar2(1) := 'E';
  ---------------------------------------------------------------------------------------------------- 
  -- device statuses
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';

end Htt_Pref;
/
create or replace package body Htt_Pref is
end Htt_Pref;
/

create or replace package Htt_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  );
  ------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Week_Day
  (
    o_Calendar        in out nocopy Htt_Pref.Calendar_Rt,
    i_Order_No        number,
    i_Plan_Time       number,
    i_Preholiday_Hour number,
    i_Preweekend_Hour number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Calendar_Id   number,
    i_Name          varchar2,
    i_Code          varchar2,
    i_Year          number,
    i_Monthly_Limit varchar2,
    i_Daily_Limit   varchar2,
    i_Rest_Day      Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Check_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Calendar_Monthly_Limit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date
  ) return Array_Number;
  ---------------------------------------------------------------------------------------------------- 
  Function Schedule_Day_Kind
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number := null,
    i_Robot_Id      number := null,
    i_Schedule_Id   number,
    i_Schedule_Date date
  ) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Check_Day_Kind
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number := null,
    i_Robot_Id    number := null,
    i_Schedule_Id number := null,
    i_Date        date,
    i_Day_Kind    varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Plan_Time
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number := null,
    i_Robot_Id        number := null,
    i_Schedule_Id     number := null,
    i_Date            date,
    i_Plan_Time       number,
    i_Preholiday_Time number,
    i_Preweekend_Time number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone;
  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt;
  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date;
  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined;
  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Staff_Schedule_Days%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Robot_Schedule_Days%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2;
  Function Day_Kinds return Matrix_Varchar2;
  Function Calendar_Day_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2;
  Function Pattern_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2;
  Function Schedule_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2;
  Function Protocols return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2;
  Function Command_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2;
  Function Command_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2;
  Function Person_Roles return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2;
  Function Track_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2;
  Function Providers return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2;
  Function Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2;
  Function Plan_Loads return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2;
  Function Day_Count_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2;
  Function Carryover_Policies return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2;
  Function Request_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2;
  Function Request_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2;
  Function Attach_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2;
  Function Change_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2;
  Function Change_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2;
  Function Dashboard_Status_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2;
  Function Accrual_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2;
  Function Acms_Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Acms_Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2;
  Function Location_Defined_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2;
  Function Work_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2;
end Htt_Util;
/
create or replace package body Htt_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Company_Timezones  Fazo.Varchar2_Code_Aat;
  g_Cache_Filial_Timezones   Fazo.Varchar2_Code_Aat;
  g_Cache_Location_Timezones Fazo.Varchar2_Code_Aat;
  g_Cache_Time_Kind_Ids      Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  ) is
  begin
    o_Person.Company_Id := i_Company_Id;
    o_Person.Person_Id  := i_Person_Id;
    o_Person.Pin        := i_Pin;
    o_Person.Pin_Code   := i_Pin_Code;
    o_Person.Rfid_Code  := i_Rfid_Code;
    o_Person.Qr_Code    := i_Qr_Code;
  
    o_Person.Photos := Htt_Pref.Photo_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  ) is
    v_Photo Htt_Pref.Photo_Rt;
  begin
    v_Photo.Photo_Sha := i_Photo_Sha;
    v_Photo.Is_Main   := i_Is_Main;
  
    p_Person.Photos.Extend;
    p_Person.Photos(p_Person.Photos.Count) := v_Photo;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  ) is
    v_Day Htt_Pref.Calendar_Day_Rt;
  begin
    v_Day.Calendar_Date := i_Calendar_Date;
    v_Day.Name          := i_Name;
    v_Day.Day_Kind      := i_Day_Kind;
    v_Day.Swapped_Date  := i_Swapped_Date;
  
    o_Calendar.Days.Extend();
    o_Calendar.Days(o_Calendar.Days.Count) := v_Day;
  end;

  ------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Week_Day
  (
    o_Calendar        in out nocopy Htt_Pref.Calendar_Rt,
    i_Order_No        number,
    i_Plan_Time       number,
    i_Preholiday_Hour number,
    i_Preweekend_Hour number
  ) is
    v_Week_Day Htt_Pref.Calendar_Week_Days_Rt;
  begin
    v_Week_Day.Order_No        := i_Order_No;
    v_Week_Day.Plan_Time       := i_Plan_Time;
    v_Week_Day.Preholiday_Hour := i_Preholiday_Hour;
    v_Week_Day.Preweekend_Hour := i_Preweekend_Hour;
  
    o_Calendar.Week_Days.Extend();
    o_Calendar.Week_Days(o_Calendar.Week_Days.Count) := v_Week_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Calendar_Id   number,
    i_Name          varchar2,
    i_Code          varchar2,
    i_Year          number,
    i_Monthly_Limit varchar2,
    i_Daily_Limit   varchar2,
    i_Rest_Day      Array_Number
  ) is
  begin
    o_Calendar.Company_Id    := i_Company_Id;
    o_Calendar.Filial_Id     := i_Filial_Id;
    o_Calendar.Calendar_Id   := i_Calendar_Id;
    o_Calendar.Name          := i_Name;
    o_Calendar.Code          := i_Code;
    o_Calendar.Year          := i_Year;
    o_Calendar.Monthly_Limit := i_Monthly_Limit;
    o_Calendar.Daily_Limit   := i_Daily_Limit;
    o_Calendar.Rest_Days     := i_Rest_Day;
  
    o_Calendar.Days      := Htt_Pref.Calendar_Day_Nt();
    o_Calendar.Week_Days := Htt_Pref.Calender_Week_Days_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  ) is
    v_Mark Htt_Pref.Mark_Rt;
  begin
    o_Marks.Extend();
  
    v_Mark.Begin_Time := i_Begin_Time;
    v_Mark.End_Time   := i_End_Time;
  
    o_Marks(o_Marks.Count) := v_Mark;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Day.Schedule_Date    := i_Schedule_Date;
    o_Day.Day_Kind         := i_Day_Kind;
    o_Day.Begin_Time       := i_Begin_Time;
    o_Day.End_Time         := i_End_Time;
    o_Day.Break_Enabled    := i_Break_Enabled;
    o_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Day.Break_End_Time   := i_Break_End_Time;
    o_Day.Plan_Time        := i_Plan_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  ) is
  begin
    o_Schedule.Days.Extend();
    o_Schedule.Days(o_Schedule.Days.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  ) is
  begin
    o_Schedule_Day_Marks.Schedule_Date := i_Schedule_Date;
    o_Schedule_Day_Marks.Begin_Time    := i_Begin_Date;
    o_Schedule_Day_Marks.End_Time      := i_End_Date;
  
    o_Schedule_Day_Marks.Marks := Htt_Pref.Mark_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  ) is
  begin
    o_Schedule.Marks.Extend();
    o_Schedule.Marks(o_Schedule.Marks.Count) := i_Day_Marks;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Pattern_Day.Day_No           := i_Day_No;
    o_Pattern_Day.Day_Kind         := i_Day_Kind;
    o_Pattern_Day.Begin_Time       := i_Begin_Time;
    o_Pattern_Day.End_Time         := i_End_Time;
    o_Pattern_Day.Break_Enabled    := i_Break_Enabled;
    o_Pattern_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Pattern_Day.Break_End_Time   := i_Break_End_Time;
    o_Pattern_Day.Plan_Time        := i_Plan_Time;
  
    o_Pattern_Day.Pattern_Marks := Htt_Pref.Mark_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Pattern.Pattern_Day.Extend();
    o_Schedule_Pattern.Pattern_Day(o_Schedule_Pattern.Pattern_Day.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  ) is
  begin
    o_Pattern.Pattern_Kind   := i_Pattern_Kind;
    o_Pattern.All_Days_Equal := i_All_Days_Equal;
    o_Pattern.Count_Days     := i_Count_Days;
    o_Pattern.Begin_Date     := i_Begin_Date;
    o_Pattern.End_Date       := i_End_Date;
  
    o_Pattern.Pattern_Day := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  ) is
  begin
    o_Registry_Unit.Unit_Id         := i_Unit_Id;
    o_Registry_Unit.Staff_Id        := i_Staff_Id;
    o_Registry_Unit.Robot_Id        := i_Robot_Id;
    o_Registry_Unit.Monthly_Minutes := i_Monthly_Minutes;
    o_Registry_Unit.Monthly_Days    := i_Monthly_Days;
  
    o_Registry_Unit.Unit_Days  := Htt_Pref.Schedule_Day_Nt();
    o_Registry_Unit.Unit_Marks := Htt_Pref.Schedule_Day_Marks_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  ) is
  begin
    o_Schedule_Registry.Company_Id                := i_Company_Id;
    o_Schedule_Registry.Filial_Id                 := i_Filial_Id;
    o_Schedule_Registry.Registry_Id               := i_Registry_Id;
    o_Schedule_Registry.Registry_Date             := i_Registry_Date;
    o_Schedule_Registry.Registry_Number           := i_Registry_Number;
    o_Schedule_Registry.Registry_Kind             := i_Registry_Kind;
    o_Schedule_Registry.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Registry.Month                     := i_Month;
    o_Schedule_Registry.Division_Id               := i_Division_Id;
    o_Schedule_Registry.Note                      := i_Note;
    o_Schedule_Registry.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Registry.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Registry.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Registry.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Registry.Count_Late                := i_Count_Late;
    o_Schedule_Registry.Count_Early               := i_Count_Early;
    o_Schedule_Registry.Count_Lack                := i_Count_Lack;
    o_Schedule_Registry.Count_Free                := i_Count_Free;
    o_Schedule_Registry.Advanced_Setting          := 'N';
    o_Schedule_Registry.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule_Registry.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule_Registry.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule_Registry.End_Early_Time            := i_End_Early_Time;
    o_Schedule_Registry.Calendar_Id               := i_Calendar_Id;
    o_Schedule_Registry.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Registry.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Registry.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Registry.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule_Registry.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule_Registry.Gps_Max_Interval          := i_Gps_Max_Interval;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule_Registry.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule_Registry.Units := Htt_Pref.Registry_Unit_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Staff_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number
  ) is
    v_Monthly_Limits     Array_Number;
    r_Calendar           Htt_Calendars%rowtype;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Monthly_Limit = 'Y' then
      v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => i_Calendar_Id,
                                                 i_Year_Begin  => i_Year_Begin);
      for r in (select Sd.Staff_Id,
                       Trunc(max(Sd.Schedule_Date), 'mon') month,
                       to_char(max(Sd.Schedule_Date), 'mm') Month_No,
                       count(*) Working_Day_Count
                  from Htt_Staff_Schedule_Days Sd
                 where Sd.Company_Id = i_Company_Id
                   and Sd.Filial_Id = i_Filial_Id
                   and Sd.Registry_Id = i_Registry_Id
                   and Sd.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                 group by Sd.Staff_Id)
      loop
        if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
          Htt_Error.Raise_123(i_Month      => to_char(r.Month, 'Month', v_Nls_Language),
                              i_Plan_Days  => r.Working_Day_Count,
                              i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)),
                              i_Staff_Name => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => r.Staff_Id));
        end if;
      end loop;
    end if;
  
    if r_Calendar.Daily_Limit = 'Y' then
      for r in (select *
                  from (select Sd.Staff_Id,
                               Sd.Schedule_Date,
                               Sd.Plan_Time,
                               (case
                                  when Td.Day_Kind = v_Dk_Holiday and Otd.Day_Kind = v_Dk_Rest then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                  when Td.Day_Kind = v_Dk_Holiday then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                  when Td.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                   Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                  else
                                   w.Plan_Time
                                end) Limit_Time
                          from Htt_Staff_Schedule_Days Sd
                          join Htt_Calendar_Week_Days w
                            on w.Company_Id = Sd.Company_Id
                           and w.Filial_Id = Sd.Filial_Id
                           and w.Calendar_Id = r_Calendar.Calendar_Id
                           and w.Order_No = Iso_Week_Day_No(Sd.Schedule_Date)
                          left join Htt_Staff_Schedule_Days Td -- schedule tomorrow day
                            on Td.Company_Id = Sd.Company_Id
                           and Td.Filial_Id = Sd.Filial_Id
                           and Td.Registry_Id = Sd.Registry_Id
                           and Td.Unit_Id = Sd.Unit_Id
                           and Td.Schedule_Date = Sd.Schedule_Date + 1
                          left join Htt_Unit_Schedule_Days Otd -- origin schedule tommorrow day
                            on Otd.Company_Id = Sd.Company_Id
                           and Otd.Filial_Id = Sd.Filial_Id
                           and Otd.Unit_Id = Sd.Unit_Id
                           and Otd.Schedule_Date = Sd.Schedule_Date + 1
                         where Sd.Company_Id = i_Company_Id
                           and Sd.Filial_Id = i_Filial_Id
                           and Sd.Registry_Id = i_Registry_Id) t
                 where t.Plan_Time > t.Limit_Time)
      loop
        Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                            i_Plan_Time     => r.Plan_Time,
                            i_Limit_Time    => r.Limit_Time,
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => r.Staff_Id));
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Robot_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number
  ) is
    v_Monthly_Limits     Array_Number;
    r_Calendar           Htt_Calendars%rowtype;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Monthly_Limit = 'Y' then
      v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => i_Calendar_Id,
                                                 i_Year_Begin  => i_Year_Begin);
      for r in (select (select Rob.Name
                          from Mrf_Robots Rob
                         where Rob.Company_Id = i_Company_Id
                           and Rob.Filial_Id = i_Filial_Id
                           and Rob.Robot_Id = Sd.Robot_Id) Robot_Name,
                       Trunc(max(Sd.Schedule_Date), 'mon') month,
                       to_char(max(Sd.Schedule_Date), 'mm') Month_No,
                       count(*) Working_Day_Count
                  from Htt_Robot_Schedule_Days Sd
                 where Sd.Company_Id = i_Company_Id
                   and Sd.Filial_Id = i_Filial_Id
                   and Sd.Registry_Id = i_Registry_Id
                   and Sd.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                 group by Sd.Robot_Id)
      loop
        if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
          Htt_Error.Raise_123(i_Month      => to_char(r.Month, 'Month', v_Nls_Language),
                              i_Plan_Days  => r.Working_Day_Count,
                              i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)),
                              i_Robot_Name => r.Robot_Name);
        end if;
      end loop;
    end if;
  
    if r_Calendar.Daily_Limit = 'Y' then
      for r in (select *
                  from (select (select Rob.Name
                                  from Mrf_Robots Rob
                                 where Rob.Company_Id = Sd.Company_Id
                                   and Rob.Filial_Id = Sd.Filial_Id
                                   and Rob.Robot_Id = Sd.Robot_Id) Robot_Name,
                               Sd.Schedule_Date,
                               Sd.Plan_Time,
                               (case
                                  when Td.Day_Kind = v_Dk_Holiday and Otd.Day_Kind = v_Dk_Rest then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                  when Td.Day_Kind = v_Dk_Holiday then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                  when Td.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                   Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                  else
                                   w.Plan_Time
                                end) Limit_Time
                          from Htt_Robot_Schedule_Days Sd
                          join Htt_Calendar_Week_Days w
                            on w.Company_Id = Sd.Company_Id
                           and w.Filial_Id = Sd.Filial_Id
                           and w.Calendar_Id = r_Calendar.Calendar_Id
                           and w.Order_No = Iso_Week_Day_No(Sd.Schedule_Date)
                          left join Htt_Robot_Schedule_Days Td -- schedule tomorrow day
                            on Td.Company_Id = Sd.Company_Id
                           and Td.Filial_Id = Sd.Filial_Id
                           and Td.Registry_Id = Sd.Registry_Id
                           and Td.Unit_Id = Sd.Unit_Id
                           and Td.Schedule_Date = Sd.Schedule_Date + 1
                          left join Htt_Unit_Schedule_Days Otd -- origin schedule tommorrow day
                            on Otd.Company_Id = Sd.Company_Id
                           and Otd.Filial_Id = Sd.Filial_Id
                           and Otd.Unit_Id = Sd.Unit_Id
                           and Otd.Schedule_Date = Sd.Schedule_Date + 1
                         where Sd.Company_Id = i_Company_Id
                           and Sd.Filial_Id = i_Filial_Id
                           and Sd.Registry_Id = i_Registry_Id) t
                 where t.Plan_Time > t.Limit_Time)
      loop
        Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                            i_Plan_Time     => r.Plan_Time,
                            i_Limit_Time    => r.Limit_Time,
                            i_Robot_Name    => r.Robot_Name);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number := null
  ) is
    r_Calendar           Htt_Calendars%rowtype;
    v_Monthly_Limits     Array_Number;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Check_Staff_Schedule_By_Calendar(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id,
                                       i_Year_Begin  => i_Year_Begin,
                                       i_Registry_Id => i_Registry_Id);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Check_Robot_Schedule_By_Calendar(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id,
                                       i_Year_Begin  => i_Year_Begin,
                                       i_Registry_Id => i_Registry_Id);
    
    else
      r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Calendar_Id => i_Calendar_Id);
    
      if r_Calendar.Monthly_Limit = 'Y' then
        v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Calendar_Id => i_Calendar_Id,
                                                   i_Year_Begin  => i_Year_Begin);
      
        for r in (select *
                    from (select to_char(q.Schedule_Date, 'mm') Month_No, count(*) Working_Day_Count
                            from Htt_Schedule_Days q
                           where q.Company_Id = i_Company_Id
                             and q.Filial_Id = i_Filial_Id
                             and q.Schedule_Id = i_Schedule_Id
                             and Trunc(q.Schedule_Date, 'year') = i_Year_Begin
                             and q.Day_Kind in
                                 (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                           group by to_char(q.Schedule_Date, 'mm')) t)
        loop
          if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
            Htt_Error.Raise_123(i_Month      => to_char(Add_Months(i_Year_Begin, r.Month_No - 1),
                                                        'Month',
                                                        v_Nls_Language),
                                i_Plan_Days  => r.Working_Day_Count,
                                i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)));
          end if;
        end loop;
      end if;
    
      if r_Calendar.Daily_Limit = 'Y' then
        for r in (select *
                    from (select q.Schedule_Date,
                                 q.Plan_Time,
                                 (case
                                    when Tm.Day_Kind = v_Dk_Holiday and Otm.Day_Kind = v_Dk_Rest then
                                     Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                    when Tm.Day_Kind = v_Dk_Holiday then
                                     Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                    when Tm.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                     Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                    else
                                     w.Plan_Time
                                  end) Limit_Time
                            from Htt_Schedule_Days q
                            join Htt_Calendar_Week_Days w
                              on w.Company_Id = q.Company_Id
                             and w.Filial_Id = q.Filial_Id
                             and w.Calendar_Id = r_Calendar.Calendar_Id
                             and w.Order_No = Iso_Week_Day_No(q.Schedule_Date)
                            left join Htt_Schedule_Days Tm -- schedule tomorrow day
                              on Tm.Company_Id = q.Company_Id
                             and Tm.Filial_Id = q.Filial_Id
                             and Tm.Schedule_Id = q.Schedule_Id
                             and Tm.Schedule_Date = q.Schedule_Date + 1
                            left join Htt_Schedule_Origin_Days Otm -- origin schedule tommorrow day
                              on Otm.Company_Id = q.Company_Id
                             and Otm.Filial_Id = q.Filial_Id
                             and Otm.Schedule_Id = q.Schedule_Id
                             and Otm.Schedule_Date = q.Schedule_Date + 1
                           where q.Company_Id = i_Company_Id
                             and q.Filial_Id = i_Filial_Id
                             and q.Schedule_Id = i_Schedule_Id) t
                   where t.Plan_Time > t.Limit_Time)
        loop
          Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                              i_Plan_Time     => r.Plan_Time,
                              i_Limit_Time    => r.Limit_Time);
        end loop;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  ) is
  begin
    o_Schedule.Company_Id                := i_Company_Id;
    o_Schedule.Filial_Id                 := i_Filial_Id;
    o_Schedule.Schedule_Id               := i_Schedule_Id;
    o_Schedule.Name                      := i_Name;
    o_Schedule.Shift                     := i_Shift;
    o_Schedule.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule.Input_Acceptance          := i_Input_Acceptance;
    o_Schedule.Output_Acceptance         := i_Output_Acceptance;
    o_Schedule.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule.Count_Late                := i_Count_Late;
    o_Schedule.Count_Early               := i_Count_Early;
    o_Schedule.Count_Lack                := i_Count_Lack;
    o_Schedule.Count_Free                := i_Count_Free;
    o_Schedule.Advanced_Setting          := 'N';
    o_Schedule.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule.End_Early_Time            := i_End_Early_Time;
    o_Schedule.Calendar_Id               := i_Calendar_Id;
    o_Schedule.Take_Holidays             := i_Take_Holidays;
    o_Schedule.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule.Gps_Max_Interval          := i_Gps_Max_Interval;
    o_Schedule.State                     := i_State;
    o_Schedule.Code                      := i_Code;
    o_Schedule.Year                      := i_Year;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule.Days    := Htt_Pref.Schedule_Day_Nt();
    o_Schedule.Marks   := Htt_Pref.Schedule_Day_Marks_Nt();
    o_Schedule.Pattern := Htt_Pref.Schedule_Pattern_Rt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Template.Pattern_Days.Extend();
    o_Schedule_Template.Pattern_Days(o_Schedule_Template.Pattern_Days.Count) := i_Pattern_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  ) is
  begin
    o_Schedule_Template.Template_Id               := i_Template_Id;
    o_Schedule_Template.Name                      := i_Name;
    o_Schedule_Template.Description               := i_Description;
    o_Schedule_Template.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Template.All_Days_Equal            := i_All_Days_Equal;
    o_Schedule_Template.Count_Days                := i_Count_Days;
    o_Schedule_Template.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Template.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Template.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Template.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Template.Count_Late                := i_Count_Late;
    o_Schedule_Template.Count_Early               := i_Count_Early;
    o_Schedule_Template.Count_Lack                := i_Count_Lack;
    o_Schedule_Template.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Template.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Template.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Template.Order_No                  := i_Order_No;
    o_Schedule_Template.State                     := i_State;
    o_Schedule_Template.Code                      := i_Code;
  
    o_Schedule_Template.Pattern_Days := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Monthly_Limit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date
  ) return Array_Number is
    v_Month_Begin    date;
    v_Month_End      date;
    v_Monthly_Limits Array_Number := Array_Number();
  begin
    v_Monthly_Limits.Extend(12);
  
    for i in 1 .. 12
    loop
      v_Month_Begin := Add_Months(i_Year_Begin, i - 1);
      v_Month_End   := Last_Day(v_Month_Begin);
    
      v_Monthly_Limits(i) := v_Month_End - v_Month_Begin + 1 -
                             Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Calendar_Id => i_Calendar_Id,
                                                      i_Begin_Date  => v_Month_Begin,
                                                      i_End_Date    => v_Month_End);
    end loop;
  
    return v_Monthly_Limits;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Day_Kind
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number := null,
    i_Robot_Id      number := null,
    i_Schedule_Id   number,
    i_Schedule_Date date
  ) return varchar2 is
    v_Day_Kind varchar2(1);
    v_Unit_Id  number;
    v_Robot_Id number := i_Robot_Id;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      v_Unit_Id := z_Htt_Staff_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Staff_Id => i_Staff_Id, --
                   i_Schedule_Date => i_Schedule_Date).Unit_Id;
    
      v_Day_Kind := z_Htt_Unit_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Unit_Id => v_Unit_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      if v_Robot_Id is not null then
        v_Robot_Id := Hpd_Util.Get_Closest_Robot_Id(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_Schedule_Date);
      end if;
    
      v_Unit_Id := z_Htt_Robot_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Robot_Id => v_Robot_Id, --
                   i_Schedule_Date => i_Schedule_Date).Unit_Id;
    
      v_Day_Kind := z_Htt_Unit_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Unit_Id => v_Unit_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    else
      v_Day_Kind := z_Htt_Schedule_Origin_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Schedule_Id => i_Schedule_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    end if;
  
    return v_Day_Kind;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Check_Day_Kind
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number := null,
    i_Robot_Id    number := null,
    i_Schedule_Id number := null,
    i_Date        date,
    i_Day_Kind    varchar2
  ) return varchar2 is
    r_Timesheet         Htt_Timesheets%rowtype;
    v_Schedule_Day_Kind varchar2(1);
  begin
    r_Timesheet := Timesheet(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Timesheet_Date => i_Date);
  
    v_Schedule_Day_Kind := Schedule_Day_Kind(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Staff_Id      => i_Staff_Id,
                                             i_Robot_Id      => i_Robot_Id,
                                             i_Schedule_Id   => Nvl(r_Timesheet.Schedule_Id,
                                                                    i_Schedule_Id),
                                             i_Schedule_Date => i_Date);
  
    if r_Timesheet.Day_Kind = i_Day_Kind or v_Schedule_Day_Kind = i_Day_Kind then
      return 'Y';
    end if;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Plan_Time
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number := null,
    i_Robot_Id        number := null,
    i_Schedule_Id     number := null,
    i_Date            date,
    i_Plan_Time       number,
    i_Preholiday_Time number,
    i_Preweekend_Time number
  ) return number is
    v_Plan_Time number := i_Plan_Time;
  begin
    if Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Holiday) = 'Y' then
      v_Plan_Time := Greatest(v_Plan_Time - i_Preholiday_Time, 0);
    end if;
  
    if Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Additional_Rest) = 'Y' or
       Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Rest) = 'Y' then
      v_Plan_Time := Greatest(v_Plan_Time - i_Preweekend_Time, 0);
    end if;
  
    return v_Plan_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  ) is
  begin
    o_Timesheets.Extend;
    o_Timesheets(o_Timesheets.Count) := Htt_Pref.Timesheet_Rt(Company_Id   => i_Company_Id,
                                                              Filial_Id    => i_Filial_Id,
                                                              Timesheet_Id => i_Timesheet_Id,
                                                              Input_Time   => i_Input_Time,
                                                              Output_Time  => i_Output_Time);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  ) is
  begin
    o_Facts.Extend();
    o_Facts(o_Facts.Count) := Htt_Pref.Timesheet_Fact_Rt(Company_Id   => i_Company_Id,
                                                         Filial_Id    => i_Filial_Id,
                                                         Timesheet_Id => i_Timesheet_Id,
                                                         Time_Kind_Id => i_Time_Kind_Id,
                                                         Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  ) is
  begin
    o_Change.Company_Id  := i_Company_Id;
    o_Change.Filial_Id   := i_Filial_Id;
    o_Change.Change_Id   := i_Change_Id;
    o_Change.Staff_Id    := i_Staff_Id;
    o_Change.Change_Kind := i_Change_Kind;
    o_Change.Note        := i_Note;
  
    o_Change.Change_Days := Htt_Pref.Change_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  ) is
    v_Change_Day Htt_Pref.Change_Day_Rt;
  begin
    v_Change_Day.Change_Date      := i_Change_Date;
    v_Change_Day.Swapped_Date     := i_Swapped_Date;
    v_Change_Day.Begin_Time       := i_Begin_Time;
    v_Change_Day.End_Time         := i_End_Time;
    v_Change_Day.Day_Kind         := i_Day_Kind;
    v_Change_Day.Break_Enabled    := i_Break_Enabled;
    v_Change_Day.Break_Begin_Time := i_Break_Begin_Time;
    v_Change_Day.Break_End_Time   := i_Break_End_Time;
    v_Change_Day.Plan_Time        := i_Plan_Time;
  
    o_Change.Change_Days.Extend();
    o_Change.Change_Days(o_Change.Change_Days.Count) := v_Change_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
  begin
    return g_Cache_Company_Timezones(i_Company_Id);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Company_Infos.Load(i_Company_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Dbtimezone;
      end if;
    
      g_Cache_Company_Timezones(i_Company_Id) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Filial_Id;
  begin
    return g_Cache_Filial_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Filials.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Filial_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Location_Id;
  begin
    return g_Cache_Location_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Location_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date is
  begin
    if i_Timezone is not null then
      return to_date(to_char(i_Timestamp At time zone i_Timezone, 'ddmmyyyyhh24miss'),
                     'ddmmyyyyhh24miss');
    end if;
  
    return to_date(to_char(i_Timestamp, 'ddmmyyyyhh24miss'), 'ddmmyyyyhh24miss');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date is
  begin
    return Timestamp_To_Date(i_Timestamp => Current_Timestamp,
                             i_Timezone  => Load_Timezone(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id));
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype is
    r_Device Htt_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Htt_Devices q
     where q.Company_Id = i_Company_Id
       and q.Device_Type_Id = i_Device_Type_Id
       and q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt is
    result Htt_Pref.Time_Kind_Nt;
  begin
    select Tk.Name, Lower(Tk.Pcode)
      bulk collect
      into result
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Pcode is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number is
    result number;
  begin
    result := z_Htt_Time_Kinds.Take(i_Company_Id => i_Company_Id, i_Time_Kind_Id => i_Time_Kind_Id).Parent_Id;
  
    if result is null then
      result := i_Time_Kind_Id;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Code varchar2(100) := i_Company_Id || ' ' || i_Pcode;
    result number;
  begin
    return g_Cache_Time_Kind_Ids(v_Code);
  exception
    when No_Data_Found then
      select Time_Kind_Id
        into result
        from Htt_Time_Kinds
       where Company_Id = i_Company_Id
         and Pcode = i_Pcode;
    
      g_Cache_Time_Kind_Ids(v_Code) := result;
    
      return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number is
    result Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into result
      from Htt_Time_Kinds Tk
      left join Htt_Time_Kinds p
        on p.Company_Id = Tk.Company_Id
       and p.Time_Kind_Id = Tk.Parent_Id
     where Tk.Company_Id = i_Company_Id
       and (Tk.Pcode member of i_Pcodes or p.Pcode member of i_Pcodes);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number is
    result number;
  begin
    select t.Person_Id
      into result
      from Htt_Persons t
     where t.Company_Id = i_Company_Id
       and t.Pin = i_Pin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select p.Schedule_Id
      into result
      from Htt_Schedules p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Pin_Autogenerate),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Photo_As_Face_Rec),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
  begin
    return z_Htt_Persons.Load(i_Company_Id => i_Company_Id, --
                              i_Person_Id  => i_Person_Id).Pin;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number is
    result Array_Number;
  begin
    select q.Filial_Id
      bulk collect
      into result
      from Htt_Location_Persons q
     where q.Company_Id = i_Company_Id
       and q.Location_Id = i_Location_Id
       and q.Person_Id = i_Person_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_009(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when others then
      Htt_Error.Raise_010(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_011(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_012(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number is
    result number;
  begin
    select q.Device_Type_Id
      into result
      from Htt_Device_Types q
     where q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2 is
    result varchar2(20);
  begin
    select q.Pcode
      into result
      from Htt_Device_Types q
     where q.Device_Type_Id = i_Device_Type_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2 is
    v_Key varchar2(100 char) := to_char(Dbms_Crypto.Randombytes(32));
  begin
    return Fazo.Hash_Sha1(i_Person_Id || ':qr_code_secret_key:' || v_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2 is
  begin
    return 'manager_device:' || i_Serial_Number;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone is
  begin
    return From_Tz(cast(i_Date as timestamp), i_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number is
  begin
    return Trunc(i_Date) - Trunc(i_Date, 'iw') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number is
    result number;
  begin
    select Calendar_Id
      into result
      from Htt_Calendars c
     where c.Company_Id = i_Company_Id
       and c.Filial_Id = i_Filial_Id
       and c.Pcode = Htt_Pref.c_Pcode_Default_Calendar;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number is
    v_Calendar_Id number;
    result        Array_Number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    select Cd.Week_Day_No
      bulk collect
      into result
      from Htt_Calendar_Rest_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = v_Calendar_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean is
  begin
    if not z_Htt_Calendar_Days.Exist(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Calendar_Id   => i_Calendar_Id,
                                     i_Calendar_Date => i_Date,
                                     o_Row           => o_Calendar_Day) then
      begin
        select *
          into o_Calendar_Day
          from Htt_Calendar_Days Cd
         where Cd.Company_Id = i_Company_Id
           and Cd.Filial_Id = i_Filial_Id
           and Cd.Calendar_Id = i_Calendar_Id
           and Cd.Swapped_Date = i_Date;
      exception
        when No_Data_Found then
          return false;
      end;
    end if;
  
    return true;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Rest_Days    Array_Number;
    v_Calendar_Id  number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    v_Rest_Days := Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Calendar_Id => v_Calendar_Id);
  
    if Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                       i_Filial_Id    => i_Filial_Id,
                       i_Calendar_Id  => v_Calendar_Id,
                       i_Date         => i_Date,
                       o_Calendar_Day => r_Calendar_Day) and
       r_Calendar_Day.Day_Kind in
       (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest) then
      return true;
    end if;
  
    return Fazo.Contains(v_Rest_Days, Iso_Week_Day_No(i_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Rest_Days_Count number := 0;
    v_Holiday_Count   number;
  begin
    if i_End_Date < i_Begin_Date then
      return 0;
    end if;
  
    select count(*)
      into v_Holiday_Count
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = i_Calendar_Id
       and Cd.Calendar_Date between i_Begin_Date and i_End_Date
       and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest)
       and not exists (select *
              from Htt_Calendar_Rest_Days w
             where w.Company_Id = Cd.Company_Id
               and w.Filial_Id = Cd.Filial_Id
               and w.Calendar_Id = Cd.Calendar_Id
               and w.Week_Day_No = Iso_Week_Day_No(Cd.Calendar_Date));
  
    for r in (select Rd.Week_Day_No
                from Htt_Calendar_Rest_Days Rd
               where Rd.Company_Id = i_Company_Id
                 and Rd.Filial_Id = i_Filial_Id
                 and Rd.Calendar_Id = i_Calendar_Id)
    loop
      v_Rest_Days_Count := v_Rest_Days_Count +
                           (Trunc(i_End_Date, 'iw') - Trunc(i_Begin_Date + 7, 'iw')) / 7;
    
      if i_End_Date - Trunc(i_End_Date, 'iw') + 1 >= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    
      if i_Begin_Date - Trunc(i_Begin_Date, 'iw') + 1 <= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    end loop;
  
    return v_Holiday_Count + v_Rest_Days_Count;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Type = i_Track_Type
       and q.Track_Datetime = i_Track_Datetime
       and q.Device_Id = i_Device_Id;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean is
  begin
    o_Timesheet := Timesheet(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Timesheet_Date => i_Timesheet_Date);
  
    return o_Timesheet.Company_Id is not null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Request
  (
    i_Company_Id      number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Staff_Id = i_Staff_Id
       and q.Request_Kind_Id = i_Request_Kind_Id
       and q.Status = Htt_Pref.c_Request_Status_Completed
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype is
    result Htt_Timesheets%rowtype;
  begin
    select *
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date = i_Timesheet_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean is
    v_Track_Latlng    Array_Varchar2;
    v_Location_Latlng Array_Varchar2;
  begin
    v_Track_Latlng := Fazo.Split(i_Latlng, ',');
  
    for r in (select l.Latlng, l.Accuracy
                from Htt_Locations l
               where l.Company_Id = i_Company_Id
                 and l.Prohibited = 'Y'
                 and l.State = 'A'
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = l.Location_Id
                         and Lp.Person_Id = i_Person_Id))
    loop
      v_Location_Latlng := Fazo.Split(r.Latlng, ',');
    
      if r.Accuracy >= Nvl(Trunc(Power(Power(69.1 * (v_Location_Latlng(1) - v_Track_Latlng(1)), 2) +
                                       Power(53.0 * (v_Location_Latlng(2) - v_Track_Latlng(2)), 2),
                                       0.5) / 0.00062137),
                           0) then
        return true;
      end if;
    end loop;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date + Href_Pref.c_Diff_Hiring <= i_Period
       and Nvl(s.Dismissal_Date + Href_Pref.c_Diff_Dismissal, i_Period) >= i_Period
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt is
    result Href_Pref.Period_Nt;
  begin
    select q.Begin_Date, q.End_Date
      bulk collect
      into result
      from (select Nvl(Lag(s.Dismissal_Date)
                       Over(order by s.Hiring_Date) + Href_Pref.c_Diff_Dismissal,
                       Href_Pref.c_Min_Date) as Begin_Date,
                   s.Hiring_Date + Href_Pref.c_Diff_Hiring as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
            union
            select s.Dismissal_Date + Href_Pref.c_Diff_Dismissal as Begin_Date,
                   Href_Pref.c_Max_Date as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
               and s.Hiring_Date = (select max(S1.Hiring_Date)
                                      from Href_Staffs S1
                                     where S1.Company_Id = i_Company_Id
                                       and S1.Filial_Id = i_Filial_Id
                                       and S1.Employee_Id = i_Employee_Id
                                       and S1.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                                       and S1.State = 'A')
               and s.Dismissal_Date is not null) q;
  
    if Result.Count = 0 then
      Result.Extend;
      result(Result.Last) := Href_Pref.Period_Rt(Href_Pref.c_Min_Date, Href_Pref.c_Max_Date);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number is
    f_Arr  Array_Number;
    v_Time varchar2(5) := to_char(i_Date, Href_Pref.c_Time_Format_Minute);
  begin
    f_Arr := Fazo.To_Array_Number(Fazo.Split(v_Time, ':'));
    return f_Arr(1) * 60 + f_Arr(2);
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2 is
  begin
    if i_Minutes is null then
      return null;
    end if;
    return Lpad(Trunc(i_Minutes / 60), 2, '0') || ':' || Lpad(mod(i_Minutes, 60), 2, '0');
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2 is
    v_Seconds number := i_Seconds;
    v_Value   number;
    v_Sign    varchar2(1);
    result    varchar2(50 char);
  begin
    if Nvl(v_Seconds, 0) = 0 then
      return null;
    end if;
  
    if v_Seconds < 0 then
      v_Sign    := '-';
      v_Seconds := -v_Seconds;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(v_Seconds / 3600);
    else
      v_Value := Round(v_Seconds / 3600, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(mod(v_Seconds, 3600) / 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    if i_Show_Minutes and i_Show_Seconds then
      v_Value := Trunc(mod(v_Seconds, 60));
    
      if i_Show_Words then
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
        
          result := result || v_Value || ' ' || t('sec');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return v_Sign || result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2 is
    v_Value number;
    result  varchar2(50 char);
  begin
    if Nvl(i_Minutes, 0) = 0 then
      return null;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(i_Minutes / 60);
    else
      v_Value := Round(i_Minutes / 60, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := mod(Trunc(i_Minutes), 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return result;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype is
    result Htt_Request_Kind_Accruals%rowtype;
  begin
    select p.*
      into result
      from Htt_Request_Kind_Accruals p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Request_Kind_Id = i_Request_Kind_Id
       and p.Accrual_Kind = i_Accrual_Kind
       and i_Period_End <= p.Period
       and Trunc(p.Period, 'yyyy') <= i_Period_Begin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number is
    v_Date      date := i_Request_Begin_Time;
    r_Timesheet Htt_Timesheets%rowtype;
    r_Schedule  Htt_Schedules%rowtype;
    result      number := 0;
  begin
    for i in 0 .. Floor(i_Request_End_Time - v_Date)
    loop
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Date + i);
    
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => r_Timesheet.Schedule_Id);
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days and
         r_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Calendar_Id => r_Schedule.Calendar_Id,
                                  i_Date        => r_Timesheet.Timesheet_Date) then
        result := result + 1;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Start date := Trunc(i_Period, 'yyyy');
    v_Period_End   date := Year_Last_Day(i_Period);
    v_Request_Id   number := Nvl(i_Request_Id, -1);
    v_Calendar_Id  number := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Days_Cnt number;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists
               (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind in (Htt_Pref.c_Day_Kind_Work,
                                            Htt_Pref.c_Day_Kind_Rest,
                                            Htt_Pref.c_Day_Kind_Nonworking)
                         and not exists
                       (select 1
                                from Htt_Calendar_Rest_Days Rd
                               where Rd.Company_Id = k.Company_Id
                                 and Rd.Filial_Id = k.Filial_Id
                                 and Rd.Calendar_Id = Nvl(k.Calendar_Id, v_Calendar_Id)
                                 and Rd.Week_Day_No =
                                     (Trunc(k.Timesheet_Date) - Trunc(k.Timesheet_Date, 'iw') + 1)))
               group by p.Interval_Date);
    elsif r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind = Htt_Pref.c_Day_Kind_Work)
               group by p.Interval_Date);
    else
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
               group by p.Interval_Date);
    end if;
  
    return v_Days_Cnt;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    v_Error_Date date;
  begin
    select Dm.Schedule_Date
      into v_Error_Date
      from Htt_Schedule_Origin_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of i_Dates
       and exists (select 1
              from Htt_Schedule_Origin_Day_Marks Sm
             where Sm.Company_Id = Dm.Company_Id
               and Sm.Filial_Id = Dm.Filial_Id
               and Sm.Schedule_Id = Dm.Schedule_Id
               and Sm.Schedule_Date = Dm.Schedule_Date
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_013(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                           i_Filial_Id => i_Filial_Id, --
                                           i_Schedule_Id => i_Schedule_Id).Name,
                        i_Schedule_Date => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  ) is
    v_Error_Day number;
  begin
    select Dm.Day_No
      into v_Error_Day
      from Htt_Schedule_Template_Marks Dm
     where Dm.Template_Id = i_Template_Id
       and Dm.Day_No member of i_Day_Numbers
       and exists (select 1
              from Htt_Schedule_Template_Marks Sm
             where Sm.Template_Id = Dm.Template_Id
               and Sm.Day_No = Dm.Day_No
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_014(i_Template_Name => z_Htt_Schedule_Templates.Load(i_Template_Id).Name,
                        i_Day_No        => v_Error_Day);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    begin
      select Tl.Timesheet_Date
        into v_Locked_Date
        from Htt_Timesheet_Locks Tl
       where Tl.Company_Id = i_Company_Id
         and Tl.Filial_Id = i_Filial_Id
         and Tl.Staff_Id = i_Staff_Id
         and Tl.Timesheet_Date member of i_Dates
         and Rownum = 1;
    
      r_Timebook := z_Hpr_Timebooks.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Timebook_Id => z_Hpr_Timesheet_Locks.Load(i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Staff_Id => i_Staff_Id, --
                                                          i_Timesheet_Date => v_Locked_Date).Timebook_Id);
    
      Htt_Error.Raise_015(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => v_Locked_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    exception
      when No_Data_Found then
        null;
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Begin date := Year_Last_Day(i_Request_Begin_Time);
    v_Period_End   date := Year_Last_Day(i_Request_End_Time);
  
    --------------------------------------------------
    Procedure Assert_Year
    (
      i_Year_Begin date,
      i_Year_End   date
    ) is
      v_Used_Days    number;
      v_Request_Days number;
      r_Accrual      Htt_Request_Kind_Accruals%rowtype;
    
      v_Begin_Time date := Greatest(i_Request_Begin_Time, i_Year_Begin);
      v_End_Time   date := Least(i_Request_End_Time, i_Year_End);
    begin
      v_Request_Days := Count_Request_Days(i_Company_Id         => i_Company_Id,
                                           i_Filial_Id          => i_Filial_Id,
                                           i_Staff_Id           => i_Staff_Id,
                                           i_Day_Count_Type     => r_Request_Kind.Day_Count_Type,
                                           i_Request_Begin_Time => v_Begin_Time,
                                           i_Request_End_Time   => v_End_Time);
    
      r_Accrual := Load_Request_Kind_Accrual(i_Company_Id      => i_Company_Id,
                                             i_Filial_Id       => i_Filial_Id,
                                             i_Staff_Id        => i_Staff_Id,
                                             i_Request_Kind_Id => i_Request_Kind_Id,
                                             i_Accrual_Kind    => i_Accrual_Kind,
                                             i_Period_Begin    => v_Begin_Time,
                                             i_Period_End      => v_End_Time);
    
      r_Accrual.Accrued_Days := Nvl(r_Accrual.Accrued_Days, 0);
    
      v_Used_Days := Get_Request_Kind_Used_Days(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => i_Staff_Id,
                                                i_Request_Kind_Id => i_Request_Kind_Id,
                                                i_Accrual_Kind    => i_Accrual_Kind,
                                                i_Period          => v_End_Time,
                                                i_Request_Id      => i_Request_Id);
      if v_Used_Days + v_Request_Days > r_Accrual.Accrued_Days then
        Htt_Error.Raise_016(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                        i_Filial_Id  => i_Filial_Id,
                                                                        i_Staff_Id   => i_Staff_Id),
                            i_Request_Kind_Name => r_Request_Kind.Name,
                            i_Year              => i_Year_End,
                            i_Used_Cnt          => v_Used_Days,
                            i_Request_Cnt       => v_Request_Days,
                            i_Annual_Limit      => r_Accrual.Accrued_Days);
      end if;
    end;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    while v_Period_Begin <= v_Period_End
    loop
      v_Period_Begin := Year_Last_Day(v_Period_Begin);
    
      Assert_Year(i_Year_Begin => Trunc(v_Period_Begin, 'yyyy'), i_Year_End => v_Period_Begin);
    
      v_Period_Begin := v_Period_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  ) is
    v_Request_Id number;
    v_Begin_Time date;
    v_End_Time   date;
  begin
    select q.Request_Id, q.Begin_Time, q.End_Time
      into v_Request_Id, v_Begin_Time, v_End_Time
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Request_Id <> i_Request_Id
       and q.Staff_Id = i_Staff_Id
       and q.Status in (Htt_Pref.c_Request_Status_Completed, Htt_Pref.c_Request_Status_Approved)
       and (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
           i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and --
           q.End_Time > i_Begin_Time and q.Begin_Time < i_End_Time or
           not (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
            i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day) and
           Trunc(q.End_Time) >= Trunc(i_Begin_Time) and Trunc(q.Begin_Time) <= Trunc(i_End_Time))
       and Rownum = 1;
  
    Htt_Error.Raise_017(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id    => v_Request_Id,
                        i_Intersect_Begin => v_Begin_Time,
                        i_Intersect_End   => v_End_Time,
                        i_Request_Type    => i_Request_Type,
                        i_Begin_Time      => i_Begin_Time,
                        i_End_Time        => i_End_Time);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  ) is
    v_Error_Date   date;
    v_Intersect_Id number;
  begin
    select Sd.Change_Date, Sd.Change_Id
      into v_Error_Date, v_Intersect_Id
      from Htt_Change_Days Sd
     where Sd.Company_Id = i_Company_Id
       and Sd.Filial_Id = i_Filial_Id
       and Sd.Staff_Id = i_Staff_Id
       and Sd.Change_Id <> i_Change_Id
       and exists (select 1
              from Htt_Change_Days Cd
             where Cd.Company_Id = i_Company_Id
               and Cd.Filial_Id = i_Filial_Id
               and Cd.Staff_Id = i_Staff_Id
               and Cd.Change_Id = i_Change_Id
               and Cd.Change_Date = Sd.Change_Date)
       and exists (select 1
              from Htt_Plan_Changes Pc
             where Pc.Company_Id = i_Company_Id
               and Pc.Filial_Id = i_Filial_Id
               and Pc.Change_Id = Sd.Change_Id
               and Pc.Status in (Htt_Pref.c_Change_Status_Approved,
                                 Htt_Pref.c_Change_Status_Completed))
       and Rownum = 1;
  
    Htt_Error.Raise_100(i_Staff_Name   => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id => v_Intersect_Id,
                        i_Change_Date  => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number is
  begin
    if i_Day_Kind in (Htt_Pref.c_Day_Kind_Rest, Htt_Pref.c_Day_Kind_Additional_Rest) then
      return 0;
    end if;
  
    return(i_End_Time - i_Begin_Time - Nvl(i_Break_End_Time - i_Break_Begin_Time, 0)) * 1440;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Time difference in seconds
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number is
  begin
    return Greatest(Round((i_Time1 - i_Time2) * 86400), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- intersection part of two timelines
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number is
  begin
    if i_Fr_Begin >= i_Fr_End or i_Sc_Begin >= i_Sc_End then
      return 0;
    end if;
  
    return Time_Diff(Least(i_Sc_End, Greatest(i_Fr_End, i_Sc_Begin)),
                     Greatest(Least(i_Fr_Begin, i_Sc_End), i_Sc_Begin));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number is
  begin
    return Timeline_Intersection(i_Fr_Begin => i_Begin_Time,
                                 i_Fr_End   => i_End_Time,
                                 i_Sc_Begin => i_Input,
                                 i_Sc_End   => i_Output) - --
    Timeline_Intersection(i_Fr_Begin => i_Begin_Break_Time,
                          i_Fr_End   => i_End_Break_Time,
                          i_Sc_Begin => i_Input,
                          i_Sc_End   => i_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select q.Track_Id
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date = i_Track_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2 is
    r_Change Htt_Plan_Changes%rowtype;
    result   varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Plan_Changes.Name)));
  
    r_Change := z_Htt_Plan_Changes.Take(i_Company_Id => Md_Env.Company_Id,
                                        i_Filial_Id  => Md_Env.Filial_Id,
                                        i_Change_Id  => i_Change_Id);
  
    if r_Change.Change_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                    i_Filial_Id  => r_Change.Filial_Id,
                                                    i_Staff_Id   => r_Change.Staff_Id),
                               r_Change.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2 is
    r_Request Htt_Requests%rowtype;
    result    varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Requests.Name)));
  
    r_Request := z_Htt_Requests.Take(i_Company_Id => Md_Env.Company_Id,
                                     i_Filial_Id  => Md_Env.Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    if r_Request.Request_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                    i_Filial_Id  => r_Request.Filial_Id,
                                                    i_Staff_Id   => r_Request.Staff_Id),
                               r_Request.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2 is
    r_Track Htt_Tracks%rowtype;
    result  varchar(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Tracks.Name)));
  
    r_Track := z_Htt_Tracks.Take(i_Company_Id => Md_Env.Company_Id,
                                 i_Filial_Id  => Md_Env.Filial_Id,
                                 i_Track_Id   => i_Track_Id);
  
    if r_Track.Track_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{person_name} by $2{created_on}',
                               z_Mr_Natural_Persons.Take(i_Company_Id => r_Track.Company_Id, i_Person_Id => r_Track.Person_Id).Name,
                               r_Track.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Request_Kind_Id
      into result
      from Htt_Request_Kinds
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2 is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    return z_Htt_Request_Kinds.Load(i_Company_Id      => r_Request.Company_Id,
                                    i_Request_Kind_Id => r_Request.Request_Kind_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2 is
    v_Language varchar2(20);
  begin
    if Biruni_Route.Get_Lang_Code = 'en' then
      v_Language := 'english';
    elsif Biruni_Route.Get_Lang_Code = 'uz' then
      v_Language := '''latin uzbek''';
    else
      v_Language := 'russian';
    end if;
  
    return 'nls_date_language = ' || v_Language;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2 is
    v_Format       varchar2(20) := 'fmdd mon. yyyy';
    v_Nls_Language varchar2(100) := Get_Nls_Language;
  begin
    case i_Request_Type
      when Htt_Pref.c_Request_Type_Part_Of_Day then
        return t('$1{request_date}, $2{request_begin_time}-$3{request_end_time}',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_Begin_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language),
                 to_char(i_End_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language));
      when Htt_Pref.c_Request_Type_Full_Day then
        return t('$1{request_date} (full day)', to_char(i_Begin_Time, v_Format, v_Nls_Language));
      else
        return t('$1{request_begin_date} - $2{request_end_date} ($3 days)',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_End_Time, v_Format, v_Nls_Language),
                 Trunc(i_End_Time - i_Begin_Time) + 1);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number is
    result                 number;
    v_Turnout_Time_Kind_Id number;
    v_Take_Turnout         varchar2(1) := 'N';
  begin
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    if i_Take_Turnout_Requests then
      v_Take_Turnout := 'Y';
    end if;
  
    select sum(t.Fact_Value)
      into result
      from Htt_Timesheet_Facts t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Timesheet_Id = i_Timesheet_Id
       and exists (select 1
              from Htt_Time_Kinds p
             where p.Company_Id = t.Company_Id
               and p.Time_Kind_Id = t.Time_Kind_Id
               and p.Requestable = 'Y'
               and (v_Take_Turnout = 'Y' or --
                   (v_Take_Turnout = 'N' and --
                   (p.Parent_Id is null or --
                   p.Parent_Id <> v_Turnout_Time_Kind_Id))));
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- gets facts with children
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number is
    result number;
  begin
    select sum(Tf.Fact_Value)
      into result
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date = i_Timesheet_Date
       and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = i_Time_Kind_Id;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number is
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    v_Fact_Value     number;
    v_Children_Value number := 0;
  begin
    r_Timesheet_Fact := z_Htt_Timesheet_Facts.Take(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Timesheet_Id => i_Timesheet_Id,
                                                   i_Time_Kind_Id => i_Time_Kind_Id);
  
    v_Fact_Value := Nvl(r_Timesheet_Fact.Fact_Value, 0);
  
    if i_Take_Children then
      select sum(t.Fact_Value)
        into v_Children_Value
        from Htt_Timesheet_Facts t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Timesheet_Id = i_Timesheet_Id
         and exists (select 1
                from Htt_Time_Kinds p
               where p.Company_Id = t.Company_Id
                 and p.Time_Kind_Id = t.Time_Kind_Id
                 and p.Parent_Id = i_Time_Kind_Id);
    
      v_Children_Value := Nvl(v_Children_Value, 0);
    end if;
  
    v_Fact_Value := v_Fact_Value + v_Children_Value;
  
    return v_Fact_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(q.Parent_Id, q.Time_Kind_Id), sum(q.Fact_Value)
      bulk collect
      into result
      from (select Tk.Parent_Id, Tk.Time_Kind_Id, f.Fact_Value
              from Htt_Timesheet_Facts f
              join Htt_Time_Kinds Tk
                on Tk.Company_Id = f.Company_Id
               and Tk.Time_Kind_Id = f.Time_Kind_Id
             where f.Company_Id = i_Company_Id
               and f.Filial_Id = i_Filial_Id
               and f.Timesheet_Id = i_Timesheet_Id
             order by Tk.Pcode) q
     group by Nvl(q.Parent_Id, q.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- sum of time kind facts over period [i_Begin_Date, i_End_Date]
  -- only parent time kinds are taken
  -- if time kind is child (has parent_id) it is converted to its parent
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(Tk.Parent_Id, Tk.Time_Kind_Id), sum(Tf.Fact_Value)
      bulk collect
      into result
      from Htt_Timesheet_Facts Tf
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
      join Htt_Timesheets t
        on t.Company_Id = Tf.Company_Id
       and t.Filial_Id = Tf.Filial_Id
       and t.Timesheet_Id = Tf.Timesheet_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date >= i_Begin_Date
       and t.Timesheet_Date <= i_End_Date
     group by Nvl(Tk.Parent_Id, Tk.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Turnout_Count number;
    v_Turnout_Ids   Array_Number;
  begin
    v_Turnout_Ids := Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                              i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select max(Qr.Cnt)
      into v_Turnout_Count
      from (select count(*) Cnt
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Employee_Id = i_Employee_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and exists (select *
                      from Htt_Timesheet_Facts Tf
                     where Tf.Company_Id = t.Company_Id
                       and Tf.Filial_Id = t.Filial_Id
                       and Tf.Timesheet_Id = t.Timesheet_Id
                       and Tf.Time_Kind_Id member of v_Turnout_Ids
                       and Tf.Fact_Value > 0)
             group by t.Staff_Id) Qr;
  
    return Nvl(v_Turnout_Count, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates number of vacation days
  -- that has locked fact days
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    v_Rest_Days   Array_Number;
    v_Calendar_Id number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
    v_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id);
    v_Rest_Days   := Htt_Util.Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => v_Calendar_Id);
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and (Trunc(t.Timesheet_Date) - Trunc(t.Timesheet_Date, 'iw') + 1) not member of
     v_Rest_Days
       and not exists
     (select *
              from Htt_Calendar_Days Cd
             where Cd.Company_Id = t.Company_Id
               and Cd.Filial_Id = t.Filial_Id
               and Cd.Calendar_Id = v_Calendar_Id
               and Cd.Calendar_Date = t.Timesheet_Date
               and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest))
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and t.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and t.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Plan_Time)
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date between i_Begin_Date and i_End_Date
       and q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and q.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Vacation_Days_Count      number := i_End_Date - i_Begin_Date + 1;
    v_Official_Rest_Days_Count number;
    v_Default_Calendar_Id      number;
    v_Fact_Days                number;
  begin
    v_Default_Calendar_Id := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                           i_Filial_Id   => i_Filial_Id,
                                                           i_Calendar_Id => v_Default_Calendar_Id,
                                                           i_Begin_Date  => i_Begin_Date,
                                                           i_End_Date    => i_End_Date);
  
    v_Fact_Days := Calc_Fact_Locked_Vacation_Days(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    return Nvl(v_Vacation_Days_Count - v_Official_Rest_Days_Count - v_Fact_Days, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Schedule_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Schedule_Id  number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Schedule_Id = i_Schedule_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_103(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Schedule_Id => i_Schedule_Id).Name,
                          i_Month         => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Staff_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Staff_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_104(i_Staff_Name => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Robot_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Robot_Id number;
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end),
           max(p.Robot_Id)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes, v_Robot_Id
      from Hpd_Agreements_Cache p
      join Htt_Robot_Schedule_Days q
        on q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = p.Robot_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and i_Period between p.Begin_Date and p.End_Date;
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_106(i_Robot_Name => z_Mrf_Robots.Take(i_Company_Id => i_Company_Id, --
                                          i_Filial_Id => i_Filial_Id, --
                                          i_Robot_Id => v_Robot_Id).Name,
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => result,
                         o_Plan_Minutes => v_Dummy,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => v_Dummy,
                         o_Plan_Minutes => result,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  ) is
    v_Tk_Ids Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into v_Tk_Ids
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Parent_Id = i_Time_Kind_Id;
  
    Fazo.Push(v_Tk_Ids, i_Time_Kind_Id);
  
    select sum(Tf.Fact_Value), count(distinct t.Timesheet_Id)
      into o_Fact_Seconds, o_Fact_Days
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
       and Tf.Time_Kind_Id member of v_Tk_Ids
       and Tf.Fact_Value > 0
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  
    o_Fact_Seconds := Nvl(o_Fact_Seconds, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean is
    v_Days_Cnt number := 0;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Hpd_Agreements_Cache p
        join Htt_Robot_Schedule_Days q
          on q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Robot_Id = p.Robot_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and i_Period between p.Begin_Date and p.End_Date;
    else
      select count(*)
        into v_Days_Cnt
        from Htt_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Schedule_Id = i_Schedule_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    end if;
  
    return v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date is
  begin
    return Add_Months(Trunc(i_Date, 'yyyy'), 12) - 1;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date is
  begin
    return Last_Day(Add_Months(Trunc(i_Date, 'Q'), 2));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined is
    v_Track         Htt_Pref.Gps_Track_Data_Rt;
    v_Track_Arr     Array_Varchar2;
    v_Len           number;
    v_Offset        number;
    v_Pos           pls_integer;
    v_Last_Pos      pls_integer;
    v_Part_Data     varchar2(32767);
    c_Row_Delimiter varchar(1) := Chr(10);
  begin
    v_Track.Company_Id := i_Company_Id;
    v_Track.Filial_Id  := i_Filial_Id;
    v_Track.Person_Id  := i_Person_Id;
  
    for Gps_Track in (select q.*,
                             (select w.Data
                                from Htt_Gps_Track_Datas w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Track_Id = q.Track_Id) as Data
                        from Htt_Gps_Tracks q
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Person_Id = i_Person_Id
                         and q.Track_Date between i_Begin_Date and i_End_Date)
    loop
      if Dbms_Lob.Isopen(Gps_Track.Data) = 0 then
        Dbms_Lob.Open(Lob_Loc => Gps_Track.Data, Open_Mode => Dbms_Lob.Lob_Readonly);
      end if;
    
      v_Track.Track_Id   := Gps_Track.Track_Id;
      v_Track.Track_Date := Gps_Track.Track_Date;
    
      v_Offset := 1;
      v_Len    := Dbms_Lob.Getlength(Gps_Track.Data);
    
      while v_Offset < v_Len
      loop
        v_Part_Data := v_Part_Data ||
                       Utl_Raw.Cast_To_Varchar2(Dbms_Lob.Substr(Lob_Loc => Gps_Track.Data,
                                                                Amount  => 30000,
                                                                Offset  => v_Offset));
      
        v_Pos      := 1;
        v_Last_Pos := 1;
      
        loop
          v_Pos := Instr(v_Part_Data, Htt_Pref.c_Gps_Track_Row_Delimiter, v_Last_Pos);
        
          if v_Pos > 0 then
            v_Track_Arr := Fazo.Split(Substr(v_Part_Data, v_Last_Pos, v_Pos - v_Last_Pos),
                                      Htt_Pref.c_Gps_Track_Column_Delimiter);
          
            if v_Track_Arr.Count < 5 then
              v_Track_Arr.Extend(5); -- handling error
            end if;
          
            v_Track.Track_Time := to_date(to_char(v_Track.Track_Date, Href_Pref.c_Date_Format_Day) || ' ' ||
                                          v_Track_Arr(1),
                                          Href_Pref.c_Date_Format_Second);
            v_Track.Lat        := v_Track_Arr(2);
            v_Track.Lng        := v_Track_Arr(3);
            v_Track.Accuracy   := v_Track_Arr(4);
            v_Track.Provider   := v_Track_Arr(5);
            -- TODO: temporary provider filters only GPS
            if (i_Only_Gps = 'Y' and v_Track.Provider = Htt_Pref.c_Provider_Gps or i_Only_Gps = 'N') and
               v_Track.Accuracy <= 50 then
              pipe row(v_Track);
            end if;
          else
            v_Part_Data := Substr(v_Part_Data, v_Last_Pos);
            exit;
          end if;
        
          v_Last_Pos := v_Pos + Length(c_Row_Delimiter);
        end loop;
      
        v_Offset := v_Offset + 30000;
      end loop;
    
      Dbms_Lob.Close(Gps_Track.Data);
    end loop;
  
    return;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Staff_Schedule_Days%rowtype is
    v_Staff_Schedule_Date Htt_Staff_Schedule_Days%rowtype;
  begin
    select *
      into v_Staff_Schedule_Date
      from Htt_Staff_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Unit_Id = i_Unit_Id
       and q.Schedule_Date = i_Date;
  
    return v_Staff_Schedule_Date;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Robot_Schedule_Days%rowtype is
    v_Robot_Schedule_Date Htt_Robot_Schedule_Days%rowtype;
  begin
    select *
      into v_Robot_Schedule_Date
      from Htt_Robot_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Unit_Id = i_Unit_Id
       and q.Schedule_Date = i_Date;
  
    return v_Robot_Schedule_Date;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Total_Distance)
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date between i_Begin_Date and i_End_Date;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select Nvl(Trunc(sum(Power(Power(69.1 * (Lat2 - Lat1), 2) + Power(53.0 * (Lng2 - Lng1), 2), 0.5)) /
                     0.00062137),
               0)
      into result
      from (select Lat Lat1,
                   Lng Lng1,
                   Lag(Lat) Over(order by Rownum) Lat2,
                   Lag(Lng) Over(order by Rownum) Lng2
              from (select q.*
                      from Gps_Track_Datas(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Person_Id  => i_Person_Id,
                                           i_Begin_Date => i_Track_Date,
                                           i_End_Date   => i_Track_Date) q
                     order by q.Track_Time))
     where Lat2 is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Location_Sync_Person_Global),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  -- day kind
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Work return varchar2 is
  begin
    return t('day_kind:work');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Rest return varchar2 is
  begin
    return t('day_kind:rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Additional_Rest return varchar2 is
  begin
    return t('day_kind:additional rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Holiday return varchar2 is
  begin
    return t('day_kind:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Nonworking return varchar2 is
  begin
    return t('day_kind:nonworking');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Swapped return varchar2 is
  begin
    return t('day_kind:swapped');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Day_Kind --
    when Htt_Pref.c_Day_Kind_Work then t_Day_Kind_Work --
    when Htt_Pref.c_Day_Kind_Rest then t_Day_Kind_Rest --
    when Htt_Pref.c_Day_Kind_Additional_Rest then t_Day_Kind_Additional_Rest --      
    when Htt_Pref.c_Day_Kind_Holiday then t_Day_Kind_Holiday --
    when Htt_Pref.c_Day_Kind_Nonworking then t_Day_Kind_Nonworking --
    when Htt_Pref.c_Day_Kind_Swapped then t_Day_Kind_Swapped --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Work, --
                                          Htt_Pref.c_Day_Kind_Rest,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Work, --
                                          t_Day_Kind_Rest,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Holiday,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Holiday,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  -- pattern kind (translate message should be renamed to pattern kind)
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Weekly return varchar2 is
  begin
    return t('schedule_kind:weekly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Periodic return varchar2 is
  begin
    return t('schedule_kind:periodic');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Pattern_Kind --
    when Htt_Pref.c_Pattern_Kind_Weekly then t_Pattern_Kind_Weekly --
    when Htt_Pref.c_Pattern_Kind_Periodic then t_Pattern_Kind_Periodic --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pattern_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Pattern_Kind_Weekly, --
                                          Htt_Pref.c_Pattern_Kind_Periodic),
                           Array_Varchar2(t_Pattern_Kind_Weekly, --
                                          t_Pattern_Kind_Periodic));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Custom return varchar2 is
  begin
    return t('schedule_kind:custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Flexible return varchar2 is
  begin
    return t('schedule_kind:flexible');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Hourly return varchar2 is
  begin
    return t('schedule_kind:hourly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Schedule_Kind --
    when Htt_Pref.c_Schedule_Kind_Custom then t_Schedule_Kind_Custom --
    when Htt_Pref.c_Schedule_Kind_Flexible then t_Schedule_Kind_Flexible --
    when Htt_Pref.c_Schedule_Kind_Hourly then t_Schedule_Kind_Hourly --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Schedule_Kind_Custom, --
                                          Htt_Pref.c_Schedule_Kind_Flexible,
                                          Htt_Pref.c_Schedule_Kind_Hourly),
                           Array_Varchar2(t_Schedule_Kind_Custom, --
                                          t_Schedule_Kind_Flexible,
                                          t_Schedule_Kind_Hourly));
  end;

  ----------------------------------------------------------------------------------------------------
  -- protocol
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Http return varchar2 is
  begin
    return t('protocol:http');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Https return varchar2 is
  begin
    return t('protocol:https');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2 is
  begin
    return --
    case i_Protocol --
    when Htt_Pref.c_Protocol_Http then t_Protocol_Http --
    when Htt_Pref.c_Protocol_Https then t_Protocol_Https --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Protocols return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Protocol_Http, --
                                          Htt_Pref.c_Protocol_Https),
                           Array_Varchar2(t_Protocol_Http, --
                                          t_Protocol_Https));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command kind
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Device return varchar2 is
  begin
    return t('command_kind: update device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_All_Device_Persons return varchar2 is
  begin
    return t('command_kind: update all device persons');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Person return varchar2 is
  begin
    return t('command_kind: update person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Device return varchar2 is
  begin
    return t('command_kind: remove device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Person return varchar2 is
  begin
    return t('command_kind: remove person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Sync_Tracks return varchar2 is
  begin
    return t('command_kind: sync tracks');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Command_Kind --
    when Htt_Pref.c_Command_Kind_Update_Device then t_Command_Kind_Update_Device --
    when Htt_Pref.c_Command_Kind_Update_All_Device_Persons then t_Command_Kind_Update_All_Device_Persons --
    when Htt_Pref.c_Command_Kind_Update_Person then t_Command_Kind_Update_Person --
    when Htt_Pref.c_Command_Kind_Remove_Device then t_Command_Kind_Remove_Device --
    when Htt_Pref.c_Command_Kind_Remove_Person then t_Command_Kind_Remove_Person --
    when Htt_Pref.c_Command_Kind_Sync_Tracks then t_Command_Kind_Sync_Tracks --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Kind_Update_Device,
                                          Htt_Pref.c_Command_Kind_Update_All_Device_Persons,
                                          Htt_Pref.c_Command_Kind_Update_Person,
                                          Htt_Pref.c_Command_Kind_Remove_Device,
                                          Htt_Pref.c_Command_Kind_Remove_Person,
                                          Htt_Pref.c_Command_Kind_Sync_Tracks),
                           Array_Varchar2(t_Command_Kind_Update_Device,
                                          t_Command_Kind_Update_All_Device_Persons,
                                          t_Command_Kind_Update_Person,
                                          t_Command_Kind_Remove_Device,
                                          t_Command_Kind_Remove_Person,
                                          t_Command_Kind_Sync_Tracks));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command status
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_New return varchar2 is
  begin
    return t('command_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Sent return varchar2 is
  begin
    return t('command_status: sent');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Complited return varchar2 is
  begin
    return t('command_status: complited');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Failed return varchar2 is
  begin
    return t('command_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2 is
  begin
    return --
    case i_Command_Status --
    when Htt_Pref.c_Command_Status_New then t_Command_Status_New --
    when Htt_Pref.c_Command_Status_Sent then t_Command_Status_Sent --
    when Htt_Pref.c_Command_Status_Complited then t_Command_Status_Complited --
    when Htt_Pref.c_Command_Status_Failed then t_Command_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Status_New,
                                          Htt_Pref.c_Command_Status_Sent,
                                          Htt_Pref.c_Command_Status_Complited,
                                          Htt_Pref.c_Command_Status_Failed),
                           Array_Varchar2(t_Command_Status_New,
                                          t_Command_Status_Sent,
                                          t_Command_Status_Complited,
                                          t_Command_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- person role
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Admin return varchar2 is
  begin
    return t('person_role:admin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Normal return varchar2 is
  begin
    return t('person_role:normal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2 is
  begin
    return --
    case i_Person_Role --
    when Htt_Pref.c_Person_Role_Admin then t_Person_Role_Admin --
    when Htt_Pref.c_Person_Role_Normal then t_Person_Role_Normal --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Roles return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Person_Role_Admin, --
                                          Htt_Pref.c_Person_Role_Normal),
                           Array_Varchar2(t_Person_Role_Admin, --
                                          t_Person_Role_Normal));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track type
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Input return varchar2 is
  begin
    return t('track_type:input');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Output return varchar2 is
  begin
    return t('track_type:output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Check return varchar2 is
  begin
    return t('track_type:check');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Merger return varchar2 is
  begin
    return t('track_type:merger');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Potential_Output return varchar2 is
  begin
    return t('track_type:potential');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Gps_Output return varchar2 is
  begin
    return t('track_type:potential gps output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2 is
  begin
    return --
    case i_Track_Type --
    when Htt_Pref.c_Track_Type_Input then t_Track_Type_Input --
    when Htt_Pref.c_Track_Type_Output then t_Track_Type_Output --
    when Htt_Pref.c_Track_Type_Check then t_Track_Type_Check --
    when Htt_Pref.c_Track_Type_Merger then t_Track_Type_Merger --
    when Htt_Pref.c_Track_Type_Potential_Output then t_Track_Type_Potential_Output --
    when Htt_Pref.c_Track_Type_Gps_Output then t_Track_Type_Gps_Output --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Type_Input,
                                          Htt_Pref.c_Track_Type_Output,
                                          Htt_Pref.c_Track_Type_Check,
                                          Htt_Pref.c_Track_Type_Merger,
                                          Htt_Pref.c_Track_Type_Potential_Output,
                                          Htt_Pref.c_Track_Type_Gps_Output),
                           Array_Varchar2(t_Track_Type_Input,
                                          t_Track_Type_Output,
                                          t_Track_Type_Check,
                                          t_Track_Type_Merger,
                                          t_Track_Type_Potential_Output,
                                          t_Track_Type_Gps_Output));
  end;

  ----------------------------------------------------------------------------------------------------
  -- provider
  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Gps return varchar2 is
  begin
    return t('provider:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Network return varchar2 is
  begin
    return t('provider:network');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2 is
  begin
    return --
    case i_Provider --
    when Htt_Pref.c_Provider_Gps then t_Provider_Gps --
    when Htt_Pref.c_Provider_Network then t_Provider_Network --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Providers return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Provider_Gps, --
                                          Htt_Pref.c_Provider_Network),
                           Array_Varchar2(t_Provider_Gps, --
                                          t_Provider_Network));
  end;

  ----------------------------------------------------------------------------------------------------
  -- mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Password return varchar2 is
  begin
    return t('mark_type:password');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Touch return varchar2 is
  begin
    return t('mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Rfid_Card return varchar2 is
  begin
    return t('mark_type:rfid_card');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Qr_Code return varchar2 is
  begin
    return t('mark_type:qr_code');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Face return varchar2 is
  begin
    return t('mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Manual return varchar2 is
  begin
    return t('mark_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Auto return varchar2 is
  begin
    return t('mark_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return --
    case i_Mark_Type --
    when Htt_Pref.c_Mark_Type_Password then t_Mark_Type_Password --
    when Htt_Pref.c_Mark_Type_Touch then t_Mark_Type_Touch --
    when Htt_Pref.c_Mark_Type_Rfid_Card then t_Mark_Type_Rfid_Card --
    when Htt_Pref.c_Mark_Type_Qr_Code then t_Mark_Type_Qr_Code --
    when Htt_Pref.c_Mark_Type_Face then t_Mark_Type_Face --
    when Htt_Pref.c_Mark_Type_Manual then t_Mark_Type_Manual --
    when Htt_Pref.c_Mark_Type_Auto then t_Mark_Type_Auto --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Mark_Type_Password,
                                          Htt_Pref.c_Mark_Type_Touch,
                                          Htt_Pref.c_Mark_Type_Rfid_Card,
                                          Htt_Pref.c_Mark_Type_Qr_Code,
                                          Htt_Pref.c_Mark_Type_Face,
                                          Htt_Pref.c_Mark_Type_Manual,
                                          Htt_Pref.c_Mark_Type_Auto),
                           Array_Varchar2(t_Mark_Type_Password,
                                          t_Mark_Type_Touch,
                                          t_Mark_Type_Rfid_Card,
                                          t_Mark_Type_Qr_Code,
                                          t_Mark_Type_Face,
                                          t_Mark_Type_Manual,
                                          t_Mark_Type_Auto));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track status
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Draft return varchar2 is
  begin
    return t('track_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Not_Used return varchar2 is
  begin
    return t('track_status:not_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Partially_Used return varchar2 is
  begin
    return t('track_status:partially_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Used return varchar2 is
  begin
    return t('track_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Htt_Pref.c_Track_Status_Draft then t_Track_Status_Draft --
    when Htt_Pref.c_Track_Status_Not_Used then t_Track_Status_Not_Used --
    when Htt_Pref.c_Track_Status_Partially_Used then t_Track_Status_Partially_Used --
    when Htt_Pref.c_Track_Status_Used then t_Track_Status_Used --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Status_Draft,
                                          Htt_Pref.c_Track_Status_Not_Used,
                                          Htt_Pref.c_Track_Status_Partially_Used,
                                          Htt_Pref.c_Track_Status_Used),
                           Array_Varchar2(t_Track_Status_Draft,
                                          t_Track_Status_Not_Used,
                                          t_Track_Status_Partially_Used,
                                          t_Track_Status_Used));
  end;

  ----------------------------------------------------------------------------------------------------
  -- plan load
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Part return varchar2 is
  begin
    return t('plan_load:part');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Full return varchar2 is
  begin
    return t('plan_load:full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Extra return varchar2 is
  begin
    return t('plan_load:extra');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2 is
  begin
    return case i_Plan_Load --
    when Htt_Pref.c_Plan_Load_Part then t_Plan_Load_Part --
    when Htt_Pref.c_Plan_Load_Full then t_Plan_Load_Full --
    when Htt_Pref.c_Plan_Load_Extra then t_Plan_Load_Extra --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Plan_Loads return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Plan_Load_Part,
                                          Htt_Pref.c_Plan_Load_Full,
                                          Htt_Pref.c_Plan_Load_Extra),
                           Array_Varchar2(t_Plan_Load_Part, --
                                          t_Plan_Load_Full, --
                                          t_Plan_Load_Extra));
  end;

  ----------------------------------------------------------------------------------------------------
  -- day count type
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Calendar_Days return varchar2 is
  begin
    return t('day_count_type:calendar days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Work_Days return varchar2 is
  begin
    return t('day_count_type:work days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Production_Days return varchar2 is
  begin
    return t('day_count_type:production days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2 is
  begin
    return case i_Day_Count_Type --
    when Htt_Pref.c_Day_Count_Type_Calendar_Days then t_Day_Count_Type_Calendar_Days --
    when Htt_Pref.c_Day_Count_Type_Work_Days then t_Day_Count_Type_Work_Days --
    when Htt_Pref.c_Day_Count_Type_Production_Days then t_Day_Count_Type_Production_Days end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Count_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Count_Type_Calendar_Days,
                                          Htt_Pref.c_Day_Count_Type_Work_Days,
                                          Htt_Pref.c_Day_Count_Type_Production_Days),
                           Array_Varchar2(t_Day_Count_Type_Calendar_Days,
                                          t_Day_Count_Type_Work_Days,
                                          t_Day_Count_Type_Production_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- carryover policy
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_All return varchar2 is
  begin
    return t('carryover_policy: all');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Zero return varchar2 is
  begin
    return t('carryover_policy: zero');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Cap return varchar2 is
  begin
    return t('carryover_policy: cap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2 is
  begin
    return case i_Carryover_Policy --
    when Htt_Pref.c_Carryover_Policy_All then t_Carryover_Policy_All --
    when Htt_Pref.c_Carryover_Policy_Zero then t_Carryover_Policy_Zero --
    when Htt_Pref.c_Carryover_Policy_Cap then t_Carryover_Policy_Cap end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Carryover_Policies return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Carryover_Policy_All,
                                          Htt_Pref.c_Carryover_Policy_Zero,
                                          Htt_Pref.c_Carryover_Policy_Cap),
                           Array_Varchar2(t_Carryover_Policy_All,
                                          t_Carryover_Policy_Zero,
                                          t_Carryover_Policy_Cap));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request kind
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Part_Of_Day return varchar2 is
  begin
    return t('request_type:part_of_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Full_Day return varchar2 is
  begin
    return t('request_type:full_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Multiple_Days return varchar2 is
  begin
    return t('request_type:multiple_days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2 is
  begin
    return case i_Request_Type --
    when Htt_Pref.c_Request_Type_Part_Of_Day then t_Request_Type_Part_Of_Day --
    when Htt_Pref.c_Request_Type_Full_Day then t_Request_Type_Full_Day --
    when Htt_Pref.c_Request_Type_Multiple_Days then t_Request_Type_Multiple_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Type_Part_Of_Day,
                                          Htt_Pref.c_Request_Type_Full_Day,
                                          Htt_Pref.c_Request_Type_Multiple_Days),
                           Array_Varchar2(t_Request_Type_Part_Of_Day,
                                          t_Request_Type_Full_Day,
                                          t_Request_Type_Multiple_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request status
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_New return varchar2 is
  begin
    return t('request_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Approved return varchar2 is
  begin
    return t('request_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Completed return varchar2 is
  begin
    return t('request_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Denied return varchar2 is
  begin
    return t('request_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2 is
  begin
    return case i_Request_Status --
    when Htt_Pref.c_Request_Status_New then t_Request_Status_New --
    when Htt_Pref.c_Request_Status_Approved then t_Request_Status_Approved --
    when Htt_Pref.c_Request_Status_Completed then t_Request_Status_Completed --
    when Htt_Pref.c_Request_Status_Denied then t_Request_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Status_New,
                                          Htt_Pref.c_Request_Status_Approved,
                                          Htt_Pref.c_Request_Status_Completed,
                                          Htt_Pref.c_Request_Status_Denied),
                           Array_Varchar2(t_Request_Status_New,
                                          t_Request_Status_Approved,
                                          t_Request_Status_Completed,
                                          t_Request_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2 is
    v_Request_Type varchar2(100);
  begin
    v_Request_Type := z_Htt_Request_Kinds.Load(i_Company_Id => i_Company_Id, i_Request_Kind_Id => t_Request_Kind_Id).Name;
  
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Request then
        return t('for $1{person_name} $2{request_kind_name} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Change_Status then
        return t('for $1{person_name} $2{request_kind_name} status change',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
        return t('for $1{person_name} $2{request_kind_name} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  -- attach types
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Auto return varchar2 is
  begin
    return t('attach_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Manual return varchar2 is
  begin
    return t('attach_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Global return varchar2 is
  begin
    return t('attach_type:global');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2 is
  begin
    return case i_Attach_Type --
    when Htt_Pref.c_Attach_Type_Manual then t_Attach_Type_Manual --
    when Htt_Pref.c_Attach_Type_Auto then t_Attach_Type_Auto --
    when Htt_Pref.c_Attach_Type_Global then t_Attach_Type_Global --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Attach_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Attach_Type_Manual,
                                          Htt_Pref.c_Attach_Type_Auto,
                                          Htt_Pref.c_Attach_Type_Global),
                           Array_Varchar2(t_Attach_Type_Manual,
                                          t_Attach_Type_Auto,
                                          t_Attach_Type_Global));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change status
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_New return varchar2 is
  begin
    return t('change_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Approved return varchar2 is
  begin
    return t('change_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Completed return varchar2 is
  begin
    return t('change_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Denied return varchar2 is
  begin
    return t('change_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2 is
  begin
    return case i_Change_Status --
    when Htt_Pref.c_Change_Status_New then t_Change_Status_New --
    when Htt_Pref.c_Change_Status_Approved then t_Change_Status_Approved --
    when Htt_Pref.c_Change_Status_Completed then t_Change_Status_Completed --
    when Htt_Pref.c_Change_Status_Denied then t_Change_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Status_New,
                                          Htt_Pref.c_Change_Status_Approved,
                                          Htt_Pref.c_Change_Status_Completed,
                                          Htt_Pref.c_Change_Status_Denied),
                           Array_Varchar2(t_Change_Status_New,
                                          t_Change_Status_Approved,
                                          t_Change_Status_Completed,
                                          t_Change_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change kind
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Swap return varchar2 is
  begin
    return t('change_kind:swap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Change_Plan return varchar2 is
  begin
    return t('change_kind:change_plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2 is
  begin
    return case i_Change_Kind --
    when Htt_Pref.c_Change_Kind_Swap then t_Change_Kind_Swap --
    when Htt_Pref.c_Change_Kind_Change_Plan then t_Change_Kind_Change_Plan --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Kind_Swap,
                                          Htt_Pref.c_Change_Kind_Change_Plan),
                           Array_Varchar2(t_Change_Kind_Swap, --
                                          t_Change_Kind_Change_Plan));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2 is
  begin
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Plan_Change then
        return t('for $1{person_name} $2{change_kind} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change then
        return t('for $1{person_name} $2{change_kind} status changed',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
        return t('for $1{person_name} $2{change_kind} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- dashboard status kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Worktime_Not_Started return varchar2 is
  begin
    return t('dashboard:working time not begin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Leave_Exists return varchar2 is
  begin
    return t('dashboard:leave');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Late return varchar2 is
  begin
    return t('dashboard:late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Intime return varchar2 is
  begin
    return t('dashboard:intime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Not_Come return varchar2 is
  begin
    return t('dashboard:not come');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Rest_Day return varchar2 is
  begin
    return t('dashboard:rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Additional_Rest_Day return varchar2 is
  begin
    return t('dashboard:additional rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Holiday return varchar2 is
  begin
    return t('dashboard:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Nonworking_Day return varchar2 is
  begin
    return t('dashboard:nonworking day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Not_Licensed_Day return varchar2 is
  begin
    return t('dashboard: not licensed day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_No_Timesheet return varchar2 is
  begin
    return t('dashboard:no timesheet');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2 is
  begin
    return case i_Dashboard_Status_Kinds --
    when Htt_Pref.c_Dashboard_Worktime_Not_Started then t_Dashboard_Worktime_Not_Started --
    when Htt_Pref.c_Dashboard_Leave_Exists then t_Dashboard_Leave_Exists --
    when Htt_Pref.c_Dashboard_Staff_Late then t_Dashboard_Staff_Late --
    when Htt_Pref.c_Dashboard_Staff_Intime then t_Dashboard_Staff_Intime --
    when Htt_Pref.c_Dashboard_Staff_Not_Come then t_Dashboard_Staff_Not_Come --
    when Htt_Pref.c_Dashboard_Rest_Day then t_Dashboard_Rest_Day --
    when Htt_Pref.c_Dashboard_Holiday then t_Dashboard_Holiday --
    when Htt_Pref.c_Dashboard_Additional_Rest_Day then t_Dashboard_Additional_Rest_Day --      
    when Htt_Pref.c_Dashboard_Nonworking_Day then t_Dashboard_Nonworking_Day --
    when Htt_Pref.c_Dashboard_Not_Licensed_Day then t_Dashboard_Not_Licensed_Day --
    when Htt_Pref.c_Dashboard_No_Timesheet then t_Dashboard_No_Timesheet --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dashboard_Status_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Dashboard_Worktime_Not_Started,
                                          Htt_Pref.c_Dashboard_Leave_Exists,
                                          Htt_Pref.c_Dashboard_Staff_Late,
                                          Htt_Pref.c_Dashboard_Staff_Intime,
                                          Htt_Pref.c_Dashboard_Staff_Not_Come,
                                          Htt_Pref.c_Dashboard_Rest_Day,
                                          Htt_Pref.c_Dashboard_Holiday,
                                          Htt_Pref.c_Dashboard_Additional_Rest_Day,
                                          Htt_Pref.c_Dashboard_Nonworking_Day,
                                          Htt_Pref.c_Dashboard_Not_Licensed_Day,
                                          Htt_Pref.c_Dashboard_No_Timesheet),
                           Array_Varchar2(t_Dashboard_Worktime_Not_Started, --
                                          t_Dashboard_Leave_Exists,
                                          t_Dashboard_Staff_Late,
                                          t_Dashboard_Staff_Intime,
                                          t_Dashboard_Staff_Not_Come,
                                          t_Dashboard_Rest_Day,
                                          t_Dashboard_Holiday,
                                          t_Dashboard_Additional_Rest_Day,
                                          t_Dashboard_Nonworking_Day,
                                          t_Dashboard_Not_Licensed_Day,
                                          t_Dashboard_No_Timesheet));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request  accrual kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Plan return varchar2 is
  begin
    return t('accrual_kind:plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Carryover return varchar2 is
  begin
    return t('accrual_kind:carryover');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2 is
  begin
    return case i_Accrual_Kind --
    when Htt_Pref.c_Accrual_Kind_Plan then t_Accrual_Kind_Plan --
    when Htt_Pref.c_Accrual_Kind_Carryover then t_Accrual_Kind_Carryover --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Accrual_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Accrual_Kind_Plan,
                                          Htt_Pref.c_Accrual_Kind_Carryover),
                           Array_Varchar2(t_Accrual_Kind_Plan, --
                                          t_Accrual_Kind_Carryover));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms track status
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_New return varchar2 is
  begin
    return t('acms_track_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Completed return varchar2 is
  begin
    return t('acms_track_status: completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Failed return varchar2 is
  begin
    return t('acms_track_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2 is
  begin
    return case i_Track_Status --
    when Htt_Pref.c_Acms_Track_Status_New then t_Acms_Track_Status_New --
    when Htt_Pref.c_Acms_Track_Status_Completed then t_Acms_Track_Status_Completed --
    when Htt_Pref.c_Acms_Track_Status_Failed then t_Acms_Track_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Track_Status_New,
                                          Htt_Pref.c_Acms_Track_Status_Completed,
                                          Htt_Pref.c_Acms_Track_Status_Failed),
                           Array_Varchar2(t_Acms_Track_Status_New,
                                          t_Acms_Track_Status_Completed,
                                          t_Acms_Track_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Touch return varchar2 is
  begin
    return t('acms_mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Face return varchar2 is
  begin
    return t('acms_mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return case i_Mark_Type --
    when Htt_Pref.c_Acms_Mark_Type_Face then t_Acms_Mark_Type_Face --
    when Htt_Pref.c_Acms_Mark_Type_Touch then t_Acms_Mark_Type_Touch --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Mark_Type_Face, --
                                          Htt_Pref.c_Acms_Mark_Type_Touch),
                           Array_Varchar2(t_Acms_Mark_Type_Face, --
                                          t_Acms_Mark_Type_Touch));
  end;

  ----------------------------------------------------------------------------------------------------
  -- location defined by
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Gps return varchar2 is
  begin
    return t('location_defined_by:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Bssid return varchar2 is
  begin
    return t('location_defined_by:bssid');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2 is
  begin
    return case i_Location_Defined_Type --
    when Htt_Pref.c_Location_Defined_By_Gps then t_Location_Defined_By_Gps --
    when Htt_Pref.c_Location_Defined_By_Bssid then t_Location_Defined_By_Bssid --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Defined_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Location_Defined_By_Gps, --
                                          Htt_Pref.c_Location_Defined_By_Bssid),
                           Array_Varchar2(t_Location_Defined_By_Gps, --
                                          t_Location_Defined_By_Bssid));
  end;

  ----------------------------------------------------------------------------------------------------
  -- work statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_In return varchar2 is
  begin
    return t('work_status:in');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Work_Status_Out return varchar2 is
  begin
    return t('work_status:out');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_Returned return varchar2 is
  begin
    return t('work_status:returned');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2 is
  begin
    return case i_Work_Status --
    when Htt_Pref.c_Work_Status_In then t_Work_Status_In --
    when Htt_Pref.c_Work_Status_Out then t_Work_Status_Out --
    when Htt_Pref.c_Work_Status_Returned then t_Work_Status_Returned --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Work_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Work_Status_In, --
                                          Htt_Pref.c_Work_Status_Out,
                                          Htt_Pref.c_Work_Status_Returned),
                           Array_Varchar2(t_Work_Status_In, --
                                          t_Work_Status_Out,
                                          t_Work_Status_Returned));
  end;

  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Online return varchar2 is
  begin
    return t('device_status:online');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Device_Status_Offline return varchar2 is
  begin
    return t('device_status:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Unknown return varchar2 is
  begin
    return t('device_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2 is
  begin
    return case i_Status --
    when Htt_Pref.c_Device_Status_Online then t_Device_Status_Online --
    when Htt_Pref.c_Device_Status_Offline then t_Device_Status_Offline --
    when Htt_Pref.c_Device_Status_Unknown then t_Device_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Device_Status_Online,
                                          Htt_Pref.c_Device_Status_Offline,
                                          Htt_Pref.c_Device_Status_Unknown),
                           Array_Varchar2(t_Device_Status_Online,
                                          t_Device_Status_Offline,
                                          t_Device_Status_Unknown));
  end;

end Htt_Util;
/

