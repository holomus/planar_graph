set define off
create or replace package Hac_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_Person_Code   varchar2,
    i_External_Code varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Save(i_Server Hac_Pref.Dss_Server_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Company_Server_Update
  (
    i_Company_Id        number,
    i_Department_Code   Option_Varchar2 := null,
    i_Person_Group_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Save(i_Device Hac_Pref.Dss_Device_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Device_Ip         Option_Varchar2 := null,
    i_Ready             Option_Varchar2 := null,
    i_Status            Option_Varchar2 := null,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Access_Group_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Save(i_Server Hac_Pref.Hik_Server_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Company_Server_Update
  (
    i_Company_Id        number,
    i_Organization_Code Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Save(i_Device Hac_Pref.Hik_Device_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Door_Code         Option_Varchar2 := null,
    i_Access_Level_Code Option_Varchar2 := null
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Hik_Device_Sync
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Listening_Device_Save(i_Device Hac_Hik_Listening_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Listening_Device_Delete(i_Device_Token varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Force_Sync_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
end Hac_Api;
/
create or replace package body Hac_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_Person_Code   varchar2,
    i_External_Code varchar2 := null
  ) is
    r_Person     Mr_Natural_Persons%rowtype := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id,
                                                                         i_Person_Id  => i_Person_Id);
    r_Htt_Person Htt_Persons%rowtype := z_Htt_Persons.Take(i_Company_Id => i_Company_Id,
                                                           i_Person_Id  => i_Person_Id);
  begin
    z_Hac_Server_Persons.Save_One(i_Server_Id     => i_Server_Id,
                                  i_Company_Id    => i_Company_Id,
                                  i_Person_Id     => i_Person_Id,
                                  i_Person_Code   => i_Person_Code,
                                  i_First_Name    => r_Person.First_Name,
                                  i_Last_Name     => r_Person.Last_Name,
                                  i_Photo_Sha     => Hac_Util.Take_Main_Photo(i_Company_Id => i_Company_Id,
                                                                              i_Person_Id  => i_Person_Id),
                                  i_Rfid_Code     => r_Htt_Person.Rfid_Code,
                                  i_External_Code => i_External_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Hac_Core.Device_Attach(i_Company_Id  => i_Company_Id,
                           i_Device_Id   => i_Device_Id,
                           i_Attach_Kind => Hac_Pref.c_Device_Attach_Secondary);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
    r_Device Hac_Company_Devices%rowtype;
  begin
    r_Device := z_Hac_Company_Devices.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Device_Id  => i_Device_Id);
  
    if r_Device.Attach_Kind = Hac_Pref.c_Device_Attach_Primary then
      Hac_Error.Raise_003;
    end if;
  
    Hac_Core.Device_Detach(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Save(i_Server Hac_Pref.Dss_Server_Rt) is
  begin
    Hac_Core.Acms_Server_Save(i_Server.Acms);
  
    z_Hac_Dss_Servers.Save_One(i_Server_Id => i_Server.Acms.Server_Id,
                               i_Username  => i_Server.Username,
                               i_Password  => i_Server.Password);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Delete(i_Server_Id number) is
  begin
    Hac_Core.Acms_Server_Delete(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
  begin
    z_Hac_Dss_Company_Servers.Insert_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Server_Detach(i_Company_Id number) is
  begin
    z_Hac_Dss_Company_Servers.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Company_Server_Update
  (
    i_Company_Id        number,
    i_Department_Code   Option_Varchar2 := null,
    i_Person_Group_Code Option_Varchar2 := null
  ) is
    v_Department_Code   Option_Varchar2 := i_Department_Code;
    v_Person_Group_Code Option_Varchar2 := i_Person_Group_Code;
    r_Company           Hac_Dss_Company_Servers%rowtype;
  begin
    if z_Hac_Dss_Company_Servers.Exist_Lock(i_Company_Id => i_Company_Id, o_Row => r_Company) then
      if r_Company.Department_Code is not null then
        v_Department_Code := null;
      end if;
      if r_Company.Person_Group_Code is not null then
        v_Person_Group_Code := null;
      end if;
    end if;
  
    z_Hac_Dss_Company_Servers.Update_One(i_Company_Id        => i_Company_Id,
                                         i_Department_Code   => v_Department_Code,
                                         i_Person_Group_Code => v_Person_Group_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Save(i_Device Hac_Pref.Dss_Device_Rt) is
    r_Device Hac_Devices%rowtype := i_Device.Acms;
  begin
    r_Device.Device_Type_Id := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Dahua);
    r_Device.Device_Name    := z_Md_Companies.Load(i_Device.Company_Id).Code || r_Device.Location;
  
    Hac_Core.Acms_Device_Save(i_Company_Id => i_Device.Company_Id, i_Device => r_Device);
  
    if not z_Hac_Dss_Devices.Exist_Lock(i_Server_Id => r_Device.Server_Id,
                                        i_Device_Id => r_Device.Device_Id) then
      z_Hac_Dss_Devices.Insert_One(i_Server_Id => r_Device.Server_Id,
                                   i_Device_Id => r_Device.Device_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    Hac_Core.Acms_Device_Delete(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dss_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Device_Ip         Option_Varchar2 := null,
    i_Ready             Option_Varchar2 := null,
    i_Status            Option_Varchar2 := null,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Access_Group_Code Option_Varchar2 := null
  ) is
  begin
    z_Hac_Dss_Devices.Update_One(i_Server_Id         => i_Server_Id,
                                 i_Device_Id         => i_Device_Id,
                                 i_Serial_Number     => i_Serial_Number,
                                 i_Device_Code       => i_Device_Code,
                                 i_Access_Group_Code => i_Access_Group_Code);
  
    Hac_Core.Acms_Device_Update(i_Server_Id => i_Server_Id,
                                i_Device_Id => i_Device_Id,
                                i_Device_Ip => i_Device_Ip,
                                i_Ready     => i_Ready,
                                i_Status    => i_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Save(i_Server Hac_Pref.Hik_Server_Rt) is
  begin
    Hac_Core.Acms_Server_Save(i_Server.Acms);
  
    z_Hac_Hik_Servers.Save_One(i_Server_Id      => i_Server.Acms.Server_Id,
                               i_Partner_Key    => i_Server.Partner_Key,
                               i_Partner_Secret => i_Server.Partner_Secret,
                               i_Token          => i_Server.Token);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Delete(i_Server_Id number) is
  begin
    Hac_Core.Acms_Server_Delete(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
  begin
    z_Hac_Hik_Company_Servers.Insert_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Server_Detach(i_Company_Id number) is
  begin
    z_Hac_Hik_Company_Servers.Delete_One(i_Company_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Company_Server_Update
  (
    i_Company_Id        number,
    i_Organization_Code Option_Varchar2 := null
  ) is
    v_Organization_Code Option_Varchar2 := i_Organization_Code;
    r_Company           Hac_Hik_Company_Servers%rowtype;
  begin
    if z_Hac_Hik_Company_Servers.Exist_Lock(i_Company_Id => i_Company_Id, o_Row => r_Company) then
      if r_Company.Organization_Code is not null then
        v_Organization_Code := null;
      end if;
    end if;
  
    z_Hac_Hik_Company_Servers.Update_One(i_Company_Id        => i_Company_Id,
                                         i_Organization_Code => v_Organization_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Save(i_Device Hac_Pref.Hik_Device_Rt) is
    r_Device Hac_Devices%rowtype := i_Device.Acms;
  begin
    r_Device.Device_Type_Id := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision);
    r_Device.Device_Name    := z_Md_Companies.Load(i_Device.Company_Id).Code || r_Device.Location;
  
    Hac_Core.Acms_Device_Save(i_Company_Id  => i_Device.Company_Id,
                              i_Device      => r_Device,
                              i_Event_Types => i_Device.Event_Types);
  
    if z_Hac_Hik_Devices.Exist_Lock(i_Server_Id => r_Device.Server_Id,
                                    i_Device_Id => r_Device.Device_Id) then
      z_Hac_Hik_Devices.Update_One(i_Server_Id     => r_Device.Server_Id,
                                   i_Device_Id     => r_Device.Device_Id,
                                   i_Isup_Password => Option_Varchar2(i_Device.Isup_Password));
    else
      z_Hac_Hik_Devices.Insert_One(i_Server_Id     => r_Device.Server_Id,
                                   i_Device_Id     => r_Device.Device_Id,
                                   i_Isup_Password => i_Device.Isup_Password);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    Hac_Core.Acms_Device_Delete(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Device_Update
  (
    i_Server_Id         number,
    i_Device_Id         number,
    i_Serial_Number     Option_Varchar2 := null,
    i_Device_Code       Option_Varchar2 := null,
    i_Door_Code         Option_Varchar2 := null,
    i_Access_Level_Code Option_Varchar2 := null
  ) is
  begin
    z_Hac_Hik_Devices.Update_One(i_Server_Id         => i_Server_Id,
                                 i_Device_Id         => i_Device_Id,
                                 i_Serial_Number     => i_Serial_Number,
                                 i_Device_Code       => i_Device_Code,
                                 i_Door_Code         => i_Door_Code,
                                 i_Access_Level_Code => i_Access_Level_Code);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Hik_Device_Sync
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
    r_Hac_Device Hac_Devices%rowtype;
    r_Hik_Device Hac_Hik_Devices%rowtype;
    r_Ex_Device  Hac_Hik_Ex_Devices%rowtype;
  begin
    r_Hac_Device := z_Hac_Devices.Load(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
    r_Hik_Device := z_Hac_Hik_Devices.Load(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
    r_Ex_Device  := Hac_Util.Get_Hik_Device_By_Name(i_Server_Id   => i_Server_Id,
                                                    i_Device_Name => r_Hac_Device.Device_Name);
  
    r_Hac_Device.Status            := Hac_Util.Map_Hik_Device_Status(Nvl(r_Ex_Device.Status,
                                                                         Hac_Pref.c_Hik_Device_Status_Unknown));
    r_Hik_Device.Device_Code       := r_Ex_Device.Device_Code;
    r_Hik_Device.Door_Code         := Hac_Util.Get_Hik_Door_Code_By_Device_Code(i_Server_Id   => i_Server_Id,
                                                                                i_Device_Code => r_Ex_Device.Device_Code);
    r_Hik_Device.Access_Level_Code := Hac_Util.Get_Hik_Access_Level_Code_By_Name(i_Server_Id         => i_Server_Id,
                                                                                 i_Access_Level_Name => r_Hac_Device.Device_Name);
    r_Hik_Device.Serial_Number     := r_Ex_Device.Serial_Number;
  
    if r_Hik_Device.Device_Code is not null and r_Hik_Device.Door_Code is not null and
       r_Hik_Device.Access_Level_Code is not null and r_Hik_Device.Serial_Number is not null then
      r_Hac_Device.Ready := 'Y';
    else
      r_Hac_Device.Ready := 'N';
    end if;
  
    z_Hac_Devices.Save_Row(r_Hac_Device);
    z_Hac_Hik_Devices.Save_Row(r_Hik_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Listening_Device_Save(i_Device Hac_Hik_Listening_Devices%rowtype) is
    r_Device Hac_Hik_Listening_Devices%rowtype := i_Device;
    r_Old    Hac_Hik_Listening_Devices%rowtype;
  begin
    if z_Hac_Hik_Listening_Devices.Exist_Lock(i_Device.Device_Token, o_Row => r_Old) then
      r_Device.Person_Auth_Type := r_Old.Person_Auth_Type;
      r_Device.Serial_Number    := r_Old.Serial_Number;
    end if;
  
    z_Hac_Hik_Listening_Devices.Save_Row(r_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Listening_Device_Delete(i_Device_Token varchar2) is
  begin
    z_Hac_Hik_Listening_Devices.Delete_One(i_Device_Token);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Force_Sync_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  begin
    -- update to null allows force update of persons
    -- without it person is updated only when hac_server_persons differs from actual values
    if r_Dss_Company.Server_Id is not null and
       z_Hac_Server_Persons.Exist(i_Server_Id  => r_Dss_Company.Server_Id,
                                  i_Company_Id => i_Company_Id,
                                  i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Update_One(i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_First_Name => Option_Varchar2(null),
                                      i_Last_Name  => Option_Varchar2(null),
                                      i_Photo_Sha  => Option_Varchar2(null),
                                      i_Rfid_Code  => Option_Varchar2(null));
    
      delete Hac_Device_Persons q
       where q.Company_Id = i_Company_Id
         and q.Person_Id = i_Person_Id
         and q.Server_Id = r_Dss_Company.Server_Id;
    end if;
  
    if r_Hik_Company.Server_Id is not null and
       z_Hac_Server_Persons.Exist(i_Server_Id  => r_Hik_Company.Server_Id,
                                  i_Company_Id => i_Company_Id,
                                  i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Update_One(i_Server_Id  => r_Hik_Company.Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_First_Name => Option_Varchar2(null),
                                      i_Last_Name  => Option_Varchar2(null),
                                      i_Photo_Sha  => Option_Varchar2(null),
                                      i_Rfid_Code  => Option_Varchar2(null));
    
      delete Hac_Device_Persons q
       where q.Company_Id = i_Company_Id
         and q.Person_Id = i_Person_Id
         and q.Server_Id = r_Hik_Company.Server_Id;
    end if;
  
    if r_Dss_Company.Server_Id is not null or r_Hik_Company.Server_Id is not null then
      Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
    r_Device      Htt_Devices%rowtype := z_Htt_Devices.Load(i_Company_Id => i_Company_Id,
                                                            i_Device_Id  => i_Device_Id);
    r_Dss_Device  Hac_Dss_Devices%rowtype := Hac_Util.Take_Dss_Device_By_Serial_Number(r_Device.Serial_Number);
    r_Hik_Device  Hac_Hik_Devices%rowtype := Hac_Util.Take_Hik_Device_By_Serial_Number(r_Device.Serial_Number);
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  begin
    -- implicitly syncronised person across all bound devices
    for r in (select Lp.Person_Id
                from Htt_Location_Persons Lp
               where Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = r_Device.Location_Id
              union
              select Dp.Person_Id
                from Hac_Device_Persons Dp
               where Dp.Server_Id = r_Dss_Company.Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = r_Dss_Device.Device_Id
              union
              select Hp.Person_Id
                from Hac_Device_Persons Hp
               where Hp.Server_Id = r_Hik_Company.Server_Id
                 and Hp.Company_Id = i_Company_Id
                 and Hp.Device_Id = r_Hik_Device.Device_Id)
    loop
      Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => r.Person_Id);
    end loop;
  end;

end Hac_Api;
/

create or replace package Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id        number,
    i_Device           Htt_Devices%rowtype,
    i_Person_Code      varchar2,
    i_Track_Time       timestamp with local time zone,
    i_Photo_Sha        varchar2 := null,
    i_Track_Type       varchar2 := Htt_Pref.c_Track_Type_Check,
    i_Person_Auth_Type varchar2 := Hac_Pref.c_Person_Auth_Type_Person_Code
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Hik_Device_Listener_Event
  (
    i_Token   varchar2,
    i_Pic_Sha varchar2,
    i_Val     Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  );
end Hac_Core;
/
create or replace package body Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  begin
    v_Details.Put('partner_key', i_Partner_Key);
    v_Details.Put('partner_secret', i_Partner_Secret);
    v_Details.Put('host_url', i_Host_Url);
    v_Details.Put('request_path', i_Request_Path);
  
    v_Service := Runtime_Service(Hac_Pref.c_Hik_Api_Service_Name);
  
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(Nvl(i_Data, Json_Object_t).To_Clob));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Response_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    r_Server     Hac_Servers%rowtype := z_Hac_Servers.Load(i_Server_Id);
    r_Dss_Server Hac_Dss_Servers%rowtype := z_Hac_Dss_Servers.Load(i_Server_Id);
    v_Service    Runtime_Service;
    v_Details    Hashmap := Hashmap();
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys Array_Varchar2;
      v_Delimiter  varchar2(1) := '&';
      v_Key        varchar2(100);
      result       varchar2(4000);
    begin
      if i_Uri_Query_Params is null then
        return result;
      end if;
    
      v_Param_Keys := i_Uri_Query_Params.Keyset;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || i_Uri_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return result;
    end;
  begin
    v_Details.Put('host_url', Nvl(i_Host_Url, r_Server.Host_Url));
    v_Details.Put('method', i_Api_Method);
    v_Details.Put('api_uri', i_Api_Uri);
    v_Details.Put('object_id', i_Object_Id);
    v_Details.Put('query_params', Gather_Query_Params);
    v_Details.Put('auth_details',
                  Fazo.Zip_Map('username', r_Dss_Server.Username, 'password', r_Dss_Server.Password));
    v_Details.Put('face_picture_sha', i_Face_Picture_Sha);
  
    v_Service := Runtime_Service(Hac_Pref.c_Dahua_Api_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype) is
  begin
    z_Hac_Servers.Save_Row(i_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
  begin
    z_Hac_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  ) is
    -------------------------------------------------- 
    Procedure Assert_Singular_Primary_Attachment is
      v_Dummy varchar2(1);
    begin
      if i_Attach_Kind <> Hac_Pref.c_Device_Attach_Primary then
        return;
      end if;
    
      select 'x'
        into v_Dummy
        from Hac_Company_Devices p
       where p.Device_Id = i_Device_Id
         and p.Attach_Kind = Hac_Pref.c_Device_Attach_Primary
         and p.Company_Id <> i_Company_Id;
    
      Hac_Error.Raise_001;
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Singular_Primary_Attachment;
  
    z_Hac_Company_Devices.Insert_Try(i_Company_Id  => i_Company_Id,
                                     i_Device_Id   => i_Device_Id,
                                     i_Attach_Kind => i_Attach_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Hac_Company_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  ) is
    v_Old_Company_Id number;
  begin
    if z_Hac_Devices.Exist_Lock(i_Server_Id => i_Device.Server_Id,
                                i_Device_Id => i_Device.Device_Id) then
      v_Old_Company_Id := Hac_Util.Load_Primary_Company(i_Device.Device_Id);
    end if;
  
    z_Hac_Devices.Save_Row(i_Device);
  
    if i_Company_Id is null then
      Hac_Error.Raise_002;
    end if;
  
    if v_Old_Company_Id <> i_Company_Id then
      Device_Detach(i_Company_Id => v_Old_Company_Id, i_Device_Id => i_Device.Device_Id);
    end if;
  
    Device_Attach(i_Company_Id  => i_Company_Id,
                  i_Device_Id   => i_Device.Device_Id,
                  i_Attach_Kind => Hac_Pref.c_Device_Attach_Primary);
  
    for i in 1 .. i_Event_Types.Count
    loop
      z_Hac_Device_Event_Types.Insert_Try(i_Server_Id       => i_Device.Server_Id,
                                          i_Device_Id       => i_Device.Device_Id,
                                          i_Device_Type_Id  => i_Device.Device_Type_Id,
                                          i_Event_Type_Code => i_Event_Types(i));
    end loop;
  
    delete Hac_Device_Event_Types q
     where q.Server_Id = i_Device.Server_Id
       and q.Device_Id = i_Device.Device_Id
       and q.Device_Type_Id = i_Device.Device_Type_Id
       and q.Event_Type_Code not member of i_Event_Types;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    z_Hac_Devices.Delete_One(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Analyze_Server_Person_Info
  (
    i_Server_Id      number,
    i_Person         Mr_Natural_Persons%rowtype,
    i_Photo_Sha      varchar2,
    i_Device_Type_Id number,
    i_Rfid_Code      varchar2 := null,
    o_Person_Data    out Gmap
  ) is
    c_Out_Action_Create constant varchar2(1) := 'C';
    c_Out_Action_Update constant varchar2(1) := 'U';
  
    v_Out_Action varchar2(1);
  
    r_Server_Person Hac_Server_Persons%rowtype;
  
    v_Response_Data Gmap;
  
    --------------------------------------------------
    Function Attached_To_Device
    (
      i_Company_Id     number,
      i_Device_Type_Id number,
      i_Person_Id      number
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons Lp
       where Lp.Company_Id = i_Company_Id
         and Lp.Person_Id = i_Person_Id
         and exists (select 1
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = Lp.Location_Id
                 and q.Device_Type_Id = i_Device_Type_Id)
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if i_Server_Id is null then
      return;
    end if;
  
    if z_Hac_Server_Persons.Exist(i_Server_Id  => i_Server_Id,
                                  i_Company_Id => i_Person.Company_Id,
                                  i_Person_Id  => i_Person.Person_Id,
                                  o_Row        => r_Server_Person) then
      if r_Server_Person.Person_Code is null or
         not Fazo.Equal(r_Server_Person.First_Name, i_Person.First_Name) or
         not Fazo.Equal(r_Server_Person.Last_Name, i_Person.Last_Name) or
         not Fazo.Equal(r_Server_Person.Photo_Sha, i_Photo_Sha) or
         not Fazo.Equal(r_Server_Person.Rfid_Code, i_Rfid_Code) then
        v_Out_Action := c_Out_Action_Update;
      end if;
    else
      if Attached_To_Device(i_Company_Id     => i_Person.Company_Id,
                            i_Device_Type_Id => i_Device_Type_Id,
                            i_Person_Id      => i_Person.Person_Id) then
        v_Out_Action := c_Out_Action_Create;
      end if;
    end if;
  
    if v_Out_Action in (c_Out_Action_Create, c_Out_Action_Update) then
      o_Person_Data := Gmap();
    
      o_Person_Data.Put('person_code', Nvl(r_Server_Person.Person_Code, ''));
      o_Person_Data.Put('external_code',
                        Nvl(r_Server_Person.External_Code, Hac_Util.Gen_Hik_External_Code));
      o_Person_Data.Put('first_name', i_Person.First_Name);
      o_Person_Data.Put('last_name', Nvl(i_Person.Last_Name, ''));
      o_Person_Data.Put('photo_sha', Nvl(i_Photo_Sha, ''));
      o_Person_Data.Put('rfid_code', Nvl(i_Rfid_Code, ''));
    
      v_Response_Data := Gmap();
    
      v_Response_Data.Put('server_id', i_Server_Id);
      v_Response_Data.Put('company_id', i_Person.Company_Id);
      v_Response_Data.Put('person_id', i_Person.Person_Id);
    
      o_Person_Data.Put('response_data', v_Response_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Info
  (
    i_Company   Hac_Dss_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Groups Array_Varchar2;
  
    v_Person_Data Gmap;
  
    --------------------------------------------------
    Function Person_Code
    (
      i_Company_Id number,
      i_Person_Id  number
    ) return varchar2 is
    begin
      return z_Md_Companies.Load(i_Company_Id).Code || i_Person_Id;
    end;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Dahua_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Person_Group_Code is not null then
      v_Person_Data.Put('person_group_code', i_Company.Person_Group_Code);
      v_Person_Data.Put('start_time', Hac_Pref.c_Auth_Start_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Auth_End_Time);
    
      v_Person_Data.Put('person_id',
                        Coalesce(v_Person_Data.o_Varchar2('person_code'),
                                 Person_Code(i_Company_Id => i_Person.Company_Id,
                                             i_Person_Id  => i_Person.Person_Id)));
    
      select q.Access_Group_Code
        bulk collect
        into v_Access_Groups
        from Hac_Device_Persons Dp
        join Hac_Dss_Devices q
          on q.Server_Id = i_Company.Server_Id
         and q.Device_Id = Dp.Device_Id
       where Dp.Server_Id = i_Company.Server_Id
         and Dp.Company_Id = i_Person.Company_Id
         and Dp.Person_Id = i_Person.Person_Id
       group by q.Access_Group_Code;
    
      v_Person_Data.Put('access_groups', v_Access_Groups);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Info
  (
    i_Company   Hac_Hik_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Person_Data Gmap;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Hikvision_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Organization_Code is not null then
      v_Person_Data.Put('organization_code', i_Company.Organization_Code);
      v_Person_Data.Put('begin_time', Hac_Pref.c_Hik_Begin_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Hik_End_Time);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Photo_Sha  varchar2(64);
    r_Person     Mr_Natural_Persons%rowtype;
    r_Htt_Person Htt_Persons%rowtype;
  
    v_Dss_Data      Gmap;
    v_Dss_Info_List Glist := Glist();
  
    v_Hik_Data      Gmap;
    v_Hik_Info_List Glist := Glist();
  
    v_Dss_Server Gmap := Gmap();
    v_Hik_Server Gmap := Gmap();
  
    result Gmap := Gmap();
  begin
    o_Data := Array_Varchar2();
  
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    for i in 1 .. i_Person_Ids.Count
    loop
      r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id,
                                                i_Person_Id  => i_Person_Ids(i));
      r_Htt_Person := z_Htt_Persons.Take(i_Company_Id => i_Company_Id,
                                         i_Person_Id  => i_Person_Ids(i));
      v_Photo_Sha  := Hac_Util.Take_Main_Photo(i_Company_Id => i_Company_Id,
                                               i_Person_Id  => i_Person_Ids(i));
    
      Analyze_Dahua_Person_Info(i_Company   => r_Dss_Company,
                                i_Person    => r_Person,
                                i_Photo_Sha => v_Photo_Sha,
                                i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                o_Data      => v_Dss_Data);
    
      Analyze_Hikvision_Person_Info(i_Company   => r_Hik_Company,
                                    i_Person    => r_Person,
                                    i_Photo_Sha => v_Photo_Sha,
                                    i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                    o_Data      => v_Hik_Data);
    
      if v_Dss_Data is not null then
        v_Dss_Info_List.Push(v_Dss_Data.Val);
      end if;
    
      if v_Hik_Data is not null then
        v_Hik_Info_List.Push(v_Hik_Data.Val);
      end if;
    end loop;
  
    if r_Dss_Server.Server_Id is not null then
      v_Dss_Server.Put('host_url', v_Dss_Host_Url);
      v_Dss_Server.Put('username', r_Dss_Server.Username);
      v_Dss_Server.Put('password', r_Dss_Server.Password);
    
      v_Dss_Server.Put('persons', v_Dss_Info_List);
    
      Result.Put('dahua_data', v_Dss_Server);
    end if;
  
    if r_Hik_Server.Server_Id is not null then
      v_Hik_Server.Put('host_url', v_Hik_Host_Url);
      v_Hik_Server.Put('partner_key', r_Hik_Server.Partner_Key);
      v_Hik_Server.Put('partner_secret', r_Hik_Server.Partner_Secret);
    
      v_Hik_Server.Put('persons', v_Hik_Info_List);
    
      Result.Put('hikvision_data', v_Hik_Server);
    end if;
  
    o_Data := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    v_Dss_List Glist;
    v_Hik_List Glist;
  
    v_Dss_Data Gmap := Gmap();
    v_Hik_Data Gmap := Gmap();
  
    v_Person_Ids Array_Number := Fazo.Sort(Fazo.To_Array_Number(i_Person_Ids));
  
    v_Result Gmap := Gmap();
  begin
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    v_Dss_Data.Put('host_url', Nvl(v_Dss_Host_Url, ''));
    v_Dss_Data.Put('username', Nvl(r_Dss_Server.Username, ''));
    v_Dss_Data.Put('password', Nvl(r_Dss_Server.Password, ''));
  
    v_Hik_Data.Put('host_url', Nvl(v_Hik_Host_Url, ''));
    v_Hik_Data.Put('partner_key', Nvl(r_Hik_Server.Partner_Key, ''));
    v_Hik_Data.Put('partner_secret', Nvl(r_Hik_Server.Partner_Secret, ''));
  
    if r_Dss_Company.Server_Id is not null then
      Analyze_Dahua_Person_Attachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('attachment_info', v_Dss_List);
    
      Analyze_Dahua_Person_Detachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('detachment_info', v_Dss_List);
    end if;
  
    if r_Hik_Company.Server_Id is not null then
      Analyze_Hikvision_Person_Attachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('attachment_info', v_Hik_List);
    
      Analyze_Hikvision_Person_Detachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('detachment_info', v_Hik_List);
    end if;
  
    v_Result.Put('dahua_data', v_Dss_Data);
    v_Result.Put('hikvision_data', v_Hik_Data);
  
    o_Data := Fazo.Read_Clob(v_Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  ) is
  begin
    -- TODO FIX, TEZROQ To'g'rilash kerak
    for i in 1 .. i_Person_Ids.Count
    loop
      z_Hac_Device_Persons.Insert_Try(i_Server_Id  => i_Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Device_Id  => i_Device_Id,
                                      i_Person_Id  => i_Person_Ids(i));
    end loop;
    /*insert into Hac_Device_Persons
      (Server_Id, Company_Id, Device_Id, Person_Id)
    values
      (i_Server_Id, i_Company_Id, i_Device_Id, to_number(i_Person_Ids(i)));*/
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    
    i_Person_Ids Array_Varchar2
  ) is
  begin
    forall i in 1 .. i_Person_Ids.Count
      delete from Hac_Device_Persons q
       where q.Server_Id = i_Server_Id
         and q.Company_Id = i_Company_Id
         and q.Device_Id = i_Device_Id
         and q.Person_Id = to_number(i_Person_Ids(i));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  ) is
  begin
    if not z_Hac_Server_Persons.Exist_Lock(i_Server_Id  => i_Server_Id,
                                           i_Company_Id => i_Company_Id,
                                           i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Insert_One(i_Server_Id     => i_Server_Id,
                                      i_Company_Id    => i_Company_Id,
                                      i_Person_Id     => i_Person_Id,
                                      i_External_Code => i_External_Code);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  ) is
    v_Person_Code Option_Varchar2 := case
                                       when i_Person_Code is not null then
                                        Option_Varchar2(i_Person_Code)
                                       else
                                        null
                                     end;
  begin
    z_Hac_Server_Persons.Update_One(i_Server_Id     => i_Server_Id,
                                    i_Company_Id    => i_Company_Id,
                                    i_Person_Id     => i_Person_Id,
                                    i_First_Name    => Option_Varchar2(i_First_Name),
                                    i_Last_Name     => Option_Varchar2(i_Last_Name),
                                    i_Photo_Sha     => Option_Varchar2(i_Photo_Sha),
                                    i_Rfid_Code     => Option_Varchar2(i_Rfid_Code),
                                    i_Person_Code   => v_Person_Code,
                                    i_External_Code => Option_Varchar2(i_External_Code));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  ) is
    pragma autonomous_transaction;
  begin
    z_Hac_Error_Log.Save_One(i_Log_Id         => Hac_Error_Log_Sq.Nextval,
                             i_Request_Params => i_Request_Params,
                             i_Error_Message  => i_Error_Message);
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hac_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Hac_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin hac_core.notify_acms_devices; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices is
    v_Company Hashmap;
    v_Data    Arraylist := Arraylist();
  begin
    for r in (select Dt.Company_Id,
                     cast(collect(to_number(to_char(Dt.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dirty_Persons Dt
               group by Dt.Company_Id)
    loop
      v_Company := Fazo.Zip_Map('company_id', r.Company_Id);
      v_Company.Put('person_ids', r.Person_Ids);
    
      v_Data.Push(v_Company);
    end loop;
  
    b.Add_Final_Service(i_Class_Name => Hac_Pref.c_Acms_Final_Service_Name, i_Data => v_Data);
  
    delete Hac_Dirty_Persons;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id        number,
    i_Device           Htt_Devices%rowtype,
    i_Person_Code      varchar2,
    i_Track_Time       timestamp with local time zone,
    i_Photo_Sha        varchar2 := null,
    i_Track_Type       varchar2 := Htt_Pref.c_Track_Type_Check,
    i_Person_Auth_Type varchar2 := Hac_Pref.c_Person_Auth_Type_Person_Code
  ) is
    v_Filial_Ids Array_Number;
    r_Track      Htt_Tracks%rowtype;
  begin
    r_Track.Company_Id  := i_Device.Company_Id;
    r_Track.Device_Id   := i_Device.Device_Id;
    r_Track.Location_Id := i_Device.Location_Id;
  
    if i_Person_Auth_Type = Hac_Pref.c_Person_Auth_Type_External_Code then
      r_Track.Person_Id := Hac_Util.Take_Person_Id_By_External_Code(i_Server_Id     => i_Server_Id,
                                                                    i_Company_Id    => i_Device.Company_Id,
                                                                    i_External_Code => i_Person_Code);
    elsif i_Person_Auth_Type = Hac_Pref.c_Person_Auth_Type_Pin then
      r_Track.Person_Id := Htt_Util.Person_Id(i_Company_Id => i_Device.Company_Id, --
                                              i_Pin        => i_Person_Code);
    else
      r_Track.Person_Id := Hac_Util.Take_Person_Id_By_Code(i_Server_Id   => i_Server_Id,
                                                           i_Company_Id  => i_Device.Company_Id,
                                                           i_Person_Code => i_Person_Code);
    end if;
  
    r_Track.Track_Type := i_Track_Type;
    r_Track.Mark_Type  := Htt_Pref.c_Mark_Type_Face;
    r_Track.Track_Time := i_Track_Time;
    r_Track.Is_Valid   := 'Y';
    r_Track.Photo_Sha  := i_Photo_Sha;
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    for j in 1 .. v_Filial_Ids.Count
    loop
      Ui_Context.Init_Migr(i_Company_Id   => i_Device.Company_Id,
                           i_User_Id      => Md_Pref.User_System(i_Device.Company_Id),
                           i_Project_Code => Href_Pref.c_Pc_Verifix_Hr,
                           i_Filial_Id    => v_Filial_Ids(j));
    
      r_Track.Filial_Id := v_Filial_Ids(j);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    r_Server         Hac_Servers%rowtype;
    r_Device         Hac_Dss_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
    p_Error_Data     Hashmap;
  
    --------------------------------------------------
    Procedure Save_Notification_Message is
      pragma autonomous_transaction;
    begin
      z_Hac_Dss_Tracks.Insert_Try(i_Host_Url        => i_Host_Url,
                                  i_Person_Code     => Nvl(i_Person_Code,
                                                           Hac_Pref.c_Unknown_Person_Code),
                                  i_Device_Code     => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id),
                                  i_Track_Time      => i_Track_Time,
                                  i_Source_Type     => i_Source_Type,
                                  i_Photo_Url       => i_Photo_Url,
                                  i_Photo_Sha       => i_Photo_Sha,
                                  i_Event_Type_Code => i_Event_Type,
                                  i_Extra_Info      => i_Extra_Info);
      commit;
    
    exception
      when others then
        insert into Hac_Error_Log
          (Log_Id, Request_Params, Error_Message, Created_On)
        values
          (Hac_Error_Log_Sq.Nextval,
           i_Extra_Info,
           Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
           Dbms_Utility.Format_Error_Backtrace,
           Current_Timestamp);
      
        commit;
    end;
  begin
    Save_Notification_Message;
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Dahua),
                                       i_Event_Type_Code => i_Event_Type) then
      return;
    end if;
  
    r_Server := Hac_Util.Take_Server_By_Host_Url(i_Host_Url);
    r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => r_Server.Server_Id,
                                                    i_Device_Code => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id));
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Biruni_Route.Context_Begin;
    
      Save_Device_Track(i_Server_Id   => r_Server.Server_Id, --
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => Htt_Util.Convert_Timestamp(i_Date     => Hac_Util.Unix_Ts_To_Date(i_Track_Time),
                                                                    i_Timezone => Hac_Pref.c_Utc_Timezone_Code),
                        i_Photo_Sha   => i_Photo_Sha);
    
      Biruni_Route.Context_End;
    end loop;
    commit;
  exception
    when others then
      rollback;
      p_Error_Data := Fazo.Zip_Map('source',
                                   'dahua',
                                   'host_url',
                                   i_Host_Url,
                                   'person_code',
                                   i_Person_Code,
                                   'dss_channel_id',
                                   i_Dss_Channel_Id,
                                   'track_time',
                                   i_Track_Time);
    
      Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                     i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) || Chr(10) ||
                                         Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  ) is
    pragma autonomous_transaction;
    c_Timestamp_Format varchar2(50) := 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM';
  
    --------------------------------------------------
    Function Event_Exists
    (
      i_Server_Id   number,
      i_Door_Code   varchar2,
      i_Person_Code varchar2,
      i_Event_Time  timestamp with local time zone
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hac_Hik_Ex_Events q
       where q.Server_Id = i_Server_Id
         and q.Door_Code = i_Door_Code
         and q.Person_Code = i_Person_Code
         and q.Event_Time = i_Event_Time;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Event_Exists(i_Server_Id   => i_Server_Id,
                    i_Door_Code   => i_Door_Code,
                    i_Person_Code => i_Person_Code,
                    i_Event_Time  => To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format)) then
      return;
    end if;
  
    insert into Hac_Hik_Ex_Events
      (Server_Id,
       Door_Code,
       Person_Code,
       Event_Time,
       Event_Type,
       Event_Code,
       Check_In_And_Out_Type,
       Event_Type_Code,
       Door_Name,
       Src_Type,
       Status,
       Card_No,
       Person_Name,
       Person_Type,
       Pic_Uri,
       Pic_Sha,
       Device_Time,
       Reader_Code,
       Reader_Name,
       Extra_Info,
       Created_On)
    values
      (i_Server_Id,
       i_Door_Code,
       i_Person_Code,
       To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format),
       i_Event_Type,
       i_Event_Code,
       i_Check_In_And_Out_Type,
       i_Event_Type_Code,
       i_Door_Name,
       i_Src_Type,
       i_Status,
       i_Card_No,
       i_Person_Name,
       i_Person_Type,
       i_Pic_Uri,
       i_Pic_Sha,
       i_Device_Time,
       i_Reader_Code,
       i_Reader_Name,
       i_Extra_Info,
       Current_Timestamp);
    commit;
  
  exception
    when others then
      insert into Hac_Error_Log
        (Log_Id, Request_Params, Error_Message, Created_On)
      values
        (Hac_Error_Log_Sq.Nextval,
         i_Extra_Info,
         Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
         Dbms_Utility.Format_Error_Backtrace,
         Current_Timestamp);
    
      commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    r_Device         Hac_Hik_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
  begin
    r_Device := Hac_Util.Get_Hik_Device_By_Door_Code(i_Server_Id => i_Server_Id,
                                                     i_Door_Code => i_Door_Code);
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Save_Device_Track(i_Server_Id   => i_Server_Id,
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => To_Timestamp_Tz(i_Track_Time,
                                                         'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM'),
                        i_Photo_Sha   => i_Photo_Sha,
                        i_Track_Type  => case i_Track_Type
                                           when Hac_Pref.c_Hik_Track_Type_Input then
                                            Htt_Pref.c_Track_Type_Input
                                           when Hac_Pref.c_Hik_Track_Type_Output then
                                            Htt_Pref.c_Track_Type_Output
                                           else
                                            Htt_Pref.c_Track_Type_Check
                                         end);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Person_Code varchar2(300);
    v_Photo_Url   varchar2(300);
    v_Channel_Id  varchar2(350);
    v_Photo_Sha   varchar2(64);
    v_Track_Time  number;
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      v_Channel_Id  := v_Track.r_Varchar2('channelId');
      v_Person_Code := v_Track.r_Varchar2('personId');
      v_Track_Time  := v_Track.r_Number('alarmTime');
      v_Photo_Url   := v_Track.o_Varchar2('captureImageUrl');
      v_Photo_Sha   := v_Track.o_Varchar2('photo_sha');
    
      Hac_Core.Save_Dss_Track(i_Host_Url       => i_Host_Url,
                              i_Person_Code    => v_Person_Code,
                              i_Dss_Channel_Id => v_Channel_Id,
                              i_Track_Time     => v_Track_Time,
                              i_Photo_Url      => v_Photo_Url,
                              i_Photo_Sha      => v_Photo_Sha,
                              i_Source_Type    => i_Source_Type,
                              i_Event_Type     => v_Track.o_Varchar2('alarmTypeId'),
                              i_Extra_Info     => v_Track.Json);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Door_Code       varchar2(1000 char);
    v_Event_Time      varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
  
    v_Hac_Device_Type_Id number := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision);
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      begin
        v_Person_Code     := v_Track.r_Varchar2('personId');
        v_Door_Code       := v_Track.r_Varchar2('doorIndexCode');
        v_Event_Time      := v_Track.r_Varchar2('eventTime');
        v_Hik_Track_Type  := v_Track.r_Number('checkInAndOutType');
        v_Event_Type_Code := v_Track.r_Number('eventType');
      
        Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => i_Server_Id,
                                   i_Door_Code             => v_Door_Code,
                                   i_Person_Code           => v_Person_Code,
                                   i_Event_Time            => v_Event_Time,
                                   i_Event_Type            => i_Source_Type,
                                   i_Event_Code            => v_Track.r_Varchar2('eventId'),
                                   i_Check_In_And_Out_Type => v_Hik_Track_Type,
                                   i_Event_Type_Code       => v_Event_Type_Code,
                                   i_Door_Name             => v_Track.o_Varchar2('doorName'),
                                   i_Card_No               => v_Track.o_Varchar2('cardNo'),
                                   i_Person_Name           => v_Track.o_Varchar2('personName'),
                                   i_Person_Type           => v_Track.o_Varchar2('personType'),
                                   i_Pic_Uri               => v_Track.o_Varchar2('picUri'),
                                   i_Pic_Sha               => v_Track.o_Varchar2('photo_sha'),
                                   i_Device_Time           => v_Track.o_Varchar2('deviceTime'),
                                   i_Reader_Code           => v_Track.o_Varchar2('readerIndexCode'),
                                   i_Reader_Name           => v_Track.o_Varchar2('readerName'),
                                   i_Extra_Info            => v_Track.Json);
      
        continue when not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => v_Hac_Device_Type_Id,
                                                      i_Event_Type_Code => v_Event_Type_Code);
      
        Hac_Core.Save_Hik_Track(i_Server_Id   => i_Server_Id,
                                i_Person_Code => v_Person_Code,
                                i_Track_Time  => v_Event_Time,
                                i_Door_Code   => v_Door_Code,
                                i_Photo_Sha   => v_Track.o_Varchar2('photo_sha'),
                                i_Track_Type  => v_Hik_Track_Type);
      exception
        when others then
          Hac_Core.Save_Error_Log(i_Request_Params => v_Track.Json,
                                  i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                      Chr(10) || Dbms_Utility.Format_Error_Backtrace);
      end;
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  ) is
  begin
    select k.Server_Id, t.Host_Url, k.Partner_Key, k.Partner_Secret
      into o_Server_Id, o_Host_Url, o_Partner_Key, o_Partner_Secret
      from Hac_Hik_Servers k
      join Hac_Servers t
        on t.Server_Id = k.Server_Id
     where k.Token = i_Token;
  exception
    when No_Data_Found then
      Hac_Error.Raise_006(i_Token);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Events      Glist;
    v_Params      Gmap;
    v_Event_Data  Gmap;
    v_Person_Data Gmap;
    ---------- 
    v_Door_Code       varchar2(1000 char);
    v_Happen_Time     varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
    ---------- 
    v_Host_Name  varchar2(1024 char);
    v_Server_Id  number;
    p_Error_Data Hashmap;
  begin
  
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Server_Id   := to_number(v_Data.r_Varchar2('serverId'));
    v_Params      := v_Data.r_Gmap('params');
    v_Events      := v_Params.r_Glist('events');
    v_Event_Data  := Gmap(Json_Object_t(v_Events.Val.Get(0)));
    v_Person_Data := v_Event_Data.r_Gmap('data');
    ---------- 
    v_Person_Code     := v_Person_Data.r_Varchar2('personId');
    v_Happen_Time     := v_Event_Data.r_Varchar2('happenTime');
    v_Door_Code       := v_Event_Data.r_Varchar2('srcIndex');
    v_Event_Type_Code := v_Event_Data.r_Number('eventType');
  
    v_Hik_Track_Type := v_Person_Data.r_Number('checkInAndOutType');
  
    Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => v_Server_Id,
                               i_Door_Code             => v_Door_Code,
                               i_Person_Code           => v_Person_Code,
                               i_Event_Time            => v_Happen_Time,
                               i_Event_Type            => Hac_Pref.c_Hik_Event_Type_From_Notifications,
                               i_Event_Code            => v_Event_Data.r_Varchar2('eventId'),
                               i_Check_In_And_Out_Type => v_Hik_Track_Type,
                               i_Event_Type_Code       => v_Event_Type_Code,
                               i_Door_Name             => v_Event_Data.o_Varchar2('srcName'),
                               i_Src_Type              => v_Event_Data.o_Varchar2('srcType'),
                               i_Status                => v_Event_Data.o_Number('status'),
                               i_Card_No               => v_Person_Data.o_Varchar2('cardNo'),
                               i_Pic_Uri               => v_Person_Data.o_Varchar2('picUri'),
                               i_Pic_Sha               => v_Person_Data.o_Varchar2('picSha'),
                               i_Reader_Code           => v_Person_Data.o_Varchar2('readerIndexCode'),
                               i_Reader_Name           => v_Person_Data.o_Varchar2('readerName'),
                               i_Extra_Info            => v_Event_Data.Json);
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision),
                                       i_Event_Type_Code => v_Event_Type_Code) then
      return;
    end if;
  
    Hac_Core.Save_Hik_Track(i_Server_Id   => v_Server_Id,
                            i_Person_Code => v_Person_Code,
                            i_Track_Time  => v_Happen_Time,
                            i_Door_Code   => v_Door_Code,
                            i_Photo_Sha   => v_Person_Data.o_Varchar2('picSha'),
                            i_Track_Type  => v_Hik_Track_Type);
  exception
    when others then
      p_Error_Data := Fazo.Zip_Map('source',
                                   'hikvision',
                                   'host_name',
                                   v_Host_Name,
                                   'person_code',
                                   v_Person_Code,
                                   'door_code',
                                   v_Door_Code,
                                   'track_time',
                                   v_Happen_Time);
    
      Hac_Core.Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                              i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                  Chr(10) || Dbms_Utility.Format_Error_Backtrace);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Hik_Device_Listener_Event
  (
    i_Token   varchar2,
    i_Pic_Sha varchar2,
    i_Val     Array_Varchar2
  ) is
    v_Data       Gmap;
    v_Event_Data Gmap;
  
    v_Event_Type        varchar2(300 char);
    v_Event_Time        timestamp with local time zone;
    v_Person_Code       varchar2(300 char);
    v_Attendance_Status varchar2(300 char);
    v_Major_Event_Type  number;
    v_Sub_Event_Type    number;
  
    r_Device Hac_Hik_Listening_Devices%rowtype;
  
    p_Error_Data Hashmap;
  
    c_Timestamp_Format varchar2(50) := 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM';
  
    -------------------------------------------------- 
    Procedure Save_Hik_Device_Listener_Event
    (
      i_Device_Token      varchar2,
      i_Device_Code       varchar2,
      i_Mac_Address       varchar2,
      i_Event_Time        timestamp with local time zone,
      i_Person_Code       varchar2,
      i_Event_Type        varchar2,
      i_Major_Event_Type  varchar2,
      i_Sub_Event_Type    varchar2,
      i_Attendance_Status varchar2,
      i_Pic_Sha           varchar2,
      i_Extra_Info        varchar2
    ) is
      pragma autonomous_transaction;
    begin
      insert into Hac_Hik_Device_Listener_Events
        (Event_Id,
         Device_Token,
         Device_Code,
         Mac_Address,
         Event_Time,
         Person_Code,
         Event_Type,
         Major_Event_Type,
         Sub_Event_Type,
         Attendance_Status,
         Pic_Sha,
         Extra_Info,
         Created_On)
      values
        (Hac_Hik_Device_Events_Sq.Nextval,
         i_Device_Token,
         i_Device_Code,
         i_Mac_Address,
         i_Event_Time,
         i_Person_Code,
         i_Event_Type,
         i_Major_Event_Type,
         i_Sub_Event_Type,
         i_Attendance_Status,
         i_Pic_Sha,
         i_Extra_Info,
         Current_Timestamp);
      commit;
    
    exception
      when others then
        insert into Hac_Error_Log
          (Log_Id, Request_Params, Error_Message, Created_On)
        values
          (Hac_Error_Log_Sq.Nextval,
           i_Extra_Info,
           Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
           Dbms_Utility.Format_Error_Backtrace,
           Current_Timestamp);
      
        commit;
    end;
  
    --------------------------------------------------
    Procedure Save_Hik_Listener_Tracks
    (
      i_Device            Hac_Hik_Listening_Devices%rowtype,
      i_Event_Time        timestamp with local time zone,
      i_Person_Code       varchar2,
      i_Attendance_Status varchar2,
      i_Pic_Sha           varchar2
    ) is
      v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
      r_Device         Hac_Hik_Devices%rowtype;
      r_Htt_Device     Htt_Devices%rowtype;
    begin
      r_Device := Hac_Util.Take_Hik_Device_By_Serial_Number(i_Device.Serial_Number);
    
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => i_Device.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => i_Device.Serial_Number);
    
      Save_Device_Track(i_Server_Id        => r_Device.Server_Id,
                        i_Device           => r_Htt_Device,
                        i_Person_Code      => i_Person_Code,
                        i_Track_Time       => i_Event_Time,
                        i_Photo_Sha        => i_Pic_Sha,
                        i_Person_Auth_Type => i_Device.Person_Auth_Type,
                        i_Track_Type       => case i_Attendance_Status
                                                when Hac_Pref.c_Attendance_Status_Input then
                                                 Htt_Pref.c_Track_Type_Input
                                                when Hac_Pref.c_Attendance_Status_Output then
                                                 Htt_Pref.c_Track_Type_Output
                                                else
                                                 Htt_Pref.c_Track_Type_Check
                                              end);
    end;
  
  begin
    r_Device := z_Hac_Hik_Listening_Devices.Load(i_Device_Token => i_Token);
  
    v_Data := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
  
    v_Event_Type := v_Data.r_Varchar2('eventType');
    v_Event_Time := To_Timestamp_Tz(v_Data.r_Varchar2('dateTime'), c_Timestamp_Format);
  
    v_Event_Data := Nvl(v_Data.o_Gmap(v_Event_Type), Gmap());
  
    v_Person_Code       := v_Event_Data.o_Varchar2('employeeNoString');
    v_Major_Event_Type  := v_Event_Data.o_Number('majorEventType');
    v_Sub_Event_Type    := v_Event_Data.o_Number('subEventType');
    v_Attendance_Status := v_Event_Data.o_Varchar2('attendanceStatus');
  
    Save_Hik_Device_Listener_Event(i_Device_Token      => r_Device.Device_Token,
                                   i_Device_Code       => v_Data.o_Varchar2('deviceID'),
                                   i_Mac_Address       => v_Data.o_Varchar2('macAddress'),
                                   i_Event_Time        => v_Event_Time,
                                   i_Person_Code       => v_Person_Code,
                                   i_Event_Type        => v_Event_Type,
                                   i_Major_Event_Type  => v_Major_Event_Type,
                                   i_Sub_Event_Type    => v_Sub_Event_Type,
                                   i_Attendance_Status => v_Attendance_Status,
                                   i_Pic_Sha           => i_Pic_Sha,
                                   i_Extra_Info        => v_Data.Json);
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id   => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision),
                                       i_Event_Type_Code  => v_Sub_Event_Type,
                                       i_Major_Event_Type => v_Major_Event_Type) then
      return;
    end if;
  
    Save_Hik_Listener_Tracks(i_Device            => r_Device,
                             i_Event_Time        => v_Event_Time,
                             i_Person_Code       => v_Person_Code,
                             i_Attendance_Status => v_Attendance_Status,
                             i_Pic_Sha           => i_Pic_Sha);
  exception
    when others then
      p_Error_Data := Fazo.Zip_Map('source',
                                   'hikvision_device',
                                   'device_token',
                                   i_Token,
                                   'person_code',
                                   v_Person_Code,
                                   'track_time',
                                   v_Event_Time);
    
      Hac_Core.Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                              i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                  Chr(10) || Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Execute by Application servers
  -- Don't remove this procedure
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
  begin
    Dbms_Session.Reset_Package;
    Save_Dss_Track(i_Host_Url       => i_Host_Url,
                   i_Person_Code    => i_Person_Code,
                   i_Dss_Channel_Id => i_Dss_Channel_Id,
                   i_Track_Time     => i_Track_Time,
                   i_Photo_Url      => i_Photo_Url,
                   i_Photo_Sha      => i_Photo_Sha,
                   i_Source_Type    => Hac_Pref.c_Dss_Track_Source_Queue,
                   i_Event_Type     => i_Event_Type,
                   i_Extra_Info     => i_Extra_Info);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  ) is
  begin
    z_Hac_Devices.Update_One(i_Server_Id => i_Server_Id,
                             i_Device_Id => i_Device_Id,
                             i_Device_Ip => i_Device_Ip,
                             i_Ready     => i_Ready,
                             i_Status    => i_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  ) is
  begin
    z_Biruni_Files.Insert_Try(i_Sha          => i_Sha,
                              i_File_Size    => i_File_Size,
                              i_Store_Kind   => i_Store_Kind,
                              i_File_Name    => i_File_Name,
                              i_Content_Type => i_Content_Type);
  end;

end Hac_Core;
/

create or replace package Hac_Pref is
  ----------------------------------------------------------------------------------------------------
  type Dss_Server_Rt is record(
    Acms     Hac_Servers%rowtype,
    Username varchar2(300 char),
    Password varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Dss_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Register_Code varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Server_Rt is record(
    Acms           Hac_Servers%rowtype,
    Partner_Key    varchar2(300 char),
    Partner_Secret varchar2(300 char),
    Token          varchar2(64 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Isup_Password varchar2(300 char),
    Event_Types   Array_Number);
  ----------------------------------------------------------------------------------------------------
  c_Acms_Final_Service_Name constant varchar2(100) := 'com.verifix.vhr.AcmsFinalService';
  ----------------------------------------------------------------------------------------------------
  -- Dahua integration preferences
  ----------------------------------------------------------------------------------------------------
  c_Dahua_Api_Service_Name        constant varchar2(100) := 'com.verifix.vhr.dahua.DahuaRuntimeService';
  c_Start_Page_Num                constant number := 1; -- used in get list requests
  c_Default_Page_Size             constant number := 500; -- used in get list requests, max number of items in list
  c_Ascending_Order_Direction     constant number := 0; -- used in get list requests
  c_Descending_Order_Direction    constant number := 1; -- used in get list requests
  c_Dahua_Gender_Neutral          constant number := 0;
  c_Person_Source_Management_List constant number := 0;
  c_Auth_Start_Time               constant number := 1615824000; -- unix timestamp in seconds, 01.01.2000 00:00:00
  c_Auth_End_Time                 constant number := 1931443199; -- unix timestamp in seconds, 01.01.2050 00:00:00
  ----------------------------------------------------------------------------------------------------
  -- DAHUA DEVICE CHANNEL CODE
  ---------------------------------------------------------------------------------------------------- 
  -- channel code consists of: 
  -- device_code + '$' + device_type + '$' + channel_sequence_val + '$' + unit_sequence_val
  -- by default device type is '7' (access_control)
  -- by default channel_sequence_val is '0' (only one)
  -- by default unit_sequence_val is '0' (only one)
  ---------------------------------------------------------------------------------------------------- 
  c_Default_Channel_Id_Tail constant varchar2(10) := '$7$0$0';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API METHODS
  ---------------------------------------------------------------------------------------------------- 
  c_Org_Tree_Uri     constant varchar2(50) := '/brms/api/v1.0/tree/deviceOrg';
  c_Person_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/person-group';
  c_Device_Uri       constant varchar2(50) := '/brms/api/v1.1/device';
  c_Door_Group_Uri   constant varchar2(50) := '/obms/api/v1.0/accessControl/doorGroup';
  c_Access_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access-group';
  c_Person_Uri       constant varchar2(50) := '/obms/api/v1.1/acs/person';
  c_Tracks_Fetch_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access/record/fetch/page';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API RESOURCE uris (are added to the api method uris)
  ----------------------------------------------------------------------------------------------------
  c_List_Uri                  constant varchar2(50) := '/list';
  c_Page_Uri                  constant varchar2(50) := '/page';
  c_Person_Access_Authorize   constant varchar2(50) := '/person/authorize';
  c_Person_Access_Deauthorize constant varchar2(50) := '/person/unauthorize';
  ----------------------------------------------------------------------------------------------------
  -- Dahua default role ids (are kept in DSS server)
  ----------------------------------------------------------------------------------------------------
  c_Superadmin_Role_Id constant number := 1;
  c_Admin_Role_Id      constant number := 2;
  ----------------------------------------------------------------------------------------------------
  -- Dahua default org code
  ----------------------------------------------------------------------------------------------------
  c_Default_Root_Org_Code constant varchar2(3) := '001';
  ----------------------------------------------------------------------------------------------------
  c_Utc_Timezone_Code constant varchar2(3) := 'UTC';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Api_Service_Name constant varchar2(100) := 'com.verifix.vhr.hikvision.HikvisionRuntimeService';
  c_Hik_Begin_Time       constant varchar2(50) := '2020-01-01T00:00:00+00:00';
  c_Hik_End_Time         constant varchar2(50) := '2037-12-31T23:59:59+00:00'; -- max allowed effective date
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision request paths
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Request_Path_Get_Events              constant varchar2(100 char) := '/artemis/api/acs/v1/door/events';
  c_Hik_Request_Path_Get_Access_Levels       constant varchar2(100 char) := '/artemis/api/acs/v1/privilege/group';
  c_Hik_Request_Path_Get_Devices             constant varchar2(100 char) := '/artemis/api/resource/v1/acsDevice/acsDeviceList';
  c_Hik_Request_Path_Get_Doors               constant varchar2(100 char) := '/artemis/api/resource/v1/acsDoor/acsDoorList';
  c_Hik_Request_Path_Get_Organizations       constant varchar2(100 char) := '/artemis/api/resource/v1/org/orgList';
  c_Hik_Request_Path_Get_Persons             constant varchar2(100 char) := '/artemis/api/resource/v1/person/personList';
  c_Hik_Request_Path_Get_Person_Photo        constant varchar2(100 char) := '/artemis/api/resource/v1/person/picture_data';
  c_Hik_Request_Path_Subscribe_To_Tracks     constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionByEventTypes';
  c_Hik_Request_Path_Unsubscribe_From_Tracks constant varchar2(100 char) := '/artemis/api/eventService/v1/eventUnSubscriptionByEventTypes';
  c_Hik_Request_Path_Subscriptions_List      constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionView';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Device_Status_Offline constant number := 2;
  c_Hik_Device_Status_Online  constant number := 1;
  c_Hik_Device_Status_Unknown constant number := 0;
  ----------------------------------------------------------------------------------------------------  
  -- Dahua device statuses
  ----------------------------------------------------------------------------------------------------  
  c_Dss_Device_Status_Offline constant number := 0;
  c_Dss_Device_Status_Online  constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision door states
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Door_State_Remain_Open   constant varchar2(2) := 'RO';
  c_Hik_Door_State_Closed        constant varchar2(1) := 'C';
  c_Hik_Door_State_Open          constant varchar2(1) := 'O';
  c_Hik_Door_State_Remain_Closed constant varchar2(2) := 'RC';
  c_Hik_Door_State_Offline       constant varchar2(1) := 'F';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision access level types
  ----------------------------------------------------------------------------------------------------
  c_Hik_Access_Level_Type_Access_Control number := 1;
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event types (Verifix side)
  ----------------------------------------------------------------------------------------------------
  c_Hik_Event_Type_From_Notifications constant varchar2(1) := 'N';
  c_Hik_Event_Type_Manually_Retrieved constant varchar2(1) := 'M';
  c_Hik_Event_Type_Loaded_By_Job      constant varchar2(1) := 'J';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event type codes
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Code_By_Face        constant number := 196893;
  c_Hik_Event_Code_By_Fingerprint constant number := 200516;
  c_Hik_Event_Code_By_Card        constant number := 198914;
  ----------------------------------------------------------------------------------------------------
  -- Hikvision event receiver data
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Receiver_Route_Uri        constant varchar2(100 char) := 'hik/event_receiver';
  c_Hik_Device_Event_Receiver_Route_Uri constant varchar2(100 char) := '/hik/device/event_receiver';
  ----------------------------------------------------------------------------------------------------
  -- device attach kind
  ----------------------------------------------------------------------------------------------------
  c_Device_Attach_Primary   constant varchar2(1) := 'P';
  c_Device_Attach_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- device types 
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- DSS TRACK SOURCE
  ----------------------------------------------------------------------------------------------------
  c_Dss_Track_Source_Manual constant varchar2(1) := 'M';
  c_Dss_Track_Source_Queue  constant varchar2(1) := 'Q';
  c_Dss_Track_Source_Job    constant varchar2(1) := 'J';
  ----------------------------------------------------------------------------------------------------
  -- HIK TRACK TYPES
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Track_Type_Input  constant number := 1;
  c_Hik_Track_Type_Output constant number := 2;
  ----------------------------------------------------------------------------------------------------
  c_Unknown_Person_Code constant number := -1;
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Delimiter constant varchar2(1) := '#';
  ----------------------------------------------------------------------------------------------------
  -- person auth types
  ----------------------------------------------------------------------------------------------------
  c_Person_Auth_Type_Person_Code   constant varchar2(1) := 'C';
  c_Person_Auth_Type_External_Code constant varchar2(1) := 'E';
  c_Person_Auth_Type_Pin           constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- Hik listening Device attendance statuses
  ----------------------------------------------------------------------------------------------------
  c_Attendance_Status_Input  constant varchar2(100) := 'checkIn';
  c_Attendance_Status_Output constant varchar2(100) := 'checkOut';
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Source_Dss        constant varchar2(1) := 'D';
  c_Event_Type_Source_Hikcentral constant varchar2(1) := 'H';
  c_Event_Type_Source_Hik_Device constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  c_Accepted_Major_Event_Type constant number := 5;
end Hac_Pref;
/
create or replace package body Hac_Pref is
end Hac_Pref;
/

create or replace package Hac_Util is
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Primary_Company(i_Device_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Take_Server_By_Host_Url(i_Host_Url varchar2) return Hac_Servers%rowtype;
  ---------------------------------------------------------------------------------------------------- 
  Function Date_To_Unix_Ts
  (
    i_Date     in date,
    i_Timezone varchar2 := Sessiontimezone
  ) return number;
  ---------------------------------------------------------------------------------------------------- 
  Function Unix_Ts_To_Date(i_Timestamp in number) return date;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Uuid return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Hik_External_Code return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Isup_Password return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Gen_Token return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Hik_Ex_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Door_Code_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Door_Code
  (
    i_Server_Id number,
    i_Door_Code varchar2
  ) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Access_Level_Code_By_Name
  (
    i_Server_Id         number,
    i_Access_Level_Name varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Dss_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Dss_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Hik_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_Code
  (
    i_Server_Id   number,
    i_Company_Id  number,
    i_Person_Code varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_External_Code
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_External_Code varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Extract_Device_Code(i_Channel_Id varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Take_Main_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Dss_Name(i_Real_Name varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_File(i_Sha varchar2) return blob;
  ----------------------------------------------------------------------------------------------------
  Function Is_Good_Event_Type
  (
    i_Device_Type_Id   number,
    i_Event_Type_Code  number,
    i_Major_Event_Type number := null
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Device_Status varchar2) return varchar2;
  Function Device_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Hik_Device_Status(i_Hik_Device_Status number) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Dss_Device_Status(i_Dss_Device_Status number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State(i_Door_State varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Kind(i_Attach_Kind varchar2) return varchar2;
  Function Device_Attach_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Combined_Event_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Combined_Event_Type
  (
    i_Event_Types_Codes Array_Varchar2,
    i_Event_Type_Names  Array_Varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Auth_Type(i_Auth_Type varchar2) return varchar2;
  Function Person_Auth_Types(i_Include_Person_Code boolean := false) return Matrix_Varchar2;
end Hac_Util;
/
create or replace package body Hac_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HAC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number is
    result number;
  begin
    select q.Device_Type_Id
      into result
      from Hac_Device_Types q
     where q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Primary_Company(i_Device_Id number) return number is
    result number;
  begin
    select Cd.Company_Id
      into result
      from Hac_Company_Devices Cd
     where Cd.Device_Id = i_Device_Id
       and Cd.Attach_Kind = Hac_Pref.c_Device_Attach_Primary;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Server_By_Host_Url(i_Host_Url varchar2) return Hac_Servers%rowtype is
    r_Server Hac_Servers%rowtype;
  begin
    select q.*
      into r_Server
      from Hac_Servers q
     where q.Host_Url = i_Host_Url;
  
    return r_Server;
  exception
    when No_Data_Found then
      return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Date_To_Unix_Ts
  (
    i_Date     in date,
    i_Timezone varchar2 := Sessiontimezone
  ) return number is
    v_Date date := Htt_Util.Timestamp_To_Date(i_Timestamp => Htt_Util.Convert_Timestamp(i_Date     => i_Date,
                                                                                        i_Timezone => i_Timezone),
                                              i_Timezone  => Hac_Pref.c_Utc_Timezone_Code);
  begin
    return Trunc((v_Date - to_date('01.01.1970', 'dd.mm.yyyy')) * 60 * 60 * 24);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Unix_Ts_To_Date(i_Timestamp in number) return date is
  begin
    return to_date('01.01.1970', 'dd.mm.yyyy') + Numtodsinterval(i_Timestamp, 'second');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Uuid return varchar2 is
  begin
    return Rawtohex(Sys_Guid());
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Hik_External_Code return varchar2 is
  begin
    return Substr(Rawtohex(Sys_Guid()), 1, 16);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Gen_Isup_Password return varchar2 is
  begin
    return Dbms_Random.String('x', 8);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gen_Token return varchar2 is
    v_Src raw(256) := Dbms_Crypto.Randombytes(128);
  begin
    return Dbms_Crypto.Hash(Src => v_Src, Typ => Dbms_Crypto.Hash_Sh256);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Hik_Ex_Devices%rowtype is
    result Hac_Hik_Ex_Devices%rowtype;
  begin
    select *
      into result
      from Hac_Hik_Ex_Devices t
     where t.Server_Id = i_Server_Id
       and t.Device_Name = i_Device_Name;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Door_Code_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return varchar2 is
    result Hac_Hik_Ex_Doors.Door_Code%type;
  begin
    select t.Door_Code
      into result
      from Hac_Hik_Ex_Doors t
     where t.Server_Id = i_Server_Id
       and t.Device_Code = i_Device_Code;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Device_By_Door_Code
  (
    i_Server_Id number,
    i_Door_Code varchar2
  ) return Hac_Hik_Devices%rowtype is
    result Hac_Hik_Devices%rowtype;
  begin
    select t.*
      into result
      from Hac_Hik_Devices t
     where t.Server_Id = i_Server_Id
       and t.Door_Code = i_Door_Code;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Hik_Access_Level_Code_By_Name
  (
    i_Server_Id         number,
    i_Access_Level_Name varchar2
  ) return varchar2 is
    result Hac_Hik_Ex_Access_Levels.Access_Level_Code%type;
  begin
    select t.Access_Level_Code
      into result
      from Hac_Hik_Ex_Access_Levels t
     where t.Server_Id = i_Server_Id
       and t.Access_Level_Name = i_Access_Level_Name;
  
    return result;
  exception
    when others then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Name
  (
    i_Server_Id   number,
    i_Device_Name varchar2
  ) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select p.*
      into r_Device
      from Hac_Devices q
      join Hac_Dss_Devices p
        on q.Server_Id = p.Server_Id
       and q.Device_Id = p.Device_Id
     where q.Server_Id = i_Server_Id
       and q.Device_Name = i_Device_Name;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Dss_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Dss_Devices q
     where q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Serial_Number(i_Serial_Number varchar2) return Hac_Hik_Devices%rowtype is
    r_Device Hac_Hik_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Hik_Devices q
     where q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Dss_Devices%rowtype is
    r_Device Hac_Dss_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Dss_Devices q
     where q.Server_Id = i_Server_Id
       and q.Device_Code = i_Device_Code;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Hik_Device_By_Device_Code
  (
    i_Server_Id   number,
    i_Device_Code varchar2
  ) return Hac_Hik_Devices%rowtype is
    r_Device Hac_Hik_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Hac_Hik_Devices q
     where q.Server_Id = i_Server_Id
       and q.Device_Code = i_Device_Code;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_Code
  (
    i_Server_Id   number,
    i_Company_Id  number,
    i_Person_Code varchar2
  ) return number is
    v_Person_Id number;
  begin
    select Sp.Person_Id
      into v_Person_Id
      from Hac_Server_Persons Sp
     where Sp.Company_Id = i_Company_Id
       and Sp.Server_Id = i_Server_Id
       and Sp.Person_Code = i_Person_Code;
  
    return v_Person_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Person_Id_By_External_Code
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_External_Code varchar2
  ) return number is
    v_Person_Id number;
  begin
    select Sp.Person_Id
      into v_Person_Id
      from Hac_Server_Persons Sp
     where Sp.Company_Id = i_Company_Id
       and Sp.Server_Id = i_Server_Id
       and Sp.External_Code = i_External_Code;
  
    return v_Person_Id;
  exception
    when No_Data_Found then
      return null;
    
  end;

  ----------------------------------------------------------------------------------------------------
  Function Extract_Device_Code(i_Channel_Id varchar2) return varchar2 is
    -- device channel_id consists of 4 elements
    -- and looks like: device_code$7$0$0
    -- 7 stands for "access control" channel type
    v_Parsed_Channel Array_Varchar2;
  begin
    v_Parsed_Channel := Fazo.Split(i_Channel_Id, '$');
  
    if v_Parsed_Channel.Count != 4 then
      b.Raise_Error('not a channel code');
    end if;
  
    return v_Parsed_Channel(1);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Any_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
    result varchar2(64);
  begin
    select q.Photo_Sha
      into result
      from Htt_Person_Photos q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id
     order by q.Photo_Sha
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Main_Photo
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
    result varchar2(64);
  begin
    select q.Photo_Sha
      into result
      from Htt_Person_Photos q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id
       and q.Is_Main = 'Y'
       and Rownum = 1;
  
    return result;
  exception
    when No_Data_Found then
      return Take_Any_Photo(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dss_Name(i_Real_Name varchar2) return varchar2 is
  begin
    return i_Real_Name || ':' || Hac_Next.Name_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_File(i_Sha varchar2) return blob is
    v_File blob;
  begin
    select q.File_Content
      into v_File
      from Biruni_Filespace q
     where q.Sha = i_Sha;
  
    return v_File;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Good_Event_Type
  (
    i_Device_Type_Id   number,
    i_Event_Type_Code  number,
    i_Major_Event_Type number := null
  ) return boolean is
    r_Event_Type Hac_Event_Types%rowtype;
  begin
    if i_Major_Event_Type is not null and
       i_Major_Event_Type <> Hac_Pref.c_Accepted_Major_Event_Type then
      return false;
    end if;
  
    r_Event_Type := z_Hac_Event_Types.Take(i_Device_Type_Id  => i_Device_Type_Id,
                                           i_Event_Type_Code => i_Event_Type_Code);
    return r_Event_Type.Access_Granted = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Offline return varchar2 is
  begin
    return t('device_status:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Online return varchar2 is
  begin
    return t('device_status:online');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Unknown return varchar2 is
  begin
    return t('device_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Device_Status varchar2) return varchar2 is
  begin
    return --
    case i_Device_Status --
    when Hac_Pref.c_Device_Status_Offline then t_Device_Status_Offline --
    when Hac_Pref.c_Device_Status_Online then t_Device_Status_Online --
    when Hac_Pref.c_Device_Status_Unknown then t_Device_Status_Unknown -- 
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- maps Hikvision device status to hac_devices.status
  ---------------------------------------------------------------------------------------------------- 
  Function Map_Hik_Device_Status(i_Hik_Device_Status number) return varchar2 is
  begin
    return --
    case i_Hik_Device_Status --
    when Hac_Pref.c_Hik_Device_Status_Offline then Hac_Pref.c_Device_Status_Offline --
    when Hac_Pref.c_Hik_Device_Status_Online then Hac_Pref.c_Device_Status_Online --
    when Hac_Pref.c_Hik_Device_Status_Unknown then Hac_Pref.c_Device_Status_Unknown -- 
    else Hac_Pref.c_Device_Status_Unknown --
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Map_Dss_Device_Status(i_Dss_Device_Status number) return varchar2 is
  begin
    return --
    case i_Dss_Device_Status --
    when Hac_Pref.c_Dss_Device_Status_Offline then Hac_Pref.c_Device_Status_Offline --
    when Hac_Pref.c_Dss_Device_Status_Online then Hac_Pref.c_Device_Status_Online --
    else Hac_Pref.c_Device_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Hikvision door states
  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Remain_Open return varchar2 is
  begin
    return t('hik_door_state:remain open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Closed return varchar2 is
  begin
    return t('hik_door_state:closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Open return varchar2 is
  begin
    return t('hik_door_state:open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Remain_Closed return varchar2 is
  begin
    return t('hik_door_state:remain closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State_Offline return varchar2 is
  begin
    return t('hik_door_state:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Hik_Door_State(i_Door_State varchar2) return varchar2 is
  begin
    return --
    case i_Door_State --
    when Hac_Pref.c_Hik_Door_State_Remain_Open then t_Hik_Door_State_Remain_Open --
    when Hac_Pref.c_Hik_Door_State_Closed then t_Hik_Door_State_Closed --
    when Hac_Pref.c_Hik_Door_State_Open then t_Hik_Door_State_Open -- 
    when Hac_Pref.c_Hik_Door_State_Remain_Closed then t_Hik_Door_State_Remain_Closed --
    when Hac_Pref.c_Hik_Door_State_Offline then t_Hik_Door_State_Offline -- 
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hac_Pref.c_Device_Status_Offline, --
                                          Hac_Pref.c_Device_Status_Online,
                                          Hac_Pref.c_Device_Status_Unknown),
                           Array_Varchar2(t_Device_Status_Offline, --
                                          t_Device_Status_Online,
                                          t_Device_Status_Unknown));
  end;

  ----------------------------------------------------------------------------------------------------
  -- device attach kinds
  ---------------------------------------------------------------------------------------------------- 
  Function t_Device_Attach_Primary return varchar2 is
  begin
    return t('device_attach:primary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Secondary return varchar2 is
  begin
    return t('device_attach:secondary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Attach_Kind(i_Attach_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Attach_Kind --
    when Hac_Pref.c_Device_Attach_Primary then t_Device_Attach_Primary --
    when Hac_Pref.c_Device_Attach_Secondary then t_Device_Attach_Secondary --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Attach_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hac_Pref.c_Device_Attach_Primary, --
                                          Hac_Pref.c_Device_Attach_Secondary),
                           Array_Varchar2(t_Device_Attach_Primary, --
                                          t_Device_Attach_Secondary));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Combined_Event_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2('196893' || Hac_Pref.c_Event_Type_Delimiter || '198914',
                                          t('face or card')));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Combined_Event_Type
  (
    i_Event_Types_Codes Array_Varchar2,
    i_Event_Type_Names  Array_Varchar2
  ) return varchar2 is
    v_Event_Type_Code varchar2(500) := Fazo.Gather(i_Event_Types_Codes,
                                                   Hac_Pref.c_Event_Type_Delimiter);
    v_Static_Types    Matrix_Varchar2 := Combined_Event_Types;
  begin
    if i_Event_Type_Names.Count = 1 then
      return i_Event_Type_Names(1);
    end if;
  
    for i in 1 .. v_Static_Types.Count
    loop
      if v_Event_Type_Code = v_Static_Types(i) (1) then
        return v_Static_Types(i)(2);
      end if;
    end loop;
  
    return Fazo.Gather(i_Event_Type_Names, ' / ');
  end;

  ----------------------------------------------------------------------------------------------------
  -- person auth types
  ---------------------------------------------------------------------------------------------------- 
  Function t_Person_Auth_Person_Code return varchar2 is
  begin
    return t('person_auth:person code');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Auth_External_Code return varchar2 is
  begin
    return t('person_auth:external code');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Auth_Pin return varchar2 is
  begin
    return t('person_auth:pin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Auth_Type(i_Auth_Type varchar2) return varchar2 is
  begin
    return --
    case i_Auth_Type --
    when Hac_Pref.c_Person_Auth_Type_Person_Code then t_Person_Auth_Person_Code --
    when Hac_Pref.c_Person_Auth_Type_External_Code then t_Person_Auth_External_Code --
    when Hac_Pref.c_Person_Auth_Type_Pin then t_Person_Auth_Pin --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Auth_Types(i_Include_Person_Code boolean := false) return Matrix_Varchar2 is
    v_Codes Array_Varchar2 := Array_Varchar2(Hac_Pref.c_Person_Auth_Type_External_Code, --
                                             Hac_Pref.c_Person_Auth_Type_Pin);
    v_Names Array_Varchar2 := Array_Varchar2(t_Person_Auth_External_Code, --
                                             t_Person_Auth_Pin);
  begin
    if i_Include_Person_Code then
      Fazo.Push(v_Codes, Hac_Pref.c_Person_Auth_Type_Person_Code);
      Fazo.Push(v_Names, t_Person_Auth_Person_Code);
    end if;
  
    return Matrix_Varchar2(v_Codes, v_Names);
  end;

end Hac_Util;
/

create or replace package Hes_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Face_Register_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Face_Register_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Request_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Request_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Schedule_Change_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Track_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Track_Settings_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Gps_Tracking_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Gps_Tracking_Settings_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timepad_Track_Settings_Save
  (
    i_Company_Id number,
    i_Settings   Hes_Pref.Timepad_Track_Settings_Rt
  );

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Days_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Change_Day_Limit_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Settings_Save
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Staff_Track_Settings  Hes_Pref.Staff_Track_Settings_Rt,
    i_Gps_Tracking_Settings Hes_Pref.Staff_Gps_Tracking_Settings_Rt,
    i_Face_Register         Hes_Pref.Staff_Face_Register_Rt,
    i_Request_Settings      Hes_Pref.Staff_Request_Manager_Approval_Rt,
    i_Change_Settings       Hes_Pref.Staff_Change_Manager_Approval_Rt,
    i_Change_Day_Limit      Hes_Pref.Change_Day_Limit_Rt
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Billz_Credential_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Subject_Name varchar2,
    i_Secret_Key   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Build_Billz_Runtime_Service
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Date_Begin date,
    i_Date_End   date
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Billz_Sales_Response_Handler(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_State_Token(i_Session Hes_Oauth2_Session_States%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Oauth2_Credentials(i_Credentials Hes_Oauth2_Credentials%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Oauth2_Credentials
  (
    i_Company_Id  number,
    i_Provider_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Use_Task_Manager_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
end Hes_Api;
/
create or replace package body Hes_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HES:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Face_Register_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Face_Register_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Face_Register);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Face_Register,
                               i_Setting_Value => Nvl(i_Settings.Face_Register, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Face_Register,
                             i_Value      => i_Settings.Face_Register);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Request_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Request_Manager_Approval);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                               i_Setting_Value => Nvl(i_Settings.Request_Settings, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                             i_Value      => i_Settings.Request_Settings);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Request_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Request_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Enable_Request);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Request,
                               i_Setting_Value => Nvl(i_Settings.Enable_Request, 'Y'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Enable_Request,
                             i_Value      => i_Settings.Enable_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Manager_Approval_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Manager_Approval);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                               i_Setting_Value => Nvl(i_Settings.Change_Settings, 'N'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                             i_Value      => i_Settings.Change_Settings);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Enable_Schedule_Change_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Change_Manager_Approval_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change);
      
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                               i_Setting_Value => Nvl(i_Settings.Enable_Schedule_Change, 'Y'));
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                             i_Value      => i_Settings.Enable_Schedule_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Track_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Track_Settings_Rt
  ) is
    v_User_Settings boolean := false;
  
    -------------------------------------------------
    Procedure Setting_Save
    (
      i_Code          varchar2,
      i_Value         varchar2,
      i_Default_Value varchar2 := null
    ) is
    begin
      if v_User_Settings then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => i_Code,
                                 i_Setting_Value => Nvl(i_Value, i_Default_Value));
      else
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => i_Code,
                               i_Value      => i_Value);
      end if;
    end;
  
    -------------------------------------------------
    Procedure Setting_Delete(i_Code varchar2) is
    begin
      Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => i_Code);
    end;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Input);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Output);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Type_Check);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Check_Location);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Potential);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Track_Start);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Determination);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Face_Recognition);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Emotion_Wink);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Emotion_Smile);
        return;
      end if;
    end if;
  
    if i_Settings.Gps_Determination = 'N' and i_Settings.Face_Recognition = 'N' then
      Hes_Error.Raise_001;
    end if;
  
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Input, i_Settings.Track_Type_Input, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Output, i_Settings.Track_Type_Output, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Type_Check, i_Settings.Track_Type_Check, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Check_Location, i_Settings.Track_Check_Location, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code, i_Settings.Track_By_Qr_Code, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Potential, i_Settings.Track_Potential, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Track_Start,
                 i_Settings.Track_Start,
                 Hes_Pref.c_Pref_Staff_Ts_Gps_Determination);
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Determination, i_Settings.Gps_Determination, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Face_Recognition, i_Settings.Face_Recognition, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track, i_Settings.Ignore_Invalid_Track, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Emotion_Wink, i_Settings.Emotion_Wink, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Emotion_Smile, i_Settings.Emotion_Smile, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Last_Track_Type, i_Settings.Last_Track_Type, 'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Gps_Tracking_Settings_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Staff_Gps_Tracking_Settings_Rt
  ) is
    v_User_Settings boolean := false;
    v_Data          Hashmap := Hashmap();
    v_Date          date := Trunc(sysdate);
    v_Old_Settings  Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
    -------------------------------------------------
    Procedure Setting_Save
    (
      i_Code          varchar2,
      i_Value         varchar2,
      i_Default_Value varchar2 := null
    ) is
    begin
      if v_User_Settings then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => i_Code,
                                 i_Setting_Value => Nvl(i_Value, i_Default_Value));
      else
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => i_Code,
                               i_Value      => i_Value);
      end if;
    end;
    -------------------------------------------------
    Procedure Setting_Delete(i_Code varchar2) is
    begin
      Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => i_Code);
    end;
    --------------------------------------------------           
    Procedure Notify_Gps_Tracking_Settings is
    begin
      if Fazo.Equal(v_Old_Settings.Enabled, i_Settings.Enabled) and
         Fazo.Equal(v_Old_Settings.Gps_Track_Collect_Enabled, i_Settings.Gps_Track_Collect_Enabled) and
         Fazo.Equal(v_Old_Settings.Auto_Output_Enabled, i_Settings.Auto_Output_Enabled) and
         Fazo.Equal(v_Old_Settings.Distance, i_Settings.Distance) and
         Fazo.Equal(v_Old_Settings.Interval, i_Settings.Interval) or
         (Fazo.Equal(v_Old_Settings.Enabled, i_Settings.Enabled) and v_Old_Settings.Enabled = 'N') then
        return;
      end if;
    
      v_Data := Fazo.Zip_Map('notify_type', Hes_Pref.c_Pref_Nt_Gps_Tracking_Change);
    
      if i_User_Id is not null and
         Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                 i_User_Id      => i_User_Id,
                                 i_Setting_Code => Hes_Pref.c_Pref_Nt_Gps_Tracking_Change) then
        Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                    i_User_Id    => i_User_Id,
                    i_Data       => v_Data);
      else
        for r in (select q.Employee_Id
                    from Href_Staffs q
                   where q.Company_Id = i_Company_Id
                     and q.Filial_Id = i_Filial_Id
                     and q.Hiring_Date <= v_Date
                     and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)
                     and q.State = 'A'
                   group by q.Employee_Id)
        loop
          continue when not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                                    i_User_Id      => r.Employee_Id,
                                                    i_Setting_Code => Hes_Pref.c_Pref_Nt_Gps_Tracking_Change) or --
          Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => r.Employee_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Setting_Code => Hes_Pref.c_Pref_Staff_Gps_Tracking) is not null;
        
          Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                      i_User_Id    => r.Employee_Id,
                      i_Data       => v_Data);
        end loop;
      end if;
    end;
  begin
    v_Old_Settings := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_User_Id    => i_User_Id);
  
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance);
        Setting_Delete(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval);
        return;
      end if;
    end if;
  
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking, i_Settings.Enabled, 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect,
                 i_Settings.Gps_Track_Collect_Enabled,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output,
                 i_Settings.Auto_Output_Enabled,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout,
                 i_Settings.Disable_Auto_Checkout,
                 'N');
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance,
                 Greatest(i_Settings.Distance, Hes_Pref.c_Staff_Gps_Tracking_Distance_Min),
                 Hes_Pref.c_Staff_Gps_Tracking_Distance_Min);
    Setting_Save(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval,
                 Greatest(i_Settings.Interval, Hes_Pref.c_Staff_Gps_Tracking_Interval_Min),
                 Hes_Pref.c_Staff_Gps_Tracking_Interval_Min);
  
    Notify_Gps_Tracking_Settings;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timepad_Track_Settings_Save
  (
    i_Company_Id number,
    i_Settings   Hes_Pref.Timepad_Track_Settings_Rt
  ) is
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
  
    --------------------------------------------------
    Procedure Setting_Save
    (
      i_Code  varchar2,
      i_Value varchar2
    ) is
    begin
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => v_Filial_Head,
                             i_Code       => i_Code,
                             i_Value      => i_Value);
    end;
  begin
    if i_Settings.Qr_Code_Limit_Time < 1440 then
      Setting_Save(i_Code  => Hes_Pref.c_Timepad_Qr_Code_Limit_Time,
                   i_Value => i_Settings.Qr_Code_Limit_Time);
    else
      Hes_Error.Raise_002;
    end if;
  
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Track_Types, i_Value => i_Settings.Track_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Mark_Types, i_Value => i_Settings.Mark_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Emotion_Types, i_Value => i_Settings.Emotion_Types);
    Setting_Save(i_Code => Hes_Pref.c_Timepad_Lang_Code, i_Value => i_Settings.Lang_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Change_Days_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null,
    i_Settings   Hes_Pref.Change_Day_Limit_Rt
  ) is
    v_User_Settings boolean := false;
  begin
    if i_User_Id is not null then
      v_User_Settings := Nvl(i_Settings.User_Settings, 'N') = 'Y';
    
      if not v_User_Settings then
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days);
      
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_With_Monthly_Limit);
      
        Md_Api.User_Settings_Delete(i_Company_Id   => i_Company_Id,
                                    i_User_Id      => i_User_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Monthly_Limit);
        return;
      end if;
    end if;
  
    if v_User_Settings then
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                               i_Setting_Value => Nvl(i_Settings.Change_With_Restriction_Days, 'N'));
    
      if i_Settings.Change_With_Restriction_Days = 'Y' then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Restriction_Days,
                                 i_Setting_Value => i_Settings.Change_Restriction_Days);
      end if;
    
      Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                               i_User_Id       => i_User_Id,
                               i_Filial_Id     => i_Filial_Id,
                               i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Monthly_Limit,
                               i_Setting_Value => Nvl(i_Settings.Change_With_Monthly_Limit, 'N'));
    
      if i_Settings.Change_With_Monthly_Limit = 'Y' then
        Md_Api.User_Setting_Save(i_Company_Id    => i_Company_Id,
                                 i_User_Id       => i_User_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Monthly_Limit,
                                 i_Setting_Value => i_Settings.Change_Monthly_Limit);
      end if;
    else
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                             i_Value      => Nvl(i_Settings.Change_With_Restriction_Days, 'N'));
    
      if i_Settings.Change_With_Restriction_Days = 'Y' then
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => Hes_Pref.c_Pref_Staff_Change_Restriction_Days,
                               i_Value      => i_Settings.Change_Restriction_Days);
      end if;
    
      Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Code       => Hes_Pref.c_Pref_Staff_Change_With_Monthly_Limit,
                             i_Value      => Nvl(i_Settings.Change_With_Monthly_Limit, 'N'));
    
      if i_Settings.Change_With_Monthly_Limit = 'Y' then
        Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Code       => Hes_Pref.c_Pref_Staff_Change_Monthly_Limit,
                               i_Value      => i_Settings.Change_Monthly_Limit);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Settings_Save
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Staff_Track_Settings  Hes_Pref.Staff_Track_Settings_Rt,
    i_Gps_Tracking_Settings Hes_Pref.Staff_Gps_Tracking_Settings_Rt,
    i_Face_Register         Hes_Pref.Staff_Face_Register_Rt,
    i_Request_Settings      Hes_Pref.Staff_Request_Manager_Approval_Rt,
    i_Change_Settings       Hes_Pref.Staff_Change_Manager_Approval_Rt,
    i_Change_Day_Limit      Hes_Pref.Change_Day_Limit_Rt
  ) is
  begin
    Staff_Track_Settings_Save(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Settings   => i_Staff_Track_Settings);
  
    Staff_Gps_Tracking_Settings_Save(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Settings   => i_Gps_Tracking_Settings);
  
    Staff_Face_Register_Save(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Settings   => i_Face_Register);
  
    Staff_Request_Manager_Approval_Save(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Settings   => i_Request_Settings);
  
    Staff_Enable_Request_Save(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Settings   => i_Request_Settings);
  
    Staff_Change_Manager_Approval_Save(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Settings   => i_Change_Settings);
  
    Staff_Enable_Schedule_Change_Save(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Settings   => i_Change_Settings);
  
    Staff_Change_Days_Limit_Save(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Settings   => i_Change_Day_Limit);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Billz_Credential_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Subject_Name varchar2,
    i_Secret_Key   varchar2
  ) is
  begin
    if i_Subject_Name is null then
      Hes_Error.Raise_003;
    end if;
  
    if i_Secret_Key is null then
      Hes_Error.Raise_004;
    end if;
  
    z_Hes_Billz_Credentials.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Subject_Name => i_Subject_Name,
                                     i_Secret_Key   => i_Secret_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  -- builds and returns a runtime service for Billz's 'reports.sales' API
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Billz_Runtime_Service
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Date_Begin date,
    i_Date_End   date
  ) return Runtime_Service is
    v_Service           Runtime_Service;
    v_Details           Hashmap := Hashmap();
    v_Headers           Hashmap := Hashmap();
    r_Credential        Hes_Billz_Credentials%rowtype;
    c_Max_Days_In_Month number := 31;
  begin
    if not z_Hes_Billz_Credentials.Exist(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         o_Row        => r_Credential) then
      Hes_Error.Raise_005;
    else
      if r_Credential.Subject_Name is null then
        Hes_Error.Raise_003;
      end if;
    
      if r_Credential.Secret_Key is null then
        Hes_Error.Raise_004;
      end if;
    end if;
  
    if i_Date_End - i_Date_Begin + 1 > c_Max_Days_In_Month then
      Hes_Error.Raise_006(c_Max_Days_In_Month);
    end if;
  
    v_Headers := Fazo.Zip_Map('User-Agent', Hes_Pref.c_Default_User_Agent_Header);
  
    v_Details.Put('url', Hes_Pref.c_Billz_Api_Url);
    v_Details.Put('method', Hes_Pref.c_Billz_Api_Reports_Sales_Method);
    v_Details.Put('id', Hes_Pref.c_Billz_Api_Reports_Sales_Id);
    v_Details.Put('subject', r_Credential.Subject_Name);
    v_Details.Put('secret_key', r_Credential.Secret_Key);
    v_Details.Put('date_begin', to_char(i_Date_Begin, 'YYYY-MM-DD') || 'T00:00:00Z');
    v_Details.Put('date_end', to_char(i_Date_End, 'YYYY-MM-DD') || 'T00:00:00Z');
    v_Details.Put('currency', Hes_Pref.c_Billz_Api_Currency_Uzs);
    v_Details.Put('headers', v_Headers);
  
    v_Service := Runtime_Service(Hes_Pref.c_Billz_Api_Service_Name);
    v_Service.Set_Detail(v_Details);
  
    v_Service.Set_Response_Procedure(Response_Procedure => 'hes_api.billz_sales_response_handler',
                                     Action_In          => Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2);
  
    Hes_Core.Sale_Dates_Lock(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Date_Begin => i_Date_Begin,
                             i_Date_End   => i_Date_End);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Billz_Sales_Response_Handler(i_Val Array_Varchar2) is
    v_Company_Id  number := Md_Env.Company_Id;
    v_Filial_Id   number := Md_Env.Filial_Id;
    v_Data        Gmap;
    v_Result      Gmap;
    v_Error       Gmap;
    v_Sales_List  Glist;
    v_Sale        Gmap;
    v_Office_Id   number;
    v_Office_Name Hes_Billz_Consolidated_Sales.Billz_Office_Name%type;
    v_Seller_Id   number;
    v_Seller_Name Hes_Billz_Consolidated_Sales.Billz_Seller_Name%type;
    v_Sale_Date   date;
    v_Sale_Amount number;
    v_Date_Begin  date;
    v_Date_End    date;
  
    -------------------------------------------------- 
    -- i_Raw_Date has the following format: 'YYYY-MM-DD"T"HH:MI:SS"Z"'
    Function Parse_Date(i_Raw_Date varchar2) return date is
    begin
      return to_date(Substr(i_Raw_Date, 0, 10), 'YYYY-MM-DD');
    end;
  begin
    v_Data := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
  
    if v_Data.Has('result') then
      v_Result     := v_Data.o_Gmap('result');
      v_Date_Begin := Parse_Date(v_Result.r_Varchar2('dateBegin'));
      v_Date_End   := Parse_Date(v_Result.r_Varchar2('dateEnd'));
      v_Sales_List := Nvl(v_Result.o_Glist('report'), Glist());
    
      for i in 0 .. v_Sales_List.Count - 1
      loop
        v_Sale := Gmap(Json_Object_t(v_Sales_List.Val.Get(i)));
      
        v_Office_Id   := v_Sale.r_Number('officeID');
        v_Office_Name := v_Sale.r_Varchar2('office');
        v_Seller_Id   := v_Sale.r_Number('sellerId');
      
        -- Billz api has a typo in key 'sellerFullName', as of 16.03.2023 it is 'sellerFullname'. Expected to be corrected
        begin
          v_Seller_Name := v_Sale.r_Varchar2('sellerFullName');
        exception
          when others then
            v_Seller_Name := v_Sale.r_Varchar2('sellerFullname');
        end;
      
        v_Sale_Date   := Trunc(v_Sale.r_Date('saleDate', 'YYYY.MM.DD HH24.MI.SS'));
        v_Sale_Amount := v_Sale.r_Number('salePrice');
      
        -- insert the needed field values from the response into temporary table
        insert into Hes_Billz_Raw_Sales
          (Company_Id,
           Filial_Id,
           Billz_Office_Id,
           Billz_Office_Name,
           Billz_Seller_Id,
           Billz_Seller_Name,
           Sale_Date,
           Sale_Amount)
        values
          (v_Company_Id,
           v_Filial_Id,
           v_Office_Id,
           v_Office_Name,
           v_Seller_Id,
           v_Seller_Name,
           v_Sale_Date,
           v_Sale_Amount);
      end loop;
    
      -- clean the records in the table for period requested
      delete from Hes_Billz_Consolidated_Sales t
       where t.Company_Id = v_Company_Id
         and t.Filial_Id = v_Filial_Id
         and t.Sale_Date between v_Date_Begin and v_Date_End;
    
      -- fill data in the consolidated table computing daily sale amounts for each seller
      insert into Hes_Billz_Consolidated_Sales
        (Company_Id,
         Filial_Id,
         Sale_Id,
         Billz_Office_Id,
         Billz_Office_Name,
         Billz_Seller_Id,
         Billz_Seller_Name,
         Sale_Date,
         Sale_Amount)
        select Company_Id,
               Filial_Id,
               Hes_Next.Sale_Id,
               Billz_Office_Id,
               Billz_Office_Name,
               Billz_Seller_Id,
               Billz_Seller_Name,
               Sale_Date,
               sum(Sale_Amount)
          from Hes_Billz_Raw_Sales t
         where t.Company_Id = v_Company_Id
           and t.Filial_Id = v_Filial_Id
         group by Company_Id,
                  Filial_Id,
                  Billz_Office_Id,
                  Billz_Office_Name,
                  Billz_Seller_Id,
                  Billz_Seller_Name,
                  Sale_Date;
    elsif v_Data.Has('error') then
      v_Error := v_Data.r_Gmap('error');
    
      Hes_Error.Raise_007(i_Error_Code    => v_Error.o_Varchar2('code'),
                          i_Error_Message => v_Error.o_Varchar2('message'));
    else
      Hes_Error.Raise_008;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_State_Token(i_Session Hes_Oauth2_Session_States%rowtype) is
  begin
    z_Hes_Oauth2_Session_States.Save_Row(i_Session);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Oauth2_Credentials(i_Credentials Hes_Oauth2_Credentials%rowtype) is
  begin
    z_Hes_Oauth2_Credentials.Save_Row(i_Credentials);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Oauth2_Credentials
  (
    i_Company_Id  number,
    i_Provider_Id number
  ) is
  begin
    z_Hes_Oauth2_Credentials.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Provider_Id => i_Provider_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Use_Task_Manager_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1) := 'Y';
  begin
    if i_Value <> 'Y' then
      v_Value := 'N';
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hes_Pref.c_Pref_Staff_Use_Task_Manager,
                           i_Value      => v_Value);
  end;

end Hes_Api;
/

create or replace package Hes_Pref is
  ----------------------------------------------------------------------------------------------------
  type Staff_Track_Settings_Rt is record(
    Vision_Server_Id     number,
    User_Settings        varchar2(1),
    Track_Type_Input     varchar2(1),
    Track_Type_Output    varchar2(1),
    Track_Type_Check     varchar2(1),
    Track_Check_Location varchar2(1),
    Track_By_Qr_Code     varchar2(1),
    Track_Potential      varchar2(1),
    Track_Start          varchar2(1),
    Gps_Determination    varchar2(1),
    Face_Recognition     varchar2(1),
    Ignore_Invalid_Track varchar2(1),
    Emotion_Wink         varchar2(1),
    Emotion_Smile        varchar2(1),
    Last_Track_Type      varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Timepad_Track_Settings_Rt is record(
    Qr_Code_Limit_Time number,
    Track_Types        varchar2(50),
    Mark_Types         varchar2(50),
    Emotion_Types      varchar2(50),
    Lang_Code          varchar2(10));
  ----------------------------------------------------------------------------------------------------  
  type Staff_Gps_Tracking_Settings_Rt is record(
    User_Settings             varchar2(1),
    Enabled                   varchar2(1),
    Gps_Track_Collect_Enabled varchar2(1),
    Auto_Output_Enabled       varchar2(1),
    Disable_Auto_Checkout     varchar2(1),
    Distance                  number,
    interval                  number);
  ----------------------------------------------------------------------------------------------------
  type Staff_Face_Register_Rt is record(
    User_Settings varchar2(1),
    Face_Register varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Staff_Request_Manager_Approval_Rt is record(
    User_Settings    varchar2(1),
    Request_Settings varchar2(1),
    Enable_Request   varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Staff_Change_Manager_Approval_Rt is record(
    User_Settings          varchar2(1),
    Change_Settings        varchar2(1),
    Enable_Schedule_Change varchar2(1));
  ----------------------------------------------------------------------------------------------------  
  type Staff_Notify_Settings_Rt is record(
    Calendar_Day_Change          varchar2(1),
    Late_Time                    varchar2(1),
    Early_Time                   varchar2(1),
    Request                      varchar2(1),
    Request_Change_Status        varchar2(1),
    Request_Manager_Approval     varchar2(1),
    Plan_Change                  varchar2(1),
    Plan_Change_Status_Change    varchar2(1),
    Plan_Change_Manager_Approval varchar2(1),
    Gps_Tracking_Change          varchar2(1));
  ----------------------------------------------------------------------------------------------------
  -- change day limit
  ----------------------------------------------------------------------------------------------------
  type Change_Day_Limit_Rt is record(
    User_Settings                varchar2(1),
    Change_With_Restriction_Days varchar2(1),
    Change_Restriction_Days      number,
    Change_With_Monthly_Limit    varchar2(1),
    Change_Monthly_Limit         number);
  ----------------------------------------------------------------------------------------------------
  c_Staff_Form_Name constant varchar2(50) := '/vhr/hes/staff';
  ----------------------------------------------------------------------------------------------------
  -- notification settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Nt_Calendar_Day_Change          constant varchar2(50) := 'hes:nt:calendar_day_change';
  c_Pref_Nt_Late_Time                    constant varchar2(50) := 'hes:nt:late_time';
  c_Pref_Nt_Early_Time                   constant varchar2(50) := 'hes:nt:early_time';
  c_Pref_Nt_Request                      constant varchar2(50) := 'hes:nt:request';
  c_Pref_Nt_Request_Change_Status        constant varchar2(50) := 'hes:nt:request_change_status';
  c_Pref_Nt_Request_Manager_Approval     constant varchar2(50) := 'hes:nt:request_manager_approval';
  c_Pref_Nt_Plan_Change                  constant varchar2(50) := 'hes:nt:plan_change';
  c_Pref_Nt_Plan_Change_Status_Change    constant varchar2(50) := 'hes:nt:plan_change_status_change';
  c_Pref_Nt_Plan_Change_Manager_Approval constant varchar2(50) := 'hes:nt:plan_change_manager_approval';
  c_Pref_Nt_Gps_Tracking_Change          constant varchar2(50) := 'hes:nt:gps_tracking_change';
  ----------------------------------------------------------------------------------------------------
  c_Timepad_Qr_Code_Limit_Time constant varchar2(50) := 'hes:timepad:qr_code_limit_time';
  c_Timepad_Track_Types        constant varchar2(50) := 'hes:timepad:track_types';
  c_Timepad_Mark_Types         constant varchar2(50) := 'hes:timepad:mark_types';
  c_Timepad_Emotion_Types      constant varchar2(50) := 'hes:timepad:emotion_types';
  c_Timepad_Lang_Code          constant varchar2(50) := 'hes:timepad:lang_code';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Track_Type_Input     constant varchar2(50) := 'hes:staff:track_type_input';
  c_Pref_Staff_Track_Type_Output    constant varchar2(50) := 'hes:staff:track_type_output';
  c_Pref_Staff_Track_Type_Check     constant varchar2(50) := 'hes:staff:track_type_check';
  c_Pref_Staff_Track_Check_Location constant varchar2(50) := 'hes:staff:track_check_location';
  c_Pref_Staff_Track_By_Qr_Code     constant varchar2(50) := 'hes:staff:track_by_qr_code';
  c_Pref_Staff_Track_Potential      constant varchar2(50) := 'hes:staff:track_potential';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Track_Start                  constant varchar2(50) := 'hes:staff:track_start';
  c_Pref_Staff_Gps_Determination            constant varchar2(50) := 'hes:staff:gps_determination';
  c_Pref_Staff_Face_Recognition             constant varchar2(50) := 'hes:staff:face_recognition';
  c_Pref_Staff_Emotion_Wink                 constant varchar2(50) := 'hes:staff:emotion_wink';
  c_Pref_Staff_Emotion_Smile                constant varchar2(50) := 'hes:staff:emotion_smile';
  c_Pref_Staff_Face_Register                constant varchar2(50) := 'hes:staff:face_register';
  c_Pref_Staff_Ignore_Invalid_Track         constant varchar2(50) := 'hes:staff:ignore_invalid_track';
  c_Pref_Staff_Request_Manager_Approval     constant varchar2(50) := 'hes:staff:request_manager_approval';
  c_Pref_Staff_Enable_Request               constant varchar2(50) := 'hes:staff:enable_request';
  c_Pref_Staff_Change_Manager_Approval      constant varchar2(50) := 'hes:staff:change_manager_approval';
  c_Pref_Staff_Enable_Schedule_Change       constant varchar2(50) := 'hes:staff:enable_schedule_change';
  c_Pref_Staff_Last_Track_Type              constant varchar2(50) := 'hes:staff:last_track_type';
  c_Pref_Staff_Change_With_Restriction_Days constant varchar2(50) := 'hes:staff:change_with_restriction_days';
  c_Pref_Staff_Change_Restriction_Days      constant varchar2(50) := 'hes:staff:change_restriction_days';
  c_Pref_Staff_Change_With_Monthly_Limit    constant varchar2(50) := 'hes:staff:change_with_monthly_limit';
  c_Pref_Staff_Change_Monthly_Limit         constant varchar2(50) := 'hes:staff:change_monthly_limit';
  c_Pref_Staff_Use_Task_Manager             constant varchar2(50) := 'hes:staff:use_task_manager';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Gps_Tracking                   constant varchar2(50) := 'hes:staff:gps_tracking';
  c_Pref_Staff_Gps_Tracking_Gps_Track_Collect constant varchar2(50) := 'hes:staff:gps_tracking_gps_track_collect';
  c_Pref_Staff_Gps_Tracking_Auto_Output       constant varchar2(50) := 'hes:staff:gps_tracking_auto_output';
  c_Pref_Staff_Disable_Auto_Checkout          constant varchar2(50) := 'hes:staff:disable_auto_checkout';
  c_Pref_Staff_Gps_Tracking_Distance          constant varchar2(50) := 'hes:staff:gps_tracking_distance';
  c_Pref_Staff_Gps_Tracking_Interval          constant varchar2(50) := 'hes:staff:gps_tracking_interval';
  ----------------------------------------------------------------------------------------------------
  c_Pref_Staff_Ts_Gps_Determination constant varchar2(1) := 'G';
  c_Pref_Staff_Ts_Face_Recognition  constant varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- bu constant faqat Apple iOSga ma'lumot yuborib aldash uchun chiqarilgan
  -- boshqa logic ahamiyati yo'q
  ----------------------------------------------------------------------------------------------------
  c_Pref_Biometric_Recognition_Enabled constant varchar2(50) := 'hes:staff:biometric_recognition_enabled';
  ----------------------------------------------------------------------------------------------------
  -- gps tracking min values
  ----------------------------------------------------------------------------------------------------
  c_Staff_Gps_Tracking_Distance_Min constant number := 1;
  c_Staff_Gps_Tracking_Interval_Min constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kinds
  ----------------------------------------------------------------------------------------------------
  c_Gps_Tracking_Qualty_Kind_High   constant varchar2(1) := 'H';
  c_Gps_Tracking_Qualty_Kind_Medium constant varchar2(1) := 'M';
  c_Gps_Tracking_Qualty_Kind_Low    constant varchar2(1) := 'L';
  c_Gps_Tracking_Qualty_Kind_Custom constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kind values
  ----------------------------------------------------------------------------------------------------
  c_Gps_Tracking_Qualty_Kind_High_Distance constant number := 1;
  c_Gps_Tracking_Qualty_Kind_High_Interval constant number := 1;

  c_Gps_Tracking_Qualty_Kind_Medium_Distance constant number := 5;
  c_Gps_Tracking_Qualty_Kind_Medium_Interval constant number := 5;

  c_Gps_Tracking_Qualty_Kind_Low_Distance constant number := 10;
  c_Gps_Tracking_Qualty_Kind_Low_Interval constant number := 10;
  ---------------------------------------------------------------------------------------------------- 
  -- Billz integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Billz_Api_Url                  varchar2(100) := 'https://api.billz.io/v2/';
  c_Billz_Api_Reports_Sales_Method varchar2(100) := 'reports.sales';
  c_Billz_Api_Reports_Sales_Id     varchar2(100) := '1200';
  c_Billz_Api_Currency_Uzs         varchar2(100) := 'UZS';
  c_Billz_Api_Service_Name         varchar2(100) := 'com.verifix.vhr.BillzRuntimeService';
  ----------------------------------------------------------------------------------------------------
  c_Default_User_Agent_Header varchar2(100) := 'verifix';
  ----------------------------------------------------------------------------------------------------
  -- key for notification uri
  ----------------------------------------------------------------------------------------------------
  c_Key_Uri_Request constant varchar2(50) := 'hes:staff:request';
  c_Key_Uri_Change  constant varchar2(50) := 'hes:staff:change';
  ----------------------------------------------------------------------------------------------------
  -- OAuth2 provider ids
  ----------------------------------------------------------------------------------------------------
  c_Provider_Hh_Id  constant number := 1;
  c_Provider_Olx_Id constant number := 2;
end Hes_Pref;
/
create or replace package body Hes_Pref is
end Hes_Pref;
/

create or replace package Hes_Util is
  ---------------------------------------------------------------------------------------------------
  Function Get_Lang_Code(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Get_Timepad_User_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Qr_Code_Limit_Time(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  -- bu funksiya faqat Apple iOSga ma'lumot yuborib aldash uchun chiqarilgan
  -- boshqa logic ahamiyati yo'q
  Function Biometric_Recognition_Enabled
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Task_Manager(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Staff_Track_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Track_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Face_Register_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Face_Register_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Request_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Request_Manager_Approval_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Change_Manager_Approval_Rt;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Day_Limit_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Change_Day_Limit_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Timepad_Track_Settings(i_Company_Id number) return Hes_Pref.Timepad_Track_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Gps_Tracking_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Notify_Settings
  (
    i_Company_Id number,
    i_User_Id    number
  ) return Hes_Pref.Staff_Notify_Settings_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Enabled_Notify
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Setting_Code varchar2
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Gen_State_Token
  (
    i_Company_Id number,
    i_Session_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind(i_Gps_Tracking_Qualty_Kind varchar2) return varchar2;
  Function Gps_Tracking_Qualty_Kinds return Matrix_Varchar2;
  Function Gps_Tracking_Qualty_Kind
  (
    i_Distance number,
    i_Interval number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Notification_Uri_Key(i_Uri varchar2) return varchar2;
end Hes_Util;
/
create or replace package body Hes_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HES:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Lang_Code(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hes_Pref.c_Timepad_Lang_Code),
               z_Md_Companies.Load(i_Company_Id).Lang_Code);
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Get_Timepad_User_Id(i_Company_Id number) return number is
  begin
    return z_Href_Timepad_Users.Load(i_Company_Id).User_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Qr_Code_Limit_Time(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hes_Pref.c_Timepad_Qr_Code_Limit_Time),
               10);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Nvl_Pref_Load
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Code          varchar2,
    i_Default_Value varchar2
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => i_Code),
               i_Default_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Biometric_Recognition_Enabled
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                         i_Filial_Id     => i_Filial_Id,
                         i_Code          => Hes_Pref.c_Pref_Biometric_Recognition_Enabled,
                         i_Default_Value => 'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Task_Manager(i_Company_Id number) return varchar2 is
  begin
    return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                         i_Filial_Id     => Md_Pref.Filial_Head(i_Company_Id),
                         i_Code          => Hes_Pref.c_Pref_Staff_Use_Task_Manager,
                         i_Default_Value => 'N');
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Staff_Track_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Track_Settings_Rt is
    result Hes_Pref.Staff_Track_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load
    (
      i_Code          varchar2,
      i_Default_Value varchar2
    ) return varchar2 is
    begin
      if Result.User_Settings = 'Y' then
        return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                        i_User_Id       => i_User_Id,
                                        i_Filial_Id     => i_Filial_Id,
                                        i_Setting_Code  => i_Code,
                                        i_Default_Value => i_Default_Value);
      end if;
    
      return Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Code          => i_Code,
                           i_Default_Value => i_Default_Value);
    end;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Track_Type_Input) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    Result.Track_Type_Input     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Input, 'N');
    Result.Track_Type_Output    := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Output, 'N');
    Result.Track_Type_Check     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Type_Check, 'N');
    Result.Track_Check_Location := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Check_Location, 'N');
    Result.Track_By_Qr_Code     := Setting_Load(Hes_Pref.c_Pref_Staff_Track_By_Qr_Code, 'N');
    Result.Track_Potential      := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Potential, 'N');
    Result.Track_Start          := Setting_Load(Hes_Pref.c_Pref_Staff_Track_Start,
                                                Hes_Pref.c_Pref_Staff_Ts_Gps_Determination);
    Result.Gps_Determination    := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Determination, 'N');
    Result.Face_Recognition     := Setting_Load(Hes_Pref.c_Pref_Staff_Face_Recognition, 'N');
    Result.Ignore_Invalid_Track := Setting_Load(Hes_Pref.c_Pref_Staff_Ignore_Invalid_Track, 'N');
    Result.Emotion_Wink         := Setting_Load(Hes_Pref.c_Pref_Staff_Emotion_Wink, 'N');
    Result.Emotion_Smile        := Setting_Load(Hes_Pref.c_Pref_Staff_Emotion_Smile, 'N');
    Result.Last_Track_Type      := Setting_Load(Hes_Pref.c_Pref_Staff_Last_Track_Type, 'Y');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Face_Register_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Face_Register_Rt is
    result Hes_Pref.Staff_Face_Register_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Face_Register) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Face_Register := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                       i_User_Id       => i_User_Id,
                                                       i_Filial_Id     => i_Filial_Id,
                                                       i_Setting_Code  => Hes_Pref.c_Pref_Staff_Face_Register,
                                                       i_Default_Value => 'N');
    else
      Result.Face_Register := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                            i_Filial_Id     => i_Filial_Id,
                                            i_Code          => Hes_Pref.c_Pref_Staff_Face_Register,
                                            i_Default_Value => 'N');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Request_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Request_Manager_Approval_Rt is
    result Hes_Pref.Staff_Request_Manager_Approval_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Request_Manager_Approval) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Request_Settings := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                          i_User_Id       => i_User_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Setting_Code  => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                                                          i_Default_Value => 'N');
    
      Result.Enable_Request := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                        i_User_Id       => i_User_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Request,
                                                        i_Default_Value => 'Y');
    else
      Result.Request_Settings := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                               i_Filial_Id     => i_Filial_Id,
                                               i_Code          => Hes_Pref.c_Pref_Staff_Request_Manager_Approval,
                                               i_Default_Value => 'N');
    
      Result.Enable_Request := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Code          => Hes_Pref.c_Pref_Staff_Enable_Request,
                                             i_Default_Value => 'Y');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Manager_Approval_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Change_Manager_Approval_Rt is
    result Hes_Pref.Staff_Change_Manager_Approval_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Manager_Approval) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Change_Settings := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                         i_User_Id       => i_User_Id,
                                                         i_Filial_Id     => i_Filial_Id,
                                                         i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                                                         i_Default_Value => 'N');
    
      Result.Enable_Schedule_Change := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                                i_User_Id       => i_User_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Setting_Code  => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                                                                i_Default_Value => 'Y');
    else
      Result.Change_Settings := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                              i_Filial_Id     => i_Filial_Id,
                                              i_Code          => Hes_Pref.c_Pref_Staff_Change_Manager_Approval,
                                              i_Default_Value => 'N');
    
      Result.Enable_Schedule_Change := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                                     i_Filial_Id     => i_Filial_Id,
                                                     i_Code          => Hes_Pref.c_Pref_Staff_Enable_Schedule_Change,
                                                     i_Default_Value => 'Y');
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Change_Day_Limit_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Change_Day_Limit_Rt is
    result Hes_Pref.Change_Day_Limit_Rt;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    if Result.User_Settings = 'Y' then
      Result.Change_With_Restriction_Days := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                                      i_User_Id       => i_User_Id,
                                                                      i_Filial_Id     => i_Filial_Id,
                                                                      i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                                                                      i_Default_Value => 'N');
      if Result.Change_With_Restriction_Days = 'Y' then
        Result.Change_Restriction_Days := Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                                                   i_User_Id      => i_User_Id,
                                                                   i_Filial_Id    => i_Filial_Id,
                                                                   i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      end if;
    
      Result.Change_With_Monthly_Limit := Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                                                   i_User_Id       => i_User_Id,
                                                                   i_Filial_Id     => i_Filial_Id,
                                                                   i_Setting_Code  => Hes_Pref.c_Pref_Staff_Change_With_Monthly_Limit,
                                                                   i_Default_Value => 'N');
      if Result.Change_With_Monthly_Limit = 'Y' then
        Result.Change_Monthly_Limit := Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                                                i_User_Id      => i_User_Id,
                                                                i_Filial_Id    => i_Filial_Id,
                                                                i_Setting_Code => Hes_Pref.c_Pref_Staff_Change_Monthly_Limit);
      end if;
    else
      Result.Change_With_Restriction_Days := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                                           i_Filial_Id     => i_Filial_Id,
                                                           i_Code          => Hes_Pref.c_Pref_Staff_Change_With_Restriction_Days,
                                                           i_Default_Value => 'N');
    
      if Result.Change_With_Restriction_Days = 'Y' then
        Result.Change_Restriction_Days := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Code       => Hes_Pref.c_Pref_Staff_Change_Restriction_Days);
      end if;
    
      Result.Change_With_Monthly_Limit := Nvl_Pref_Load(i_Company_Id    => i_Company_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Code          => Hes_Pref.c_Pref_Staff_Change_With_Monthly_Limit,
                                                        i_Default_Value => 'N');
    
      if Result.Change_With_Monthly_Limit = 'Y' then
        Result.Change_Monthly_Limit := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Code       => Hes_Pref.c_Pref_Staff_Change_Monthly_Limit);
      end if;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timepad_Track_Settings(i_Company_Id number) return Hes_Pref.Timepad_Track_Settings_Rt is
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    result        Hes_Pref.Timepad_Track_Settings_Rt;
  begin
    Result.Qr_Code_Limit_Time := Get_Qr_Code_Limit_Time(i_Company_Id);
    Result.Track_Types        := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Track_Types);
    Result.Mark_Types         := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Mark_Types);
    Result.Emotion_Types      := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => v_Filial_Head,
                                              i_Code       => Hes_Pref.c_Timepad_Emotion_Types);
    Result.Lang_Code          := Get_Lang_Code(i_Company_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Gps_Tracking_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number := null
  ) return Hes_Pref.Staff_Gps_Tracking_Settings_Rt is
    result Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load
    (
      i_Code          varchar2,
      i_Default_Value varchar2
    ) return varchar2 is
    begin
      if i_User_Id is not null and Result.User_Settings = 'Y' then
        return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                        i_User_Id       => i_User_Id,
                                        i_Filial_Id     => i_Filial_Id,
                                        i_Setting_Code  => i_Code,
                                        i_Default_Value => i_Default_Value);
      end if;
    
      return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Code       => i_Code),
                 i_Default_Value);
    end;
  begin
    if i_User_Id is not null then
      if Md_Api.User_Setting_Load(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => i_User_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Setting_Code => Hes_Pref.c_Pref_Staff_Gps_Tracking) is not null then
        Result.User_Settings := 'Y';
      else
        Result.User_Settings := 'N';
      end if;
    end if;
  
    Result.Enabled                   := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking, 'N');
    Result.Gps_Track_Collect_Enabled := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Gps_Track_Collect,
                                                     'N');
    Result.Auto_Output_Enabled       := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Auto_Output,
                                                     'N');
    Result.Disable_Auto_Checkout     := Setting_Load(Hes_Pref.c_Pref_Staff_Disable_Auto_Checkout,
                                                     'N');
    Result.Distance                  := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Distance,
                                                     Hes_Pref.c_Staff_Gps_Tracking_Distance_Min);
    Result.Interval                  := Setting_Load(Hes_Pref.c_Pref_Staff_Gps_Tracking_Interval,
                                                     Hes_Pref.c_Staff_Gps_Tracking_Interval_Min);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Notify_Settings
  (
    i_Company_Id number,
    i_User_Id    number
  ) return Hes_Pref.Staff_Notify_Settings_Rt is
    v_Filial_Id number := Md_Pref.Filial_Head(i_Company_Id);
    result      Hes_Pref.Staff_Notify_Settings_Rt;
  
    -------------------------------------------------
    Function Setting_Load(i_Code varchar2) return varchar2 is
    begin
      return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                      i_User_Id       => i_User_Id,
                                      i_Filial_Id     => v_Filial_Id,
                                      i_Setting_Code  => i_Code,
                                      i_Default_Value => 'Y');
    end;
  begin
    Result.Calendar_Day_Change          := Setting_Load(Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
    Result.Late_Time                    := Setting_Load(Hes_Pref.c_Pref_Nt_Late_Time);
    Result.Early_Time                   := Setting_Load(Hes_Pref.c_Pref_Nt_Early_Time);
    Result.Request                      := Setting_Load(Hes_Pref.c_Pref_Nt_Request);
    Result.Request_Change_Status        := Setting_Load(Hes_Pref.c_Pref_Nt_Request_Change_Status);
    Result.Request_Manager_Approval     := Setting_Load(Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    Result.Plan_Change                  := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change);
    Result.Plan_Change_Status_Change    := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
    Result.Plan_Change_Manager_Approval := Setting_Load(Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    Result.Gps_Tracking_Change          := Setting_Load(Hes_Pref.c_Pref_Nt_Gps_Tracking_Change);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Enabled_Notify
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Setting_Code varchar2
  ) return boolean is
  begin
    return Md_Api.User_Setting_Load(i_Company_Id    => i_Company_Id,
                                    i_User_Id       => i_User_Id,
                                    i_Filial_Id     => Md_Pref.Filial_Head(i_Company_Id),
                                    i_Setting_Code  => i_Setting_Code,
                                    i_Default_Value => 'Y') = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gen_State_Token
  (
    i_Company_Id number,
    i_Session_Id number
  ) return varchar2 is
    v_Src raw(256) := Utl_Raw.Cast_To_Raw(i_Company_Id || '#' || i_Session_Id) ||
                      Dbms_Crypto.Randombytes(128);
  begin
    return Dbms_Crypto.Hash(Src => v_Src, Typ => Dbms_Crypto.Hash_Sh512);
  end;

  ----------------------------------------------------------------------------------------------------
  -- gps tracking qualty kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_High return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: high');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Medium return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: medium');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Low return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: low');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind_Custom return varchar2 is
  begin
    return t('gps_tracking_qualty_kind: custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gps_Tracking_Qualty_Kind(i_Gps_Tracking_Qualty_Kind varchar2) return varchar2 is
  begin
    return case i_Gps_Tracking_Qualty_Kind --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_High then t_Gps_Tracking_Qualty_Kind_High --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium then t_Gps_Tracking_Qualty_Kind_Medium --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low then t_Gps_Tracking_Qualty_Kind_Low --
    when Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom then t_Gps_Tracking_Qualty_Kind_Custom --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Tracking_Qualty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hes_Pref.c_Gps_Tracking_Qualty_Kind_High,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low,
                                          Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom),
                           Array_Varchar2(t_Gps_Tracking_Qualty_Kind_High,
                                          t_Gps_Tracking_Qualty_Kind_Medium,
                                          t_Gps_Tracking_Qualty_Kind_Low,
                                          t_Gps_Tracking_Qualty_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Tracking_Qualty_Kind
  (
    i_Distance number,
    i_Interval number
  ) return varchar2 is
    v_Kind varchar2(1);
  begin
    if i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_High_Distance and
       i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_High_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_High;
    elsif i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium_Distance and
          i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Medium;
    elsif i_Distance = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low_Distance and
          i_Interval = Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low_Interval then
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Low;
    else
      v_Kind := Hes_Pref.c_Gps_Tracking_Qualty_Kind_Custom;
    end if;
  
    return v_Kind;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Notification_Uri_Key(i_Uri varchar2) return varchar2 is
  begin
    return case i_Uri --
    when Htt_Pref.c_Form_Request_View then Hes_Pref.c_Key_Uri_Request --
    when Htt_Pref.c_Form_Change_View then Hes_Pref.c_Key_Uri_Change --
    else null end;
  end;

end Hes_Util;
/

create or replace package Hpd_Api is
  ----------------------------------------------------------------------------------------------------  
  Procedure Save_Journal_Sign_Document
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Document_Id number := null,
    i_Lang_Code   varchar2,
    i_Is_Draft    boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Save
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Journal_Id               number,
    i_Journal_Type_Id          number,
    i_Journal_Number           varchar2,
    i_Journal_Date             date,
    i_Journal_Name             varchar2,
    i_Source_Table             varchar2 := null,
    i_Source_Id                number := null,
    i_Lang_Code                varchar2 := null,
    i_Acceptable_Journal_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Repairing
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Save
  (
    i_Journal         Hpd_Pref.Hiring_Journal_Rt,
    i_Delay_Repairing boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Save
  (
    i_Journal         Hpd_Pref.Transfer_Journal_Rt,
    i_Delay_Repairing boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Save(i_Journal Hpd_Pref.Dismissal_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Save(i_Journal Hpd_Pref.Wage_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Save(i_Journal Hpd_Pref.Rank_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Save(i_Journal Hpd_Pref.Limit_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Save(i_Journal Hpd_Pref.Schedule_Change_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_Save(i_Journal Hpd_Pref.Sick_Leave_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_Save(i_Journal Hpd_Pref.Business_Trip_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_Save(i_Journal Hpd_Pref.Vacation_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_Save(i_Journal Hpd_Pref.Overtime_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_Save(i_Journal Hpd_Pref.Timebook_Adjustment_Journal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Save(i_Contract Hpd_Pref.Cv_Contract_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_Save(i_Create_Robot Hpd_Pref.Application_Create_Robot_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_Save(i_Hiring Hpd_Pref.Application_Hiring_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_Save
  (
    i_Application_Type varchar2,
    i_Transfer         Hpd_Pref.Application_Transfer_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_Save(i_Dismissal Hpd_Pref.Application_Dismissal_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_In_Progress
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Completed
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Closing_Note   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Robot
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Robot_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Employee
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Employee_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Journal
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Journal_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sign_Template_Save(i_Sign_Template Hpd_Pref.Sign_Template_Rt);
end Hpd_Api;
/
create or replace package body Hpd_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Create_By_Hiring
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Hiring     Hpd_Pref.Hiring_Rt,
    i_Setting    Hrm_Settings%rowtype
  ) return number is
    r_Page  Hpd_Journal_Pages%rowtype;
    r_Staff Href_Staffs%rowtype;
  begin
    r_Page := z_Hpd_Journal_Pages.Take(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Page_Id    => i_Hiring.Page_Id);
  
    if z_Hpd_Journal_Pages.Exist_Lock(i_Company_Id => i_Company_Id, --
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Page_Id    => i_Hiring.Page_Id,
                                      o_Row        => r_Page) then
      if not Fazo.Equal(r_Page.Employee_Id, i_Hiring.Employee_Id) then
        z_Href_Staffs.Update_One(i_Company_Id   => i_Company_Id,
                                 i_Filial_Id    => i_Filial_Id,
                                 i_Staff_Id     => r_Page.Staff_Id,
                                 i_Staff_Number => Option_Varchar2(null));
      
        r_Staff            := null;
        r_Staff.Company_Id := i_Company_Id;
        r_Staff.Filial_Id  := i_Filial_Id;
        r_Staff.Staff_Id   := Href_Next.Staff_Id;
      else
        r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => r_Page.Staff_Id);
      end if;
    else
      r_Staff            := null;
      r_Staff.Company_Id := i_Company_Id;
      r_Staff.Filial_Id  := i_Filial_Id;
      r_Staff.Staff_Id   := Href_Next.Staff_Id;
    end if;
  
    r_Staff.Staff_Number        := i_Hiring.Staff_Number;
    r_Staff.Staff_Kind          := Hpd_Util.Cast_Staff_Kind_By_Emp_Type(i_Hiring.Robot.Employment_Type);
    r_Staff.Employee_Id         := i_Hiring.Employee_Id;
    r_Staff.Hiring_Date         := i_Hiring.Hiring_Date;
    r_Staff.Dismissal_Date      := i_Hiring.Dismissal_Date;
    r_Staff.Robot_Id            := i_Hiring.Robot.Robot_Id;
    r_Staff.Division_Id         := i_Hiring.Robot.Division_Id;
    r_Staff.Job_Id              := i_Hiring.Robot.Job_Id;
    r_Staff.Org_Unit_Id         := Nvl(i_Hiring.Robot.Org_Unit_Id, i_Hiring.Robot.Division_Id);
    r_Staff.Fte                 := Nvl(i_Hiring.Robot.Fte, 1);
    r_Staff.Fte_Id              := i_Hiring.Robot.Fte_Id;
    r_Staff.Rank_Id             := i_Hiring.Robot.Rank_Id;
    r_Staff.Schedule_Id         := i_Hiring.Schedule_Id;
    r_Staff.Employment_Type     := i_Hiring.Robot.Employment_Type;
    r_Staff.Dismissal_Date      := null;
    r_Staff.Dismissal_Note      := null;
    r_Staff.Dismissal_Reason_Id := null;
    r_Staff.State               := 'P';
  
    if i_Setting.Autogen_Staff_Number = 'Y' and i_Hiring.Staff_Number is null then
      r_Staff.Staff_Number := Mkr_Core.Gen_Document_Number(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Table      => Zt.Href_Staffs,
                                                           i_Column     => z.Staff_Number);
    end if;
  
    z_Href_Staffs.Save_Row(r_Staff);
  
    Hpd_Core.Update_Insert_Valid_Auto_Staff(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => r_Staff.Staff_Id,
                                            i_Journal_Id => i_Journal_Id,
                                            i_Page_Id    => i_Hiring.Page_Id);
  
    return r_Staff.Staff_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'A' then
      Hpd_Error.Raise_033(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => i_Staff_Id));
    end if;
  
    z_Href_Staffs.Delete_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return Hpd_Util.Journal_Type_Name(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Take_Table_Translate_Record
  (
    i_Company_Id      number,
    i_Journal_Type_Id number,
    i_Lang_Code       varchar2
  ) return varchar2 is
  begin
    return z_Md_Table_Record_Translates.Take(i_Table_Name  => Zt.Hpd_Journal_Types.Name,
                                             i_Pcode       => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, --
                                                              i_Journal_Type_Id => i_Journal_Type_Id).Pcode,
                                             i_Column_Name => z.Name,
                                             i_Lang_Code   => i_Lang_Code).Val;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Create_Sign_Document
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Journal_Type_Id  number,
    i_Journal_Number   varchar2,
    i_Journal_Date     date,
    i_Template_Id      number,
    i_Sign_Document_Id number,
    i_Lang_Code        varchar2,
    i_Is_Draft         boolean := false
  ) is
    r_Mdf_Template Mdf_Sign_Templates%rowtype;
    v_Signer_Ids   Array_Number;
    v_Title        varchar2(200);
    v_Document     Mdf_Pref.Sign_Rt;
    v_Lang_Code    varchar2(5) := Nvl(i_Lang_Code, z_Md_Companies.Load(i_Company_Id).Lang_Code);
    v_Name         varchar2(50);
  begin
    v_Name := Take_Table_Translate_Record(i_Company_Id      => i_Company_Id,
                                          i_Journal_Type_Id => i_Journal_Type_Id,
                                          i_Lang_Code       => v_Lang_Code);
  
    if v_Name is null then
      v_Name := Hpd_Util.Journal_Type_Name(i_Company_Id      => i_Company_Id,
                                           i_Journal_Type_Id => i_Journal_Type_Id);
    end if;
  
    v_Title := t('Document Flow for $1{document_type_name} в„–$2{journal_number} with date of $3{journal_date}',
                 v_Name,
                 i_Journal_Number,
                 i_Journal_Date);
  
    r_Mdf_Template := z_Mdf_Sign_Templates.Load(i_Company_Id  => i_Company_Id,
                                                i_Template_Id => i_Template_Id);
  
    Mdf_Util.New_Sign(o_Sign         => v_Document,
                      i_Company_Id   => r_Mdf_Template.Company_Id,
                      i_Sign_Id      => i_Sign_Document_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Sign_Kind    => r_Mdf_Template.Sign_Kind,
                      i_Title        => v_Title,
                      i_Process_Id   => r_Mdf_Template.Process_Id,
                      i_Source_Table => Zt.Hpd_Journals.Name,
                      i_Source_Id    => i_Journal_Id,
                      i_State        => Mdf_Pref.c_Ds_Draft);
  
    for Lev in (select *
                  from Mdf_Sign_Template_Levels q
                 where q.Company_Id = r_Mdf_Template.Company_Id
                   and q.Template_Id = r_Mdf_Template.Template_Id
                 order by q.Level_No)
    loop
      Mdf_Util.Sign_Add_Level(p_Sign => v_Document, i_Sign_Kind => Lev.Sign_Kind);
    
      for Gr in (select *
                   from Mdf_Sign_Template_Groups w
                  where w.Company_Id = r_Mdf_Template.Company_Id
                    and w.Template_Id = r_Mdf_Template.Template_Id
                    and w.Level_No = Lev.Level_No
                  order by w.Group_No)
      loop
        select t.User_Id
          bulk collect
          into v_Signer_Ids
          from Mdf_Sign_Template_Users t
         where t.Company_Id = Gr.Company_Id
           and t.Template_Id = Gr.Template_Id
           and t.Level_No = Gr.Level_No
           and t.Group_No = Gr.Group_No;
      
        Mdf_Util.Sign_Add_Group(p_Level          => v_Document.Levels(Lev.Level_No),
                                i_Sign_Min_Count => Gr.Sign_Min_Count,
                                i_Signer_Ids     => v_Signer_Ids);
      end loop;
    end loop;
  
    Mdf_Api.Document_Save(v_Document);
  
    if not i_Is_Draft then
      Mdf_Api.Document_Process(i_Company_Id => i_Company_Id, i_Document_Id => v_Document.Sign_Id);
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Journal_Sign_Document
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Document_Id number := null,
    i_Lang_Code   varchar2,
    i_Is_Draft    boolean := false
  ) is
    r_Journal     Hpd_Journals%rowtype;
    v_Template_Id number;
    v_Document_Id number;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    v_Document_Id := Coalesce(r_Journal.Sign_Document_Id, i_Document_Id, Mdf_Next.Document_Id);
    v_Template_Id := Hpd_Util.Journal_Type_Sign_Template_Id(i_Company_Id      => r_Journal.Company_Id,
                                                            i_Filial_Id       => r_Journal.Filial_Id,
                                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id);
  
    if v_Template_Id is null then
      Hpd_Error.Raise_088(Hpd_Util.Journal_Type_Name(i_Company_Id      => r_Journal.Company_Id,
                                                     i_Journal_Type_Id => r_Journal.Journal_Type_Id));
    end if;
  
    if r_Journal.Posted = 'Y' then
      Hpd_Error.Raise_089(r_Journal.Journal_Number);
    end if;
  
    Create_Sign_Document(i_Company_Id       => r_Journal.Company_Id,
                         i_Filial_Id        => r_Journal.Filial_Id,
                         i_Journal_Id       => r_Journal.Journal_Id,
                         i_Journal_Type_Id  => r_Journal.Journal_Type_Id,
                         i_Journal_Number   => r_Journal.Journal_Number,
                         i_Journal_Date     => r_Journal.Journal_Date,
                         i_Template_Id      => v_Template_Id,
                         i_Sign_Document_Id => v_Document_Id,
                         i_Lang_Code        => i_Lang_Code,
                         i_Is_Draft         => i_Is_Draft);
  
    z_Hpd_Journals.Update_One(i_Company_Id       => i_Company_Id,
                              i_Filial_Id        => i_Filial_Id,
                              i_Journal_Id       => i_Journal_Id,
                              i_Sign_Document_Id => Option_Number(v_Document_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Save
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Journal_Id               number,
    i_Journal_Type_Id          number,
    i_Journal_Number           varchar2,
    i_Journal_Date             date,
    i_Journal_Name             varchar2,
    i_Source_Table             varchar2 := null,
    i_Source_Id                number := null,
    i_Lang_Code                varchar2 := null,
    i_Acceptable_Journal_Types Array_Varchar2
  ) is
    r_Journal         Hpd_Journals%rowtype;
    v_Type_Ids        Array_Number := Array_Number();
    v_Document_Status varchar2(1);
    v_Template_Id     number;
    v_Exists          boolean;
    v_Expected_Types  Array_Varchar2 := Array_Varchar2();
  begin
    for i in 1 .. i_Acceptable_Journal_Types.Count
    loop
      Fazo.Push(v_Type_Ids,
                Hpd_Util.Journal_Type_Id(i_Company_Id => i_Company_Id,
                                         i_Pcode      => i_Acceptable_Journal_Types(i)));
    end loop;
  
    if i_Journal_Type_Id not member of v_Type_Ids then
      for i in 1 .. v_Type_Ids.Count
      loop
        Fazo.Push(v_Expected_Types, Journal_Type_Name(i_Company_Id, v_Type_Ids(i)));
      end loop;
    
      Hpd_Error.Raise_034(i_Journal_Type   => Journal_Type_Name(i_Company_Id, i_Journal_Type_Id),
                          i_Expected_Types => v_Expected_Types);
    end if;
  
    if z_Hpd_Journals.Exist_Lock(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Journal_Id => i_Journal_Id,
                                 o_Row        => r_Journal) then
      if r_Journal.Posted = 'Y' then
        Hpd_Error.Raise_035(r_Journal.Journal_Number);
      end if;
    
      if r_Journal.Journal_Type_Id not member of v_Type_Ids then
        for i in 1 .. v_Type_Ids.Count
        loop
          Fazo.Push(v_Expected_Types, Journal_Type_Name(i_Company_Id, v_Type_Ids(i)));
        end loop;
      
        Hpd_Error.Raise_036(i_Journal_Type   => Journal_Type_Name(i_Company_Id, i_Journal_Type_Id),
                            i_Expected_Types => v_Expected_Types);
      end if;
    
      if r_Journal.Journal_Type_Id <> i_Journal_Type_Id then
        Hpd_Error.Raise_046(Journal_Type_Name(i_Company_Id, r_Journal.Journal_Type_Id));
      end if;
    
      if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
         not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
        Hpd_Error.Raise_068(i_Jounal_Id         => r_Journal.Journal_Id,
                            i_Journal_Number    => r_Journal.Journal_Number,
                            i_Journal_Type_Name => Journal_Type_Name(i_Company_Id,
                                                                     r_Journal.Journal_Type_Id),
                            i_Source_Table      => r_Journal.Source_Table,
                            i_Source_Id         => r_Journal.Source_Id);
      end if;
    
      v_Exists := true;
    else
      r_Journal.Company_Id      := i_Company_Id;
      r_Journal.Filial_Id       := i_Filial_Id;
      r_Journal.Journal_Id      := i_Journal_Id;
      r_Journal.Journal_Type_Id := i_Journal_Type_Id;
      r_Journal.Source_Table    := i_Source_Table;
      r_Journal.Source_Id       := i_Source_Id;
    
      v_Exists := false;
    end if;
  
    r_Journal.Journal_Number := i_Journal_Number;
    r_Journal.Journal_Date   := i_Journal_Date;
    r_Journal.Journal_Name   := i_Journal_Name;
    r_Journal.Posted         := 'N';
  
    -- Save Sign Document
    v_Template_Id := Hpd_Util.Journal_Type_Sign_Template_Id(i_Company_Id      => r_Journal.Company_Id,
                                                            i_Filial_Id       => r_Journal.Filial_Id,
                                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id);
  
    v_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => r_Journal.Company_Id,
                                                            i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Exists then
      if v_Document_Status is not null and v_Document_Status <> Mdf_Pref.c_Ds_Draft then
        Hpd_Error.Raise_086(i_Document_Status => Mdf_Pref.t_Document_Status(v_Document_Status),
                            i_Journal_Number  => r_Journal.Journal_Number);
      end if;
    
      z_Hpd_Journals.Update_Row(r_Journal);
    else
      if r_Journal.Journal_Number is null then
        r_Journal.Journal_Number := Md_Core.Gen_Number(i_Company_Id => r_Journal.Company_Id,
                                                       i_Filial_Id  => r_Journal.Filial_Id,
                                                       i_Table      => Zt.Hpd_Journals,
                                                       i_Column     => z.Journal_Number);
      end if;
    
      if v_Template_Id is not null then
        r_Journal.Sign_Document_Id := Mdf_Next.Document_Id;
      
        Create_Sign_Document(i_Company_Id       => r_Journal.Company_Id,
                             i_Filial_Id        => r_Journal.Filial_Id,
                             i_Journal_Id       => r_Journal.Journal_Id,
                             i_Journal_Type_Id  => r_Journal.Journal_Type_Id,
                             i_Journal_Number   => r_Journal.Journal_Number,
                             i_Journal_Date     => r_Journal.Journal_Date,
                             i_Template_Id      => v_Template_Id,
                             i_Sign_Document_Id => r_Journal.Sign_Document_Id,
                             i_Lang_Code        => i_Lang_Code);
      
      end if;
    
      z_Hpd_Journals.Insert_Row(r_Journal);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Page_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
    v_Page        Hpd_Journal_Pages%rowtype;
    v_Employee_Id number := z_Href_Staffs.Take(i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Staff_Id => i_Staff_Id).Employee_Id;
  begin
    z_Hpd_Journal_Pages.Init(p_Row         => v_Page,
                             i_Company_Id  => i_Company_Id,
                             i_Filial_Id   => i_Filial_Id,
                             i_Journal_Id  => i_Journal_Id,
                             i_Page_Id     => i_Page_Id,
                             i_Staff_Id    => i_Staff_Id,
                             i_Employee_Id => v_Employee_Id);
  
    z_Hpd_Journal_Pages.Save_Row(v_Page);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Contract_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Contract   Hpd_Pref.Contract_Rt
  ) is
  begin
    if i_Contract.Contract_Number is null and i_Contract.Contract_Date is null and
       i_Contract.Fixed_Term is null and i_Contract.Expiry_Date is null and
       i_Contract.Fixed_Term_Base_Id is null and i_Contract.Concluding_Term is null and
       i_Contract.Hiring_Conditions is null and i_Contract.Other_Conditions is null and
       i_Contract.Workplace_Equipment is null and i_Contract.Representative_Basis is null then
      return;
    end if;
  
    z_Hpd_Page_Contracts.Save_One(i_Company_Id           => i_Company_Id,
                                  i_Filial_Id            => i_Filial_Id,
                                  i_Page_Id              => i_Page_Id,
                                  i_Contract_Number      => i_Contract.Contract_Number,
                                  i_Contract_Date        => i_Contract.Contract_Date,
                                  i_Fixed_Term           => i_Contract.Fixed_Term,
                                  i_Expiry_Date          => i_Contract.Expiry_Date,
                                  i_Fixed_Term_Base_Id   => i_Contract.Fixed_Term_Base_Id,
                                  i_Concluding_Term      => i_Contract.Concluding_Term,
                                  i_Hiring_Conditions    => i_Contract.Hiring_Conditions,
                                  i_Other_Conditions     => i_Contract.Other_Conditions,
                                  i_Workplace_Equipment  => i_Contract.Workplace_Equipment,
                                  i_Representative_Basis => i_Contract.Representative_Basis);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Page_Robot_Is_Null
  (
    i_Robot           Hpd_Pref.Robot_Rt,
    i_Position_Enable varchar2
  ) return boolean is
  begin
    if i_Position_Enable = 'N' and (i_Robot.Division_Id is null or i_Robot.Job_Id is null) and
       i_Robot.Fte_Id is null and i_Robot.Fte is null then
      return true;
    end if;
  
    if i_Robot.Robot_Id is null and i_Robot.Rank_Id is null and i_Robot.Fte_Id is null and
       i_Robot.Fte is null then
      return true;
    end if;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Robot_Save
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Page_Id         number,
    i_Staff_Id        number,
    i_Open_Date       date,
    i_Close_Date      date := null,
    i_Schedule_Id     number,
    i_Days_Limit      number,
    i_Currency_Id     number,
    i_Is_Booked       varchar2,
    i_Robot           Hpd_Pref.Robot_Rt,
    i_Indicators      Href_Pref.Indicator_Nt,
    i_Oper_Types      Href_Pref.Oper_Type_Nt,
    i_Settings        Hrm_Settings%rowtype,
    i_Delay_Repairing boolean
  ) is
    v_Robot    Hpd_Pref.Robot_Rt;
    r_Robot    Mrf_Robots%rowtype;
    v_Trans_Id number;
    v_Fte      number := v_Robot.Fte;
  begin
    v_Robot := i_Robot;
  
    if i_Settings.Parttime_Enable = 'N' or v_Robot.Fte_Id is null and Nvl(v_Robot.Fte, 1) = 1 then
      v_Robot.Fte_Id := Href_Util.Fte_Id(i_Company_Id => i_Company_Id,
                                         i_Pcode      => Href_Pref.c_Pcode_Fte_Full_Time);
      v_Robot.Fte    := 1;
    end if;
  
    if i_Settings.Position_Enable = 'N' then
      if i_Settings.Wage_Scale_Enable = 'N' or v_Robot.Rank_Id is null then
        v_Robot.Wage_Scale_Id := null;
      end if;
    
      Hpd_Core.Implicit_Robot_Save(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Journal_Id  => i_Journal_Id,
                                   i_Page_Id     => i_Page_Id,
                                   i_Open_Date   => i_Open_Date,
                                   i_Close_Date  => i_Close_Date,
                                   i_Schedule_Id => i_Schedule_Id,
                                   i_Days_Limit  => i_Days_Limit,
                                   i_Currency_Id => i_Currency_Id,
                                   i_Robot       => v_Robot,
                                   i_Indicators  => i_Indicators,
                                   i_Oper_Types  => i_Oper_Types);
    end if;
  
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => v_Robot.Robot_Id);
  
    z_Hpd_Page_Robots.Save_One(i_Company_Id      => i_Company_Id,
                               i_Filial_Id       => i_Filial_Id,
                               i_Page_Id         => i_Page_Id,
                               i_Robot_Id        => v_Robot.Robot_Id,
                               i_Division_Id     => r_Robot.Division_Id,
                               i_Job_Id          => r_Robot.Job_Id,
                               i_Rank_Id         => v_Robot.Rank_Id,
                               i_Employment_Type => v_Robot.Employment_Type,
                               i_Fte_Id          => v_Robot.Fte_Id,
                               i_Fte             => v_Robot.Fte,
                               i_Is_Booked       => i_Is_Booked);
  
    -- delete all old transactions
    for r in (select *
                from Hpd_Robot_Trans_Pages q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      z_Hpd_Robot_Trans_Pages.Delete_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r.Page_Id,
                                         i_Trans_Id   => r.Trans_Id);
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    if not i_Delay_Repairing and i_Is_Booked = 'Y' and i_Settings.Position_Booking = 'Y' then
      if v_Robot.Fte_Id is not null then
        v_Fte := z_Href_Ftes.Load(i_Company_Id => i_Company_Id, i_Fte_Id => v_Robot.Fte_Id).Fte_Value;
      end if;
    
      v_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Robot_Id    => i_Robot.Robot_Id,
                                          i_Occupy_Date => i_Open_Date,
                                          i_Fte         => v_Fte,
                                          i_Is_Booked   => true,
                                          i_Tag         => i_Page_Id);
    
      z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => i_Page_Id,
                                         i_Trans_Id   => v_Trans_Id);
    
      z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Robot_Trans_Id => v_Trans_Id,
                                        i_Staff_Id       => i_Staff_Id);
    
      if i_Close_Date is not null then
        v_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Robot_Id    => i_Robot.Robot_Id,
                                              i_Occupy_Date => i_Close_Date + 1,
                                              i_Fte         => v_Fte,
                                              i_Is_Booked   => true,
                                              i_Tag         => i_Page_Id);
      
        z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Page_Id    => i_Page_Id,
                                           i_Trans_Id   => v_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Page_Id     number,
    i_Schedule_Id number
  ) is
  begin
    if i_Schedule_Id is not null then
      z_Hpd_Page_Schedules.Save_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Page_Id     => i_Page_Id,
                                    i_Schedule_Id => i_Schedule_Id);
    else
      z_Hpd_Page_Schedules.Delete_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Page_Id    => i_Page_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Vacation_Limit_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Days_Limit number
  ) is
  begin
    z_Hpd_Page_Vacation_Limits.Save_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Page_Id    => i_Page_Id,
                                        i_Days_Limit => i_Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Operation_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Page_Id     number,
    i_Job_Id      number,
    i_Currency_Id number,
    i_User_Id     number,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  ) is
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
  
    --------------------------------------------------
    Procedure Page_Currency_Save
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Page_Id     number,
      i_Currency_Id number
    ) is
      v_Allowed_Currency_Ids Array_Number := Hpr_Util.Load_Currency_Settings(i_Company_Id => i_Company_Id,
                                                                             i_Filial_Id  => i_Filial_Id);
    begin
      if i_Oper_Types.Count = 0 then
        z_Hpd_Page_Currencies.Delete_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => i_Page_Id);
        return;
      end if;
    
      if v_Allowed_Currency_Ids.Count > 0 and
         (i_Currency_Id is null or i_Currency_Id not member of v_Allowed_Currency_Ids) then
        Hpd_Error.Raise_072;
      end if;
    
      if i_Currency_Id is not null then
        z_Hpd_Page_Currencies.Save_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Page_Id     => i_Page_Id,
                                       i_Currency_Id => i_Currency_Id);
      end if;
    end;
  
  begin
    if z_Hpd_Journal_Pages.Lock_Load(i_Company_Id => i_Company_Id, --
     i_Filial_Id => i_Filial_Id, --
     i_Page_Id => i_Page_Id).Employee_Id <> i_User_Id and not
         Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Company_Id,
                                                                               i_Filial_Id  => i_Filial_Id,
                                                                               i_Job_Id     => i_Job_Id,
                                                                               i_User_Id    => i_User_Id) then
      return;
    end if;
  
    v_Oper_Type_Ids := Array_Number();
    v_Oper_Type_Ids.Extend(i_Oper_Types.Count);
  
    for i in 1 .. i_Indicators.Count
    loop
      v_Indicator := i_Indicators(i);
    
      z_Hpd_Page_Indicators.Save_One(i_Company_Id      => i_Company_Id,
                                     i_Filial_Id       => i_Filial_Id,
                                     i_Page_Id         => i_Page_Id,
                                     i_Indicator_Id    => v_Indicator.Indicator_Id,
                                     i_Indicator_Value => v_Indicator.Indicator_Value);
    end loop;
  
    for i in 1 .. i_Oper_Types.Count
    loop
      v_Oper_Type := i_Oper_Types(i);
      v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
    
      z_Hpd_Page_Oper_Types.Insert_Try(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Page_Id      => i_Page_Id,
                                       i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
    
      for j in 1 .. v_Oper_Type.Indicator_Ids.Count
      loop
        z_Hpd_Oper_Type_Indicators.Insert_Try(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Page_Id      => i_Page_Id,
                                              i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                              i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
      end loop;
    
      for r in (select *
                  from Hpd_Oper_Type_Indicators t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Page_Id = i_Page_Id
                   and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                   and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
      loop
        z_Hpd_Oper_Type_Indicators.Delete_One(i_Company_Id   => r.Company_Id,
                                              i_Filial_Id    => r.Filial_Id,
                                              i_Page_Id      => r.Page_Id,
                                              i_Oper_Type_Id => r.Oper_Type_Id,
                                              i_Indicator_Id => r.Indicator_Id);
      end loop;
    end loop;
  
    Page_Currency_Save(i_Company_Id  => i_Company_Id,
                       i_Filial_Id   => i_Filial_Id,
                       i_Page_Id     => i_Page_Id,
                       i_Currency_Id => i_Currency_Id);
  
    for r in (select *
                from Hpd_Page_Oper_Types t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Page_Id = i_Page_Id
                 and t.Oper_Type_Id not member of v_Oper_Type_Ids)
    loop
      z_Hpd_Page_Oper_Types.Delete_One(i_Company_Id   => r.Company_Id,
                                       i_Filial_Id    => r.Filial_Id,
                                       i_Page_Id      => r.Page_Id,
                                       i_Oper_Type_Id => r.Oper_Type_Id);
    end loop;
  
    for r in (select q.Indicator_Id
                from Hpd_Page_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id
                 and not exists (select 1
                        from Hpd_Oper_Type_Indicators w
                       where w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Page_Id = q.Page_Id
                         and w.Indicator_Id = q.Indicator_Id))
    loop
      z_Hpd_Page_Indicators.Delete_One(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Page_Id      => i_Page_Id,
                                       i_Indicator_Id => r.Indicator_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Page_Remove_Vacation_Limits
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  ) is
  begin
    z_Hpd_Page_Vacation_Limits.Delete_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Page_Id    => i_Page_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Employees_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    -- deleting divisions from journal
    delete from Hpd_Journal_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- deleting employees from journal
    delete from Hpd_Journal_Employees q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- deleting staffs from journal
    delete from Hpd_Journal_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id;
  
    -- inserting divisions into journal
    insert into Hpd_Journal_Divisions
      (Company_Id, Filial_Id, Journal_Id, Division_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Division_Id
        from Hpd_Journal_Timebook_Adjustments q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
         and q.Division_Id is not null;
  
    -- inserting employees into journal
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Timeoffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    insert into Hpd_Journal_Employees
      (Company_Id, Filial_Id, Journal_Id, Employee_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Employee_Id
        from Hpd_Journal_Overtimes q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id
       group by q.Employee_Id;
  
    -- inserting staffs into journal
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Timeoffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  
    insert into Hpd_Journal_Staffs
      (Company_Id, Filial_Id, Journal_Id, Staff_Id)
      select i_Company_Id, i_Filial_Id, i_Journal_Id, q.Staff_Id
        from Hpd_Journal_Overtimes q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Pages_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number
  ) is
    r_Journal Hpd_Journals%rowtype;
  begin
    r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Journal_Id => i_Journal_Id);
  
    if Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hpd_Core.Hiring_Cv_Contract_Delete(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Journal_Id => i_Journal_Id,
                                         i_Page_Ids   => i_Page_Ids);
    end if;
  
    for r in (select t.Page_Id, p.Trans_Id
                from Hpd_Journal_Pages t
                left join Hpd_Robot_Trans_Pages p
                  on p.Company_Id = t.Company_Id
                 and p.Filial_Id = t.Filial_Id
                 and p.Page_Id = t.Page_Id
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Journal_Id = i_Journal_Id
                 and t.Page_Id not member of i_Page_Ids)
    loop
      if r.Trans_Id is not null then
        z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                            i_Filial_Id      => i_Filial_Id,
                                            i_Robot_Trans_Id => r.Trans_Id);
      
        z_Hpd_Robot_Trans_Pages.Delete_One(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Page_Id    => r.Page_Id,
                                           i_Trans_Id   => r.Trans_Id);
      
        Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Trans_Id   => r.Trans_Id);
      end if;
    
      z_Hpd_Journal_Pages.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Page_Id    => r.Page_Id);
    end loop;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Staffs_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    insert into Hpd_Auto_Created_Staffs p
      (p.Company_Id, p.Filial_Id, p.Staff_Id, p.Journal_Id, p.Page_Id, p.Valid)
      select q.Company_Id, q.Filial_Id, q.Staff_Id, q.Journal_Id, q.Page_Id, 'N'
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Journal_Id = i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Auto_Robots_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    insert into Hpd_Auto_Created_Robots p
      (p.Company_Id, p.Filial_Id, p.Robot_Id, p.Journal_Id, p.Page_Id, p.Valid)
      select i_Company_Id, i_Filial_Id, q.Robot_Id, i_Journal_Id, q.Page_Id, 'N'
        from Hpd_Page_Robots q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and exists (select *
                from Hpd_Journal_Pages Jp
               where Jp.Company_Id = q.Company_Id
                 and Jp.Filial_Id = q.Filial_Id
                 and Jp.Page_Id = q.Page_Id
                 and Jp.Journal_Id = i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    v_Linked_Journal_Id number;
  
    --------------------------------------------------
    Function Staff_Linked_Other_Journal(i_Staff_Id number) return number is
      result number;
    begin
      select q.Journal_Id
        into result
        from Hpd_Journal_Pages q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Journal_Id != i_Journal_Id
         and Rownum = 1;
    
      return result;
    exception
      when No_Data_Found then
        return result;
    end;
  begin
    for r in (select *
                from Hpd_Auto_Created_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id
                 and q.Valid = 'N')
    loop
      v_Linked_Journal_Id := Staff_Linked_Other_Journal(r.Staff_Id);
    
      if v_Linked_Journal_Id is not null then
        Hpd_Error.Raise_037(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r.Company_Id,
                                                                     i_Filial_Id  => r.Filial_Id,
                                                                     i_Staff_Id   => r.Staff_Id),
                            i_Journal_Number => z_Hpd_Journals.Load(i_Company_Id => i_Company_Id, --
                                                i_Filial_Id => i_Filial_Id, --
                                                i_Journal_Id => v_Linked_Journal_Id).Journal_Number);
      end if;
    
      Staff_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => r.Staff_Id);
    end loop;
  
    delete Hpd_Auto_Created_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Repairing
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    Delete_Unnecessary_Staffs(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
  
    Hpd_Core.Delete_Unnecessary_Robots(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Save
  (
    i_Journal         Hpd_Pref.Hiring_Journal_Rt,
    i_Delay_Repairing boolean
  ) is
    v_Staff_Id           number;
    r_Setting            Hrm_Settings%rowtype;
    v_Hiring             Hpd_Pref.Hiring_Rt;
    v_Page_Ids           Array_Number;
    v_User_Id            number;
    v_Contractor_Type_Id number;
    v_Postion_Booking    varchar2(1) := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id, --
                                        i_Filial_Id => i_Journal.Filial_Id).Position_Booking;
  begin
    v_Contractor_Type_Id := Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                     i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor);
  
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Hirings.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Hirings(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Hiring),
                                     i_Pages_Cnt        => i_Journal.Hirings.Count);
  
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Hirings.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Hirings(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => v_Contractor_Type_Id,
                                     i_Pages_Cnt        => i_Journal.Hirings.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Hiring,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id,
                                       i_Filial_Id  => i_Journal.Filial_Id);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Hirings.Count);
  
    Hiring_Staffs_Invalid(i_Company_Id => i_Journal.Company_Id,
                          i_Filial_Id  => i_Journal.Filial_Id,
                          i_Journal_Id => i_Journal.Journal_Id);
  
    Auto_Robots_Invalid(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
  
    for i in 1 .. i_Journal.Hirings.Count
    loop
      v_Hiring := i_Journal.Hirings(i);
    
      v_Page_Ids(i) := v_Hiring.Page_Id;
    
      v_Staff_Id := Staff_Create_By_Hiring(i_Company_Id => i_Journal.Company_Id,
                                           i_Filial_Id  => i_Journal.Filial_Id,
                                           i_Journal_Id => i_Journal.Journal_Id,
                                           i_Hiring     => v_Hiring,
                                           i_Setting    => r_Setting);
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Hiring.Page_Id,
                        i_Staff_Id   => v_Staff_Id);
    
      if v_Contractor_Type_Id = i_Journal.Journal_Type_Id and v_Hiring.Dismissal_Date is null then
        Hpd_Error.Raise_081;
      end if;
    
      z_Hpd_Hirings.Save_One(i_Company_Id           => i_Journal.Company_Id,
                             i_Filial_Id            => i_Journal.Filial_Id,
                             i_Page_Id              => v_Hiring.Page_Id,
                             i_Staff_Id             => v_Staff_Id,
                             i_Hiring_Date          => v_Hiring.Hiring_Date,
                             i_Dismissal_Date       => v_Hiring.Dismissal_Date,
                             i_Trial_Period         => v_Hiring.Trial_Period,
                             i_Employment_Source_Id => v_Hiring.Employment_Source_Id);
    
      Page_Robot_Save(i_Company_Id      => i_Journal.Company_Id,
                      i_Filial_Id       => i_Journal.Filial_Id,
                      i_Journal_Id      => i_Journal.Journal_Id,
                      i_Page_Id         => v_Hiring.Page_Id,
                      i_Staff_Id        => v_Staff_Id,
                      i_Open_Date       => v_Hiring.Hiring_Date,
                      i_Schedule_Id     => v_Hiring.Schedule_Id,
                      i_Days_Limit      => v_Hiring.Vacation_Days_Limit,
                      i_Currency_Id     => v_Hiring.Currency_Id,
                      i_Is_Booked       => v_Hiring.Is_Booked,
                      i_Robot           => v_Hiring.Robot,
                      i_Indicators      => v_Hiring.Indicators,
                      i_Oper_Types      => v_Hiring.Oper_Types,
                      i_Settings        => r_Setting,
                      i_Delay_Repairing => i_Delay_Repairing);
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Hiring.Page_Id,
                         i_Schedule_Id => v_Hiring.Schedule_Id);
    
      if i_Journal.Journal_Type_Id <> v_Contractor_Type_Id then
        if v_Hiring.Vacation_Days_Limit is not null then
          Page_Vacation_Limit_Save(i_Company_Id => i_Journal.Company_Id,
                                   i_Filial_Id  => i_Journal.Filial_Id,
                                   i_Page_Id    => v_Hiring.Page_Id,
                                   i_Days_Limit => v_Hiring.Vacation_Days_Limit);
        else
          Page_Remove_Vacation_Limits(i_Company_Id => i_Journal.Company_Id,
                                      i_Filial_Id  => i_Journal.Filial_Id,
                                      i_Page_Id    => v_Hiring.Page_Id);
        end if;
      
        Page_Contract_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Page_Id    => v_Hiring.Page_Id,
                           i_Contract   => v_Hiring.Contract);
      else
        Cv_Contract_Save(v_Hiring.Cv_Contract);
      end if;
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Hiring.Page_Id,
                          i_Job_Id      => v_Hiring.Robot.Job_Id,
                          i_Currency_Id => v_Hiring.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Hiring.Indicators,
                          i_Oper_Types  => v_Hiring.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  
    if not i_Delay_Repairing then
      Journal_Repairing(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
    end if;
  
    if v_Postion_Booking = 'Y' then
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Journal.Company_Id,
                                   i_Filial_Id  => i_Journal.Filial_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Save
  (
    i_Journal         Hpd_Pref.Transfer_Journal_Rt,
    i_Delay_Repairing boolean
  ) is
    r_Setting         Hrm_Settings%rowtype;
    r_Staff           Href_Staffs%rowtype;
    v_Transfer        Hpd_Pref.Transfer_Rt;
    v_Page_Ids        Array_Number;
    v_Job_Id          number;
    v_User_Id         number;
    v_Postion_Booking varchar2(1) := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id, --
                                     i_Filial_Id => i_Journal.Filial_Id).Position_Booking;
  begin
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Transfers.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Transfers(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Transfer),
                                     i_Pages_Cnt        => i_Journal.Transfers.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Transfer,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Journal.Company_Id,
                                       i_Filial_Id  => i_Journal.Filial_Id);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Transfers.Count);
  
    Auto_Robots_Invalid(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
  
    for i in 1 .. i_Journal.Transfers.Count
    loop
      v_Transfer := i_Journal.Transfers(i);
      v_Page_Ids(i) := v_Transfer.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Transfer.Page_Id,
                        i_Staff_Id   => v_Transfer.Staff_Id);
    
      z_Hpd_Transfers.Save_One(i_Company_Id      => i_Journal.Company_Id,
                               i_Filial_Id       => i_Journal.Filial_Id,
                               i_Page_Id         => v_Transfer.Page_Id,
                               i_Transfer_Begin  => v_Transfer.Transfer_Begin,
                               i_Transfer_End    => v_Transfer.Transfer_End,
                               i_Transfer_Reason => v_Transfer.Transfer_Reason,
                               i_Transfer_Base   => v_Transfer.Transfer_Base);
    
      Page_Contract_Save(i_Company_Id => i_Journal.Company_Id,
                         i_Filial_Id  => i_Journal.Filial_Id,
                         i_Page_Id    => v_Transfer.Page_Id,
                         i_Contract   => v_Transfer.Contract);
    
      if not Page_Robot_Is_Null(v_Transfer.Robot, r_Setting.Position_Enable) then
        if v_Transfer.Robot.Employment_Type = Hpd_Pref.c_Employment_Type_Contractor then
          Hpd_Error.Raise_082(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                   i_Filial_Id  => i_Journal.Filial_Id,
                                                   i_Staff_Id   => v_Transfer.Staff_Id));
        end if;
      
        r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Journal.Company_Id,
                                      i_Filial_Id  => i_Journal.Filial_Id,
                                      i_Staff_Id   => v_Transfer.Staff_Id);
      
        if r_Staff.Employment_Type = Hpd_Pref.c_Employment_Type_Contractor then
          Hpd_Error.Raise_083(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                   i_Filial_Id  => i_Journal.Filial_Id,
                                                   i_Staff_Id   => v_Transfer.Staff_Id));
        end if;
      
        Page_Robot_Save(i_Company_Id      => i_Journal.Company_Id,
                        i_Filial_Id       => i_Journal.Filial_Id,
                        i_Journal_Id      => i_Journal.Journal_Id,
                        i_Page_Id         => v_Transfer.Page_Id,
                        i_Staff_Id        => v_Transfer.Staff_Id,
                        i_Open_Date       => v_Transfer.Transfer_Begin,
                        i_Close_Date      => v_Transfer.Transfer_End,
                        i_Schedule_Id     => v_Transfer.Schedule_Id,
                        i_Days_Limit      => v_Transfer.Vacation_Days_Limit,
                        i_Currency_Id     => v_Transfer.Currency_Id,
                        i_Is_Booked       => v_Transfer.Is_Booked,
                        i_Robot           => v_Transfer.Robot,
                        i_Indicators      => v_Transfer.Indicators,
                        i_Oper_Types      => v_Transfer.Oper_Types,
                        i_Settings        => r_Setting,
                        i_Delay_Repairing => i_Delay_Repairing);
      
        v_Job_Id := v_Transfer.Robot.Job_Id;
      else
        v_Job_Id := Hpd_Util.Get_Closest_Job_Id(i_Company_Id => i_Journal.Company_Id,
                                                i_Filial_Id  => i_Journal.Filial_Id,
                                                i_Staff_Id   => v_Transfer.Staff_Id,
                                                i_Period     => v_Transfer.Transfer_Begin);
      end if;
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Transfer.Page_Id,
                         i_Schedule_Id => v_Transfer.Schedule_Id);
    
      if v_Transfer.Vacation_Days_Limit is not null then
        Page_Vacation_Limit_Save(i_Company_Id => i_Journal.Company_Id,
                                 i_Filial_Id  => i_Journal.Filial_Id,
                                 i_Page_Id    => v_Transfer.Page_Id,
                                 i_Days_Limit => v_Transfer.Vacation_Days_Limit);
      else
        Page_Remove_Vacation_Limits(i_Company_Id => i_Journal.Company_Id,
                                    i_Filial_Id  => i_Journal.Filial_Id,
                                    i_Page_Id    => v_Transfer.Page_Id);
      end if;
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Transfer.Page_Id,
                          i_Job_Id      => v_Job_Id,
                          i_Currency_Id => v_Transfer.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Transfer.Indicators,
                          i_Oper_Types  => v_Transfer.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  
    if not i_Delay_Repairing then
      Journal_Repairing(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id);
    end if;
  
    if v_Postion_Booking = 'Y' then
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Journal.Company_Id,
                                   i_Filial_Id  => i_Journal.Filial_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Save(i_Journal Hpd_Pref.Dismissal_Journal_Rt) is
    v_Dismissal Hpd_Pref.Dismissal_Rt;
    v_Page_Ids  Array_Number;
  begin
    Hpd_Util.Assert_Singular_Journal(i_Company_Id       => i_Journal.Company_Id,
                                     i_Filial_Id        => i_Journal.Filial_Id,
                                     i_Journal_Id       => i_Journal.Journal_Id,
                                     i_Page_Id          => case
                                                             when i_Journal.Dismissals.Count = 0 then
                                                              null
                                                             else
                                                              i_Journal.Dismissals(1).Page_Id
                                                           end,
                                     i_Journal_Type_Id  => i_Journal.Journal_Type_Id,
                                     i_Singular_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                                    i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Dismissal),
                                     i_Pages_Cnt        => i_Journal.Dismissals.Count);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Dismissal,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple));
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Dismissals.Count);
  
    for i in 1 .. i_Journal.Dismissals.Count
    loop
      v_Dismissal := i_Journal.Dismissals(i);
      v_Page_Ids(i) := v_Dismissal.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Dismissal.Page_Id,
                        i_Staff_Id   => v_Dismissal.Staff_Id);
    
      z_Hpd_Dismissals.Save_One(i_Company_Id           => i_Journal.Company_Id,
                                i_Filial_Id            => i_Journal.Filial_Id,
                                i_Page_Id              => v_Dismissal.Page_Id,
                                i_Dismissal_Date       => v_Dismissal.Dismissal_Date,
                                i_Dismissal_Reason_Id  => v_Dismissal.Dismissal_Reason_Id,
                                i_Employment_Source_Id => v_Dismissal.Employment_Source_Id,
                                i_Based_On_Doc         => v_Dismissal.Based_On_Doc,
                                i_Note                 => v_Dismissal.Note);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Save(i_Journal Hpd_Pref.Wage_Change_Journal_Rt) is
    v_Wage_Change Hpd_Pref.Wage_Change_Rt;
    v_Page_Ids    Array_Number;
    v_User_Id     number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Wage_Change,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Wage_Change_Multiple));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Hpd_Journals.Load(i_Company_Id => i_Journal.Company_Id, i_Filial_Id => i_Journal.Filial_Id, i_Journal_Id => i_Journal.Journal_Id).Modified_By;
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Wage_Changes.Count);
  
    for i in 1 .. i_Journal.Wage_Changes.Count
    loop
      v_Wage_Change := i_Journal.Wage_Changes(i);
      v_Page_Ids(i) := v_Wage_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Wage_Change.Page_Id,
                        i_Staff_Id   => v_Wage_Change.Staff_Id);
    
      z_Hpd_Wage_Changes.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                  i_Filial_Id   => i_Journal.Filial_Id,
                                  i_Page_Id     => v_Wage_Change.Page_Id,
                                  i_Change_Date => v_Wage_Change.Change_Date);
    
      Page_Operation_Save(i_Company_Id  => i_Journal.Company_Id,
                          i_Filial_Id   => i_Journal.Filial_Id,
                          i_Page_Id     => v_Wage_Change.Page_Id,
                          i_Job_Id      => Hpd_Util.Get_Closest_Job_Id(i_Company_Id => i_Journal.Company_Id,
                                                                       i_Filial_Id  => i_Journal.Filial_Id,
                                                                       i_Staff_Id   => v_Wage_Change.Staff_Id,
                                                                       i_Period     => v_Wage_Change.Change_Date),
                          i_Currency_Id => v_Wage_Change.Currency_Id,
                          i_User_Id     => v_User_Id,
                          i_Indicators  => v_Wage_Change.Indicators,
                          i_Oper_Types  => v_Wage_Change.Oper_Types);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Save(i_Journal Hpd_Pref.Rank_Change_Journal_Rt) is
    v_Rank_Change Hpd_Pref.Rank_Change_Rt;
    v_Page_Ids    Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Source_Table             => i_Journal.Source_Table,
                 i_Source_Id                => i_Journal.Source_Id,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Rank_Change,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Rank_Change_Multiple));
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Rank_Changes.Count);
  
    for i in 1 .. i_Journal.Rank_Changes.Count
    loop
      v_Rank_Change := i_Journal.Rank_Changes(i);
      v_Page_Ids(i) := v_Rank_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Rank_Change.Page_Id,
                        i_Staff_Id   => v_Rank_Change.Staff_Id);
    
      z_Hpd_Rank_Changes.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                  i_Filial_Id   => i_Journal.Filial_Id,
                                  i_Page_Id     => v_Rank_Change.Page_Id,
                                  i_Change_Date => v_Rank_Change.Change_Date,
                                  i_Rank_Id     => v_Rank_Change.Rank_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Save(i_Journal Hpd_Pref.Limit_Change_Journal_Rt) is
    r_Limit_Change Hpd_Vacation_Limit_Changes%rowtype;
    v_Page         Hpd_Pref.Page_Rt;
    v_Page_Ids     Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Limit_Change),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Limit_Change));
  
    r_Limit_Change.Company_Id  := i_Journal.Company_Id;
    r_Limit_Change.Filial_Id   := i_Journal.Filial_Id;
    r_Limit_Change.Journal_Id  := i_Journal.Journal_Id;
    r_Limit_Change.Division_Id := i_Journal.Division_Id;
    r_Limit_Change.Days_Limit  := i_Journal.Days_Limit;
    r_Limit_Change.Change_Date := i_Journal.Change_Date;
  
    z_Hpd_Vacation_Limit_Changes.Save_Row(r_Limit_Change);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Pages.Count);
  
    for i in 1 .. i_Journal.Pages.Count
    loop
      v_Page := i_Journal.Pages(i);
      v_Page_Ids(i) := v_Page.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Page.Page_Id,
                        i_Staff_Id   => v_Page.Staff_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Save(i_Journal Hpd_Pref.Schedule_Change_Journal_Rt) is
    r_Schedule_Change Hpd_Schedule_Changes%rowtype;
    v_Schedule_Change Hpd_Pref.Schedule_Change_Rt;
    v_Page_Ids        Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change));
  
    r_Schedule_Change.Company_Id  := i_Journal.Company_Id;
    r_Schedule_Change.Filial_Id   := i_Journal.Filial_Id;
    r_Schedule_Change.Journal_Id  := i_Journal.Journal_Id;
    r_Schedule_Change.Division_Id := i_Journal.Division_Id;
    r_Schedule_Change.Begin_Date  := i_Journal.Begin_Date;
    r_Schedule_Change.End_Date    := i_Journal.End_Date;
  
    z_Hpd_Schedule_Changes.Save_Row(r_Schedule_Change);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Schedule_Changes.Count);
  
    for i in 1 .. i_Journal.Schedule_Changes.Count
    loop
      v_Schedule_Change := i_Journal.Schedule_Changes(i);
      v_Page_Ids(i) := v_Schedule_Change.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Schedule_Change.Page_Id,
                        i_Staff_Id   => v_Schedule_Change.Staff_Id);
    
      if v_Schedule_Change.Schedule_Id is null then
        Hpd_Error.Raise_049(Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                 i_Filial_Id  => i_Journal.Filial_Id,
                                                 i_Staff_Id   => v_Schedule_Change.Staff_Id));
      end if;
    
      Page_Schedule_Save(i_Company_Id  => i_Journal.Company_Id,
                         i_Filial_Id   => i_Journal.Filial_Id,
                         i_Page_Id     => v_Schedule_Change.Page_Id,
                         i_Schedule_Id => v_Schedule_Change.Schedule_Id);
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  -- timeoff
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Timeoff_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Timeoff_Id number,
    i_Journal_Id number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Shas       Array_Varchar2
  ) is
    r_Timeoff Hpd_Journal_Timeoffs%rowtype;
    v_Exists  boolean := false;
  begin
    if z_Hpd_Journal_Timeoffs.Exist_Lock(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Timeoff_Id => i_Timeoff_Id,
                                         o_Row        => r_Timeoff) then
      if r_Timeoff.Journal_Id <> i_Journal_Id then
        Hpd_Error.Raise_032(i_Timeoff_Id => i_Timeoff_Id, i_Journal_Id => r_Timeoff.Journal_Id);
      end if;
    
      v_Exists := true;
    end if;
  
    r_Timeoff.Employee_Id := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                             i_Filial_Id => i_Filial_Id, --
                             i_Staff_Id => i_Staff_Id).Employee_Id;
    r_Timeoff.Staff_Id    := i_Staff_Id;
    r_Timeoff.Begin_Date  := i_Begin_Date;
    r_Timeoff.End_Date    := i_End_Date;
  
    if v_Exists then
      z_Hpd_Journal_Timeoffs.Update_Row(r_Timeoff);
    
      delete Hpd_Timeoff_Files q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Timeoff_Id = i_Timeoff_Id
         and q.Sha not member of i_Shas;
    else
      r_Timeoff.Company_Id := i_Company_Id;
      r_Timeoff.Filial_Id  := i_Filial_Id;
      r_Timeoff.Timeoff_Id := i_Timeoff_Id;
      r_Timeoff.Journal_Id := i_Journal_Id;
    
      z_Hpd_Journal_Timeoffs.Insert_Row(r_Timeoff);
    end if;
  
    for i in 1 .. i_Shas.Count
    loop
      z_Hpd_Timeoff_Files.Insert_Try(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Timeoff_Id => i_Timeoff_Id,
                                     i_Sha        => i_Shas(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Timeoffs_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Timeoff_Ids Array_Number
  ) is
  begin
    delete Hpd_Journal_Timeoffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id
       and q.Timeoff_Id not member of i_Timeoff_Ids;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Overtime_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number,
    i_Journal_Id  number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Overtime Hpd_Journal_Overtimes%rowtype;
    v_Exists   boolean := false;
  begin
    if z_Hpd_Journal_Overtimes.Exist_Lock(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Overtime_Id => i_Overtime_Id,
                                          o_Row         => r_Overtime) then
      if r_Overtime.Journal_Id <> i_Journal_Id then
        Hpd_Error.Raise_042(i_Overtime_Id => i_Overtime_Id, i_Journal_Id => i_Journal_Id);
      end if;
    
      v_Exists := true;
    end if;
  
    r_Overtime.Employee_Id := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                              i_Filial_Id => i_Filial_Id, --
                              i_Staff_Id => i_Staff_Id).Employee_Id;
    r_Overtime.Staff_Id    := i_Staff_Id;
    r_Overtime.Begin_Date  := i_Begin_Date;
    r_Overtime.End_Date    := i_End_Date;
  
    if v_Exists then
      z_Hpd_Journal_Overtimes.Update_Row(r_Overtime);
    else
      r_Overtime.Company_Id  := i_Company_Id;
      r_Overtime.Filial_Id   := i_Filial_Id;
      r_Overtime.Overtime_Id := i_Overtime_Id;
      r_Overtime.Journal_Id  := i_Journal_Id;
    
      z_Hpd_Journal_Overtimes.Insert_Row(r_Overtime);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unnecessary_Overtimes_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Overtime_Ids Array_Number
  ) is
  begin
    delete Hpd_Journal_Overtimes q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Id = i_Journal_Id
       and q.Overtime_Id not member of i_Overtime_Ids;
  
    Journal_Employees_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_Save(i_Journal Hpd_Pref.Sick_Leave_Journal_Rt) is
    v_Sick_Leave  Hpd_Pref.Sick_Leave_Rt;
    v_Timeoff_Ids Array_Number := Array_Number();
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave));
  
    for i in 1 .. i_Journal.Sick_Leaves.Count
    loop
      v_Sick_Leave := i_Journal.Sick_Leaves(i);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Sick_Leave.Timeoff_Id,
                           i_Staff_Id   => v_Sick_Leave.Staff_Id,
                           i_Begin_Date => v_Sick_Leave.Begin_Date,
                           i_End_Date   => v_Sick_Leave.End_Date,
                           i_Shas       => v_Sick_Leave.Shas);
    
      z_Hpd_Sick_Leaves.Save_One(i_Company_Id        => i_Journal.Company_Id,
                                 i_Filial_Id         => i_Journal.Filial_Id,
                                 i_Timeoff_Id        => v_Sick_Leave.Timeoff_Id,
                                 i_Reason_Id         => v_Sick_Leave.Reason_Id,
                                 i_Coefficient       => v_Sick_Leave.Coefficient,
                                 i_Sick_Leave_Number => v_Sick_Leave.Sick_Leave_Number);
    
      Fazo.Push(v_Timeoff_Ids, v_Sick_Leave.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_Save(i_Journal Hpd_Pref.Business_Trip_Journal_Rt) is
    v_Trip        Hpd_Pref.Business_Trip_Rt;
    v_Timeoff_Ids Array_Number := Array_Number();
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => i_Journal.Journal_Type_Id,
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Business_Trip,
                                                              Hpd_Pref.c_Pcode_Journal_Type_Business_Trip_Multiple));
  
    for i in 1 .. i_Journal.Business_Trips.Count
    loop
      v_Trip := i_Journal.Business_Trips(i);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Trip.Timeoff_Id,
                           i_Staff_Id   => v_Trip.Staff_Id,
                           i_Begin_Date => v_Trip.Begin_Date,
                           i_End_Date   => v_Trip.End_Date,
                           i_Shas       => v_Trip.Shas);
    
      z_Hpd_Business_Trips.Save_One(i_Company_Id => i_Journal.Company_Id,
                                    i_Filial_Id  => i_Journal.Filial_Id,
                                    i_Timeoff_Id => v_Trip.Timeoff_Id,
                                    i_Person_Id  => v_Trip.Person_Id,
                                    i_Reason_Id  => v_Trip.Reason_Id,
                                    i_Note       => v_Trip.Note);
    
      if v_Trip.Region_Ids.Count = 0 then
        Hpd_Error.Raise_077;
      end if;
    
      delete from Hpd_Business_Trip_Regions q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Timeoff_Id = v_Trip.Timeoff_Id;
    
      for i in 1 .. v_Trip.Region_Ids.Count
      loop
        z_Hpd_Business_Trip_Regions.Insert_Try(i_Company_Id => i_Journal.Company_Id,
                                               i_Filial_Id  => i_Journal.Filial_Id,
                                               i_Timeoff_Id => v_Trip.Timeoff_Id,
                                               i_Region_Id  => v_Trip.Region_Ids(i),
                                               i_Order_No   => i);
      end loop;
    
      Fazo.Push(v_Timeoff_Ids, v_Trip.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_Save(i_Journal Hpd_Pref.Vacation_Journal_Rt) is
    v_Vacation_Tk_Id number;
    v_Vacation       Hpd_Pref.Vacation_Rt;
    v_Timeoff_Ids    Array_Number := Array_Number();
  
    --------------------------------------------------
    Procedure Assert_Vacation_Time_Kind
    (
      i_Company_Id   number,
      i_Time_Kind_Id number
    ) is
      r_Time_Kind Htt_Time_Kinds%rowtype;
    begin
      if i_Time_Kind_Id = v_Vacation_Tk_Id then
        return;
      end if;
    
      r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Company_Id,
                                           i_Time_Kind_Id => i_Time_Kind_Id);
    
      if not Fazo.Equal(r_Time_Kind.Parent_Id, v_Vacation_Tk_Id) then
        Hpd_Error.Raise_052(r_Time_Kind.Name);
      end if;
    end;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Vacation),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Vacation));
  
    for i in 1 .. i_Journal.Vacations.Count
    loop
      v_Vacation := i_Journal.Vacations(i);
    
      v_Vacation.Time_Kind_Id := Nvl(v_Vacation.Time_Kind_Id, v_Vacation_Tk_Id);
    
      Journal_Timeoff_Save(i_Company_Id => i_Journal.Company_Id,
                           i_Filial_Id  => i_Journal.Filial_Id,
                           i_Journal_Id => i_Journal.Journal_Id,
                           i_Timeoff_Id => v_Vacation.Timeoff_Id,
                           i_Staff_Id   => v_Vacation.Staff_Id,
                           i_Begin_Date => v_Vacation.Begin_Date,
                           i_End_Date   => v_Vacation.End_Date,
                           i_Shas       => v_Vacation.Shas);
    
      Assert_Vacation_Time_Kind(i_Company_Id   => i_Journal.Company_Id,
                                i_Time_Kind_Id => v_Vacation.Time_Kind_Id);
    
      z_Hpd_Vacations.Save_One(i_Company_Id   => i_Journal.Company_Id,
                               i_Filial_Id    => i_Journal.Filial_Id,
                               i_Timeoff_Id   => v_Vacation.Timeoff_Id,
                               i_Time_Kind_Id => v_Vacation.Time_Kind_Id);
    
      Fazo.Push(v_Timeoff_Ids, v_Vacation.Timeoff_Id);
    end loop;
  
    Unnecessary_Timeoffs_Delete(i_Company_Id  => i_Journal.Company_Id,
                                i_Filial_Id   => i_Journal.Filial_Id,
                                i_Journal_Id  => i_Journal.Journal_Id,
                                i_Timeoff_Ids => v_Timeoff_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_Save(i_Journal Hpd_Pref.Overtime_Journal_Rt) is
    v_Overtime       Hpd_Pref.Overtime_Rt;
    v_Overtime_Staff Hpd_Pref.Overtime_Staff_Rt;
    v_Overtime_Ids   Array_Number := Array_Number();
    v_Month          date;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Overtime),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Overtime));
  
    -- save division to journal
    if i_Journal.Division_Id is not null then
      z_Hpd_Overtime_Journal_Divisions.Save_One(i_Company_Id  => i_Journal.Company_Id,
                                                i_Filial_Id   => i_Journal.Filial_Id,
                                                i_Journal_Id  => i_Journal.Journal_Id,
                                                i_Division_Id => i_Journal.Division_Id);
    elsif z_Hpd_Overtime_Journal_Divisions.Exist_Lock(i_Company_Id => i_Journal.Company_Id,
                                                      i_Filial_Id  => i_Journal.Filial_Id,
                                                      i_Journal_Id => i_Journal.Journal_Id) then
      z_Hpd_Overtime_Journal_Divisions.Delete_One(i_Company_Id => i_Journal.Company_Id,
                                                  i_Filial_Id  => i_Journal.Filial_Id,
                                                  i_Journal_Id => i_Journal.Journal_Id);
    end if;
  
    for i in 1 .. i_Journal.Overtime_Staffs.Count
    loop
      v_Overtime_Staff := i_Journal.Overtime_Staffs(i);
      v_Month          := Trunc(v_Overtime_Staff.Month, 'mm');
    
      Journal_Overtime_Save(i_Company_Id  => i_Journal.Company_Id,
                            i_Filial_Id   => i_Journal.Filial_Id,
                            i_Journal_Id  => i_Journal.Journal_Id,
                            i_Overtime_Id => v_Overtime_Staff.Overtime_Id,
                            i_Staff_Id    => v_Overtime_Staff.Staff_Id,
                            i_Begin_Date  => v_Month,
                            i_End_Date    => Last_Day(v_Overtime_Staff.Month));
    
      delete from Hpd_Overtime_Days q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Overtime_Id = v_Overtime_Staff.Overtime_Id;
    
      for j in 1 .. v_Overtime_Staff.Overtimes.Count
      loop
        v_Overtime := v_Overtime_Staff.Overtimes(j);
      
        if Trunc(v_Overtime.Overtime_Date, 'MON') <> v_Month then
          Hpd_Error.Raise_050(i_Date  => v_Overtime.Overtime_Date,
                              i_Month => v_Overtime_Staff.Month);
        end if;
      
        z_Hpd_Overtime_Days.Insert_One(i_Company_Id       => i_Journal.Company_Id,
                                       i_Filial_Id        => i_Journal.Filial_Id,
                                       i_Staff_Id         => v_Overtime_Staff.Staff_Id,
                                       i_Overtime_Date    => v_Overtime.Overtime_Date,
                                       i_Overtime_Seconds => v_Overtime.Overtime_Seconds,
                                       i_Overtime_Id      => v_Overtime_Staff.Overtime_Id);
      end loop;
    
      Fazo.Push(v_Overtime_Ids, v_Overtime_Staff.Overtime_Id);
    end loop;
  
    Unnecessary_Overtimes_Delete(i_Company_Id   => i_Journal.Company_Id,
                                 i_Filial_Id    => i_Journal.Filial_Id,
                                 i_Journal_Id   => i_Journal.Journal_Id,
                                 i_Overtime_Ids => v_Overtime_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_Save(i_Journal Hpd_Pref.Timebook_Adjustment_Journal_Rt) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Adjustment          Hpd_Pref.Adjustment_Rt;
    v_Page_Ids            Array_Number;
  begin
    Journal_Save(i_Company_Id               => i_Journal.Company_Id,
                 i_Filial_Id                => i_Journal.Filial_Id,
                 i_Journal_Id               => i_Journal.Journal_Id,
                 i_Journal_Type_Id          => Hpd_Util.Journal_Type_Id(i_Company_Id => i_Journal.Company_Id,
                                                                        i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment),
                 i_Journal_Number           => i_Journal.Journal_Number,
                 i_Journal_Date             => i_Journal.Journal_Date,
                 i_Journal_Name             => i_Journal.Journal_Name,
                 i_Lang_Code                => i_Journal.Lang_Code,
                 i_Acceptable_Journal_Types => Array_Varchar2(Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment));
  
    r_Timebook_Adjustment.Company_Id      := i_Journal.Company_Id;
    r_Timebook_Adjustment.Filial_Id       := i_Journal.Filial_Id;
    r_Timebook_Adjustment.Journal_Id      := i_Journal.Journal_Id;
    r_Timebook_Adjustment.Division_Id     := i_Journal.Division_Id;
    r_Timebook_Adjustment.Adjustment_Date := i_Journal.Adjustment_Date;
  
    z_Hpd_Journal_Timebook_Adjustments.Save_Row(r_Timebook_Adjustment);
  
    v_Page_Ids := Array_Number();
    v_Page_Ids.Extend(i_Journal.Adjustments.Count);
  
    for i in 1 .. i_Journal.Adjustments.Count
    loop
      v_Adjustment := i_Journal.Adjustments(i);
    
      continue when v_Adjustment.Kinds.Count = 0;
    
      v_Page_Ids(i) := v_Adjustment.Page_Id;
    
      Journal_Page_Save(i_Company_Id => i_Journal.Company_Id,
                        i_Filial_Id  => i_Journal.Filial_Id,
                        i_Journal_Id => i_Journal.Journal_Id,
                        i_Page_Id    => v_Adjustment.Page_Id,
                        i_Staff_Id   => v_Adjustment.Staff_Id);
    
      delete from Hpd_Page_Adjustments q
       where q.Company_Id = i_Journal.Company_Id
         and q.Filial_Id = i_Journal.Filial_Id
         and q.Page_Id = v_Adjustment.Page_Id;
    
      for j in 1 .. v_Adjustment.Kinds.Count
      loop
        z_Hpd_Page_Adjustments.Save_One(i_Company_Id   => i_Journal.Company_Id,
                                        i_Filial_Id    => i_Journal.Filial_Id,
                                        i_Page_Id      => v_Adjustment.Page_Id,
                                        i_Kind         => v_Adjustment.Kinds(j).Kind,
                                        i_Free_Time    => v_Adjustment.Kinds(j).Free_Time,
                                        i_Overtime     => v_Adjustment.Kinds(j).Overtime,
                                        i_Turnout_Time => v_Adjustment.Kinds(j).Turnout_Time);
      end loop;
    end loop;
  
    Unnecessary_Pages_Delete(i_Company_Id => i_Journal.Company_Id,
                             i_Filial_Id  => i_Journal.Filial_Id,
                             i_Journal_Id => i_Journal.Journal_Id,
                             i_Page_Ids   => v_Page_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
    r_Journal         Hpd_Journals%rowtype;
    v_Document_Status varchar2(1);
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'Y' then
      Hpd_Error.Raise_038(r_Journal.Journal_Number);
    end if;
  
    -- Check Sign Document     
    v_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => r_Journal.Company_Id,
                                                            i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Document_Status is not null then
      if v_Document_Status <> Mdf_Pref.c_Ds_Draft then
        Hpd_Error.Raise_085(i_Document_Status => Mdf_Pref.t_Document_Status(v_Document_Status),
                            i_Journal_Number  => r_Journal.Journal_Number);
      end if;
    end if;
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Staffs_Invalid(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => i_Journal_Id);
    end if;
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
       Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Auto_Robots_Invalid(i_Company_Id => r_Journal.Company_Id,
                          i_Filial_Id  => r_Journal.Filial_Id,
                          i_Journal_Id => r_Journal.Journal_Id);
    
      Hpd_Core.Delete_Robot_Book_Transactions(i_Company_Id => r_Journal.Company_Id,
                                              i_Filial_Id  => r_Journal.Filial_Id,
                                              i_Journal_Id => r_Journal.Journal_Id);
    end if;
  
    if Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hpd_Core.Hiring_Cv_Contract_Delete(i_Company_Id => r_Journal.Company_Id,
                                         i_Filial_Id  => r_Journal.Filial_Id,
                                         i_Journal_Id => r_Journal.Journal_Id);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_070(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => Journal_Type_Name(i_Company_Id,
                                                                   r_Journal.Journal_Type_Id),
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    z_Hpd_Journals.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
  
    if v_Document_Status is not null then
      Mdf_Api.Document_Delete(i_Company_Id  => r_Journal.Company_Id,
                              i_Document_Id => r_Journal.Sign_Document_Id);
    end if;
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
       Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Journal_Repairing(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Journal_Id => i_Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
  begin
    Hpd_Core.Journal_Post(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Journal_Id   => i_Journal_Id,
                          i_Source_Table => i_Source_Table,
                          i_Source_Id    => i_Source_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  ) is
  begin
    Hpd_Core.Journal_Unpost(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Journal_Id   => i_Journal_Id,
                            i_Source_Table => i_Source_Table,
                            i_Source_Id    => i_Source_Id,
                            i_Repost       => i_Repost);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
  begin
    Hpd_Core.Timebook_Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Timebook_Id => i_Timebook_Id,
                                           i_Staff_Id    => i_Staff_Id,
                                           i_Begin_Date  => i_Begin_Date,
                                           i_End_Date    => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
  begin
    Hpd_Core.Perf_Lock_Interval_Insert(i_Company_Id    => i_Company_Id,
                                       i_Filial_Id     => i_Filial_Id,
                                       i_Staff_Plan_Id => i_Staff_Plan_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Begin_Date    => i_Begin_Date,
                                       i_End_Date      => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  ) is
  begin
    Hpd_Core.Sales_Bonus_Payment_Lock_Interval_Insert(i_Company_Id    => i_Company_Id,
                                                      i_Filial_Id     => i_Filial_Id,
                                                      i_Operation_Id  => i_Operation_Id,
                                                      i_Staff_Id      => i_Staff_Id,
                                                      i_Begin_Date    => i_Begin_Date,
                                                      i_End_Date      => i_End_Date,
                                                      i_Interval_Kind => i_Interval_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number
  ) is
  begin
    Hpd_Core.Lock_Interval_Delete(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Interval_Id => i_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Save(i_Contract Hpd_Pref.Cv_Contract_Rt) is
    r_Contract           Hpd_Cv_Contracts%rowtype;
    v_Contract_Item_Ids  Array_Number := Array_Number();
    v_Contract_File_Shas Array_Varchar2 := Array_Varchar2();
    v_Contract_Item      Hpd_Pref.Cv_Contract_Item_Rt;
    v_Contract_File      Hpd_Pref.Cv_Contract_File_Rt;
    v_Exists             boolean;
  begin
    if i_Contract.Access_To_Add_Item = 'N' and i_Contract.Items.Count = 0 then
      Hpd_Error.Raise_039(i_Contract.Contract_Id);
    end if;
  
    if z_Hpd_Cv_Contracts.Exist(i_Company_Id  => i_Contract.Company_Id,
                                i_Filial_Id   => i_Contract.Filial_Id,
                                i_Contract_Id => i_Contract.Contract_Id,
                                o_Row         => r_Contract) then
      if r_Contract.Posted = 'Y' then
        Hpd_Error.Raise_040(r_Contract.Contract_Id);
      end if;
    
      v_Exists := true;
    else
      r_Contract.Company_Id               := i_Contract.Company_Id;
      r_Contract.Filial_Id                := i_Contract.Filial_Id;
      r_Contract.Contract_Id              := i_Contract.Contract_Id;
      r_Contract.Contract_Employment_Kind := i_Contract.Contract_Employment_Kind;
    
      if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Staff_Member then
        r_Contract.Page_Id := i_Contract.Page_Id;
      end if;
    
      v_Exists := false;
    end if;
  
    r_Contract.Contract_Number    := i_Contract.Contract_Number;
    r_Contract.Division_Id        := i_Contract.Division_Id;
    r_Contract.Person_Id          := i_Contract.Person_Id;
    r_Contract.Begin_Date         := i_Contract.Begin_Date;
    r_Contract.End_Date           := i_Contract.End_Date;
    r_Contract.Contract_Kind      := i_Contract.Contract_Kind;
    r_Contract.Access_To_Add_Item := i_Contract.Access_To_Add_Item;
    r_Contract.Early_Closed_Date  := null;
    r_Contract.Early_Closed_Note  := null;
    r_Contract.Note               := i_Contract.Note;
    r_Contract.Posted             := 'N';
  
    if v_Exists then
      z_Hpd_Cv_Contracts.Update_Row(r_Contract);
    else
      if r_Contract.Contract_Number is null then
        r_Contract.Contract_Number := Md_Core.Gen_Number(i_Company_Id => i_Contract.Company_Id,
                                                         i_Filial_Id  => i_Contract.Filial_Id,
                                                         i_Table      => Zt.Hpd_Cv_Contracts,
                                                         i_Column     => z.Contract_Number);
      end if;
    
      z_Hpd_Cv_Contracts.Insert_Row(r_Contract);
    end if;
  
    v_Contract_Item_Ids.Extend(i_Contract.Items.Count);
  
    for i in 1 .. i_Contract.Items.Count
    loop
      v_Contract_Item := i_Contract.Items(i);
      v_Contract_Item_Ids(i) := v_Contract_Item.Contract_Item_Id;
    
      z_Hpd_Cv_Contract_Items.Save_One(i_Company_Id       => i_Contract.Company_Id,
                                       i_Filial_Id        => i_Contract.Filial_Id,
                                       i_Contract_Item_Id => v_Contract_Item.Contract_Item_Id,
                                       i_Contract_Id      => i_Contract.Contract_Id,
                                       i_Name             => v_Contract_Item.Name,
                                       i_Quantity         => v_Contract_Item.Quantity,
                                       i_Amount           => v_Contract_Item.Amount);
    
      z_Href_Cached_Contract_Item_Names.Insert_Try(i_Company_Id => i_Contract.Company_Id,
                                                   i_Name       => Lower(v_Contract_Item.Name));
    end loop;
  
    -- delete items
    delete from Hpd_Cv_Contract_Items q
     where q.Company_Id = i_Contract.Company_Id
       and q.Filial_Id = i_Contract.Filial_Id
       and q.Contract_Id = i_Contract.Contract_Id
       and q.Contract_Item_Id not member of v_Contract_Item_Ids;
  
    v_Contract_File_Shas.Extend(i_Contract.Files.Count);
  
    for i in 1 .. i_Contract.Files.Count
    loop
      v_Contract_File := i_Contract.Files(i);
      v_Contract_File_Shas(i) := v_Contract_File.File_Sha;
    
      z_Hpd_Cv_Contract_Files.Save_One(i_Company_Id  => i_Contract.Company_Id,
                                       i_Filial_Id   => i_Contract.Filial_Id,
                                       i_Contract_Id => i_Contract.Contract_Id,
                                       i_File_Sha    => v_Contract_File.File_Sha,
                                       i_Note        => v_Contract_File.Note);
    end loop;
  
    -- delete files
    delete from Hpd_Cv_Contract_Files q
     where q.Company_Id = i_Contract.Company_Id
       and q.Filial_Id = i_Contract.Filial_Id
       and q.Contract_Id = i_Contract.Contract_Id
       and q.File_Sha not member of v_Contract_File_Shas;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Post(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Journal_Post(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Unpost(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Journal_Unpost(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Load(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                 i_Filial_Id         => i_Filial_Id,
                                 i_Contract_Id       => i_Contract_Id,
                                 i_Early_Closed_Date => i_Early_Closed_Date,
                                 i_Early_Closed_Note => i_Early_Closed_Note);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Hpd_Core.Hiring_Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Journal_Id        => r_Page.Journal_Id,
                                        i_Early_Closed_Date => i_Early_Closed_Date,
                                        i_Early_Closed_Note => i_Early_Closed_Note);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    r_Page     Hpd_Journal_Pages%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Contract_Employment_Kind = Hpd_Pref.c_Contract_Employment_Freelancer then
      Hpd_Core.Cv_Contract_Delete(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
    else
      r_Page := z_Hpd_Journal_Pages.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r_Contract.Page_Id);
    
      Journal_Delete(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Journal_Id => r_Page.Journal_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
  begin
    Hpd_Core.Hiring_Cv_Contract_Close(i_Company_Id        => i_Company_Id,
                                      i_Filial_Id         => i_Filial_Id,
                                      i_Journal_Id        => i_Journal_Id,
                                      i_Early_Closed_Date => i_Early_Closed_Date,
                                      i_Early_Closed_Note => i_Early_Closed_Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Save
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Application_Id         number,
    i_Application_Type_Pcode varchar2
  ) is
    r_Row                 Hpd_Applications%rowtype;
    v_Application_Type_Id number;
  begin
    v_Application_Type_Id := Hpd_Util.Application_Type_Id(i_Company_Id => i_Company_Id,
                                                          i_Pcode      => i_Application_Type_Pcode);
  
    if z_Hpd_Applications.Exist_Lock(i_Company_Id     => i_Company_Id,
                                     i_Filial_Id      => i_Filial_Id,
                                     i_Application_Id => i_Application_Id,
                                     o_Row            => r_Row) then
      if r_Row.Status <> Hpd_Pref.c_Application_Status_New then
        Hpd_Error.Raise_056(i_Application_Number => r_Row.Application_Number,
                            i_Status             => r_Row.Status);
      end if;
    
      if r_Row.Application_Type_Id <> v_Application_Type_Id then
        Hpd_Error.Raise_071(i_Wrong_Application_Type    => Hpd_Util.Application_Type_Name(i_Company_Id          => i_Company_Id,
                                                                                          i_Application_Type_Id => v_Application_Type_Id),
                            i_Expected_Application_Type => Hpd_Util.Application_Type_Name(i_Company_Id          => i_Company_Id,
                                                                                          i_Application_Type_Id => r_Row.Application_Type_Id));
      end if;
    
      z_Hpd_Applications.Update_Row(r_Row);
    
      return;
    end if;
  
    r_Row.Company_Id          := i_Company_Id;
    r_Row.Filial_Id           := i_Filial_Id;
    r_Row.Application_Id      := i_Application_Id;
    r_Row.Application_Type_Id := v_Application_Type_Id;
    r_Row.Application_Number  := Md_Core.Gen_Number(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Table      => Zt.Hpd_Applications,
                                                    i_Column     => z.Application_Number);
    r_Row.Application_Date    := Trunc(sysdate);
    r_Row.Status              := Hpd_Pref.c_Application_Status_New;
  
    z_Hpd_Applications.Insert_Row(r_Row);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_Save(i_Create_Robot Hpd_Pref.Application_Create_Robot_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Create_Robot.Company_Id,
                     i_Filial_Id              => i_Create_Robot.Filial_Id,
                     i_Application_Id         => i_Create_Robot.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Create_Robot);
  
    z_Hpd_Application_Create_Robots.Save_One(i_Company_Id     => i_Create_Robot.Company_Id,
                                             i_Filial_Id      => i_Create_Robot.Filial_Id,
                                             i_Application_Id => i_Create_Robot.Application_Id,
                                             i_Name           => i_Create_Robot.Name,
                                             i_Opened_Date    => i_Create_Robot.Opened_Date,
                                             i_Division_Id    => i_Create_Robot.Division_Id,
                                             i_Job_Id         => i_Create_Robot.Job_Id,
                                             i_Quantity       => i_Create_Robot.Quantity,
                                             i_Note           => i_Create_Robot.Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_Save(i_Hiring Hpd_Pref.Application_Hiring_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Hiring.Company_Id,
                     i_Filial_Id              => i_Hiring.Filial_Id,
                     i_Application_Id         => i_Hiring.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Hiring);
  
    z_Hpd_Application_Hirings.Save_One(i_Company_Id      => i_Hiring.Company_Id,
                                       i_Filial_Id       => i_Hiring.Filial_Id,
                                       i_Application_Id  => i_Hiring.Application_Id,
                                       i_Hiring_Date     => i_Hiring.Hiring_Date,
                                       i_Robot_Id        => i_Hiring.Robot_Id,
                                       i_Note            => i_Hiring.Note,
                                       i_First_Name      => i_Hiring.First_Name,
                                       i_Last_Name       => i_Hiring.Last_Name,
                                       i_Middle_Name     => i_Hiring.Middle_Name,
                                       i_Birthday        => i_Hiring.Birthday,
                                       i_Gender          => i_Hiring.Gender,
                                       i_Phone           => i_Hiring.Phone,
                                       i_Email           => i_Hiring.Email,
                                       i_Photo_Sha       => i_Hiring.Photo_Sha,
                                       i_Address         => i_Hiring.Address,
                                       i_Legal_Address   => i_Hiring.Legal_Address,
                                       i_Region_Id       => i_Hiring.Region_Id,
                                       i_Passport_Series => i_Hiring.Passport_Series,
                                       i_Passport_Number => i_Hiring.Passport_Number,
                                       i_Npin            => i_Hiring.Npin,
                                       i_Iapa            => i_Hiring.Iapa,
                                       i_Employment_Type => i_Hiring.Employment_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_Save
  (
    i_Application_Type varchar2,
    i_Transfer         Hpd_Pref.Application_Transfer_Rt
  ) is
    v_Transfer             Hpd_Pref.Application_Transfer_Unit_Rt;
    v_Application_Unit_Ids Array_Number := Array_Number();
  begin
    Application_Save(i_Company_Id             => i_Transfer.Company_Id,
                     i_Filial_Id              => i_Transfer.Filial_Id,
                     i_Application_Id         => i_Transfer.Application_Id,
                     i_Application_Type_Pcode => i_Application_Type);
  
    if i_Application_Type = Hpd_Pref.c_Pcode_Application_Type_Transfer and
       i_Transfer.Transfer_Units.Count <> 1 then
      Hpd_Error.Raise_080(Hpd_Util.Application_Type_Name(i_Company_Id          => i_Transfer.Company_Id,
                                                         i_Application_Type_Id => i_Application_Type));
    end if;
  
    v_Application_Unit_Ids.Extend(i_Transfer.Transfer_Units.Count);
  
    for i in 1 .. i_Transfer.Transfer_Units.Count
    loop
      v_Transfer := i_Transfer.Transfer_Units(i);
    
      z_Hpd_Application_Transfers.Save_One(i_Company_Id          => i_Transfer.Company_Id,
                                           i_Filial_Id           => i_Transfer.Filial_Id,
                                           i_Application_Unit_Id => v_Transfer.Application_Unit_Id,
                                           i_Application_Id      => i_Transfer.Application_Id,
                                           i_Staff_Id            => v_Transfer.Staff_Id,
                                           i_Transfer_Begin      => v_Transfer.Transfer_Begin,
                                           i_Robot_Id            => v_Transfer.Robot_Id,
                                           i_Note                => v_Transfer.Note);
    
      v_Application_Unit_Ids(i) := v_Transfer.Application_Unit_Id;
    end loop;
  
    delete from Hpd_Application_Transfers t
     where t.Company_Id = i_Transfer.Company_Id
       and t.Filial_Id = i_Transfer.Filial_Id
       and t.Application_Id = i_Transfer.Application_Id
       and t.Application_Unit_Id not member of v_Application_Unit_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_Save(i_Dismissal Hpd_Pref.Application_Dismissal_Rt) is
  begin
    Application_Save(i_Company_Id             => i_Dismissal.Company_Id,
                     i_Filial_Id              => i_Dismissal.Filial_Id,
                     i_Application_Id         => i_Dismissal.Application_Id,
                     i_Application_Type_Pcode => Hpd_Pref.c_Pcode_Application_Type_Dismissal);
  
    z_Hpd_Application_Dismissals.Save_One(i_Company_Id          => i_Dismissal.Company_Id,
                                          i_Filial_Id           => i_Dismissal.Filial_Id,
                                          i_Application_Id      => i_Dismissal.Application_Id,
                                          i_Staff_Id            => i_Dismissal.Staff_Id,
                                          i_Dismissal_Date      => i_Dismissal.Dismissal_Date,
                                          i_Dismissal_Reason_Id => i_Dismissal.Dismissal_Reason_Id,
                                          i_Note                => i_Dismissal.Note);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_New then
      Hpd_Error.Raise_055(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Delete_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_Waiting then
      Hpd_Error.Raise_058(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_New));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_New),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Waiting
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_New,
        Hpd_Pref.c_Application_Status_Approved,
        Hpd_Pref.c_Application_Status_Canceled) then
      Hpd_Error.Raise_059(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    if r_Application.Application_Type_Id =
       Hpd_Util.Application_Type_Id(i_Company_Id => i_Company_Id,
                                    i_Pcode      => Hpd_Pref.c_Pcode_Application_Type_Transfer_Multiple) then
      declare
        v_Count number;
      begin
        select count(1)
          into v_Count
          from Hpd_Application_Transfers t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id;
      
        if v_Count < 1 then
          Hpd_Error.Raise_079(i_Application_Number => r_Application.Application_Number);
        end if;
      end;
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Waiting));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    if r_Application.Status in
       (Hpd_Pref.c_Application_Status_New, Hpd_Pref.c_Application_Status_Canceled) then
      v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
    else
      v_Grants                 := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
      r_Application.Created_By := null;
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Waiting),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Approved
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_Waiting, Hpd_Pref.c_Application_Status_In_Progress) then
      Hpd_Error.Raise_060(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Approved));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr);
  
    if r_Application.Status = Hpd_Pref.c_Application_Status_Waiting then
      Fazo.Push(v_Grants, v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager);
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Approved),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_In_Progress
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
    if r_Application.Status not in
       (Hpd_Pref.c_Application_Status_Approved, Hpd_Pref.c_Application_Status_Completed) then
      Hpd_Error.Raise_061(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_In_Progress));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
  
    if r_Application.Status = Hpd_Pref.c_Application_Status_Approved then
      v_Grants                 := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr);
      r_Application.Created_By := null;
    else
      v_Grants := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                 v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
    end if;
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_In_Progress),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Completed
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_062(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    if Hpd_Util.Application_Has_Result(i_Company_Id     => i_Company_Id,
                                       i_Filial_Id      => i_Filial_Id,
                                       i_Application_Id => i_Application_Id) <> 'Y' then
      Hpd_Error.Raise_065(r_Application.Application_Number);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Completed));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Hr,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Completed),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Status_Canceled
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Closing_Note   varchar2
  ) is
    r_Application Hpd_Applications%rowtype;
    v_Grants      Array_Varchar2;
    v_Grant_Part  varchar2(200);
    v_User_Id     number := Md_Env.User_Id;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_Waiting then
      Hpd_Error.Raise_063(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Applications.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Application_Id => i_Application_Id,
                                  i_Status         => Option_Varchar2(Hpd_Pref.c_Application_Status_Canceled),
                                  i_Closing_Note   => Option_Varchar2(i_Closing_Note));
  
    -- notification send application status change
    v_Grant_Part := Hpd_Util.Application_Grant_Part(i_Company_Id          => r_Application.Company_Id,
                                                    i_Application_Type_Id => r_Application.Application_Type_Id);
    v_Grants     := Array_Varchar2(v_Grant_Part || Hpd_Pref.c_App_Grantee_Manager,
                                   v_Grant_Part || Hpd_Pref.c_App_Grantee_Applicant);
  
    Hpd_Core.Send_Application_Notification(i_Company_Id     => r_Application.Company_Id,
                                           i_Filial_Id      => r_Application.Filial_Id,
                                           i_Title          => Hpd_Util.t_Notification_Title_Application_Status_Changed(i_Company_Id          => r_Application.Company_Id,
                                                                                                                        i_User_Id             => v_User_Id,
                                                                                                                        i_Application_Type_Id => r_Application.Application_Type_Id,
                                                                                                                        i_Application_Number  => r_Application.Application_Number,
                                                                                                                        i_Old_Status          => r_Application.Status,
                                                                                                                        i_New_Status          => Hpd_Pref.c_Application_Status_Canceled),
                                           i_Grants         => v_Grants,
                                           i_Uri            => Hpd_Pref.c_Uri_Application_Part ||
                                                               v_Grant_Part ||
                                                               Hpd_Pref.c_App_Form_Action_View,
                                           i_Uri_Param      => Fazo.Zip_Map(Lower(z.Application_Id),
                                                                            r_Application.Application_Id),
                                           i_Except_User_Id => v_User_Id,
                                           i_Created_By     => r_Application.Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Robot
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Robot_Id       number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Application_Robots.Insert_One(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Application_Id => i_Application_Id,
                                        i_Robot_Id       => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Employee
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Employee_Id    number
  ) is
    r_Application Hpd_Applications%rowtype;
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    z_Hpd_Application_Hirings.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Application_Id => i_Application_Id,
                                         i_Employee_Id    => Option_Number(i_Employee_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Bind_Journal
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Journal_Id     number
  ) is
    r_Application       Hpd_Applications%rowtype;
    r_Journal           Hpd_Journals%rowtype;
    v_Application_Pcode varchar2(50);
  begin
    r_Application := z_Hpd_Applications.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Application_Id => i_Application_Id);
  
    if r_Application.Status <> Hpd_Pref.c_Application_Status_In_Progress then
      Hpd_Error.Raise_064(i_Application_Number => r_Application.Application_Number,
                          i_Status             => r_Application.Status);
    end if;
  
    r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Journal_Id => i_Journal_Id);
  
    if z_Hpd_Application_Journals.Exist_Lock(i_Company_Id     => i_Company_Id,
                                             i_Filial_Id      => i_Filial_Id,
                                             i_Application_Id => i_Application_Id) then
      Hpd_Error.Raise_067(i_Application_Number => r_Application.Application_Number,
                          i_Journal_Number     => r_Journal.Journal_Number);
    end if;
  
    v_Application_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, --
                           i_Application_Type_Id => r_Application.Application_Type_Id).Pcode;
  
    -- TODO: assert: journal_type matches application_type
  
    if v_Application_Pcode = Hpd_Pref.c_Pcode_Application_Type_Hiring then
      declare
        v_Application_Employee_Name varchar2(1000);
        v_Journal_Employee_Name     varchar2(1000);
        v_Dummy                     number;
      begin
        select 1
          into v_Dummy
          from Hpd_Journal_Employees t
          join Hpd_Application_Hirings q
            on q.Company_Id = t.Company_Id
           and q.Filial_Id = t.Filial_Id
           and q.Application_Id = i_Application_Id
           and q.Employee_Id = t.Employee_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Journal_Id = i_Journal_Id
           and exists
         (select 1
                  from Hpd_Journals k
                 where k.Company_Id = t.Company_Id
                   and k.Filial_Id = t.Filial_Id
                   and k.Journal_Id = t.Journal_Id
                   and exists (select 1
                          from Hpd_Journal_Types h
                         where h.Company_Id = k.Company_Id
                           and h.Journal_Type_Id = k.Journal_Type_Id
                           and h.Pcode = Hpd_Pref.c_Pcode_Journal_Type_Hiring))
           and Rownum = 1;
      exception
        when No_Data_Found then
          select (select q.Name
                    from Mr_Natural_Persons q
                   where q.Company_Id = t.Company_Id
                     and q.Person_Id = t.Employee_Id)
            into v_Application_Employee_Name
            from Hpd_Application_Hirings t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Application_Id = i_Application_Id;
        
          select (select q.Name
                    from Mr_Natural_Persons q
                   where q.Company_Id = t.Company_Id
                     and q.Person_Id = t.Employee_Id)
            into v_Journal_Employee_Name
            from Hpd_Journal_Employees t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Journal_Id = r_Journal.Journal_Id
             and Rownum = 1;
        
          Hpd_Error.Raise_066(i_Application_Number        => r_Application.Application_Number,
                              i_Journal_Number            => r_Journal.Journal_Number,
                              i_Journal_Employee_Name     => v_Journal_Employee_Name,
                              i_Application_Employee_Name => v_Application_Employee_Name);
      end;
    end if;
  
    z_Hpd_Application_Journals.Insert_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Application_Id => i_Application_Id,
                                          i_Journal_Id     => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sign_Template_Save(i_Sign_Template Hpd_Pref.Sign_Template_Rt) is
  begin
    Mdf_Api.Template_Save(i_Sign_Template.Template);
  
    z_Hpd_Sign_Templates.Save_One(i_Company_Id      => i_Sign_Template.Template.Company_Id,
                                  i_Filial_Id       => i_Sign_Template.Template.Filial_Id,
                                  i_Template_Id     => i_Sign_Template.Template.Sign_Id,
                                  i_Journal_Type_Id => i_Sign_Template.Journal_Type_Id);
  end;

end Hpd_Api;
/

create or replace package Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Currency_Id number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache;
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Robot_Book_Transactions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
end Hpd_Core;
/
create or replace package body Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Staffs p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Staffs p
        (p.Company_Id, p.Filial_Id, p.Staff_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Robots p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Robot_Id = i_Robot_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Robots p
        (p.Company_Id, p.Filial_Id, p.Robot_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Robot_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Currency_Id number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  ) is
    r_Setting Hrm_Settings%rowtype;
    v_Robot   Hrm_Pref.Robot_Rt;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    Update_Insert_Valid_Auto_Robot(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot.Robot_Id,
                                   i_Journal_Id => i_Journal_Id,
                                   i_Page_Id    => i_Page_Id);
  
    Hrm_Util.Robot_New(o_Robot                    => v_Robot,
                       i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Robot_Id                 => i_Robot.Robot_Id,
                       i_Name                     => Hrm_Util.Robot_Name(i_Company_Id  => i_Company_Id,
                                                                         i_Filial_Id   => i_Filial_Id,
                                                                         i_Robot_Id    => i_Robot.Robot_Id,
                                                                         i_Division_Id => i_Robot.Division_Id,
                                                                         i_Job_Id      => i_Robot.Job_Id,
                                                                         i_Rank_Id     => i_Robot.Rank_Id),
                       i_Code                     => null,
                       i_Robot_Group_Id           => null,
                       i_Division_Id              => i_Robot.Division_Id,
                       i_Job_Id                   => i_Robot.Job_Id,
                       i_Org_Unit_Id              => i_Robot.Org_Unit_Id,
                       i_State                    => 'A',
                       i_Opened_Date              => i_Open_Date,
                       i_Closed_Date              => i_Close_Date,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Rank_Id                  => i_Robot.Rank_Id,
                       i_Vacation_Days_Limit      => i_Days_Limit,
                       i_Labor_Function_Id        => null,
                       i_Description              => null,
                       i_Hiring_Condition         => null,
                       i_Contractual_Wage         => case
                                                       when i_Robot.Wage_Scale_Id is not null then
                                                        'N'
                                                       else
                                                        'Y'
                                                     end,
                       i_Position_Employment_Kind => case
                                                       when i_Robot.Employment_Type =
                                                            Hpd_Pref.c_Employment_Type_Contractor then
                                                        Hrm_Pref.c_Position_Employment_Contractor
                                                       else
                                                        Hrm_Pref.c_Position_Employment_Staff
                                                     end,
                       i_Wage_Scale_Id            => i_Robot.Wage_Scale_Id,
                       i_Currency_Id              => i_Currency_Id,
                       i_Access_Hidden_Salary     => 'N');
    v_Robot.Indicators := i_Indicators;
    v_Robot.Oper_Types := i_Oper_Types;
  
    Hrm_Api.Robot_Save(v_Robot,
                       i_Self => z_Hpd_Journal_Pages.Lock_Load(i_Company_Id => i_Company_Id, --
                                 i_Filial_Id => i_Filial_Id, --
                                 i_Page_Id => i_Page_Id).Employee_Id = Md_Env.User_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Robot_Id
                from Hpd_Auto_Created_Robots p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Journal_Id = i_Journal_Id
                 and p.Valid = 'N')
    loop
      Hrm_Api.Robot_Delete(i_Company_Id => r.Company_Id,
                           i_Filial_Id  => r.Filial_Id,
                           i_Robot_Id   => r.Robot_Id);
    end loop;
  
    delete Hpd_Auto_Created_Robots;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'A' then
      Hpd_Error.Raise_001(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => i_Staff_Id));
    end if;
  
    z_Href_Staffs.Delete_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  ) is
    r_Staff     Href_Staffs%rowtype;
    r_Robot     Mrf_Robots%rowtype;
    r_Hrm_Robot Hrm_Robots%rowtype;
    r_Employee  Mhr_Employees%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Employee_Id => r_Staff.Employee_Id);
  
    z_Href_Staffs.Update_One(i_Company_Id      => i_Company_Id,
                             i_Filial_Id       => i_Filial_Id,
                             i_Staff_Id        => i_Staff_Id,
                             i_Robot_Id        => Option_Number(r_Robot.Robot_Id),
                             i_Division_Id     => Option_Number(r_Robot.Division_Id),
                             i_Job_Id          => Option_Number(r_Robot.Job_Id),
                             i_Org_Unit_Id     => Option_Number(r_Hrm_Robot.Org_Unit_Id),
                             i_Fte             => Option_Number(i_Fte),
                             i_Fte_Id          => Option_Number(i_Fte_Id),
                             i_Rank_Id         => Option_Number(i_Rank_Id),
                             i_Schedule_Id     => Option_Number(i_Schedule_Id),
                             i_Employment_Type => Option_Varchar2(i_Employment_Type));
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and
       not (Fazo.Equal(r_Employee.Division_Id, r_Robot.Division_Id) and
        Fazo.Equal(r_Employee.Job_Id, r_Robot.Job_Id) and --
        Fazo.Equal(r_Employee.Rank_Id, i_Rank_Id)) --
     then
      Href_Api.Employee_Update(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Employee_Id => r_Staff.Employee_Id,
                               i_Division_Id => r_Robot.Division_Id,
                               i_Job_Id      => r_Robot.Job_Id,
                               i_Rank_Id     => i_Rank_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) is
    v_Dismissal_Date       date;
    v_Staff_Id             number;
    v_Intersected_Staff_Id number;
    v_Intersection_Date    date;
  begin
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                 and q.State = 'A'
               order by q.Hiring_Date)
    loop
      if v_Dismissal_Date is not null and r.Hiring_Date <= v_Dismissal_Date then
        v_Intersected_Staff_Id := r.Staff_Id;
        v_Intersection_Date    := Least(Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date),
                                        v_Dismissal_Date);
        exit;
      end if;
      v_Staff_Id       := r.Staff_Id;
      v_Dismissal_Date := Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date);
    end loop;
  
    if v_Intersected_Staff_Id is not null then
      Hpd_Error.Raise_002(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => v_Staff_Id),
                          i_Intersection_Date => v_Intersection_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    r_Robot        Hpd_Trans_Robots%rowtype;
    r_Rank         Hpd_Trans_Ranks%rowtype;
    r_Schedule     Hpd_Trans_Schedules%rowtype;
    v_Date         date := Trunc(sysdate);
    v_Desired_Date date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'P' then
      return;
    end if;
  
    v_Desired_Date := Greatest(r_Staff.Hiring_Date,
                               Least(v_Date, Nvl(r_Staff.Dismissal_Date, v_Date)));
  
    r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Period     => v_Desired_Date);
  
    r_Rank := Hpd_Util.Closest_Rank(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Period     => v_Desired_Date);
  
    r_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Period     => v_Desired_Date);
  
    Staff_Update(i_Company_Id      => i_Company_Id,
                 i_Filial_Id       => i_Filial_Id,
                 i_Staff_Id        => i_Staff_Id,
                 i_Robot_Id        => r_Robot.Robot_Id,
                 i_Fte             => r_Robot.Fte,
                 i_Fte_Id          => r_Robot.Fte_Id,
                 i_Rank_Id         => r_Rank.Rank_Id,
                 i_Schedule_Id     => r_Schedule.Schedule_Id,
                 i_Employment_Type => r_Robot.Employment_Type);
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and --
       r_Staff.Dismissal_Date < v_Date then
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = r_Staff.Employee_Id)
      loop
        Htt_Core.Location_Remove_Person(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Location_Id => r.Location_Id,
                                        i_Person_Id   => r.Person_Id);
      end loop;
    
      if z_Md_User_Filials.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_User_Id    => r_Staff.Employee_Id,
                                      i_Filial_Id  => i_Filial_Id) then
        Md_Api.User_Remove_Filial(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => r_Staff.Employee_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Remove_Roles => false);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for St in (select *
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date - 1)
                  order by q.Hiring_Date)
      loop
        Staff_Refresh_Cache(i_Company_Id => St.Company_Id,
                            i_Filial_Id  => St.Filial_Id,
                            i_Staff_Id   => St.Staff_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Staff_Refresh_Cache is
  begin
    for r in (select q.*
                from Hpd_Journal_Page_Cache q)
    loop
      Staff_Refresh_Cache(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Person_Locations
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Employee_Id
                from Hpd_Journal_Page_Cache p
               group by p.Company_Id, p.Filial_Id, p.Employee_Id)
    loop
      Htt_Core.Person_Sync_Locations(i_Company_Id => r.Company_Id,
                                     i_Filial_Id  => r.Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Staff_Id
                from Hpd_Journal_Page_Cache p)
    loop
      Hrm_Core.Sync_Division_Managers(i_Company_Id => r.Company_Id,
                                      i_Filial_Id  => r.Filial_Id,
                                      i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissed_To_Candidate
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.*, Ds.Employment_Source_Id
                from Hpd_Journal_Page_Cache p
                join Hpd_Dismissal_Transactions Dt
                  on Dt.Company_Id = p.Company_Id
                 and Dt.Filial_Id = p.Filial_Id
                 and Dt.Staff_Id = p.Staff_Id
                join Hpd_Dismissals Ds
                  on Ds.Company_Id = Dt.Company_Id
                 and Ds.Filial_Id = Dt.Filial_Id
                 and Ds.Page_Id = Dt.Page_Id)
    loop
      Href_Core.Dismissed_Candidate_Save(i_Company_Id           => r.Company_Id,
                                         i_Filial_Id            => r.Filial_Id,
                                         i_Staff_Id             => r.Staff_Id,
                                         i_Employment_Source_Id => r.Employment_Source_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Journal_Staff_Refresh_Cache;
    end if;
  
    Sync_Person_Locations(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Sync_Division_Managers(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Dismissed_To_Candidate(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    delete Hpd_Journal_Page_Cache;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fill_Journal_Staff_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    insert into Hpd_Journal_Page_Cache
      (Company_Id, Filial_Id, Staff_Id, Employee_Id)
      select p.Company_Id, p.Filial_Id, p.Staff_Id, p.Employee_Id
        from Hpd_Journal_Pages p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Journal_Id = i_Journal_Id
         and not exists (select *
                from Hpd_Journal_Page_Cache q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache is
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Href_Pref.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Staff_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Robot_Person_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Sync_Division_Managers(Cmp.Company_Id);
      
        Htt_Core.Person_Sync_Locations(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Turnover_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Days_Kind  varchar2,
    i_Days_Count number
  ) is
    v_Planned_Days number;
    v_Used_Days    number := 0;
    v_Periods      Array_Date;
  
    --------------------------------------------------
    Procedure Insert_Turnover is
      g Hpd_Vacation_Turnover%rowtype;
    begin
      for r in (select *
                  from (select *
                          from Hpd_Vacation_Turnover t
                         where t.Company_Id = i_Company_Id
                           and t.Filial_Id = i_Filial_Id
                           and t.Staff_Id = i_Staff_Id
                           and t.Period < i_Begin_Date
                           and t.Period >= Trunc(i_Begin_Date, 'yyyy')
                         order by t.Period desc)
                 where Rownum = 1)
      loop
        g              := r;
        g.Period       := i_Begin_Date;
        g.Planned_Days := Nvl(v_Planned_Days, g.Planned_Days);
        g.Used_Days    := g.Used_Days + v_Used_Days;
      
        z_Hpd_Vacation_Turnover.Insert_Row(g);
        return;
      end loop;
    
      g.Company_Id   := i_Company_Id;
      g.Filial_Id    := i_Filial_Id;
      g.Staff_Id     := i_Staff_Id;
      g.Period       := i_Begin_Date;
      g.Planned_Days := Coalesce(v_Planned_Days,
                                 Hpd_Util.Get_Closest_Vacation_Days_Limit(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id,
                                                                          i_Staff_Id   => i_Staff_Id,
                                                                          i_Period     => i_Begin_Date),
                                 0);
      g.Used_Days    := v_Used_Days;
    
      z_Hpd_Vacation_Turnover.Insert_Row(g);
    end;
  begin
    case i_Days_Kind
      when Hpd_Pref.c_Vacation_Turnover_Planned_Days then
        v_Planned_Days := i_Days_Count;
      when Hpd_Pref.c_Vacation_Turnover_Used_Days then
        v_Used_Days := i_Days_Count;
      else
        Hpd_Error.Raise_003;
    end case;
  
    update Hpd_Vacation_Turnover Lt
       set Lt.Planned_Days = Nvl(v_Planned_Days, Lt.Planned_Days),
           Lt.Used_Days    = Lt.Used_Days + v_Used_Days
     where Lt.Company_Id = i_Company_Id
       and Lt.Filial_Id = i_Filial_Id
       and Lt.Staff_Id = i_Staff_Id
       and Lt.Period >= i_Begin_Date
       and (i_End_Date is null or Lt.Period <= i_End_Date)
    returning Lt.Period bulk collect into v_Periods;
  
    if i_Begin_Date not member of v_Periods then
      Insert_Turnover;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Default_Calendar_Id number;
    v_Vacation_Tk_Id      number;
    v_Official_Days_Cnt   number;
    v_Vacation_Days_Cnt   number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Days_Cnt := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Calendar_Id => v_Default_Calendar_Id,
                                                             i_Begin_Date  => i_Begin_Date,
                                                             i_End_Date    => i_End_Date);
  
    select count(*)
      into v_Vacation_Days_Cnt
      from Hpd_Timeoff_Days p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timeoff_Date between i_Begin_Date and i_End_Date
       and p.Time_Kind_Id = v_Vacation_Tk_Id
       and p.Turnout_Locked = 'N';
  
    return Greatest(v_Vacation_Days_Cnt - v_Official_Days_Cnt, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Min_Cloned date;
  
    --------------------------------------------------
    Function Limit_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Agreements p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
         and p.Period < i_Start_Date
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Limit_Exists then
      return;
    end if;
  
    select Nvl(min(q.Period), Href_Pref.c_Max_Date)
      into v_Min_Cloned
      from Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    for r in (select p.*
                from Hpd_Journal_Timeoffs p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Begin_Date >= i_Start_Date
                 and p.Begin_Date < v_Min_Cloned
                 and exists (select *
                        from Hpd_Vacations q
                       where q.Company_Id = p.Company_Id
                         and q.Filial_Id = p.Filial_Id
                         and q.Timeoff_Id = p.Timeoff_Id))
    loop
      Spend_Vacation_Days(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id,
                          i_Begin_Date => r.Begin_Date,
                          i_End_Date   => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Vacation_Turnovers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Min_Date   date;
    v_Days_Count number;
  begin
    select min(q.Period)
      into v_Min_Date
      from Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    delete Hpd_Vacation_Turnover p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Period < Nvl(v_Min_Date, Href_Pref.c_Max_Date);
  
    if sql%rowcount > 0 and v_Min_Date is not null then
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => Trunc(v_Min_Date, 'yyyy'),
                                         i_End_Date   => v_Min_Date - 1);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Min_Date,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Min_Date),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => -v_Days_Count);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Vacation_Turnover
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Staff_Name Mr_Natural_Persons.Name%type;
    v_Period     date;
    v_Planned    number;
    v_Used       number;
  begin
    v_Staff_Name := Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
  
    select Qr.Period, Qr.Planned_Days, Qr.Used_Days
      into v_Period, v_Planned, v_Used
      from (select *
              from Hpd_Vacation_Turnover p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Staff_Id = i_Staff_Id
               and p.Free_Days < 0
             order by p.Period) Qr
     where Rownum = 1;
  
    Hpd_Error.Raise_004(i_Staff_Name    => v_Staff_Name,
                        i_Exceed_Date   => v_Period,
                        i_Exceed_Amount => v_Used - v_Planned);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Clone
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date
  ) is
  begin
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  
    insert into Hpd_Cloned_Agreements
      (Company_Id, Filial_Id, Staff_Id, Trans_Type, Period, Trans_Id, Action)
      select q.Company_Id, q.Filial_Id, q.Staff_Id, q.Trans_Type, q.Period, q.Trans_Id, q.Action
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period >= i_Begin_Date;
  
    delete Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Period >= i_Begin_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) is
    c_Format constant varchar2(20) := 'yyyymmdd';
    v_Start          date := i_Start_Date;
    f_Date_Set       Fazo.Boolean_Code_Aat;
    v_Key            varchar2(100);
    r_Trans          Hpd_Transactions%rowtype;
    r_Last_Trans     Hpd_Transactions%rowtype;
    v_Dismissal_Date date;
  begin
    f_Date_Set(to_char(v_Start, c_Format)) := true;
  
    for r in (select q.Begin_Date, q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.Begin_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.Begin_Date, c_Format)) := true;
    
      if r.End_Date is not null then
        f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
      end if;
    end loop;
  
    for r in (select q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.End_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
    end loop;
  
    for r in (select q.Dismissal_Date
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted)
    loop
      if v_Dismissal_Date is not null then
        Hpd_Error.Raise_005(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_First_Dismissal  => v_Dismissal_Date,
                            i_Second_Dismissal => r.Dismissal_Date);
      end if;
    
      f_Date_Set(to_char(r.Dismissal_Date, c_Format)) := true;
      v_Dismissal_Date := r.Dismissal_Date;
    end loop;
  
    Agreement_Clone(i_Company_Id => i_Company_Id, --
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type,
                    i_Begin_Date => v_Start);
  
    v_Key := f_Date_Set.First;
  
    r_Last_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Trans_Type => i_Trans_Type,
                                                      i_Period     => to_date(v_Key, c_Format) - 1);
    while v_Key is not null
    loop
      v_Start := to_date(v_Key, c_Format);
    
      if v_Start = v_Dismissal_Date then
        if r_Last_Trans.Trans_Id is not null then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => null,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Stop);
        end if;
      
        exit;
      end if;
    
      r_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => v_Start);
    
      if r_Trans.Trans_Id is not null then
        if not Fazo.Equal(r_Trans.Trans_Id, r_Last_Trans.Trans_Id) then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => r_Trans.Trans_Id,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Continue);
        end if;
      
        r_Last_Trans := r_Trans;
      end if;
    
      v_Key := f_Date_Set.Next(v_Key);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Robot_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    r_Robot            Hpd_Trans_Robots%rowtype;
    v_Last_Trans_Id    number;
    v_Robot_Trans_Id   number;
    v_Last_Action      varchar2(1);
    v_Position_Booking varchar2(1) := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Position_Booking;
  begin
    -- clear robot transactions
    for r in (select q.Trans_Id, q.Robot_Id
                from Hrm_Robot_Transactions q
                join Hpd_Robot_Trans_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Trans_Id = w.Robot_Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and w.Staff_Id = i_Staff_Id
                 and q.Trans_Date >= i_Start_Date)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    Hpd_Util.Closest_Trans_Info(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                i_Period     => i_Start_Date - 1,
                                o_Trans_Id   => v_Last_Trans_Id,
                                o_Action     => v_Last_Action);
  
    if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
      r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Last_Trans_Id);
    end if;
  
    for r in (select *
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Robot
                 and q.Period >= i_Start_Date
               order by q.Period)
    loop
      if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Robot_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Robot_Id    => r_Robot.Robot_Id,
                                                    i_Occupy_Date => r.Period,
                                                    i_Fte         => r_Robot.Fte,
                                                    i_Tag         => v_Last_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => r.Trans_Id);
      
        v_Robot_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Robot_Id    => r_Robot.Robot_Id,
                                                  i_Occupy_Date => r.Period,
                                                  i_Fte         => r_Robot.Fte,
                                                  i_Tag         => r.Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      v_Last_Trans_Id := r.Trans_Id;
      v_Last_Action   := r.Action;
    end loop;
  
    if v_Position_Booking = 'Y' then
      for r in (select q.Robot_Id, --
                       Nvl((select f.Fte_Value
                             from Href_Ftes f
                            where f.Company_Id = q.Company_Id
                              and f.Fte_Id = q.Fte_Id),
                           q.Fte) Fte,
                       q.Page_Id,
                       d.Begin_Date,
                       d.End_Date
                  from Hpd_Page_Robots q
                  join Hpd_Journal_Pages p
                    on p.Company_Id = q.Company_Id
                   and p.Filial_Id = q.Filial_Id
                   and p.Page_Id = q.Page_Id
                   and p.Staff_Id = i_Staff_Id
                  join Hpd_Journals j
                    on j.Company_Id = p.Company_Id
                   and j.Filial_Id = p.Filial_Id
                   and j.Journal_Id = p.Journal_Id
                   and j.Posted = 'N'
                  join (select h.Company_Id, --
                              h.Filial_Id,
                              h.Page_Id,
                              h.Hiring_Date    Begin_Date,
                              h.Dismissal_Date End_Date
                         from Hpd_Hirings h
                       union
                       select t.Company_Id,
                              t.Filial_Id,
                              t.Page_Id,
                              t.Transfer_Begin Begin_Date,
                              t.Transfer_End   End_Date
                         from Hpd_Transfers t) d
                    on d.Company_Id = q.Company_Id
                   and d.Filial_Id = q.Filial_Id
                   and d.Page_Id = q.Page_Id
                   and d.Begin_Date >= i_Start_Date
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Is_Booked = 'Y')
      loop
        v_Robot_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Robot_Id    => r.Robot_Id,
                                                  i_Occupy_Date => r.Begin_Date,
                                                  i_Fte         => r.Fte,
                                                  i_Is_Booked   => true,
                                                  i_Tag         => r.Page_Id);
      
        z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Page_Id    => r.Page_Id,
                                           i_Trans_Id   => v_Robot_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      
        if r.End_Date is not null then
          v_Robot_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Robot_Id    => r.Robot_Id,
                                                      i_Occupy_Date => r.End_Date + 1,
                                                      i_Fte         => r.Fte,
                                                      i_Is_Booked   => true,
                                                      i_Tag         => r.Page_Id);
        
          z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Page_Id    => r.Page_Id,
                                             i_Trans_Id   => v_Robot_Trans_Id);
        
          z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                            i_Filial_Id      => i_Filial_Id,
                                            i_Robot_Trans_Id => v_Robot_Trans_Id,
                                            i_Staff_Id       => i_Staff_Id);
        end if;
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Schedule_Agreements
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Schedule_Id number;
    v_Interval    Hpd_Pref.Transaction_Part_Rt;
  begin
    for i in 1 .. i_Changed_Intervals.Count
    loop
      v_Interval := i_Changed_Intervals(i);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Interval.Part_Begin);
    
      Htt_Core.Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Schedule_Id => v_Schedule_Id,
                                     i_Begin_Date  => v_Interval.Part_Begin,
                                     i_End_Date    => v_Interval.Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Vacation_Limit_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Weighted_Plan_Sum number;
    v_Period_Plan       number := 0;
    v_Year_Begin        date;
    v_Year_End          date;
  begin
    for r in (select p.Days_Limit,
                     Greatest(q.Period, Trunc(i_Start_Date, 'yyyy')) Period_Begin,
                     Lead(q.Period) Over(order by q.Period) - 1 Period_End
                from Hpd_Agreements q
                join Hpd_Trans_Vacation_Limits p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Trans_Id = q.Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                 and q.Action = Hpd_Pref.c_Transaction_Action_Continue
                 and (q.Period >= Trunc(i_Start_Date, 'yyyy') or
                     q.Period = (select max(k.Period)
                                    from Hpd_Agreements k
                                   where k.Company_Id = i_Company_Id
                                     and k.Filial_Id = i_Filial_Id
                                     and k.Staff_Id = i_Staff_Id
                                     and k.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                                     and k.Period <= Trunc(i_Start_Date, 'yyyy')))
               order by q.Period)
    loop
      v_Year_Begin  := Trunc(r.Period_Begin, 'yyyy');
      v_Year_End    := Htt_Util.Year_Last_Day(r.Period_Begin);
      v_Period_Plan := r.Days_Limit * (v_Year_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := case
                               when r.Period_Begin <> v_Year_Begin then
                                Nvl(v_Weighted_Plan_Sum, r.Days_Limit * (r.Period_Begin - v_Year_Begin))
                               else
                                0
                             end;
    
      while Trunc(r.Period_Begin, 'yyyy') <> Trunc(r.Period_End, 'yyyy') or r.Period_End is null
      loop
        Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => r.Period_Begin,
                                   i_End_Date   => v_Year_End,
                                   i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                   i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                   (v_Year_End - v_Year_Begin + 1));
      
        r.Period_Begin      := v_Year_End + 1;
        v_Year_Begin        := Trunc(r.Period_Begin, 'yyyy');
        v_Year_End          := Htt_Util.Year_Last_Day(r.Period_Begin);
        v_Weighted_Plan_Sum := 0;
        v_Period_Plan       := r.Days_Limit * (v_Year_End - v_Year_Begin + 1);
      
        exit when r.Period_End is null;
      end loop;
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => r.Period_Begin,
                                 i_End_Date   => r.Period_End,
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                 i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                 (v_Year_End - v_Year_Begin + 1));
    
      v_Period_Plan := r.Days_Limit * (r.Period_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := v_Weighted_Plan_Sum + v_Period_Plan;
    end loop;
  
    Delete_Vacation_Turnovers(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Staff_Id   => i_Staff_Id);
  
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Start_Date => i_Start_Date);
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Changed_Intervals
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) return Hpd_Pref.Transaction_Part_Nt is
    v_Last_Trans_Id number;
    v_Orig_Code     varchar2(4000);
    v_Clone_Code    varchar2(4000);
    v_Part          Hpd_Pref.Transaction_Part_Rt;
    result          Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
  begin
    v_Last_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => i_Start_Date - 1);
  
    v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => v_Last_Trans_Id,
                                           i_Trans_Type => i_Trans_Type);
  
    v_Clone_Code := v_Orig_Code;
  
    for r in (select Nvl(p.Period, q.Period) Period_Start,
                     Lead(Nvl(p.Period, q.Period)) --
                     Over(order by Nvl(p.Period, q.Period)) - 1 Period_End,
                     p.Trans_Id,
                     q.Trans_Id Clone_Trans_Id,
                     p.Action,
                     q.Action Clone_Action
                from (select *
                        from Hpd_Agreements Og
                       where Og.Company_Id = i_Company_Id
                         and Og.Filial_Id = i_Filial_Id
                         and Og.Staff_Id = i_Staff_Id
                         and Og.Trans_Type = i_Trans_Type
                         and Og.Period >= i_Start_Date) p
                full join (select *
                            from Hpd_Cloned_Agreements Cl
                           where Cl.Company_Id = i_Company_Id
                             and Cl.Filial_Id = i_Filial_Id
                             and Cl.Staff_Id = i_Staff_Id
                             and Cl.Trans_Type = i_Trans_Type) q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Trans_Type = p.Trans_Type
                 and q.Period = p.Period
               order by Nvl(p.Period, q.Period))
    loop
      if r.Clone_Trans_Id is not null and --
         r.Clone_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Clone_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Trans_Id   => r.Clone_Trans_Id,
                                                i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Clone_Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Clone_Code := Gmap().Json();
      end if;
    
      if r.Trans_Id is not null and --
         r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Trans_Id   => r.Trans_Id,
                                               i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Orig_Code := Gmap().Json();
      end if;
    
      if v_Orig_Code <> v_Clone_Code then
        v_Part.Part_Begin := r.Period_Start;
        v_Part.Part_End   := r.Period_End;
      
        Result.Extend;
        result(Result.Count) := v_Part;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Timeoff_Interval_Kind
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Timeoff_Id number
  ) return varchar2 is
    result varchar2(1);
  begin
    select Coalesce((select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation
                      from Hpd_Vacations Vc
                     where Vc.Company_Id = Tn.Company_Id
                       and Vc.Filial_Id = Tn.Filial_Id
                       and Vc.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave
                       from Hpd_Sick_Leaves Sl
                      where Sl.Company_Id = Tn.Company_Id
                        and Sl.Filial_Id = Tn.Filial_Id
                        and Sl.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip
                       from Hpd_Business_Trips Bt
                      where Bt.Company_Id = Tn.Company_Id
                        and Bt.Filial_Id = Tn.Filial_Id
                        and Bt.Timeoff_Id = Tn.Timeoff_Id),
                    null)
      into result
      from Hpd_Journal_Timeoffs Tn
     where Tn.Company_Id = i_Company_Id
       and Tn.Filial_Id = i_Filial_Id
       and Tn.Timeoff_Id = i_Timeoff_Id;
  
    if result is null then
      b.Raise_Not_Implemented;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Changed_Intervals
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Trans_Type        varchar2,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Begin_Date    date;
    v_End_Date      date;
    v_Interval_Id   number;
    v_Timeoff_Id    number;
    v_Interval_Kind varchar2(1);
  begin
    if i_Trans_Type <> Hpd_Pref.c_Transaction_Type_Vacation_Limit then
      begin
        select Lc.Begin_Date, Lc.End_Date, Lc.Interval_Id, Lc.Kind
          into v_Begin_Date, v_End_Date, v_Interval_Id, v_Interval_Kind
          from Hpd_Lock_Intervals Lc
         where Lc.Company_Id = i_Company_Id
           and Lc.Filial_Id = i_Filial_Id
           and Lc.Staff_Id = i_Staff_Id
           and exists (select *
                  from table(i_Changed_Intervals) Ch
                 where Ch.Part_Begin <= Lc.End_Date
                   and Nvl(Ch.Part_End, Href_Pref.c_Max_Date) >= Lc.Begin_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          select p.Timeoff_Id
            into v_Timeoff_Id
            from Hpd_Timeoff_Intervals p
           where p.Company_Id = i_Company_Id
             and p.Filial_Id = i_Filial_Id
             and p.Interval_Id = v_Interval_Id;
        
          v_Interval_Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Timeoff_Id => v_Timeoff_Id);
        end if;
      
        Hpd_Error.Raise_006(i_Interval_Kind => v_Interval_Kind,
                            i_Trans_Type    => i_Trans_Type,
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                            i_Begin_Date    => v_Begin_Date,
                            i_End_Date      => v_End_Date);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Aggreement_Check
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy    varchar2(1);
    v_Count    number;
    v_Min_Date date;
    r_Journal  Hpd_Journals%rowtype;
  begin
    select count(1), min(w.Begin_Date)
      into v_Count, v_Min_Date
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress);
  
    -- TODO comment  
    if v_Count = 0 then
      return;
    end if;
  
    select 'x'
      into v_Dummy
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress)
       and w.Begin_Date = v_Min_Date
       and w.End_Date is null
       and Rownum = 1;
  exception
    when No_Data_Found then
      select w.Journal_Id
        into r_Journal.Journal_Id
        from Hpd_Transactions w
       where w.Company_Id = i_Company_Id
         and w.Filial_Id = i_Filial_Id
         and w.Staff_Id = i_Staff_Id
         and w.Trans_Type = i_Trans_Type
         and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                         Hpd_Pref.c_Transaction_Event_In_Progress)
         and w.Begin_Date = v_Min_Date
       order by w.Order_No desc
       fetch first row only;
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Journal_Id => r_Journal.Journal_Id);
    
      Hpd_Error.Raise_074(i_Journal_Id     => r_Journal.Journal_Id, --
                          i_Journal_Number => r_Journal.Journal_Number,
                          i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Evaluate
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Staff_Id               number,
    i_Trans_Type             varchar2,
    i_Changed_Dismissal_Date date
  ) is
    v_Start             date := i_Changed_Dismissal_Date;
    v_Trans_Start       date;
    v_Changed_Intervals Hpd_Pref.Transaction_Part_Nt;
  begin
    Assert_Aggreement_Check(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Trans_Type => i_Trans_Type);
  
    select min(q.Begin_Date)
      into v_Trans_Start
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                       Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
  
    v_Start := Least(Nvl(v_Start, v_Trans_Start), Nvl(v_Trans_Start, v_Start));
  
    if v_Start is null then
      Hpd_Error.Raise_030;
    end if;
  
    Agreement_Fill(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => i_Staff_Id,
                   i_Trans_Type => i_Trans_Type,
                   i_Start_Date => v_Start);
  
    if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
      v_Changed_Intervals := Get_Changed_Intervals(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Start_Date => v_Start);
    
      Assert_Changed_Intervals(i_Company_Id        => i_Company_Id,
                               i_Filial_Id         => i_Filial_Id,
                               i_Staff_Id          => i_Staff_Id,
                               i_Trans_Type        => i_Trans_Type,
                               i_Changed_Intervals => v_Changed_Intervals);
    end if;
  
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        Integrate_Robot_Agreements(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Start_Date => v_Start);
      when Hpd_Pref.c_Transaction_Type_Schedule then
        if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
          Integrate_Schedule_Agreements(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Staff_Id          => i_Staff_Id,
                                        i_Changed_Intervals => v_Changed_Intervals);
        end if;
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        if not Hpd_Pref.g_Migration_Active and v_Changed_Intervals.Count > 0 then
          Integrate_Vacation_Limit_Agreements(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Start_Date => v_Start);
        end if;
      else
        null;
    end case;
  
    -- deleting stacked transactions
    delete from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked transactions
    update Hpd_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Start_Date date first in progress trans before first to_be_integrated/to_be_deleted trans 
  -- %param i_Finish_Date date first in progress trans after last to_be_integrated/to_be_deleted trans max among different trans types
  Procedure Fill_Agreements_Cache
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Start_Date     date,
    i_Finish_Date    date,
    i_Dismissal_Date date
  ) is
    v_Finish_Date date := Least(i_Finish_Date, Nvl(i_Dismissal_Date - 1, i_Finish_Date));
    v_Old_Cache   Hpd_Pref.Agreement_Cache_Nt;
  
    v_Min_Old_Begin date;
    v_Max_Old_End   date;
  
    -------------------------------------------------- 
    Procedure Integrate_Individual_Robot_Schedules is
      v_Cache             Hpd_Pref.Agreement_Cache_Rt;
      v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                         i_Filial_Id  => i_Filial_Id,
                                                         i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    begin
      if v_Old_Cache.Count = 0 then
        v_Old_Cache.Extend;
        v_Old_Cache(1) := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                                      Robot_Id    => -1,
                                                      Schedule_Id => -1,
                                                      Begin_Date  => i_Start_Date,
                                                      End_Date    => v_Finish_Date);
      end if;
    
      if v_Min_Old_Begin is not null then
        -- adding period before old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => Href_Pref.c_Min_Date,
                                               End_Date    => v_Min_Old_Begin - 1);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      if v_Max_Old_End is not null then
        -- adding period after old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => case
                                                                when v_Max_Old_End <> Href_Pref.c_Max_Date then
                                                                 v_Max_Old_End + 1
                                                                else
                                                                 v_Max_Old_End
                                                              end,
                                               End_Date    => Href_Pref.c_Max_Date);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      for r in (with Old_Cache as
                   (select Oc.Begin_Date,
                          Oc.End_Date,
                          Oc.Robot_Id,
                          Nvl(Oc.Schedule_Id, -1) Schedule_Id
                     from table(v_Old_Cache) Oc),
                  New_Cache as
                   (select Nc.Begin_Date, Nc.End_Date, Nc.Robot_Id
                     from Hpd_Agreements_Cache Nc
                    where Nc.Company_Id = i_Company_Id
                      and Nc.Filial_Id = i_Filial_Id
                      and Nc.Staff_Id = i_Staff_Id
                      and Nc.Begin_Date between i_Start_Date and v_Finish_Date
                      and Nc.Schedule_Id = v_Robot_Schedule_Id)
                  select q.Robot_Id,
                         Greatest(q.Begin_Date, p.Begin_Date) Begin_Date,
                         Least(q.End_Date, p.End_Date) End_Date
                    from New_Cache q
                    join Old_Cache p
                      on p.Begin_Date <= q.End_Date
                     and p.End_Date >= q.Begin_Date
                     and (p.Robot_Id <> q.Robot_Id or p.Schedule_Id <> v_Robot_Schedule_Id))
      loop
        -- used min with max_date - 1 because later it may be used as end_date + 1
        -- and using max_date + 1 will cause error
        Htt_Core.Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Staff_Id    => i_Staff_Id,
                                               i_Robot_Id    => r.Robot_Id,
                                               i_Schedule_Id => v_Robot_Schedule_Id,
                                               i_Begin_Date  => r.Begin_Date,
                                               i_End_Date    => Least(r.End_Date,
                                                                      Href_Pref.c_Max_Date - 1));
      end loop;
    end;
  begin
    select min(q.Begin_Date), max(q.End_Date)
      into v_Min_Old_Begin, v_Max_Old_End
      from Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date;
  
    delete Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date
    returning q.Staff_Id, q.Robot_Id, q.Schedule_Id, q.Begin_Date, q.End_Date bulk collect into v_Old_Cache;
  
    insert into Hpd_Agreements_Cache
      (Company_Id, Filial_Id, Staff_Id, Begin_Date, End_Date, Robot_Id, Schedule_Id)
      with Last_Cache as
       (select Gc.Robot_Id, Gc.Schedule_Id
          from Hpd_Agreements_Cache Gc
         where Gc.Company_Id = i_Company_Id
           and Gc.Filial_Id = i_Filial_Id
           and Gc.Staff_Id = i_Staff_Id
           and i_Start_Date - 1 between Gc.Begin_Date and Gc.End_Date)
      select i_Company_Id,
             i_Filial_Id,
             i_Staff_Id,
             Qr.Period Begin_Date,
             Lead(Qr.Period - 1, 1, v_Finish_Date) Over(order by Qr.Period) End_Date,
             Last_Value(Qr.Robot_Id Ignore nulls) Over(order by Qr.Period) Robot_Id,
             Last_Value(Qr.Schedule_Id Ignore nulls) Over(order by Qr.Period) Schedule_Id
        from (select p.Period, --
                     Nvl(max(Ts.Schedule_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Schedule_Id
                                   from Last_Cache Lc),
                                null)) Schedule_Id,
                     Nvl(max(Tr.Robot_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Robot_Id
                                   from Last_Cache Lc),
                                null)) Robot_Id
                from Hpd_Agreements p
                left join Hpd_Trans_Schedules Ts
                  on Ts.Company_Id = p.Company_Id
                 and Ts.Filial_Id = p.Filial_Id
                 and Ts.Trans_Id = p.Trans_Id
                left join Hpd_Trans_Robots Tr
                  on Tr.Company_Id = p.Company_Id
                 and Tr.Filial_Id = p.Filial_Id
                 and Tr.Trans_Id = p.Trans_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Period between i_Start_Date and v_Finish_Date
                 and p.Trans_Type in
                     (Hpd_Pref.c_Transaction_Type_Robot, Hpd_Pref.c_Transaction_Type_Schedule)
                 and p.Action = Hpd_Pref.c_Transaction_Action_Continue
               group by p.Period) Qr;
  
    Integrate_Individual_Robot_Schedules;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number) is
    r_Staff                  Href_Staffs%rowtype;
    r_Employee               Mhr_Employees%rowtype;
    r_Person                 Md_Persons%rowtype;
    v_Changed_Dismissal_Date date;
    v_Dismissal_Date         date;
    v_Min_Change_Date        date;
    v_Max_Change_Date        date;
  
    --------------------------------------------------
    Procedure Check_Transactions(i_Staff Href_Staffs%rowtype) is
    begin
      -- check exists transactions before hiring
      for r in (select *
                  from Hpd_Transactions q
                 where q.Company_Id = i_Staff.Company_Id
                   and q.Filial_Id = i_Staff.Filial_Id
                   and q.Staff_Id = i_Staff.Staff_Id
                   and q.Begin_Date < i_Staff.Hiring_Date
                   and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                   Hpd_Pref.c_Transaction_Event_In_Progress)
                   and Rownum = 1)
      loop
        r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                           i_Filial_Id   => i_Staff.Filial_Id,
                                           i_Employee_Id => i_Staff.Employee_Id);
      
        r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                      i_Person_Id  => i_Staff.Employee_Id);
      
        Hpd_Error.Raise_007(i_Staff_Name  => r_Person.Name,
                            i_Trans_Type  => r.Trans_Type,
                            i_Trans_Date  => r.Begin_Date,
                            i_Hiring_Date => i_Staff.Hiring_Date);
      end loop;
    
      -- check there are other documents after dismissal document
      if i_Staff.Dismissal_Date is not null then
        for r in (select *
                    from Hpd_Transactions q
                   where q.Company_Id = i_Staff.Company_Id
                     and q.Filial_Id = i_Staff.Filial_Id
                     and q.Staff_Id = i_Staff.Staff_Id
                     and q.Begin_Date > i_Staff.Dismissal_Date
                     and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                     Hpd_Pref.c_Transaction_Event_In_Progress)
                   order by q.Begin_Date
                   fetch first row only)
        loop
          r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                             i_Filial_Id   => i_Staff.Filial_Id,
                                             i_Employee_Id => i_Staff.Employee_Id);
        
          r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                        i_Person_Id  => i_Staff.Employee_Id);
        
          Hpd_Error.Raise_008(i_Staff_Name     => r_Person.Name,
                              i_Trans_Type     => r.Trans_Type,
                              i_Trans_Date     => r.Begin_Date,
                              i_Dismissal_Date => i_Staff.Dismissal_Date);
        end loop;
      end if;
    end;
  begin
    --
    for r in (select q.Company_Id, --
                     q.Filial_Id,
                     q.Staff_Id
                from Hpd_Dirty_Agreements q
               group by q.Company_Id, q.Filial_Id, q.Staff_Id)
    loop
      r_Staff := z_Href_Staffs.Load(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Staff_Id   => r.Staff_Id);
    
      -- check exists transactions before hiring
      Check_Transactions(r_Staff);
    
      -- get lowest changed dismissal date
      select min(q.Dismissal_Date),
             min(Decode(q.Event, Hpd_Pref.c_Transaction_Event_To_Be_Deleted, null, q.Dismissal_Date))
        into v_Changed_Dismissal_Date, v_Dismissal_Date
        from Hpd_Dismissal_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id;
    
      select min(q.Begin_Date), max(q.Begin_Date)
        into v_Min_Change_Date, v_Max_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                         Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
    
      v_Min_Change_Date := Nvl(Least(Nvl(v_Min_Change_Date, v_Changed_Dismissal_Date),
                                     Nvl(v_Changed_Dismissal_Date, v_Min_Change_Date)),
                               Href_Pref.c_Min_Date);
    
      v_Max_Change_Date := Nvl(v_Max_Change_Date, v_Min_Change_Date);
    
      select max(Qr.Begin_Date)
        into v_Max_Change_Date
        from (select min(Tr.Begin_Date) Begin_Date
                from (select q.Trans_Type, q.Begin_Date - 1 Begin_Date
                        from Hpd_Transactions q
                       where q.Company_Id = r.Company_Id
                         and q.Filial_Id = r.Filial_Id
                         and q.Staff_Id = r.Staff_Id
                         and q.Trans_Type in
                             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
                         and q.Begin_Date > v_Max_Change_Date
                         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
                      union all
                      select Hpd_Pref.c_Transaction_Type_Schedule, Href_Pref.c_Max_Date
                        from Dual
                      union all
                      select Hpd_Pref.c_Transaction_Type_Robot, Href_Pref.c_Max_Date
                        from Dual) Tr
               group by Tr.Trans_Type) Qr;
    
      select max(q.Begin_Date)
        into v_Min_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Begin_Date < v_Min_Change_Date
         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress;
    
      v_Min_Change_Date := Nvl(v_Min_Change_Date, Href_Pref.c_Min_Date);
    
      for Agr in (select q.Trans_Type
                    from Hpd_Dirty_Agreements q
                   where q.Company_Id = r.Company_Id
                     and q.Filial_Id = r.Filial_Id
                     and q.Staff_Id = r.Staff_Id)
      loop
        Agreement_Evaluate(i_Company_Id             => r.Company_Id,
                           i_Filial_Id              => r.Filial_Id,
                           i_Staff_Id               => r.Staff_Id,
                           i_Trans_Type             => Agr.Trans_Type,
                           i_Changed_Dismissal_Date => v_Changed_Dismissal_Date);
      end loop;
    
      -- if staff is passive, check that there are no more transactions
      if r_Staff.State = 'P' then
        for Trans in (select *
                        from Hpd_Transactions St
                       where St.Company_Id = r.Company_Id
                         and St.Filial_Id = r.Filial_Id
                         and St.Staff_Id = r.Staff_Id)
        loop
          Hpd_Error.Raise_009(Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                   i_Staff_Id   => r_Staff.Staff_Id));
        end loop;
      end if;
    
      Fill_Agreements_Cache(i_Company_Id     => r.Company_Id,
                            i_Filial_Id      => r.Filial_Id,
                            i_Staff_Id       => r.Staff_Id,
                            i_Start_Date     => v_Min_Change_Date,
                            i_Finish_Date    => v_Max_Change_Date,
                            i_Dismissal_Date => v_Dismissal_Date);
    end loop;
  
    -- deleting stacked dismissal transactions
    delete Hpd_Dismissal_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked dismissal transactions
    update Hpd_Dismissal_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id;
  
    delete Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Dirty
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Agreements
        (Company_Id, Filial_Id, Staff_Id, Trans_Type)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Trans_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number is
    v_Dismissal_Date date := Nvl(i_Dismissal_Date, Href_Pref.c_Max_Date);
    result           Href_Staffs%rowtype;
  begin
    select q.*
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Employee_Id = i_Employee_Id
       and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and q.State = 'A'
       and Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) >= i_Hiring_Date
       and q.Hiring_Date <= v_Dismissal_Date;
  
    -- check cross out from primary job
    if Result.Hiring_Date <= i_Hiring_Date and
       Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) >= v_Dismissal_Date then
      return Result.Staff_Id;
    end if;
  
    if i_Hiring_Date < Result.Hiring_Date then
      Hpd_Error.Raise_010(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                     i_Filial_Id  => Result.Filial_Id,
                                                                     i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Hiring   => Result.Hiring_Date,
                          i_Secondary_Hiring => i_Hiring_Date);
    end if;
  
    if v_Dismissal_Date > Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) then
      Hpd_Error.Raise_011(i_Staff_Name          => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                        i_Filial_Id  => Result.Filial_Id,
                                                                        i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Dismissal   => Result.Dismissal_Date,
                          i_Secondary_Dismissal => v_Dismissal_Date);
    end if;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_012(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
    when Too_Many_Rows then
      Hpd_Error.Raise_013(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Begin_Date then
      Hpd_Error.Raise_014(i_Staff_Name  => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                i_Filial_Id  => i_Filial_Id,
                                                                i_Staff_Id   => i_Staff_Id),
                          i_Trans_Type  => i_Trans_Type,
                          i_Trans_Date  => i_Begin_Date,
                          i_Hiring_Date => r_Staff.Hiring_Date);
    end if;
  
    r_Trans.Company_Id := i_Company_Id;
    r_Trans.Filial_Id  := i_Filial_Id;
    r_Trans.Trans_Id   := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id   := i_Staff_Id;
    r_Trans.Trans_Type := i_Trans_Type;
    r_Trans.Begin_Date := i_Begin_Date;
    r_Trans.End_Date   := i_End_Date;
    r_Trans.Order_No   := i_Order_No;
    r_Trans.Journal_Id := i_Journal_Id;
    r_Trans.Page_Id    := i_Page_Id;
    r_Trans.Tag        := i_Tag;
    r_Trans.Event      := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Transactions.Insert_Row(r_Trans);
  
    Agreement_Dirty(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type);
  
    return r_Trans.Trans_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Life_Cycle_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff  Href_Staffs%rowtype;
    v_Cnt    number;
    r_Person Md_Persons%rowtype;
    --------------------------------------------------
    Function Staff_State return varchar2 is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Hirings q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and exists (select *
                from Hpd_Journal_Pages w
                join Hpd_Journals k
                  on k.Company_Id = i_Company_Id
                 and k.Filial_Id = i_Filial_Id
                 and k.Journal_Id = w.Journal_Id
               where w.Company_Id = i_Company_Id
                 and w.Filial_Id = i_Filial_Id
                 and w.Page_Id = q.Page_Id
                 and k.Posted = 'Y');
    
      return 'A';
    exception
      when No_Data_Found then
        return 'P';
    end;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    r_Staff.State := Staff_State;
  
    select min(Dt.Dismissal_Date) - 1, min(k.Dismissal_Reason_Id), min(k.Note), count(1)
      into r_Staff.Dismissal_Date, r_Staff.Dismissal_Reason_Id, r_Staff.Dismissal_Note, v_Cnt
      from Hpd_Journal_Pages Jp
      join Hpd_Dismissal_Transactions Dt
        on Dt.Company_Id = Jp.Company_Id
       and Dt.Filial_Id = Jp.Filial_Id
       and Dt.Page_Id = Jp.Page_Id
       and Dt.Event in
           (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, Hpd_Pref.c_Transaction_Event_In_Progress)
      left join Hpd_Dismissals k
        on k.Company_Id = Dt.Company_Id
       and k.Filial_Id = Dt.Filial_Id
       and k.Page_Id = Dt.Page_Id
     where Jp.Company_Id = i_Company_Id
       and Jp.Filial_Id = i_Filial_Id
       and Jp.Staff_Id = i_Staff_Id;
  
    if Nvl(v_Cnt, 0) > 1 then
      r_Person := z_Md_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                    i_Person_Id  => r_Staff.Employee_Id);
    
      Hpd_Error.Raise_015(i_Staff_Name => r_Person.Name, i_Dismissed_Cnt => v_Cnt);
    end if;
  
    if r_Staff.Hiring_Date > r_Staff.Dismissal_Date then
      Hpd_Error.Raise_016(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                                   i_Staff_Id   => r_Staff.Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => r_Staff.Dismissal_Date);
    end if;
  
    z_Href_Staffs.Save_Row(r_Staff);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Relationship_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
    v_Count number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
    if r_Staff.State = 'P' then
      if r_Staff.Dismissal_Date is not null then
        Hpd_Error.Raise_017(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      select count(1)
        into v_Count
        from Href_Staffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Parent_Id = i_Staff_Id
         and q.State = 'A';
    
      if v_Count > 0 then
        Hpd_Error.Raise_018(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      return;
    end if;
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary then
      Assert_Intersection_Staff(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Employee_Id => r_Staff.Employee_Id);
      for r in (select *
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Parent_Id = i_Staff_Id
                   and q.State = 'A'
                   and not (r_Staff.Hiring_Date <= q.Hiring_Date and
                        Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) <=
                        Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date)))
      loop
        Hpd_Error.Raise_019(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_Secondary_Hiring => r.Hiring_Date,
                            i_Primary_Hiring   => r_Staff.Hiring_Date);
      end loop;
    else
      z_Href_Staffs.Update_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Parent_Id  => Option_Number(Get_Parent_Staff(i_Company_Id     => r_Staff.Company_Id,
                                                                              i_Filial_Id      => r_Staff.Filial_Id,
                                                                              i_Employee_Id    => r_Staff.Employee_Id,
                                                                              i_Hiring_Date    => r_Staff.Hiring_Date,
                                                                              i_Dismissal_Date => r_Staff.Dismissal_Date)));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Employee_Number
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    v_Staff_Number varchar2(50 char);
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    select p.Staff_Number
      into v_Staff_Number
      from Href_Staffs p
     where p.Company_Id = r_Staff.Company_Id
       and p.Filial_Id = r_Staff.Filial_Id
       and p.Employee_Id = r_Staff.Employee_Id
       and p.State = 'A'
       and p.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
     order by p.Hiring_Date desc
     fetch first row only;
  
    z_Mhr_Employees.Update_One(i_Company_Id      => r_Staff.Company_Id,
                               i_Filial_Id       => r_Staff.Filial_Id,
                               i_Employee_Id     => r_Staff.Employee_Id,
                               i_Employee_Number => Option_Varchar2(v_Staff_Number));
  exception
    when No_Data_Found then
      return;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attach_User_Filial
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff   Href_Staffs%rowtype;
    r_Person  Mr_Natural_Persons%rowtype;
    r_User    Md_Users%rowtype;
    v_Role_Id number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Staff_Kind <> Href_Pref.c_Staff_Kind_Primary or --
       r_Staff.Dismissal_Date is not null then
      return;
    end if;
  
    if not z_Md_Users.Exist_Lock(i_Company_Id => i_Company_Id, --
                                 i_User_Id    => r_Staff.Employee_Id) then
      r_Person := z_Mr_Natural_Persons.Lock_Load(i_Company_Id => i_Company_Id,
                                                 i_Person_Id  => r_Staff.Employee_Id);
    
      z_Md_Users.Init(p_Row        => r_User,
                      i_Company_Id => r_Person.Company_Id,
                      i_User_Id    => r_Person.Person_Id,
                      i_Name       => r_Person.Name,
                      i_User_Kind  => Md_Pref.c_Uk_Normal,
                      i_Gender     => r_Person.Gender,
                      i_State      => 'A');
    
      Md_Api.User_Save(r_User);
    end if;
  
    if not z_Md_User_Filials.Exist(i_Company_Id => i_Company_Id,
                                   i_User_Id    => r_Staff.Employee_Id,
                                   i_Filial_Id  => i_Filial_Id) then
      Md_Api.User_Add_Filial(i_Company_Id => i_Company_Id,
                             i_User_Id    => r_Staff.Employee_Id,
                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    v_Role_Id := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                 i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
  
    if not z_Md_User_Roles.Exist(i_Company_Id => i_Company_Id,
                                 i_User_Id    => r_Staff.Employee_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Role_Id    => v_Role_Id) then
      Md_Api.Role_Grant(i_Company_Id => i_Company_Id,
                        i_User_Id    => r_Staff.Employee_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Role_Id    => v_Role_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Staff_Ids Array_Number;
  begin
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Life_Cycle_Evaluate(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Relationship_Evaluate(i_Company_Id => r.Company_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Update_Employee_Number(i_Company_Id => r.Company_Id,
                             i_Filial_Id  => r.Filial_Id,
                             i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id)
    loop
      Attach_User_Filial(i_Company_Id => r.Company_Id,
                         i_Filial_Id  => r.Filial_Id,
                         i_Staff_Id   => r.Staff_Id);
    end loop;
  
    select q.Staff_Id
      bulk collect
      into v_Staff_Ids
      from Hpd_Dirty_Staffs q
      join Href_Staffs w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Staff_Id = w.Staff_Id
     where q.Company_Id = i_Company_Id
     order by w.Employee_Id;
  
    Hlic_Core.Revise_License_By_Dirty_Staffs(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Staff_Ids  => v_Staff_Ids);
  
    delete Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    for r in (select Jp.Employee_Id
                from Hpd_Journal_Pages Jp
               where Jp.Company_Id = i_Company_Id
                 and Jp.Filial_Id = i_Filial_Id
                 and Jp.Journal_Id = i_Journal_Id
               group by Jp.Employee_Id)
    loop
      Htt_Api.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Staffs q
        (Company_Id, Filial_Id, Staff_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Terminate
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Journal_Id     number,
    i_Page_Id        number,
    i_Dismissal_Date date
  ) is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Dismissal_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Dismissal_Date then
      Hpd_Error.Raise_020(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => i_Dismissal_Date);
    end if;
  
    r_Trans.Company_Id     := i_Company_Id;
    r_Trans.Filial_Id      := i_Filial_Id;
    r_Trans.Trans_Id       := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id       := i_Staff_Id;
    r_Trans.Dismissal_Date := i_Dismissal_Date + 1;
    r_Trans.Journal_Id     := i_Journal_Id;
    r_Trans.Page_Id        := i_Page_Id;
    r_Trans.Event          := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Dismissal_Transactions.Insert_Row(r_Trans);
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Restore
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
  begin
    for r in (select *
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Dismissal_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                              i_Filial_Id  => r.Filial_Id,
                                              i_Trans_Id   => r.Trans_Id,
                                              i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    end loop;
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  ) is
    v_Fte      number := i_Fte;
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    if i_Fte_Id is not null then
      v_Fte := z_Href_Ftes.Load(i_Company_Id => i_Company_Id, i_Fte_Id => i_Fte_Id).Fte_Value;
    end if;
  
    z_Hpd_Trans_Robots.Insert_One(i_Company_Id       => i_Company_Id,
                                  i_Filial_Id        => i_Filial_Id,
                                  i_Trans_Id         => v_Trans_Id,
                                  i_Robot_Id         => i_Robot_Id,
                                  i_Division_Id      => i_Division_Id,
                                  i_Job_Id           => i_Job_Id,
                                  i_Employment_Type  => i_Employment_Type,
                                  i_Fte_Id           => i_Fte_Id,
                                  i_Fte              => v_Fte,
                                  i_Contractual_Wage => i_Contractual_Wage,
                                  i_Wage_Scale_Id    => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Schedule,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Schedules.Insert_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Trans_Id    => v_Trans_Id,
                                     i_Schedule_Id => i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Currency_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Currency,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Currencies.Insert_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Trans_Id    => v_Trans_Id,
                                      i_Currency_Id => i_Currency_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Vacation_Limit,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Vacation_Limits.Save_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Trans_Id,
                                         i_Days_Limit => i_Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Rank,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Ranks.Insert_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Trans_Id   => v_Trans_Id,
                                 i_Rank_Id    => i_Rank_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Indicator     Href_Pref.Indicator_Nt := Href_Pref.Indicator_Nt();
    v_Oper_Types    Href_Pref.Oper_Type_Nt := Href_Pref.Oper_Type_Nt();
    v_Indicator_Ids Array_Number;
    v_Trans_Id      number;
  begin
    for r in (select *
                from Hpd_Page_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      Hpd_Util.Indicator_Add(p_Indicator       => v_Indicator,
                             i_Indicator_Id    => r.Indicator_Id,
                             i_Indicator_Value => r.Indicator_Value);
    end loop;
  
    for r in (select q.*
                from Hpd_Page_Oper_Types q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      select q.Indicator_Id
        bulk collect
        into v_Indicator_Ids
        from Hpd_Oper_Type_Indicators q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Page_Id = r.Page_Id
         and q.Oper_Type_Id = r.Oper_Type_Id;
    
      Hpd_Util.Oper_Type_Add(p_Oper_Type     => v_Oper_Types,
                             i_Oper_Type_Id  => r.Oper_Type_Id,
                             i_Indicator_Ids => v_Indicator_Ids);
    end loop;
  
    if v_Oper_Types.Count > 0 then
      v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                 i_Journal_Id => i_Journal_Id,
                                 i_Page_Id    => i_Page_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => i_Begin_Date,
                                 i_End_Date   => i_End_Date,
                                 i_Order_No   => i_Order_No,
                                 i_Tag        => i_Source_Table.Name);
    
      for i in 1 .. v_Indicator.Count
      loop
        z_Hpd_Trans_Indicators.Insert_One(i_Company_Id      => i_Company_Id,
                                          i_Filial_Id       => i_Filial_Id,
                                          i_Trans_Id        => v_Trans_Id,
                                          i_Indicator_Id    => v_Indicator(i).Indicator_Id,
                                          i_Indicator_Value => v_Indicator(i).Indicator_Value);
      end loop;
    end if;
  
    for i in 1 .. v_Oper_Types.Count
    loop
      z_Hpd_Trans_Oper_Types.Insert_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => v_Trans_Id,
                                        
                                        i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id);
    
      v_Indicator_Ids := v_Oper_Types(i).Indicator_Ids;
    
      for j in 1 .. v_Indicator_Ids.Count
      loop
        z_Hpd_Trans_Oper_Type_Indicators.Insert_One(i_Company_Id   => i_Company_Id,
                                                    i_Filial_Id    => i_Filial_Id,
                                                    i_Trans_Id     => v_Trans_Id,
                                                    i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id,
                                                    i_Indicator_Id => v_Indicator_Ids(j));
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  ) is
  begin
    for r in (select *
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Trans_Id   => r.Trans_Id,
                                    i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    
      Agreement_Dirty(i_Company_Id => r.Company_Id,
                      i_Filial_Id  => r.Filial_Id,
                      i_Staff_Id   => r.Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Hiring_Date,
                     w.Dismissal_Date,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(k.Employment_Type, Hpd_Pref.c_Employment_Type_Internal_Parttime) nulls last) -- firstly primary jobs line opened
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                         i_Filial_Id        => r.Filial_Id,
                         i_Journal_Id       => r.Journal_Id,
                         i_Page_Id          => r.Page_Id,
                         i_Staff_Id         => r.Staff_Id,
                         i_Begin_Date       => r.Hiring_Date,
                         i_End_Date         => null,
                         i_Order_No         => i_Journal.Posted_Order_No,
                         i_Robot_Id         => r.Robot_Id,
                         i_Division_Id      => r.Division_Id,
                         i_Job_Id           => r.Job_Id,
                         i_Fte_Id           => r.Fte_Id,
                         i_Fte              => r.Fte,
                         i_Employment_Type  => r.Employment_Type,
                         i_Wage_Scale_Id    => r.Wage_Scale_Id,
                         i_Contractual_Wage => r.Contractual_Wage,
                         i_Source_Table     => Zt.Hpd_Hirings);
    
      if r.Dismissal_Date is not null then
        Staff_Terminate(i_Company_Id     => r.Company_Id,
                        i_Filial_Id      => r.Filial_Id,
                        i_Staff_Id       => r.Staff_Id,
                        i_Journal_Id     => r.Journal_Id,
                        i_Page_Id        => r.Page_Id,
                        i_Dismissal_Date => r.Dismissal_Date);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Rank_Id is not null then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Hiring_Date,
                          i_End_Date     => null,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Hiring_Date,
                                    i_End_Date     => null,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Hiring_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Hirings);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date,
                     Ct.Early_Closed_Note,
                     Ct.Posted Contract_Posted
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Contract_Posted = 'Y' and --
         r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date) then
        Cv_Contract_Close(i_Company_Id        => r.Company_Id,
                          i_Filial_Id         => r.Filial_Id,
                          i_Contract_Id       => r.Contract_Id,
                          i_Early_Closed_Date => r.Dismissal_Date,
                          i_Early_Closed_Note => r.Early_Closed_Note);
      
      else
        z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Contract_Id => r.Contract_Id,
                                      i_End_Date    => Option_Date(r.Dismissal_Date));
      
        Cv_Contract_Post(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Transfer_Begin,
                     w.Transfer_End,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     St.Staff_Kind,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Transfers w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Href_Staffs St
                  on St.Company_Id = q.Company_Id
                 and St.Filial_Id = q.Filial_Id
                 and St.Staff_Id = q.Staff_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Robot_Id is not null then
        if r.Staff_Kind != Hpd_Util.Cast_Staff_Kind_By_Emp_Type(r.Employment_Type) then
          Hpd_Error.Raise_021(Href_Util.Staff_Name(i_Company_Id => r.Company_Id,
                                                   i_Filial_Id  => r.Filial_Id,
                                                   i_Staff_Id   => r.Staff_Id));
        end if;
      
        Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                           i_Filial_Id        => r.Filial_Id,
                           i_Journal_Id       => r.Journal_Id,
                           i_Page_Id          => r.Page_Id,
                           i_Staff_Id         => r.Staff_Id,
                           i_Begin_Date       => r.Transfer_Begin,
                           i_End_Date         => r.Transfer_End,
                           i_Order_No         => i_Journal.Posted_Order_No,
                           i_Robot_Id         => r.Robot_Id,
                           i_Division_Id      => r.Division_Id,
                           i_Job_Id           => r.Job_Id,
                           i_Employment_Type  => r.Employment_Type,
                           i_Fte_Id           => r.Fte_Id,
                           i_Fte              => r.Fte,
                           i_Wage_Scale_Id    => r.Wage_Scale_Id,
                           i_Contractual_Wage => r.Contractual_Wage,
                           i_Source_Table     => Zt.Hpd_Transfers);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Rank_Id is not null then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Transfer_Begin,
                          i_End_Date     => r.Transfer_End,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Transfer_Begin,
                                    i_End_Date     => r.Transfer_End,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Transfer_Begin,
                             i_End_Date     => r.Transfer_End,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Transfers);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Dismissal_Date
                from Hpd_Journal_Pages q
                join Hpd_Dismissals w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls last) -- firstly secondary jobs line closed
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Terminate(i_Company_Id     => r.Company_Id,
                      i_Filial_Id      => r.Filial_Id,
                      i_Staff_Id       => r.Staff_Id,
                      i_Journal_Id     => i_Journal.Journal_Id,
                      i_Page_Id        => r.Page_Id,
                      i_Dismissal_Date => r.Dismissal_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, Pc.Currency_Id
                from Hpd_Journal_Pages q
                join Hpd_Wage_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Change_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Change_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Wage_Changes);
    
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, w.Rank_Id
                from Hpd_Journal_Pages q
                join Hpd_Rank_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                        i_Filial_Id    => r.Filial_Id,
                        i_Journal_Id   => r.Journal_Id,
                        i_Page_Id      => r.Page_Id,
                        i_Staff_Id     => r.Staff_Id,
                        i_Begin_Date   => r.Change_Date,
                        i_End_Date     => null,
                        i_Order_No     => i_Journal.Posted_Order_No,
                        i_Rank_Id      => r.Rank_Id,
                        i_Source_Table => Zt.Hpd_Rank_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, r.Page_Id, r.Staff_Id
                from Hpd_Vacation_Limit_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                  i_Filial_Id    => r.Filial_Id,
                                  i_Journal_Id   => r.Journal_Id,
                                  i_Page_Id      => r.Page_Id,
                                  i_Staff_Id     => r.Staff_Id,
                                  i_Begin_Date   => r.Change_Date,
                                  i_End_Date     => null,
                                  i_Order_No     => i_Journal.Posted_Order_No,
                                  i_Days_Limit   => r.Days_Limit,
                                  i_Source_Table => Zt.Hpd_Vacation_Limit_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.Begin_Date,
                     q.End_Date,
                     r.Page_Id,
                     r.Staff_Id,
                     (select s.Schedule_Id
                        from Hpd_Page_Schedules s
                       where s.Company_Id = i_Journal.Company_Id
                         and s.Filial_Id = i_Journal.Filial_Id
                         and s.Page_Id = r.Page_Id) as Schedule_Id
                from Hpd_Schedule_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = i_Journal.Company_Id
                 and r.Filial_Id = i_Journal.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Schedule_Trans_Insert(i_Company_Id   => i_Journal.Company_Id,
                            i_Filial_Id    => i_Journal.Filial_Id,
                            i_Journal_Id   => i_Journal.Journal_Id,
                            i_Page_Id      => r.Page_Id,
                            i_Staff_Id     => r.Staff_Id,
                            i_Begin_Date   => r.Begin_Date,
                            i_End_Date     => r.End_Date,
                            i_Order_No     => i_Journal.Posted_Order_No,
                            i_Schedule_Id  => r.Schedule_Id,
                            i_Source_Table => Zt.Hpd_Schedule_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Post(i_Journal Hpd_Journals%rowtype) is
    v_Interval_Id number;
  begin
    for r in (select q.*
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Interval_Id := Hpd_Next.Lock_Interval_Id;
    
      Timeoff_Lock_Interval_Insert(i_Company_Id      => r.Company_Id,
                                   i_Filial_Id       => r.Filial_Id,
                                   i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                                   i_Timeoff_Id      => r.Timeoff_Id,
                                   i_Staff_Id        => r.Staff_Id,
                                   i_Begin_Date      => r.Begin_Date,
                                   i_End_Date        => r.End_Date);
    
      Insert_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Insert_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Post(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Timesheet_Id        number;
  
    --------------------------------------------------
    Procedure Assert_No_Lock_Intervals
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Timeoff_Date date
    ) is
      v_Interval_Kind varchar2(1);
      v_Interval_Id   number;
      v_Timeoff_Id    number;
    begin
      select Lc.Interval_Id, Lc.Kind
        into v_Interval_Id, v_Interval_Kind
        from Hpd_Lock_Intervals Lc
       where Lc.Company_Id = i_Company_Id
         and Lc.Filial_Id = i_Filial_Id
         and Lc.Staff_Id = i_Staff_Id
         and i_Timeoff_Date <= Lc.End_Date
         and i_Timeoff_Date >= Lc.Begin_Date
         and Rownum = 1;
    
      if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
        select p.Timeoff_Id
          into v_Timeoff_Id
          from Hpd_Timeoff_Intervals p
         where p.Company_Id = i_Company_Id
           and p.Filial_Id = i_Filial_Id
           and p.Interval_Id = v_Interval_Id;
      
        v_Interval_Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Timeoff_Id => v_Timeoff_Id);
      end if;
    
      Hpd_Error.Raise_075(i_Interval_Kind => v_Interval_Kind,
                          i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                          i_Timeoff_Date  => i_Timeoff_Date);
    exception
      when No_Data_Found then
        null;
    end;

  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    -- check
    for r in (select q.Staff_Id,
                     (select j.Journal_Number
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Number,
                     (select j.Journal_Date
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and (q.Staff_Id, q.Kind) in
                     (select q.Staff_Id, Pa.Kind
                        from Hpd_Journal_Pages q
                        join Hpd_Page_Adjustments Pa
                          on Pa.Company_Id = i_Journal.Company_Id
                         and Pa.Filial_Id = i_Journal.Filial_Id
                         and Pa.Page_Id = q.Page_Id
                       where q.Company_Id = i_Journal.Company_Id
                         and q.Filial_Id = i_Journal.Filial_Id
                         and q.Journal_Id = i_Journal.Journal_Id)
                 and q.Adjustment_Date = r_Timebook_Adjustment.Adjustment_Date
                 and q.Journal_Id <> i_Journal.Journal_Id
                 and Rownum = 1)
    loop
      Hpd_Error.Raise_053(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                    i_Filial_Id  => i_Journal.Filial_Id,
                                                                    i_Staff_Id   => r.Staff_Id),
                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                          i_Journal_Number  => r.Journal_Number,
                          i_Journal_Date    => r.Journal_Date);
    end loop;
  
    for r in (select q.Staff_Id, q.Page_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      if v_Timesheet_Id is null then
        Hpd_Error.Raise_054(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                      i_Filial_Id  => i_Journal.Filial_Id,
                                                                      i_Staff_Id   => r.Staff_Id),
                            i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date);
      end if;
    
      Assert_No_Lock_Intervals(i_Company_Id   => i_Journal.Company_Id,
                               i_Filial_Id    => i_Journal.Filial_Id,
                               i_Staff_Id     => r.Staff_Id,
                               i_Timeoff_Date => r_Timebook_Adjustment.Adjustment_Date);
    
      for Adj in (select a.Kind
                    from Hpd_Page_Adjustments a
                   where a.Company_Id = i_Journal.Company_Id
                     and a.Filial_Id = i_Journal.Filial_Id
                     and a.Page_Id = r.Page_Id)
      loop
        z_Hpd_Lock_Adjustments.Insert_One(i_Company_Id      => i_Journal.Company_Id,
                                          i_Filial_Id       => i_Journal.Filial_Id,
                                          i_Staff_Id        => r.Staff_Id,
                                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                                          i_Kind            => Adj.Kind,
                                          i_Journal_Id      => i_Journal.Journal_Id,
                                          i_Page_Id         => r.Page_Id);
      end loop;
    
      Htt_Core.Save_Adjustment_Fact(i_Company_Id     => i_Journal.Company_Id,
                                    i_Filial_Id      => i_Journal.Filial_Id,
                                    i_Staff_Id       => r.Staff_Id,
                                    i_Timesheet_Id   => v_Timesheet_Id,
                                    i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Fte_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    v_Current_Date date := Trunc(sysdate);
    v_Fte_Limit    Href_Pref.Fte_Limit_Rt := Href_Util.Load_Fte_Limit(i_Company_Id);
  begin
    if v_Fte_Limit.Fte_Limit_Setting = 'N' then
      return;
    end if;
  
    for r in (select e.Employee_Name
                from (select (select sum(St.Fte)
                                from Href_Staffs St
                               where St.Company_Id = w.Company_Id
                                 and St.Employee_Id = w.Employee_Id
                                 and St.State = 'A'
                                 and St.Hiring_Date <= v_Current_Date
                                 and (St.Dismissal_Date is null or --
                                     St.Dismissal_Date >= v_Current_Date)
                                 and exists (select 1
                                        from Md_Filials f
                                       where f.Company_Id = St.Company_Id
                                         and f.Filial_Id = St.Filial_Id
                                         and f.State = 'A')) Total_Fte,
                             (select Np.Name
                                from Mr_Natural_Persons Np
                               where Np.Company_Id = w.Company_Id
                                 and Np.Person_Id = w.Employee_Id) Employee_Name
                        from Hpd_Journal_Pages q
                        join Href_Staffs w
                          on w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Staff_Id = q.Staff_Id
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Journal_Id = i_Journal_Id) e
               where v_Fte_Limit.Fte_Limit < e.Total_Fte)
    loop
      Hpd_Error.Raise_078(r.Employee_Name);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Sign_Document_Status  varchar2(1);
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'Y' and not Hpd_Pref.g_Migration_Active then
      Hpd_Error.Raise_022(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_069(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    -- Sign Document Check  
    v_Sign_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => i_Company_Id,
                                                                 i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Sign_Document_Status is not null and v_Sign_Document_Status <> Mdf_Pref.c_Ds_Approved then
      Hpd_Error.Raise_084(i_Document_Status => Mdf_Pref.t_Document_Status(v_Sign_Document_Status),
                          i_Journal_Number  => r_Journal.Journal_Number);
    end if;
  
    r_Journal.Posted := 'Y';
  
    if r_Journal.Posted_Order_No is null then
      r_Journal.Posted_Order_No := Md_Core.Gen_Number(i_Company_Id => r_Journal.Company_Id,
                                                      i_Filial_Id  => r_Journal.Filial_Id,
                                                      i_Table      => Zt.Hpd_Journals,
                                                      i_Column     => z.Posted_Order_No);
    end if;
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      Hiring_Cv_Contract_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Post(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Post(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    if not Hpd_Pref.g_Migration_Active then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    
      if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
         Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
        Check_Fte_Limit(i_Company_Id => r_Journal.Company_Id,
                        i_Filial_Id  => r_Journal.Filial_Id,
                        i_Journal_Id => r_Journal.Journal_Id);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Secondary) nulls first) -- firstly secondary jobs line unposted
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Unpost
  (
    i_Journal Hpd_Journals%rowtype,
    i_Repost  boolean
  ) is
  begin
    for r in (select q.*, --
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      continue when i_Repost and r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date);
    
      Cv_Contract_Unpost(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Staff_Id = w.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(w.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls first) -- firstly primary jobs line reopen
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     (select w.Interval_Id
                        from Hpd_Timeoff_Intervals w
                       where w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Timeoff_Id = q.Timeoff_Id) as Interval_Id
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      z_Hpd_Timeoff_Intervals.Delete_One(i_Company_Id => r.Company_Id,
                                         i_Filial_Id  => r.Filial_Id,
                                         i_Timeoff_Id => r.Timeoff_Id);
    
      Lock_Interval_Delete(i_Company_Id  => r.Company_Id,
                           i_Filial_Id   => r.Filial_Id,
                           i_Interval_Id => r.Interval_Id,
                           i_Timeoff_Id  => r.Timeoff_Id);
    
      Remove_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Remove_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Unpost(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Turnout_Adjustment  number;
    v_Overtime_Adjustment number;
    v_Lack_Tk_Id          number;
    v_Timesheet_Id        number;
  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select q.Staff_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      continue when v_Timesheet_Id is null;
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Overtime_Adjustment);
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Turnout_Adjustment);
    end loop;
  
    for r in (select Df.*,
                     Ts.Timesheet_Id,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = La.Company_Id
                            and Tl.Filial_Id = La.Filial_Id
                            and Tl.Staff_Id = La.Staff_Id
                            and Tl.Timesheet_Date = La.Adjustment_Date),
                         'N') Timesheet_Locked
                from Hpd_Lock_Adjustments La
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = La.Company_Id
                 and Df.Filial_Id = La.Filial_Id
                 and Df.Staff_Id = La.Staff_Id
                 and Df.Adjustment_Date = La.Adjustment_Date
                join Htt_Timesheets Ts
                  on Ts.Company_Id = La.Company_Id
                 and Ts.Filial_Id = La.Filial_Id
                 and Ts.Staff_Id = La.Staff_Id
                 and Ts.Timesheet_Date = La.Adjustment_Date
               where La.Company_Id = i_Journal.Company_Id
                 and La.Filial_Id = i_Journal.Filial_Id
                 and La.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Timesheet_Locked = 'Y' then
        z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Journal.Company_Id,
                                         i_Filial_Id    => i_Journal.Filial_Id,
                                         i_Timesheet_Id => r.Timesheet_Id,
                                         i_Time_Kind_Id => v_Lack_Tk_Id,
                                         i_Fact_Value   => Option_Number(r.Fact_Value));
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Journal.Company_Id,
                                         i_Filial_Id      => i_Journal.Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Adjustment_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Htt_Core.Make_Dirty_Timesheet(i_Company_Id   => i_Journal.Company_Id,
                                      i_Filial_Id    => i_Journal.Filial_Id,
                                      i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    delete from Hpd_Lock_Adjustments q
     where q.Company_Id = i_Journal.Company_Id
       and q.Filial_Id = i_Journal.Filial_Id
       and q.Journal_Id = i_Journal.Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Document_Status       varchar2(1);
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'N' then
      Hpd_Error.Raise_023(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_070(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      Hiring_Cv_Contract_Unpost(r_Journal, i_Repost);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Unpost(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Unpost(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    r_Journal.Posted := 'N';
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    -- Sign Document To Draft 
    v_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => r_Journal.Company_Id,
                                                            i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Document_Status is not null then
      Mdf_Api.Document_Draft(i_Company_Id  => r_Journal.Company_Id,
                             i_Document_Id => r_Journal.Sign_Document_Id);
    end if;
  
    if not i_Repost then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Accrual    boolean := true
  ) is
    v_Part       Hpd_Pref.Transaction_Part_Rt;
    v_Parts      Hpd_Pref.Transaction_Part_Nt;
    v_Days_Count number;
    v_Coef       number := 1;
  begin
    if not i_Accrual then
      v_Coef := -1;
    end if;
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Begin_Date        => i_Begin_Date,
                                                     i_End_Date          => i_End_Date,
                                                     i_Trans_Types       => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Vacation_Limit),
                                                     i_Partition_By_Year => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Part := v_Parts(i);
    
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => v_Part.Part_Begin,
                                         i_End_Date   => v_Part.Part_End);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Part.Part_Begin,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Part.Part_Begin),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => v_Coef * v_Days_Count);
    end loop;
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => true);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => false);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date,
    i_Kind            varchar2,
    i_Assertable      boolean := true,
    i_Journal_Type_Id number := null,
    o_Interval_Id     out number
  ) is
    v_Intersect_Begin date;
    v_Intersect_End   date;
    v_Interval_Kind   varchar2(1) := i_Kind;
  
    --------------------------------------------------
    Function Get_Timeoff_Interval_Kind return varchar2 is
    begin
      if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave;
      elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                              i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip;
      elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation;
      else
        b.Raise_Not_Implemented;
      end if;
    
      return null;
    end;
  begin
    if i_Assertable then
      -- assert locked interval intersection
      begin
        select q.Begin_Date, q.End_Date
          into v_Intersect_Begin, v_Intersect_End
          from Hpd_Lock_Intervals q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Staff_Id = i_Staff_Id
           and q.Kind = i_Kind
           and Greatest(q.Begin_Date, i_Begin_Date) <= Least(q.End_Date, i_End_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          v_Interval_Kind := Get_Timeoff_Interval_Kind;
        end if;
      
        Hpd_Error.Raise_024(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Interval_Begin  => i_Begin_Date,
                            i_Interval_End    => i_End_Date,
                            i_Intersect_Begin => v_Intersect_Begin,
                            i_Intersect_End   => v_Intersect_End,
                            i_Interval_Kind   => v_Interval_Kind);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  
    o_Interval_Id := Hpd_Next.Lock_Interval_Id;
  
    z_Hpd_Lock_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Interval_Id => o_Interval_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => i_End_Date,
                                    i_Kind        => i_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Trans_Id                   number;
    v_Parts                      Hpd_Pref.Transaction_Part_Nt;
    v_Oper_Type_Ids              Array_Number;
    v_Oper_Group_Id              number;
    v_No_Deduction_Oper_Group_Id number;
    v_Deduction_Oper_Group_Id    number;
    v_Overtime_Oper_Group_Id     number;
    o_Interval_Id                number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hpr_Timebook_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Timebook_Id => i_Timebook_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Interval_Id => o_Interval_Id);
  
    v_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_No_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage_No_Deduction);
  
    v_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                        i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Penalty_For_Discipline);
  
    v_Overtime_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                       i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Overtime);
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                     i_Filial_Id       => i_Filial_Id,
                                                     i_Staff_Id        => i_Staff_Id,
                                                     i_Begin_Date      => i_Begin_Date,
                                                     i_End_Date        => i_End_Date,
                                                     i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                         Hpd_Pref.c_Transaction_Type_Operation,
                                                                                         Hpd_Pref.c_Transaction_Type_Schedule,
                                                                                         Hpd_Pref.c_Transaction_Type_Currency),
                                                     i_With_Wage_Scale => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                                i_Period     => v_Parts(i).Part_Begin);
    
      select t.Oper_Type_Id
        bulk collect
        into v_Oper_Type_Ids
        from Hpd_Trans_Oper_Types t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Trans_Id = v_Trans_Id
         and exists (select 1
                from Hpr_Oper_Types s
               where s.Company_Id = t.Company_Id
                 and s.Oper_Type_Id = t.Oper_Type_Id
                 and s.Oper_Group_Id in (v_Oper_Group_Id,
                                         v_No_Deduction_Oper_Group_Id,
                                         v_Deduction_Oper_Group_Id,
                                         v_Overtime_Oper_Group_Id));
    
      for j in 1 .. v_Oper_Type_Ids.Count
      loop
        -- this situation must be taken into account
        Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                               i_Filial_Id    => i_Filial_Id,
                               i_Interval_Id  => o_Interval_Id,
                               i_Staff_Id     => i_Staff_Id,
                               i_Oper_Type_Id => v_Oper_Type_Ids(j),
                               i_Begin_Date   => v_Parts(i).Part_Begin,
                               i_End_Date     => v_Parts(i).Part_End);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Parts        Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
    v_Trans_Types  Array_Varchar2;
    v_Oper_Type_Id number;
    o_Interval_Id  number;
    r_Staff        Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Staff_Id        => i_Staff_Id,
                         i_Begin_Date      => i_Begin_Date,
                         i_End_Date        => i_End_Date,
                         i_Kind            => Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                         i_Journal_Type_Id => i_Journal_Type_Id,
                         o_Interval_Id     => o_Interval_Id);
  
    z_Hpd_Timeoff_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Timeoff_Id  => i_Timeoff_Id,
                                       i_Interval_Id => o_Interval_Id);
  
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Sick_Leave);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Business_Trip);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Vacation);
      v_Trans_Types  := Array_Varchar2();
    else
      b.Raise_Not_Implemented;
    end if;
  
    if v_Trans_Types.Count > 0 then
      v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                       i_Filial_Id       => i_Filial_Id,
                                                       i_Staff_Id        => i_Staff_Id,
                                                       i_Begin_Date      => i_Begin_Date,
                                                       i_End_Date        => i_End_Date,
                                                       i_Trans_Types     => v_Trans_Types,
                                                       i_With_Wage_Scale => true);
    else
      r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
    
      v_Parts.Extend();
      v_Parts(v_Parts.Count) := Hpd_Pref.Transaction_Part_Rt(Part_Begin => Greatest(i_Begin_Date,
                                                                                    r_Staff.Hiring_Date),
                                                             Part_End   => Least(i_End_Date,
                                                                                 Nvl(r_Staff.Dismissal_Date,
                                                                                     i_End_Date)));
    end if;
  
    for i in 1 .. v_Parts.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Id,
                             i_Begin_Date   => v_Parts(i).Part_Begin,
                             i_End_Date     => v_Parts(i).Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
    v_Trans_Id              number;
    r_Staff_Plan            Hper_Staff_Plans%rowtype;
    v_Oper_Type_Ids         Array_Number;
    v_Perf_Oper_Group_Id    number;
    v_Penalty_Oper_Group_Id number;
    v_Begin_Date            date;
    v_End_Date              date;
    v_Trans_Date            date;
    o_Interval_Id           number;
    r_Staff                 Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Performance,
                         i_Assertable  => false,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hper_Staff_Plan_Intervals.Insert_One(i_Company_Id    => i_Company_Id,
                                           i_Filial_Id     => i_Filial_Id,
                                           i_Staff_Plan_Id => i_Staff_Plan_Id,
                                           i_Interval_Id   => o_Interval_Id);
  
    v_Perf_Oper_Group_Id    := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf);
    v_Penalty_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf_Penalty);
  
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    v_Begin_Date := Greatest(i_Begin_Date, r_Staff.Hiring_Date);
    v_End_Date   := Least(i_End_Date, Nvl(r_Staff.Dismissal_Date, i_End_Date));
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => i_Staff_Plan_Id);
  
    select max(q.Begin_Date)
      into v_Trans_Date
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Page_Id = r_Staff_Plan.Journal_Page_Id;
  
    v_Trans_Date := Greatest(v_Trans_Date, v_Begin_Date);
  
    v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                              i_Period     => v_Trans_Date);
  
    select t.Oper_Type_Id
      bulk collect
      into v_Oper_Type_Ids
      from Hpd_Trans_Oper_Types t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Trans_Id = v_Trans_Id
       and exists
     (select 1
              from Hpr_Oper_Types s
             where s.Company_Id = t.Company_Id
               and s.Oper_Type_Id = t.Oper_Type_Id
               and s.Oper_Group_Id in (v_Perf_Oper_Group_Id, v_Penalty_Oper_Group_Id));
  
    for j in 1 .. v_Oper_Type_Ids.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Ids(j),
                             i_Begin_Date   => v_Begin_Date,
                             i_End_Date     => v_End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  ) is
    v_Interval_Id number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => i_Interval_Kind,
                         o_Interval_Id => v_Interval_Id);
  
    z_Hpr_Sales_Bonus_Payment_Intervals.Insert_One(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Operation_Id => i_Operation_Id,
                                                   i_Interval_Id  => v_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  ) is
    r_Interval   Hpd_Lock_Intervals%rowtype;
    v_Begin_Date date;
    v_End_Date   date;
  begin
    select q.Begin_Date, q.End_Date
      into v_Begin_Date, v_End_Date
      from Hpr_Charges q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = i_Interval_Id
       and q.Status <> Hpr_Pref.c_Charge_Status_New
       and Rownum = 1;
  
    r_Interval := z_Hpd_Lock_Intervals.Lock_Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Interval_Id => i_Interval_Id);
  
    if r_Interval.Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
      r_Interval.Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Timeoff_Id => i_Timeoff_Id);
    end if;
  
    Hpd_Error.Raise_025(i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => r_Interval.Company_Id,
                                                                i_Filial_Id  => r_Interval.Filial_Id,
                                                                i_Staff_Id   => r_Interval.Staff_Id),
                        i_Interval_Kind => r_Interval.Kind,
                        i_Charge_Begin  => v_Begin_Date,
                        i_Charge_End    => v_End_Date);
  exception
    when No_Data_Found then
      z_Hpd_Lock_Intervals.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Interval_Id => i_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Staff_Id       number,
    i_Begin_Date     date,
    i_End_Date       date,
    i_Remove_Timeoff boolean := false
  ) is
  begin
    Htt_Core.Gen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                               i_Filial_Id      => i_Filial_Id,
                               i_Timeoff_Id     => i_Timeoff_Id,
                               i_Remove_Timeoff => i_Remove_Timeoff);
  
    for r in (select Tl.Timebook_Id
                from Hpr_Timesheet_Locks Tl
               where Tl.Company_Id = i_Company_Id
                 and Tl.Filial_Id = i_Filial_Id
                 and Tl.Staff_Id = i_Staff_Id
                 and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
               group by Tl.Timebook_Id)
    loop
      -- careful with hpd_core <=> hpr_core recursion
      Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Timebook_Id => r.Timebook_Id,
                                    i_Staff_Id    => i_Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
    v_Timeoff_Tk_Id  number;
    v_Turnout_Id     number;
    v_Turnout_Locked varchar2(1);
    v_Timeoff_Date   date := i_Begin_Date;
  
    --------------------------------------------------
    Procedure Assert_No_Timesheet_Adjustments
    (
      i_Company_Id      number,
      i_Filial_Id       number,
      i_Staff_Id        number,
      i_Timeoff_Id      number,
      i_Adjustment_Date date
    ) is
    begin
      if z_Hpd_Lock_Adjustments.Exist(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Adjustment_Date => i_Adjustment_Date) then
        Hpd_Error.Raise_076(i_Interval_Kind   => Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                                           i_Filial_Id  => i_Filial_Id,
                                                                           i_Timeoff_Id => i_Timeoff_Id),
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Adjustment_Date => i_Adjustment_Date);
      end if;
    end;
  
  begin
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Sick);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Trip);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
      v_Timeoff_Tk_Id  := z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
                          i_Filial_Id => i_Filial_Id, --
                          i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    while v_Timeoff_Date <= i_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist_Lock(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => v_Timeoff_Date) and
         Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                 i_Filial_Id      => i_Filial_Id,
                                 i_Staff_Id       => i_Staff_Id,
                                 i_Timesheet_Date => v_Timeoff_Date,
                                 i_Time_Kind_Id   => v_Turnout_Id) > 0 then
        v_Turnout_Locked := 'Y';
      else
        v_Turnout_Locked := 'N';
      end if;
    
      Assert_No_Timesheet_Adjustments(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Timeoff_Id      => i_Timeoff_Id,
                                      i_Adjustment_Date => v_Timeoff_Date);
    
      z_Hpd_Timeoff_Days.Insert_One(i_Company_Id     => i_Company_Id,
                                    i_Filial_Id      => i_Filial_Id,
                                    i_Staff_Id       => i_Staff_Id,
                                    i_Timeoff_Date   => v_Timeoff_Date,
                                    i_Timeoff_Id     => i_Timeoff_Id,
                                    i_Time_Kind_Id   => v_Timeoff_Tk_Id,
                                    i_Turnout_Locked => v_Turnout_Locked);
    
      v_Timeoff_Date := v_Timeoff_Date + 1;
    end loop;
  
    Regen_Timeoff_Facts(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Timeoff_Id => i_Timeoff_Id,
                        i_Staff_Id   => i_Staff_Id,
                        i_Begin_Date => i_Begin_Date,
                        i_End_Date   => i_End_Date);
  
    if v_Vacation_Tk_Id = v_Timeoff_Tk_Id and
       Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) then
      Spend_Vacation_Days(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    if Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) and --
       v_Vacation_Tk_Id = --
       z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
       i_Filial_Id => i_Filial_Id, --
       i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id then
      Free_Vacation_Days(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
    end if;
  
    Regen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                        i_Filial_Id      => i_Filial_Id,
                        i_Timeoff_Id     => i_Timeoff_Id,
                        i_Staff_Id       => i_Staff_Id,
                        i_Begin_Date     => i_Begin_Date,
                        i_End_Date       => i_End_Date,
                        i_Remove_Timeoff => true);
  
    delete Hpd_Timeoff_Days Td
     where Td.Company_Id = i_Company_Id
       and Td.Filial_Id = i_Filial_Id
       and Td.Timeoff_Id = i_Timeoff_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_026(i_Contract_Id);
    end if;
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                            i_Filial_Id   => r_Contract.Filial_Id,
                                            i_Contract_Id => r_Contract.Contract_Id,
                                            i_Month       => Trunc(r_Contract.End_Date, 'mon'));
    else
      r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
      r_Contract.End_Date   := Trunc(r_Contract.End_Date, 'mon');
    
      while r_Contract.Begin_Date <= r_Contract.End_Date
      loop
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                              i_Filial_Id   => r_Contract.Filial_Id,
                                              i_Contract_Id => r_Contract.Contract_Id,
                                              i_Month       => r_Contract.Begin_Date);
      
        r_Contract.Begin_Date := Add_Months(r_Contract.Begin_Date, 1);
      end loop;
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r_Contract.Company_Id,
                                  i_Filial_Id   => r_Contract.Filial_Id,
                                  i_Contract_Id => r_Contract.Contract_Id,
                                  i_Posted      => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    v_Month    date;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_027(i_Contract_Id);
    end if;
  
    begin
      select q.Month
        into v_Month
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = r_Contract.Company_Id
         and q.Filial_Id = r_Contract.Filial_Id
         and q.Contract_Id = r_Contract.Contract_Id
         and q.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New
         and Rownum = 1;
    
      Hpd_Error.Raise_028(i_Person_Name => z_Mr_Natural_Persons.Load(i_Company_Id => r_Contract.Company_Id, --
                                           i_Person_Id => r_Contract.Person_Id).Name,
                          i_Fact_Month  => v_Month);
    exception
      when No_Data_Found then
        delete from Hpr_Cv_Contract_Facts q
         where q.Company_Id = r_Contract.Company_Id
           and q.Filial_Id = r_Contract.Filial_Id
           and q.Contract_Id = r_Contract.Contract_Id;
    end;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Posted            => Option_Varchar2('N'),
                                  i_Early_Closed_Date => Option_Date(null),
                                  i_Early_Closed_Note => Option_Varchar2(null));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
    r_Contract    Hpd_Cv_Contracts%rowtype;
    v_Begin_Month date;
  
    --------------------------------------------------
    Function Exist_Fact(i_Month date) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Contract_Id = i_Contract_Id
         and q.Month = i_Month
         and Rownum = 1;
      return true;
    
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Procedure Gen(i_Month date) is
    begin
      if not Exist_Fact(i_Month) then
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Contract_Id => i_Contract_Id,
                                              i_Month       => i_Month);
      end if;
    end;
  begin
    if i_Early_Closed_Date is null then
      Hpd_Error.Raise_031(i_Contract_Id);
    end if;
  
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_029(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Early_Closed_Date => Option_Date(i_Early_Closed_Date),
                                  i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
  
    r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
    r_Contract.End_Date   := Trunc(i_Early_Closed_Date, 'mon');
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Gen(r_Contract.End_Date);
    else
      v_Begin_Month := r_Contract.Begin_Date;
    
      while v_Begin_Month <= r_Contract.End_Date
      loop
        Gen(v_Begin_Month);
        v_Begin_Month := Add_Months(v_Begin_Month, 1);
      end loop;
    end if;
  
    Hpr_Core.Cv_Contract_Facts_Delete(i_Company_Id        => r_Contract.Company_Id,
                                      i_Filial_Id         => r_Contract.Filial_Id,
                                      i_Contract_Id       => r_Contract.Contract_Id,
                                      i_Begin_Date        => r_Contract.Begin_Date,
                                      i_Early_Closed_Date => i_Early_Closed_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_041(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Delete_One(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id)
    loop
      z_Hpd_Hirings.Update_One(i_Company_Id     => r.Company_Id,
                               i_Filial_Id      => r.Filial_Id,
                               i_Page_Id        => r.Page_Id,
                               i_Dismissal_Date => Option_Date(i_Early_Closed_Date));
    
      z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r.Company_Id,
                                    i_Filial_Id         => r.Filial_Id,
                                    i_Contract_Id       => r.Contract_Id,
                                    i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
    end loop;
  
    Hpd_Core.Journal_Unpost(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => i_Journal_Id,
                            i_Repost     => true);
  
    Hpd_Core.Journal_Post(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id
                 and q.Page_Id not member of i_Page_Ids)
    loop
      Cv_Contract_Delete(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  ) is
  begin
    Href_Core.Send_Application_Notification(i_Company_Id         => i_Company_Id,
                                            i_Filial_Id          => i_Filial_Id,
                                            i_Title              => i_Title,
                                            i_Form               => Hpd_Pref.c_Form_Application_List,
                                            i_Action_Keys        => i_Grants,
                                            i_Uri                => i_Uri,
                                            i_Uri_Param          => i_Uri_Param,
                                            i_Except_User_Id     => i_Except_User_Id,
                                            i_Additional_User_Id => i_Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Robot_Book_Transactions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    for r in (select p.Page_Id, q.Trans_Id
                from Hpd_Journal_Pages p
                join Hpd_Robot_Trans_Pages q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Page_Id = p.Page_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Journal_Id = i_Journal_Id)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      z_Hpd_Robot_Trans_Pages.Delete_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r.Page_Id,
                                         i_Trans_Id   => r.Trans_Id);
    
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Hpd_Core;
/

create or replace package Hpd_Pref is
  ----------------------------------------------------------------------------------------------------
  type Contract_Rt is record(
    Contract_Number      varchar2(50 char),
    Contract_Date        date,
    Fixed_Term           varchar2(1),
    Expiry_Date          date,
    Fixed_Term_Base_Id   number,
    Concluding_Term      varchar2(300 char),
    Hiring_Conditions    varchar2(300 char),
    Other_Conditions     varchar2(300 char),
    Workplace_Equipment  varchar2(300 char),
    Representative_Basis varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Robot_Rt is record(
    Robot_Id        number,
    Division_Id     number,
    Job_Id          number,
    Org_Unit_Id     number,
    Rank_Id         number,
    Wage_Scale_Id   number,
    Employment_Type varchar2(1),
    Fte_Id          number,
    Fte             number);
  ----------------------------------------------------------------------------------------------------
  type Page_Rt is record(
    Page_Id  number,
    Staff_Id number);
  type Page_Nt is table of Page_Rt;
  ---------------------------------------------------------------------------------------------------- 
  -- CV Contracts
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Item_Rt is record(
    Contract_Item_Id number,
    name             varchar2(150 char),
    Quantity         number,
    Amount           number);
  type Cv_Contract_Item_Nt is table of Cv_Contract_Item_Rt;
  ---------------------------------------------------------------------------------------------------- 
  type Cv_Contract_File_Rt is record(
    File_Sha varchar2(64),
    Note     varchar2(300 char));
  type Cv_Contract_File_Nt is table of Cv_Contract_File_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Cv_Contract_Rt is record(
    Company_Id               number,
    Filial_Id                number,
    Contract_Id              number,
    Contract_Number          varchar2(50),
    Page_Id                  number,
    Division_Id              number,
    Person_Id                number,
    Begin_Date               date,
    End_Date                 date,
    Contract_Kind            varchar2(1),
    Contract_Employment_Kind varchar2(1),
    Access_To_Add_Item       varchar2(1),
    Early_Closed_Date        date,
    Early_Closed_Note        varchar2(300 char),
    Note                     varchar2(300 char),
    Items                    Cv_Contract_Item_Nt,
    Files                    Cv_Contract_File_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Hiring
  ----------------------------------------------------------------------------------------------------
  type Hiring_Rt is record(
    Page_Id              number,
    Employee_Id          number,
    Staff_Number         varchar2(50),
    Hiring_Date          date,
    Dismissal_Date       date,
    Trial_Period         number,
    Employment_Source_Id number,
    Schedule_Id          number,
    Currency_Id          number,
    Vacation_Days_Limit  number,
    Is_Booked            varchar2(1),
    Robot                Robot_Rt,
    Contract             Contract_Rt,
    Cv_Contract          Cv_Contract_Rt,
    Indicators           Href_Pref.Indicator_Nt,
    Oper_Types           Href_Pref.Oper_Type_Nt);
  type Hiring_Nt is table of Hiring_Rt;
  ----------------------------------------------------------------------------------------------------
  type Hiring_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Hirings         Hiring_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Transfer
  ----------------------------------------------------------------------------------------------------
  type Transfer_Rt is record(
    Page_Id             number,
    Transfer_Begin      date,
    Transfer_End        date,
    Staff_Id            number,
    Schedule_Id         number,
    Currency_Id         number,
    Vacation_Days_Limit number,
    Is_Booked           varchar2(1),
    Transfer_Reason     varchar2(300 char),
    Transfer_Base       varchar2(300 char),
    Robot               Robot_Rt,
    Contract            Contract_Rt,
    Indicators          Href_Pref.Indicator_Nt,
    Oper_Types          Href_Pref.Oper_Type_Nt);
  type Transfer_Nt is table of Transfer_Rt;
  ----------------------------------------------------------------------------------------------------
  type Transfer_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Transfers       Transfer_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal
  ----------------------------------------------------------------------------------------------------
  type Dismissal_Rt is record(
    Page_Id              number,
    Staff_Id             number,
    Dismissal_Date       date,
    Dismissal_Reason_Id  number,
    Employment_Source_Id number,
    Based_On_Doc         varchar2(300 char),
    Note                 varchar2(300 char));
  type Dismissal_Nt is table of Dismissal_Rt;
  ----------------------------------------------------------------------------------------------------
  type Dismissal_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Dismissals      Dismissal_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Wage Change
  ----------------------------------------------------------------------------------------------------  
  type Wage_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Change_Date date,
    Currency_Id number,
    Indicators  Href_Pref.Indicator_Nt,
    Oper_Types  Href_Pref.Oper_Type_Nt);
  type Wage_Change_Nt is table of Wage_Change_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Wage_Change_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Wage_Changes    Wage_Change_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Rank Change
  ----------------------------------------------------------------------------------------------------  
  type Rank_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Change_Date date,
    Rank_Id     number);
  type Rank_Change_Nt is table of Rank_Change_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Rank_Change_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Journal_Type_Id number,
    Source_Table    varchar2(100),
    Source_Id       number,
    Rank_Changes    Rank_Change_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Vacation limit change
  ----------------------------------------------------------------------------------------------------  
  type Limit_Change_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Lang_Code      varchar2(10),
    Division_Id    number,
    Days_Limit     number,
    Change_Date    date,
    Pages          Page_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Schedule Change
  ----------------------------------------------------------------------------------------------------
  type Schedule_Change_Rt is record(
    Page_Id     number,
    Staff_Id    number,
    Schedule_Id number);
  type Schedule_Change_Nt is table of Schedule_Change_Rt;
  ----------------------------------------------------------------------------------------------------
  type Schedule_Change_Journal_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Journal_Id       number,
    Journal_Number   varchar2(50 char),
    Journal_Date     date,
    Journal_Name     varchar2(150 char),
    Lang_Code        varchar2(10),
    Division_Id      number,
    Begin_Date       date,
    End_Date         date,
    Schedule_Changes Schedule_Change_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sick Leave
  ----------------------------------------------------------------------------------------------------
  type Sick_Leave_Rt is record(
    Timeoff_Id        number,
    Staff_Id          number,
    Reason_Id         number,
    Coefficient       number,
    Sick_Leave_Number varchar2(100 char),
    Begin_Date        date,
    End_Date          date,
    Shas              Array_Varchar2);
  type Sick_Leave_Nt is table of Sick_Leave_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Sick_Leave_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Lang_Code      varchar2(10),
    Sick_Leaves    Sick_Leave_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Businnes trip
  ----------------------------------------------------------------------------------------------------
  type Business_Trip_Rt is record(
    Timeoff_Id number,
    Staff_Id   number,
    Region_Ids Array_Number,
    Person_Id  number,
    Reason_Id  number,
    Begin_Date date,
    End_Date   date,
    Note       varchar2(300 char),
    Shas       Array_Varchar2);
  type Business_Trip_Nt is table of Business_Trip_Rt;
  ----------------------------------------------------------------------------------------------------
  type Business_Trip_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Type_Id number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Business_Trips  Business_Trip_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Vacation
  ----------------------------------------------------------------------------------------------------
  type Vacation_Rt is record(
    Timeoff_Id   number,
    Staff_Id     number,
    Time_Kind_Id number,
    Begin_Date   date,
    End_Date     date,
    Shas         Array_Varchar2);
  type Vacation_Nt is table of Vacation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Vacation_Journal_Rt is record(
    Company_Id     number,
    Filial_Id      number,
    Journal_Id     number,
    Journal_Number varchar2(50 char),
    Journal_Date   date,
    Journal_Name   varchar2(150 char),
    Lang_Code      varchar2(10),
    Vacations      Vacation_Nt);
  ----------------------------------------------------------------------------------------------------  
  -- Overtime 
  ---------------------------------------------------------------------------------------------------- 
  type Overtime_Rt is record(
    Overtime_Date    date,
    Overtime_Seconds number);
  type Overtime_Nt is table of Overtime_Rt;
  ----------------------------------------------------------------------------------------------------
  type Overtime_Staff_Rt is record(
    Staff_Id    number,
    month       date,
    Overtime_Id number,
    Overtimes   Overtime_Nt);
  type Overtime_Staff_Nt is table of Overtime_Staff_Rt;
  ----------------------------------------------------------------------------------------------------
  type Overtime_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Division_Id     number,
    Overtime_Staffs Overtime_Staff_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Timebook Adjustment
  ----------------------------------------------------------------------------------------------------
  type Adjustment_Kind_Rt is record(
    Kind         varchar2(1),
    Free_Time    number,
    Overtime     number,
    Turnout_Time number);
  type Adjustment_Kind_Nt is table of Adjustment_Kind_Rt;
  ----------------------------------------------------------------------------------------------------
  type Adjustment_Rt is record(
    Page_Id  number,
    Staff_Id number,
    Kinds    Adjustment_Kind_Nt);
  type Adjustment_Nt is table of Adjustment_Rt;
  ----------------------------------------------------------------------------------------------------
  type Timebook_Adjustment_Journal_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Journal_Id      number,
    Journal_Number  varchar2(50 char),
    Journal_Date    date,
    Journal_Name    varchar2(150 char),
    Lang_Code       varchar2(10),
    Division_Id     number,
    Adjustment_Date date,
    Adjustments     Adjustment_Nt);
  ----------------------------------------------------------------------------------------------------
  type Transaction_Part_Rt is record(
    Part_Begin date,
    Part_End   date);
  type Transaction_Part_Nt is table of Transaction_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  type Agreement_Cache_Rt is record(
    Staff_Id    number,
    Robot_Id    number,
    Schedule_Id number,
    Begin_Date  date,
    End_Date    date);
  type Agreement_Cache_Nt is table of Agreement_Cache_Rt;
  ----------------------------------------------------------------------------------------------------
  type Application_Create_Robot_Rt is record(
    Company_Id     number(20),
    Filial_Id      number(20),
    Application_Id number(20),
    name           varchar2(200 char),
    Opened_Date    date,
    Division_Id    number(20),
    Job_Id         number(20),
    Quantity       number(20),
    Note           varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Application_Hiring_Rt is record(
    Company_Id      number(20),
    Filial_Id       number(20),
    Application_Id  number(20),
    Hiring_Date     date,
    Robot_Id        number(20),
    Note            varchar2(300 char),
    First_Name      varchar2(250 char),
    Last_Name       varchar2(250 char),
    Middle_Name     varchar2(250 char),
    Birthday        date,
    Gender          varchar2(1),
    Phone           varchar2(100 char),
    Email           varchar2(300),
    Photo_Sha       varchar2(64),
    Address         varchar2(500 char),
    Legal_Address   varchar2(300 char),
    Region_Id       number(20),
    Passport_Series varchar2(50 char),
    Passport_Number varchar2(50 char),
    Npin            varchar2(14 char),
    Iapa            varchar2(20 char),
    Employment_Type varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Application_Transfer_Unit_Rt is record(
    Application_Unit_Id number(20),
    Staff_Id            number(20),
    Transfer_Begin      date,
    Robot_Id            number(20),
    Note                varchar2(300 char));
  type Application_Transfer_Unit_Nt is table of Application_Transfer_Unit_Rt;
  ----------------------------------------------------------------------------------------------------
  type Application_Transfer_Rt is record(
    Company_Id     number(20),
    Filial_Id      number(20),
    Application_Id number(20),
    Transfer_Units Application_Transfer_Unit_Nt);
  ----------------------------------------------------------------------------------------------------
  type Application_Dismissal_Rt is record(
    Company_Id          number(20),
    Filial_Id           number(20),
    Application_Id      number(20),
    Staff_Id            number(20),
    Dismissal_Date      date,
    Dismissal_Reason_Id number(20),
    Note                varchar2(300 char));
  ----------------------------------------------------------------------------------------------------  
  -- Sigm Template 
  ----------------------------------------------------------------------------------------------------  
  type Sign_Template_Rt is record(
    Template        Mdf_Pref.Sign_Rt,
    Journal_Type_Id number);
  ----------------------------------------------------------------------------------------------------
  -- Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Journal_Type_Hiring                 constant varchar2(50) := 'VHR:HPD:1';
  c_Pcode_Journal_Type_Hiring_Multiple        constant varchar2(50) := 'VHR:HPD:2';
  c_Pcode_Journal_Type_Transfer               constant varchar2(50) := 'VHR:HPD:3';
  c_Pcode_Journal_Type_Transfer_Multiple      constant varchar2(50) := 'VHR:HPD:4';
  c_Pcode_Journal_Type_Dismissal              constant varchar2(50) := 'VHR:HPD:5';
  c_Pcode_Journal_Type_Dismissal_Multiple     constant varchar2(50) := 'VHR:HPD:6';
  c_Pcode_Journal_Type_Wage_Change            constant varchar2(50) := 'VHR:HPD:7';
  c_Pcode_Journal_Type_Schedule_Change        constant varchar2(50) := 'VHR:HPD:8';
  c_Pcode_Journal_Type_Sick_Leave             constant varchar2(50) := 'VHR:HPD:9';
  c_Pcode_Journal_Type_Business_Trip          constant varchar2(50) := 'VHR:HPD:10';
  c_Pcode_Journal_Type_Vacation               constant varchar2(50) := 'VHR:HPD:11';
  c_Pcode_Journal_Type_Rank_Change            constant varchar2(50) := 'VHR:HPD:12';
  c_Pcode_Journal_Type_Limit_Change           constant varchar2(50) := 'VHR:HPD:13';
  c_Pcode_Journal_Type_Overtime               constant varchar2(50) := 'VHR:HPD:14';
  c_Pcode_Journal_Type_Wage_Change_Multiple   constant varchar2(50) := 'VHR:HPD:15';
  c_Pcode_Journal_Type_Timebook_Adjustment    constant varchar2(50) := 'VHR:HPD:16';
  c_Pcode_Journal_Type_Rank_Change_Multiple   constant varchar2(50) := 'VHR:HPD:17';
  c_Pcode_Journal_Type_Business_Trip_Multiple constant varchar2(50) := 'VHR:HPD:18';
  c_Pcode_Journal_Type_Hiring_Contractor      constant varchar2(50) := 'VHR:HPD:19';
  ----------------------------------------------------------------------------------------------------
  -- Employment Type
  ----------------------------------------------------------------------------------------------------
  c_Employment_Type_Main_Job          constant varchar2(1) := 'M';
  c_Employment_Type_External_Parttime constant varchar2(1) := 'E';
  c_Employment_Type_Internal_Parttime constant varchar2(1) := 'I';
  c_Employment_Type_Contractor        constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Lock Interval Kind
  ----------------------------------------------------------------------------------------------------
  c_Lock_Interval_Kind_Timebook                        constant varchar2(1) := 'T';
  c_Lock_Interval_Kind_Timeoff                         constant varchar2(1) := 'O';
  c_Lock_Interval_Kind_Performance                     constant varchar2(1) := 'P';
  c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales      constant varchar2(1) := 'S';
  c_Lock_Interval_Kind_Sales_Bonus_Department_Sales    constant varchar2(1) := 'R';
  c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  -- Lock Interval Timeoff Kinds
  ---------------------------------------------------------------------------------------------------- 
  c_Lock_Interval_Kind_Timeoff_Business_Trip constant varchar2(1) := 'B';
  c_Lock_Interval_Kind_Timeoff_Sick_Leave    constant varchar2(1) := 'C';
  c_Lock_Interval_Kind_Timeoff_Vacation      constant varchar2(1) := 'V';
  ----------------------------------------------------------------------------------------------------
  -- Transaction Types Ro(B)ot, (O)peration, (S)chedule, (R)ank, Vacation (L)imit
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Type_Robot          constant varchar2(1) := 'B';
  c_Transaction_Type_Operation      constant varchar2(1) := 'O';
  c_Transaction_Type_Schedule       constant varchar2(1) := 'S';
  c_Transaction_Type_Rank           constant varchar2(1) := 'R';
  c_Transaction_Type_Vacation_Limit constant varchar2(1) := 'L';
  c_Transaction_Type_Currency       constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Transfer Kind
  ----------------------------------------------------------------------------------------------------
  c_Transfer_Kind_Permanently constant varchar2(1) := 'P';
  c_Transfer_Kind_Temporarily constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Action_Continue constant varchar2(1) := 'C';
  c_Transaction_Action_Stop     constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  c_Transaction_Event_To_Be_Integrated constant varchar2(1) := 'I';
  c_Transaction_Event_In_Progress      constant varchar2(1) := 'P';
  c_Transaction_Event_To_Be_Deleted    constant varchar2(1) := 'D';
  ----------------------------------------------------------------------------------------------------
  g_Migration_Active boolean := false;
  ----------------------------------------------------------------------------------------------------
  -- Journal Types
  ----------------------------------------------------------------------------------------------------
  c_Journal_Type_Hiring          constant varchar2(1) := 'H';
  c_Journal_Type_Transfer        constant varchar2(1) := 'T';
  c_Journal_Type_Dismissal       constant varchar2(1) := 'D';
  c_Journal_Type_Schedule_Change constant varchar2(1) := 'S';
  c_Journal_Type_Wage_Change     constant varchar2(1) := 'W';
  c_Journal_Type_Rank_Change     constant varchar2(1) := 'R';
  c_Journal_Type_Limit_Change    constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  -- Adjustment Kinds
  ----------------------------------------------------------------------------------------------------
  c_Adjustment_Kind_Full       constant varchar2(1) := 'F';
  c_Adjustment_Kind_Incomplete constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- vacation turnover days kind
  ----------------------------------------------------------------------------------------------------
  c_Vacation_Turnover_Planned_Days constant varchar2(1) := 'P';
  c_Vacation_Turnover_Used_Days    constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- fte kinds
  ----------------------------------------------------------------------------------------------------
  c_Fte_Kind_Full     constant varchar2(1) := 'F';
  c_Fte_Kind_Half     constant varchar2(1) := 'H';
  c_Fte_Kind_Quarter  constant varchar2(1) := 'Q';
  c_Fte_Kind_Occupied constant varchar2(1) := 'O';
  c_Fte_Kind_Custom   constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------  
  -- contracts
  ----------------------------------------------------------------------------------------------------  
  c_Cv_Contract_Kind_Simple   constant varchar2(1) := 'S';
  c_Cv_Contract_Kind_Cyclical constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Application Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Application_Type_Create_Robot      constant varchar2(50) := 'VHR:HPD:1';
  c_Pcode_Application_Type_Hiring            constant varchar2(50) := 'VHR:HPD:2';
  c_Pcode_Application_Type_Transfer          constant varchar2(50) := 'VHR:HPD:3';
  c_Pcode_Application_Type_Dismissal         constant varchar2(50) := 'VHR:HPD:4';
  c_Pcode_Application_Type_Transfer_Multiple constant varchar2(50) := 'VHR:HPD:5';
  ----------------------------------------------------------------------------------------------------
  -- Application Status
  ----------------------------------------------------------------------------------------------------
  c_Application_Status_New         constant varchar2(1) := 'N';
  c_Application_Status_Waiting     constant varchar2(1) := 'W';
  c_Application_Status_Approved    constant varchar2(1) := 'A';
  c_Application_Status_In_Progress constant varchar2(1) := 'P';
  c_Application_Status_Completed   constant varchar2(1) := 'O';
  c_Application_Status_Canceled    constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Hiring_Journal_View        constant varchar2(200) := '/vhr/hpd/view/hiring_view';
  c_Form_Hiring_Multiple_View       constant varchar2(200) := '/vhr/hpd/view/hiring_view';
  c_Form_Transfer_View              constant varchar2(200) := '/vhr/hpd/view/transfer_view';
  c_Form_Transfer_Multiple_View     constant varchar2(200) := '/vhr/hpd/view/transfer_view';
  c_Form_Dismissal_View             constant varchar2(200) := '/vhr/hpd/view/dismissal_view';
  c_Form_Dismissal_Multiple_View    constant varchar2(200) := '/vhr/hpd/view/dismissal_view';
  c_Form_Wage_Change_View           constant varchar2(200) := '/vhr/hpd/view/wage_change_view';
  c_Form_Schedule_Change_View       constant varchar2(200) := '/vhr/hpd/view/schedule_change_view';
  c_Form_Rank_Change_View           constant varchar2(200) := '/vhr/hpd/view/rank_change_view';
  c_Form_Vacation_Limit_Change_View constant varchar2(200) := '/vhr/hpd/view/vacation_limit_change_view';
  c_Form_Overtime_View              constant varchar2(200) := '/vhr/hpd/view/overtime_view';
  c_Form_Timebook_Adjustment_View   constant varchar2(200) := '/vhr/hpd/view/timebook_adjustment_view';
  ----------------------------------------------------------------------------------------------------
  -- Easy Report Origins
  ----------------------------------------------------------------------------------------------------
  c_Easy_Report_Form_Hiring             constant varchar2(200) := '/vhr/rep/hpd/hiring';
  c_Easy_Report_Form_Hiring_Multiple    constant varchar2(200) := '/vhr/rep/hpd/hiring_multiple';
  c_Easy_Report_Form_Transfer           constant varchar2(200) := '/vhr/rep/hpd/transfer';
  c_Easy_Report_Form_Transfer_Multiple  constant varchar2(200) := '/vhr/rep/hpd/transfer_multiple';
  c_Easy_Report_Form_Dismissal          constant varchar2(200) := '/vhr/rep/hpd/dismissal';
  c_Easy_Report_Form_Dismissal_Multiple constant varchar2(200) := '/vhr/rep/hpd/dismissal_multiple';
  c_Easy_Report_Form_Labor_Contract     constant varchar2(200) := '/vhr/rep/hpd/labor_contract';
  ----------------------------------------------------------------------------------------------------
  -- Application forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Application_List constant varchar2(200) := '/vhr/hpd/application/application_list';
  c_Uri_Application_Part  constant varchar2(200) := '/vhr/hpd/application/';
  ----------------------------------------------------------------------------------------------------
  -- Application Grant parts
  ----------------------------------------------------------------------------------------------------
  c_App_Grant_Part_Create_Robot constant varchar2(200) := 'create_robot_';
  c_App_Grant_Part_Hiring       constant varchar2(200) := 'hiring_';
  c_App_Grant_Part_Transfer     constant varchar2(200) := 'transfer_';
  c_App_Grant_Part_Dismissal    constant varchar2(200) := 'dismissal_';
  ----------------------------------------------------------------------------------------------------
  -- Application Grantees
  ----------------------------------------------------------------------------------------------------
  c_App_Grantee_Applicant constant varchar2(200) := 'applicant';
  c_App_Grantee_Manager   constant varchar2(200) := 'manager';
  c_App_Grantee_Hr        constant varchar2(200) := 'hr';
  ----------------------------------------------------------------------------------------------------
  -- Application form action
  ----------------------------------------------------------------------------------------------------
  c_App_Form_Action_Edit constant varchar2(200) := 'edit';
  c_App_Form_Action_View constant varchar2(200) := 'view';
  ----------------------------------------------------------------------------------------------------
  -- Contract Employment Kinds
  ----------------------------------------------------------------------------------------------------
  c_Contract_Employment_Freelancer   constant varchar2(1) := 'F';
  c_Contract_Employment_Staff_Member constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------  
  -- Pcode for Sign process
  ----------------------------------------------------------------------------------------------------  
  c_Pcode_Journal_Sign_Processes constant varchar2(100) := 'VHR:HPD:1';

end Hpd_Pref;
/
create or replace package body Hpd_Pref is
end Hpd_Pref;
/

create or replace package Hpd_Util is
  ----------------------------------------------------------------------------------------------------
  -- hiring
  ----------------------------------------------------------------------------------------------------
  Function Journal_View_Uri
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_New
  (
    o_Journal         out Hpd_Pref.Hiring_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Hiring
  (
    p_Journal              in out nocopy Hpd_Pref.Hiring_Journal_Rt,
    i_Page_Id              number,
    i_Employee_Id          number,
    i_Staff_Number         varchar2,
    i_Hiring_Date          date,
    i_Dismissal_Date       date := null,
    i_Trial_Period         number,
    i_Employment_Source_Id number,
    i_Schedule_Id          number,
    i_Vacation_Days_Limit  number,
    i_Is_Booked            varchar2,
    i_Robot                Hpd_Pref.Robot_Rt,
    i_Contract             Hpd_Pref.Contract_Rt,
    i_Cv_Contract          Hpd_Pref.Cv_Contract_Rt := null,
    i_Indicators           Href_Pref.Indicator_Nt,
    i_Oper_Types           Href_Pref.Oper_Type_Nt,
    i_Currency_Id          number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- transfer
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_New
  (
    o_Journal         out Hpd_Pref.Transfer_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Transfer
  (
    p_Journal             in out nocopy Hpd_Pref.Transfer_Journal_Rt,
    i_Page_Id             number,
    i_Transfer_Begin      date,
    i_Transfer_End        date,
    i_Staff_Id            number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Is_Booked           varchar2,
    i_Transfer_Reason     varchar2,
    i_Transfer_Base       varchar2,
    i_Robot               Hpd_Pref.Robot_Rt,
    i_Contract            Hpd_Pref.Contract_Rt,
    i_Indicators          Href_Pref.Indicator_Nt,
    i_Oper_Types          Href_Pref.Oper_Type_Nt,
    i_Currency_Id         number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- dismissal
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_New
  (
    o_Journal         out Hpd_Pref.Dismissal_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Dismissal
  (
    p_Journal              in out nocopy Hpd_Pref.Dismissal_Journal_Rt,
    i_Page_Id              number,
    i_Staff_Id             number,
    i_Dismissal_Date       date,
    i_Dismissal_Reason_Id  number,
    i_Employment_Source_Id number,
    i_Based_On_Doc         varchar2,
    i_Note                 varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- wage change
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Wage_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Wage_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Wage_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt,
    i_Currency_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  -- rank change
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Rank_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null,
    i_Journal_Type_Id number,
    i_Source_Table    varchar2 := null,
    i_Source_Id       number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Rank_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Rank_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Rank_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  -- vacation limit change
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Limit_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null,
    i_Division_Id    number,
    i_Days_Limit     number,
    i_Change_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Add_Page
  (
    p_Journal  in out nocopy Hpd_Pref.Limit_Change_Journal_Rt,
    i_Page_Id  number,
    i_Staff_Id number
  );
  ----------------------------------------------------------------------------------------------------
  -- schedule change
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Begin_Date     date,
    i_End_Date       date,
    i_Lang_Code      varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Schedule_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  -- sick leave
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_New
  (
    o_Journal        out Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Sick_Leave
  (
    p_Journal           in out nocopy Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Timeoff_Id        number,
    i_Staff_Id          number,
    i_Reason_Id         number,
    i_Coefficient       number,
    i_Sick_Leave_Number varchar2,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Shas              Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- business trips
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_New
  (
    o_Journal         out Hpd_Pref.Business_Trip_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Business_Trip
  (
    p_Journal    in out nocopy Hpd_Pref.Business_Trip_Journal_Rt,
    i_Timeoff_Id number,
    i_Staff_Id   number,
    i_Region_Ids Array_Number,
    i_Person_Id  number,
    i_Reason_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Note       varchar2,
    i_Shas       Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- vacations
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_New
  (
    o_Journal        out Hpd_Pref.Vacation_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Vacation
  (
    p_Journal      in out nocopy Hpd_Pref.Vacation_Journal_Rt,
    i_Timeoff_Id   number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Shas         Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Add
  (
    p_Overtimes        in out nocopy Hpd_Pref.Overtime_Nt,
    i_Overtime_Date    date,
    i_Overtime_Seconds number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Overtime
  (
    p_Journal     in out nocopy Hpd_Pref.Overtime_Journal_Rt,
    i_Staff_Id    number,
    i_Month       date,
    i_Overtime_Id number,
    i_Overtimes   Hpd_Pref.Overtime_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_New
  (
    o_Overtime_Journal out Hpd_Pref.Overtime_Journal_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Journal_Number   varchar2,
    i_Journal_Date     date,
    i_Journal_Name     varchar2,
    i_Division_Id      number := null,
    i_Lang_Code        varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  -- timebook adjustment
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_New
  (
    o_Journal         out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Division_Id     number,
    i_Adjustment_Date date,
    i_Lang_Code       varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Add_Adjustment
  (
    p_Journal    in out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Adjustment Hpd_Pref.Adjustment_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_New
  (
    o_Adjustment out Hpd_Pref.Adjustment_Rt,
    i_Page_Id    number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_Add_Kind
  (
    p_Adjustment   in out Hpd_Pref.Adjustment_Rt,
    i_Kind         varchar2,
    i_Free_Time    number,
    i_Overtime     number,
    i_Turnout_Time number
  );
  ----------------------------------------------------------------------------------------------------
  -- journal page parts
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_New
  (
    o_Robot           out Hpd_Pref.Robot_Rt,
    i_Robot_Id        number,
    i_Division_Id     number,
    i_Job_Id          number,
    i_Org_Unit_Id     number := null,
    i_Rank_Id         number := null,
    i_Wage_Scale_Id   number := null,
    i_Employment_Type varchar2,
    i_Fte_Id          number,
    i_Fte             number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Contract_New
  (
    o_Contract             out Hpd_Pref.Contract_Rt,
    i_Contract_Number      varchar2,
    i_Contract_Date        date,
    i_Fixed_Term           varchar2,
    i_Expiry_Date          date,
    i_Fixed_Term_Base_Id   number,
    i_Concluding_Term      varchar2,
    i_Hiring_Conditions    varchar2,
    i_Other_Conditions     varchar2,
    i_Workplace_Equipment  varchar2,
    i_Representative_Basis varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Oper_Type     in out nocopy Href_Pref.Oper_Type_Nt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicator       in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_New
  (
    o_Contract                 out Hpd_Pref.Cv_Contract_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Contract_Id              number,
    i_Contract_Number          varchar2,
    i_Page_Id                  number := null,
    i_Division_Id              number,
    i_Person_Id                number,
    i_Begin_Date               date,
    i_End_Date                 date,
    i_Contract_Kind            varchar2,
    i_Contract_Employment_Kind varchar2,
    i_Access_To_Add_Item       varchar2,
    i_Early_Closed_Date        date := null,
    i_Early_Closed_Note        varchar2 := null,
    i_Note                     varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_Item
  (
    o_Contract         in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_Contract_Item_Id number,
    i_Name             varchar2,
    i_Quantity         number,
    i_Amount           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_File
  (
    o_Contract in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_File_Sha varchar2,
    i_Note     varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  -- application
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_New
  (
    o_Application    out Hpd_Pref.Application_Create_Robot_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Name           varchar2,
    i_Opened_Date    date,
    i_Division_Id    number,
    i_Job_Id         number,
    i_Quantity       number,
    i_Note           varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_New
  (
    o_Application    out Hpd_Pref.Application_Hiring_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Hiring_Date    date,
    i_Robot_Id       number,
    i_Note           varchar2,
    -- person info
    i_First_Name      varchar2,
    i_Last_Name       varchar2,
    i_Middle_Name     varchar2,
    i_Birthday        date,
    i_Gender          varchar2,
    i_Phone           varchar2,
    i_Email           varchar2,
    i_Photo_Sha       varchar2,
    i_Address         varchar2,
    i_Legal_Address   varchar2,
    i_Region_Id       number,
    i_Passport_Series varchar2,
    i_Passport_Number varchar2,
    i_Npin            varchar2,
    i_Iapa            varchar2,
    i_Employment_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_New
  (
    o_Application    out Hpd_Pref.Application_Transfer_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Add_Transfer
  (
    o_Application         in out nocopy Hpd_Pref.Application_Transfer_Rt,
    i_Application_Unit_Id number,
    i_Staff_Id            number,
    i_Transfer_Begin      date,
    i_Robot_Id            number,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_New
  (
    o_Application         out Hpd_Pref.Application_Dismissal_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Application_Id      number,
    i_Staff_Id            number,
    i_Dismissal_Date      date,
    i_Dismissal_Reason_Id number,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Is_Hiring_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Contractor_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Transfer_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Dismissal_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Wage_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Rank_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Limit_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Schedule_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Sick_Leave_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Business_Trip_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Vacation_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Overtime_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Timebook_Adjustment_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kind(i_Transfer_End date := null) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Cast_Staff_Kind_By_Emp_Type(i_Employment_Type varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Changing_Transaction
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return Hpd_Transactions%rowtype;
  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date,
    o_Trans_Id   out number,
    o_Action     out varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Trans_Type       varchar2,
    i_Period           date,
    i_Except_Jounal_Id number := null,
    o_Trans_Id         out number,
    o_Action           out varchar2,
    o_Period           out date
  );
  ----------------------------------------------------------------------------------------------------
  Function Trans_Id_By_Period
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Schedule
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Schedules%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Currency
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Currencies%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Vacation_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Vacation_Limits%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Ranks%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contract
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Page_Contracts%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Mrf_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Hrm_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hrm_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Org_Unit_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Division_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Job_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Rank_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Currency_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Vacation_Days_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contractual_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage_Scale_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Ids
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Limit_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Trans_Types       Array_Varchar2,
    i_With_Wage_Scale   boolean := false,
    i_Partition_By_Year boolean := false
  ) return Hpd_Pref.Transaction_Part_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Trans_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number,
    i_Trans_Type varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Singular_Journal
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Journal_Type_Id  number,
    i_Singular_Type_Id number,
    i_Pages_Cnt        number
  );
  ----------------------------------------------------------------------------------------------------
  Function Staff_Timebook_Adjustment_Calced
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Adjustment_Date date,
    i_Kind            varchar2,
    i_Journal_Id      number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function User_Name
  (
    i_Company_Id number,
    i_User_Id    number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Name
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Application_Has_Result
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Page(i_Page_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Overtime(i_Overtime_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Timeoffs(i_Timeoff_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Journal(i_Journal_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Page(i_Page_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Overtime(i_Overtime_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Timeoff(i_Timeoff_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Grant_Part
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------           
  Function Sign_Process_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------         
  Function Journal_Type_Sign_Template_Id
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------         
  Function Has_Journal_Type_Sign_Template
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------         
  Function Load_Sign_Document_Status
  (
    i_Company_Id  number,
    i_Document_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Main_Job return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_External_Parttime return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Internal_Parttime return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type(i_Employment_Type varchar2) return varchar2;
  Function Employment_Types(i_Include_Contractors boolean := false) return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind(i_Lock_Interval_Kind varchar2) return varchar2;
  Function Lock_Interval_Kinds return Matrix_Varchar2;
  Function Charge_Lock_Interval_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period(i_Trial_Period varchar2) return varchar2;
  Function Trial_Periods return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind(i_Transfer_Kind varchar2) return varchar2;
  Function Transfer_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type(i_Journal_Type varchar2) return varchar2;
  Function Journal_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind(i_Adjustment_Kind varchar2) return varchar2;
  Function Adjustment_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind(i_Contract_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Cv_Contract_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2;
  Function Application_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment(i_Status varchar2) return varchar2;
  Function Contract_Employments return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  -- journal notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  -- application notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Created
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Status_Changed
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2,
    i_Old_Status          varchar2,
    i_New_Status          varchar2
  ) return varchar2;
end Hpd_Util;
/
create or replace package body Hpd_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- uri of journal view forms by journal_type id
  Function Journal_View_Uri
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
    v_Pcode varchar2(20);
  begin
    v_Pcode := z_Hpd_Journal_Types.Take(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id).Pcode;
  
    case v_Pcode
      when Hpd_Pref.c_Pcode_Journal_Type_Hiring then
        return Hpd_Pref.c_Form_Hiring_Journal_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple then
        return Hpd_Pref.c_Form_Hiring_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Transfer then
        return Hpd_Pref.c_Form_Transfer_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple then
        return Hpd_Pref.c_Form_Transfer_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Dismissal then
        return Hpd_Pref.c_Form_Dismissal_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple then
        return Hpd_Pref.c_Form_Dismissal_Multiple_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Rank_Change then
        return Hpd_Pref.c_Form_Rank_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Limit_Change then
        return Hpd_Pref.c_Form_Vacation_Limit_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Wage_Change then
        return Hpd_Pref.c_Form_Wage_Change_View;
        --  you should add this part when multiple wage change view form created.
      when Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change then
        return Hpd_Pref.c_Form_Schedule_Change_View;
      when Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment then
        return Hpd_Pref.c_Form_Timebook_Adjustment_View;
      else
        return null;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_New
  (
    o_Journal         out Hpd_Pref.Hiring_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Hirings := Hpd_Pref.Hiring_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Hiring
  (
    p_Journal              in out nocopy Hpd_Pref.Hiring_Journal_Rt,
    i_Page_Id              number,
    i_Employee_Id          number,
    i_Staff_Number         varchar2,
    i_Hiring_Date          date,
    i_Dismissal_Date       date := null,
    i_Trial_Period         number,
    i_Employment_Source_Id number,
    i_Schedule_Id          number,
    i_Vacation_Days_Limit  number,
    i_Is_Booked            varchar2,
    i_Robot                Hpd_Pref.Robot_Rt,
    i_Contract             Hpd_Pref.Contract_Rt,
    i_Cv_Contract          Hpd_Pref.Cv_Contract_Rt := null,
    i_Indicators           Href_Pref.Indicator_Nt,
    i_Oper_Types           Href_Pref.Oper_Type_Nt,
    i_Currency_Id          number := null
  ) is
    v_Hiring Hpd_Pref.Hiring_Rt;
  begin
    v_Hiring.Page_Id              := i_Page_Id;
    v_Hiring.Employee_Id          := i_Employee_Id;
    v_Hiring.Staff_Number         := i_Staff_Number;
    v_Hiring.Hiring_Date          := i_Hiring_Date;
    v_Hiring.Dismissal_Date       := i_Dismissal_Date;
    v_Hiring.Trial_Period         := i_Trial_Period;
    v_Hiring.Employment_Source_Id := i_Employment_Source_Id;
    v_Hiring.Schedule_Id          := i_Schedule_Id;
    v_Hiring.Currency_Id          := i_Currency_Id;
    v_Hiring.Vacation_Days_Limit  := i_Vacation_Days_Limit;
    v_Hiring.Is_Booked            := i_Is_Booked;
    v_Hiring.Robot                := i_Robot;
    v_Hiring.Contract             := i_Contract;
    v_Hiring.Cv_Contract          := i_Cv_Contract;
    v_Hiring.Indicators           := i_Indicators;
    v_Hiring.Oper_Types           := i_Oper_Types;
  
    p_Journal.Hirings.Extend();
    p_Journal.Hirings(p_Journal.Hirings.Count) := v_Hiring;
  end;

  ----------------------------------------------------------------------------------------------------
  -- transfer
  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_New
  (
    o_Journal         out Hpd_Pref.Transfer_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Lang_Code       := i_Lang_Code;
    o_Journal.Transfers       := Hpd_Pref.Transfer_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Transfer
  (
    p_Journal             in out nocopy Hpd_Pref.Transfer_Journal_Rt,
    i_Page_Id             number,
    i_Transfer_Begin      date,
    i_Transfer_End        date,
    i_Staff_Id            number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Is_Booked           varchar2,
    i_Transfer_Reason     varchar2,
    i_Transfer_Base       varchar2,
    i_Robot               Hpd_Pref.Robot_Rt,
    i_Contract            Hpd_Pref.Contract_Rt,
    i_Indicators          Href_Pref.Indicator_Nt,
    i_Oper_Types          Href_Pref.Oper_Type_Nt,
    i_Currency_Id         number := null
  ) is
    v_Transfer Hpd_Pref.Transfer_Rt;
  begin
    v_Transfer.Page_Id             := i_Page_Id;
    v_Transfer.Transfer_Begin      := i_Transfer_Begin;
    v_Transfer.Transfer_End        := i_Transfer_End;
    v_Transfer.Staff_Id            := i_Staff_Id;
    v_Transfer.Schedule_Id         := i_Schedule_Id;
    v_Transfer.Currency_Id         := i_Currency_Id;
    v_Transfer.Vacation_Days_Limit := i_Vacation_Days_Limit;
    v_Transfer.Is_Booked           := i_Is_Booked;
    v_Transfer.Transfer_Reason     := i_Transfer_Reason;
    v_Transfer.Transfer_Base       := i_Transfer_Base;
    v_Transfer.Robot               := i_Robot;
    v_Transfer.Contract            := i_Contract;
    v_Transfer.Indicators          := i_Indicators;
    v_Transfer.Oper_Types          := i_Oper_Types;
  
    p_Journal.Transfers.Extend();
    p_Journal.Transfers(p_Journal.Transfers.Count) := v_Transfer;
  end;

  ----------------------------------------------------------------------------------------------------
  -- dismissal
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_New
  (
    o_Journal         out Hpd_Pref.Dismissal_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Dismissals := Hpd_Pref.Dismissal_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Dismissal
  (
    p_Journal              in out nocopy Hpd_Pref.Dismissal_Journal_Rt,
    i_Page_Id              number,
    i_Staff_Id             number,
    i_Dismissal_Date       date,
    i_Dismissal_Reason_Id  number,
    i_Employment_Source_Id number,
    i_Based_On_Doc         varchar2,
    i_Note                 varchar2
  ) is
    v_Dismissal Hpd_Pref.Dismissal_Rt;
  begin
    v_Dismissal.Page_Id              := i_Page_Id;
    v_Dismissal.Staff_Id             := i_Staff_Id;
    v_Dismissal.Dismissal_Date       := i_Dismissal_Date;
    v_Dismissal.Dismissal_Reason_Id  := i_Dismissal_Reason_Id;
    v_Dismissal.Employment_Source_Id := i_Employment_Source_Id;
    v_Dismissal.Based_On_Doc         := i_Based_On_Doc;
    v_Dismissal.Note                 := i_Note;
  
    p_Journal.Dismissals.Extend();
    p_Journal.Dismissals(p_Journal.Dismissals.Count) := v_Dismissal;
  end;

  ----------------------------------------------------------------------------------------------------
  -- wage change
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Wage_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Wage_Changes := Hpd_Pref.Wage_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Wage_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Wage_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt,
    i_Currency_Id number := null
  ) is
    v_Wage_Change Hpd_Pref.Wage_Change_Rt;
  begin
    v_Wage_Change.Page_Id     := i_Page_Id;
    v_Wage_Change.Staff_Id    := i_Staff_Id;
    v_Wage_Change.Change_Date := i_Change_Date;
    v_Wage_Change.Currency_Id := i_Currency_Id;
    v_Wage_Change.Indicators  := i_Indicators;
    v_Wage_Change.Oper_Types  := i_Oper_Types;
  
    p_Journal.Wage_Changes.Extend();
    p_Journal.Wage_Changes(p_Journal.Wage_Changes.Count) := v_Wage_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- rank change
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_New
  (
    o_Journal         out Hpd_Pref.Rank_Change_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null,
    i_Journal_Type_Id number,
    i_Source_Table    varchar2 := null,
    i_Source_Id       number := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Source_Table    := i_Source_Table;
    o_Journal.Source_Id       := i_Source_Id;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Rank_Changes := Hpd_Pref.Rank_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Rank_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Rank_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Rank_Id     number
  ) is
    v_Rank_Change Hpd_Pref.Rank_Change_Rt;
  begin
    v_Rank_Change.Page_Id     := i_Page_Id;
    v_Rank_Change.Staff_Id    := i_Staff_Id;
    v_Rank_Change.Change_Date := i_Change_Date;
    v_Rank_Change.Rank_Id     := i_Rank_Id;
  
    p_Journal.Rank_Changes.Extend();
    p_Journal.Rank_Changes(p_Journal.Rank_Changes.Count) := v_Rank_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- vacation limit change
  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Limit_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null,
    i_Division_Id    number,
    i_Days_Limit     number,
    i_Change_Date    date
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Division_Id    := i_Division_Id;
    o_Journal.Days_Limit     := i_Days_Limit;
    o_Journal.Change_Date    := i_Change_Date;
    o_Journal.Lang_Code      := i_Lang_Code;
  
    o_Journal.Pages := Hpd_Pref.Page_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Limit_Change_Add_Page
  (
    p_Journal  in out nocopy Hpd_Pref.Limit_Change_Journal_Rt,
    i_Page_Id  number,
    i_Staff_Id number
  ) is
    v_Page Hpd_Pref.Page_Rt;
  begin
    v_Page.Page_Id  := i_Page_Id;
    v_Page.Staff_Id := i_Staff_Id;
  
    p_Journal.Pages.Extend();
    p_Journal.Pages(p_Journal.Pages.Count) := v_Page;
  end;

  ----------------------------------------------------------------------------------------------------
  -- schedule change
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_New
  (
    o_Journal        out Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Division_Id    number,
    i_Begin_Date     date,
    i_End_Date       date,
    i_Lang_Code      varchar2 := null
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Division_Id    := i_Division_Id;
    o_Journal.Begin_Date     := i_Begin_Date;
    o_Journal.End_Date       := i_End_Date;
    o_Journal.Lang_Code      := i_Lang_Code;
  
    o_Journal.Schedule_Changes := Hpd_Pref.Schedule_Change_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Schedule_Change
  (
    p_Journal     in out nocopy Hpd_Pref.Schedule_Change_Journal_Rt,
    i_Page_Id     number,
    i_Staff_Id    number,
    i_Schedule_Id number
  ) is
    v_Schedule_Change Hpd_Pref.Schedule_Change_Rt;
  begin
    v_Schedule_Change.Page_Id     := i_Page_Id;
    v_Schedule_Change.Staff_Id    := i_Staff_Id;
    v_Schedule_Change.Schedule_Id := i_Schedule_Id;
  
    p_Journal.Schedule_Changes.Extend;
    p_Journal.Schedule_Changes(p_Journal.Schedule_Changes.Count) := v_Schedule_Change;
  end;

  ----------------------------------------------------------------------------------------------------
  -- sick leave
  ----------------------------------------------------------------------------------------------------
  Procedure Sick_Leave_Journal_New
  (
    o_Journal        out Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Lang_Code      := i_Lang_Code;
  
    o_Journal.Sick_Leaves := Hpd_Pref.Sick_Leave_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Sick_Leave
  (
    p_Journal           in out nocopy Hpd_Pref.Sick_Leave_Journal_Rt,
    i_Timeoff_Id        number,
    i_Staff_Id          number,
    i_Reason_Id         number,
    i_Coefficient       number,
    i_Sick_Leave_Number varchar2,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Shas              Array_Varchar2
  ) is
    v_Sick_Leave Hpd_Pref.Sick_Leave_Rt;
  begin
    v_Sick_Leave.Timeoff_Id        := i_Timeoff_Id;
    v_Sick_Leave.Staff_Id          := i_Staff_Id;
    v_Sick_Leave.Reason_Id         := i_Reason_Id;
    v_Sick_Leave.Coefficient       := i_Coefficient;
    v_Sick_Leave.Sick_Leave_Number := i_Sick_Leave_Number;
    v_Sick_Leave.Begin_Date        := i_Begin_Date;
    v_Sick_Leave.End_Date          := i_End_Date;
    v_Sick_Leave.Shas              := i_Shas;
  
    p_Journal.Sick_Leaves.Extend();
    p_Journal.Sick_Leaves(p_Journal.Sick_Leaves.Count) := v_Sick_Leave;
  end;

  ----------------------------------------------------------------------------------------------------
  -- business trips
  ----------------------------------------------------------------------------------------------------
  Procedure Business_Trip_Journal_New
  (
    o_Journal         out Hpd_Pref.Business_Trip_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Type_Id number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Type_Id := i_Journal_Type_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Business_Trips := Hpd_Pref.Business_Trip_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Business_Trip
  (
    p_Journal    in out nocopy Hpd_Pref.Business_Trip_Journal_Rt,
    i_Timeoff_Id number,
    i_Staff_Id   number,
    i_Region_Ids Array_Number,
    i_Person_Id  number,
    i_Reason_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Note       varchar2,
    i_Shas       Array_Varchar2
  ) is
    v_Business_Trip Hpd_Pref.Business_Trip_Rt;
  begin
    v_Business_Trip.Timeoff_Id := i_Timeoff_Id;
    v_Business_Trip.Staff_Id   := i_Staff_Id;
    v_Business_Trip.Region_Ids := i_Region_Ids;
    v_Business_Trip.Person_Id  := i_Person_Id;
    v_Business_Trip.Reason_Id  := i_Reason_Id;
    v_Business_Trip.Begin_Date := i_Begin_Date;
    v_Business_Trip.End_Date   := i_End_Date;
    v_Business_Trip.Note       := i_Note;
    v_Business_Trip.Shas       := i_Shas;
  
    p_Journal.Business_Trips.Extend();
    p_Journal.Business_Trips(p_Journal.Business_Trips.Count) := v_Business_Trip;
  end;

  ----------------------------------------------------------------------------------------------------
  -- vacations
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Journal_New
  (
    o_Journal        out Hpd_Pref.Vacation_Journal_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Journal_Date   date,
    i_Journal_Name   varchar2,
    i_Lang_Code      varchar2 := null
  ) is
  begin
    o_Journal.Company_Id     := i_Company_Id;
    o_Journal.Filial_Id      := i_Filial_Id;
    o_Journal.Journal_Id     := i_Journal_Id;
    o_Journal.Journal_Number := i_Journal_Number;
    o_Journal.Journal_Date   := i_Journal_Date;
    o_Journal.Journal_Name   := i_Journal_Name;
    o_Journal.Lang_Code      := i_Lang_Code;
  
    o_Journal.Vacations := Hpd_Pref.Vacation_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Vacation
  (
    p_Journal      in out nocopy Hpd_Pref.Vacation_Journal_Rt,
    i_Timeoff_Id   number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Shas         Array_Varchar2
  ) is
    v_Vacation Hpd_Pref.Vacation_Rt;
  begin
    v_Vacation.Timeoff_Id   := i_Timeoff_Id;
    v_Vacation.Staff_Id     := i_Staff_Id;
    v_Vacation.Time_Kind_Id := i_Time_Kind_Id;
    v_Vacation.Begin_Date   := i_Begin_Date;
    v_Vacation.End_Date     := i_End_Date;
    v_Vacation.Shas         := i_Shas;
  
    p_Journal.Vacations.Extend();
    p_Journal.Vacations(p_Journal.Vacations.Count) := v_Vacation;
  end;

  ----------------------------------------------------------------------------------------------------
  -- overtime
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Add
  (
    p_Overtimes        in out nocopy Hpd_Pref.Overtime_Nt,
    i_Overtime_Date    date,
    i_Overtime_Seconds number
  ) is
    v_Overtime Hpd_Pref.Overtime_Rt;
  begin
    v_Overtime.Overtime_Date    := i_Overtime_Date;
    v_Overtime.Overtime_Seconds := i_Overtime_Seconds;
  
    p_Overtimes.Extend();
    p_Overtimes(p_Overtimes.Count) := v_Overtime;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Add_Overtime
  (
    p_Journal     in out nocopy Hpd_Pref.Overtime_Journal_Rt,
    i_Staff_Id    number,
    i_Month       date,
    i_Overtime_Id number,
    i_Overtimes   Hpd_Pref.Overtime_Nt
  ) is
    v_Overtime_Staff Hpd_Pref.Overtime_Staff_Rt;
  begin
    v_Overtime_Staff.Staff_Id    := i_Staff_Id;
    v_Overtime_Staff.Month       := i_Month;
    v_Overtime_Staff.Overtime_Id := i_Overtime_Id;
    v_Overtime_Staff.Overtimes   := i_Overtimes;
  
    p_Journal.Overtime_Staffs.Extend();
    p_Journal.Overtime_Staffs(p_Journal.Overtime_Staffs.Count) := v_Overtime_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Journal_New
  (
    o_Overtime_Journal out Hpd_Pref.Overtime_Journal_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Journal_Number   varchar2,
    i_Journal_Date     date,
    i_Journal_Name     varchar2,
    i_Division_Id      number := null,
    i_Lang_Code        varchar2 := null
  ) is
  begin
    o_Overtime_Journal.Company_Id      := i_Company_Id;
    o_Overtime_Journal.Filial_Id       := i_Filial_Id;
    o_Overtime_Journal.Journal_Id      := i_Journal_Id;
    o_Overtime_Journal.Journal_Number  := i_Journal_Number;
    o_Overtime_Journal.Journal_Date    := i_Journal_Date;
    o_Overtime_Journal.Journal_Name    := i_Journal_Name;
    o_Overtime_Journal.Lang_Code       := i_Lang_Code;
    o_Overtime_Journal.Division_Id     := i_Division_Id;
    o_Overtime_Journal.Overtime_Staffs := Hpd_Pref.Overtime_Staff_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  -- timebook adjustment
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Journal_New
  (
    o_Journal         out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Id      number,
    i_Journal_Number  varchar2,
    i_Journal_Date    date,
    i_Journal_Name    varchar2,
    i_Division_Id     number,
    i_Adjustment_Date date,
    i_Lang_Code       varchar2 := null
  ) is
  begin
    o_Journal.Company_Id      := i_Company_Id;
    o_Journal.Filial_Id       := i_Filial_Id;
    o_Journal.Journal_Id      := i_Journal_Id;
    o_Journal.Journal_Number  := i_Journal_Number;
    o_Journal.Journal_Date    := i_Journal_Date;
    o_Journal.Journal_Name    := i_Journal_Name;
    o_Journal.Division_Id     := i_Division_Id;
    o_Journal.Adjustment_Date := i_Adjustment_Date;
    o_Journal.Lang_Code       := i_Lang_Code;
  
    o_Journal.Adjustments := Hpd_Pref.Adjustment_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Add_Adjustment
  (
    p_Journal    in out Hpd_Pref.Timebook_Adjustment_Journal_Rt,
    i_Adjustment Hpd_Pref.Adjustment_Rt
  ) is
  begin
    p_Journal.Adjustments.Extend;
    p_Journal.Adjustments(p_Journal.Adjustments.Count) := i_Adjustment;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_New
  (
    o_Adjustment out Hpd_Pref.Adjustment_Rt,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
  begin
    o_Adjustment.Page_Id  := i_Page_Id;
    o_Adjustment.Staff_Id := i_Staff_Id;
  
    o_Adjustment.Kinds := Hpd_Pref.Adjustment_Kind_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Adjustment_Add_Kind
  (
    p_Adjustment   in out Hpd_Pref.Adjustment_Rt,
    i_Kind         varchar2,
    i_Free_Time    number,
    i_Overtime     number,
    i_Turnout_Time number
  ) is
    v_Kind Hpd_Pref.Adjustment_Kind_Rt;
  begin
    v_Kind.Kind         := i_Kind;
    v_Kind.Free_Time    := i_Free_Time;
    v_Kind.Overtime     := i_Overtime;
    v_Kind.Turnout_Time := i_Turnout_Time;
  
    p_Adjustment.Kinds.Extend;
    p_Adjustment.Kinds(p_Adjustment.Kinds.Count) := v_Kind;
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal page parts
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_New
  (
    o_Robot           out Hpd_Pref.Robot_Rt,
    i_Robot_Id        number,
    i_Division_Id     number,
    i_Job_Id          number,
    i_Org_Unit_Id     number := null,
    i_Rank_Id         number := null,
    i_Wage_Scale_Id   number := null,
    i_Employment_Type varchar2,
    i_Fte_Id          number,
    i_Fte             number
  ) is
  begin
    o_Robot.Robot_Id        := i_Robot_Id;
    o_Robot.Division_Id     := i_Division_Id;
    o_Robot.Job_Id          := i_Job_Id;
    o_Robot.Org_Unit_Id     := i_Org_Unit_Id;
    o_Robot.Rank_Id         := i_Rank_Id;
    o_Robot.Wage_Scale_Id   := i_Wage_Scale_Id;
    o_Robot.Employment_Type := i_Employment_Type;
    o_Robot.Fte_Id          := i_Fte_Id;
    o_Robot.Fte             := i_Fte;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Contract_New
  (
    o_Contract             out Hpd_Pref.Contract_Rt,
    i_Contract_Number      varchar2,
    i_Contract_Date        date,
    i_Fixed_Term           varchar2,
    i_Expiry_Date          date,
    i_Fixed_Term_Base_Id   number,
    i_Concluding_Term      varchar2,
    i_Hiring_Conditions    varchar2,
    i_Other_Conditions     varchar2,
    i_Workplace_Equipment  varchar2,
    i_Representative_Basis varchar2
  ) is
  begin
    o_Contract.Contract_Number      := i_Contract_Number;
    o_Contract.Contract_Date        := i_Contract_Date;
    o_Contract.Fixed_Term           := i_Fixed_Term;
    o_Contract.Expiry_Date          := i_Expiry_Date;
    o_Contract.Fixed_Term_Base_Id   := i_Fixed_Term_Base_Id;
    o_Contract.Concluding_Term      := i_Concluding_Term;
    o_Contract.Hiring_Conditions    := i_Hiring_Conditions;
    o_Contract.Other_Conditions     := i_Other_Conditions;
    o_Contract.Workplace_Equipment  := i_Workplace_Equipment;
    o_Contract.Representative_Basis := i_Representative_Basis;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Oper_Type     in out nocopy Href_Pref.Oper_Type_Nt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Oper_Type.Extend;
    p_Oper_Type(p_Oper_Type.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicator       in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Indicator.Extend;
    p_Indicator(p_Indicator.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  -- CV Contracts
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_New
  (
    o_Contract                 out Hpd_Pref.Cv_Contract_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Contract_Id              number,
    i_Contract_Number          varchar2,
    i_Page_Id                  number := null,
    i_Division_Id              number,
    i_Person_Id                number,
    i_Begin_Date               date,
    i_End_Date                 date,
    i_Contract_Kind            varchar2,
    i_Contract_Employment_Kind varchar2,
    i_Access_To_Add_Item       varchar2,
    i_Early_Closed_Date        date := null,
    i_Early_Closed_Note        varchar2 := null,
    i_Note                     varchar2 := null
  ) is
  begin
    o_Contract.Company_Id               := i_Company_Id;
    o_Contract.Filial_Id                := i_Filial_Id;
    o_Contract.Contract_Id              := i_Contract_Id;
    o_Contract.Contract_Number          := i_Contract_Number;
    o_Contract.Page_Id                  := i_Page_Id;
    o_Contract.Division_Id              := i_Division_Id;
    o_Contract.Person_Id                := i_Person_Id;
    o_Contract.Begin_Date               := i_Begin_Date;
    o_Contract.End_Date                 := i_End_Date;
    o_Contract.Contract_Kind            := i_Contract_Kind;
    o_Contract.Contract_Employment_Kind := i_Contract_Employment_Kind;
    o_Contract.Access_To_Add_Item       := i_Access_To_Add_Item;
    o_Contract.Early_Closed_Date        := i_Early_Closed_Date;
    o_Contract.Early_Closed_Note        := i_Early_Closed_Note;
    o_Contract.Note                     := i_Note;
  
    o_Contract.Items := Hpd_Pref.Cv_Contract_Item_Nt();
    o_Contract.Files := Hpd_Pref.Cv_Contract_File_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_Item
  (
    o_Contract         in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_Contract_Item_Id number,
    i_Name             varchar2,
    i_Quantity         number,
    i_Amount           number
  ) is
    v_Item Hpd_Pref.Cv_Contract_Item_Rt;
  begin
    v_Item.Contract_Item_Id := i_Contract_Item_Id;
    v_Item.Name             := i_Name;
    v_Item.Quantity         := i_Quantity;
    v_Item.Amount           := i_Amount;
  
    o_Contract.Items.Extend;
    o_Contract.Items(o_Contract.Items.Count) := v_Item;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Add_File
  (
    o_Contract in out nocopy Hpd_Pref.Cv_Contract_Rt,
    i_File_Sha varchar2,
    i_Note     varchar2 := null
  ) is
    v_File Hpd_Pref.Cv_Contract_File_Rt;
  begin
    v_File.File_Sha := i_File_Sha;
    v_File.Note     := i_Note;
  
    o_Contract.Files.Extend;
    o_Contract.Files(o_Contract.Files.Count) := v_File;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Application
  ----------------------------------------------------------------------------------------------------
  Procedure Application_Create_Robot_New
  (
    o_Application    out Hpd_Pref.Application_Create_Robot_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Name           varchar2,
    i_Opened_Date    date,
    i_Division_Id    number,
    i_Job_Id         number,
    i_Quantity       number,
    i_Note           varchar2
  ) is
  begin
    o_Application.Company_Id     := i_Company_Id;
    o_Application.Filial_Id      := i_Filial_Id;
    o_Application.Application_Id := i_Application_Id;
    o_Application.Name           := i_Name;
    o_Application.Opened_Date    := i_Opened_Date;
    o_Application.Division_Id    := i_Division_Id;
    o_Application.Job_Id         := i_Job_Id;
    o_Application.Quantity       := i_Quantity;
    o_Application.Note           := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Hiring_New
  (
    o_Application    out Hpd_Pref.Application_Hiring_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number,
    i_Hiring_Date    date,
    i_Robot_Id       number,
    i_Note           varchar2,
    -- person info
    i_First_Name      varchar2,
    i_Last_Name       varchar2,
    i_Middle_Name     varchar2,
    i_Birthday        date,
    i_Gender          varchar2,
    i_Phone           varchar2,
    i_Email           varchar2,
    i_Photo_Sha       varchar2,
    i_Address         varchar2,
    i_Legal_Address   varchar2,
    i_Region_Id       number,
    i_Passport_Series varchar2,
    i_Passport_Number varchar2,
    i_Npin            varchar2,
    i_Iapa            varchar2,
    i_Employment_Type varchar2
  ) is
  begin
    o_Application.Company_Id      := i_Company_Id;
    o_Application.Filial_Id       := i_Filial_Id;
    o_Application.Application_Id  := i_Application_Id;
    o_Application.Hiring_Date     := i_Hiring_Date;
    o_Application.Robot_Id        := i_Robot_Id;
    o_Application.Note            := i_Note;
    o_Application.First_Name      := i_First_Name;
    o_Application.Last_Name       := i_Last_Name;
    o_Application.Middle_Name     := i_Middle_Name;
    o_Application.Birthday        := i_Birthday;
    o_Application.Gender          := i_Gender;
    o_Application.Phone           := i_Phone;
    o_Application.Email           := i_Email;
    o_Application.Photo_Sha       := i_Photo_Sha;
    o_Application.Address         := i_Address;
    o_Application.Legal_Address   := i_Legal_Address;
    o_Application.Region_Id       := i_Region_Id;
    o_Application.Passport_Series := i_Passport_Series;
    o_Application.Passport_Number := i_Passport_Number;
    o_Application.Npin            := i_Npin;
    o_Application.Iapa            := i_Iapa;
    o_Application.Employment_Type := i_Employment_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Transfer_New
  (
    o_Application    out Hpd_Pref.Application_Transfer_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) is
  begin
    o_Application.Company_Id     := i_Company_Id;
    o_Application.Filial_Id      := i_Filial_Id;
    o_Application.Application_Id := i_Application_Id;
  
    o_Application.Transfer_Units := Hpd_Pref.Application_Transfer_Unit_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Add_Transfer
  (
    o_Application         in out nocopy Hpd_Pref.Application_Transfer_Rt,
    i_Application_Unit_Id number,
    i_Staff_Id            number,
    i_Transfer_Begin      date,
    i_Robot_Id            number,
    i_Note                varchar2
  ) is
    v_Transfer Hpd_Pref.Application_Transfer_Unit_Rt;
  begin
    v_Transfer.Application_Unit_Id := i_Application_Unit_Id;
    v_Transfer.Staff_Id            := i_Staff_Id;
    v_Transfer.Transfer_Begin      := i_Transfer_Begin;
    v_Transfer.Robot_Id            := i_Robot_Id;
    v_Transfer.Note                := i_Note;
  
    o_Application.Transfer_Units.Extend();
    o_Application.Transfer_Units(o_Application.Transfer_Units.Count) := v_Transfer;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_Dismissal_New
  (
    o_Application         out Hpd_Pref.Application_Dismissal_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Application_Id      number,
    i_Staff_Id            number,
    i_Dismissal_Date      date,
    i_Dismissal_Reason_Id number,
    i_Note                varchar2
  ) is
  begin
    o_Application.Company_Id          := i_Company_Id;
    o_Application.Filial_Id           := i_Filial_Id;
    o_Application.Application_Id      := i_Application_Id;
    o_Application.Staff_Id            := i_Staff_Id;
    o_Application.Dismissal_Date      := i_Dismissal_Date;
    o_Application.Dismissal_Reason_Id := i_Dismissal_Reason_Id;
    o_Application.Note                := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select q.Journal_Type_Id
      into result
      from Hpd_Journal_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_043;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Hiring_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id, Hpd_Pref.c_Pcode_Journal_Type_Hiring),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Contractor_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Hiring_Contractor));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Transfer_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Transfer),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Dismissal_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Dismissal),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Wage_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Wage_Change),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Wage_Change_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Rank_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Rank_Change),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Rank_Change_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Limit_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Limit_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Schedule_Change_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Sick_Leave_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Business_Trip_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id in(Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Business_Trip),
                                Journal_Type_Id(i_Company_Id,
                                                Hpd_Pref.c_Pcode_Journal_Type_Business_Trip_Multiple));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Vacation_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Vacation);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Timebook_Adjustment_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Timebook_Adjustment);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Overtime_Journal
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return boolean is
  begin
    return i_Journal_Type_Id = Journal_Type_Id(i_Company_Id,
                                               Hpd_Pref.c_Pcode_Journal_Type_Overtime);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kind(i_Transfer_End date := null) return varchar2 is
  begin
    if i_Transfer_End is null then
      return Hpd_Pref.c_Transfer_Kind_Permanently;
    end if;
  
    return Hpd_Pref.c_Transfer_Kind_Temporarily;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cast_Staff_Kind_By_Emp_Type(i_Employment_Type varchar2) return varchar2 is
  begin
    if i_Employment_Type = Hpd_Pref.c_Employment_Type_Internal_Parttime then
      return Href_Pref.c_Staff_Kind_Secondary;
    end if;
  
    return Href_Pref.c_Staff_Kind_Primary;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Changing_Transaction
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return Hpd_Transactions%rowtype is
    result Hpd_Transactions%rowtype;
  begin
    select q.*
      into result
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event in
           (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, Hpd_Pref.c_Transaction_Event_In_Progress)
       and q.Begin_Date <= i_Period
       and Nvl(q.End_Date, Href_Pref.c_Max_Date) >= i_Period
     order by q.Begin_Date desc, q.Order_No desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date,
    o_Trans_Id   out number,
    o_Action     out varchar2
  ) is
  begin
    select q.Trans_Id, q.Action
      into o_Trans_Id, o_Action
      from Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Period = (select max(w.Period)
                         from Hpd_Agreements w
                        where w.Company_Id = i_Company_Id
                          and w.Filial_Id = i_Filial_Id
                          and w.Staff_Id = i_Staff_Id
                          and w.Trans_Type = i_Trans_Type
                          and w.Period <= i_Period);
  exception
    when No_Data_Found then
      o_Trans_Id := null;
      o_Action   := null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Closest_Trans_Info
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Trans_Type       varchar2,
    i_Period           date,
    i_Except_Jounal_Id number := null,
    o_Trans_Id         out number,
    o_Action           out varchar2,
    o_Period           out date
  ) is
  begin
    if i_Except_Jounal_Id is null then
      select q.Trans_Id, q.Action, q.Period
        into o_Trans_Id, o_Action, o_Period
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period = (select max(w.Period)
                           from Hpd_Agreements w
                          where w.Company_Id = i_Company_Id
                            and w.Filial_Id = i_Filial_Id
                            and w.Staff_Id = i_Staff_Id
                            and w.Trans_Type = i_Trans_Type
                            and w.Period <= i_Period);
    else
      select q.Trans_Id, q.Action, q.Period
        into o_Trans_Id, o_Action, o_Period
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period = (select max(w.Period)
                           from Hpd_Agreements w
                          where w.Company_Id = i_Company_Id
                            and w.Filial_Id = i_Filial_Id
                            and w.Staff_Id = i_Staff_Id
                            and w.Trans_Type = i_Trans_Type
                            and w.Period <= i_Period
                            and exists (select *
                                   from Hpd_Transactions Tr
                                  where Tr.Company_Id = i_Company_Id
                                    and Tr.Filial_Id = i_Filial_Id
                                    and Tr.Trans_Id = w.Trans_Id
                                    and Tr.Journal_Id <> i_Except_Jounal_Id))
         and exists (select *
                from Hpd_Transactions Tr
               where Tr.Company_Id = i_Company_Id
                 and Tr.Filial_Id = i_Filial_Id
                 and Tr.Trans_Id = q.Trans_Id
                 and Tr.Journal_Id <> i_Except_Jounal_Id);
    end if;
  exception
    when No_Data_Found then
      o_Trans_Id := null;
      o_Action   := null;
      o_Period   := null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trans_Id_By_Period
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Period     date
  ) return number is
    v_Trans_Id number;
    v_Action   varchar2(1);
  begin
    Closest_Trans_Info(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Staff_Id   => i_Staff_Id,
                       i_Trans_Type => i_Trans_Type,
                       i_Period     => i_Period,
                       o_Trans_Id   => v_Trans_Id,
                       o_Action     => v_Action);
  
    if v_Action = Hpd_Pref.c_Transaction_Action_Continue then
      return v_Trans_Id;
    end if;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Schedule
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Schedules%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Schedule,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Schedules.Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Currency
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Currencies%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Currency,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Currencies.Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Ranks%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Rank,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Ranks.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Vacation_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Vacation_Limits%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Vacation_Limit,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Vacation_Limits.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Trans_Id   => v_Trans_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contract
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Page_Contracts%rowtype is
    v_Trans_Id number;
    v_Page_Id  number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    v_Page_Id := z_Hpd_Transactions.Load(i_Company_Id => i_Company_Id, --
                 i_Filial_Id => i_Filial_Id, --
                 i_Trans_Id => v_Trans_Id).Page_Id;
  
    return z_Hpd_Page_Contracts.Take(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Page_Id    => v_Page_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hpd_Trans_Robots%rowtype is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Trans_Id   => v_Trans_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Mrf_Robots%rowtype is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return z_Mrf_Robots.Load(i_Company_Id => r_Closest_Robot.Company_Id,
                             i_Filial_Id  => r_Closest_Robot.Filial_Id,
                             i_Robot_Id   => r_Closest_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Hrm_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return Hrm_Robots%rowtype is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return z_Hrm_Robots.Load(i_Company_Id => r_Closest_Robot.Company_Id,
                             i_Filial_Id  => r_Closest_Robot.Filial_Id,
                             i_Robot_Id   => r_Closest_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    if r_Closest_Robot.Company_Id is null then
      return null;
    end if;
  
    return r_Closest_Robot.Fte;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Robot_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Robot_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Org_Unit_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Hrm_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Hrm_Robot(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Period     => i_Period);
  
    return r_Robot.Org_Unit_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Division_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Mrf_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => i_Period);
  
    return r_Robot.Division_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Job_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    r_Robot Mrf_Robots%rowtype;
  begin
    r_Robot := Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => i_Period);
  
    return r_Robot.Job_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Rank_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Rank(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Staff_Id   => i_Staff_Id,
                        i_Period     => i_Period).Rank_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Schedule(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Period     => i_Period).Schedule_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Currency_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Currency(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Period     => i_Period).Currency_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Vacation_Days_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Vacation_Limit(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id,
                                  i_Period     => i_Period).Days_Limit;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Contractual_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return varchar2 is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Contractual_Wage;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage_Scale_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    return Closest_Robot(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Period     => i_Period).Wage_Scale_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Indicator_Id number,
    i_Period       date
  ) return number is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return z_Hpd_Trans_Indicators.Take(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Trans_Id     => v_Trans_Id,
                                       i_Indicator_Id => i_Indicator_Id).Indicator_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return number is
    v_Trans_Id number;
  
    --------------------------------------------------
    Function Take_Oper_Type_Id
    (
      i_Company_Id    number,
      i_Filial_Id     number,
      i_Trans_Id      number,
      i_Oper_Group_Id number
    ) return number is
      result number;
    begin
      begin
        select t.Oper_Type_Id
          into result
          from Hpd_Trans_Oper_Types t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Trans_Id = i_Trans_Id
           and exists (select *
                  from Hpr_Oper_Types s
                 where s.Company_Id = t.Company_Id
                   and s.Oper_Type_Id = t.Oper_Type_Id
                   and s.Oper_Group_Id = i_Oper_Group_Id);
      
        return result;
      exception
        when No_Data_Found then
          return null;
        when Too_Many_Rows then
          Hpd_Error.Raise_044(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                        i_Filial_Id  => i_Filial_Id,
                                                                        i_Staff_Id   => i_Staff_Id),
                              i_Oper_Group_Name => z_Hpr_Oper_Groups.Load(i_Company_Id => i_Company_Id, --
                                                   i_Oper_Group_Id => i_Oper_Group_Id).Name);
      end;
    end;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return null;
    end if;
  
    return Take_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                             i_Filial_Id     => i_Filial_Id,
                             i_Trans_Id      => v_Trans_Id,
                             i_Oper_Group_Id => i_Oper_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Oper_Type_Ids
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Oper_Group_Id number,
    i_Period        date
  ) return Array_Number is
    v_Trans_Id number;
  
    --------------------------------------------------
    Function Load_Oper_Type_Ids
    (
      i_Company_Id    number,
      i_Filial_Id     number,
      i_Trans_Id      number,
      i_Oper_Group_Id number
    ) return Array_Number is
      result Array_Number;
    begin
      begin
        select t.Oper_Type_Id
          bulk collect
          into result
          from Hpd_Trans_Oper_Types t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Trans_Id = i_Trans_Id
           and exists (select *
                  from Hpr_Oper_Types s
                 where s.Company_Id = t.Company_Id
                   and s.Oper_Type_Id = t.Oper_Type_Id
                   and s.Oper_Group_Id = i_Oper_Group_Id);
      
        return result;
      end;
    end;
  begin
    v_Trans_Id := Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                     i_Period     => i_Period);
  
    if v_Trans_Id is null then
      return Array_Number();
    end if;
  
    return Load_Oper_Type_Ids(i_Company_Id    => i_Company_Id,
                              i_Filial_Id     => i_Filial_Id,
                              i_Trans_Id      => v_Trans_Id,
                              i_Oper_Group_Id => i_Oper_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Wage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
  begin
    if Get_Closest_Contractual_Wage(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Period     => i_Period) = 'N' then
      return Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                   i_Filial_Id     => i_Filial_Id,
                                   i_Wage_Scale_Id => Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                                                i_Filial_Id  => i_Filial_Id,
                                                                                i_Staff_Id   => i_Staff_Id,
                                                                                i_Period     => i_Period),
                                   i_Period        => i_Period,
                                   i_Rank_Id       => Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id,
                                                                          i_Staff_Id   => i_Staff_Id,
                                                                          i_Period     => i_Period));
    else
      return Get_Closest_Indicator_Value(i_Company_Id   => i_Company_Id,
                                         i_Filial_Id    => i_Filial_Id,
                                         i_Staff_Id     => i_Staff_Id,
                                         i_Indicator_Id => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                         i_Period       => i_Period);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Limit_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Period     date
  ) return number is
    result number;
  begin
    select q.Free_Days
      into result
      from Hpd_Vacation_Turnover q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Period = (select max(q.Period)
                         from Hpd_Vacation_Turnover q
                        where q.Company_Id = i_Company_Id
                          and q.Filial_Id = i_Filial_Id
                          and q.Staff_Id = i_Staff_Id
                          and q.Period < i_Period
                          and q.Period >= Trunc(i_Period, 'yyyy'));
  
    return result;
  
  exception
    when No_Data_Found then
      return Get_Closest_Vacation_Days_Limit(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Staff_Id   => i_Staff_Id,
                                             i_Period     => i_Period);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date,
    i_Trans_Type      varchar2,
    i_With_Wage_Scale boolean := false
  ) return Array_Date is
    v_Trans_Id        number;
    v_Action          varchar2(1);
    v_Prev_Trans_Code varchar2(4000);
    v_Trans_Code      varchar2(4000);
    r_Robot           Hpd_Trans_Robots%rowtype;
    result            Array_Date := Array_Date();
  begin
    Closest_Trans_Info(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Staff_Id   => i_Staff_Id,
                       i_Trans_Type => i_Trans_Type,
                       i_Period     => i_Begin_Date,
                       o_Trans_Id   => v_Trans_Id,
                       o_Action     => v_Action);
  
    v_Prev_Trans_Code := Get_Trans_Code(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => null,
                                        i_Trans_Type => i_Trans_Type);
  
    for r in (select Qr.Period Period_Begin,
                     Lead(Qr.Period) Over(order by Qr.Period) - 1 Period_End,
                     Qr.Trans_Id,
                     Qr.Action
                from (select p.Period, p.Trans_Id, p.Action
                        from Hpd_Agreements p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Staff_Id = i_Staff_Id
                         and p.Trans_Type = i_Trans_Type
                         and p.Period between i_Begin_Date and i_End_Date
                      union
                      select i_Begin_Date, v_Trans_Id, v_Action
                        from Dual) Qr)
    loop
      exit when r.Action = Hpd_Pref.c_Transaction_Action_Stop;
    
      if i_With_Wage_Scale and i_Trans_Type = Hpd_Pref.c_Transaction_Type_Robot then
        r_Robot := Closest_Robot(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Period     => r.Period_Begin);
      
        result := result multiset union distinct
                  Hrm_Util.Register_Change_Dates(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Wage_Scale_Id => r_Robot.Wage_Scale_Id,
                                                 i_Begin_Date    => r.Period_Begin,
                                                 i_End_Date      => Nvl(r.Period_End, i_End_Date));
      end if;
    
      v_Trans_Code := Get_Trans_Code(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Trans_Id   => r.Trans_Id,
                                     i_Trans_Type => i_Trans_Type);
    
      if v_Prev_Trans_Code <> v_Trans_Code then
        Fazo.Push(result, r.Period_Begin);
      
        v_Prev_Trans_Code := v_Trans_Code;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Opened_Transaction_Dates
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Begin_Date        date,
    i_End_Date          date,
    i_Trans_Types       Array_Varchar2,
    i_With_Wage_Scale   boolean := false,
    i_Partition_By_Year boolean := false
  ) return Hpd_Pref.Transaction_Part_Nt is
    v_Partition_Fmt  varchar2(4) := 'Mon';
    v_Dismissal_Date date;
    v_Opened_Dates   Array_Date;
    v_Part           Hpd_Pref.Transaction_Part_Rt;
    result           Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
    v_Index          number;
    v_Count          number;
  
    --------------------------------------------------
    Function Get_Last_Day(i_Date date) return date is
    begin
      if i_Partition_By_Year then
        return Htt_Util.Year_Last_Day(i_Date);
      end if;
      return Last_Day(i_Date);
    end;
  begin
    if i_Partition_By_Year then
      v_Partition_Fmt := 'yyyy';
    end if;
  
    v_Dismissal_Date := z_Href_Staffs.Load(i_Company_Id => i_Company_Id, --
                        i_Filial_Id => i_Filial_Id, --
                        i_Staff_Id => i_Staff_Id).Dismissal_Date;
  
    v_Opened_Dates := Array_Date(Least(i_End_Date, Nvl(v_Dismissal_Date, i_End_Date)) + 1);
  
    for i in 1 .. i_Trans_Types.Count
    loop
      v_Opened_Dates := v_Opened_Dates multiset union distinct
                        Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                     i_Filial_Id       => i_Filial_Id,
                                                     i_Staff_Id        => i_Staff_Id,
                                                     i_Begin_Date      => i_Begin_Date,
                                                     i_End_Date        => i_End_Date,
                                                     i_Trans_Type      => i_Trans_Types(i),
                                                     i_With_Wage_Scale => i_With_Wage_Scale);
    end loop;
  
    Fazo.Sort(v_Opened_Dates);
  
    v_Part.Part_Begin := v_Opened_Dates(1);
    v_Index           := 2;
    v_Count           := v_Opened_Dates.Count;
  
    while v_Index <= v_Count
    loop
      v_Part.Part_End := v_Opened_Dates(v_Index) - 1;
    
      if Trunc(v_Part.Part_Begin, v_Partition_Fmt) = Trunc(v_Part.Part_End, v_Partition_Fmt) then
        v_Index := v_Index + 1;
      else
        v_Part.Part_End := Get_Last_Day(v_Part.Part_Begin);
      end if;
    
      Result.Extend;
      result(Result.Count) := v_Part;
    
      v_Part.Part_Begin := v_Part.Part_End + 1;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Trans_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number,
    i_Trans_Type varchar2
  ) return varchar2 is
    r_Robot      Hpd_Trans_Robots%rowtype;
    v_Indicators Array_Varchar2;
    result       Gmap := Gmap;
  begin
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        r_Robot := z_Hpd_Trans_Robots.Take(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => i_Trans_Id);
      
        Result.Put(z.Robot_Id, r_Robot.Robot_Id);
        Result.Put(z.Division_Id, r_Robot.Division_Id);
        Result.Put(z.Job_Id, r_Robot.Job_Id);
        Result.Put(z.Fte_Id, r_Robot.Fte_Id);
        Result.Put(z.Fte, r_Robot.Fte);
        Result.Put(z.Wage_Scale_Id, r_Robot.Wage_Scale_Id);
      when Hpd_Pref.c_Transaction_Type_Schedule then
        Result.Put(z.Schedule_Id,
                   z_Hpd_Trans_Schedules.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Schedule_Id);
      when Hpd_Pref.c_Transaction_Type_Currency then
        Result.Put(z.Currency_Id,
                   z_Hpd_Trans_Currencies.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Currency_Id);
      when Hpd_Pref.c_Transaction_Type_Rank then
        Result.Put(z.Rank_Id,
                   z_Hpd_Trans_Ranks.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Rank_Id);
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        Result.Put(z.Days_Limit,
                   z_Hpd_Trans_Vacation_Limits.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Trans_Id => i_Trans_Id).Days_Limit);
      when Hpd_Pref.c_Transaction_Type_Operation then
        select Json_Object('o' value Ti.Oper_Type_Id,
                           'i' value Tv.Indicator_Id,
                           'e' value Tv.Indicator_Value null on null)
          bulk collect
          into v_Indicators
          from Hpd_Trans_Oper_Type_Indicators Ti
          join Hpd_Trans_Indicators Tv
            on Tv.Company_Id = Ti.Company_Id
           and Tv.Filial_Id = Ti.Filial_Id
           and Tv.Trans_Id = Ti.Trans_Id
           and Tv.Indicator_Id = Ti.Indicator_Id
         where Ti.Company_Id = i_Company_Id
           and Ti.Filial_Id = i_Filial_Id
           and Ti.Trans_Id = i_Trans_Id
         order by Ti.Oper_Type_Id, Tv.Indicator_Id, Tv.Indicator_Value;
      
        Result.Put(Zt.Hpd_Trans_Oper_Types.Name, v_Indicators);
      else
        null;
    end case;
  
    return Result.Json();
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Page(i_Page_Id number) return varchar2 is
    r_Page Hpd_Journal_Pages%rowtype;
    result varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Pages.Name)));
  
    if i_Page_Id is null then
      return result;
    end if;
  
    r_Page := z_Hpd_Journal_Pages.Take(i_Company_Id => Md_Env.Company_Id,
                                       i_Filial_Id  => Md_Env.Filial_Id,
                                       i_Page_Id    => i_Page_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Page.Company_Id,
                                                    i_Filial_Id  => r_Page.Filial_Id,
                                                    i_Staff_Id   => r_Page.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Overtime(i_Overtime_Id number) return varchar2 is
    r_Overtime Hpd_Journal_Overtimes%rowtype;
    result     varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Overtimes.Name)));
  
    if i_Overtime_Id is null then
      return result;
    end if;
  
    r_Overtime := z_Hpd_Journal_Overtimes.Take(i_Company_Id  => Md_Env.Company_Id,
                                               i_Filial_Id   => Md_Env.Filial_Id,
                                               i_Overtime_Id => i_Overtime_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Overtime.Company_Id,
                                                    i_Filial_Id  => r_Overtime.Filial_Id,
                                                    i_Staff_Id   => r_Overtime.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Timeoffs(i_Timeoff_Id number) return varchar2 is
    r_Timeoffs Hpd_Journal_Timeoffs%rowtype;
    result     varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Hpd_Journal_Timeoffs.Name)));
  
    if i_Timeoff_Id is null then
      return result;
    end if;
  
    r_Timeoffs := z_Hpd_Journal_Timeoffs.Take(i_Company_Id => Md_Env.Company_Id,
                                              i_Filial_Id  => Md_Env.Filial_Id,
                                              i_Timeoff_Id => i_Timeoff_Id);
  
    return result || ': ' || t('# $1{staff_name}',
                               Href_Util.Staff_Name(i_Company_Id => r_Timeoffs.Company_Id,
                                                    i_Filial_Id  => r_Timeoffs.Filial_Id,
                                                    i_Staff_Id   => r_Timeoffs.Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Journal(i_Journal_Id number) return varchar2 is
    v_Journal_Type_Id number;
    v_Pcode           varchar2(20);
    v_Uri             varchar2(100);
  begin
    v_Journal_Type_Id := z_Hpd_Journals.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Journal_Id => i_Journal_Id).Journal_Type_Id;
    v_Pcode           := z_Hpd_Journal_Types.Take(i_Company_Id => Ui.Company_Id, i_Journal_Type_Id => v_Journal_Type_Id).Pcode;
  
    if v_Pcode in
       (Hpd_Pref.c_Pcode_Journal_Type_Hiring, Hpd_Pref.c_Pcode_Journal_Type_Hiring_Multiple) then
      v_Uri := '/vhr/hpd/audit/hiring_audit';
    elsif v_Pcode in
          (Hpd_Pref.c_Pcode_Journal_Type_Transfer, Hpd_Pref.c_Pcode_Journal_Type_Transfer_Multiple) then
      v_Uri := '/vhr/hpd/audit/transfer_audit';
    elsif v_Pcode in (Hpd_Pref.c_Pcode_Journal_Type_Dismissal,
                      Hpd_Pref.c_Pcode_Journal_Type_Dismissal_Multiple) then
      v_Uri := '/vhr/hpd/audit/dismissal_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Wage_Change then
      v_Uri := '/vhr/hpd/audit/wage_change_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Schedule_Change then
      v_Uri := '/vhr/hpd/audit/schedule_change_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Sick_Leave then
      v_Uri := '/vhr/hpd/audit/sick_leave_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Business_Trip then
      v_Uri := '/vhr/hpd/audit/businnes_trip_audit';
    elsif v_Pcode = Hpd_Pref.c_Pcode_Journal_Type_Overtime then
      v_Uri := '/vhr/hpd/audit/overtime_audit';
    end if;
  
    return v_Uri || '?journal_id=' || i_Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Page(i_Page_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Pages.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Page_Id => i_Page_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Overtime(i_Overtime_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Overtimes.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Overtime_Id => i_Overtime_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Table_Uri_Timeoff(i_Timeoff_Id number) return varchar2 is
    v_Journal_Id number;
  begin
    v_Journal_Id := z_Hpd_Journal_Timeoffs.Take(i_Company_Id => Ui.Company_Id, i_Filial_Id => Ui.Filial_Id, i_Timeoff_Id => i_Timeoff_Id).Journal_Id;
  
    return Table_Uri_Journal(v_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Singular_Journal
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Journal_Type_Id  number,
    i_Singular_Type_Id number,
    i_Pages_Cnt        number
  ) is
    --------------------------------------------------
    Function Has_Other_Pages return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Journal_Pages Jp
       where Jp.Company_Id = i_Company_Id
         and Jp.Filial_Id = i_Filial_Id
         and Jp.Journal_Id = i_Journal_Id
         and Jp.Page_Id <> i_Page_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if i_Journal_Type_Id <> i_Singular_Type_Id then
      return;
    end if;
  
    if i_Pages_Cnt <> 1 then
      Hpd_Error.Raise_045;
    end if;
  
    if Has_Other_Pages then
      Hpd_Error.Raise_047;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Timebook_Adjustment_Calced
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Adjustment_Date date,
    i_Kind            varchar2,
    i_Journal_Id      number := null
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'X'
      into v_Dummy
      from Hpd_Lock_Adjustments q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Adjustment_Date = i_Adjustment_Date
       and q.Kind = i_Kind
       and (i_Journal_Id is null or q.Journal_Id <> i_Journal_Id);
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Name
  (
    i_Company_Id number,
    i_User_Id    number
  ) return varchar2 is
  begin
    return z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Type_Name
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return z_Hpd_Journal_Types.Load(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Name
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2 is
  begin
    return z_Hpd_Application_Types.Load(i_Company_Id          => i_Company_Id,
                                        i_Application_Type_Id => i_Application_Type_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select q.Application_Type_Id
      into result
      from Hpd_Application_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_057;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Has_Result
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Application_Id number
  ) return varchar2 is
    v_Application_Type_Id number;
    v_Pcode               varchar2(50);
    v_Dummy               number;
  begin
    v_Application_Type_Id := z_Hpd_Applications.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, --
                             i_Application_Id => i_Application_Id).Application_Type_Id;
  
    v_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, i_Application_Type_Id => v_Application_Type_Id).Pcode;
  
    begin
      if v_Pcode = Hpd_Pref.c_Pcode_Application_Type_Create_Robot then
        --------------------------------------------------
        select 1
          into v_Dummy
          from Hpd_Application_Robots t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id
           and Rownum = 1;
      else
        --------------------------------------------------
        select 1
          into v_Dummy
          from Hpd_Application_Journals t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Application_Id = i_Application_Id
           and exists (select *
                  from Hpd_Journals q
                 where q.Company_Id = t.Company_Id
                   and q.Filial_Id = t.Filial_Id
                   and q.Journal_Id = t.Journal_Id
                   and q.Posted = 'Y');
      end if;
    exception
      when No_Data_Found then
        return 'N';
    end;
  
    return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  -- application grant part
  ----------------------------------------------------------------------------------------------------
  Function Application_Grant_Part
  (
    i_Company_Id          number,
    i_Application_Type_Id number
  ) return varchar2 is
    v_Pcode Hpd_Application_Types.Pcode%type;
  begin
    v_Pcode := z_Hpd_Application_Types.Load(i_Company_Id => i_Company_Id, i_Application_Type_Id => i_Application_Type_Id).Pcode;
  
    case v_Pcode
      when Hpd_Pref.c_Pcode_Application_Type_Create_Robot then
        return Hpd_Pref.c_App_Grant_Part_Create_Robot;
      when Hpd_Pref.c_Pcode_Application_Type_Hiring then
        return Hpd_Pref.c_App_Grant_Part_Hiring;
      when Hpd_Pref.c_Pcode_Application_Type_Transfer then
        return Hpd_Pref.c_App_Grant_Part_Transfer;
      when Hpd_Pref.c_Pcode_Application_Type_Transfer_Multiple then
        return Hpd_Pref.c_App_Grant_Part_Transfer;
      when Hpd_Pref.c_Pcode_Application_Type_Dismissal then
        return Hpd_Pref.c_App_Grant_Part_Dismissal;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------           
  Function Sign_Process_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Process_Id number;
  begin
    select q.Process_Id
      into v_Process_Id
      from Mdf_Sign_Processes q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Process_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------         
  Function Journal_Type_Sign_Template_Id
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number
  ) return number is
    v_Template_Id number;
  begin
    select q.Template_Id
      into v_Template_Id
      from Hpd_Sign_Templates q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Journal_Type_Id = i_Journal_Type_Id;
  
    return v_Template_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------         
  Function Has_Journal_Type_Sign_Template
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number
  ) return boolean is
    v_Template_Id number;
  begin
    v_Template_Id := Journal_Type_Sign_Template_Id(i_Company_Id      => i_Company_Id,
                                                   i_Filial_Id       => i_Filial_Id,
                                                   i_Journal_Type_Id => i_Journal_Type_Id);
  
    if v_Template_Id is not null then
      return true;
    else
      return false;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------         
  Function Load_Sign_Document_Status
  (
    i_Company_Id  number,
    i_Document_Id number
  ) return varchar2 is
  begin
    return z_Mdf_Sign_Documents.Take(i_Company_Id => i_Company_Id, i_Document_Id => i_Document_Id).Status;
  end;

  ----------------------------------------------------------------------------------------------------
  -- employment type
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Main_Job return varchar2 is
  begin
    return t('employment_type:main_job');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_External_Parttime return varchar2 is
  begin
    return t('employment_type:external_parttime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Internal_Parttime return varchar2 is
  begin
    return t('employment_type:internal_parttime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type_Contractor return varchar2 is
  begin
    return t('employment_type:contractor');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Type(i_Employment_Type varchar2) return varchar2 is
  begin
    return --
    case i_Employment_Type --
    when Hpd_Pref.c_Employment_Type_Main_Job then t_Employment_Type_Main_Job --
    when Hpd_Pref.c_Employment_Type_External_Parttime then t_Employment_Type_External_Parttime --
    when Hpd_Pref.c_Employment_Type_Internal_Parttime then t_Employment_Type_Internal_Parttime --
    when Hpd_Pref.c_Employment_Type_Contractor then t_Employment_Type_Contractor --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employment_Types(i_Include_Contractors boolean := false) return Matrix_Varchar2 is
    v_Types      Array_Varchar2 := Array_Varchar2(Hpd_Pref.c_Employment_Type_Main_Job,
                                                  Hpd_Pref.c_Employment_Type_External_Parttime,
                                                  Hpd_Pref.c_Employment_Type_Internal_Parttime);
    v_Translates Array_Varchar2 := Array_Varchar2(t_Employment_Type_Main_Job,
                                                  t_Employment_Type_External_Parttime,
                                                  t_Employment_Type_Internal_Parttime);
  begin
    if i_Include_Contractors then
      Fazo.Push(v_Types, Hpd_Pref.c_Employment_Type_Contractor);
      Fazo.Push(v_Translates, t_Employment_Type_Contractor);
    end if;
  
    return Matrix_Varchar2(v_Types, v_Translates);
  end;

  ----------------------------------------------------------------------------------------------------
  -- lock interval kind
  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Timebook return varchar2 is
  begin
    return t('lock_interval_kind:timebook');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Timeoff return varchar2 is
  begin
    return t('lock_interval_kind:timeoff');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Performance return varchar2 is
  begin
    return t('lock_interval_kind:performance');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus personal sales');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Department_Sales return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus department sales');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery return varchar2 is
  begin
    return t('lock_interval_kind:sales bonus successful delivery');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Lock_Interval_Kind(i_Lock_Interval_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Lock_Interval_Kind --
    when Hpd_Pref.c_Lock_Interval_Kind_Timebook then t_Lock_Interval_Kind_Timebook --
    when Hpd_Pref.c_Lock_Interval_Kind_Timeoff then t_Lock_Interval_Kind_Timeoff --
    when Hpd_Pref.c_Lock_Interval_Kind_Performance then t_Lock_Interval_Kind_Performance --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales then t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales then t_Lock_Interval_Kind_Sales_Bonus_Department_Sales --
    when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery then t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Lock_Interval_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                                          Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                                          Hpd_Pref.c_Lock_Interval_Kind_Performance,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales,
                                          Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery),
                           Array_Varchar2(t_Lock_Interval_Kind_Timebook,
                                          t_Lock_Interval_Kind_Timeoff,
                                          t_Lock_Interval_Kind_Performance,
                                          t_Lock_Interval_Kind_Sales_Bonus_Personal_Sales,
                                          t_Lock_Interval_Kind_Sales_Bonus_Department_Sales,
                                          t_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Charge_Lock_Interval_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                                          Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                                          Hpd_Pref.c_Lock_Interval_Kind_Performance),
                           Array_Varchar2(t_Lock_Interval_Kind_Timebook,
                                          t_Lock_Interval_Kind_Timeoff,
                                          t_Lock_Interval_Kind_Performance));
  end;

  ----------------------------------------------------------------------------------------------------
  -- trial period
  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period_Exists return varchar2 is
  begin
    return t('trial_period:exists');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period_Not_Exists return varchar2 is
  begin
    return t('trial_period:not_exists');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Trial_Period(i_Trial_Period varchar2) return varchar2 is
  begin
    return --
    case i_Trial_Period --
    when 'Y' then t_Trial_Period_Exists --
    when 'N' then t_Trial_Period_Not_Exists --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trial_Periods return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2('Y', --
                                          'N'),
                           Array_Varchar2(t_Trial_Period_Exists, --
                                          t_Trial_Period_Not_Exists));
  end;

  ----------------------------------------------------------------------------------------------------
  -- transfer kind
  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind_Permanently return varchar2 is
  begin
    return t('transfer_kind:permanently');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind_Temporarily return varchar2 is
  begin
    return t('transfer_kind:temporarily');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Transfer_Kind(i_Transfer_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Transfer_Kind --
    when Hpd_Pref.c_Transfer_Kind_Permanently then t_Transfer_Kind_Permanently --
    when Hpd_Pref.c_Transfer_Kind_Temporarily then t_Transfer_Kind_Temporarily --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Transfer_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Transfer_Kind_Permanently,
                                          Hpd_Pref.c_Transfer_Kind_Temporarily),
                           Array_Varchar2(t_Transfer_Kind_Permanently, --
                                          t_Transfer_Kind_Temporarily));
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal types
  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Hiring return varchar2 is
  begin
    return t('journal_type: hiring');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Transfer return varchar2 is
  begin
    return t('journal_type: transfer');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Dismissal return varchar2 is
  begin
    return t('journal_type: dismissal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Schedule_Change return varchar2 is
  begin
    return t('journal_type: schedule_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Wage_Change return varchar2 is
  begin
    return t('journal_type: wage_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Rank_Change return varchar2 is
  begin
    return t('journal_type: rank_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type_Limit_Change return varchar2 is
  begin
    return t('journal_type: vacation_limit_change');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Journal_Type(i_Journal_Type varchar2) return varchar2 is
  begin
    return --
    case i_Journal_Type --
    when Hpd_Pref.c_Journal_Type_Hiring then t_Journal_Type_Hiring --
    when Hpd_Pref.c_Journal_Type_Transfer then t_Journal_Type_Transfer --
    when Hpd_Pref.c_Journal_Type_Dismissal then t_Journal_Type_Dismissal --
    when Hpd_Pref.c_Journal_Type_Schedule_Change then t_Journal_Type_Schedule_Change --
    when Hpd_Pref.c_Journal_Type_Wage_Change then t_Journal_Type_Wage_Change --
    when Hpd_Pref.c_Journal_Type_Rank_Change then t_Journal_Type_Rank_Change --
    when Hpd_Pref.c_Journal_Type_Limit_Change then t_Journal_Type_Limit_Change --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Journal_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Journal_Type_Hiring,
                                          Hpd_Pref.c_Journal_Type_Transfer,
                                          Hpd_Pref.c_Journal_Type_Dismissal,
                                          Hpd_Pref.c_Journal_Type_Schedule_Change,
                                          Hpd_Pref.c_Journal_Type_Wage_Change,
                                          Hpd_Pref.c_Journal_Type_Rank_Change,
                                          Hpd_Pref.c_Journal_Type_Limit_Change),
                           Array_Varchar2(t_Journal_Type_Hiring,
                                          t_Journal_Type_Transfer,
                                          t_Journal_Type_Dismissal,
                                          t_Journal_Type_Schedule_Change,
                                          t_Journal_Type_Wage_Change,
                                          t_Journal_Type_Rank_Change,
                                          t_Journal_Type_Limit_Change));
  end;

  ----------------------------------------------------------------------------------------------------
  -- fte kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Full return varchar2 is
  begin
    return t('fte_kind:full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Half return varchar2 is
  begin
    return t('fte_kind:half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Quarter return varchar2 is
  begin
    return t('fte_kind:quarter');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Occupied return varchar2 is
  begin
    return t('fte_kind:occupied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Fte_Kind_Custom return varchar2 is
  begin
    return t('fte_kind:custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Fte_Kind_Full,
                                          Hpd_Pref.c_Fte_Kind_Half,
                                          Hpd_Pref.c_Fte_Kind_Quarter,
                                          Hpd_Pref.c_Fte_Kind_Occupied,
                                          Hpd_Pref.c_Fte_Kind_Custom),
                           Array_Varchar2(t_Fte_Kind_Full,
                                          t_Fte_Kind_Half,
                                          t_Fte_Kind_Quarter,
                                          t_Fte_Kind_Occupied,
                                          t_Fte_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Adjustment Kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind_Full return varchar2 is
  begin
    return t('adjustment_kind: full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind_Incomplete return varchar2 is
  begin
    return t('adjustment_kind: incomplete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Adjustment_Kind(i_Adjustment_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Adjustment_Kind --
    when Hpd_Pref.c_Adjustment_Kind_Full then t_Adjustment_Kind_Full --
    when Hpd_Pref.c_Adjustment_Kind_Incomplete then t_Adjustment_Kind_Incomplete --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Adjustment_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Adjustment_Kind_Full,
                                          Hpd_Pref.c_Adjustment_Kind_Incomplete),
                           Array_Varchar2(t_Adjustment_Kind_Full, t_Adjustment_Kind_Incomplete));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind_Simple return varchar2 is
  begin
    return t('cv_contract_kind:simple');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind_Cyclical return varchar2 is
  begin
    return t('cv_contract_kind:cyclical');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Contract_Kind(i_Contract_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Contract_Kind --
    when Hpd_Pref.c_Cv_Contract_Kind_Simple then t_Cv_Contract_Kind_Simple --
    when Hpd_Pref.c_Cv_Contract_Kind_Cyclical then t_Cv_Contract_Kind_Cyclical --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cv_Contract_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Cv_Contract_Kind_Simple,
                                          Hpd_Pref.c_Cv_Contract_Kind_Cyclical),
                           Array_Varchar2(t_Cv_Contract_Kind_Simple, t_Cv_Contract_Kind_Cyclical));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Application Status
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_New return varchar2 is
  begin
    return t('application_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Waiting return varchar2 is
  begin
    return t('application_status:waiting');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Approved return varchar2 is
  begin
    return t('application_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_In_Progress return varchar2 is
  begin
    return t('application_status:in_progress');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Completed return varchar2 is
  begin
    return t('application_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Canceled return varchar2 is
  begin
    return t('application_status:canceled');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpd_Pref.c_Application_Status_New then t_Application_Status_New --
    when Hpd_Pref.c_Application_Status_Waiting then t_Application_Status_Waiting --
    when Hpd_Pref.c_Application_Status_Approved then t_Application_Status_Approved --
    when Hpd_Pref.c_Application_Status_In_Progress then t_Application_Status_In_Progress --
    when Hpd_Pref.c_Application_Status_Completed then t_Application_Status_Completed --
    when Hpd_Pref.c_Application_Status_Canceled then t_Application_Status_Canceled --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Application_Status_New,
                                          Hpd_Pref.c_Application_Status_Waiting,
                                          Hpd_Pref.c_Application_Status_Approved,
                                          Hpd_Pref.c_Application_Status_In_Progress,
                                          Hpd_Pref.c_Application_Status_Completed,
                                          Hpd_Pref.c_Application_Status_Canceled),
                           Array_Varchar2(t_Application_Status_New,
                                          t_Application_Status_Waiting,
                                          t_Application_Status_Approved,
                                          t_Application_Status_In_Progress,
                                          t_Application_Status_Completed,
                                          t_Application_Status_Canceled));
  end;

  ----------------------------------------------------------------------------------------------------
  -- Contract Employment
  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment_Freelancer return varchar2 is
  begin
    return t('contract_employment:freelancer');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment_Staff_Member return varchar2 is
  begin
    return t('contract_employment:staff member');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Contract_Employment(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpd_Pref.c_Contract_Employment_Freelancer then t_Contract_Employment_Freelancer --
    when Hpd_Pref.c_Contract_Employment_Staff_Member then t_Contract_Employment_Staff_Member --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Contract_Employments return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpd_Pref.c_Contract_Employment_Freelancer,
                                          Hpd_Pref.c_Contract_Employment_Staff_Member),
                           Array_Varchar2(t_Contract_Employment_Freelancer,
                                          t_Contract_Employment_Staff_Member));
  end;

  ----------------------------------------------------------------------------------------------------
  -- journal notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} posted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} unposted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} saved $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} updated $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Journal_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Journal_Type_Id number
  ) return varchar2 is
  begin
    return t('$1{person_name} deleted $2{journal_type_name} journal',
             User_Name(i_Company_Id, i_User_Id),
             Journal_Type_Name(i_Company_Id, i_Journal_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  -- application notification
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Created
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2
  ) return varchar2 is
  begin
    return t('$1{user_name} created an application for $2{application_type_name} $3{application_number}',
             User_Name(i_Company_Id, i_User_Id),
             Application_Type_Name(i_Company_Id, i_Application_Type_Id),
             i_Application_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Application_Status_Changed
  (
    i_Company_Id          number,
    i_User_Id             number,
    i_Application_Type_Id number,
    i_Application_Number  varchar2,
    i_Old_Status          varchar2,
    i_New_Status          varchar2
  ) return varchar2 is
  begin
    return t('$1{user_name} changed status of application for $2{application_type_name} $3{application_number} from $4{old_status_name} to $5{new_status_name}',
             User_Name(i_Company_Id, i_User_Id),
             Application_Type_Name(i_Company_Id, i_Application_Type_Id),
             i_Application_Number,
             t_Application_Status(i_Old_Status),
             t_Application_Status(i_New_Status));
  end;

end Hpd_Util;
/

create or replace package Hpr_Api is
  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Cv_Contract_Fact_New
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_To_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Accept
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Return_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Penalty_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Nighttime_Policy_Save(i_Nighttime_Policy Hpr_Pref.Nighttime_Policy_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Nighttime_Policy_Delete
  (
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nighttime_Policy_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Save(i_Wage_Sheet Hpr_Pref.Wage_Sheet_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Delete
  (
    i_Company_Id   number,
    i_Oper_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Save(i_Charge_Document Hpr_Pref.Charge_Document_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Coef_Save
  (
    i_Company_Id number,
    i_Value      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Save(i_Sales_Bonus_Payment Hpr_Pref.Sales_Bonus_Payment_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Settings_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Currency_Ids Array_Number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Fill_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Settings   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Use_Subfilial_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Setting    varchar2
  );
end Hpr_Api;
/
create or replace package body Hpr_Api is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt) is
  begin
    Hpr_Core.Cv_Contract_Fact_Save(i_Contract_Fact);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then
      Hpr_Error.Raise_020(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_New));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_To_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New then
      Hpr_Error.Raise_021(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Complete));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Accept
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact     Hpr_Cv_Contract_Facts%rowtype;
    r_Contract Hpd_Cv_Contracts%rowtype;
    v_Account  Mk_Account;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then
      Hpr_Error.Raise_022(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Accept));
  
    Mk_Journal.Pick(i_Company_Id   => r_Fact.Company_Id,
                    i_Filial_Id    => r_Fact.Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Cv_Contract_Fact(r_Fact.Fact_Id),
                    i_Trans_Date   => r_Fact.Month);
  
    Mk_Journal.Clear;
  
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => r_Fact.Company_Id,
                                               i_Filial_Id   => r_Fact.Filial_Id,
                                               i_Contract_Id => r_Fact.Contract_Id);
    v_Account  := Mkr_Account.Payroll_Accrual(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Currency_Id => z_Mk_Base_Currencies.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Currency_Id,
                                              i_Ref_Codes   => Mkr_Account.Ref_Codes(i_Person_Id => r_Contract.Person_Id));
  
    Mk_Journal.Add_Trans(i_Debit  => Mkr_Account.Expense_Others(i_Company_Id => r_Fact.Company_Id,
                                                                i_Filial_Id  => r_Fact.Filial_Id),
                         i_Credit => v_Account,
                         i_Amount => r_Fact.Total_Amount);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Return_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Fact_Id    number
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Fact_Id    => i_Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_Accept then
      Hpr_Error.Raise_023(i_Fact_Id     => i_Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    z_Hpr_Cv_Contract_Facts.Update_One(i_Company_Id => r_Fact.Company_Id,
                                       i_Filial_Id  => r_Fact.Filial_Id,
                                       i_Fact_Id    => r_Fact.Fact_Id,
                                       i_Status     => Option_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_Complete));
  
    Mk_Journal.Pick(i_Company_Id   => r_Fact.Company_Id,
                    i_Filial_Id    => r_Fact.Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Cv_Contract_Fact(r_Fact.Fact_Id),
                    i_Trans_Date   => r_Fact.Month);
  
    Mk_Journal.Clear;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt) is
  begin
    Hpr_Core.Penalty_Save(i_Penalty);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Penalty_Id number
  ) is
  begin
    z_Hpr_Penalties.Delete_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Penalty_Id => i_Penalty_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Rule_Periods(i_Rules Hpr_Pref.Nighttime_Rule_Nt) is
  begin
    for i in 1 .. i_Rules.Count
    loop
      for j in i + 1 .. i_Rules.Count
      loop
        if Greatest(i_Rules(i).Begin_Time, i_Rules(j).Begin_Time) <
           Least(i_Rules(i).End_Time, i_Rules(j).End_Time) then
          Hpr_Error.Raise_054(i_First_Row => i, i_Second_Row => j);
        end if;
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nighttime_Policy_Save(i_Nighttime_Policy Hpr_Pref.Nighttime_Policy_Rt) is
    r_Policy             Hpr_Nighttime_Policies%rowtype;
    v_Exists             boolean := false;
    v_Policy_Begin_Times Array_Number := Array_Number();
  begin
    if z_Hpr_Nighttime_Policies.Exist(i_Company_Id          => i_Nighttime_Policy.Company_Id,
                                      i_Filial_Id           => i_Nighttime_Policy.Filial_Id,
                                      i_Nighttime_Policy_Id => i_Nighttime_Policy.Nigthttime_Policy_Id,
                                      o_Row                 => r_Policy) then
      if r_Policy.Month <> i_Nighttime_Policy.Month then
        Hpr_Error.Raise_052(r_Policy.Nighttime_Policy_Id);
      end if;
    
      if not Fazo.Equal(r_Policy.Division_Id, i_Nighttime_Policy.Division_Id) then
        Hpr_Error.Raise_053(r_Policy.Nighttime_Policy_Id);
      end if;
    
      v_Exists := true;
    else
      r_Policy.Company_Id          := i_Nighttime_Policy.Company_Id;
      r_Policy.Filial_Id           := i_Nighttime_Policy.Filial_Id;
      r_Policy.Nighttime_Policy_Id := i_Nighttime_Policy.Nigthttime_Policy_Id;
      r_Policy.Month               := i_Nighttime_Policy.Month;
      r_Policy.Division_Id         := i_Nighttime_Policy.Division_Id;
    end if;
  
    r_Policy.Name  := i_Nighttime_Policy.Name;
    r_Policy.State := i_Nighttime_Policy.State;
  
    if v_Exists then
      z_Hpr_Nighttime_Policies.Update_Row(r_Policy);
    else
      z_Hpr_Nighttime_Policies.Insert_Row(r_Policy);
    end if;
  
    v_Policy_Begin_Times.Extend(i_Nighttime_Policy.Rules.Count);
  
    Check_Rule_Periods(i_Nighttime_Policy.Rules);
  
    for i in 1 .. i_Nighttime_Policy.Rules.Count
    loop
      if i_Nighttime_Policy.Rules(i).Nighttime_Coef <= 1 then
        Hpr_Error.Raise_055(i);
      end if;
    
      z_Hpr_Nighttime_Rules.Save_One(i_Company_Id          => r_Policy.Company_Id,
                                     i_Filial_Id           => r_Policy.Filial_Id,
                                     i_Nighttime_Policy_Id => r_Policy.Nighttime_Policy_Id,
                                     i_Begin_Time          => i_Nighttime_Policy.Rules(i).Begin_Time,
                                     i_End_Time            => i_Nighttime_Policy.Rules(i).End_Time,
                                     i_Nighttime_Coef      => i_Nighttime_Policy.Rules(i).Nighttime_Coef);
    
      v_Policy_Begin_Times(i) := i_Nighttime_Policy.Rules(i).Begin_Time;
    end loop;
  
    if v_Exists then
      for r in (select *
                  from Hpr_Nighttime_Rules q
                 where q.Company_Id = r_Policy.Company_Id
                   and q.Filial_Id = r_Policy.Filial_Id
                   and q.Nighttime_Policy_Id = r_Policy.Nighttime_Policy_Id
                   and q.Begin_Time not member of v_Policy_Begin_Times)
      loop
        z_Hpr_Nighttime_Rules.Delete_One(i_Company_Id          => r.Company_Id,
                                         i_Filial_Id           => r.Filial_Id,
                                         i_Nighttime_Policy_Id => r.Nighttime_Policy_Id,
                                         i_Begin_Time          => r.Begin_Time);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nighttime_Policy_Delete
  (
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nighttime_Policy_Id number
  ) is
  begin
    z_Hpr_Nighttime_Policies.Delete_One(i_Company_Id          => i_Company_Id,
                                        i_Filial_Id           => i_Filial_Id,
                                        i_Nighttime_Policy_Id => i_Nighttime_Policy_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt) is
  begin
    Hpr_Core.Timebook_Save(i_Timebook);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'Y' then
      Hpr_Error.Raise_024(r_Timebook.Timebook_Number);
    end if;
  
    Hpr_Core.Lock_Timesheets(i_Company_Id   => r_Timebook.Company_Id,
                             i_Filial_Id    => r_Timebook.Filial_Id,
                             i_Timebook_Id  => r_Timebook.Timebook_Id,
                             i_Period_Begin => r_Timebook.Period_Begin,
                             i_Period_End   => r_Timebook.Period_End);
  
    Hpr_Core.Timebook_Staffs_Update(i_Company_Id   => r_Timebook.Company_Id,
                                    i_Filial_Id    => r_Timebook.Filial_Id,
                                    i_Timebook_Id  => r_Timebook.Timebook_Id,
                                    i_Period_Begin => r_Timebook.Period_Begin,
                                    i_Period_End   => r_Timebook.Period_End);
  
    for St in (select q.Staff_Id
                 from Hpr_Timebook_Staffs q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Timebook_Id = i_Timebook_Id)
    loop
      Hpd_Api.Timebook_Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id,
                                            i_Staff_Id    => St.Staff_Id,
                                            i_Begin_Date  => r_Timebook.Period_Begin,
                                            i_End_Date    => r_Timebook.Period_End);
    end loop;
  
    z_Hpr_Timebooks.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id,
                               i_Posted      => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'N' then
      Hpr_Error.Raise_025(r_Timebook.Timebook_Number);
    end if;
  
    Hpr_Core.Unlock_Timesheets(i_Company_Id  => r_Timebook.Company_Id,
                               i_Filial_Id   => r_Timebook.Filial_Id,
                               i_Timebook_Id => r_Timebook.Timebook_Id);
  
    for r in (select q.Staff_Id, q.Interval_Id
                from Hpr_Timebook_Intervals q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Timebook_Id = i_Timebook_Id)
    loop
      z_Hpr_Timebook_Intervals.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Timebook_Id => i_Timebook_Id,
                                          i_Staff_Id    => r.Staff_Id);
    
      Hpd_Api.Lock_Interval_Delete(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Interval_Id => r.Interval_Id);
    end loop;
  
    z_Hpr_Timebooks.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id,
                               i_Posted      => Option_Varchar2('N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    if r_Timebook.Posted = 'Y' then
      Hpr_Error.Raise_026(r_Timebook.Timebook_Number);
    end if;
  
    z_Hpr_Timebooks.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Timebook_Id => i_Timebook_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Save(i_Wage_Sheet Hpr_Pref.Wage_Sheet_Rt) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  
    v_Exists      boolean := false;
    v_Round_Model Round_Model;
    v_Staff       Hpr_Pref.Sheet_Staff_Rt;
  begin
    if z_Hpr_Wage_Sheets.Exist_Lock(i_Company_Id => i_Wage_Sheet.Company_Id,
                                    i_Filial_Id  => i_Wage_Sheet.Filial_Id,
                                    i_Sheet_Id   => i_Wage_Sheet.Sheet_Id,
                                    o_Row        => r_Sheet) then
      if r_Sheet.Posted = 'Y' then
        Hpr_Error.Raise_027(r_Sheet.Sheet_Number);
      end if;
    
      v_Exists := true;
    else
      r_Sheet.Company_Id := i_Wage_Sheet.Company_Id;
      r_Sheet.Filial_Id  := i_Wage_Sheet.Filial_Id;
      r_Sheet.Sheet_Id   := i_Wage_Sheet.Sheet_Id;
      r_Sheet.Posted     := 'N';
    
      v_Exists := false;
    end if;
  
    r_Sheet.Sheet_Number := i_Wage_Sheet.Sheet_Number;
    r_Sheet.Sheet_Date   := i_Wage_Sheet.Sheet_Date;
    r_Sheet.Period_Begin := i_Wage_Sheet.Period_Begin;
    r_Sheet.Period_End   := i_Wage_Sheet.Period_End;
    r_Sheet.Period_Kind  := i_Wage_Sheet.Period_Kind;
    r_Sheet.Note         := i_Wage_Sheet.Note;
    r_Sheet.Sheet_Kind   := i_Wage_Sheet.Sheet_Kind;
    r_Sheet.Round_Value  := Nvl(i_Wage_Sheet.Round_Value, Hpr_Pref.c_Default_Round_Value);
  
    if v_Exists then
      z_Hpr_Wage_Sheets.Update_Row(r_Sheet);
    else
      if r_Sheet.Sheet_Number is null then
        r_Sheet.Sheet_Number := Md_Core.Gen_Number(i_Company_Id => i_Wage_Sheet.Company_Id,
                                                   i_Filial_Id  => i_Wage_Sheet.Filial_Id,
                                                   i_Table      => Zt.Hpr_Wage_Sheets,
                                                   i_Column     => z.Sheet_Id);
      end if;
    
      z_Hpr_Wage_Sheets.Insert_Row(r_Sheet);
    end if;
  
    -- delete wage sheet divisions
    delete Hpr_Wage_Sheet_Divisions q
     where q.Company_Id = r_Sheet.Company_Id
       and q.Filial_Id = r_Sheet.Filial_Id
       and q.Sheet_Id = r_Sheet.Sheet_Id;
  
    for i in 1 .. i_Wage_Sheet.Division_Ids.Count
    loop
      z_Hpr_Wage_Sheet_Divisions.Insert_One(i_Company_Id  => i_Wage_Sheet.Company_Id,
                                            i_Filial_Id   => i_Wage_Sheet.Filial_Id,
                                            i_Sheet_Id    => i_Wage_Sheet.Sheet_Id,
                                            i_Division_Id => i_Wage_Sheet.Division_Ids(i));
    end loop;
  
    -- delete staffs' parts
    delete Hpr_Sheet_Parts q
     where q.Company_Id = r_Sheet.Company_Id
       and q.Filial_Id = r_Sheet.Filial_Id
       and q.Sheet_Id = r_Sheet.Sheet_Id;
  
    -- delete sheet staffs
    delete Hpr_Onetime_Sheet_Staffs q
     where q.Company_Id = r_Sheet.Company_Id
       and q.Filial_Id = r_Sheet.Filial_Id
       and q.Sheet_Id = r_Sheet.Sheet_Id;
  
    if r_Sheet.Sheet_Kind = Hpr_Pref.c_Wage_Sheet_Regular then
      if i_Wage_Sheet.Sheet_Staffs.Count > 0 then
        Hpr_Error.Raise_036;
      end if;
    
      v_Round_Model := Round_Model(r_Sheet.Round_Value);
    
      -- inserting staff parts
      for i in 1 .. i_Wage_Sheet.Staff_Ids.Count
      loop
        Hpr_Core.Sheet_Staff_Insert(i_Company_Id   => r_Sheet.Company_Id,
                                    i_Filial_Id    => r_Sheet.Filial_Id,
                                    i_Sheet_Id     => r_Sheet.Sheet_Id,
                                    i_Staff_Id     => i_Wage_Sheet.Staff_Ids(i),
                                    i_Period_Begin => r_Sheet.Period_Begin,
                                    i_Period_End   => r_Sheet.Period_End,
                                    i_Round_Model  => v_Round_Model);
      end loop;
    else
      if i_Wage_Sheet.Staff_Ids.Count > 0 then
        Hpr_Error.Raise_037;
      end if;
    
      -- inserting staffs
      for i in 1 .. i_Wage_Sheet.Sheet_Staffs.Count
      loop
        v_Staff := i_Wage_Sheet.Sheet_Staffs(i);
      
        Hpr_Core.Onetime_Staff_Insert(i_Company_Id     => r_Sheet.Company_Id,
                                      i_Filial_Id      => r_Sheet.Filial_Id,
                                      i_Sheet_Id       => r_Sheet.Sheet_Id,
                                      i_Staff_Id       => v_Staff.Staff_Id,
                                      i_Period_Begin   => r_Sheet.Period_Begin,
                                      i_Period_End     => r_Sheet.Period_End,
                                      i_Accrual_Amount => v_Staff.Accrual_Amount,
                                      i_Penalty_Amount => v_Staff.Penalty_Amount);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'Y' then
      Hpr_Error.Raise_028(r_Sheet.Sheet_Number);
    end if;
  
    z_Hpr_Wage_Sheets.Delete_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'Y' then
      Hpr_Error.Raise_029(r_Sheet.Sheet_Number);
    end if;
  
    if r_Sheet.Sheet_Kind = Hpr_Pref.c_Wage_Sheet_Regular then
      Hpr_Core.Sheet_Staffs_Update(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Sheet_Id     => i_Sheet_Id,
                                   i_Period_Begin => r_Sheet.Period_Begin,
                                   i_Period_End   => r_Sheet.Period_End,
                                   i_Round_Model  => Round_Model(r_Sheet.Round_Value));
    else
      Hpr_Core.Onetime_Sheet_Update(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Sheet_Id     => i_Sheet_Id,
                                    i_Period_Begin => r_Sheet.Period_Begin,
                                    i_Period_End   => r_Sheet.Period_End);
    end if;
  
    z_Hpr_Wage_Sheets.Update_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id,
                                 i_Posted     => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Sheet_Id   number
  ) is
    r_Sheet Hpr_Wage_Sheets%rowtype;
  begin
    r_Sheet := z_Hpr_Wage_Sheets.Lock_Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Sheet_Id   => i_Sheet_Id);
  
    if r_Sheet.Posted = 'N' then
      Hpr_Error.Raise_030(r_Sheet.Sheet_Number);
    end if;
  
    z_Hpr_Wage_Sheets.Update_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Sheet_Id   => i_Sheet_Id,
                                 i_Posted     => Option_Varchar2('N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt) is
  begin
    Hpr_Core.Oper_Type_Save(i_Oper_Type);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Oper_Type_Delete
  (
    i_Company_Id   number,
    i_Oper_Type_Id number
  ) is
    r_Oper_Type Mpr_Oper_Types%rowtype;
  begin
    if z_Mpr_Oper_Types.Exist_Lock(i_Company_Id   => i_Company_Id,
                                   i_Oper_Type_Id => i_Oper_Type_Id,
                                   o_Row          => r_Oper_Type) then
      if r_Oper_Type.Pcode is not null then
        Hpr_Error.Raise_031(i_Oper_Type_Id => i_Oper_Type_Id, i_Oper_Type_Name => r_Oper_Type.Name);
      end if;
    
      z_Hpr_Oper_Types.Delete_One(i_Company_Id => i_Company_Id, i_Oper_Type_Id => i_Oper_Type_Id);
    
      Mpr_Api.Oper_Type_Delete(i_Company_Id => i_Company_Id, i_Oper_Type_Id => i_Oper_Type_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt) is
  begin
    Hpr_Core.Book_Save(i_Book);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Post(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Unpost(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Hpr_Core.Book_Delete(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Save(i_Charge_Document Hpr_Pref.Charge_Document_Rt) is
    v_Exist             boolean := false;
    v_Begin_Date        date := i_Charge_Document.Month;
    v_End_Date          date := Last_Day(v_Begin_Date);
    v_Dismissal_Date    date;
    v_New_Operation_Ids Array_Number := Array_Number();
    v_Operation         Hpr_Pref.Charge_Document_Operation_Rt;
    r_Document          Hpr_Charge_Documents%rowtype;
    r_Oper_Type         Hpr_Oper_Types%rowtype;
  begin
    if z_Hpr_Charge_Documents.Exist(i_Company_Id  => i_Charge_Document.Company_Id,
                                    i_Filial_Id   => i_Charge_Document.Filial_Id,
                                    i_Document_Id => i_Charge_Document.Document_Id,
                                    o_Row         => r_Document) then
      if r_Document.Posted = 'Y' then
        Hpr_Error.Raise_047(r_Document.Document_Id);
      end if;
    
      v_Exist := true;
    else
      r_Document.Company_Id  := i_Charge_Document.Company_Id;
      r_Document.Filial_Id   := i_Charge_Document.Filial_Id;
      r_Document.Document_Id := i_Charge_Document.Document_Id;
      r_Document.Posted      := 'N';
    end if;
  
    r_Document.Document_Number := i_Charge_Document.Document_Number;
    r_Document.Month           := i_Charge_Document.Month;
    r_Document.Document_Date   := i_Charge_Document.Document_Date;
    r_Document.Document_Name   := i_Charge_Document.Document_Name;
    r_Document.Oper_Type_Id    := i_Charge_Document.Oper_Type_Id;
    r_Document.Currency_Id     := i_Charge_Document.Currency_Id;
    r_Document.Division_Id     := i_Charge_Document.Division_Id;
    r_Document.Document_Kind   := i_Charge_Document.Document_Kind;
  
    if r_Document.Document_Number is null then
      r_Document.Document_Number := Md_Core.Gen_Number(i_Company_Id => i_Charge_Document.Company_Id,
                                                       i_Filial_Id  => i_Charge_Document.Filial_Id,
                                                       i_Table      => Zt.Hpr_Charge_Documents,
                                                       i_Column     => z.Document_Id);
    end if;
  
    if r_Document.Oper_Type_Id is not null then
      r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Charge_Document.Company_Id,
                                           i_Oper_Type_Id => r_Document.Oper_Type_Id);
    
      if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Entered then
        Hpr_Error.Raise_051(r_Oper_Type.Oper_Type_Id);
      end if;
    end if;
  
    if v_Exist then
      z_Hpr_Charge_Documents.Update_Row(i_Row => r_Document);
    else
      z_Hpr_Charge_Documents.Insert_Row(i_Row => r_Document);
    end if;
  
    for i in 1 .. i_Charge_Document.Operations.Count
    loop
      v_Operation := i_Charge_Document.Operations(i);
    
      r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Charge_Document.Company_Id,
                                           i_Oper_Type_Id => v_Operation.Oper_Type_Id);
    
      if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Entered then
        Hpr_Error.Raise_051(r_Oper_Type.Oper_Type_Id);
      end if;
    
      v_Dismissal_Date := z_Href_Staffs.Load(i_Company_Id => i_Charge_Document.Company_Id, --
                          i_Filial_Id => i_Charge_Document.Filial_Id, --
                          i_Staff_Id => v_Operation.Staff_Id).Dismissal_Date;
    
      z_Hpr_Charge_Document_Operations.Save_One(i_Company_Id   => i_Charge_Document.Company_Id,
                                                i_Filial_Id    => i_Charge_Document.Filial_Id,
                                                i_Document_Id  => i_Charge_Document.Document_Id,
                                                i_Operation_Id => v_Operation.Operation_Id,
                                                i_Staff_Id     => v_Operation.Staff_Id,
                                                i_Amount       => v_Operation.Amount,
                                                i_Note         => v_Operation.Note);
    
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Charge_Document.Company_Id,
                             i_Filial_Id    => i_Charge_Document.Filial_Id,
                             i_Charge_Id    => v_Operation.Charge_Id,
                             i_Interval_Id  => null,
                             i_Doc_Oper_Id  => v_Operation.Operation_Id,
                             i_Staff_Id     => v_Operation.Staff_Id,
                             i_Oper_Type_Id => v_Operation.Oper_Type_Id,
                             i_Begin_Date   => v_Begin_Date,
                             i_End_Date     => Least(Nvl(v_Dismissal_Date, v_End_Date), v_End_Date),
                             i_Currency_Id  => i_Charge_Document.Currency_Id,
                             i_Amount       => Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Charge_Document.Company_Id,
                                                                        i_Filial_Id   => i_Charge_Document.Filial_Id,
                                                                        i_Currency_Id => i_Charge_Document.Currency_Id,
                                                                        i_Rate_Date   => v_End_Date,
                                                                        i_Amount      => v_Operation.Amount),
                             i_Status       => Hpr_Pref.c_Charge_Status_Draft);
    
      v_New_Operation_Ids.Extend();
      v_New_Operation_Ids(v_New_Operation_Ids.Count) := v_Operation.Operation_Id;
    end loop;
  
    delete Hpr_Charge_Document_Operations q
     where q.Company_Id = i_Charge_Document.Company_Id
       and q.Filial_Id = i_Charge_Document.Filial_Id
       and q.Document_Id = i_Charge_Document.Document_Id
       and q.Operation_Id not in (select *
                                    from table(v_New_Operation_Ids));
  
  end;
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'Y' then
      Hpr_Error.Raise_047(i_Document_Number => r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Update_One(i_Company_Id  => r_Document.Company_Id,
                                      i_Filial_Id   => r_Document.Filial_Id,
                                      i_Document_Id => r_Document.Document_Id,
                                      i_Posted      => Option_Varchar2('Y'));
  
    for r in (select Ch.Charge_Id, --
                     q.Document_Id
                from Hpr_Charge_Document_Operations q
                join Hpr_Charges Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Doc_Oper_Id = q.Operation_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Document_Id = i_Documentr_Id)
    loop
      Hpr_Core.Charge_New(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Charge_Id   => r.Charge_Id,
                          i_Document_Id => r.Document_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'N' then
      Hpr_Error.Raise_050(i_Document_Number => r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Document_Id => i_Documentr_Id,
                                      i_Posted      => Option_Varchar2('N'));
  
    for r in (select Ch.Charge_Id, -- 
                     q.Document_Id
                from Hpr_Charge_Document_Operations q
                join Hpr_Charges Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Doc_Oper_Id = q.Operation_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Document_Id = i_Documentr_Id)
    loop
      Hpr_Core.Charge_Draft(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Charge_Id   => r.Charge_Id,
                            i_Document_Id => r.Document_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_Delete
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Documentr_Id number
  ) is
    r_Document Hpr_Charge_Documents%rowtype;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Documentr_Id);
  
    if r_Document.Posted = 'Y' then
      Hpr_Error.Raise_048(r_Document.Document_Number);
    end if;
  
    z_Hpr_Charge_Documents.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Document_Id => i_Documentr_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt) is
  begin
    Hpr_Core.Advance_Save(i_Advance);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Coef_Save
  (
    i_Company_Id number,
    i_Value      number
  ) is
  begin
    if i_Value < 0 then
      Hpr_Error.Raise_032(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hpr_Pref.c_Overtime_Coef,
                           i_Value      => Nvl(i_Value, Hpr_Pref.c_Overtime_Coef_Default));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Save(i_Sales_Bonus_Payment Hpr_Pref.Sales_Bonus_Payment_Rt) is
    r_Payment       Hpr_Sales_Bonus_Payments%rowtype;
    v_Operation     Hpr_Pref.Sales_Bonus_Payment_Operation_Rt;
    v_Operation_Ids Array_Number := Array_Number();
    v_Periods       Array_Date;
    v_Period_Begin  date;
    v_Period_End    date;
    v_Amount        number;
    v_Sales_Amount  number;
    v_Tot_Amount    number := 0;
    v_Exists        boolean;
  begin
    if z_Hpr_Sales_Bonus_Payments.Exist_Lock(i_Company_Id => i_Sales_Bonus_Payment.Company_Id,
                                             i_Filial_Id  => i_Sales_Bonus_Payment.Filial_Id,
                                             i_Payment_Id => i_Sales_Bonus_Payment.Payment_Id,
                                             o_Row        => r_Payment) then
      if r_Payment.Posted = 'Y' then
        Hpr_Error.Raise_038(Nvl(i_Sales_Bonus_Payment.Payment_Number, r_Payment.Payment_Number));
      end if;
    
      v_Exists := true;
    else
      r_Payment.Company_Id := i_Sales_Bonus_Payment.Company_Id;
      r_Payment.Filial_Id  := i_Sales_Bonus_Payment.Filial_Id;
      r_Payment.Payment_Id := i_Sales_Bonus_Payment.Payment_Id;
      r_Payment.Posted     := 'N';
    
      v_Exists := false;
    end if;
  
    r_Payment.Payment_Number := i_Sales_Bonus_Payment.Payment_Number;
    r_Payment.Payment_Date   := i_Sales_Bonus_Payment.Payment_Date;
    r_Payment.Payment_Name   := i_Sales_Bonus_Payment.Payment_Name;
    r_Payment.Begin_Date     := i_Sales_Bonus_Payment.Begin_Date;
    r_Payment.End_Date       := i_Sales_Bonus_Payment.End_Date;
    r_Payment.Division_Id    := i_Sales_Bonus_Payment.Division_Id;
    r_Payment.Job_Id         := i_Sales_Bonus_Payment.Job_Id;
    r_Payment.Bonus_Type     := i_Sales_Bonus_Payment.Bonus_Type;
    r_Payment.Payment_Type   := i_Sales_Bonus_Payment.Payment_Type;
    r_Payment.Amount         := 0;
    r_Payment.Note           := i_Sales_Bonus_Payment.Note;
  
    if r_Payment.Payment_Type = Mpr_Pref.c_Pt_Cashbox then
      r_Payment.Cashbox_Id      := i_Sales_Bonus_Payment.Cashbox_Id;
      r_Payment.Bank_Account_Id := null;
    else
      r_Payment.Cashbox_Id      := null;
      r_Payment.Bank_Account_Id := i_Sales_Bonus_Payment.Bank_Account_Id;
    end if;
  
    if v_Exists then
      z_Hpr_Sales_Bonus_Payments.Update_Row(r_Payment);
    else
      if r_Payment.Payment_Number is null then
        r_Payment.Payment_Number := Md_Core.Gen_Number(i_Company_Id => r_Payment.Company_Id,
                                                       i_Filial_Id  => r_Payment.Filial_Id,
                                                       i_Table      => Zt.Hpr_Sales_Bonus_Payments,
                                                       i_Column     => z.Payment_Id);
      end if;
    
      r_Payment.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Hpr_Sales_Bonus_Payments,
                                               i_Id    => r_Payment.Payment_Id);
    
      z_Hpr_Sales_Bonus_Payments.Insert_Row(r_Payment);
    end if;
  
    v_Operation_Ids.Extend(i_Sales_Bonus_Payment.Operations.Count);
  
    for i in 1 .. i_Sales_Bonus_Payment.Operations.Count
    loop
      v_Operation    := i_Sales_Bonus_Payment.Operations(i);
      v_Amount       := 0;
      v_Sales_Amount := 0;
      v_Periods      := Array_Date();
    
      if Hpr_Util.Is_Staff_Sales_Bonus_Calced(i_Company_Id   => r_Payment.Company_Id,
                                              i_Filial_Id    => r_Payment.Filial_Id,
                                              i_Staff_Id     => v_Operation.Staff_Id,
                                              i_Bonus_Type   => v_Operation.Bonus_Type,
                                              i_Period_Begin => v_Operation.Period_Begin,
                                              i_Period_End   => v_Operation.Period_End,
                                              o_Period_Begin => v_Period_Begin,
                                              o_Period_End   => v_Period_End) = 'Y' then
        Hpr_Error.Raise_039(i_Payment_Number  => r_Payment.Payment_Number,
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Payment.Company_Id,
                                                                      i_Filial_Id  => r_Payment.Filial_Id,
                                                                      i_Staff_Id   => v_Operation.Staff_Id),
                            i_Bonus_Type_Name => Hrm_Util.t_Bonus_Type(v_Operation.Bonus_Type),
                            i_Period_Begin    => v_Period_Begin,
                            i_Period_End      => v_Period_End);
      end if;
    
      if v_Operation.Period_Begin < r_Payment.Begin_Date or
         v_Operation.Period_End > r_Payment.End_Date then
        Hpr_Error.Raise_040(i_Payment_Number  => r_Payment.Payment_Number,
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Payment.Company_Id,
                                                                      i_Filial_Id  => r_Payment.Filial_Id,
                                                                      i_Staff_Id   => v_Operation.Staff_Id),
                            i_Bonus_Type_Name => Hrm_Util.t_Bonus_Type(v_Operation.Bonus_Type),
                            i_Period_Begin    => r_Payment.Begin_Date,
                            i_Period_End      => r_Payment.End_Date);
      end if;
    
      z_Hpr_Sales_Bonus_Payment_Operations.Save_One(i_Company_Id   => r_Payment.Company_Id,
                                                    i_Filial_Id    => r_Payment.Filial_Id,
                                                    i_Operation_Id => v_Operation.Operation_Id,
                                                    i_Payment_Id   => r_Payment.Payment_Id,
                                                    i_Staff_Id     => v_Operation.Staff_Id,
                                                    i_Bonus_Type   => v_Operation.Bonus_Type,
                                                    i_Period_Begin => v_Operation.Period_Begin,
                                                    i_Period_End   => v_Operation.Period_End,
                                                    i_Job_Id       => v_Operation.Job_Id,
                                                    i_Sales_Amount => 0,
                                                    i_Percentage   => v_Operation.Percentage,
                                                    i_Amount       => 0);
    
      for j in 1 .. v_Operation.Periods.Count
      loop
        if v_Operation.Periods(j) between v_Operation.Period_Begin and v_Operation.Period_End then
          z_Hpr_Sales_Bonus_Payment_Operation_Periods.Save_One(i_Company_Id   => r_Payment.Company_Id,
                                                               i_Filial_Id    => r_Payment.Filial_Id,
                                                               i_Operation_Id => v_Operation.Operation_Id,
                                                               i_Period       => v_Operation.Periods(j),
                                                               i_Sales_Amount => v_Operation.Sales_Amounts(j),
                                                               i_Amount       => v_Operation.Amounts(j),
                                                               i_c_Staff_Id   => v_Operation.Staff_Id,
                                                               i_c_Bonus_Type => v_Operation.Bonus_Type);
        
          v_Sales_Amount := v_Sales_Amount + v_Operation.Sales_Amounts(j);
          v_Amount       := v_Amount + v_Operation.Amounts(j);
        
          Fazo.Push(v_Periods, v_Operation.Periods(j));
        end if;
      end loop;
    
      z_Hpr_Sales_Bonus_Payment_Operations.Update_One(i_Company_Id   => r_Payment.Company_Id,
                                                      i_Filial_Id    => r_Payment.Filial_Id,
                                                      i_Operation_Id => v_Operation.Operation_Id,
                                                      i_Sales_Amount => Option_Number(v_Sales_Amount),
                                                      i_Amount       => Option_Number(v_Amount));
    
      v_Tot_Amount := v_Tot_Amount + v_Amount;
      v_Operation_Ids(i) := v_Operation.Operation_Id;
    
      if v_Exists then
        delete from Hpr_Sales_Bonus_Payment_Operation_Periods q
         where q.Company_Id = r_Payment.Company_Id
           and q.Filial_Id = r_Payment.Filial_Id
           and q.Operation_Id = v_Operation.Operation_Id
           and q.Period not member of v_Periods;
      end if;
    end loop;
  
    if v_Exists then
      delete from Hpr_Sales_Bonus_Payment_Operations q
       where q.Company_Id = r_Payment.Company_Id
         and q.Filial_Id = r_Payment.Filial_Id
         and q.Payment_Id = r_Payment.Payment_Id
         and q.Operation_Id not member of v_Operation_Ids;
    end if;
  
    z_Hpr_Sales_Bonus_Payments.Update_One(i_Company_Id => r_Payment.Company_Id,
                                          i_Filial_Id  => r_Payment.Filial_Id,
                                          i_Payment_Id => r_Payment.Payment_Id,
                                          i_Amount     => Option_Number(v_Tot_Amount));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
  begin
    Hpr_Core.Sales_Bonus_Payment_Post(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
  begin
    Hpr_Core.Sales_Bonus_Payment_Unpost(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
    r_Payment Hpr_Sales_Bonus_Payments%rowtype;
  begin
    r_Payment := z_Hpr_Sales_Bonus_Payments.Lock_Load(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Payment_Id => i_Payment_Id);
  
    if r_Payment.Posted = 'Y' then
      Hpr_Error.Raise_043(r_Payment.Payment_Number);
    end if;
  
    z_Hpr_Sales_Bonus_Payments.Delete_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Payment_Id => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Settings_Save
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Currency_Ids Array_Number
  ) is
    v_Currency_Ids Array_Number := Nvl(i_Currency_Ids, Array_Number());
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Allow_Other_Currencies,
                           i_Value      => Fazo.Gather(v_Currency_Ids,
                                                       Href_Pref.c_Settings_Separator));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timebook_Fill_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Settings   varchar2
  ) is
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Timebook_Fill_Settings,
                           i_Value      => i_Settings);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Use_Subfilial_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Setting    varchar2
  ) is
  begin
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hpr_Pref.c_Pref_Use_Subfilial_Settings,
                           i_Value      => i_Setting);
  end;

end Hpr_Api;
/

create or replace package Hpr_Pref is
  ----------------------------------------------------------------------------------------------------
  -- Timebook
  ----------------------------------------------------------------------------------------------------  
  type Timebook_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Timebook_Id     number,
    Timebook_Number varchar2(50 char),
    Timebook_Date   date,
    Period_Begin    date,
    Period_End      date,
    Period_Kind     varchar2(1),
    Division_Id     number,
    Barcode         varchar2(25 char),
    Note            varchar2(300 char),
    Staff_Ids       Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- Oper Type
  ----------------------------------------------------------------------------------------------------  
  type Oper_Type_Rt is record(
    Oper_Type          Mpr_Oper_Types%rowtype,
    Oper_Group_Id      number,
    Estimation_Type    varchar2(1),
    Estimation_Formula varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  -- Book
  ----------------------------------------------------------------------------------------------------
  type Book_Operation_Rt is record(
    Operation_Id number,
    Staff_Id     number,
    Charge_Id    number,
    Autofilled   varchar2(1));
  type Book_Opereration_Nt is table of Book_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Book_Rt is record(
    Book         Mpr_Pref.Book_Rt,
    Book_Type_Id number,
    Operations   Book_Opereration_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Payment
  ----------------------------------------------------------------------------------------------------
  type Advance_Rt is record(
    Payment      Mpr_Pref.Payment_Rt,
    Limit_Kind   varchar2(1),
    Days_Limit   number(3),
    Employee_Ids Array_Number);
  ----------------------------------------------------------------------------------------------------
  -- timebook staff info
  ----------------------------------------------------------------------------------------------------
  type Timebook_Staff_Info is record(
    Staff_Id   number,
    Plan_Hours number,
    Plan_Days  number,
    Fact_Hours number,
    Fact_Days  number);
  ----------------------------------------------------------------------------------------------------
  -- Penalty
  ----------------------------------------------------------------------------------------------------
  type Penalty_Policy_Rt is record(
    Penalty_Kind         varchar2(1),
    Penalty_Type         varchar2(1),
    From_Day             number,
    To_Day               number,
    From_Time            number,
    To_Time              number,
    Penalty_Coef         number,
    Penalty_Per_Time     number,
    Penalty_Amount       number,
    Penalty_Time         number,
    Calc_After_From_Time varchar2(1));
  type Penalty_Policy_Nt is table of Penalty_Policy_Rt;
  ----------------------------------------------------------------------------------------------------
  type Penalty_Rt is record(
    Company_Id  number,
    Filial_Id   number,
    Penalty_Id  number,
    month       date,
    name        varchar2(100 char),
    Division_Id number,
    State       varchar2(1),
    Policies    Penalty_Policy_Nt);
  ----------------------------------------------------------------------------------------------------
  -- nigthtime policy
  ----------------------------------------------------------------------------------------------------
  type Nighttime_Rule_Rt is record(
    Begin_Time     number,
    End_Time       number,
    Nighttime_Coef number);
  type Nighttime_Rule_Nt is table of Nighttime_Rule_Rt;
  ----------------------------------------------------------------------------------------------------
  type Nighttime_Policy_Rt is record(
    Company_Id           number,
    Filial_Id            number,
    Nigthttime_Policy_Id number,
    month                date,
    name                 varchar2(100 char),
    Division_Id          number,
    State                varchar2(1),
    Rules                Nighttime_Rule_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sheet parts (regular wage sheet)
  ----------------------------------------------------------------------------------------------------
  type Sheet_Part_Rt is record(
    Part_Begin       date,
    Part_End         date,
    Division_Id      number,
    Job_Id           number,
    Schedule_Id      number,
    Fte_Id           number,
    Monthly_Amount   number,
    Plan_Amount      number,
    Wage_Amount      number,
    Overtime_Amount  number,
    Nighttime_Amount number,
    Late_Amount      number,
    Early_Amount     number,
    Lack_Amount      number,
    Day_Skip_Amount  number,
    Mark_Skip_Amount number);
  type Sheet_Part_Nt is table of Sheet_Part_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Sheet staffs (one-time wage sheet)
  ----------------------------------------------------------------------------------------------------
  type Sheet_Staff_Rt is record(
    Staff_Id       number,
    Accrual_Amount number,
    Penalty_Amount number);
  type Sheet_Staff_Nt is table of Sheet_Staff_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Wage sheet
  ----------------------------------------------------------------------------------------------------
  type Wage_Sheet_Rt is record(
    Company_Id   number,
    Filial_Id    number,
    Sheet_Id     number,
    Sheet_Number varchar2(50 char),
    Sheet_Date   date,
    Period_Begin date,
    Period_End   date,
    Period_Kind  varchar2(1),
    Note         varchar2(300 char),
    Round_Value  varchar2(5),
    Sheet_Kind   varchar2(1),
    Staff_Ids    Array_Number,
    Division_Ids Array_Number,
    Sheet_Staffs Sheet_Staff_Nt);
  ---------------------------------------------------------------------------------------------------- 
  -- Cv Contracts
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Fact_Item_Rt is record(
    Fact_Item_Id  number,
    Fact_Quantity number,
    Fact_Amount   number,
    name          varchar2(150 char));
  type Cv_Contract_Fact_Item_Nt is table of Cv_Contract_Fact_Item_Rt;
  ----------------------------------------------------------------------------------------------------
  type Cv_Contract_Fact_Rt is record(
    Company_Id number,
    Filial_Id  number,
    Fact_Id    number,
    Items      Cv_Contract_Fact_Item_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Sales Bonus Payment
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Operation_Rt is record(
    Operation_Id  number,
    Staff_Id      number,
    Period_Begin  date,
    Period_End    date,
    Bonus_Type    varchar2(1),
    Job_Id        number,
    Percentage    number,
    Periods       Array_Date,
    Sales_Amounts Array_Number,
    Amounts       Array_Number);
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Operation_Nt is table of Sales_Bonus_Payment_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Sales_Bonus_Payment_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Payment_Id      number,
    Payment_Number  Hpr_Sales_Bonus_Payments.Payment_Number%type,
    Payment_Date    date,
    Payment_Name    Hpr_Sales_Bonus_Payments.Payment_Name%type,
    Begin_Date      date,
    End_Date        date,
    Division_Id     number,
    Job_Id          number,
    Bonus_Type      varchar2(1),
    Payment_Type    varchar2(1),
    Cashbox_Id      number,
    Bank_Account_Id number,
    Note            Hpr_Sales_Bonus_Payments.Note%type,
    Operations      Sales_Bonus_Payment_Operation_Nt);
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Operation_Rt is record(
    Operation_Id number,
    Staff_Id     number,
    Charge_Id    number,
    Oper_Type_Id number,
    Amount       number,
    Note         varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Operation_Nt is table of Charge_Document_Operation_Rt;
  ----------------------------------------------------------------------------------------------------
  type Charge_Document_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Document_Id     number,
    Document_Number varchar2(50 char),
    Document_Date   date,
    Document_Name   varchar2(150 char),
    month           date,
    Oper_Type_Id    number,
    Currency_Id     number,
    Division_Id     number,
    Document_Kind   varchar2(1),
    Operations      Charge_Document_Operation_Nt);
  ----------------------------------------------------------------------------------------------------
  type Daily_Indicators_Rt is record(
    Indicator_Id    number,
    Indicator_Value number);
  type Daily_Indicators_Nt is table of Daily_Indicators_Rt;
  ----------------------------------------------------------------------------------------------------
  -- Default Round Value
  ----------------------------------------------------------------------------------------------------
  c_Default_Round_Value constant varchar2(5) := '+2.0R';
  ----------------------------------------------------------------------------------------------------  
  -- Penalty kinds 
  ---------------------------------------------------------------------------------------------------- 
  c_Penalty_Kind_Late      constant varchar2(1) := 'L';
  c_Penalty_Kind_Early     constant varchar2(1) := 'E';
  c_Penalty_Kind_Lack      constant varchar2(1) := 'C';
  c_Penalty_Kind_Day_Skip  constant varchar2(1) := 'S';
  c_Penalty_Kind_Mark_Skip constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------
  -- Penalty types
  ----------------------------------------------------------------------------------------------------
  c_Penalty_Type_Coef   constant varchar2(1) := 'C';
  c_Penalty_Type_Amount constant varchar2(1) := 'A';
  c_Penalty_Type_Time   constant varchar2(1) := 'T';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Operation Group
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Operation_Group_Wage                   constant varchar2(20) := 'VHR:1';
  c_Pcode_Operation_Group_Perf                   constant varchar2(20) := 'VHR:2';
  c_Pcode_Operation_Group_Sick_Leave             constant varchar2(20) := 'VHR:3';
  c_Pcode_Operation_Group_Business_Trip          constant varchar2(20) := 'VHR:4';
  c_Pcode_Operation_Group_Vacation               constant varchar2(20) := 'VHR:5';
  c_Pcode_Operation_Group_Overtime               constant varchar2(20) := 'VHR:6';
  c_Pcode_Operation_Group_Penalty_For_Discipline constant varchar2(20) := 'VHR:7';
  c_Pcode_Operation_Group_Perf_Penalty           constant varchar2(20) := 'VHR:8';
  c_Pcode_Operation_Group_Wage_No_Deduction      constant varchar2(20) := 'VHR:9';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Oper Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Oper_Type_Sick_Leave             constant varchar2(20) := 'VHR:1';
  c_Pcode_Oper_Type_Business_Trip          constant varchar2(20) := 'VHR:2';
  c_Pcode_Oper_Type_Vacation               constant varchar2(20) := 'VHR:3';
  c_Pcode_Oper_Type_Wage_Hourly            constant varchar2(20) := 'VHR:4';
  c_Pcode_Oper_Type_Wage_Daily             constant varchar2(20) := 'VHR:5';
  c_Pcode_Oper_Type_Wage_Monthly           constant varchar2(20) := 'VHR:6';
  c_Pcode_Oper_Type_Overtime               constant varchar2(20) := 'VHR:7';
  c_Pcode_Oper_Type_Monthly_Summarized     constant varchar2(20) := 'VHR:8';
  c_Pcode_Oper_Type_Penalty_For_Discipline constant varchar2(20) := 'VHR:9';
  c_Pcode_Oper_Type_Nighttime              constant varchar2(20) := 'VHR:10';
  c_Pcode_Oper_Type_Weighted_Turnout       constant varchar2(20) := 'VHR:11';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Book Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Book_Type_Wage          constant varchar2(20) := 'VHR:1';
  c_Pcode_Book_Type_Sick_Leave    constant varchar2(20) := 'VHR:2';
  c_Pcode_Book_Type_Business_Trip constant varchar2(20) := 'VHR:3';
  c_Pcode_Book_Type_Vacation      constant varchar2(20) := 'VHR:4';
  c_Pcode_Book_Type_All           constant varchar2(20) := 'VHR:5';
  ----------------------------------------------------------------------------------------------------
  -- Charge Status
  ----------------------------------------------------------------------------------------------------
  c_Charge_Status_Draft     constant varchar2(1) := 'D';
  c_Charge_Status_New       constant varchar2(1) := 'N';
  c_Charge_Status_Used      constant varchar2(1) := 'U';
  c_Charge_Status_Completed constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Estimation Type
  ----------------------------------------------------------------------------------------------------
  c_Estimation_Type_Formula constant varchar2(1) := 'F';
  c_Estimation_Type_Entered constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  c_Advance_Limit_Turnout_Days  constant varchar2(1) := 'T';
  c_Advance_Limit_Calendar_Days constant varchar2(1) := 'C';
  ----------------------------------------------------------------------------------------------------
  -- Easy Report Form
  ----------------------------------------------------------------------------------------------------
  c_Easy_Report_Form_Timebook     constant varchar2(200) := '/vhr/rep/hpr/timebook';
  c_Easy_Report_Form_Payroll_Book constant varchar2(200) := '/vhr/rep/hpr/payroll_book';
  ----------------------------------------------------------------------------------------------------
  -- Wage Sheet Report
  ----------------------------------------------------------------------------------------------------
  c_Report_Form_Wage_Sheet constant varchar2(200) := '/vhr/rep/hpr/start/wage_report';
  c_Report_Uri_Wage_Sheet  constant varchar2(200) := '/vhr/rep/hpr/start/wage_report:run';
  ----------------------------------------------------------------------------------------------------
  -- Period Kinds
  ----------------------------------------------------------------------------------------------------
  c_Period_Full_Month        constant varchar2(1) := 'M';
  c_Period_Month_First_Half  constant varchar2(1) := 'F';
  c_Period_Month_Second_Half constant varchar2(1) := 'S';
  c_Period_Custom            constant varchar2(1) := 'C';
  ---------------------------------------------------------------------------------------------------- 
  -- Contract
  ----------------------------------------------------------------------------------------------------  
  c_Cv_Contract_Fact_Status_New      constant varchar2(1) := 'N';
  c_Cv_Contract_Fact_Status_Complete constant varchar2(1) := 'C';
  c_Cv_Contract_Fact_Status_Accept   constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Overtime coef
  ----------------------------------------------------------------------------------------------------
  c_Overtime_Coef         constant varchar2(50) := 'VHR:OVERTIME_COEF';
  c_Overtime_Coef_Default constant number := 1;
  ----------------------------------------------------------------------------------------------------
  -- Wage sheet kinds
  ----------------------------------------------------------------------------------------------------
  c_Wage_Sheet_Regular constant varchar2(1) := 'R';
  c_Wage_Sheet_Onetime constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- view forms
  ----------------------------------------------------------------------------------------------------
  c_Form_Timebook_View constant varchar2(200) := '/vhr/hpr/timebook_view';
  c_Form_Book_View     constant varchar2(200) := '/vhr/hpr/book_view';
  ----------------------------------------------------------------------------------------------------
  -- Currency setting codes
  ----------------------------------------------------------------------------------------------------
  c_Pref_Allow_Other_Currencies constant varchar2(50) := 'VHR:ALLOW_OTHER_CURRENCIES';
  ----------------------------------------------------------------------------------------------------
  -- Timebook Fill Settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Timebook_Fill_Settings constant varchar2(50) := 'VHR:HPR:TIMEBOOK_FILL_SETTINGS';
  ----------------------------------------------------------------------------------------------------
  -- Use Project Setting
  ---------------------------------------------------------------------------------------------------- 
  c_Pref_Use_Subfilial_Settings constant varchar2(50) := 'VHR:HPR:USE_SUBFILIAL_SETTINGS';
end Hpr_Pref;
/
create or replace package body Hpr_Pref is

end Hpr_Pref;
/

create or replace package Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Policy_New
  (
    o_Nigthtime_Policy    out Hpr_Pref.Nighttime_Policy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nigthtime_Policy_Id number,
    i_Month               date,
    i_Name                varchar2 := null,
    i_Division_Id         number := null,
    i_State               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Add_Rule
  (
    o_Nigthtime_Policy in out nocopy Hpr_Pref.Nighttime_Policy_Rt,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Nighttime_Coef   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Division_Ids Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Nighttime_Amount number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Indicator_Id number,
    i_Period       date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount_With_Indicators
  (
    o_Indicators   out Hpr_Pref.Daily_Indicators_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Amount
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Division_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap;
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2;
  Function Charge_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2;
  Function Estimation_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2;
  Function Advance_Limit_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2;
  Function Period_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2;
  Function Penalty_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2;
  Function Cv_Fact_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2;
  Function t_Penalty_Rule_Unit_Times return varchar2;
  Function t_Penalty_Rule_Unit_Days return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
end Hpr_Util;
/
create or replace package body Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Late_Amount      Fazo.Number_Code_Aat;
  g_Cache_Early_Amount     Fazo.Number_Code_Aat;
  g_Cache_Lack_Amount      Fazo.Number_Code_Aat;
  g_Cache_Day_Skip_Amount  Fazo.Number_Code_Aat;
  g_Cache_Mark_Skip_Amount Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  ) is
  begin
    o_Contract_Fact.Company_Id := i_Company_Id;
    o_Contract_Fact.Filial_Id  := i_Filial_Id;
    o_Contract_Fact.Fact_Id    := i_Fact_Id;
  
    o_Contract_Fact.Items := Hpr_Pref.Cv_Contract_Fact_Item_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  ) is
    v_Fact_Item Hpr_Pref.Cv_Contract_Fact_Item_Rt;
  begin
    v_Fact_Item.Fact_Item_Id  := i_Fact_Item_Id;
    v_Fact_Item.Fact_Quantity := i_Fact_Quantity;
    v_Fact_Item.Fact_Amount   := i_Fact_Amount;
    v_Fact_Item.Name          := i_Name;
  
    o_Contract_Fact.Items.Extend;
    o_Contract_Fact.Items(o_Contract_Fact.Items.Count) := v_Fact_Item;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  ) is
  begin
    o_Penalty.Company_Id  := i_Company_Id;
    o_Penalty.Filial_Id   := i_Filial_Id;
    o_Penalty.Penalty_Id  := i_Penalty_Id;
    o_Penalty.Month       := i_Month;
    o_Penalty.Name        := i_Name;
    o_Penalty.Division_Id := i_Division_Id;
    o_Penalty.State       := i_State;
  
    o_Penalty.Policies := Hpr_Pref.Penalty_Policy_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  ) is
    v_Policy Hpr_Pref.Penalty_Policy_Rt;
  begin
    v_Policy.Penalty_Kind         := i_Penalty_Kind;
    v_Policy.Penalty_Type         := i_Penalty_Type;
    v_Policy.From_Day             := i_From_Day;
    v_Policy.To_Day               := i_To_Day;
    v_Policy.From_Time            := i_From_Time;
    v_Policy.To_Time              := i_To_Time;
    v_Policy.Penalty_Coef         := i_Penalty_Coef;
    v_Policy.Penalty_Per_Time     := i_Penalty_Per_Time;
    v_Policy.Penalty_Amount       := i_Penalty_Amount;
    v_Policy.Penalty_Time         := i_Penalty_Time;
    v_Policy.Calc_After_From_Time := i_Calc_After_From_Time;
  
    p_Penalty.Policies.Extend;
    p_Penalty.Policies(p_Penalty.Policies.Count) := v_Policy;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Policy_New
  (
    o_Nigthtime_Policy    out Hpr_Pref.Nighttime_Policy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nigthtime_Policy_Id number,
    i_Month               date,
    i_Name                varchar2 := null,
    i_Division_Id         number := null,
    i_State               varchar2
  ) is
  begin
    o_Nigthtime_Policy.Company_Id           := i_Company_Id;
    o_Nigthtime_Policy.Filial_Id            := i_Filial_Id;
    o_Nigthtime_Policy.Nigthttime_Policy_Id := i_Nigthtime_Policy_Id;
    o_Nigthtime_Policy.Month                := i_Month;
    o_Nigthtime_Policy.Name                 := i_Name;
    o_Nigthtime_Policy.Division_Id          := i_Division_Id;
    o_Nigthtime_Policy.State                := i_State;
  
    o_Nigthtime_Policy.Rules := Hpr_Pref.Nighttime_Rule_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Add_Rule
  (
    o_Nigthtime_Policy in out nocopy Hpr_Pref.Nighttime_Policy_Rt,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Nighttime_Coef   number
  ) is
    v_Rule     Hpr_Pref.Nighttime_Rule_Rt;
    v_End_Time number := i_End_Time;
  begin
    if v_End_Time < i_Begin_Time then
      v_End_Time := v_End_Time + 1440;
    end if;
  
    v_Rule.Begin_Time     := i_Begin_Time;
    v_Rule.End_Time       := v_End_Time;
    v_Rule.Nighttime_Coef := i_Nighttime_Coef;
  
    o_Nigthtime_Policy.Rules.Extend;
    o_Nigthtime_Policy.Rules(o_Nigthtime_Policy.Rules.Count) := v_Rule;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Division_Ids Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  ) is
  begin
    o_Wage_Sheet.Company_Id   := i_Company_Id;
    o_Wage_Sheet.Filial_Id    := i_Filial_Id;
    o_Wage_Sheet.Sheet_Id     := i_Sheet_Id;
    o_Wage_Sheet.Sheet_Number := i_Sheet_Number;
    o_Wage_Sheet.Sheet_Date   := i_Sheet_Date;
    o_Wage_Sheet.Period_Begin := i_Period_Begin;
    o_Wage_Sheet.Period_End   := i_Period_End;
    o_Wage_Sheet.Period_Kind  := i_Period_Kind;
    o_Wage_Sheet.Note         := i_Note;
    o_Wage_Sheet.Sheet_Kind   := i_Sheet_Kind;
    o_Wage_Sheet.Round_Value  := i_Round_Value;
    o_Wage_Sheet.Staff_Ids    := i_Staff_Ids;
    o_Wage_Sheet.Division_Ids := i_Division_Ids;
    o_Wage_Sheet.Sheet_Staffs := i_Sheet_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  ) is
    v_Staff Hpr_Pref.Sheet_Staff_Rt;
  begin
    v_Staff.Staff_Id       := i_Staff_Id;
    v_Staff.Accrual_Amount := i_Accrual_Amount;
    v_Staff.Penalty_Amount := i_Penalty_Amount;
  
    p_Staffs.Extend;
    p_Staffs(p_Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Nighttime_Amount number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  ) is
    v_Part Hpr_Pref.Sheet_Part_Rt;
  begin
    v_Part := Hpr_Pref.Sheet_Part_Rt(Part_Begin       => i_Part_Begin,
                                     Part_End         => i_Part_End,
                                     Division_Id      => i_Division_Id,
                                     Job_Id           => i_Job_Id,
                                     Schedule_Id      => i_Schedule_Id,
                                     Fte_Id           => i_Fte_Id,
                                     Monthly_Amount   => i_Monthly_Amount,
                                     Plan_Amount      => i_Plan_Amount,
                                     Wage_Amount      => i_Wage_Amount,
                                     Overtime_Amount  => i_Overtime_Amount,
                                     Nighttime_Amount => i_Nighttime_Amount,
                                     Late_Amount      => i_Late_Amount,
                                     Early_Amount     => i_Early_Amount,
                                     Lack_Amount      => i_Lack_Amount,
                                     Day_Skip_Amount  => i_Day_Skip_Amount,
                                     Mark_Skip_Amount => i_Mark_Skip_Amount);
  
    p_Parts.Extend;
    p_Parts(p_Parts.Count) := v_Part;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  ) is
  begin
    o_Timebook.Company_Id      := i_Company_Id;
    o_Timebook.Filial_Id       := i_Filial_Id;
    o_Timebook.Timebook_Id     := i_Timebook_Id;
    o_Timebook.Timebook_Number := i_Timebook_Number;
    o_Timebook.Timebook_Date   := i_Timebook_Date;
    o_Timebook.Period_Begin    := i_Period_Begin;
    o_Timebook.Period_End      := i_Period_End;
    o_Timebook.Period_Kind     := i_Period_Kind;
    o_Timebook.Division_Id     := i_Division_Id;
    o_Timebook.Note            := i_Note;
    o_Timebook.Staff_Ids       := i_Staff_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  ) is
  begin
    o_Oper_Type.Oper_Type.Company_Id             := i_Company_Id;
    o_Oper_Type.Oper_Type.Oper_Type_Id           := i_Oper_Type_Id;
    o_Oper_Type.Oper_Type.Operation_Kind         := i_Operation_Kind;
    o_Oper_Type.Oper_Type.Name                   := i_Name;
    o_Oper_Type.Oper_Type.Short_Name             := i_Short_Name;
    o_Oper_Type.Oper_Type.Accounting_Type        := i_Accounting_Type;
    o_Oper_Type.Oper_Type.Corr_Coa_Id            := i_Corr_Coa_Id;
    o_Oper_Type.Oper_Type.Corr_Ref_Set           := i_Corr_Ref_Set;
    o_Oper_Type.Oper_Type.Income_Tax_Exists      := i_Income_Tax_Exists;
    o_Oper_Type.Oper_Type.Income_Tax_Rate        := i_Income_Tax_Rate;
    o_Oper_Type.Oper_Type.Pension_Payment_Exists := i_Pension_Payment_Exists;
    o_Oper_Type.Oper_Type.Pension_Payment_Rate   := i_Pension_Payment_Rate;
    o_Oper_Type.Oper_Type.Social_Payment_Exists  := i_Social_Payment_Exists;
    o_Oper_Type.Oper_Type.Social_Payment_Rate    := i_Social_Payment_Rate;
    o_Oper_Type.Oper_Type.Note                   := i_Note;
    o_Oper_Type.Oper_Type.State                  := i_State;
    o_Oper_Type.Oper_Type.Code                   := i_Code;
    o_Oper_Type.Oper_Group_Id                    := i_Oper_Group_Id;
    o_Oper_Type.Estimation_Type                  := i_Estimation_Type;
    o_Oper_Type.Estimation_Formula               := i_Estimation_Formula;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  ) is
    v_Book Mpr_Pref.Book_Rt;
  begin
    Mpr_Util.Book_New(o_Book        => v_Book,
                      i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Book_Id     => i_Book_Id,
                      i_Book_Number => i_Book_Number,
                      i_Book_Date   => i_Book_Date,
                      i_Book_Name   => i_Book_Name,
                      i_Month       => i_Month,
                      i_Division_Id => i_Division_Id,
                      i_Currency_Id => i_Currency_Id,
                      i_Note        => i_Note);
  
    o_Book.Book_Type_Id := i_Book_Type_Id;
    o_Book.Book         := v_Book;
    o_Book.Operations   := Hpr_Pref.Book_Opereration_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  ) is
    r_Staff     Href_Staffs%rowtype;
    v_Operation Hpr_Pref.Book_Operation_Rt;
    v_Book      Mpr_Pref.Book_Rt := p_Book.Book;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => v_Book.Company_Id,
                                  i_Filial_Id  => v_Book.Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    Mpr_Util.Book_Add_Operation(p_Book                   => v_Book,
                                i_Operation_Id           => i_Operation_Id,
                                i_Employee_Id            => r_Staff.Employee_Id,
                                i_Oper_Type_Id           => i_Oper_Type_Id,
                                i_Amount                 => i_Amount,
                                i_Net_Amount             => i_Net_Amount,
                                i_Income_Tax_Amount      => i_Income_Tax_Amount,
                                i_Pension_Payment_Amount => i_Pension_Payment_Amount,
                                i_Social_Payment_Amount  => i_Social_Payment_Amount,
                                i_Subfilial_Id           => i_Subfilial_Id,
                                i_Note                   => i_Note);
  
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Autofilled   := i_Autofilled;
  
    p_Book.Book := v_Book;
    p_Book.Operations.Extend;
    p_Book.Operations(p_Book.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  ) is
  begin
    o_Charge_Document.Company_Id      := i_Company_Id;
    o_Charge_Document.Filial_Id       := i_Filial_Id;
    o_Charge_Document.Document_Id     := i_Document_Id;
    o_Charge_Document.Document_Number := i_Document_Number;
    o_Charge_Document.Document_Date   := i_Document_Date;
    o_Charge_Document.Document_Name   := i_Document_Name;
    o_Charge_Document.Month           := i_Month;
    o_Charge_Document.Oper_Type_Id    := i_Oper_Type_Id;
    o_Charge_Document.Currency_Id     := i_Currency_Id;
    o_Charge_Document.Division_Id     := i_Division_Id;
    o_Charge_Document.Document_Kind   := i_Document_Kind;
    o_Charge_Document.Operations      := Hpr_Pref.Charge_Document_Operation_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  ) is
    v_Operation Hpr_Pref.Charge_Document_Operation_Rt;
  begin
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Oper_Type_Id := i_Oper_Type_Id;
    v_Operation.Amount       := i_Amount;
    v_Operation.Note         := i_Note;
  
    o_Charge_Document.Operations.Extend();
    o_Charge_Document.Operations(o_Charge_Document.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  ) is
    v_Payment Mpr_Pref.Payment_Rt;
  begin
    Mpr_Util.Payment_New(o_Payment         => v_Payment,
                         i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Payment_Id      => i_Payment_Id,
                         i_Payment_Kind    => Mpr_Pref.c_Pk_Advance,
                         i_Payment_Number  => i_Payment_Number,
                         i_Payment_Date    => i_Payment_Date,
                         i_Booked_Date     => i_Booked_Date,
                         i_Currency_Id     => i_Currency_Id,
                         i_Payment_Type    => i_Payment_Type,
                         i_Division_Id     => i_Division_Id,
                         i_Cashbox_Id      => i_Cashbox_Id,
                         i_Bank_Account_Id => i_Bank_Account_Id,
                         i_Note            => i_Note,
                         i_Souce_Table     => i_Souce_Table,
                         i_Source_Id       => i_Source_Id);
  
    o_Advance.Payment      := v_Payment;
    o_Advance.Limit_Kind   := i_Limit_Kind;
    o_Advance.Days_Limit   := i_Days_Limit;
    o_Advance.Employee_Ids := Array_Number();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  ) is
  begin
    Mpr_Util.Payment_Add_Employee(p_Payment         => p_Advance.Payment,
                                  i_Employee_Id     => i_Employee_Id,
                                  i_Pay_Amount      => i_Pay_Amount,
                                  i_Bank_Account_Id => i_Bank_Account_Id,
                                  i_Paid_Date       => i_Paid_Date,
                                  i_Paid            => i_Paid,
                                  i_Note            => i_Note);
  
    Fazo.Push(p_Advance.Employee_Ids, i_Employee_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  ) is
  begin
    o_Sales_Bonus_Payment.Company_Id      := i_Company_Id;
    o_Sales_Bonus_Payment.Filial_Id       := i_Filial_Id;
    o_Sales_Bonus_Payment.Payment_Id      := i_Payment_Id;
    o_Sales_Bonus_Payment.Payment_Number  := i_Payment_Number;
    o_Sales_Bonus_Payment.Payment_Date    := i_Payment_Date;
    o_Sales_Bonus_Payment.Payment_Name    := i_Payment_Name;
    o_Sales_Bonus_Payment.Begin_Date      := i_Begin_Date;
    o_Sales_Bonus_Payment.End_Date        := i_End_Date;
    o_Sales_Bonus_Payment.Division_Id     := i_Division_Id;
    o_Sales_Bonus_Payment.Job_Id          := i_Job_Id;
    o_Sales_Bonus_Payment.Bonus_Type      := i_Bonus_Type;
    o_Sales_Bonus_Payment.Payment_Type    := i_Payment_Type;
    o_Sales_Bonus_Payment.Cashbox_Id      := i_Cashbox_Id;
    o_Sales_Bonus_Payment.Bank_Account_Id := i_Bank_Account_Id;
    o_Sales_Bonus_Payment.Note            := i_Note;
  
    o_Sales_Bonus_Payment.Operations := Hpr_Pref.Sales_Bonus_Payment_Operation_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  ) is
    v_Operation Hpr_Pref.Sales_Bonus_Payment_Operation_Rt;
  begin
    v_Operation.Operation_Id  := i_Operation_Id;
    v_Operation.Staff_Id      := i_Staff_Id;
    v_Operation.Period_Begin  := i_Period_Begin;
    v_Operation.Period_End    := i_Period_End;
    v_Operation.Bonus_Type    := i_Bonus_Type;
    v_Operation.Job_Id        := i_Job_Id;
    v_Operation.Percentage    := i_Percentage;
    v_Operation.Periods       := i_Periods;
    v_Operation.Sales_Amounts := i_Sales_Amounts;
    v_Operation.Amounts       := i_Amounts;
  
    p_Sales_Bonus_Payment.Operations.Extend;
    p_Sales_Bonus_Payment.Operations(p_Sales_Bonus_Payment.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number is
    --------------------------------------------------
    Function Load_Setting(i_Code varchar2) return Array_Number is
      v_Ids varchar2(4000) := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Code       => i_Code);
    begin
      if v_Ids is null then
        return Array_Number();
      end if;
    
      return Fazo.To_Array_Number(Fazo.Split(v_Ids, Href_Pref.c_Settings_Separator));
    end;
  
  begin
    return Load_Setting(Hpr_Pref.c_Pref_Allow_Other_Currencies);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Hpr_Pref.c_Pref_Use_Subfilial_Settings),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpr_Timesheet_Locks w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Timesheet_Date >= i_Period_Begin
       and w.Timesheet_Date <= i_Period_End
       and (i_Timebook_Id is null or w.Timebook_Id <> i_Timebook_Id)
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2 is
  begin
    select Greatest(w.Period_Begin, i_Period_Begin), Least(w.Period_End, i_Period_End)
      into o_Period_Begin, o_Period_End
      from Hpr_Sales_Bonus_Payment_Operations w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and Greatest(w.Period_Begin, i_Period_Begin) <= Least(w.Period_End, i_Period_End)
       and (i_Payment_Id is null or w.Payment_Id <> i_Payment_Id)
       and exists (select 1
              from Hpr_Sales_Bonus_Payments p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Payment_Id = w.Payment_Id
               and p.Posted = 'Y')
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Sales_Bonus_Payments,
                                 i_Source_Id    => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Oper_Group_Id
      into result
      from Hpr_Oper_Groups
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Book_Type_Id
      into result
      from Hpr_Book_Types
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  -- execution plan algorithm should be added and taken into account
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number is
    v_Formula varchar2(32767) := i_Formula;
    result    number;
  begin
    for i in 1 .. i_Arguments.Count
    loop
      v_Formula := Regexp_Replace(v_Formula,
                                  '(\W|^)' || i_Arguments(i) (1) || '(\W|$)',
                                  '\1to_number(' || i_Arguments(i) (2) || ')\2');
    end loop;
  
    execute immediate 'begin :result := ' || v_Formula || '; end;'
      using out result;
  
    return result;
  exception
    when others then
      b.Raise_Error('execution error: ' || Fazo.Zip_Matrix(i_Arguments).Json);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2 is
    v_Pattern varchar2(20) := '[^-+*\/() ]+';
    result    Array_Varchar2 := Array_Varchar2();
  begin
    Result.Extend(Regexp_Count(i_Formula, v_Pattern));
  
    for i in 1 .. Result.Count
    loop
      result(i) := Regexp_Substr(i_Formula, v_Pattern, 1, i);
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2 is
    v_Company_Head   number := Md_Pref.c_Company_Head;
    v_Identifiers    Array_Varchar2;
    v_New_Identifier Href_Indicators.Identifier%type;
    result           Hpr_Oper_Types.Estimation_Formula%type := i_Formula;
  begin
    if i_Formula is null then
      return null;
    end if;
  
    v_Identifiers := Hpr_Util.Formula_Variables(result);
  
    Fazo.Sort_Desc(v_Identifiers);
  
    for i in 1 .. v_Identifiers.Count
    loop
      select q.Identifier
        into v_New_Identifier
        from Href_Indicators q
       where q.Company_Id = i_Company_Id
         and q.Pcode = (select w.Pcode
                          from Href_Indicators w
                         where w.Company_Id = v_Company_Head
                           and w.Identifier = v_Identifiers(i));
    
      result := Regexp_Replace(result,
                               '(\W|^)' || v_Identifiers(i) || '(\W|$)',
                               '\1' || v_New_Identifier || '\2');
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2 is
    v_Indicator_Id number;
    v_Variables    Array_Varchar2;
    result         Matrix_Varchar2 := Matrix_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select t.Indicator_Id
          into v_Indicator_Id
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      
        Fazo.Push(result, Array_Varchar2(v_Indicator_Id, v_Variables(i)));
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2 is
    v_Dummy     varchar2(1);
    v_Variables Array_Varchar2;
    v_Arguments Matrix_Varchar2;
    result      Array_Varchar2 := Array_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select 'x'
          into v_Dummy
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      exception
        when No_Data_Found then
          if not Fazo.Is_Number(v_Variables(i)) then
            Fazo.Push(result, t('could not find indicator by identifier $1', v_Variables(i)));
          end if;
      end;
    end loop;
  
    -- sorting desc
    select Array_Varchar2(Column_Value, 'null')
      bulk collect
      into v_Arguments
      from table(v_Variables)
     order by Length(Column_Value) desc;
  
    if Result.Count = 0 then
      begin
        v_Dummy := Formula_Execute(i_Formula => i_Formula, i_Arguments => v_Arguments);
      exception
        when others then
          Fazo.Push(result, t('an error occurred while validating a formula calculation'));
      end;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hpr_Pref.c_Overtime_Coef),
               Hpr_Pref.c_Overtime_Coef_Default);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Indicator_Id number,
    i_Period       date
  ) return number is
    r_Charge        Hpr_Charges%rowtype;
    v_Wage_Scale_Id number;
    v_Rank_Id       number;
    result          number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Take(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Wage_Scale_Id := r_Charge.Wage_Scale_Id;
      v_Rank_Id       := r_Charge.Rank_Id;
    else
      v_Wage_Scale_Id := Hpd_Util.Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                            i_Filial_Id  => i_Filial_Id,
                                                            i_Staff_Id   => i_Staff_Id,
                                                            i_Period     => i_Period);
    
      v_Rank_Id := Hpd_Util.Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Period     => i_Period);
    end if;
  
    if v_Wage_Scale_Id is not null then
      result := Hrm_Util.Closest_Wage_Scale_Indicator_Value(i_Company_Id    => i_Company_Id,
                                                            i_Filial_Id     => i_Filial_Id,
                                                            i_Wage_Scale_Id => v_Wage_Scale_Id,
                                                            i_Indicator_Id  => i_Indicator_Id,
                                                            i_Period        => i_Period,
                                                            i_Rank_Id       => v_Rank_Id);
    else
      result := Hpd_Util.Get_Closest_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                     i_Filial_Id    => i_Filial_Id,
                                                     i_Staff_Id     => i_Staff_Id,
                                                     i_Indicator_Id => i_Indicator_Id,
                                                     i_Period       => i_Period);
    end if;
  
    return Nvl(result, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  -- calculate wage indicator by i_begin_date
  -- as wage on vacation is calculated by first day
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Charge_Id    => i_Charge_Id,
                                   i_Indicator_Id => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id, --
                                                                            i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                   i_Period       => i_Begin_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Period     => i_End_Date);
  
    return Nvl(r_Closest_Robot.Fte, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Charge Hpr_Charges%rowtype;
  
    v_Schedule_Id  number;
    v_Oper_Type_Id number;
  
    result number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Charge_Id  => i_Charge_Id);
    
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Staff_Id      => i_Staff_Id,
                                                        i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                         i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                        i_Period        => i_End_Date);
  
    return Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Staff_Id     => i_Staff_Id,
                            i_Oper_Type_Id => v_Oper_Type_Id,
                            i_Schedule_Id  => v_Schedule_Id,
                            i_Part_Begin   => i_Begin_Date,
                            i_Part_End     => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    return Htt_Util.Calc_Plan_Days(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Staff_Id    => i_Staff_Id,
                                   i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                   i_Period      => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    result := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Staff_Id    => i_Staff_Id,
                                         i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                         i_Period      => i_End_Date);
  
    return Nvl(Round(result / 60, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Working_Days(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Begin_Date => i_Begin_Date,
                                      i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    result := Htt_Util.Calc_Working_Seconds(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Begin_Date => i_Begin_Date,
                                            i_End_Date   => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    v_Seconds      number;
    result         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Seconds,
                                  o_Fact_Days    => result,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return result;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    result         number;
    v_Days         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => result,
                                  o_Fact_Days    => v_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Performance_Data
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date
  ) return Hper_Staff_Plans%rowtype is
    r_Charge        Hpr_Charges%rowtype;
    r_Staff_Plan    Hper_Staff_Plans%rowtype;
    v_Staff_Plan_Id number;
  
    --------------------------------------------------
    Function Get_Performance return Hper_Staff_Plans%rowtype is
    begin
      select q.*
        into r_Staff_Plan
        from Hper_Staff_Plans q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Month_Begin_Date = Trunc(i_Begin_Date, 'mon')
       order by Nvl((select h.Hiring_Date
                      from Hpd_Hirings h
                     where h.Company_Id = q.Company_Id
                       and h.Filial_Id = q.Filial_Id
                       and h.Page_Id = q.Journal_Page_Id
                       and h.Hiring_Date <= i_Begin_Date),
                    (select h.Transfer_Begin
                       from Hpd_Transfers h
                      where h.Company_Id = q.Company_Id
                        and h.Filial_Id = q.Filial_Id
                        and h.Page_Id = q.Journal_Page_Id
                        and h.Transfer_Begin <= i_Begin_Date)) desc nulls last
       fetch first row only;
    
      return r_Staff_Plan;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Charge_Id is null then
      return Get_Performance;
    end if;
  
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    select q.Staff_Plan_Id
      into v_Staff_Plan_Id
      from Hper_Staff_Plan_Intervals q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = r_Charge.Interval_Id;
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => v_Staff_Plan_Id);
  
    return r_Staff_Plan;
  exception
    when No_Data_Found then
      return null;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Timeoff_Id number;
    result       number;
  begin
    begin
      select q.Timeoff_Id
        into v_Timeoff_Id
        from Hpd_Timeoff_Intervals q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Interval_Id = (select w.Interval_Id
                                from Hpr_Charges w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Charge_Id = i_Charge_Id);
    exception
      when No_Data_Found then
        return 0;
    end;
  
    result := z_Hpd_Sick_Leaves.Take( --
              i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Timeoff_Id => v_Timeoff_Id).Coefficient;
  
    return Nvl(result, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Days number;
  begin
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return Nvl((i_End_Date - i_Begin_Date + 1) - v_Fact_Days, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Begin_Date => i_Begin_Date,
                                       i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Working_Days number;
    v_Fact_Days    number;
  begin
    v_Working_Days := Calc_Working_Days_Indicator(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Charge_Id  => i_Charge_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return v_Working_Days - v_Fact_Days;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_First_Day  date := Trunc(i_Begin_Date, 'y');
    v_Last_Day   date := Add_Months(v_First_Day, 12) - 1;
    v_Days_Count number := v_Last_Day - v_First_Day + 1;
  
    v_Default_Calendar_Id      number;
    v_Official_Rest_Days_Count number;
  begin
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                                    i_Filial_Id   => i_Filial_Id,
                                                                    i_Calendar_Id => v_Default_Calendar_Id,
                                                                    i_Begin_Date  => v_First_Day,
                                                                    i_End_Date    => v_Last_Day);
  
    return Nvl(Round((v_Days_Count - v_Official_Rest_Days_Count) / 12, 1), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Seconds number;
    v_Fact_Days    number;
  begin
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Fact_Seconds,
                                  o_Fact_Days    => v_Fact_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime),
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Round(v_Fact_Seconds / 3600, 2);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Load_Overtime_Coef(i_Company_Id);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Policy_Id   number;
    v_Division_Id number;
    result        number;
  begin
    v_Division_Id := Hpd_Util.Get_Closest_Division_Id(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Period     => i_End_Date);
  
    return Round(Calc_Additional_Nighttime_Amount(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Staff_Id    => i_Staff_Id,
                                                  i_Division_Id => v_Division_Id,
                                                  i_Begin_Date  => i_Begin_Date,
                                                  i_End_Date    => i_End_Date) / 3600,
                 2);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Round(Htt_Util.Calc_Weighted_Turnout_Seconds(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Begin_Date => i_Begin_Date,
                                                        i_End_Date   => i_End_Date) / 3600,
                 2);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Code_Gen
  (
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return varchar2 is
  begin
    if i_Charge_Id is not null then
      return i_Charge_Id;
    end if;
  
    return i_Staff_Id || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_Begin_Date, Href_Pref.c_Date_Format_Day) || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_End_Date, Href_Pref.c_Date_Format_Day);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_Indicators
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Charge_Id     number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Penalty_Pcode varchar2
  ) return number is
    r_Charge      Hpr_Charges%rowtype;
    v_Hourly_Wage number := 0;
    v_Division_Id number;
    v_Schedule_Id number;
    v_Code        varchar(50);
  
    v_Oper_Type_Ids Array_Number;
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Division_Id := r_Charge.Division_Id;
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Division_Id := Hpd_Util.Get_Closest_Division_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Ids := Hpd_Util.Get_Closest_Oper_Type_Ids(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                          i_Period        => i_End_Date);
  
    for i in 1 .. v_Oper_Type_Ids.Count
    loop
      v_Hourly_Wage := v_Hourly_Wage +
                       Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Ids(i),
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => i_Begin_Date,
                                        i_Part_End     => i_End_Date);
    end loop;
  
    Calc_Penalty_Amounts(o_Late_Amount      => g_Cache_Late_Amount(v_Code),
                         o_Early_Amount     => g_Cache_Early_Amount(v_Code),
                         o_Lack_Amount      => g_Cache_Lack_Amount(v_Code),
                         o_Day_Skip_Amount  => g_Cache_Day_Skip_Amount(v_Code),
                         o_Mark_Skip_Amount => g_Cache_Mark_Skip_Amount(v_Code),
                         i_Company_Id       => i_Company_Id,
                         i_Filial_Id        => i_Filial_Id,
                         i_Staff_Id         => i_Staff_Id,
                         i_Division_Id      => v_Division_Id,
                         i_Hourly_Wage      => v_Hourly_Wage,
                         i_Period_Begin     => i_Begin_Date,
                         i_Period_End       => i_End_Date);
  
    case i_Penalty_Pcode
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then
        return g_Cache_Late_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then
        return g_Cache_Early_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then
        return g_Cache_Lack_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then
        return g_Cache_Day_Skip_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then
        return g_Cache_Mark_Skip_Amount(v_Code);
      else
        return null;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Late_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Late);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Early_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Lack_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Absence);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Day_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Mark_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Procedures(i_Pcode varchar2) return varchar2 is
  begin
    return --
    case i_Pcode --
    when Href_Pref.c_Pcode_Indicator_Wage then 'hpr_util.calc_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Rate then 'hpr_util.calc_rate_indicator' --
    when Href_Pref.c_Pcode_Indicator_Hourly_Wage then 'hpr_util.calc_hourly_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Days then 'hpr_util.calc_plan_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Hours then 'hpr_util.calc_plan_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Days then 'hpr_util.calc_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Hours then 'hpr_util.calc_working_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Days then 'hpr_util.calc_fact_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Hours then 'hpr_util.calc_fact_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Bonus then 'hpr_util.calc_perf_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Bonus then 'hpr_util.calc_perf_extra_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Coefficient then 'hpr_util.calc_sick_leave_coefficient_indicator' --
    when Href_Pref.c_Pcode_Indicator_Business_Trip_Days then 'hpr_util.calc_business_trip_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Vacation_Days then 'hpr_util.calc_vacation_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Mean_Working_Days then 'hpr_util.calc_mean_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Days then 'hpr_util.calc_sick_leave_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Hours then 'hpr_util.calc_overtime_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Coef then 'hpr_util.calc_overtime_coef_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then 'hpr_util.calc_penalty_for_late_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then 'hpr_util.calc_penalty_for_early_output_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then 'hpr_util.calc_penalty_for_absence_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then 'hpr_util.calc_penalty_for_day_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then 'hpr_util.calc_penalty_for_mark_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Penalty then 'hpr_util.calc_perf_penalty_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty then 'hpr_util.calc_perf_extra_penalty_indicator' --
    when Href_Pref.c_Pcode_Indicator_Additional_Nighttime then 'hpr_util.calc_additional_nighttime_indicator' --
    when Href_Pref.c_Pcode_Indicator_Weighted_Turnout then 'hpr_util.calc_weighted_turnout_indicator' --
    else null end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number
  ) return number is
    v_Proc      varchar2(100);
    r_Indicator Href_Indicators%rowtype;
    result      number;
  
    --------------------------------------------------
    Function Convert_Indicator_Amount
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Staff_Id   number,
      i_Indicator  Href_Indicators%rowtype,
      i_Period     date,
      i_Amount     number
    ) return number is
      v_Currency_Id number;
    begin
      if i_Indicator.Used != Href_Pref.c_Indicator_Used_Constantly and
         i_Indicator.Pcode not in
         (Href_Pref.c_Pcode_Indicator_Perf_Penalty, Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty) then
        return i_Amount;
      end if;
    
      v_Currency_Id := Hpd_Util.Get_Closest_Currency_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_Period);
    
      if v_Currency_Id is null then
        return i_Amount;
      end if;
    
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Period,
                                      i_Amount      => i_Amount);
    end;
  begin
    r_Indicator := z_Href_Indicators.Load(i_Company_Id   => i_Company_Id, --
                                          i_Indicator_Id => i_Indicator_Id);
  
    v_Proc := Indicator_Procedures(r_Indicator.Pcode);
  
    if v_Proc is not null then
      execute immediate 'declare begin :result := ' || v_Proc ||
                        '(:company_id, :filial_id, :staff_id, :charge_id, :begin_date, :end_date); end;'
        using out result, i_Company_Id, i_Filial_Id, i_Staff_Id, i_Charge_Id, i_Begin_Date, i_End_Date;
    else
      result := Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Charge_Id    => i_Charge_Id,
                                        i_Indicator_Id => i_Indicator_Id,
                                        i_Period       => i_End_Date);
    end if;
  
    result := Convert_Indicator_Amount(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Indicator  => r_Indicator,
                                       i_Period     => i_End_Date,
                                       i_Amount     => result);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number is
    v_Monthly_Amount  number;
    v_Monthly_Minutes number;
  begin
    v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Oper_Type_Id => i_Oper_Type_Id,
                                    i_Part_Begin   => i_Part_Begin,
                                    i_Part_End     => i_Part_End,
                                    i_Calc_Planned => true);
  
    v_Monthly_Minutes := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => i_Schedule_Id,
                                                    i_Period      => i_Part_End);
  
    return v_Monthly_Amount / v_Monthly_Minutes * 60;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    r_Charge    Hpr_Charges%rowtype;
    v_Arguments Matrix_Varchar2;
  begin
    r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Charge_Id  => i_Charge_Id);
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => r_Charge.Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    select Array_Varchar2(w.Identifier, q.Indicator_Value)
      bulk collect
      into v_Arguments
      from Hpr_Charge_Indicators q
      join Href_Indicators w
        on w.Company_Id = q.Company_Id
       and w.Indicator_Id = q.Indicator_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Charge_Id = i_Charge_Id
     order by Length(w.Identifier) desc;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount_With_Indicators
  (
    o_Indicators   out Hpr_Pref.Daily_Indicators_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    v_Arguments Matrix_Varchar2 := Matrix_Varchar2();
  
    v_Indicator_Id    number;
    v_Indicator_Value number;
  
    v_Fact_Hours_Id     number := -1;
    v_Weighted_Hours_Id number := -1;
    v_Fact_Days_Id      number := -1;
    v_Plan_Hours_Id     number := -1;
    v_Plan_Days_Id      number := -1;
    v_Worked_Hours_Id   number := -1;
    v_Worked_Days_Id    number := -1;
  
    --------------------------------------------------
    Procedure Load_Indicator_Ids is
    begin
      v_Fact_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Hours);
    
      v_Weighted_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Href_Pref.c_Pcode_Indicator_Weighted_Turnout);
    
      v_Fact_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Days);
    
      if i_Calc_Planned then
        v_Plan_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Hours);
      
        v_Plan_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                 i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Days);
      end if;
    
      if i_Calc_Worked then
        v_Worked_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Hours);
      
        v_Worked_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Days);
      end if;
    end;
  
    --------------------------------------------------
    Function Replaced_Indicator_Id(i_Indicator_Id number) return number is
    begin
      case
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Planned then
          return v_Plan_Hours_Id;
        when i_Indicator_Id = v_Weighted_Hours_Id and i_Calc_Planned then
          return v_Plan_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Planned then
          return v_Plan_Days_Id;
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Worked then
          return v_Worked_Hours_Id;
        when i_Indicator_Id = v_Weighted_Hours_Id and i_Calc_Worked then
          return v_Worked_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Worked then
          return v_Worked_Days_Id;
        else
          null;
      end case;
    
      return i_Indicator_Id;
    end;
  begin
    if i_Oper_Type_Id is null then
      return 0;
    end if;
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    if i_Calc_Planned or i_Calc_Worked then
      Load_Indicator_Ids;
    end if;
  
    o_Indicators := Hpr_Pref.Daily_Indicators_Nt();
  
    for r in (select q.Indicator_Id, q.Identifier
                from Hpr_Oper_Type_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Oper_Type_Id = i_Oper_Type_Id)
    loop
      v_Indicator_Id := r.Indicator_Id;
    
      if (i_Calc_Planned or i_Calc_Worked) and
         v_Indicator_Id in (v_Fact_Hours_Id, v_Fact_Days_Id, v_Weighted_Hours_Id) then
        v_Indicator_Id := Replaced_Indicator_Id(v_Indicator_Id);
      end if;
    
      v_Indicator_Value := Calc_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                i_Filial_Id    => i_Filial_Id,
                                                i_Staff_Id     => i_Staff_Id,
                                                i_Charge_Id    => null,
                                                i_Begin_Date   => i_Part_Begin,
                                                i_End_Date     => i_Part_End,
                                                i_Indicator_Id => v_Indicator_Id);
    
      Fazo.Push(v_Arguments, Array_Varchar2(r.Identifier, v_Indicator_Value));
    
      o_Indicators.Extend;
      o_Indicators(o_Indicators.Count) := Hpr_Pref.Daily_Indicators_Rt(r.Indicator_Id,
                                                                       v_Indicator_Value);
    end loop;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number is
    v_Dummy Hpr_Pref.Daily_Indicators_Nt;
  begin
    return Calc_Amount_With_Indicators(o_Indicators   => v_Dummy,
                                       i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Staff_Id     => i_Staff_Id,
                                       i_Oper_Type_Id => i_Oper_Type_Id,
                                       i_Part_Begin   => i_Part_Begin,
                                       i_Part_End     => i_Part_End,
                                       i_Calc_Planned => i_Calc_Planned,
                                       i_Calc_Worked  => i_Calc_Worked);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  ) is
    r_Oper_Type   Mpr_Oper_Types%rowtype;
    r_Setting     Mpr_Settings%rowtype;
    v_Currency_Id number := i_Currency_Id;
    --------------------------------------------------
    Function Round_Amount(i_Val number) return number is
    begin
      return Mk_Util.Round_Amount(i_Company_Id  => i_Company_Id,
                                  i_Currency_Id => v_Currency_Id,
                                  i_Amount      => i_Val);
    end;
    --------------------------------------------------
    Function Calc_Base_Amount(i_Val number) return number is
    begin
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Date,
                                      i_Amount      => i_Val);
    end;
  begin
    r_Oper_Type := z_Mpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    r_Setting := z_Mpr_Settings.Load(i_Company_Id => i_Company_Id, --
                                     i_Filial_Id  => i_Filial_Id);
  
    if i_Currency_Id is null then
      v_Currency_Id := Mk_Pref.Base_Currency(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    o_Amount                 := Round_Amount(i_Amount);
    o_Net_Amount             := Round_Amount(i_Amount);
    o_Income_Tax_Amount      := 0;
    o_Pension_Payment_Amount := 0;
    o_Social_Payment_Amount  := 0;
  
    if r_Setting.Income_Tax_Exists = 'Y' and r_Oper_Type.Income_Tax_Exists = 'Y' then
      if i_Is_Net_Amount then
        o_Amount := Round_Amount(o_Net_Amount * 100 /
                                 (100 - Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate)));
      else
        o_Net_Amount := o_Amount -
                        Round_Amount(o_Amount *
                                     Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate) / 100);
      end if;
    
      o_Income_Tax_Amount := Round_Amount((o_Amount * Nvl(r_Oper_Type.Income_Tax_Rate,
                                                          r_Setting.Income_Tax_Rate) / 100));
    
      if r_Setting.Pension_Payment_Exists = 'Y' and r_Oper_Type.Pension_Payment_Exists = 'Y' then
        o_Pension_Payment_Amount := Round_Amount((o_Amount *
                                                 Nvl(r_Oper_Type.Pension_Payment_Rate,
                                                      r_Setting.Pension_Payment_Rate) / 100));
      
      end if;
    end if;
  
    if r_Setting.Social_Payment_Exists = 'Y' and r_Oper_Type.Social_Payment_Exists = 'Y' then
      o_Social_Payment_Amount := Round_Amount((o_Amount *
                                              Nvl(r_Oper_Type.Social_Payment_Rate,
                                                   r_Setting.Social_Payment_Rate) / 100));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates penalty for (begin, end) period
  -- ignores policy changes between (begin, end)
  -- takes policy closest to period_begin date
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Late_Id        number;
    v_Early_Id       number;
    v_Lack_Id        number;
    v_Time_Kind_Id   number;
    v_Penalty_Id     number;
    v_Days_Cnt       number;
    v_Penalty_Amount number;
    v_Policy         Hpr_Pref.Penalty_Policy_Rt;
    v_Policies       Hpr_Pref.Penalty_Policy_Nt;
  
    v_Fact_Tk_Id    number;
    v_Fact_Value    number;
    v_Plan_Time     number;
    v_Input_Time    date;
    v_Output_Time   date;
    v_Input_Times   Array_Date;
    v_Output_Times  Array_Date;
    v_Fact_Date     date;
    v_Fact_Dates    Array_Date;
    v_Mark_Dates    Array_Date;
    v_Skipped_Marks Array_Number;
    v_Facts         Matrix_Number;
  
    v_Wage_Per_Minute number := i_Hourly_Wage / 60;
  
    --------------------------------------------------
    Procedure Init_Day_Amounts is
      v_Count number;
    begin
      o_Day_Amounts := Matrix_Number();
      v_Count       := i_Period_End - Trunc(i_Period_Begin, 'Mon') + 1;
    
      o_Day_Amounts.Extend(v_Count);
    
      for i in 1 .. v_Count
      loop
        o_Day_Amounts(i) := Array_Number(0, 0, 0, 0, 0);
      end loop;
    end;
  
    --------------------------------------------------
    Function Day_Index(i_Date date) return number is
    begin
      return i_Date - Trunc(i_Period_Begin, 'Mon') + 1;
    end;
  
    --------------------------------------------------
    Function To_Minutes(i_Sec number) return number is
    begin
      return Round(i_Sec / 60, 2);
    end;
  
    --------------------------------------------------
    Function Get_Tk_Id(i_Penalty_Kind varchar2) return number is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          return v_Late_Id;
        when Hpr_Pref.c_Penalty_Kind_Early then
          return v_Early_Id;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          return v_Lack_Id;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          return v_Lack_Id;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Function Calc_Amount
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Wage_Per_Minute number,
      i_Facts_Value     number
    ) return number is
      v_Calc_After_From_Time boolean := Nvl(i_Policy.Calc_After_From_Time, 'N') = 'Y';
    begin
      case i_Policy.Penalty_Type
        when Hpr_Pref.c_Penalty_Type_Coef then
          if v_Calc_After_From_Time then
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value - i_Policy.From_Time) * i_Policy.Penalty_Coef;
          else
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value) * i_Policy.Penalty_Coef;
          end if;
        when Hpr_Pref.c_Penalty_Type_Amount then
          if i_Policy.Penalty_Per_Time is null then
            return i_Policy.Penalty_Amount;
          else
            if v_Calc_After_From_Time then
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value - i_Policy.From_Time) /
                                                     i_Policy.Penalty_Per_Time);
            else
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value) /
                                                     i_Policy.Penalty_Per_Time);
            end if;
          end if;
        when Hpr_Pref.c_Penalty_Type_Time then
          return i_Wage_Per_Minute * i_Policy.Penalty_Time;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Penalty_Amount  number,
      i_Day_Index       number,
      p_Late_Amount     in out number,
      p_Early_Amount    in out number,
      p_Lack_Amount     in out number,
      p_Day_Skip_Amount in out number
    ) is
    begin
      case i_Policy.Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          p_Late_Amount := p_Late_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(1) := o_Day_Amounts(i_Day_Index) (1) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Early then
          p_Early_Amount := p_Early_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(2) := o_Day_Amounts(i_Day_Index) (2) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          p_Lack_Amount := p_Lack_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(3) := o_Day_Amounts(i_Day_Index) (3) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          p_Day_Skip_Amount := p_Day_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(4) := o_Day_Amounts(i_Day_Index) (4) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Penalty_Kind     varchar2,
      i_Penalty_Amount   number,
      i_Day_Index        number,
      p_Mark_Skip_Amount in out number
    ) is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Mark_Skip then
          p_Mark_Skip_Amount := p_Mark_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(5) := o_Day_Amounts(i_Day_Index) (5) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  begin
    o_Late_Amount      := 0;
    o_Early_Amount     := 0;
    o_Lack_Amount      := 0;
    o_Day_Skip_Amount  := 0;
    o_Mark_Skip_Amount := 0;
  
    v_Late_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late);
  
    v_Early_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                        i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early);
  
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Penalty_Id := Get_Closest_Penalty_Id(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Division_Id => i_Division_Id,
                                           i_Period      => i_Period_Begin);
  
    select Pp.Penalty_Kind,
           case
              when Pp.Penalty_Coef is not null then
               Hpr_Pref.c_Penalty_Type_Coef
              when Pp.Penalty_Amount is not null then
               Hpr_Pref.c_Penalty_Type_Amount
              when Pp.Penalty_Time is not null then
               Hpr_Pref.c_Penalty_Type_Time
            end case,
           Pp.From_Day,
           Pp.To_Day,
           Pp.From_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.To_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.Penalty_Coef,
           Pp.Penalty_Per_Time,
           Pp.Penalty_Amount,
           Pp.Penalty_Time,
           Pp.Calc_After_From_Time
      bulk collect
      into v_Policies
      from Hpr_Penalty_Policies Pp
     where Pp.Company_Id = i_Company_Id
       and Pp.Filial_Id = i_Filial_Id
       and Pp.Penalty_Id = v_Penalty_Id;
  
    select p.Timesheet_Date, --
           p.Input_Time, --
           p.Output_Time, --
           Array_Number(Tf.Time_Kind_Id, Tf.Fact_Value, p.Plan_Time)
      bulk collect
      into v_Fact_Dates, v_Input_Times, v_Output_Times, v_Facts
      from Htt_Timesheets p
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = p.Company_Id
       and Tf.Filial_Id = p.Filial_Id
       and Tf.Timesheet_Id = p.Timesheet_Id
       and Tf.Time_Kind_Id in (v_Late_Id, v_Early_Id, v_Lack_Id)
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between Trunc(i_Period_Begin, 'Mon') and i_Period_End
     order by p.Timesheet_Date, Tf.Time_Kind_Id;
  
    select p.Planned_Marks - p.Done_Marks, p.Timesheet_Date
      bulk collect
      into v_Skipped_Marks, v_Mark_Dates
      from Htt_Timesheets p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between i_Period_Begin and i_Period_End
       and p.Day_Kind = Htt_Pref.c_Day_Kind_Work
       and p.Planned_Marks > p.Done_Marks;
  
    Init_Day_Amounts;
  
    for i in 1 .. v_Policies.Count
    loop
      v_Policy := v_Policies(i);
    
      v_Days_Cnt := 0;
    
      if v_Policy.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
        for j in 1 .. v_Skipped_Marks.Count
        loop
          if v_Skipped_Marks(j) > v_Policy.From_Time and --
             v_Skipped_Marks(j) <= Nvl(v_Policy.To_Time, v_Skipped_Marks(j)) then
            Add_Amounts(i_Penalty_Kind     => v_Policy.Penalty_Kind,
                        i_Penalty_Amount   => v_Policy.Penalty_Amount,
                        i_Day_Index        => Day_Index(v_Mark_Dates(j)),
                        p_Mark_Skip_Amount => o_Mark_Skip_Amount);
          end if;
        end loop;
      else
        v_Time_Kind_Id := Get_Tk_Id(v_Policy.Penalty_Kind);
      
        for j in 1 .. v_Facts.Count
        loop
          v_Fact_Tk_Id  := v_Facts(j) (1);
          v_Fact_Value  := v_Facts(j) (2);
          v_Plan_Time   := v_Facts(j) (3);
          v_Input_Time  := v_Input_Times(j);
          v_Output_Time := v_Output_Times(j);
          v_Fact_Date   := v_Fact_Dates(j);
        
          continue when v_Fact_Tk_Id <> v_Time_Kind_Id;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Input_Time is not null and v_Output_Time is not null;
        
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Day_Skip;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value <> v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Lack;
        
          if v_Fact_Value > v_Policy.From_Time and
             v_Fact_Value <= Nvl(v_Policy.To_Time, v_Fact_Value) then
            v_Days_Cnt := v_Days_Cnt + 1;
          
            if v_Fact_Date between i_Period_Begin and i_Period_End then
              v_Penalty_Amount := Calc_Amount(i_Policy          => v_Policy,
                                              i_Wage_Per_Minute => v_Wage_Per_Minute,
                                              i_Facts_Value     => v_Fact_Value);
            
              if v_Days_Cnt > v_Policy.From_Day and --
                 v_Days_Cnt <= Nvl(v_Policy.To_Day, v_Days_Cnt) then
                Add_Amounts(i_Policy          => v_Policy,
                            i_Penalty_Amount  => v_Penalty_Amount,
                            i_Day_Index       => Day_Index(v_Fact_Date),
                            p_Late_Amount     => o_Late_Amount,
                            p_Early_Amount    => o_Early_Amount,
                            p_Lack_Amount     => o_Lack_Amount,
                            p_Day_Skip_Amount => o_Day_Skip_Amount);
              end if;
            end if;
          end if;
        end loop;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number is
    v_Dummy_Late      number;
    v_Dummy_Early     number;
    v_Dummy_Lack      number;
    v_Dummy_Day_Skip  number;
    v_Dummy_Mark_Skip number;
    v_Daily_Amounts   Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => v_Dummy_Late,
                        o_Early_Amount     => v_Dummy_Early,
                        o_Lack_Amount      => v_Dummy_Lack,
                        o_Day_Skip_Amount  => v_Dummy_Day_Skip,
                        o_Mark_Skip_Amount => v_Dummy_Mark_Skip,
                        o_Day_Amounts      => v_Daily_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  
    return v_Daily_Amounts;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Nighttime_Policy_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number is
    v_Policy_Id number;
  begin
    select q.Nighttime_Policy_Id
      into v_Policy_Id
      from Hpr_Nighttime_Policies q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Month = (select max(p.Month)
                        from Hpr_Nighttime_Policies p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Month <= Trunc(i_Period, 'mon')
                         and p.Division_Id = i_Division_Id
                         and p.State = 'A')
       and q.Division_Id = i_Division_Id
       and q.State = 'A';
  
    return v_Policy_Id;
  
  exception
    when No_Data_Found then
      begin
        select q.Nighttime_Policy_Id
          into v_Policy_Id
          from Hpr_Nighttime_Policies q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Month = (select max(p.Month)
                            from Hpr_Nighttime_Policies p
                           where p.Company_Id = i_Company_Id
                             and p.Filial_Id = i_Filial_Id
                             and p.Month <= Trunc(i_Period, 'mon')
                             and p.Division_Id is null
                             and p.State = 'A')
           and q.Division_Id is null
           and q.State = 'A';
      
        return v_Policy_Id;
      
      exception
        when No_Data_Found then
          return null;
      end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Amount
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Division_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Policy_Id number;
    result      number;
  begin
    v_Policy_Id := Get_Closest_Nighttime_Policy_Id(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Division_Id => i_Division_Id,
                                                   i_Period      => i_End_Date);
  
    select Nvl(sum((t.Nighttime_Coef - 1) *
                   Round(86400 * (t.Intersection_End - t.Intersection_Begin), 2)),
               0)
      into result
      from (select Nr.Nighttime_Coef,
                   Least(i.Interval_End, t.Interval_Date + Numtodsinterval(Nr.End_Time, 'minute')) Intersection_End,
                   Greatest(i.Interval_Begin,
                            t.Interval_Date + Numtodsinterval(Nr.Begin_Time, 'minute')) Intersection_Begin
              from Htt_Timesheets q
              join Htt_Timesheet_Helpers t
                on t.Company_Id = q.Company_Id
               and t.Filial_Id = q.Filial_Id
               and t.Timesheet_Id = q.Timesheet_Id
              join Htt_Timesheet_Intervals i
                on i.Company_Id = q.Company_Id
               and i.Filial_Id = q.Filial_Id
               and i.Timesheet_Id = q.Timesheet_Id
              join Hpr_Nighttime_Rules Nr
                on Nr.Company_Id = q.Company_Id
               and Nr.Filial_Id = q.Filial_Id
               and Nr.Nighttime_Policy_Id = v_Policy_Id
               and Greatest(t.Interval_Date + Numtodsinterval(Nr.Begin_Time, 'minute'),
                            i.Interval_Begin) <
                   Least(t.Interval_Date + Numtodsinterval(Nr.End_Time, 'minute'), i.Interval_End)
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Staff_Id = i_Staff_Id
               and q.Timesheet_Date between i_Begin_Date and i_End_Date) t;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Dummy_Amounts Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => o_Late_Amount,
                        o_Early_Amount     => o_Early_Amount,
                        o_Lack_Amount      => o_Lack_Amount,
                        o_Day_Skip_Amount  => o_Day_Skip_Amount,
                        o_Mark_Skip_Amount => o_Mark_Skip_Amount,
                        o_Day_Amounts      => v_Dummy_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt is
    v_Overtime_Type_Id  number;
    v_Nighttime_Type_Id number;
    v_Weighted_Type_Id  number;
    v_Oper_Type_Id      number;
    v_Oper_Group_Id     number;
    v_Schedule_Id       number;
    v_Monthly_Amount    number;
    v_Plan_Amount       number;
    v_Wage_Amount       number;
    v_Overtime_Amount   number;
    v_Nighttime_Amount  number;
    v_Late_Amount       number;
    v_Early_Amount      number;
    v_Lack_Amount       number;
    v_Day_Skip_Amount   number;
    v_Mark_Skip_Amount  number;
    v_Hourly_Wage       number;
    r_Robot             Hpd_Trans_Robots%rowtype;
    v_Trans_Parts       Hpd_Pref.Transaction_Part_Nt;
    v_Sheet_Parts       Hpr_Pref.Sheet_Part_Nt := Hpr_Pref.Sheet_Part_Nt();
  begin
    v_Oper_Group_Id := Oper_Group_Id(i_Company_Id => i_Company_Id,
                                     i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_Overtime_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Overtime);
  
    v_Nighttime_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                                 i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Nighttime);
  
    v_Trans_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                           i_Filial_Id       => i_Filial_Id,
                                                           i_Staff_Id        => i_Staff_Id,
                                                           i_Begin_Date      => i_Period_Begin,
                                                           i_End_Date        => i_Period_End,
                                                           i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                               Hpd_Pref.c_Transaction_Type_Operation,
                                                                                               Hpd_Pref.c_Transaction_Type_Schedule),
                                                           i_With_Wage_Scale => false);
  
    for i in 1 .. v_Trans_Parts.Count
    loop
      v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => v_Oper_Group_Id,
                                                          i_Period        => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Oper_Type_Id is null;
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Schedule_Id is null;
    
      continue when Htt_Util.Has_Undefined_Schedule(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => v_Schedule_Id,
                                                    i_Period      => v_Trans_Parts(i).Part_Begin);
    
      v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                      i_Filial_Id    => i_Filial_Id,
                                      i_Staff_Id     => i_Staff_Id,
                                      i_Oper_Type_Id => v_Oper_Type_Id,
                                      i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                      i_Part_End     => v_Trans_Parts(i).Part_End,
                                      i_Calc_Planned => true);
    
      v_Plan_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End,
                                   i_Calc_Worked  => true);
    
      v_Wage_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Overtime_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Staff_Id     => i_Staff_Id,
                                       i_Oper_Type_Id => v_Overtime_Type_Id,
                                       i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                       i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Nighttime_Amount := Hpr_Util.Calc_Amount(i_Company_Id   => i_Company_Id,
                                                 i_Filial_Id    => i_Filial_Id,
                                                 i_Staff_Id     => i_Staff_Id,
                                                 i_Oper_Type_Id => v_Nighttime_Type_Id,
                                                 i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                                 i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Hourly_Wage := Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Id,
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                        i_Part_End     => v_Trans_Parts(i).Part_End);
    
      r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Staff_Id   => i_Staff_Id,
                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      Calc_Penalty_Amounts(o_Late_Amount      => v_Late_Amount,
                           o_Early_Amount     => v_Early_Amount,
                           o_Lack_Amount      => v_Lack_Amount,
                           o_Day_Skip_Amount  => v_Day_Skip_Amount,
                           o_Mark_Skip_Amount => v_Mark_Skip_Amount,
                           i_Company_Id       => i_Company_Id,
                           i_Filial_Id        => i_Filial_Id,
                           i_Staff_Id         => i_Staff_Id,
                           i_Division_Id      => r_Robot.Division_Id,
                           i_Hourly_Wage      => v_Hourly_Wage,
                           i_Period_Begin     => v_Trans_Parts(i).Part_Begin,
                           i_Period_End       => v_Trans_Parts(i).Part_End);
    
      Sheet_Add_Part(p_Parts            => v_Sheet_Parts,
                     i_Part_Begin       => v_Trans_Parts(i).Part_Begin,
                     i_Part_End         => v_Trans_Parts(i).Part_End,
                     i_Division_Id      => r_Robot.Division_Id,
                     i_Job_Id           => r_Robot.Job_Id,
                     i_Schedule_Id      => v_Schedule_Id,
                     i_Fte_Id           => r_Robot.Fte_Id,
                     i_Monthly_Amount   => i_Round_Model.Eval(v_Monthly_Amount),
                     i_Plan_Amount      => i_Round_Model.Eval(v_Plan_Amount),
                     i_Wage_Amount      => i_Round_Model.Eval(v_Wage_Amount),
                     i_Overtime_Amount  => i_Round_Model.Eval(v_Overtime_Amount),
                     i_Nighttime_Amount => i_Round_Model.Eval(v_Nighttime_Amount),
                     i_Late_Amount      => i_Round_Model.Eval(v_Late_Amount),
                     i_Early_Amount     => i_Round_Model.Eval(v_Early_Amount),
                     i_Lack_Amount      => i_Round_Model.Eval(v_Lack_Amount),
                     i_Day_Skip_Amount  => i_Round_Model.Eval(v_Day_Skip_Amount),
                     i_Mark_Skip_Amount => i_Round_Model.Eval(v_Mark_Skip_Amount));
    end loop;
  
    return v_Sheet_Parts;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number is
    v_Penalty_Id number;
  begin
    select q.Penalty_Id
      into v_Penalty_Id
      from Hpr_Penalties q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Month = (select max(p.Month)
                        from Hpr_Penalties p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Month <= Trunc(i_Period, 'mon')
                         and p.Division_Id = i_Division_Id
                         and p.State = 'A')
       and q.Division_Id = i_Division_Id
       and q.State = 'A';
  
    return v_Penalty_Id;
  
  exception
    when No_Data_Found then
      begin
        select q.Penalty_Id
          into v_Penalty_Id
          from Hpr_Penalties q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Month = (select max(p.Month)
                            from Hpr_Penalties p
                           where p.Company_Id = i_Company_Id
                             and p.Filial_Id = i_Filial_Id
                             and p.Month <= Trunc(i_Period, 'mon')
                             and p.Division_Id is null
                             and p.State = 'A')
           and q.Division_Id is null
           and q.State = 'A';
      
        return v_Penalty_Id;
      
      exception
        when No_Data_Found then
          return null;
      end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Cv_Contract_Facts,
                                 i_Source_Id    => i_Fact_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap is
    v_Pref_Value varchar2(4000);
  begin
    v_Pref_Value := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Code       => Hpr_Pref.c_Pref_Timebook_Fill_Settings);
  
    if v_Pref_Value is null then
      return Fazo.Zip_Map('by_plan_day',
                          'Y',
                          'by_plan_hour',
                          'Y',
                          'norm_hour',
                          'Y',
                          'norm_day',
                          'Y');
    else
      return Fazo.Parse_Map(v_Pref_Value);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- charge status
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Draft return varchar2 is
  begin
    return t('charge_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_New return varchar2 is
  begin
    return t('charge_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Used return varchar2 is
  begin
    return t('charge_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Completed return varchar2 is
  begin
    return t('charge_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2 is
  begin
    return --
    case i_Charge_Status --
    when Hpr_Pref.c_Charge_Status_Draft then t_Charge_Status_Draft --
    when Hpr_Pref.c_Charge_Status_New then t_Charge_Status_New --
    when Hpr_Pref.c_Charge_Status_Used then t_Charge_Status_Used --
    when Hpr_Pref.c_Charge_Status_Completed then t_Charge_Status_Completed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Charge_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Charge_Status_Draft,
                                          Hpr_Pref.c_Charge_Status_New,
                                          Hpr_Pref.c_Charge_Status_Used,
                                          Hpr_Pref.c_Charge_Status_Completed),
                           Array_Varchar2(t_Charge_Status_Draft,
                                          t_Charge_Status_New,
                                          t_Charge_Status_Used,
                                          t_Charge_Status_Completed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- estimation type
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Formula return varchar2 is
  begin
    return t('estimation_type:formula');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Entered return varchar2 is
  begin
    return t('estimation_type:entered');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2 is
  begin
    return --
    case i_Estimation_Type --
    when Hpr_Pref.c_Estimation_Type_Formula then t_Estimation_Type_Formula --
    when Hpr_Pref.c_Estimation_Type_Entered then t_Estimation_Type_Entered --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Estimation_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Estimation_Type_Formula,
                                          Hpr_Pref.c_Estimation_Type_Entered),
                           Array_Varchar2(t_Estimation_Type_Formula, t_Estimation_Type_Entered));
  end;

  ----------------------------------------------------------------------------------------------------
  -- advance limit kind
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Turnout_Days return varchar2 is
  begin
    return t('advance_limit_kind:turnout');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Calendar_Days return varchar2 is
  begin
    return t('advance_limit_kind:calendar');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Advance_Limit_Kind --
    when Hpr_Pref.c_Advance_Limit_Turnout_Days then t_Advance_Limit_Turnout_Days --
    when Hpr_Pref.c_Advance_Limit_Calendar_Days then t_Advance_Limit_Calendar_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Advance_Limit_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Advance_Limit_Turnout_Days,
                                          Hpr_Pref.c_Advance_Limit_Calendar_Days),
                           Array_Varchar2(t_Advance_Limit_Turnout_Days,
                                          t_Advance_Limit_Calendar_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- period kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Full_Month return varchar2 is
  begin
    return t('period kind: full month');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_First_Half return varchar2 is
  begin
    return t('period kind: month first half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_Second_Half return varchar2 is
  begin
    return t('period kind: month second half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Custom return varchar2 is
  begin
    return t('period kind: custom period');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Period_Kind --
    when Hpr_Pref.c_Period_Full_Month then t_Period_Kind_Full_Month --
    when Hpr_Pref.c_Period_Month_First_Half then t_Period_Kind_Month_First_Half --
    when Hpr_Pref.c_Period_Month_Second_Half then t_Period_Kind_Month_Second_Half --
    when Hpr_Pref.c_Period_Custom then t_Period_Kind_Custom --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Period_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Period_Full_Month,
                                          Hpr_Pref.c_Period_Month_First_Half,
                                          Hpr_Pref.c_Period_Month_Second_Half,
                                          Hpr_Pref.c_Period_Custom),
                           Array_Varchar2(t_Period_Kind_Full_Month,
                                          t_Period_Kind_Month_First_Half,
                                          t_Period_Kind_Month_Second_Half,
                                          t_Period_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  -- penaties
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Late return varchar2 is
  begin
    return t('penalty kind: late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Early return varchar2 is
  begin
    return t('penalty kind: early');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Lack return varchar2 is
  begin
    return t('penalty kind: lack');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Day_Skip return varchar2 is
  begin
    return t('penalty kind: day skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Mark_Skip return varchar2 is
  begin
    return t('penalty kind: mark skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Penalty_Kind --
    when Hpr_Pref.c_Penalty_Kind_Late then t_Penalty_Kind_Late --
    when Hpr_Pref.c_Penalty_Kind_Early then t_Penalty_Kind_Early --
    when Hpr_Pref.c_Penalty_Kind_Lack then t_Penalty_Kind_Lack --
    when Hpr_Pref.c_Penalty_Kind_Day_Skip then t_Penalty_Kind_Day_Skip --
    when Hpr_Pref.c_Penalty_Kind_Mark_Skip then t_Penalty_Kind_Mark_Skip --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Penalty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Penalty_Kind_Late,
                                          Hpr_Pref.c_Penalty_Kind_Early,
                                          Hpr_Pref.c_Penalty_Kind_Lack,
                                          Hpr_Pref.c_Penalty_Kind_Day_Skip,
                                          Hpr_Pref.c_Penalty_Kind_Mark_Skip),
                           Array_Varchar2(t_Penalty_Kind_Late,
                                          t_Penalty_Kind_Early,
                                          t_Penalty_Kind_Lack,
                                          t_Penalty_Kind_Day_Skip,
                                          t_Penalty_Kind_Mark_Skip));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_New return varchar2 is
  begin
    return t('cv fact status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Complete return varchar2 is
  begin
    return t('cv fact status: complete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Accept return varchar2 is
  begin
    return t('cv fact status: accept');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_New then t_Cv_Fact_Status_New --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then t_Cv_Fact_Status_Complete --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Accept then t_Cv_Fact_Status_Accept --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cv_Fact_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_New,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Complete,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Accept),
                           Array_Varchar2(t_Cv_Fact_Status_New,
                                          t_Cv_Fact_Status_Complete,
                                          t_Cv_Fact_Status_Accept));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2 is
  begin
    return t('penalty_rule:min');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Times return varchar2 is
  begin
    return t('penalty_rule:times');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Days return varchar2 is
  begin
    return t('penalty_rule:days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} posted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} unposted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} saved $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} updated $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} deleted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} posted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} unposted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} saved $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} updated $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} deleted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

end Hpr_Util;
/

create or replace package Hrec_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Application_New
  (
    o_Application        out Hrec_Pref.Application_Rt,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Application_Id     number,
    i_Application_Number varchar2,
    i_Division_Id        number,
    i_Job_Id             number,
    i_Quantity           number,
    i_Wage               number,
    i_Responsibilities   varchar2,
    i_Requirements       varchar2,
    i_Status             varchar2,
    i_Note               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_New
  (
    o_Vacancy             out Hrec_Pref.Vacancy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Vacancy_Id          number,
    i_Name                varchar2,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Application_Id      number,
    i_Quantity            number,
    i_Opened_Date         date,
    i_Closed_Date         date,
    i_Scope               varchar2,
    i_Urgent              varchar2,
    i_Funnel_Id           number,
    i_Region_Id           number,
    i_Schedule_Id         number,
    i_Exam_Id             number,
    i_Deadline            date,
    i_Wage_From           number,
    i_Wage_To             number,
    i_Description         varchar2,
    i_Description_In_Html varchar2,
    i_Status              varchar2,
    i_Recruiter_Ids       Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Lang
  (
    o_Vacancy       in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Vacancy_Types
  (
    o_Vacancy          in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Vacancy_Group_Id number,
    i_Vacancy_Type_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_New
  (
    o_Funnel     out Hrec_Pref.Funnel_Rt,
    i_Company_Id number,
    i_Funnel_Id  number,
    i_Name       varchar2,
    i_State      varchar2,
    i_Code       varchar2,
    i_Stage_Ids  Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Candidate_Operation_Fill
  (
    o_Operation        out Hrec_Pref.Candidate_Operation_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Operation_Id     number,
    i_Vacancy_Id       number,
    i_Candidate_Id     number,
    i_Operation_Kind   varchar2,
    i_To_Stage_Id      number,
    i_Reject_Reason_Id number,
    i_Note             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Stage_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Company_Id_By_Employer_Code(i_Employer_Code varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Published_Vacancy
  (
    i_Company_Id   number,
    i_Vacancy_Code varchar2
  ) return Hrec_Hh_Published_Vacancies%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Subscription_User_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Region_Id
  (
    i_Company_Id number,
    i_Area_Code  varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Resume_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Candidate_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Topic_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Code varchar2,
    i_Resume_Code  varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Process_Auth_Response_Errors(i_Data Hashmap);
  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_New
  (
    o_Attribute                out Hrec_Pref.Olx_Attribute_Rt,
    i_Category_Code            number,
    i_Attribute_Code           varchar2,
    i_Label                    varchar2,
    i_Validation_Type          varchar2,
    i_Is_Required              varchar2,
    i_Is_Number                varchar2,
    i_Min_Value                number,
    i_Max_Value                number,
    i_Is_Allow_Multiple_Values varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Olx_Attribute_Add_Value
  (
    o_Attribute in out nocopy Hrec_Pref.Olx_Attribute_Rt,
    i_Code      varchar2,
    i_Label     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Take_Telegram_Candidate
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Contact_Code number
  ) return Hrec_Telegram_Candidates%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Wage_From_To_Message
  (
    i_Wage_From number,
    i_Wage_To   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Scope(i_Scope varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Scopes return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Statuses return Matrix_Varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function t_Operation_Kind(i_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Operation_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Billing_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Vacancy_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Olx_Advertiser_Types return Matrix_Varchar2;
end Hrec_Util;
/
create or replace package body Hrec_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Application_New
  (
    o_Application        out Hrec_Pref.Application_Rt,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Application_Id     number,
    i_Application_Number varchar2,
    i_Division_Id        number,
    i_Job_Id             number,
    i_Quantity           number,
    i_Wage               number,
    i_Responsibilities   varchar2,
    i_Requirements       varchar2,
    i_Status             varchar2,
    i_Note               varchar2
  ) is
  begin
    o_Application.Company_Id         := i_Company_Id;
    o_Application.Filial_Id          := i_Filial_Id;
    o_Application.Application_Id     := i_Application_Id;
    o_Application.Application_Number := i_Application_Number;
    o_Application.Division_Id        := i_Division_Id;
    o_Application.Job_Id             := i_Job_Id;
    o_Application.Quantity           := i_Quantity;
    o_Application.Wage               := i_Wage;
    o_Application.Responsibilities   := i_Responsibilities;
    o_Application.Requirements       := i_Requirements;
    o_Application.Status             := i_Status;
    o_Application.Note               := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacancy_New
  (
    o_Vacancy             out Hrec_Pref.Vacancy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Vacancy_Id          number,
    i_Name                varchar2,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Application_Id      number,
    i_Quantity            number,
    i_Opened_Date         date,
    i_Closed_Date         date,
    i_Scope               varchar2,
    i_Urgent              varchar2,
    i_Funnel_Id           number,
    i_Region_Id           number,
    i_Schedule_Id         number,
    i_Exam_Id             number,
    i_Deadline            date,
    i_Wage_From           number,
    i_Wage_To             number,
    i_Description         varchar2,
    i_Description_In_Html varchar2,
    i_Status              varchar2,
    i_Recruiter_Ids       Array_Number
  ) is
  begin
    o_Vacancy.Company_Id          := i_Company_Id;
    o_Vacancy.Filial_Id           := i_Filial_Id;
    o_Vacancy.Vacancy_Id          := i_Vacancy_Id;
    o_Vacancy.Name                := i_Name;
    o_Vacancy.Division_Id         := i_Division_Id;
    o_Vacancy.Job_Id              := i_Job_Id;
    o_Vacancy.Application_Id      := i_Application_Id;
    o_Vacancy.Quantity            := i_Quantity;
    o_Vacancy.Opened_Date         := i_Opened_Date;
    o_Vacancy.Closed_Date         := i_Closed_Date;
    o_Vacancy.Scope               := i_Scope;
    o_Vacancy.Urgent              := i_Urgent;
    o_Vacancy.Funnel_Id           := i_Funnel_Id;
    o_Vacancy.Region_Id           := i_Region_Id;
    o_Vacancy.Schedule_Id         := i_Schedule_Id;
    o_Vacancy.Exam_Id             := i_Exam_Id;
    o_Vacancy.Deadline            := i_Deadline;
    o_Vacancy.Wage_From           := i_Wage_From;
    o_Vacancy.Wage_To             := i_Wage_To;
    o_Vacancy.Description         := i_Description;
    o_Vacancy.Description_In_Html := i_Description_In_Html;
    o_Vacancy.Status              := i_Status;
    o_Vacancy.Recruiter_Ids       := i_Recruiter_Ids;
  
    o_Vacancy.Langs         := Hrec_Pref.Vacancy_Lang_Nt();
    o_Vacancy.Vacancy_Types := Hrec_Pref.Vacancy_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Lang
  (
    o_Vacancy       in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  ) is
    v_Lang Hrec_Pref.Vacancy_Lang_Rt;
  begin
    v_Lang.Lang_Id       := i_Lang_Id;
    v_Lang.Lang_Level_Id := i_Lang_Level_Id;
  
    o_Vacancy.Langs.Extend();
    o_Vacancy.Langs(o_Vacancy.Langs.Count) := v_Lang;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Vacancy_Add_Vacancy_Types
  (
    o_Vacancy          in out nocopy Hrec_Pref.Vacancy_Rt,
    i_Vacancy_Group_Id number,
    i_Vacancy_Type_Ids Array_Number
  ) is
    v_Type Hrec_Pref.Vacancy_Type_Rt;
  begin
    v_Type.Vacancy_Group_Id := i_Vacancy_Group_Id;
    v_Type.Vacancy_Type_Ids := i_Vacancy_Type_Ids;
  
    o_Vacancy.Vacancy_Types.Extend();
    o_Vacancy.Vacancy_Types(o_Vacancy.Vacancy_Types.Count) := v_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Funnel_New
  (
    o_Funnel     out Hrec_Pref.Funnel_Rt,
    i_Company_Id number,
    i_Funnel_Id  number,
    i_Name       varchar2,
    i_State      varchar2,
    i_Code       varchar2,
    i_Stage_Ids  Array_Number
  ) is
  begin
    o_Funnel.Company_Id := i_Company_Id;
    o_Funnel.Funnel_Id  := i_Funnel_Id;
    o_Funnel.Name       := i_Name;
    o_Funnel.State      := i_State;
    o_Funnel.Code       := i_Code;
    o_Funnel.Stage_Ids  := i_Stage_Ids;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Candidate_Operation_Fill
  (
    o_Operation        out Hrec_Pref.Candidate_Operation_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Operation_Id     number,
    i_Vacancy_Id       number,
    i_Candidate_Id     number,
    i_Operation_Kind   varchar2,
    i_To_Stage_Id      number,
    i_Reject_Reason_Id number,
    i_Note             varchar2
  ) is
  begin
    o_Operation.Company_Id       := i_Company_Id;
    o_Operation.Filial_Id        := i_Filial_Id;
    o_Operation.Operation_Id     := i_Operation_Id;
    o_Operation.Vacancy_Id       := i_Vacancy_Id;
    o_Operation.Candidate_Id     := i_Candidate_Id;
    o_Operation.Operation_Kind   := i_Operation_Kind;
    o_Operation.To_Stage_Id      := i_To_Stage_Id;
    o_Operation.Reject_Reason_Id := i_Reject_Reason_Id;
    o_Operation.Note             := i_Note;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Stage_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Stage_Id number;
  begin
    select q.Stage_Id
      into v_Stage_Id
      from Hrec_Stages q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Stage_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Funnel_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Funnel_Id number;
  begin
    select q.Funnel_Id
      into v_Funnel_Id
      from Hrec_Funnels q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Funnel_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Group_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Group_Id number;
  begin
    select q.Vacancy_Group_Id
      into v_Group_Id
      from Hrec_Vacancy_Groups q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Group_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Vacancy_Type_Id_By_Pcode
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Type_Id number;
  begin
    select q.Vacancy_Type_Id
      into v_Type_Id
      from Hrec_Vacancy_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return v_Type_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Company_Id_By_Employer_Code(i_Employer_Code varchar2) return number is
    v_Company_Id number;
  begin
    select t.Company_Id
      into v_Company_Id
      from Hrec_Hh_Employer_Ids t
     where t.Employer_Id = i_Employer_Code;
  
    return v_Company_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Published_Vacancy
  (
    i_Company_Id   number,
    i_Vacancy_Code varchar2
  ) return Hrec_Hh_Published_Vacancies%rowtype is
    r_Vacancy Hrec_Hh_Published_Vacancies%rowtype;
  begin
    select t.*
      into r_Vacancy
      from Hrec_Hh_Published_Vacancies t
     where t.Company_Id = i_Company_Id
       and t.Vacancy_Code = i_Vacancy_Code;
  
    return r_Vacancy;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Subscription_User_Id(i_Company_Id number) return number is
    v_User_Id number;
  begin
    select t.Created_By
      into v_User_Id
      from Hrec_Hh_Subscriptions t
     where t.Company_Id = i_Company_Id;
  
    return v_User_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Region_Id
  (
    i_Company_Id number,
    i_Area_Code  varchar2
  ) return number is
    result number;
  begin
    select q.Region_Id
      into result
      from Hrec_Hh_Integration_Regions q
     where q.Company_Id = i_Company_Id
       and q.Region_Code = i_Area_Code
       and Rownum = 1;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Resume_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Candidate_Id number
  ) return varchar2 is
    result varchar2(100);
  begin
    select q.Resume_Code
      into result
      from Hrec_Hh_Resumes q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Candidate_Id = i_Candidate_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Topic_Code
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Vacancy_Code varchar2,
    i_Resume_Code  varchar2
  ) return varchar2 is
    result varchar2(100);
  begin
    select q.Topic_Code
      into result
      from Hrec_Hh_Negotiations q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Vacancy_Code = i_Vacancy_Code
       and q.Resume_Code = i_Resume_Code;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Process_Auth_Response_Errors(i_Data Hashmap) is
    v_Errors     Arraylist := i_Data.o_Arraylist('errors');
    v_Error      Hashmap;
    v_Error_Code varchar2(50);
  begin
    if v_Errors is null or v_Errors.Count = 0 then
      return;
    end if;
  
    for i in 1 .. v_Errors.Count
    loop
      v_Error := Treat(v_Errors.r_Hashmap(i) as Hashmap);
    
      v_Error_Code := v_Error.r_Varchar2('value');
    
      if v_Error_Code in (Hrec_Pref.c_Hh_Error_Bad_Authorization,
                          Hrec_Pref.c_Hh_Error_Token_Expired,
                          Hrec_Pref.c_Hh_Error_Token_Revoked,
                          Hrec_Pref.c_Hh_Error_Application_Not_Found,
                          Hrec_Pref.c_Hh_Error_Used_Manager_Account_Forbidden) then
        Hrec_Error.Raise_019(v_Error_Code);
      end if;
    end loop;
  
    if v_Error_Code is not null then
      Hrec_Error.Raise_019(v_Error_Code);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_New
  (
    o_Attribute                out Hrec_Pref.Olx_Attribute_Rt,
    i_Category_Code            number,
    i_Attribute_Code           varchar2,
    i_Label                    varchar2,
    i_Validation_Type          varchar2,
    i_Is_Required              varchar2,
    i_Is_Number                varchar2,
    i_Min_Value                number,
    i_Max_Value                number,
    i_Is_Allow_Multiple_Values varchar2
  ) is
  begin
    o_Attribute.Category_Code            := i_Category_Code;
    o_Attribute.Attribute_Code           := i_Attribute_Code;
    o_Attribute.Label                    := i_Label;
    o_Attribute.Validation_Type          := i_Validation_Type;
    o_Attribute.Is_Required              := i_Is_Required;
    o_Attribute.Is_Number                := i_Is_Number;
    o_Attribute.Min_Value                := i_Min_Value;
    o_Attribute.Max_Value                := i_Max_Value;
    o_Attribute.Is_Allow_Multiple_Values := i_Is_Allow_Multiple_Values;
  
    o_Attribute.Attribute_Values := Hrec_Pref.Olx_Attribute_Value_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Olx_Attribute_Add_Value
  (
    o_Attribute in out nocopy Hrec_Pref.Olx_Attribute_Rt,
    i_Code      varchar2,
    i_Label     varchar2
  ) is
    v_Attribute_Value Hrec_Pref.Olx_Attribute_Value_Rt;
  begin
    v_Attribute_Value.Code  := i_Code;
    v_Attribute_Value.Label := i_Label;
  
    o_Attribute.Attribute_Values.Extend();
    o_Attribute.Attribute_Values(o_Attribute.Attribute_Values.Count) := v_Attribute_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Telegram_Candidate
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Contact_Code number
  ) return Hrec_Telegram_Candidates%rowtype is
    result Hrec_Telegram_Candidates%rowtype;
  begin
    select q.*
      into result
      from Hrec_Telegram_Candidates q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Contact_Code = i_Contact_Code;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Wage_From_To_Message
  (
    i_Wage_From number,
    i_Wage_To   number
  ) return varchar2 is
    result varchar2(500 char);
  begin
    if i_Wage_From is not null then
      result := t('wage from $1', i_Wage_From);
    end if;
  
    if i_Wage_To is not null then
      result := t('wage to $1', i_Wage_To);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Draft return varchar2 is
  begin
    return t('application_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Waiting return varchar2 is
  begin
    return t('application_status:waiting');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Approved return varchar2 is
  begin
    return t('application_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Complited return varchar2 is
  begin
    return t('application_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status_Canceled return varchar2 is
  begin
    return t('application_status:canceled');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Application_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hrec_Pref.c_Application_Status_Draft then t_Application_Status_Draft --
    when Hrec_Pref.c_Application_Status_Waiting then t_Application_Status_Waiting --
    when Hrec_Pref.c_Application_Status_Approved then t_Application_Status_Approved --
    when Hrec_Pref.c_Application_Status_Complited then t_Application_Status_Complited --
    when Hrec_Pref.c_Application_Status_Canceled then t_Application_Status_Canceled --   
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Application_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Application_Status_Draft,
                                          Hrec_Pref.c_Application_Status_Waiting,
                                          Hrec_Pref.c_Application_Status_Approved,
                                          Hrec_Pref.c_Application_Status_Complited,
                                          Hrec_Pref.c_Application_Status_Canceled),
                           Array_Varchar2(t_Application_Status_Draft,
                                          t_Application_Status_Waiting,
                                          t_Application_Status_Approved,
                                          t_Application_Status_Complited,
                                          t_Application_Status_Canceled));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_All return varchar2 is
  begin
    return t('vacancy_scope:all');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_Employees return varchar2 is
  begin
    return t('vacancy_scope:employees');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Scope_Non_Employees return varchar2 is
  begin
    return t('vacancy_scope:non employees');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Scope(i_Scope varchar2) return varchar2 is
  begin
    return --
    case i_Scope --
    when Hrec_Pref.c_Vacancy_Scope_All then t_Vacancy_Scope_All --
    when Hrec_Pref.c_Vacancy_Scope_Employees then t_Vacancy_Scope_Employees --
    when Hrec_Pref.c_Vacancy_Scope_Non_Employees then t_Vacancy_Scope_Non_Employees --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Scopes return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Vacancy_Scope_All,
                                          Hrec_Pref.c_Vacancy_Scope_Employees,
                                          Hrec_Pref.c_Vacancy_Scope_Non_Employees),
                           Array_Varchar2(t_Vacancy_Scope_All,
                                          t_Vacancy_Scope_Employees,
                                          t_Vacancy_Scope_Non_Employees));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Status_Open return varchar2 is
  begin
    return t('vacancy_status:open');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Vacancy_Status_Close return varchar2 is
  begin
    return t('vacancy_status:closed');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Vacancy_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hrec_Pref.c_Vacancy_Status_Open then t_Vacancy_Status_Open --
    when Hrec_Pref.c_Vacancy_Status_Close then t_Vacancy_Status_Close --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Vacancy_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Vacancy_Status_Open,
                                          Hrec_Pref.c_Vacancy_Status_Close),
                           Array_Varchar2(t_Vacancy_Status_Open, t_Vacancy_Status_Close));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Operation_Kind_Action return varchar2 is
  begin
    return t('operation_kind:action');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Operation_Kind_Comment return varchar2 is
  begin
    return t('operation_kind:comment');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Operation_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Hrec_Pref.c_Operation_Kind_Action then t_Operation_Kind_Action --
    when Hrec_Pref.c_Operation_Kind_Comment then t_Operation_Kind_Comment --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Operation_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Operation_Kind_Action,
                                          Hrec_Pref.c_Operation_Kind_Comment),
                           Array_Varchar2(t_Operation_Kind_Action, t_Operation_Kind_Comment));
  end;

  ----------------------------------------------------------------------------------------------------  
  Function t_Vacancy_Type_Open return varchar2 is
  begin
    return t('vacancy_type:open');
  end;

  ----------------------------------------------------------------------------------------------------  
  Function t_Vacancy_Type_Closed return varchar2 is
  begin
    return t('vacancy_type:closed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Billing_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Hh_Billing_Type_Standart,
                                          Hrec_Pref.c_Hh_Billing_Type_Free,
                                          Hrec_Pref.c_Hh_Billing_Type_Standart_Plus,
                                          Hrec_Pref.c_Hh_Billing_Type_Premium),
                           Array_Varchar2(t('billing_type:standard'),
                                          t('billing_type:free'),
                                          t('billing_type:standart plus'),
                                          t('billing_type:premium')));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Head_Hunter_Vacancy_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Hh_Vacancy_Type_Open,
                                          Hrec_Pref.c_Hh_Vacancy_Type_Closed),
                           Array_Varchar2(t_Vacancy_Type_Open, t_Vacancy_Type_Closed));
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Olx_Advertiser_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrec_Pref.c_Olx_Advertiser_Type_Private,
                                          Hrec_Pref.c_Olx_Advertiser_Type_Businnes),
                           Array_Varchar2(t('olx_advertiser_type:private'),
                                          t('olx_advertiser_type:businnes')));
  end;

end Hrec_Util;
/

create or replace package Href_Pref is
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id           number,
    Person_Id            number,
    First_Name           varchar2(250 char),
    Last_Name            varchar2(250 char),
    Middle_Name          varchar2(250 char),
    Gender               varchar2(1),
    Birthday             date,
    Nationality_Id       number,
    Photo_Sha            varchar2(64),
    Tin                  varchar2(18 char),
    Iapa                 varchar2(20 char),
    Npin                 varchar2(14 char),
    Region_Id            number,
    Main_Phone           varchar2(100 char),
    Email                varchar2(100 char),
    Address              varchar2(500 char),
    Legal_Address        varchar2(300 char),
    Key_Person           varchar2(1),
    Access_All_Employees varchar2(1),
    Access_Hidden_Salary varchar2(1),
    State                varchar2(1),
    Code                 varchar2(50 char));
  ----------------------------------------------------------------------------------------------------
  type Person_Lang_Rt is record(
    Lang_Id       number,
    Lang_Level_Id number);
  type Person_Lang_Nt is table of Person_Lang_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Experience_Rt is record(
    Person_Experience_Id number,
    Experience_Type_Id   number,
    Is_Working           varchar2(1),
    Start_Date           date,
    Num_Year             number,
    Num_Month            number,
    Num_Day              number);
  type Person_Experience_Nt is table of Person_Experience_Rt;
  ----------------------------------------------------------------------------------------------------
  type Employee_Info_Rt is record(
    Context_Id number,
    Column_Key varchar2(100),
    Event      varchar2(1),
    value      varchar2(2000),
    timestamp  date,
    User_Id    number);
  type Employee_Info_Nt is table of Employee_Info_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Recom_Rt is record(
    Recommendation_Id   number,
    Sender_Name         varchar2(300 char),
    Sender_Phone_Number varchar2(30 char),
    Sender_Email        varchar2(320 char),
    File_Sha            varchar2(64),
    Order_No            number,
    Feedback            varchar2(300 char),
    Note                varchar2(300 char));
  type Candidate_Recom_Nt is table of Candidate_Recom_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Person_Type_Id   number,
    Candidate_Kind   varchar2(1),
    Source_Id        number,
    Wage_Expectation number,
    Cv_Sha           varchar2(64),
    Note             varchar2(300 char),
    Extra_Phone      varchar2(100 char),
    Edu_Stages       Array_Number,
    Candidate_Jobs   Array_Number,
    Person           Person_Rt,
    Langs            Person_Lang_Nt,
    Experiences      Person_Experience_Nt,
    Recommendations  Candidate_Recom_Nt);
  ----------------------------------------------------------------------------------------------------
  type Employee_Rt is record(
    Person    Person_Rt,
    Filial_Id number,
    State     varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Indicator_Rt is record(
    Indicator_Id    number,
    Indicator_Value number);
  type Indicator_Nt is table of Indicator_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Licensed_Rt is record(
    Staff_Id number,
    Period   date,
    Licensed varchar2(1));
  type Staff_Licensed_Nt is table of Staff_Licensed_Rt;
  ----------------------------------------------------------------------------------------------------
  type Oper_Type_Rt is record(
    Oper_Type_Id  number,
    Indicator_Ids Array_Number);
  type Oper_Type_Nt is table of Oper_Type_Rt;
  ----------------------------------------------------------------------------------------------------
  type Period_Rt is record(
    Period_Begin date,
    Period_End   date);
  type Period_Nt is table of Period_Rt;
  -- Fte limit
  ----------------------------------------------------------------------------------------------------
  type Fte_Limit_Rt is record(
    Fte_Limit_Setting varchar2(1),
    Fte_Limit         number);
  ---------------------------------------------------------------------------------------------------- 
  c_Fte_Limit_Setting constant varchar2(50) := 'VHR:FTE_LIMIT_SETTING';
  c_Fte_Limit         constant varchar2(50) := 'VHR:FTE_LIMIT';
  c_Fte_Limit_Default constant number := 1.5;
  ----------------------------------------------------------------------------------------------------
  type Col_Required_Setting_Rt is record(
    Last_Name              varchar2(1) := 'N',
    Middle_Name            varchar2(1) := 'N',
    Birthday               varchar2(1) := 'N',
    Phone_Number           varchar2(1) := 'N',
    Email                  varchar2(1) := 'N',
    Region                 varchar2(1) := 'N',
    Address                varchar2(1) := 'N',
    Legal_Address          varchar2(1) := 'N',
    Passport               varchar2(1) := 'N',
    Npin                   varchar2(1) := 'N',
    Iapa                   varchar2(1) := 'N',
    Request_Note           varchar2(1) := 'N',
    Request_Note_Limit     number := 0,
    Plan_Change_Note       varchar2(1) := 'N',
    Plan_Change_Note_Limit number := 0);
  ----------------------------------------------------------------------------------------------------
  -- Project Code
  ----------------------------------------------------------------------------------------------------
  c_Pc_Verifix_Hr constant varchar2(10) := 'vhr';
  ----------------------------------------------------------------------------------------------------
  -- Project Version
  ----------------------------------------------------------------------------------------------------
  c_Pv_Verifix_Hr constant varchar2(10) := '2.38.0';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Role
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Role_Hr         constant varchar2(10) := 'VHR:1';
  c_Pcode_Role_Supervisor constant varchar2(10) := 'VHR:2';
  c_Pcode_Role_Staff      constant varchar2(10) := 'VHR:3';
  c_Pcode_Role_Accountant constant varchar2(10) := 'VHR:4';
  c_Pcode_Role_Timepad    constant varchar2(10) := 'VHR:5';
  c_Pcode_Role_Recruiter  constant varchar2(10) := 'VHR:6';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Document_Type_Default_Passport constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Status_New      constant varchar2(1) := 'N';
  c_Person_Document_Status_Approved constant varchar2(1) := 'A';
  c_Person_Document_Status_Rejected constant varchar2(1) := 'R';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Owe Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Owe_Status_Complete constant varchar2(1) := 'C';
  c_Person_Document_Owe_Status_Partial  constant varchar2(1) := 'P';
  c_Person_Document_Owe_Status_Exempt   constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Indicator
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Indicator_Wage                     constant varchar2(20) := 'VHR:1';
  c_Pcode_Indicator_Rate                     constant varchar2(20) := 'VHR:2';
  c_Pcode_Indicator_Plan_Days                constant varchar2(20) := 'VHR:3';
  c_Pcode_Indicator_Fact_Days                constant varchar2(20) := 'VHR:4';
  c_Pcode_Indicator_Plan_Hours               constant varchar2(20) := 'VHR:5';
  c_Pcode_Indicator_Fact_Hours               constant varchar2(20) := 'VHR:6';
  c_Pcode_Indicator_Perf_Bonus               constant varchar2(20) := 'VHR:7';
  c_Pcode_Indicator_Perf_Extra_Bonus         constant varchar2(20) := 'VHR:8';
  c_Pcode_Indicator_Working_Days             constant varchar2(20) := 'VHR:9';
  c_Pcode_Indicator_Working_Hours            constant varchar2(20) := 'VHR:10';
  c_Pcode_Indicator_Sick_Leave_Coefficient   constant varchar2(20) := 'VHR:11';
  c_Pcode_Indicator_Business_Trip_Days       constant varchar2(20) := 'VHR:12';
  c_Pcode_Indicator_Vacation_Days            constant varchar2(20) := 'VHR:13';
  c_Pcode_Indicator_Mean_Working_Days        constant varchar2(20) := 'VHR:14';
  c_Pcode_Indicator_Sick_Leave_Days          constant varchar2(20) := 'VHR:15';
  c_Pcode_Indicator_Hourly_Wage              constant varchar2(20) := 'VHR:16';
  c_Pcode_Indicator_Overtime_Hours           constant varchar2(20) := 'VHR:17';
  c_Pcode_Indicator_Overtime_Coef            constant varchar2(20) := 'VHR:18';
  c_Pcode_Indicator_Penalty_For_Late         constant varchar2(20) := 'VHR:19';
  c_Pcode_Indicator_Penalty_For_Early_Output constant varchar2(20) := 'VHR:20';
  c_Pcode_Indicator_Penalty_For_Absence      constant varchar2(20) := 'VHR:21';
  c_Pcode_Indicator_Penalty_For_Day_Skip     constant varchar2(20) := 'VHR:22';
  c_Pcode_Indicator_Perf_Penalty             constant varchar2(20) := 'VHR:23';
  c_Pcode_Indicator_Perf_Extra_Penalty       constant varchar2(20) := 'VHR:24';
  c_Pcode_Indicator_Penalty_For_Mark_Skip    constant varchar2(20) := 'VHR:25';
  c_Pcode_Indicator_Additional_Nighttime     constant varchar2(20) := 'VHR:26';
  c_Pcode_Indicator_Weighted_Turnout         constant varchar2(20) := 'VHR:27';
  ----------------------------------------------------------------------------------------------------
  -- Fte Pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Fte_Full_Time    constant varchar2(20) := 'VHR:1';
  c_Pcode_Fte_Part_Time    constant varchar2(20) := 'VHR:2';
  c_Pcode_Fte_Quarter_Time constant varchar2(20) := 'VHR:3';
  ----------------------------------------------------------------------------------------------------
  c_Custom_Fte_Id constant number := -1;
  c_Default_Fte   constant number := 1.0;
  ----------------------------------------------------------------------------------------------------
  -- Staff Status
  ----------------------------------------------------------------------------------------------------
  c_Staff_Status_Working   constant varchar2(1) := 'W';
  c_Staff_Status_Dismissed constant varchar2(1) := 'D';
  c_Staff_Status_Unknown   constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- Staff Kind
  ----------------------------------------------------------------------------------------------------
  c_Staff_Kind_Primary   constant varchar2(1) := 'P';
  c_Staff_Kind_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Candidate Kind
  ----------------------------------------------------------------------------------------------------
  c_Candidate_Kind_New constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Specialty Kind
  ----------------------------------------------------------------------------------------------------
  c_Specialty_Kind_Group     constant varchar2(1) := 'G';
  c_Specialty_Kind_Specialty constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Employment Source Kind
  ----------------------------------------------------------------------------------------------------
  c_Employment_Source_Kind_Hiring    constant varchar2(1) := 'H';
  c_Employment_Source_Kind_Dismissal constant varchar2(1) := 'D';
  c_Employment_Source_Kind_Both      constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- User Access Level
  ----------------------------------------------------------------------------------------------------
  c_User_Access_Level_Personal          constant varchar2(1) := 'P';
  c_User_Access_Level_Direct_Employee   constant varchar2(1) := 'D';
  c_User_Access_Level_Undirect_Employee constant varchar2(1) := 'U';
  c_User_Access_Level_Manual            constant varchar2(1) := 'M';
  c_User_Access_Level_Other             constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- Indicator Used
  ----------------------------------------------------------------------------------------------------
  c_Indicator_Used_Constantly    constant varchar2(1) := 'C';
  c_Indicator_Used_Automatically constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Time Formats
  ----------------------------------------------------------------------------------------------------
  c_Time_Format_Minute       constant varchar2(50) := 'hh24:mi';
  c_Date_Format_Year         constant varchar2(50) := 'yyyy';
  c_Date_Format_Month        constant varchar2(50) := 'mm.yyyy';
  c_Date_Format_Day          constant varchar2(50) := 'dd.mm.yyyy';
  c_Date_Format_Minute       constant varchar2(50) := 'dd.mm.yyyy hh24:mi';
  c_Date_Format_Second       constant varchar2(50) := 'dd.mm.yyyy hh24:mi:ss';
  c_Date_Format_Year_Quarter constant varchar2(50) := 'yyyy "Q"q';
  ---------------------------------------------------------------------------------------------------- 
  -- Date trunc formats
  ---------------------------------------------------------------------------------------------------- 
  c_Date_Trunc_Format_Year    constant varchar2(50) := 'yyyy';
  c_Date_Trunc_Format_Month   constant varchar2(50) := 'mm';
  c_Date_Trunc_Format_Quarter constant varchar2(50) := 'q';
  ----------------------------------------------------------------------------------------------------
  -- Max Date
  ----------------------------------------------------------------------------------------------------
  c_Max_Date constant date := to_date('31.12.9999', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Min Date
  ----------------------------------------------------------------------------------------------------
  c_Min_Date constant date := to_date('01.01.0001', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal Reason Types
  ----------------------------------------------------------------------------------------------------
  c_Dismissal_Reasons_Type_Positive constant varchar2(1) := 'P';
  c_Dismissal_Reasons_Type_Negative constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Working Time Differences
  ----------------------------------------------------------------------------------------------------
  c_Diff_Hiring    constant number := -2;
  c_Diff_Dismissal constant number := 7;
  ----------------------------------------------------------------------------------------------------
  -- Module error codes
  ----------------------------------------------------------------------------------------------------
  c_Href_Error_Code  constant varchar2(10) := 'A05-01';
  c_Hes_Error_Code   constant varchar2(10) := 'A05-02';
  c_Hlic_Error_Code  constant varchar2(10) := 'A05-03';
  c_Htt_Error_Code   constant varchar2(10) := 'A05-04';
  c_Hzk_Error_Code   constant varchar2(10) := 'A05-05';
  c_Hrm_Error_Code   constant varchar2(10) := 'A05-06';
  c_Hpd_Error_Code   constant varchar2(10) := 'A05-07';
  c_Hln_Error_Code   constant varchar2(10) := 'A05-08';
  c_Hper_Error_Code  constant varchar2(10) := 'A05-09';
  c_Hpr_Error_Code   constant varchar2(10) := 'A05-10';
  c_Hac_Error_Code   constant varchar2(10) := 'A05-11';
  c_Htm_Error_Code   constant varchar2(10) := 'A05-12';
  c_Hrec_Error_Code  constant varchar2(10) := 'A05-13';
  c_Hsc_Error_Code   constant varchar2(10) := 'A05-14';
  c_Hface_Error_Code constant varchar2(10) := 'A05-15';
  c_Uit_Error_Code   constant varchar2(10) := 'A05-99';
  ----------------------------------------------------------------------------------------------------
  -- Column required settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Crs_Last_Name              constant varchar2(50) := 'vhr:href:crs:last_name';
  c_Pref_Crs_Middle_Name            constant varchar2(50) := 'vhr:href:crs:middle_name';
  c_Pref_Crs_Birthday               constant varchar2(50) := 'vhr:href:crs:birthday';
  c_Pref_Crs_Phone_Number           constant varchar2(50) := 'vhr:href:crs:phone_number';
  c_Pref_Crs_Email                  constant varchar2(50) := 'vhr:href:crs:email';
  c_Pref_Crs_Region                 constant varchar2(50) := 'vhr:href:crs:region';
  c_Pref_Crs_Address                constant varchar2(50) := 'vhr:href:crs:address';
  c_Pref_Crs_Legal_Address          constant varchar2(50) := 'vhr:href:crs:legal_address';
  c_Pref_Crs_Passport               constant varchar2(50) := 'vhr:href:crs:passport';
  c_Pref_Crs_Npin                   constant varchar2(50) := 'vhr:href:crs:npin';
  c_Pref_Crs_Iapa                   constant varchar2(50) := 'vhr:href:crs:iapa';
  c_Pref_Crs_Request_Note           constant varchar2(50) := 'vhr:href:crs:request_note';
  c_Pref_Crs_Request_Note_Limit     constant varchar2(50) := 'vhr:href:crs:request_note_limit';
  c_Pref_Crs_Plan_Change_Note       constant varchar2(50) := 'vhr:href:crs:plan_change_note';
  c_Pref_Crs_Plan_Change_Note_Limit constant varchar2(50) := 'vhr:href:crs:plan_change_note_limit';
  ----------------------------------------------------------------------------------------------------
  -- Company badge template
  ----------------------------------------------------------------------------------------------------
  c_Pref_Badge_Template_Id constant varchar2(50) := 'href:company_badge_template_id';
  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  c_Pref_Vpu_Setting constant varchar2(50) := 'href:vpu:setting';
  c_Pref_Vpu_Column  constant varchar2(50) := 'href:vpu:column';
  ----------------------------------------------------------------------------------------------------
  c_Vpu_Column_Name            constant varchar2(1) := 'N';
  c_Vpu_Column_Passport_Number constant varchar2(1) := 'P';
  c_Vpu_Column_Npin            constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  c_Settings_Separator constant varchar2(1) := '$';
  ----------------------------------------------------------------------------------------------------
  -- HTTP METHODS
  ----------------------------------------------------------------------------------------------------
  c_Http_Method_Get    constant varchar2(10) := 'GET';
  c_Http_Method_Put    constant varchar2(10) := 'PUT';
  c_Http_Method_Post   constant varchar2(10) := 'POST';
  c_Http_Method_Delete constant varchar2(10) := 'DELETE';

end Href_Pref;
/
create or replace package body Href_Pref is
end Href_Pref;
/

create or replace package Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Roles_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_Role_Ids   Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Restrict_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Set_Closed_Date_To_Robot
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Closed_Date date
  );
end Hrm_Api;
/
create or replace package body Hrm_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Setting_Save(i_Setting Hrm_Settings%rowtype) is
    v_Robot_Id number;
    r_Setting  Hrm_Settings%rowtype;
  
    -------------------------------------------------- 
    Function Get_Journal_Numbers
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number
    ) return Array_Varchar2 is
      result Array_Varchar2;
    begin
      select (select w.Journal_Number
                from Hpd_Journals w
               where w.Company_Id = q.Company_Id
                 and w.Filial_Id = q.Filial_Id
                 and w.Journal_Id = q.Journal_Id)
        bulk collect
        into result
        from Hpd_Page_Robots Pr
        join Hpd_Journal_Pages q
          on q.Company_Id = Pr.Company_Id
         and q.Filial_Id = Pr.Filial_Id
         and q.Page_Id = Pr.Page_Id
       where Pr.Company_Id = i_Company_Id
         and Pr.Filial_Id = i_Filial_Id
         and Pr.Robot_Id = i_Robot_Id;
    
      return set(result);
    end;
  
    --------------------------------------------------
    Procedure Delete_All_Book_Transactions is
    begin
      for r in (select *
                  from Hpd_Robot_Trans_Pages q
                 where q.Company_Id = i_Setting.Company_Id
                   and q.Filial_Id = i_Setting.Filial_Id)
      loop
        z_Hpd_Robot_Trans_Pages.Delete_One(i_Company_Id => i_Setting.Company_Id,
                                           i_Filial_Id  => i_Setting.Filial_Id,
                                           i_Page_Id    => r.Page_Id,
                                           i_Trans_Id   => r.Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Setting.Company_Id,
                                            i_Filial_Id      => i_Setting.Filial_Id,
                                            i_Robot_Trans_Id => r.Trans_Id);
      
        Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Setting.Company_Id,
                                          i_Filial_Id  => i_Setting.Filial_Id,
                                          i_Trans_Id   => r.Trans_Id);
      end loop;
    
      update Hpd_Page_Robots q
         set q.Is_Booked = 'N'
       where q.Company_Id = i_Setting.Company_Id
         and q.Filial_Id = i_Setting.Filial_Id;
    end;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Setting.Company_Id,
                                       i_Filial_Id  => i_Setting.Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' and i_Setting.Position_Enable = 'N' then
      if Hrm_Core.Exists_Robot_With_Multiple_Staffs(i_Company_Id => i_Setting.Company_Id,
                                                    i_Filial_Id  => i_Setting.Filial_Id,
                                                    o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_013(i_Robot_Name      => z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                                                 i_Filial_Id => i_Setting.Filial_Id, --
                                                 i_Robot_Id => v_Robot_Id).Name,
                            i_Journal_Numbers => Get_Journal_Numbers(i_Company_Id => i_Setting.Company_Id, --
                                                                     i_Filial_Id  => i_Setting.Filial_Id, --
                                                                     i_Robot_Id   => v_Robot_Id));
      end if;
    
      if Hrm_Core.Exists_Robot_With_Booked_Trans(i_Company_Id => i_Setting.Company_Id,
                                                 i_Filial_Id  => i_Setting.Filial_Id,
                                                 o_Robot_Id   => v_Robot_Id) then
        Hrm_Error.Raise_014(z_Mrf_Robots.Load(i_Company_Id => i_Setting.Company_Id, --
                            i_Filial_Id => i_Setting.Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    
      Hrm_Core.Insert_Division_Manager_Infos(i_Company_Id => i_Setting.Company_Id,
                                             i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    if r_Setting.Advanced_Org_Structure = 'Y' and i_Setting.Advanced_Org_Structure = 'N' then
      Hrm_Core.Assert_Advanced_Org_Structure_Changeable(i_Company_Id => i_Setting.Company_Id,
                                                        i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    if i_Setting.Position_Booking = 'N' and
       r_Setting.Position_Booking <> i_Setting.Position_Booking then
      Delete_All_Book_Transactions;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Setting.Company_Id,
                                   i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  
    z_Hrm_Settings.Save_Row(i_Setting);
  
    if r_Setting.Position_Enable = 'N' and i_Setting.Position_Enable = 'Y' then
      Hrm_Core.Open_Unopened_Robots(i_Company_Id => i_Setting.Company_Id,
                                    i_Filial_Id  => i_Setting.Filial_Id);
    
      Hrm_Core.Insert_Robot_Roles(i_Company_Id => i_Setting.Company_Id,
                                  i_Filial_Id  => i_Setting.Filial_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Save(i_Wage_Scale Hrm_Wage_Scales%rowtype) is
  begin
    z_Hrm_Wage_Scales.Save_Row(i_Wage_Scale);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  ) is
  begin
    z_Hrm_Wage_Scales.Delete_One(i_Company_Id    => i_Company_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Wage_Scale_Id => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt) is
  begin
    Hrm_Core.Wage_Scale_Register_Save(i_Wage_Scale_Reg);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'Y' then
      Hrm_Error.Raise_015(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('Y'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
    r_Register Hrm_Wage_Scale_Registers%rowtype;
  begin
    r_Register := z_Hrm_Wage_Scale_Registers.Lock_Load(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Register_Id => i_Register_Id);
  
    if r_Register.Posted = 'N' then
      Hrm_Error.Raise_016(r_Register.Register_Id);
    end if;
  
    z_Hrm_Wage_Scale_Registers.Update_One(i_Company_Id  => r_Register.Company_Id,
                                          i_Filial_Id   => r_Register.Filial_Id,
                                          i_Register_Id => r_Register.Register_Id,
                                          i_Posted      => Option_Varchar2('N'));
  
    Hrm_Core.Last_Changed_Date_Refresh(i_Company_Id    => r_Register.Company_Id,
                                       i_Filial_Id     => r_Register.Filial_Id,
                                       i_Wage_Scale_Id => r_Register.Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Register_Id number
  ) is
  begin
    z_Hrm_Wage_Scale_Registers.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Register_Id => i_Register_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Robot_Org_Structure
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Robot_Id        number,
    i_New_Division_Id number,
    i_New_Job_Id      number,
    i_New_Robot_Name  varchar2
  ) is
    r_Robot        Mrf_Robots%rowtype;
    r_Hrm_Robot    Hrm_Robots%rowtype;
    r_Hrm_Division Hrm_Divisions%rowtype;
    r_Setting      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id,
                                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Division_Id Option_Number;
    v_Job_Id      Option_Number;
    v_Robot_Name  Option_Varchar2;
  begin
    if r_Setting.Position_Fixing = 'N' then
      return;
    end if;
  
    if not z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id) then
      return;
    end if;
  
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Division := z_Hrm_Divisions.Lock_Load(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Division_Id => r_Hrm_Robot.Org_Unit_Id);
  
    if r_Robot.Division_Id <> i_New_Division_Id then
      v_Division_Id := Option_Number(i_New_Division_Id);
    else
      v_Division_Id := null;
    end if;
  
    if r_Robot.Job_Id <> i_New_Job_Id then
      v_Job_Id := Option_Number(i_New_Job_Id);
    else
      v_Job_Id := null;
    end if;
  
    if r_Robot.Name <> i_New_Robot_Name then
      v_Robot_Name := Option_Varchar2(i_New_Robot_Name);
    else
      v_Robot_Name := null;
    end if;
  
    if v_Division_Id is null and v_Job_Id is null and v_Robot_Name is null then
      return;
    end if;
  
    z_Mrf_Robots.Update_One(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Robot_Id    => i_Robot_Id,
                            i_Division_Id => v_Division_Id,
                            i_Job_Id      => v_Job_Id,
                            i_Name        => v_Robot_Name);
  
    if v_Division_Id is not null and
       (r_Hrm_Division.Is_Department = 'Y' and i_New_Division_Id <> r_Hrm_Robot.Org_Unit_Id or
       r_Hrm_Division.Is_Department = 'N' and
       r_Hrm_Division.Parent_Department_Id <> i_New_Division_Id) then
      z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Robot_Id    => i_Robot_Id,
                              i_Org_Unit_Id => v_Division_Id);
    end if;
  
    for r in (select *
                from Hpd_Page_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Page_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Page_Id     => r.Page_Id,
                                   i_Division_Id => v_Division_Id,
                                   i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Hpd_Trans_Robots q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      z_Hpd_Trans_Robots.Update_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Trans_Id    => r.Trans_Id,
                                    i_Division_Id => v_Division_Id,
                                    i_Job_Id      => v_Job_Id);
    end loop;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id)
    loop
      Hpd_Core.Staff_Refresh_Cache(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => r.Staff_Id);
    
      Htt_Core.Person_Sync_Locations(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Org_Unit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Org_Unit_Id number
  ) is
    v_Org_Unit_Id number;
    r_Robot       Mrf_Robots%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    v_Org_Unit_Id := Nvl(i_Org_Unit_Id, r_Robot.Division_Id);
  
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Advanced_Org_Structure = 'N' then
      return;
    elsif v_Org_Unit_Id <> r_Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => r_Robot.Division_Id,
                                          i_Org_Unit_Id => v_Org_Unit_Id);
    end if;
  
    z_Hrm_Robots.Update_One(i_Company_Id  => r_Robot.Company_Id,
                            i_Filial_Id   => r_Robot.Filial_Id,
                            i_Robot_Id    => r_Robot.Robot_Id,
                            i_Org_Unit_Id => Option_Number(v_Org_Unit_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Roles_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_Role_Ids   Array_Number
  ) is
  begin
    for i in 1 .. i_Role_Ids.Count
    loop
      z_Hrm_Job_Roles.Insert_Try(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Job_Id     => i_Job_Id,
                                 i_Role_Id    => i_Role_Ids(i));
    end loop;
  
    delete from Hrm_Job_Roles t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Job_Id = i_Job_Id
       and t.Role_Id not member of i_Role_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Save
  (
    i_Robot Hrm_Pref.Robot_Rt,
    i_Self  boolean := false -- for hpd_core.Implicit_Robot_Save
  ) is
    r_Settings      Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => i_Robot.Robot.Company_Id,
                                                                  i_Filial_Id  => i_Robot.Robot.Filial_Id);
    r_Mrf_Robot     Mrf_Robots%rowtype;
    r_Robot         Hrm_Robots%rowtype;
    r_Old_Robot     Hrm_Robots%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Register_Id   number;
    v_Value         number;
    v_User_Id       number;
  
    --------------------------------------------------
    Function Take_Register_Indicator_Value
    (
      i_Register_Id  number,
      i_Indicator_Id number,
      i_Rank_Id      number := null
    ) return number is
      v_Value number;
    begin
      select max(q.Indicator_Value)
        into v_Value
        from Hrm_Register_Rank_Indicators q
       where q.Company_Id = i_Robot.Robot.Company_Id
         and q.Filial_Id = i_Robot.Robot.Filial_Id
         and q.Register_Id = i_Register_Id
         and q.Indicator_Id = i_Indicator_Id
         and (i_Rank_Id is null or q.Rank_Id = i_Rank_Id);
    
      return v_Value;
    exception
      when No_Data_Found then
        return null;
    end;
  
    --------------------------------------------------
    Procedure Attach_Roles
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Robot_Id     number,
      i_Role_Ids     Array_Number,
      i_Is_New_Robot boolean
    ) is
      v_Role_Ids      Array_Number := i_Role_Ids;
      v_Staff_Role_Id number := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
    begin
      if i_Is_New_Robot and not Fazo.Contains(v_Role_Ids, v_Staff_Role_Id) then
        Fazo.Push(v_Role_Ids, v_Staff_Role_Id);
      end if;
    
      for r in (select *
                  from Mrf_Robot_Roles t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Robot_Id = i_Robot_Id
                   and t.Role_Id not in (select Column_Value
                                           from table(v_Role_Ids)))
      loop
        Mrf_Api.Robot_Remove_Role(i_Company_Id => r.Company_Id,
                                  i_Robot_Id   => r.Robot_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Role_Id    => r.Role_Id);
      end loop;
    
      for i in 1 .. v_Role_Ids.Count
      loop
        Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                               i_Robot_Id   => i_Robot_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Role_Id    => v_Role_Ids(i));
      end loop;
    end;
  
  begin
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) and
       z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Old_Robot) and --
       r_Settings.Position_Enable = 'Y' and
       Hrm_Util.Access_Edit_Div_Job_Of_Robot(i_Company_Id => i_Robot.Robot.Company_Id,
                                             i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                             i_Robot_Id   => i_Robot.Robot.Robot_Id) = 'N' then
      if r_Mrf_Robot.Division_Id <> i_Robot.Robot.Division_Id then
        Hrm_Error.Raise_017(i_Robot_Name   => r_Mrf_Robot.Name,
                            i_Old_Division => z_Mhr_Divisions.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                              i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                              i_Division_Id => r_Mrf_Robot.Division_Id).Name);
      end if;
    
      if r_Mrf_Robot.Job_Id <> i_Robot.Robot.Job_Id then
        Hrm_Error.Raise_018(i_Robot_Name => r_Mrf_Robot.Name,
                            i_Old_Job    => z_Mhr_Jobs.Load(i_Company_Id => r_Mrf_Robot.Company_Id, --
                                            i_Filial_Id => r_Mrf_Robot.Filial_Id, --
                                            i_Job_Id => r_Mrf_Robot.Job_Id).Name);
      end if;
    end if;
  
    if i_Robot.Planned_Fte > 1 or i_Robot.Planned_Fte < 0 then
      Hrm_Error.Raise_020(i_Robot.Planned_Fte);
    end if;
  
    if z_Mrf_Robots.Exist_Lock(i_Company_Id => i_Robot.Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot.Robot_Id,
                               o_Row        => r_Mrf_Robot) then
      r_Mrf_Robot.Name           := i_Robot.Robot.Name;
      r_Mrf_Robot.Code           := i_Robot.Robot.Code;
      r_Mrf_Robot.Robot_Group_Id := i_Robot.Robot.Robot_Group_Id;
      r_Mrf_Robot.Division_Id    := i_Robot.Robot.Division_Id;
      r_Mrf_Robot.Job_Id         := i_Robot.Robot.Job_Id;
      r_Mrf_Robot.State          := i_Robot.Robot.State;
    
      Mrf_Api.Robot_Save(r_Mrf_Robot);
    else
      Mrf_Api.Robot_Save(i_Robot.Robot);
    end if;
  
    z_Hrm_Robots.Init(p_Row                      => r_Robot,
                      i_Company_Id               => i_Robot.Robot.Company_Id,
                      i_Filial_Id                => i_Robot.Robot.Filial_Id,
                      i_Robot_Id                 => i_Robot.Robot.Robot_Id,
                      i_Org_Unit_Id              => Nvl(i_Robot.Org_Unit_Id,
                                                        i_Robot.Robot.Division_Id),
                      i_Opened_Date              => i_Robot.Opened_Date,
                      i_Closed_Date              => i_Robot.Closed_Date,
                      i_Schedule_Id              => i_Robot.Schedule_Id,
                      i_Rank_Id                  => i_Robot.Rank_Id,
                      i_Labor_Function_Id        => i_Robot.Labor_Function_Id,
                      i_Description              => i_Robot.Description,
                      i_Hiring_Condition         => i_Robot.Hiring_Condition,
                      i_Contractual_Wage         => i_Robot.Contractual_Wage,
                      i_Access_Hidden_Salary     => i_Robot.Access_Hidden_Salary,
                      i_Currency_Id              => i_Robot.Currency_Id,
                      i_Position_Employment_Kind => Nvl(i_Robot.Position_Employment_Kind,
                                                        Hrm_Pref.c_Position_Employment_Staff));
  
    -- temporarily done to avoid taking user_id as a param
    v_User_Id := z_Mrf_Robots.Load(i_Company_Id => i_Robot.Robot.Company_Id, i_Filial_Id => i_Robot.Robot.Filial_Id, i_Robot_Id => i_Robot.Robot.Robot_Id).Modified_By;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      if r_Robot.Contractual_Wage = 'N' then
        r_Robot.Wage_Scale_Id := i_Robot.Wage_Scale_Id;
      end if;
    else
      r_Robot.Contractual_Wage := Nvl(r_Old_Robot.Contractual_Wage, 'Y');
      r_Robot.Wage_Scale_Id    := r_Old_Robot.Wage_Scale_Id;
    end if;
  
    if r_Settings.Position_Enable = 'N' and r_Old_Robot.Company_Id is not null then
      r_Robot.Opened_Date := r_Old_Robot.Opened_Date;
      r_Robot.Closed_Date := r_Old_Robot.Closed_Date;
    end if;
  
    if r_Settings.Advanced_Org_Structure = 'N' then
      r_Robot.Org_Unit_Id := i_Robot.Robot.Division_Id;
    elsif r_Robot.Org_Unit_Id <> i_Robot.Robot.Division_Id then
      Hrm_Core.Assert_Org_Unit_Department(i_Company_Id  => r_Robot.Company_Id,
                                          i_Filial_Id   => r_Robot.Filial_Id,
                                          i_Division_Id => i_Robot.Robot.Division_Id,
                                          i_Org_Unit_Id => r_Robot.Org_Unit_Id);
    end if;
  
    if r_Old_Robot.Position_Employment_Kind is not null then
      r_Robot.Position_Employment_Kind := r_Old_Robot.Position_Employment_Kind;
    end if;
  
    z_Hrm_Robots.Save_Row(r_Robot);
  
    -- save robot vacation days limits
    if i_Robot.Vacation_Days_Limit is not null then
      z_Hrm_Robot_Vacation_Limits.Save_One(i_Company_Id => r_Robot.Company_Id,
                                           i_Filial_Id  => r_Robot.Filial_Id,
                                           i_Robot_Id   => r_Robot.Robot_Id,
                                           i_Days_Limit => i_Robot.Vacation_Days_Limit);
    end if;
  
    if r_Settings.Position_Enable = 'Y' then
      Hrm_Core.Robot_Plans_Delete(i_Company_Id => r_Robot.Company_Id,
                                  i_Filial_Id  => r_Robot.Filial_Id,
                                  i_Robot_Id   => r_Robot.Robot_Id);
    
      Hrm_Core.Robot_Open(i_Company_Id  => r_Robot.Company_Id,
                          i_Filial_Id   => r_Robot.Filial_Id,
                          i_Robot_Id    => r_Robot.Robot_Id,
                          i_Open_Date   => r_Robot.Opened_Date,
                          i_Planned_Fte => i_Robot.Planned_Fte);
    
      if r_Robot.Closed_Date is not null then
        Hrm_Core.Robot_Close(i_Company_Id => r_Robot.Company_Id,
                             i_Filial_Id  => r_Robot.Filial_Id,
                             i_Robot_Id   => r_Robot.Robot_Id,
                             i_Close_Date => r_Robot.Closed_Date);
      end if;
    end if;
  
    -- save oper types and indicators
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => i_Robot.Robot.Company_Id,
                                                i_Filial_Id  => i_Robot.Robot.Filial_Id,
                                                i_Job_Id     => i_Robot.Robot.Job_Id,
                                                i_User_Id    => v_User_Id) or i_Self then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Robot.Oper_Types.Count);
    
      for i in 1 .. i_Robot.Indicators.Count
      loop
        v_Indicator := i_Robot.Indicators(i);
      
        z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                        i_Filial_Id       => r_Robot.Filial_Id,
                                        i_Robot_Id        => r_Robot.Robot_Id,
                                        i_Indicator_Id    => v_Indicator.Indicator_Id,
                                        i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Robot.Oper_Types.Count
      loop
        v_Oper_Type := i_Robot.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Robot_Oper_Types.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Oper_Type_Indicators t
                   where t.Company_Id = r_Robot.Company_Id
                     and t.Filial_Id = r_Robot.Filial_Id
                     and t.Robot_Id = r_Robot.Robot_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                                i_Filial_Id    => r_Robot.Filial_Id,
                                                i_Robot_Id     => r_Robot.Robot_Id,
                                                i_Oper_Type_Id => r.Oper_Type_Id,
                                                i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Robot_Oper_Types t
                 where t.Company_Id = r_Robot.Company_Id
                   and t.Filial_Id = r_Robot.Filial_Id
                   and t.Robot_Id = r_Robot.Robot_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Robot_Oper_Types.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Robot_Indicators q
                 where q.Company_Id = r_Robot.Company_Id
                   and q.Filial_Id = r_Robot.Filial_Id
                   and q.Robot_Id = r_Robot.Robot_Id
                   and not exists (select 1
                          from Hrm_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Robot_Id = q.Robot_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Robot_Indicators.Delete_One(i_Company_Id   => r_Robot.Company_Id,
                                          i_Filial_Id    => r_Robot.Filial_Id,
                                          i_Robot_Id     => r_Robot.Robot_Id,
                                          i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  
    -- fix not contractual wage indicator
    if r_Robot.Contractual_Wage = 'N' then
      v_Register_Id := Hrm_Util.Closest_Register_Id(i_Company_Id    => r_Robot.Company_Id,
                                                    i_Filial_Id     => r_Robot.Filial_Id,
                                                    i_Wage_Scale_Id => r_Robot.Wage_Scale_Id,
                                                    i_Period        => r_Robot.Opened_Date);
    
      for i in 1 .. i_Robot.Indicators.Count
      loop
        v_Indicator := i_Robot.Indicators(i);
      
        v_Value := Take_Register_Indicator_Value(i_Register_Id  => v_Register_Id,
                                                 i_Indicator_Id => v_Indicator.Indicator_Id,
                                                 i_Rank_Id      => r_Robot.Rank_Id);
      
        if v_Value is not null then
          z_Hrm_Robot_Indicators.Save_One(i_Company_Id      => r_Robot.Company_Id,
                                          i_Filial_Id       => r_Robot.Filial_Id,
                                          i_Robot_Id        => r_Robot.Robot_Id,
                                          i_Indicator_Id    => v_Indicator.Indicator_Id,
                                          i_Indicator_Value => v_Value);
        end if;
      end loop;
    end if;
  
    Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => r_Robot.Company_Id,
                                 i_Filial_Id            => r_Robot.Filial_Id,
                                 i_Robot_Id             => r_Robot.Robot_Id,
                                 i_Allowed_Division_Ids => i_Robot.Allowed_Division_Ids);
  
    if r_Settings.Position_Enable = 'Y' then
      Attach_Roles(i_Company_Id   => r_Robot.Company_Id,
                   i_Filial_Id    => r_Robot.Filial_Id,
                   i_Robot_Id     => r_Robot.Robot_Id,
                   i_Role_Ids     => i_Robot.Role_Ids,
                   i_Is_New_Robot => case
                                       when r_Old_Robot.Robot_Id is null then
                                        true
                                       else
                                        false
                                     end);
    end if;
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id);
  
    Hrm_Core.Staff_Refresh_Cache(i_Company_Id => r_Robot.Company_Id,
                                 i_Filial_Id  => r_Robot.Filial_Id,
                                 i_Robot_Id   => r_Robot.Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    Hrm_Core.Robot_Plans_Delete(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Robot_Id   => i_Robot_Id);
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    z_Hrm_Robots.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id);
  
    Mrf_Api.Robot_Delete(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Robot_Id   => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Hidden_Salary_Job_Groups_Save
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Robot_Id      number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    if Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Position_Enable = 'N' then
      return;
    end if;
  
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                              i_Job_Group_Id => i_Job_Group_Ids(i)) then
        z_Hrm_Robot_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => i_Robot_Id,
                                                        i_Job_Group_Id => i_Job_Group_Ids(i));
      end if;
    end loop;
  
    delete Hrm_Robot_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Restore_Robot_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Person_Id  number
  ) is
  begin
    z_Mrf_Robots.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Person_Id  => Option_Number(i_Person_Id));
  
    z_Mrf_Robot_Persons.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Save
  (
    i_Template Hrm_Pref.Job_Template_Rt,
    i_User_Id  number
  ) is
    r_Template      Hrm_Job_Templates%rowtype;
    v_Oper_Type     Href_Pref.Oper_Type_Rt;
    v_Indicator     Href_Pref.Indicator_Rt;
    v_Oper_Type_Ids Array_Number;
    v_Exists        boolean := true;
  begin
    if not z_Hrm_Job_Templates.Exist_Lock(i_Company_Id  => i_Template.Company_Id,
                                          i_Filial_Id   => i_Template.Filial_Id,
                                          i_Template_Id => i_Template.Template_Id,
                                          o_Row         => r_Template) then
      v_Exists               := false;
      r_Template.Company_Id  := i_Template.Company_Id;
      r_Template.Filial_Id   := i_Template.Filial_Id;
      r_Template.Template_Id := i_Template.Template_Id;
    end if;
  
    r_Template.Division_Id         := i_Template.Division_Id;
    r_Template.Job_Id              := i_Template.Job_Id;
    r_Template.Rank_Id             := i_Template.Rank_Id;
    r_Template.Schedule_Id         := i_Template.Schedule_Id;
    r_Template.Vacation_Days_Limit := i_Template.Vacation_Days_Limit;
  
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      r_Template.Wage_Scale_Id := i_Template.Wage_Scale_Id;
    end if;
  
    if v_Exists then
      z_Hrm_Job_Templates.Update_Row(r_Template);
    else
      z_Hrm_Job_Templates.Insert_Row(r_Template);
    end if;
  
    -- oper types
    if Hrm_Util.Has_Access_To_Hidden_Salary_Job(i_Company_Id => r_Template.Company_Id,
                                                i_Filial_Id  => r_Template.Filial_Id,
                                                i_Job_Id     => r_Template.Job_Id,
                                                i_User_Id    => i_User_Id) then
      v_Oper_Type_Ids := Array_Number();
      v_Oper_Type_Ids.Extend(i_Template.Oper_Types.Count);
    
      for i in 1 .. i_Template.Indicators.Count
      loop
        v_Indicator := i_Template.Indicators(i);
      
        z_Hrm_Template_Indicators.Save_One(i_Company_Id      => r_Template.Company_Id,
                                           i_Filial_Id       => r_Template.Filial_Id,
                                           i_Template_Id     => r_Template.Template_Id,
                                           i_Indicator_Id    => v_Indicator.Indicator_Id,
                                           i_Indicator_Value => v_Indicator.Indicator_Value);
      end loop;
    
      for i in 1 .. i_Template.Oper_Types.Count
      loop
        v_Oper_Type := i_Template.Oper_Types(i);
        v_Oper_Type_Ids(i) := v_Oper_Type.Oper_Type_Id;
      
        z_Hrm_Template_Oper_Types.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id);
      
        for j in 1 .. v_Oper_Type.Indicator_Ids.Count
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Insert_Try(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => v_Oper_Type.Oper_Type_Id,
                                                     i_Indicator_Id => v_Oper_Type.Indicator_Ids(j));
        end loop;
      
        for r in (select *
                    from Hrm_Temp_Oper_Type_Indicators t
                   where t.Company_Id = r_Template.Company_Id
                     and t.Filial_Id = r_Template.Filial_Id
                     and t.Template_Id = r_Template.Template_Id
                     and t.Oper_Type_Id = v_Oper_Type.Oper_Type_Id
                     and t.Indicator_Id not member of v_Oper_Type.Indicator_Ids)
        loop
          z_Hrm_Temp_Oper_Type_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                                     i_Filial_Id    => r_Template.Filial_Id,
                                                     i_Template_Id  => r_Template.Template_Id,
                                                     i_Oper_Type_Id => r.Oper_Type_Id,
                                                     i_Indicator_Id => r.Indicator_Id);
        end loop;
      end loop;
    
      for r in (select *
                  from Hrm_Template_Oper_Types t
                 where t.Company_Id = r_Template.Company_Id
                   and t.Filial_Id = r_Template.Filial_Id
                   and t.Template_Id = r_Template.Template_Id
                   and t.Oper_Type_Id not member of v_Oper_Type_Ids)
      loop
        z_Hrm_Template_Oper_Types.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Oper_Type_Id => r.Oper_Type_Id);
      end loop;
    
      for r in (select q.Indicator_Id
                  from Hrm_Template_Indicators q
                 where q.Company_Id = r_Template.Company_Id
                   and q.Filial_Id = r_Template.Filial_Id
                   and q.Template_Id = r_Template.Template_Id
                   and not exists (select 1
                          from Hrm_Temp_Oper_Type_Indicators w
                         where w.Company_Id = q.Company_Id
                           and w.Filial_Id = q.Filial_Id
                           and w.Template_Id = q.Template_Id
                           and w.Indicator_Id = q.Indicator_Id))
      loop
        z_Hrm_Template_Indicators.Delete_One(i_Company_Id   => r_Template.Company_Id,
                                             i_Filial_Id    => r_Template.Filial_Id,
                                             i_Template_Id  => r_Template.Template_Id,
                                             i_Indicator_Id => r.Indicator_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Template_Id number
  ) is
  begin
    z_Hrm_Job_Templates.Delete_One(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Template_Id => i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Schedule_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Schedule_Id number
  ) is
  begin
    if i_Schedule_Id is not null then
      z_Hrm_Division_Schedules.Save_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => i_Division_Id,
                                        i_Schedule_Id => i_Schedule_Id);
    else
      z_Hrm_Division_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Division_Id => i_Division_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Robot_Id    number
  ) is
    r_Setting Hrm_Settings%rowtype;
    r_Robot   Mrf_Robots%rowtype;
    r_Manager Mrf_Division_Managers%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Robot_Id   => i_Robot_Id);
    
      z_Hrm_Division_Managers.Save_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Division_Id,
                                       i_Employee_Id => r_Robot.Person_Id);
    end if;
  
    r_Manager.Company_Id  := i_Company_Id;
    r_Manager.Filial_Id   := i_Filial_Id;
    r_Manager.Division_Id := i_Division_Id;
    r_Manager.Manager_Id  := i_Robot_Id;
  
    Mrf_Api.Division_Manager_Save(r_Manager);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Manager_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      z_Hrm_Division_Managers.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    end if;
  
    Mrf_Api.Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Child_Manager
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Division_Id    number,
    i_New_Manager_Id number
  ) is
  begin
    for r in (select q.*
                from Mhr_Parent_Divisions q
                join Hrm_Divisions Hd
                  on Hd.Company_Id = q.Company_Id
                 and Hd.Filial_Id = q.Filial_Id
                 and Hd.Division_Id = q.Division_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Parent_Id = i_Division_Id
                 and Hd.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Auto
                 and q.Lvl = (select min(p.Lvl)
                                from Mhr_Parent_Divisions p
                                join Hrm_Divisions d
                                  on d.Company_Id = p.Company_Id
                                 and d.Filial_Id = p.Filial_Id
                                 and d.Division_Id = p.Parent_Id
                               where p.Company_Id = q.Company_Id
                                 and p.Filial_Id = q.Filial_Id
                                 and p.Division_Id = q.Division_Id
                                 and (p.Parent_Id = q.Parent_Id or
                                     d.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Manual)
                                 and p.Lvl <= q.Lvl))
    loop
      if i_New_Manager_Id is not null then
        Division_Manager_Save(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Division_Id => r.Division_Id,
                              i_Robot_Id    => i_New_Manager_Id);
      else
        Division_Manager_Delete(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Division_Id => r.Division_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Employee_Divisions
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Division_Ids Array_Number
  ) is
    r_Setting      Hrm_Settings%rowtype;
    v_Robot_Id     number;
    v_Division_Ids Array_Number := Array_Number();
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      begin
        select r.Robot_Id
          into v_Robot_Id
          from Mrf_Robots r
         where r.Company_Id = i_Company_Id
           and r.Filial_Id = i_Filial_Id
           and r.Person_Id = i_Employee_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Robot_Id := null;
      end;
    
      v_Division_Ids := Hrm_Util.Fix_Allowed_Divisions(i_Company_Id           => i_Company_Id,
                                                       i_Filial_Id            => i_Filial_Id,
                                                       i_Robot_Id             => v_Robot_Id,
                                                       i_Allowed_Division_Ids => i_Division_Ids);
    
      for r in (select *
                  from Href_Employee_Divisions Ed
                 where Ed.Company_Id = i_Company_Id
                   and Ed.Filial_Id = i_Filial_Id
                   and Ed.Employee_Id = i_Employee_Id
                   and Ed.Division_Id not member of v_Division_Ids)
      loop
        z_Href_Employee_Divisions.Delete_One(i_Company_Id  => r.Company_Id,
                                             i_Filial_Id   => r.Filial_Id,
                                             i_Employee_Id => r.Employee_Id,
                                             i_Division_Id => r.Division_Id);
      end loop;
    
      for i in 1 .. v_Division_Ids.Count
      loop
        z_Href_Employee_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                             i_Filial_Id   => i_Filial_Id,
                                             i_Employee_Id => i_Employee_Id,
                                             i_Division_Id => v_Division_Ids(i));
      end loop;
    
      if v_Robot_Id is not null then
        Hrm_Core.Fix_Robot_Divisions(i_Company_Id           => i_Company_Id,
                                     i_Filial_Id            => i_Filial_Id,
                                     i_Robot_Id             => v_Robot_Id,
                                     i_Allowed_Division_Ids => v_Division_Ids);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Division_Save(i_Division Hrm_Pref.Division_Rt) is
    r_Division Mhr_Divisions%rowtype := i_Division.Division;
    r_Hrm_Old  Hrm_Divisions%rowtype;
    r_Settings Hrm_Settings%rowtype := Hrm_Util.Load_Setting(i_Company_Id => r_Division.Company_Id,
                                                             i_Filial_Id  => r_Division.Filial_Id);
  
    v_Parent_Department_Id number;
    v_Is_Department        varchar2(1) := i_Division.Is_Department;
    v_Manager_Id           number := i_Division.Manager_Id;
    v_Manager_Status       varchar2(1) := Hrm_Pref.c_Division_Manager_Status_Manual;
    v_Kind_Changed         boolean := false;
    v_Parent_Changed       boolean := false;
  begin
    if v_Is_Department = 'N' and r_Settings.Advanced_Org_Structure = 'N' then
      v_Is_Department := 'Y';
    end if;
  
    if z_Hrm_Divisions.Exist_Lock(i_Company_Id  => r_Division.Company_Id,
                                  i_Filial_Id   => r_Division.Filial_Id,
                                  i_Division_Id => r_Division.Division_Id,
                                  o_Row         => r_Hrm_Old) then
      if r_Hrm_Old.Is_Department <> v_Is_Department then
        Hrm_Core.Assert_Department_Status_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                     i_Filial_Id     => r_Division.Filial_Id,
                                                     i_Division_Id   => r_Division.Division_Id,
                                                     i_Is_Department => v_Is_Department);
      
        v_Kind_Changed := true;
      end if;
    end if;
  
    Mhr_Api.Division_Save(r_Division);
  
    v_Parent_Department_Id := Hrm_Util.Closest_Parent_Department_Id(i_Company_Id  => r_Division.Company_Id,
                                                                    i_Filial_Id   => r_Division.Filial_Id,
                                                                    i_Division_Id => r_Division.Division_Id);
  
    if r_Hrm_Old.Company_Id is not null and
       not Fazo.Equal(r_Hrm_Old.Parent_Department_Id, v_Parent_Department_Id) then
      Hrm_Core.Assert_Division_Parent_Changeable(i_Company_Id    => r_Division.Company_Id,
                                                 i_Filial_Id     => r_Division.Filial_Id,
                                                 i_Division_Id   => r_Division.Division_Id,
                                                 i_Is_Department => v_Is_Department);
    
      v_Parent_Changed := true;
    end if;
  
    if v_Parent_Department_Id is null and v_Is_Department = 'N' then
      Hrm_Error.Raise_027(Hrm_Util.t_Division_Kind_Team);
    end if;
  
    if v_Is_Department = 'N' and v_Manager_Id is null then
      v_Manager_Status := Hrm_Pref.c_Division_Manager_Status_Auto;
    
      v_Manager_Id := z_Mrf_Division_Managers.Take(i_Company_Id => r_Division.Company_Id, --
                      i_Filial_Id => r_Division.Filial_Id, --
                      i_Division_Id => r_Division.Parent_Id).Manager_Id;
    end if;
  
    z_Hrm_Divisions.Save_One(i_Company_Id           => r_Division.Company_Id,
                             i_Filial_Id            => r_Division.Filial_Id,
                             i_Division_Id          => r_Division.Division_Id,
                             i_Parent_Department_Id => v_Parent_Department_Id,
                             i_Is_Department        => v_Is_Department,
                             i_Manager_Status       => v_Manager_Status,
                             i_Subfilial_Id         => i_Division.Subfilial_Id);
  
    if v_Manager_Id is not null then
      Division_Manager_Save(i_Company_Id  => r_Division.Company_Id,
                            i_Filial_Id   => r_Division.Filial_Id,
                            i_Division_Id => r_Division.Division_Id,
                            i_Robot_Id    => v_Manager_Id);
    else
      Division_Manager_Delete(i_Company_Id  => r_Division.Company_Id,
                              i_Filial_Id   => r_Division.Filial_Id,
                              i_Division_Id => r_Division.Division_Id);
    end if;
  
    Update_Child_Manager(i_Company_Id     => r_Division.Company_Id,
                         i_Filial_Id      => r_Division.Filial_Id,
                         i_Division_Id    => r_Division.Division_Id,
                         i_New_Manager_Id => v_Manager_Id);
  
    Division_Schedule_Save(i_Company_Id  => r_Division.Company_Id,
                           i_Filial_Id   => r_Division.Filial_Id,
                           i_Division_Id => r_Division.Division_Id,
                           i_Schedule_Id => i_Division.Schedule_Id);
  
    if v_Kind_Changed or v_Parent_Changed then
      Hrm_Core.Update_Parent_Departments(i_Company_Id    => r_Division.Company_Id,
                                         i_Filial_Id     => r_Division.Filial_Id,
                                         i_Division_Id   => r_Division.Division_Id,
                                         i_Old_Parent_Id => case
                                                              when r_Hrm_Old.Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               r_Hrm_Old.Parent_Department_Id
                                                            end,
                                         i_New_Parent_Id => case
                                                              when v_Is_Department = 'Y' then
                                                               r_Division.Division_Id
                                                              else
                                                               v_Parent_Department_Id
                                                            end);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Job_Bonus_Type(i_Job_Bonus_Type Hrm_Pref.Job_Bonus_Type_Rt) is
  begin
    delete from Hrm_Job_Bonus_Types q
     where q.Company_Id = i_Job_Bonus_Type.Company_Id
       and q.Filial_Id = i_Job_Bonus_Type.Filial_Id
       and q.Job_Id = i_Job_Bonus_Type.Job_Id
       and q.Bonus_Type not member of i_Job_Bonus_Type.Bonus_Types;
  
    for i in 1 .. i_Job_Bonus_Type.Bonus_Types.Count
    loop
      z_Hrm_Job_Bonus_Types.Save_One(i_Company_Id => i_Job_Bonus_Type.Company_Id,
                                     i_Filial_Id  => i_Job_Bonus_Type.Filial_Id,
                                     i_Job_Id     => i_Job_Bonus_Type.Job_Id,
                                     i_Bonus_Type => i_Job_Bonus_Type.Bonus_Types(i),
                                     i_Percentage => i_Job_Bonus_Type.Percentages(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hidden_Salary_Job_Group_Save
  (
    i_Company_Id    number,
    i_Job_Group_Ids Array_Number
  ) is
  begin
    for i in 1 .. i_Job_Group_Ids.Count
    loop
      z_Hrm_Hidden_Salary_Job_Groups.Insert_Try(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Ids(i));
    end loop;
  
    delete from Hrm_Hidden_Salary_Job_Groups q
     where q.Company_Id = i_Company_Id
       and q.Job_Group_Id not member of i_Job_Group_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Restrict_To_View_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Hrm_Error.Raise_019(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries,
                           i_Value      => i_Value);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Restrict_All_Salaries
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Hrm_Error.Raise_029(i_Value);
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Hrm_Pref.c_Pref_Restrict_All_Salaries,
                           i_Value      => i_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Set_Closed_Date_To_Robot
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Closed_Date date
  ) is
    r_Robot Mrf_Robots%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Robot_Id   => i_Robot_Id);
  
    Hrm_Util.Access_To_Set_Closed_Date(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Robot_Id   => i_Robot_Id,
                                       i_Robot_Name => r_Robot.Name);
  
    z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Robot_Id    => i_Robot_Id,
                            i_Closed_Date => Option_Date(i_Closed_Date));
  
    Hrm_Core.Robot_Close(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Robot_Id   => i_Robot_Id,
                         i_Close_Date => i_Closed_Date);
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Hrm_Api;
/

create or replace package Hrm_Audit is
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Audit_Start(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Audit_Stop(i_Company_Id number);
end Hrm_Audit;
/
create or replace package body Hrm_Audit is
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Audit_Start(i_Company_Id number) is
  begin
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOTS',
                           i_Column_List => 'ROBOT_ID,ORG_UNIT_ID,OPENED_DATE,CLOSED_DATE,SCHEDULE_ID,RANK_ID,LABOR_FUNCTION_ID,DESCRIPTION,HIRING_CONDITION,CONTRACTUAL_WAGE,WAGE_SCALE_ID,ACCESS_HIDDEN_SALARY,POSITION_EMPLOYMENT_KIND,CURRENCY_ID');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOTS_I1',
                              i_Table_Name  => 'HRM_ROBOTS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOT_DIVISIONS',
                           i_Column_List => 'ROBOT_ID,DIVISION_ID,ACCESS_TYPE',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOT_DIVISIONS_I1',
                              i_Table_Name  => 'HRM_ROBOT_DIVISIONS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOT_OPER_TYPES',
                           i_Column_List => 'ROBOT_ID,OPER_TYPE_ID',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOT_OPER_TYPES_I1',
                              i_Table_Name  => 'HRM_ROBOT_OPER_TYPES',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOT_INDICATORS',
                           i_Column_List => 'ROBOT_ID,INDICATOR_ID,INDICATOR_VALUE',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOT_INDICATORS_I1',
                              i_Table_Name  => 'HRM_ROBOT_INDICATORS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_OPER_TYPE_INDICATORS',
                           i_Column_List => 'ROBOT_ID,OPER_TYPE_ID,INDICATOR_ID',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_OPER_TYPE_INDICATORS_I1',
                              i_Table_Name  => 'HRM_OPER_TYPE_INDICATORS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOT_VACATION_LIMITS',
                           i_Column_List => 'ROBOT_ID,DAYS_LIMIT',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOT_VACATION_LIMITS_I1',
                              i_Table_Name  => 'HRM_ROBOT_VACATION_LIMITS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  
    Md_Api.Audit_Start_One(i_Company_Id  => i_Company_Id,
                           i_Table_Name  => 'HRM_ROBOT_HIDDEN_SALARY_JOB_GROUPS',
                           i_Column_List => 'ROBOT_ID,JOB_GROUP_ID',
                           i_Parent_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Create_Index(i_Index_Name  => 'HRM_ROBOT_HIDDEN_SALARY_JOB_GROUPS_I1',
                              i_Table_Name  => 'HRM_ROBOT_HIDDEN_SALARY_JOB_GROUPS',
                              i_Column_List => 'T_COMPANY_ID,T_FILIAL_ID,ROBOT_ID,T_CONTEXT_ID');
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Audit_Stop(i_Company_Id number) is
  begin
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HRM_ROBOTS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HRM_ROBOT_DIVISIONS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HRM_ROBOT_OPER_TYPES');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HRM_ROBOT_INDICATORS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id, i_Table_Name => 'HRM_OPER_TYPE_INDICATORS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id,
                          i_Table_Name => 'HRM_ROBOT_VACATION_LIMITS');
    Md_Api.Audit_Stop_One(i_Company_Id => i_Company_Id,
                          i_Table_Name => 'HRM_ROBOT_HIDDEN_SALARY_JOB_GROUPS');
  end;

end Hrm_Audit;
/

create or replace package Hrm_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Parent_Departments
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Old_Parent_Id number,
    i_New_Parent_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Department_Status_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Division_Parent_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Advanced_Org_Structure_Changeable
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Org_Unit_Department
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Org_Unit_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Robot_Roles
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Division_Manager_Infos
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Open_Unopened_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Multiple_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Booked_Trans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Position_Enabled varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Robot_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Allowed_Division_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Sync_Division_Managers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Robot_Dates
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Robots_Revise
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Robot_Transaction_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number,
    i_Tag        varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Transaction_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Plans_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Open
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Open_Date   date,
    i_Planned_Fte number := 1
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Close_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Function Robot_Occupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean := false,
    i_Tag         varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Robot_Unoccupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean := false,
    i_Tag         varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Last_Changed_Date_Refresh
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  );
end Hrm_Core;
/
create or replace package body Hrm_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Parent_Departments
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Old_Parent_Id number,
    i_New_Parent_Id number
  ) is
  begin
    update Hrm_Divisions q
       set q.Parent_Department_Id = i_New_Parent_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Parent_Department_Id = i_Old_Parent_Id
       and exists (select 1
              from Mhr_Parent_Divisions Pd
             where Pd.Company_Id = i_Company_Id
               and Pd.Filial_Id = i_Filial_Id
               and Pd.Parent_Id = i_Division_Id
               and Pd.Division_Id = q.Division_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Division_Used_In_Robots
  (
    o_Robot_Id    out number,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return boolean is
    v_Org_Unit_Ids Array_Number;
  begin
    select Qr.Division_Id
      bulk collect
      into v_Org_Unit_Ids
      from (select Dv.*
              from Mhr_Divisions Dv
              join Hrm_Divisions q
                on q.Company_Id = Dv.Company_Id
               and q.Filial_Id = Dv.Filial_Id
               and q.Division_Id = Dv.Division_Id
             where Dv.Company_Id = i_Company_Id
               and Dv.Filial_Id = i_Filial_Id
               and Dv.Division_Id in (select Pd.Division_Id
                                        from Mhr_Parent_Divisions Pd
                                       where Pd.Company_Id = i_Company_Id
                                         and Pd.Filial_Id = i_Filial_Id
                                         and Pd.Parent_Id = i_Division_Id)
               and q.Is_Department = 'N') Qr
     start with Qr.Parent_Id = i_Division_Id
    connect by Qr.Parent_Id = prior Qr.Division_Id;
  
    Fazo.Push(v_Org_Unit_Ids, i_Division_Id);
  
    select Rb.Robot_Id
      into o_Robot_Id
      from Hrm_Robots Rb
     where Rb.Company_Id = i_Company_Id
       and Rb.Filial_Id = i_Filial_Id
       and Rb.Org_Unit_Id member of v_Org_Unit_Ids
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Department_Status_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  ) is
    v_Robot_Id      number;
    v_Division_Kind varchar2(100 char) := case
                                            when i_Is_Department = 'Y' then
                                             Hrm_Util.t_Division_Kind_Department
                                            else
                                             Hrm_Util.t_Division_Kind_Team
                                          end;
    r_Settings      Hrm_Settings%rowtype;
    r_Division      Mhr_Divisions%rowtype;
    r_Robot         Mrf_Robots%rowtype;
  begin
    if Division_Used_In_Robots(o_Robot_Id    => v_Robot_Id,
                               i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Division_Id => i_Division_Id) then
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    
      r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => v_Robot_Id);
    
      if r_Settings.Position_Enable = 'Y' then
        Hrm_Error.Raise_022(i_Division_Name => r_Division.Name,
                            i_Division_Kind => v_Division_Kind,
                            i_Robot_Name    => r_Robot.Name);
      else
        Hrm_Error.Raise_021(i_Division_Name => r_Division.Name,
                            i_Division_Kind => v_Division_Kind,
                            i_Staff_Name    => z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                               i_Person_Id => r_Robot.Person_Id).Name);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Division_Parent_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  ) is
    v_Robot_Id number;
    r_Settings Hrm_Settings%rowtype;
    r_Division Mhr_Divisions%rowtype;
    r_Robot    Mrf_Robots%rowtype;
  begin
    if i_Is_Department = 'N' and
       Division_Used_In_Robots(o_Robot_Id    => v_Robot_Id,
                               i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Division_Id => i_Division_Id) then
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    
      r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => v_Robot_Id);
    
      if r_Settings.Position_Enable = 'Y' then
        Hrm_Error.Raise_024(i_Division_Name => r_Division.Name, --
                            i_Robot_Name    => r_Robot.Name);
      else
        Hrm_Error.Raise_023(i_Division_Name => r_Division.Name,
                            i_Staff_Name    => z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                               i_Person_Id => r_Robot.Person_Id).Name);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Advanced_Org_Structure_Changeable
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Division Mhr_Divisions%rowtype;
  begin
    select q.Division_Id
      into r_Division.Division_Id
      from Hrm_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Is_Department = 'N'
       and Rownum = 1;
  
    r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => r_Division.Division_Id);
  
    Hrm_Error.Raise_025(r_Division.Name);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Org_Unit_Department
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Org_Unit_Id number
  ) is
    r_Division Hrm_Divisions%rowtype;
    r_Org_Unit Hrm_Divisions%rowtype;
  begin
    r_Org_Unit := z_Hrm_Divisions.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Org_Unit_Id);
  
    r_Division := z_Hrm_Divisions.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Division_Id);
  
    if r_Division.Is_Department = 'N' then
      Hrm_Error.Raise_028(i_Division_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Division_Id).Name);
    end if;
  
    if not Fazo.Equal(r_Org_Unit.Parent_Department_Id, i_Division_Id) then
      Hrm_Error.Raise_026(i_Division_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Division_Id).Name,
                          i_Org_Unit_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Org_Unit_Id).Name);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Robot_Roles
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Staff_Role_Id number := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
  
  begin
    -- insert user roles when position enabled
    for r in (select Rb.*,
                     Nvl((select 'Y'
                           from Mrf_Robot_Persons Rp
                          where Rp.Company_Id = Rb.Company_Id
                            and Rp.Filial_Id = Rb.Filial_Id
                            and Rp.Robot_Id = Rb.Robot_Id
                            and Rownum = 1),
                         'N') Has_Person
                from Hrm_Robots Rb
               where Rb.Company_Id = i_Company_Id
                 and Rb.Filial_Id = i_Filial_Id)
    loop
      if r.Has_Person = 'N' then
        Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                               i_Robot_Id   => r.Robot_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Role_Id    => v_Staff_Role_Id);
      else
        for Rl in (select *
                     from Mrf_Robot_Persons Rp
                     join Md_User_Roles Ur
                       on Ur.Company_Id = i_Company_Id
                      and Ur.Filial_Id = i_Filial_Id
                      and Ur.User_Id = Rp.Person_Id
                    where Rp.Company_Id = i_Company_Id
                      and Rp.Filial_Id = i_Filial_Id
                      and Rp.Robot_Id = r.Robot_Id
                      and not exists (select 1
                             from Mrf_Robot_Roles p
                            where p.Company_Id = Rp.Company_Id
                              and p.Filial_Id = Rp.Filial_Id
                              and p.Robot_Id = Rp.Robot_Id
                              and p.Role_Id = Ur.Role_Id))
        loop
          Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                                 i_Robot_Id   => r.Robot_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Role_Id    => Rl.Role_Id);
        end loop;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Division_Manager_Infos
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    -- clear data before position was enabled
    delete Hrm_Division_Managers p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id;
  
    -- insert data when position enabled
    for r in (select p.Division_Id, p.Manager_Id, q.Person_Id
                from Mrf_Division_Managers p
                join Mrf_Robots q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Robot_Id = p.Manager_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and exists (select *
                        from Mhr_Employees t
                       where t.Company_Id = q.Company_Id
                         and t.Filial_Id = q.Filial_Id
                         and t.Employee_Id = q.Person_Id))
    loop
      z_Hrm_Division_Managers.Insert_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => r.Division_Id,
                                         i_Employee_Id => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Open_Unopened_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    for r in (select *
                from Hrm_Robots p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and not exists (select *
                        from Hrm_Robot_Transactions q
                       where q.Company_Id = p.Company_Id
                         and q.Filial_Id = p.Filial_Id
                         and q.Robot_Id = p.Robot_Id))
    loop
      Robot_Open(i_Company_Id => r.Company_Id,
                 i_Filial_Id  => r.Filial_Id,
                 i_Robot_Id   => r.Robot_Id,
                 i_Open_Date  => r.Opened_Date);
    
      if r.Closed_Date is not null then
        Robot_Close(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Robot_Id   => r.Robot_Id,
                    i_Close_Date => r.Closed_Date);
      end if;
    end loop;
  
    Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Multiple_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean is
  begin
    select Qr.Robot_Id
      into o_Robot_Id
      from (select p.Robot_Id
              from Hpd_Page_Robots p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
             group by p.Robot_Id
            having count(*) > 1) Qr
     where Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Booked_Trans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean is
  begin
    select q.Robot_Id
      into o_Robot_Id
      from Hrm_Robot_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Fte_Kind = Hrm_Pref.c_Fte_Kind_Booked
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    r_Settings Hrm_Settings%rowtype;
  begin
    r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Settings.Position_Enable = 'N' then
      return;
    end if;
  
    for r in (select Ac.Staff_Id
                from Mrf_Robot_Persons Rp
                join Hpd_Agreements_Cache Ac
                  on Ac.Company_Id = Rp.Company_Id
                 and Ac.Filial_Id = Rp.Filial_Id
                 and Ac.Robot_Id = Rp.Robot_Id
                 and Trunc(sysdate) between Ac.Begin_Date and Ac.End_Date
               where Rp.Company_Id = i_Company_Id
                 and Rp.Filial_Id = i_Filial_Id
                 and Rp.Robot_Id = i_Robot_Id)
    loop
      Hpd_Core.Staff_Refresh_Cache(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Position_Enabled varchar2
  ) is
    v_Person_Ids Array_Number;
    v_Person_Id  number;
    v_Date       date := Trunc(sysdate);
  begin
    select q.Person_Id
      bulk collect
      into v_Person_Ids
      from (select (select s.Employee_Id
                      from Href_Staffs s
                     where s.Company_Id = i_Company_Id
                       and s.Filial_Id = i_Filial_Id
                       and s.Staff_Id = r.Staff_Id) as Person_Id
              from Hrm_Robot_Transactions t
              join Hpd_Robot_Trans_Staffs r
                on t.Company_Id = r.Company_Id
               and t.Filial_Id = r.Filial_Id
               and t.Trans_Id = r.Robot_Trans_Id
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Robot_Id = i_Robot_Id
               and t.Trans_Date <= v_Date
               and t.Fte_Kind = Hrm_Pref.c_Fte_Kind_Occupied
             group by r.Staff_Id
            having sum(t.Fte) > 0) q
     group by q.Person_Id;
  
    -- clear unnecessary persons
    for r in (select *
                from Mrf_Robot_Persons Rp
               where Rp.Company_Id = i_Company_Id
                 and Rp.Filial_Id = i_Filial_Id
                 and Rp.Robot_Id = i_Robot_Id
                 and Rp.Person_Id not member of v_Person_Ids)
    loop
      z_Mrf_Robot_Persons.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Person_Id  => r.Person_Id);
    
      if i_Position_Enabled = 'Y' then
        Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Person_Id  => r.Person_Id);
      end if;
    end loop;
  
    -- insert persons
    if v_Person_Ids.Count > 0 then
      for i in 1 .. v_Person_Ids.Count
      loop
        if not z_Mrf_Robot_Persons.Exist(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Robot_Id   => i_Robot_Id,
                                         i_Person_Id  => v_Person_Ids(i)) then
          z_Mrf_Robot_Persons.Insert_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Robot_Id   => i_Robot_Id,
                                         i_Person_Id  => v_Person_Ids(i));
          if i_Position_Enabled = 'Y' then
            Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => v_Person_Ids(i));
          end if;
        end if;
      end loop;
    
      v_Person_Id := v_Person_Ids(1);
    end if;
  
    z_Mrf_Robots.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Person_Id  => Option_Number(v_Person_Id));
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
    r_Settings    Hrm_Settings%rowtype;
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => r.Filial_Id);
    
      for Rbt in (select *
                    from Hrm_Robots q
                   where q.Company_Id = r.Company_Id
                     and q.Filial_Id = r.Filial_Id
                     and v_Date between q.Opened_Date and Nvl(q.Closed_Date, Href_Pref.c_Max_Date))
      loop
        Robot_Person_Refresh_Cache(i_Company_Id       => Rbt.Company_Id,
                                   i_Filial_Id        => Rbt.Filial_Id,
                                   i_Robot_Id         => Rbt.Robot_Id,
                                   i_Position_Enabled => r_Settings.Position_Enable);
      end loop;
    
      if r_Settings.Position_Enable = 'Y' then
        Mrf_Api.Gen_Robot_Person_Roles;
      else
        delete Mrf_Dirty_Robot_Persons;
      end if;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Robot_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Allowed_Division_Ids Array_Number
  ) is
  begin
    for r in (select *
                from Hrm_Robot_Divisions Rd
               where Rd.Company_Id = i_Company_Id
                 and Rd.Filial_Id = i_Filial_Id
                 and Rd.Robot_Id = i_Robot_Id
                 and Rd.Division_Id not member of
               i_Allowed_Division_Ids
                 and Rd.Access_Type = Hrm_Pref.c_Access_Type_Manual)
    loop
      z_Hrm_Robot_Divisions.Delete_One(i_Company_Id  => r.Company_Id,
                                       i_Filial_Id   => r.Filial_Id,
                                       i_Robot_Id    => r.Robot_Id,
                                       i_Division_Id => r.Division_Id);
    end loop;
  
    for i in 1 .. i_Allowed_Division_Ids.Count
    loop
      z_Hrm_Robot_Divisions.Save_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Robot_Id    => i_Robot_Id,
                                     i_Division_Id => i_Allowed_Division_Ids(i),
                                     i_Access_Type => Hrm_Pref.c_Access_Type_Manual);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Sync_Division_Managers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Setting      Hrm_Settings%rowtype;
    r_Staff        Href_Staffs%rowtype;
    r_Manager      Mrf_Division_Managers%rowtype;
    v_Division_Ids Array_Number := Array_Number();
    v_Curr_Date    date := Trunc(sysdate);
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Staff_Kind <> Href_Pref.c_Staff_Kind_Primary then
      return;
    end if;
  
    -- refresh robot manual accesses
    if r_Staff.State = 'A' and v_Curr_Date between r_Staff.Hiring_Date and
       Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date) then
      select Ed.Division_Id
        bulk collect
        into v_Division_Ids
        from Href_Employee_Divisions Ed
       where Ed.Company_Id = i_Company_Id
         and Ed.Filial_Id = i_Filial_Id
         and Ed.Employee_Id = r_Staff.Employee_Id;
    
      v_Division_Ids := Hrm_Util.Fix_Allowed_Divisions(i_Company_Id           => i_Company_Id,
                                                       i_Filial_Id            => i_Filial_Id,
                                                       i_Robot_Id             => r_Staff.Robot_Id,
                                                       i_Allowed_Division_Ids => v_Division_Ids);
    end if;
  
    Fix_Robot_Divisions(i_Company_Id           => i_Company_Id,
                        i_Filial_Id            => i_Filial_Id,
                        i_Robot_Id             => r_Staff.Robot_Id,
                        i_Allowed_Division_Ids => v_Division_Ids);
  
    -- refresh division manager robot
    if r_Staff.State = 'A' and v_Curr_Date between r_Staff.Hiring_Date and
       Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date) then
      r_Manager.Company_Id := i_Company_Id;
      r_Manager.Filial_Id  := i_Filial_Id;
      r_Manager.Manager_Id := r_Staff.Robot_Id;
    
      for r in (select *
                  from Hrm_Division_Managers p
                 where p.Company_Id = i_Company_Id
                   and p.Filial_Id = i_Filial_Id
                   and p.Employee_Id = r_Staff.Employee_Id)
      loop
        r_Manager.Division_Id := r.Division_Id;
      
        Mrf_Api.Division_Manager_Save(r_Manager);
      end loop;
    else
      for r in (select *
                  from Hrm_Division_Managers p
                 where p.Company_Id = i_Company_Id
                   and p.Filial_Id = i_Filial_Id
                   and p.Employee_Id = r_Staff.Employee_Id)
      loop
        Mrf_Api.Division_Manager_Delete(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Division_Id => r.Division_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Href_Pref.c_Pc_Verifix_Hr);
    
      for St in (select q.Company_Id, q.Filial_Id, q.Staff_Id
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date + 1 >= v_Date))
      loop
        Sync_Division_Managers(i_Company_Id => St.Company_Id,
                               i_Filial_Id  => St.Filial_Id,
                               i_Staff_Id   => St.Staff_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Turnover
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    for r in (select q.*,
                     (select w.Name
                        from Mrf_Robots w
                       where w.Robot_Id = q.Robot_Id) name
                from Hrm_Robot_Turnover q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id
                 and not (q.Planed_Fte between 0 and 1 and q.Booked_Fte between 0 and 1 and
                      q.Occupied_Fte between 0 and 1 and q.Fte between 0 and 1)
               order by q.Period)
    loop
      if not r.Planed_Fte between 0 and 1 then
        Hrm_Error.Raise_001(i_Robot_Id   => r.Robot_Id,
                            i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Planed_Fte => r.Planed_Fte);
      end if;
    
      if not r.Booked_Fte between 0 and 1 then
        Hrm_Error.Raise_002(i_Robot_Id   => r.Robot_Id,
                            i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Booked_Fte => r.Booked_Fte);
      end if;
    
      if not r.Occupied_Fte between 0 and 1 then
        Hrm_Error.Raise_003(i_Name         => r.Name,
                            i_Period       => r.Period,
                            i_Occupied_Fte => r.Occupied_Fte);
      end if;
    
      if not r.Fte between 0 and 1 then
        if r.Fte > 1 then
          Hrm_Error.Raise_004(i_Name => r.Name, i_Period => r.Period);
        end if;
      
        Hrm_Error.Raise_005(i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Exceed_Fte => r.Occupied_Fte + r.Booked_Fte - r.Planed_Fte,
                            i_Booked_Fte => r.Booked_Fte);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Robot_Dates
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    r_Setting       Hrm_Settings%rowtype;
    v_Last_Occupy   Hrm_Robot_Transactions%rowtype;
    v_Last_Planned  Hrm_Robot_Transactions%rowtype;
    v_First_Planned Hrm_Robot_Transactions%rowtype;
    v_First_Occupy  Hrm_Robot_Transactions%rowtype;
    v_Insert_Close  boolean := false;
    v_Remove_Close  boolean := false;
    v_Insert_Open   boolean := false;
    v_Remove_Open   boolean := false;
  
    --------------------------------------------------
    Procedure Assert_Booked_Transaction_Not_Exist is
      v_Date date;
    begin
      select p.Trans_Date
        into v_Date
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = Hrm_Pref.c_Fte_Kind_Booked
         and Rownum = 1;
    
      Hrm_Error.Raise_006(i_Robot_Id => i_Robot_Id, i_Trans_Date => v_Date);
    exception
      when No_Data_Found then
        null;
    end;
  
    -------------------------------------------------- 
    Function Last_Trans
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number,
      i_Fte_Kind   varchar2
    ) return Hrm_Robot_Transactions%rowtype is
      v_Trans Hrm_Robot_Transactions%rowtype;
    begin
      select p.*
        into v_Trans
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = i_Fte_Kind
         and p.Trans_Date = (select max(q.Trans_Date)
                               from Hrm_Robot_Transactions q
                              where q.Company_Id = p.Company_Id
                                and q.Filial_Id = p.Filial_Id
                                and q.Robot_Id = p.Robot_Id
                                and q.Fte_Kind = p.Fte_Kind);
    
      return v_Trans;
    exception
      when No_Data_Found then
        return null;
    end;
  
    -------------------------------------------------- 
    Function First_Trans
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number,
      i_Fte_Kind   varchar2
    ) return Hrm_Robot_Transactions%rowtype is
      v_Trans Hrm_Robot_Transactions%rowtype;
    begin
      select p.*
        into v_Trans
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = i_Fte_Kind
         and p.Trans_Date = (select min(q.Trans_Date)
                               from Hrm_Robot_Transactions q
                              where q.Company_Id = p.Company_Id
                                and q.Filial_Id = p.Filial_Id
                                and q.Robot_Id = p.Robot_Id
                                and q.Fte_Kind = p.Fte_Kind);
    
      return v_Trans;
    exception
      when No_Data_Found then
        return null;
    end;
  
    --------------------------------------------------
    Procedure Update_Robot_Closed_Date
    (
      i_Company_Id        number,
      i_Filial_Id         number,
      i_Robot_Id          number,
      i_Remove_Close      boolean,
      i_Insert_Close      boolean,
      i_First_Occupy_Date date,
      i_Last_Occupy_Date  date
    ) is
      v_Close_Date date;
    begin
      if i_Insert_Close then
        v_Close_Date := i_Last_Occupy_Date;
      end if;
    
      z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Robot_Id    => i_Robot_Id,
                              i_Opened_Date => case
                                                 when i_First_Occupy_Date is not null then
                                                  Option_Date(i_First_Occupy_Date)
                                                 else
                                                  null
                                               end,
                              i_Closed_Date => case
                                                 when i_Insert_Close or i_Remove_Close then
                                                  Option_Date(v_Close_Date - 1)
                                                 else
                                                  null
                                               end);
    end;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    Assert_Booked_Transaction_Not_Exist;
  
    v_Last_Occupy   := Last_Trans(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Robot_Id   => i_Robot_Id,
                                  i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Occupied);
    v_Last_Planned  := Last_Trans(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Robot_Id   => i_Robot_Id,
                                  i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed);
    v_First_Occupy  := First_Trans(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Occupied);
    v_First_Planned := First_Trans(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed);
  
    if v_Last_Occupy.Fte < 0 then
      v_Remove_Close := v_Last_Planned.Trans_Date <> v_Last_Occupy.Trans_Date and
                        v_Last_Planned.Fte < 0;
    
      v_Insert_Close := v_Last_Planned.Company_Id is null or v_Last_Planned.Fte > 0 or
                        v_Remove_Close;
    else
      v_Remove_Close := v_Last_Planned.Fte < 0;
    end if;
  
    if v_First_Occupy.Company_Id is null then
      v_Remove_Open := v_First_Planned.Company_Id is not null;
    else
      v_Remove_Open := v_First_Planned.Trans_Date <> v_First_Occupy.Trans_Date and
                       v_First_Planned.Fte > 0;
    
      v_Insert_Open := v_First_Planned.Company_Id is null or v_First_Planned.Fte < 0 or
                       v_Remove_Open;
    end if;
  
    if v_Remove_Close then
      Robot_Transaction_Delete(i_Company_Id => v_Last_Planned.Company_Id,
                               i_Filial_Id  => v_Last_Planned.Filial_Id,
                               i_Trans_Id   => v_Last_Planned.Trans_Id);
    end if;
  
    if v_Insert_Close then
      Robot_Close(i_Company_Id => v_Last_Occupy.Company_Id,
                  i_Filial_Id  => v_Last_Occupy.Filial_Id,
                  i_Robot_Id   => v_Last_Occupy.Robot_Id,
                  i_Close_Date => v_Last_Occupy.Trans_Date - 1);
    end if;
  
    if v_Remove_Open then
      Robot_Transaction_Delete(i_Company_Id => v_First_Planned.Company_Id,
                               i_Filial_Id  => v_First_Planned.Filial_Id,
                               i_Trans_Id   => v_First_Planned.Trans_Id);
    end if;
  
    if v_Insert_Open then
      Robot_Open(i_Company_Id => v_First_Occupy.Company_Id,
                 i_Filial_Id  => v_First_Occupy.Filial_Id,
                 i_Robot_Id   => v_First_Occupy.Robot_Id,
                 i_Open_Date  => v_First_Occupy.Trans_Date);
    end if;
  
    Update_Robot_Closed_Date(i_Company_Id        => i_Company_Id,
                             i_Filial_Id         => i_Filial_Id,
                             i_Robot_Id          => i_Robot_Id,
                             i_Remove_Close      => v_Remove_Close,
                             i_Insert_Close      => v_Insert_Close,
                             i_First_Occupy_Date => v_First_Occupy.Trans_Date,
                             i_Last_Occupy_Date  => v_Last_Occupy.Trans_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Robots_Revise
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Settings Hrm_Settings%rowtype;
  begin
    r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    for r in (select *
                from Hrm_Dirty_Robots Dr
               where Dr.Company_Id = i_Company_Id
                 and Dr.Filial_Id = i_Filial_Id)
    loop
      Revise_Robot_Dates(i_Company_Id => r.Company_Id,
                         i_Filial_Id  => r.Filial_Id,
                         i_Robot_Id   => r.Robot_Id);
    
      Check_Turnover(i_Company_Id => r.Company_Id,
                     i_Filial_Id  => r.Filial_Id,
                     i_Robot_Id   => r.Robot_Id);
    
      Robot_Person_Refresh_Cache(i_Company_Id       => r.Company_Id,
                                 i_Filial_Id        => r.Filial_Id,
                                 i_Robot_Id         => r.Robot_Id,
                                 i_Position_Enabled => r_Settings.Position_Enable);
    end loop;
  
    if r_Settings.Position_Enable = 'Y' then
      Mrf_Api.Gen_Robot_Person_Roles;
    else
      delete Mrf_Dirty_Robot_Persons;
    end if;
  
    delete Hrm_Dirty_Robots Dr
     where Dr.Company_Id = i_Company_Id
       and Dr.Filial_Id = i_Filial_Id;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Make_Dirty_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hrm_Dirty_Robots q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id;
  exception
    when No_Data_Found then
      insert into Hrm_Dirty_Robots
        (Company_Id, Filial_Id, Robot_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Turnover_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number
  ) is
    v_Periods      Array_Date;
    v_Planed_Fte   number := 0;
    v_Booked_Fte   number := 0;
    v_Occupied_Fte number := 0;
    --------------------------------------------------
    Procedure Insert_Turnover is
      g Hrm_Robot_Turnover%rowtype;
    begin
      for r in (select *
                  from (select *
                          from Hrm_Robot_Turnover t
                         where t.Company_Id = i_Company_Id
                           and t.Filial_Id = i_Filial_Id
                           and t.Robot_Id = i_Robot_Id
                           and t.Period < i_Trans_Date
                         order by t.Period desc)
                 where Rownum = 1)
      loop
        g              := r;
        g.Period       := i_Trans_Date;
        g.Planed_Fte   := g.Planed_Fte + v_Planed_Fte;
        g.Booked_Fte   := g.Booked_Fte + v_Booked_Fte;
        g.Occupied_Fte := g.Occupied_Fte + v_Occupied_Fte;
      
        z_Hrm_Robot_Turnover.Insert_Row(g);
        return;
      end loop;
    
      g.Company_Id   := i_Company_Id;
      g.Filial_Id    := i_Filial_Id;
      g.Robot_Id     := i_Robot_Id;
      g.Period       := i_Trans_Date;
      g.Planed_Fte   := v_Planed_Fte;
      g.Booked_Fte   := v_Booked_Fte;
      g.Occupied_Fte := v_Occupied_Fte;
    
      z_Hrm_Robot_Turnover.Insert_Row(g);
    end;
  begin
    case i_Fte_Kind
      when Hrm_Pref.c_Fte_Kind_Planed then
        v_Planed_Fte := i_Fte;
      when Hrm_Pref.c_Fte_Kind_Booked then
        v_Booked_Fte := i_Fte;
      when Hrm_Pref.c_Fte_Kind_Occupied then
        v_Occupied_Fte := i_Fte;
      else
        Hrm_Error.Raise_007;
    end case;
  
    z_Hrm_Robots.Lock_Only(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Robot_Id   => i_Robot_Id);
  
    update Hrm_Robot_Turnover q
       set q.Planed_Fte   = q.Planed_Fte + v_Planed_Fte,
           q.Booked_Fte   = q.Booked_Fte + v_Booked_Fte,
           q.Occupied_Fte = q.Occupied_Fte + v_Occupied_Fte
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Period >= i_Trans_Date
    returning q.Period bulk collect into v_Periods;
  
    if i_Trans_Date not member of v_Periods then
      Insert_Turnover;
    end if;
  
    Make_Dirty_Robot(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Robot_Id   => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Transaction_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number,
    i_Tag        varchar2
  ) return number is
    v_Trans_Id number := Hrm_Robot_Transactions_Sq.Nextval;
  begin
    z_Hrm_Robot_Transactions.Insert_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => v_Trans_Id,
                                        i_Robot_Id   => i_Robot_Id,
                                        i_Trans_Date => i_Trans_Date,
                                        i_Fte_Kind   => i_Fte_Kind,
                                        i_Fte        => i_Fte,
                                        i_Tag        => i_Tag);
  
    Robot_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Trans_Date => i_Trans_Date,
                            i_Fte_Kind   => i_Fte_Kind,
                            i_Fte        => i_Fte);
  
    return v_Trans_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Transaction_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number
  ) is
    r_Transaction Hrm_Robot_Transactions%rowtype;
  begin
    r_Transaction := z_Hrm_Robot_Transactions.Load(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Trans_Id   => i_Trans_Id);
  
    Robot_Turnover_Evaluate(i_Company_Id => r_Transaction.Company_Id,
                            i_Filial_Id  => r_Transaction.Filial_Id,
                            i_Robot_Id   => r_Transaction.Robot_Id,
                            i_Trans_Date => r_Transaction.Trans_Date,
                            i_Fte_Kind   => r_Transaction.Fte_Kind,
                            i_Fte        => -1 * r_Transaction.Fte);
  
    z_Hrm_Robot_Transactions.Delete_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => i_Trans_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Plans_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    for r in (select *
                from Hrm_Robot_Transactions p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Robot_Id = i_Robot_Id
                 and p.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
               order by p.Trans_Date desc)
    loop
      Robot_Transaction_Delete(i_Company_Id => r.Company_Id,
                               i_Filial_Id  => r.Filial_Id,
                               i_Trans_Id   => r.Trans_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Open
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Open_Date   date,
    i_Planned_Fte number := 1
  ) is
    v_Id number;
  begin
    v_Id := Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Trans_Date => i_Open_Date,
                                     i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed,
                                     i_Fte        => i_Planned_Fte,
                                     i_Tag        => 'robot open');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Close_Date date
  ) is
    v_Id          number;
    v_Planned_Fte number;
  begin
    v_Planned_Fte := Hrm_Util.Get_Planned_Fte(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Robot_Id   => i_Robot_Id,
                                              i_Period     => i_Close_Date);
  
    v_Id := Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Trans_Date => i_Close_Date + 1,
                                     i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed,
                                     i_Fte        => -v_Planned_Fte,
                                     i_Tag        => 'robot close');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Occupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean,
    i_Tag         varchar2
  ) return number is
    v_Fte_Kind varchar2(1) := Hrm_Pref.c_Fte_Kind_Occupied;
  begin
    if i_Is_Booked then
      v_Fte_Kind := Hrm_Pref.c_Fte_Kind_Booked;
    end if;
  
    return Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Trans_Date => i_Occupy_Date,
                                    i_Fte_Kind   => v_Fte_Kind,
                                    i_Fte        => i_Fte,
                                    i_Tag        => i_Tag);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Unoccupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean,
    i_Tag         varchar2
  ) return number is
    v_Fte_Kind varchar2(1) := Hrm_Pref.c_Fte_Kind_Occupied;
  begin
    if i_Is_Booked then
      v_Fte_Kind := Hrm_Pref.c_Fte_Kind_Booked;
    end if;
  
    return Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Trans_Date => i_Occupy_Date,
                                    i_Fte_Kind   => v_Fte_Kind,
                                    i_Fte        => -1 * i_Fte,
                                    i_Tag        => i_Tag);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt) is
    r_Register          Hrm_Wage_Scale_Registers%rowtype;
    r_Reg_Ranks         Hrm_Register_Ranks%rowtype;
    r_Reg_Indicator     Hrm_Register_Rank_Indicators%rowtype;
    r_Indicator         Href_Indicators%rowtype;
    v_Rank_Ids          Array_Number;
    v_Indicator_Ids     Array_Number;
    v_Reg_Rank          Hrm_Pref.Register_Ranks_Rt;
    v_Reg_Indicator     Hrm_Pref.Register_Rank_Indicator_Rt;
    v_Round_Model       Round_Model;
    v_Wage_Exists       boolean := false;
    v_Wage_Indicator_Id number := Href_Util.Indicator_Id(i_Company_Id => i_Wage_Scale_Reg.Company_Id,
                                                         i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage);
    v_Exists            boolean;
  begin
    if z_Hrm_Wage_Scale_Registers.Exist_Lock(i_Company_Id  => i_Wage_Scale_Reg.Company_Id,
                                             i_Filial_Id   => i_Wage_Scale_Reg.Filial_Id,
                                             i_Register_Id => i_Wage_Scale_Reg.Register_Id,
                                             o_Row         => r_Register) then
      if r_Register.Posted = 'Y' then
        Hrm_Error.Raise_008(r_Register.Register_Id);
      end if;
    
      v_Exists := true;
    else
      r_Register.Company_Id  := i_Wage_Scale_Reg.Company_Id;
      r_Register.Filial_Id   := i_Wage_Scale_Reg.Filial_Id;
      r_Register.Register_Id := i_Wage_Scale_Reg.Register_Id;
      r_Register.Posted      := 'N';
    
      v_Exists := false;
    end if;
  
    r_Register.Register_Date   := i_Wage_Scale_Reg.Register_Date;
    r_Register.Register_Number := i_Wage_Scale_Reg.Register_Number;
    r_Register.Wage_Scale_Id   := i_Wage_Scale_Reg.Wage_Scale_Id;
    r_Register.Valid_From      := i_Wage_Scale_Reg.Valid_From;
    r_Register.Note            := i_Wage_Scale_Reg.Note;
  
    if i_Wage_Scale_Reg.With_Base_Wage = 'Y' then
      if i_Wage_Scale_Reg.Round_Model is null then
        Hrm_Error.Raise_009;
      else
        r_Register.Round_Model := i_Wage_Scale_Reg.Round_Model;
        v_Round_Model          := Round_Model(r_Register.Round_Model);
      end if;
    
      if i_Wage_Scale_Reg.Base_Wage is null then
        Hrm_Error.Raise_010;
      else
        r_Register.Base_Wage := i_Wage_Scale_Reg.Base_Wage;
      end if;
    else
      r_Register.Round_Model := null;
      r_Register.Base_Wage   := null;
    end if;
  
    if v_Exists then
      z_Hrm_Wage_Scale_Registers.Update_Row(r_Register);
    else
      if r_Register.Register_Number is null then
        r_Register.Register_Number := Md_Core.Gen_Number(i_Company_Id => i_Wage_Scale_Reg.Company_Id,
                                                         i_Filial_Id  => i_Wage_Scale_Reg.Filial_Id,
                                                         i_Table      => Zt.Hrm_Wage_Scale_Registers,
                                                         i_Column     => z.Register_Number);
      end if;
    
      z_Hrm_Wage_Scale_Registers.Insert_Row(r_Register);
    end if;
  
    v_Rank_Ids := Array_Number();
    v_Rank_Ids.Extend(i_Wage_Scale_Reg.Ranks.Count);
  
    if i_Wage_Scale_Reg.Ranks.Count = 0 then
      Hrm_Error.Raise_011;
    end if;
  
    for i in 1 .. i_Wage_Scale_Reg.Ranks.Count
    loop
      v_Reg_Rank := i_Wage_Scale_Reg.Ranks(i);
    
      v_Rank_Ids(i) := v_Reg_Rank.Rank_Id;
    
      r_Reg_Ranks.Company_Id  := r_Register.Company_Id;
      r_Reg_Ranks.Filial_Id   := r_Register.Filial_Id;
      r_Reg_Ranks.Register_Id := r_Register.Register_Id;
      r_Reg_Ranks.Rank_Id     := v_Reg_Rank.Rank_Id;
      r_Reg_Ranks.Order_No    := i;
    
      z_Hrm_Register_Ranks.Save_Row(r_Reg_Ranks);
    
      v_Indicator_Ids := Array_Number();
      v_Indicator_Ids.Extend(v_Reg_Rank.Indicators.Count);
    
      for j in 1 .. v_Reg_Rank.Indicators.Count
      loop
        v_Reg_Indicator := v_Reg_Rank.Indicators(j);
        v_Indicator_Ids(j) := v_Reg_Indicator.Indicator_Id;
      
        if not v_Wage_Exists and v_Wage_Indicator_Id = v_Reg_Indicator.Indicator_Id then
          v_Wage_Exists := true;
        end if;
      
        r_Indicator := z_Href_Indicators.Load(i_Company_Id   => r_Reg_Ranks.Company_Id,
                                              i_Indicator_Id => v_Reg_Indicator.Indicator_Id);
      
        if r_Indicator.Used = Href_Pref.c_Indicator_Used_Automatically then
          Hrm_Error.Raise_032(i_Register_Number => r_Register.Register_Number,
                              i_Indicator_Name  => r_Indicator.Name);
        end if;
      
        r_Reg_Indicator.Company_Id      := r_Reg_Ranks.Company_Id;
        r_Reg_Indicator.Filial_Id       := r_Reg_Ranks.Filial_Id;
        r_Reg_Indicator.Register_Id     := r_Reg_Ranks.Register_Id;
        r_Reg_Indicator.Rank_Id         := r_Reg_Ranks.Rank_Id;
        r_Reg_Indicator.Indicator_Id    := v_Reg_Indicator.Indicator_Id;
        r_Reg_Indicator.Indicator_Value := v_Reg_Indicator.Indicator_Value;
      
        if i_Wage_Scale_Reg.With_Base_Wage = 'Y' then
          if v_Reg_Indicator.Coefficient is null then
            Hrm_Error.Raise_012;
          else
            r_Reg_Indicator.Coefficient     := v_Reg_Indicator.Coefficient;
            r_Reg_Indicator.Indicator_Value := v_Round_Model.Eval(r_Register.Base_Wage *
                                                                  r_Reg_Indicator.Coefficient);
          end if;
        end if;
      
        z_Hrm_Register_Rank_Indicators.Save_Row(r_Reg_Indicator);
      end loop;
    
      if not v_Wage_Exists then
        Hrm_Error.Raise_031(r_Register.Register_Number);
      end if;
    
      -- remove unnecessary indicators
      delete from Hrm_Register_Rank_Indicators w
       where w.Company_Id = r_Reg_Ranks.Company_Id
         and w.Filial_Id = r_Reg_Ranks.Filial_Id
         and w.Register_Id = r_Reg_Ranks.Register_Id
         and w.Rank_Id = r_Reg_Ranks.Rank_Id
         and w.Indicator_Id not member of v_Indicator_Ids;
    end loop;
  
    -- remove unnecessary ranks
    delete from Hrm_Register_Ranks w
     where w.Company_Id = r_Register.Company_Id
       and w.Filial_Id = r_Register.Filial_Id
       and w.Register_Id = r_Register.Register_Id
       and w.Rank_Id not member of v_Rank_Ids;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Last_Changed_Date_Refresh
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  ) is
    v_Last_Changed_Date date;
  begin
    begin
      select max(r.Valid_From)
        into v_Last_Changed_Date
        from Hrm_Wage_Scale_Registers r
       where r.Company_Id = i_Company_Id
         and r.Filial_Id = i_Filial_Id
         and r.Wage_Scale_Id = i_Wage_Scale_Id
         and r.Posted = 'Y';
    exception
      when No_Data_Found then
        null;
    end;
  
    z_Hrm_Wage_Scales.Update_One(i_Company_Id        => i_Company_Id,
                                 i_Filial_Id         => i_Filial_Id,
                                 i_Wage_Scale_Id     => i_Wage_Scale_Id,
                                 i_Last_Changed_Date => Option_Date(v_Last_Changed_Date));
  end;

end Hrm_Core;
/

create or replace package Hrm_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Planed_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Booked_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Name         varchar2,
    i_Period       date,
    i_Occupied_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Name   varchar2,
    i_Period date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Name       varchar2,
    i_Period     date,
    i_Exceed_Fte number,
    i_Booked_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Robot_Id   number,
    i_Trans_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Robot_Name      varchar2,
    i_Journal_Numbers Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Robot_Name   varchar2,
    i_Old_Division varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Robot_Name varchar2,
    i_Old_Job    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Value varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Value number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Staff_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Division_Name varchar2,
    i_Staff_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Division_Name varchar2,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Division_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Division_Name varchar2,
    i_Org_Unit_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Division_Kind varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Division_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Value varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Register_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Register_Number varchar2,
    i_Indicator_Name  varchar2
  );
end Hrm_Error;
/
create or replace package body Hrm_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Href_Pref.c_Hrm_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Planed_Fte number
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:planed_fte robot not between range, robot_id=$1, robot_name=$2, period=$3, planed_fte=$4',
                         i_Robot_Id,
                         i_Name,
                         i_Period,
                         i_Planed_Fte),
          i_Title   => t('001:title:planned fte exceeded'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Booked_Fte number
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:cannot book fte ($1{booked_fte}) for robot $2{robot_name}, exceeded range between 0 and 1. booked_fte = $3{booked_fte}',
                         i_Name,
                         i_Period,
                         i_Booked_Fte),
          i_Title   => t('002:title:book fte exceeded'),
          i_S1      => t('002:solution:book less fte for robot $1{robot_id}', i_Robot_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Name         varchar2,
    i_Period       date,
    i_Occupied_Fte number
  ) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:cannot occupy fte ($1{occupied_fte}) for robot $2{robot_name}, exceeded range between 0 and 1',
                         i_Name,
                         i_Period,
                         i_Occupied_Fte),
          i_Title   => t('003:title:occupied fte exceeded'),
          i_S1      => t('003:solution:choose another fte kind with less fte value'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Name   varchar2,
    i_Period date
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:planned fte exceeded for robot $1{robot_name} on $2{period}',
                         i_Name,
                         i_Period),
          i_Title   => t('004:title:planned fte exceeded'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Name       varchar2,
    i_Period     date,
    i_Exceed_Fte number,
    i_Booked_Fte number
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:robot $1{robot_name} has $2{exceed_fte} exceeding fte on $3{exceed_period}',
                         i_Name,
                         i_Exceed_Fte,
                         i_Period),
          i_Title   => t('005:title:not enough fte'),
          i_S1      => t('005:solution:choose another fte kind with less fte value'),
          i_S2      => case
                         when i_Booked_Fte > 0 then
                          t('005:solution:book less fte')
                         else
                          null
                       end);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Robot_Id   number,
    i_Trans_Date date
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:implicitly created robot cannot have booked transaction, robot_id=$1, trans_date=$2',
                         i_Robot_Id,
                         i_Trans_Date));
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007 is
  begin
    Error(i_Code => '007', i_Message => t('007:message:robot turnover fte kind not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Register_Id number) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:cannot change/save wage register. wage register $1{register_id} already posted',
                         i_Register_Id),
          i_S1      => t('008:solution:post wage register with changes'),
          i_S2      => t('008:solution:unpost wage register then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009 is
  begin
    Error(i_Code => '009', i_Message => t('009:message:wage register round model must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010 is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:wage register base wage model must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011 is
  begin
    Error(i_Code => '011', i_Message => t('011:message:cannot save register without ranks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012 is
  begin
    Error(i_Code => '012', i_Message => t('012:message:wage register coefficient must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Robot_Name      varchar2,
    i_Journal_Numbers Array_Varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:cannot disable positions, robot $1{robot_name} was used by multiple staffs',
                         i_Robot_Name),
          i_S1      => t('013:solution:remove robot from all but one journals $1{journal_numbers}',
                         Fazo.Gather(i_Journal_Numbers, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:cannot disable positions, robot $1{robot_name} has booked fte',
                         i_Robot_Name),
          i_S1      => t('014:solution:remove all bookings for robot $1{robot_name}', i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Register_Id number) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:cannot post wage register. wage register $1{register_id} already posted',
                         i_Register_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Register_Id number) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:to unpost register $1{register_id} it should be initially posted',
                         i_Register_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Robot_Name   varchar2,
    i_Old_Division varchar2
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:cannot save robot $1{robot_name}, division change is not allowed',
                         i_Robot_Name),
          i_Title   => t('017:title:cannot change division'),
          i_S1      => t('017:solution:restore old division ($1{old_division}) and try again',
                         i_Old_Division));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Robot_Name varchar2,
    i_Old_Job    varchar2
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:cannot save robot $1{robot_name}, job change is not allowed',
                         i_Robot_Name),
          i_Title   => t('018:title:cannot change job'),
          i_S1      => t('018:solution:restore old job ($1{old_job}) and try again', i_Old_Job));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Value varchar2) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:restrict view hidden salaries value must be in (Y, N), value: $1{value}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Value number) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:planned fte should be between 0 and 1, value: $1{planned_fte}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:division $1{division_name} could not become $1{division_kind_name} because staff $3{staff_name} will change its department as result',
                         i_Division_Name,
                         i_Division_Kind,
                         i_Staff_Name),
          i_Title   => t('021:title:org structure'),
          i_S1      => t('021:solution:manually change department for staff $1{staff_name}',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:division $1{division_name} could not become $1{division_kind_name} because robot $3{robot_name} will change its department as result',
                         i_Division_Name,
                         i_Division_Kind,
                         i_Robot_Name),
          i_Title   => t('022:title:org structure'),
          i_S1      => t('022:solution:manually change department for robot $1{robot_name}',
                         i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Division_Name varchar2,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:division $1{division_name} could not change its parent because staff $2{staff_name} will change its department as result',
                         i_Division_Name,
                         i_Staff_Name),
          i_Title   => t('023:title:org structure'),
          i_S1      => t('023:solution:manually change department for staff $1{staff_name}',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Division_Name varchar2,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:division $1{division_name} could not change its parent because robot $2{robot_name} will change its department as result',
                         i_Division_Name,
                         i_Robot_Name),
          i_Title   => t('024:title:org structure'),
          i_S1      => t('024:solution:manually change department for robot $1{robot_name}',
                         i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Division_Name varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:could not change org structure settings because division $1{division_name} uses advanced settings',
                         i_Division_Name),
          i_Title   => t('025:title:org structure'),
          i_S1      => t('025:solution:remove or change all divisions that are not departments'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Division_Name varchar2,
    i_Org_Unit_Name varchar2
  ) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:org unit $1{org_unit_name} is not a child of division $2{division_name}',
                         i_Org_Unit_Name,
                         i_Division_Name),
          i_Title   => t('026:title:org structure'),
          i_S1      => t('026:solution:choose a child of division $1{division_name}',
                         i_Division_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Division_Kind varchar2) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:$1{division_kind} division should have parent department',
                         i_Division_Kind),
          i_Title   => t('027:title:org structure'),
          i_S1      => t('027:solution:set parent division from departments'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Division_Name varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:robot must be assigned to department'),
          i_Title   => t('028:title:org structure'),
          i_S1      => t('028:solution:change division $1{division_name} to department',
                         i_Division_Name),
          i_S2      => t('028:solution:choose another division'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Value varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:restrict all salaries value must be in (Y, N), value: $1{value}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:you cannot set closed date for $1{robot_name}', i_Robot_Name),
          i_Title   => t('030:title:find robot persons'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Register_Number varchar2) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:for save wage scale register, wage must be set, $1{register_number}',
                         i_Register_Number),
          i_Title   => t('031:title:wage not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Register_Number varchar2,
    i_Indicator_Name  varchar2
  ) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:indicator must be system indicator, register number: $1{register_number}, indicator name : $2{indicator_name}',
                         i_Register_Number,
                         i_Indicator_Name),
          i_Title   => t('032:title:indicator is not system indicator'));
  end;

end Hrm_Error;
/

create or replace package Hrm_Pref is
  ----------------------------------------------------------------------------------------------------  
  type Register_Rank_Indicator_Rt is record(
    Indicator_Id    number(20),
    Indicator_Value number(20, 6),
    Coefficient     number);
  type Regiser_Rank_Indicator_Nt is table of Register_Rank_Indicator_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Register_Ranks_Rt is record(
    Rank_Id    number,
    Indicators Regiser_Rank_Indicator_Nt);
  type Register_Ranks_Nt is table of Register_Ranks_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Wage_Scale_Register_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Register_Id     number,
    Register_Date   date,
    Register_Number varchar2(50),
    Wage_Scale_Id   number,
    With_Base_Wage  varchar2(1),
    Round_Model     varchar2(5),
    Base_Wage       number(20, 6),
    Valid_From      date,
    Posted          varchar2(1),
    Note            varchar2(300 char),
    Ranks           Register_Ranks_Nt);
  ----------------------------------------------------------------------------------------------------
  type Robot_Rt is record(
    Robot                    Mrf_Robots%rowtype,
    Org_Unit_Id              number,
    Opened_Date              date,
    Closed_Date              date,
    Schedule_Id              number(20),
    Rank_Id                  number(20),
    Labor_Function_Id        number(20),
    Description              varchar2(300 char),
    Hiring_Condition         varchar2(300 char),
    Vacation_Days_Limit      number(20),
    Contractual_Wage         varchar2(1),
    Wage_Scale_Id            number(20),
    Access_Hidden_Salary     varchar2(1),
    Position_Employment_Kind varchar2(1),
    Planned_Fte              number,
    Currency_Id              number(20),
    Role_Ids                 Array_Number,
    Allowed_Division_Ids     Array_Number,
    Indicators               Href_Pref.Indicator_Nt,
    Oper_Types               Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------  
  type Job_Template_Rt is record(
    Company_Id          number,
    Filial_Id           number,
    Template_Id         number,
    Division_Id         number,
    Job_Id              number,
    Rank_Id             number,
    Schedule_Id         number,
    Vacation_Days_Limit number,
    Wage_Scale_Id       number,
    Indicators          Href_Pref.Indicator_Nt,
    Oper_Types          Href_Pref.Oper_Type_Nt);
  ----------------------------------------------------------------------------------------------------
  type Job_Bonus_Type_Rt is record(
    Company_Id  number,
    Filial_Id   number,
    Job_Id      number,
    Bonus_Types Array_Varchar2,
    Percentages Array_Number);
  ---------------------------------------------------------------------------------------------------- 
  type Division_Rt is record(
    Division      Mhr_Divisions%rowtype,
    Schedule_Id   number,
    Manager_Id    number,
    Is_Department varchar2(1),
    Subfilial_Id  number);
  ----------------------------------------------------------------------------------------------------
  -- employment type
  ----------------------------------------------------------------------------------------------------
  c_Employment_Type_Main_Job          constant varchar2(1) := 'M';
  c_Employment_Type_External_Parttime constant varchar2(1) := 'E';
  c_Employment_Type_Internal_Parttime constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- fte kind
  ----------------------------------------------------------------------------------------------------
  c_Fte_Kind_Planed   constant varchar2(1) := 'P';
  c_Fte_Kind_Booked   constant varchar2(1) := 'B';
  c_Fte_Kind_Occupied constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------  
  -- access type
  ----------------------------------------------------------------------------------------------------
  c_Access_Type_Structural constant varchar2(1) := 'S';
  c_Access_Type_Manual     constant varchar2(1) := 'M';
  ----------------------------------------------------------------------------------------------------  
  -- bonus type
  ----------------------------------------------------------------------------------------------------
  c_Bonus_Type_Personal_Sales      constant varchar2(1) := 'P';
  c_Bonus_Type_Department_Sales    constant varchar2(1) := 'D';
  c_Bonus_Type_Successful_Delivery constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- restrict to view all salaries
  ----------------------------------------------------------------------------------------------------
  c_Pref_Restrict_To_View_All_Salaries constant varchar2(200) := 'VHR:HRM:RESTRICT_TO_VIEW_ALL_SALARIES';
  c_Pref_Restrict_All_Salaries         constant varchar2(200) := 'VHR:HRM:RESTRICT_ALL_SALARIES';
  ----------------------------------------------------------------------------------------------------
  --- manager status of division 
  ----------------------------------------------------------------------------------------------------
  c_Division_Manager_Status_Manual constant varchar2(1) := 'M';
  c_Division_Manager_Status_Auto   constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Position Employment Kind
  ----------------------------------------------------------------------------------------------------
  c_Position_Employment_Contractor constant varchar2(1) := 'C';
  c_Position_Employment_Staff      constant varchar2(1) := 'S';
end Hrm_Pref;
/
create or replace package body Hrm_Pref is
end Hrm_Pref;
/

create or replace package Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ---------------------------------------------------------------------------------------------------- 
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2 := null,
    i_Round_Model     varchar2 := null,
    i_Base_Wage       number := null,
    i_Valid_From      date,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                    out Hrm_Pref.Robot_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Robot_Id                 number,
    i_Name                     varchar2,
    i_Code                     varchar2,
    i_Robot_Group_Id           number,
    i_Division_Id              number,
    i_Job_Id                   number,
    i_Org_Unit_Id              number,
    i_State                    varchar2,
    i_Opened_Date              date,
    i_Closed_Date              date,
    i_Schedule_Id              number,
    i_Rank_Id                  number,
    i_Vacation_Days_Limit      number,
    i_Labor_Function_Id        number,
    i_Description              varchar2,
    i_Hiring_Condition         varchar2,
    i_Contractual_Wage         varchar2,
    i_Wage_Scale_Id            number,
    i_Access_Hidden_Salary     varchar2,
    i_Position_Employment_Kind varchar2 := Hrm_Pref.c_Position_Employment_Staff,
    i_Planned_Fte              number := 1,
    i_Currency_Id              number,
    i_Role_Ids                 Array_Number := Array_Number(),
    i_Allowed_Division_Ids     Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date;
  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage_Scale_Indicator_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Indicator_Id  number,
    i_Period        date,
    i_Rank_Id       number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number;
  ----------------------------------------------------------------------------------------------------  
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Restrict_All_Salaries(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------   
  Procedure Access_To_Set_Closed_Date
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Robot_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2;
  Function Bonus_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2;
  Function t_Division_Kind_Team return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment(i_Employment_Kind varchar2) return varchar2;
  Function Position_Employments return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------   
  Function t_Robot_Division_Access_Type(i_Access_Type varchar2) return varchar2;
  Function Robot_Division_Access_Types return Matrix_Varchar2;
end Hrm_Util;
/
create or replace package body Hrm_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Setting
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hrm_Settings%rowtype Result_Cache is
    result Hrm_Settings%rowtype;
  begin
    if not z_Hrm_Settings.Exist(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                o_Row        => result) then
      Result.Company_Id             := i_Company_Id;
      Result.Filial_Id              := i_Filial_Id;
      Result.Position_Enable        := 'N';
      Result.Position_Check         := 'N';
      Result.Keep_Rank              := 'N';
      Result.Keep_Salary            := 'N';
      Result.Keep_Schedule          := 'N';
      Result.Keep_Vacation_Limit    := 'N';
      Result.Position_Booking       := 'N';
      Result.Position_History       := 'N';
      Result.Position_Fixing        := 'N';
      Result.Parttime_Enable        := 'N';
      Result.Rank_Enable            := 'N';
      Result.Wage_Scale_Enable      := 'N';
      Result.Notification_Enable    := 'N';
      Result.Autogen_Staff_Number   := 'Y';
      Result.Advanced_Org_Structure := 'N';
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Template
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number
  ) return Hrm_Job_Templates%rowtype is
    r_Template Hrm_Job_Templates%rowtype;
  begin
    if i_Rank_Id is not null then
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id = i_Rank_Id;
    else
      select s.*
        into r_Template
        from Hrm_Job_Templates s
       where s.Company_Id = i_Company_Id
         and s.Filial_Id = i_Filial_Id
         and s.Division_Id = i_Division_Id
         and s.Job_Id = i_Job_Id
         and s.Rank_Id is null;
    end if;
  
    return r_Template;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Pos_History
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'N' then
      b.Raise_Error(t('initially, to do enabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Enabled_Position
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      b.Raise_Error(t('initially, to do enabling position'));
    end if;
  
    if r_Setting.Position_History = 'Y' then
      b.Raise_Error(t('initially, to do disabling position history'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Division_Id number,
    i_Job_Id      number,
    i_Rank_Id     number := null
  ) return varchar2 is
    v_Name varchar2(200 char);
    result varchar2(200 char);
  begin
    v_Name := z_Mhr_Divisions.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Division_Id => i_Division_Id).Name;
  
    result := '/' || v_Name || '/(' || i_Robot_Id || ')';
  
    if i_Rank_Id is not null then
      v_Name := z_Mhr_Ranks.Load(i_Company_Id => i_Company_Id, --
                i_Filial_Id => i_Filial_Id, --
                i_Rank_Id => i_Rank_Id).Name;
    
      result := ', ' || v_Name || result;
    end if;
  
    v_Name := z_Mhr_Jobs.Load(i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Job_Id => i_Job_Id).Name;
  
    return v_Name || result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Wage_Scale_Register_New
  (
    o_Register        out Hrm_Pref.Wage_Scale_Register_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Register_Id     number,
    i_Register_Date   date,
    i_Register_Number varchar2,
    i_Wage_Scale_Id   number,
    i_With_Base_Wage  varchar2,
    i_Round_Model     varchar2,
    i_Base_Wage       number,
    i_Valid_From      date,
    i_Note            varchar2
  ) is
  begin
    o_Register.Company_Id      := i_Company_Id;
    o_Register.Filial_Id       := i_Filial_Id;
    o_Register.Register_Id     := i_Register_Id;
    o_Register.Register_Date   := i_Register_Date;
    o_Register.Register_Number := i_Register_Number;
    o_Register.Wage_Scale_Id   := i_Wage_Scale_Id;
    o_Register.With_Base_Wage  := i_With_Base_Wage;
    o_Register.Round_Model     := i_Round_Model;
    o_Register.Base_Wage       := i_Base_Wage;
    o_Register.Valid_From      := i_Valid_From;
    o_Register.Note            := i_Note;
  
    o_Register.Ranks := Hrm_Pref.Register_Ranks_Nt();
  end;
  ----------------------------------------------------------------------------------------------------  
  Procedure Register_Add_Rank
  (
    p_Register in out nocopy Hrm_Pref.Wage_Scale_Register_Rt,
    i_Rank_Id  number
  ) is
    v_Rank Hrm_Pref.Register_Ranks_Rt;
  begin
    v_Rank.Rank_Id    := i_Rank_Id;
    v_Rank.Indicators := Hrm_Pref.Regiser_Rank_Indicator_Nt();
  
    p_Register.Ranks.Extend();
    p_Register.Ranks(p_Register.Ranks.Count) := v_Rank;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_New
  (
    o_Robot                    out Hrm_Pref.Robot_Rt,
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Robot_Id                 number,
    i_Name                     varchar2,
    i_Code                     varchar2,
    i_Robot_Group_Id           number,
    i_Division_Id              number,
    i_Job_Id                   number,
    i_Org_Unit_Id              number,
    i_State                    varchar2,
    i_Opened_Date              date,
    i_Closed_Date              date,
    i_Schedule_Id              number,
    i_Rank_Id                  number,
    i_Vacation_Days_Limit      number,
    i_Labor_Function_Id        number,
    i_Description              varchar2,
    i_Hiring_Condition         varchar2,
    i_Contractual_Wage         varchar2,
    i_Wage_Scale_Id            number,
    i_Access_Hidden_Salary     varchar2,
    i_Position_Employment_Kind varchar2 := Hrm_Pref.c_Position_Employment_Staff,
    i_Planned_Fte              number := 1,
    i_Currency_Id              number,
    i_Role_Ids                 Array_Number,
    i_Allowed_Division_Ids     Array_Number
  ) is
  begin
    z_Mrf_Robots.Init(p_Row            => o_Robot.Robot,
                      i_Company_Id     => i_Company_Id,
                      i_Filial_Id      => i_Filial_Id,
                      i_Robot_Id       => i_Robot_Id,
                      i_Name           => i_Name,
                      i_Code           => i_Code,
                      i_Robot_Group_Id => i_Robot_Group_Id,
                      i_Division_Id    => i_Division_Id,
                      i_Job_Id         => i_Job_Id,
                      i_State          => i_State);
  
    o_Robot.Org_Unit_Id              := i_Org_Unit_Id;
    o_Robot.Opened_Date              := i_Opened_Date;
    o_Robot.Closed_Date              := i_Closed_Date;
    o_Robot.Schedule_Id              := i_Schedule_Id;
    o_Robot.Rank_Id                  := i_Rank_Id;
    o_Robot.Vacation_Days_Limit      := i_Vacation_Days_Limit;
    o_Robot.Labor_Function_Id        := i_Labor_Function_Id;
    o_Robot.Description              := i_Description;
    o_Robot.Hiring_Condition         := i_Hiring_Condition;
    o_Robot.Contractual_Wage         := i_Contractual_Wage;
    o_Robot.Wage_Scale_Id            := i_Wage_Scale_Id;
    o_Robot.Access_Hidden_Salary     := i_Access_Hidden_Salary;
    o_Robot.Planned_Fte              := i_Planned_Fte;
    o_Robot.Position_Employment_Kind := i_Position_Employment_Kind;
    o_Robot.Currency_Id              := i_Currency_Id;
    o_Robot.Allowed_Division_Ids     := i_Allowed_Division_Ids;
    o_Robot.Role_Ids                 := i_Role_Ids;
  
    o_Robot.Indicators := Href_Pref.Indicator_Nt();
    o_Robot.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Add
  (
    p_Robot         in out nocopy Hrm_Pref.Robot_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Robot.Oper_Types.Extend;
    p_Robot.Oper_Types(p_Robot.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Robot           in out nocopy Hrm_Pref.Robot_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Robot.Indicators.Extend;
    p_Robot.Indicators(p_Robot.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Job_Template_New
  (
    o_Template            out Hrm_Pref.Job_Template_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Template_Id         number,
    i_Division_Id         number,
    i_Job_Id              number,
    i_Rank_Id             number,
    i_Schedule_Id         number,
    i_Vacation_Days_Limit number,
    i_Wage_Scale_Id       number
  ) is
  begin
    o_Template.Company_Id          := i_Company_Id;
    o_Template.Filial_Id           := i_Filial_Id;
    o_Template.Template_Id         := i_Template_Id;
    o_Template.Division_Id         := i_Division_Id;
    o_Template.Job_Id              := i_Job_Id;
    o_Template.Rank_Id             := i_Rank_Id;
    o_Template.Schedule_Id         := i_Schedule_Id;
    o_Template.Vacation_Days_Limit := i_Vacation_Days_Limit;
    o_Template.Wage_Scale_Id       := i_Wage_Scale_Id;
  
    o_Template.Indicators := Href_Pref.Indicator_Nt();
    o_Template.Oper_Types := Href_Pref.Oper_Type_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Oper_Type
  (
    p_Template      in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Oper_Type_Id  number,
    i_Indicator_Ids Array_Number
  ) is
    v_Oper_Type Href_Pref.Oper_Type_Rt;
  begin
    v_Oper_Type.Oper_Type_Id  := i_Oper_Type_Id;
    v_Oper_Type.Indicator_Ids := i_Indicator_Ids;
  
    p_Template.Oper_Types.Extend;
    p_Template.Oper_Types(p_Template.Oper_Types.Count) := v_Oper_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Job_Temp_Add_Indicator
  (
    p_Template        in out nocopy Hrm_Pref.Job_Template_Rt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Template.Indicators.Extend;
    p_Template.Indicators(p_Template.Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  -- job bonus type
  ----------------------------------------------------------------------------------------------------
  Procedure Job_Bonus_Type_New
  (
    o_Job_Bonus_Type in out Hrm_Pref.Job_Bonus_Type_Rt,
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Job_Id         number,
    i_Bonus_Types    Array_Varchar2,
    i_Percentages    Array_Number
  ) is
  begin
    o_Job_Bonus_Type.Company_Id  := i_Company_Id;
    o_Job_Bonus_Type.Filial_Id   := i_Filial_Id;
    o_Job_Bonus_Type.Job_Id      := i_Job_Id;
    o_Job_Bonus_Type.Bonus_Types := i_Bonus_Types;
    o_Job_Bonus_Type.Percentages := i_Percentages;
  end;

  ----------------------------------------------------------------------------------------------------
  -- division
  ----------------------------------------------------------------------------------------------------
  Procedure Division_New
  (
    o_Division      out Hrm_Pref.Division_Rt,
    i_Division      Mhr_Divisions%rowtype,
    i_Schedule_Id   number,
    i_Manager_Id    number,
    i_Is_Department varchar2,
    i_Subfilial_Id  number := null
  ) is
  begin
    o_Division.Division      := i_Division;
    o_Division.Schedule_Id   := i_Schedule_Id;
    o_Division.Manager_Id    := i_Manager_Id;
    o_Division.Is_Department := i_Is_Department;
    o_Division.Subfilial_Id  := i_Subfilial_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Register_Change_Dates
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Begin_Date    date,
    i_End_Date      date
  ) return Array_Date is
    result Array_Date;
  begin
    select q.Valid_From
      bulk collect
      into result
      from Hrm_Wage_Scale_Registers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Wage_Scale_Id = i_Wage_Scale_Id
       and q.Valid_From between i_Begin_Date and i_End_Date
       and q.Posted = 'Y';
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Closest_Parent_Department_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return number is
    result number;
  begin
    select Pd.Parent_Id
      into result
      from Mhr_Parent_Divisions Pd
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Division_Id = i_Division_Id
       and Pd.Lvl = (select min(q.Lvl)
                       from Mhr_Parent_Divisions q
                       join Hrm_Divisions p
                         on p.Company_Id = q.Company_Id
                        and p.Filial_Id = q.Filial_Id
                        and p.Division_Id = q.Parent_Id
                      where q.Company_Id = i_Company_Id
                        and q.Filial_Id = i_Filial_Id
                        and q.Division_Id = i_Division_Id
                        and p.Is_Department = 'Y');
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage_Scale_Indicator_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Indicator_Id  number,
    i_Period        date,
    i_Rank_Id       number
  ) return number is
    result number;
  begin
    select r.Indicator_Value
      into result
      from Hrm_Wage_Scale_Registers t
      join Hrm_Register_Rank_Indicators r
        on r.Company_Id = t.Company_Id
       and r.Filial_Id = t.Filial_Id
       and r.Register_Id = t.Register_Id
       and r.Rank_Id = i_Rank_Id
       and r.Indicator_Id = i_Indicator_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Wage
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date,
    i_Rank_Id       number
  ) return number is
  begin
    return Closest_Wage_Scale_Indicator_Value(i_Company_Id    => i_Company_Id,
                                              i_Filial_Id     => i_Filial_Id,
                                              i_Wage_Scale_Id => i_Wage_Scale_Id,
                                              i_Indicator_Id  => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                                                        i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                              i_Period        => i_Period,
                                              i_Rank_Id       => i_Rank_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Wage
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Contractual_Wage varchar2,
    i_Wage_Scale_Id    number,
    i_Rank_Id          number
  ) return number is
    v_Current_Date      date := Trunc(sysdate);
    v_Wage_Indicator_Id number;
  
    ----------------------------------------------------------------------------------------------------
    Function Get_Max_Wage_Scale return number is
      result number;
    begin
      select (select max(r.Indicator_Value)
                from Hrm_Register_Rank_Indicators r
               where r.Company_Id = t.Company_Id
                 and r.Filial_Id = t.Filial_Id
                 and r.Register_Id = t.Register_Id
                 and r.Indicator_Id =
                     Href_Util.Indicator_Id(i_Company_Id => r.Company_Id,
                                            i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage))
        into result
        from Hrm_Wage_Scale_Registers t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Wage_Scale_Id = i_Wage_Scale_Id
         and t.Valid_From <= v_Current_Date
         and t.Posted = 'Y'
       order by t.Valid_From desc
       fetch first row only;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Contractual_Wage = 'N' then
      if i_Rank_Id is null then
        return Get_Max_Wage_Scale;
      end if;
    
      return Hrm_Util.Closest_Wage(i_Company_Id    => i_Company_Id,
                                   i_Filial_Id     => i_Filial_Id,
                                   i_Wage_Scale_Id => i_Wage_Scale_Id,
                                   i_Period        => v_Current_Date,
                                   i_Rank_Id       => i_Rank_Id);
    end if;
  
    v_Wage_Indicator_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage);
  
    return z_Hrm_Robot_Indicators.Take(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Robot_Id     => i_Robot_Id,
                                       i_Indicator_Id => v_Wage_Indicator_Id).Indicator_Value;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Closest_Register_Id
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number,
    i_Period        date
  ) return number is
    result number;
  begin
    select t.Register_Id
      into result
      from Hrm_Wage_Scale_Registers t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Wage_Scale_Id = i_Wage_Scale_Id
       and t.Valid_From <= i_Period
       and t.Posted = 'Y'
     order by t.Valid_From
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fix_Allowed_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number := null,
    i_Allowed_Division_Ids Array_Number
  ) return Array_Number is
    v_Is_Child                boolean;
    v_Structural_Division_Ids Array_Number;
    v_Allowed_Division_Ids    Array_Number := Nvl(i_Allowed_Division_Ids, Array_Number());
    result                    Array_Number := Array_Number();
  begin
    if i_Robot_Id is not null then
      select d.Division_Id
        bulk collect
        into v_Structural_Division_Ids
        from Hrm_Robot_Divisions d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Robot_Id = i_Robot_Id
         and d.Access_Type = Hrm_Pref.c_Access_Type_Structural;
    
      v_Allowed_Division_Ids := v_Allowed_Division_Ids multiset Except v_Structural_Division_Ids;
    end if;
  
    for i in 1 .. v_Allowed_Division_Ids.Count
    loop
      v_Is_Child := false;
    
      for j in 1 .. v_Allowed_Division_Ids.Count
      loop
        if z_Mhr_Parent_Divisions.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Division_Id => v_Allowed_Division_Ids(i),
                                        i_Parent_Id   => v_Allowed_Division_Ids(j)) then
          v_Is_Child := true;
          exit;
        end if;
      end loop;
    
      if not v_Is_Child then
        Fazo.Push(result, v_Allowed_Division_Ids(i));
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_User_Setting          varchar2(1);
    v_Restrict_All_Salaries varchar2(1);
  begin
    v_User_Setting := Href_Util.Access_Hidden_Salary(i_Company_Id => i_Company_Id,
                                                     i_User_Id    => i_User_Id);
    if v_User_Setting = 'Y' then
      return 'Y';
    else
      v_Restrict_All_Salaries := Hrm_Util.Restrict_All_Salaries(i_Company_Id);
    
      if v_Restrict_All_Salaries = 'N' then
        if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                i_Job_Group_Id => i_Job_Group_Id) then
          if z_Href_Person_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                          i_Person_Id    => i_User_Id,
                                                          i_Job_Group_Id => i_Job_Group_Id) then
            return 'Y';
          else
            return 'N';
          end if;
        else
          return 'Y';
        end if;
      else
        if z_Href_Person_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Person_Id    => i_User_Id,
                                                        i_Job_Group_Id => i_Job_Group_Id) then
          return 'Y';
        else
          return 'N';
        end if;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Access_To_Hidden_Salary
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_User_Id      number,
    i_Job_Group_Id number
  ) return varchar2 is
    v_Robot_Setting         varchar2(1);
    v_Restrict_All_Salaries varchar2(1) := Hrm_Util.Restrict_All_Salaries(i_Company_Id);
    v_User_Robot_Ids        Array_Number;
  begin
    select q.Robot_Id
      bulk collect
      into v_User_Robot_Ids
      from Mrf_Robot_Persons q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_User_Id;
  
    for i in 1 .. v_User_Robot_Ids.Count
    loop
      v_Robot_Setting := Nvl(z_Hrm_Robots.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Robot_Id => v_User_Robot_Ids(i)).Access_Hidden_Salary,
                             'N');
    
      if v_Robot_Setting = 'Y' then
        return 'Y';
      else
        if v_Restrict_All_Salaries = 'N' then
          if z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                  i_Job_Group_Id => i_Job_Group_Id) then
            if z_Hrm_Robot_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                          i_Filial_Id    => i_Filial_Id,
                                                          i_Robot_Id     => v_User_Robot_Ids(i),
                                                          i_Job_Group_Id => i_Job_Group_Id) then
              return 'Y';
            else
              continue;
            end if;
          else
            return 'Y';
          end if;
        else
          if z_Hrm_Robot_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                        i_Filial_Id    => i_Filial_Id,
                                                        i_Robot_Id     => v_User_Robot_Ids(i),
                                                        i_Job_Group_Id => i_Job_Group_Id) then
            return 'Y';
          else
            continue;
          end if;
        end if;
      end if;
    end loop;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return varchar2 is
    v_Job_Group_Id number;
    r_Setting      Hrm_Settings%rowtype;
  begin
    if i_User_Id = Md_Pref.User_Admin(i_Company_Id) --
       or Hrm_Util.Restrict_To_View_All_Salaries(i_Company_Id) = 'N' then
      return 'Y';
    end if;
  
    v_Job_Group_Id := z_Mhr_Jobs.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Job_Id => i_Job_Id).Job_Group_Id;
  
    if v_Job_Group_Id is null --
       or (Hrm_Util.Restrict_All_Salaries(i_Company_Id) = 'N' and
       not z_Hrm_Hidden_Salary_Job_Groups.Exist(i_Company_Id   => i_Company_Id,
                                                    i_Job_Group_Id => v_Job_Group_Id)) then
      return 'Y';
    end if;
  
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, --
                                       i_Filial_Id  => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'N' then
      return User_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                          i_User_Id      => i_User_Id,
                                          i_Job_Group_Id => v_Job_Group_Id);
    else
      return Robot_Access_To_Hidden_Salary(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_User_Id      => i_User_Id,
                                           i_Job_Group_Id => v_Job_Group_Id);
    
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Access_To_Hidden_Salary_Job
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number,
    i_User_Id    number
  ) return boolean is
  begin
    return Access_To_Hidden_Salary_Job(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Job_Id     => i_Job_Id,
                                       i_User_Id    => i_User_Id) = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_Edit_Div_Job_Of_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'N'
      into v_Dummy
      from Hpd_Page_Robots q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and Rownum = 1;
  
    return v_Dummy;
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Planned_Fte
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Period     date := Trunc(sysdate)
  ) return number is
    v_Planned_Fte number;
  begin
    select q.Fte
      into v_Planned_Fte
      from Hrm_Robot_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
       and q.Fte > 0
       and q.Trans_Date = (select max(t.Trans_Date)
                             from Hrm_Robot_Transactions t
                            where t.Company_Id = q.Company_Id
                              and t.Filial_Id = q.Filial_Id
                              and t.Robot_Id = q.Robot_Id
                              and t.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
                              and t.Fte > 0
                              and t.Trans_Date <= i_Period)
       and Rownum = 1;
  
    return v_Planned_Fte;
  exception
    when No_Data_Found then
      return 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Restrict_To_View_All_Salaries(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hrm_Pref.c_Pref_Restrict_To_View_All_Salaries),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Restrict_All_Salaries(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hrm_Pref.c_Pref_Restrict_All_Salaries),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------   
  Procedure Access_To_Set_Closed_Date
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Robot_Name varchar2
  ) is
    v_Dummy varchar2(1);
  begin
    select 'Y'
      into v_Dummy
      from Mrf_Robot_Persons q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and Rownum = 1;
  
    Hrm_Error.Raise_030(i_Robot_Name);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- bonus types
  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type_Personal_Sales return varchar2 is
  begin
    return t('bonus_type: personal sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Department_Sales return varchar2 is
  begin
    return t('bonus_type: department sales');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Bonus_Type_Successful_Delivery return varchar2 is
  begin
    return t('bonus_type: successful delivery');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Bonus_Type(i_Bonus_Type varchar2) return varchar2 is
  begin
    return --
    case i_Bonus_Type --
    when Hrm_Pref.c_Bonus_Type_Personal_Sales then t_Bonus_Type_Personal_Sales --
    when Hrm_Pref.c_Bonus_Type_Department_Sales then t_Bonus_Type_Department_Sales --
    when Hrm_Pref.c_Bonus_Type_Successful_Delivery then t_Bonus_Type_Successful_Delivery --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Bonus_Types return Matrix_Varchar2 is
  begin
    -- todo: Owner: Sherzod; text: umcommit them
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Bonus_Type_Personal_Sales,
                                          Hrm_Pref.c_Bonus_Type_Department_Sales
                                          /*, Hrm_Pref.c_Bonus_Type_Successful_Delivery*/),
                           Array_Varchar2(t_Bonus_Type_Personal_Sales,
                                          t_Bonus_Type_Department_Sales
                                          /*, t_Bonus_Type_Successful_Delivery*/));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Department return varchar2 is
  begin
    return t('division_kind:department');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind_Team return varchar2 is
  begin
    return t('division_kind:team');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Division_Kind(i_Is_Division varchar2) return varchar2 is
  begin
    return case i_Is_Division --
    when 'Y' then t_Division_Kind_Department --
    when 'N' then t_Division_Kind_Team --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Position Employment Kind
  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment_Contractor return varchar2 is
  begin
    return t('position_employment:contractor');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment_Staff return varchar2 is
  begin
    return t('position_employment:staff');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Position_Employment(i_Employment_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Employment_Kind --
    when Hrm_Pref.c_Position_Employment_Contractor then t_Position_Employment_Contractor --
    when Hrm_Pref.c_Position_Employment_Staff then t_Position_Employment_Staff --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Position_Employments return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Position_Employment_Staff,
                                          Hrm_Pref.c_Position_Employment_Contractor),
                           Array_Varchar2(t_Position_Employment_Staff,
                                          t_Position_Employment_Contractor));
  end;

  ----------------------------------------------------------------------------------------------------   
  -- Robot Division Access Type
  ----------------------------------------------------------------------------------------------------   
  Function t_Robot_Division_Access_Type_Manual return varchar2 is
  begin
    return t('division_access_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------   
  Function t_Robot_Division_Access_Type_Structural return varchar2 is
  begin
    return t('division_access_type:structural');
  end;

  ----------------------------------------------------------------------------------------------------   
  Function t_Robot_Division_Access_Type(i_Access_Type varchar2) return varchar2 is
  begin
    return --
    case i_Access_Type --
    when Hrm_Pref.c_Access_Type_Manual then t_Robot_Division_Access_Type_Manual --
    when Hrm_Pref.c_Access_Type_Structural then t_Robot_Division_Access_Type_Structural --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Division_Access_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hrm_Pref.c_Access_Type_Manual,
                                          Hrm_Pref.c_Access_Type_Structural),
                           Array_Varchar2(t_Robot_Division_Access_Type_Manual,
                                          t_Robot_Division_Access_Type_Structural));
  end;

end Hrm_Util;
/

create or replace package Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Add(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Request_Save(i_Request Htt_Requests%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weights_Save(i_Change_Day_Weights Htt_Pref.Change_Day_Weights);
  ----------------------------------------------------------------------------------------------------  
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
end Htt_Api;
/
create or replace package body Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- notifications
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  ) is
    r_Person      Mr_Natural_Persons%rowtype;
    r_Request     Htt_Requests%rowtype;
    r_Staff       Href_Staffs%rowtype;
    v_User_Id     number;
    v_Manager_Id  number;
    v_Employee_Id number;
    result        Hashmap := Hashmap();
  begin
    r_Request    := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Request_Id => i_Request_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id,
                                       i_Filial_Id  => r_Request.Filial_Id,
                                       i_Staff_Id   => r_Request.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('request_id', r_Request.Request_Id);
    Result.Put('status', r_Request.Status);
    Result.Put('status_name', Htt_Util.t_Request_Status(r_Request.Status));
    Result.Put('request_kind_name',
               z_Htt_Request_Kinds.Load(i_Company_Id => r_Request.Company_Id, i_Request_Kind_Id => r_Request.Request_Kind_Id).Name);
    Result.Put('request_type', r_Request.Request_Type);
    Result.Put('begin_time', to_char(r_Request.Begin_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('end_time', to_char(r_Request.End_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('employee_name', r_Person.Name);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id, i_Filial_Id => r_Request.Filial_Id, i_Staff_Id => r_Request.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Request_Notification_Title(i_Company_Id      => i_Company_Id,
                                                                                      i_User_Id         => v_Employee_Id,
                                                                                      i_Notify_Type     => i_Notify_Type,
                                                                                      t_Request_Kind_Id => r_Request.Request_Kind_Id),
                                i_Uri        => Htt_Pref.c_Form_Request_View,
                                i_Uri_Param  => Fazo.Zip_Map('request_id', r_Request.Request_Id),
                                i_User_Id    => r_Request.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  ) is
    r_Person       Mr_Natural_Persons%rowtype;
    r_Change       Htt_Plan_Changes%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_User_Id      number;
    v_Manager_Id   number;
    v_Change_Date  date;
    v_Swapped_Date date;
    v_Employee_Id  number;
    result         Hashmap := Hashmap();
  begin
    r_Change     := z_Htt_Plan_Changes.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Change_Id  => i_Change_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id,
                                       i_Filial_Id  => r_Change.Filial_Id,
                                       i_Staff_Id   => r_Change.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    select q.Change_Date, q.Swapped_Date
      into v_Change_Date, v_Swapped_Date
      from Htt_Change_Days q
     where q.Company_Id = r_Change.Company_Id
       and q.Filial_Id = r_Change.Filial_Id
       and q.Change_Id = r_Change.Change_Id
       and Rownum = 1;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('change_id', r_Change.Change_Id);
    Result.Put('change_kind', r_Change.Change_Kind);
    Result.Put('change_kind_name', Htt_Util.t_Change_Kind(r_Change.Change_Kind));
    Result.Put('status', r_Change.Status);
    Result.Put('status_name', Htt_Util.t_Change_Status(r_Change.Status));
    Result.Put('employee_name', r_Person.Name);
    Result.Put('change_date', v_Change_Date);
    Result.Put('swapped_date', v_Swapped_Date);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id, i_Filial_Id => r_Change.Filial_Id, i_Staff_Id => r_Change.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Change_Notification_Title(i_Company_Id  => i_Company_Id,
                                                                                     i_User_Id     => v_Employee_Id,
                                                                                     i_Notify_Type => i_Notify_Type,
                                                                                     i_Change_Kind => r_Change.Change_Kind),
                                i_Uri        => Htt_Pref.c_Form_Change_View,
                                i_Uri_Param  => Fazo.Zip_Map('change_id', r_Change.Change_Id),
                                i_User_Id    => r_Change.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt) is
    r_Calendar           Htt_Calendars%rowtype;
    r_Week_Day           Htt_Calendar_Week_Days%rowtype;
    r_Old_Day            Htt_Calendar_Days%rowtype;
    r_New_Day            Htt_Calendar_Days%rowtype;
    r_Rest_Day           Htt_Calendar_Rest_Days%rowtype;
    v_Dates              Array_Date := Array_Date();
    v_Changed_Dates      Array_Date := Array_Date();
    v_Deleted_Dates      Array_Date;
    v_Swap_Changed_Dates Array_Date := Array_Date();
    v_Swap_Deleted_Dates Array_Date;
  begin
    if not z_Htt_Calendars.Exist_Lock(i_Company_Id  => i_Calendar.Company_Id,
                                      i_Filial_Id   => i_Calendar.Filial_Id,
                                      i_Calendar_Id => i_Calendar.Calendar_Id,
                                      o_Row         => r_Calendar) then
      r_Calendar.Company_Id  := i_Calendar.Company_Id;
      r_Calendar.Filial_Id   := i_Calendar.Filial_Id;
      r_Calendar.Calendar_Id := i_Calendar.Calendar_Id;
    end if;
  
    r_Calendar.Name          := i_Calendar.Name;
    r_Calendar.Code          := i_Calendar.Code;
    r_Calendar.Monthly_Limit := i_Calendar.Monthly_Limit;
    r_Calendar.Daily_Limit   := i_Calendar.Daily_Limit;
  
    z_Htt_Calendars.Save_Row(r_Calendar);
  
    r_New_Day.Company_Id  := i_Calendar.Company_Id;
    r_New_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_New_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Days.Count
    loop
      r_Old_Day               := null;
      r_New_Day.Calendar_Date := i_Calendar.Days(i).Calendar_Date;
      r_New_Day.Name          := i_Calendar.Days(i).Name;
      r_New_Day.Day_Kind      := i_Calendar.Days(i).Day_Kind;
      r_New_Day.Swapped_Date  := i_Calendar.Days(i).Swapped_Date;
    
      if not z_Htt_Calendar_Days.Exist_Lock(i_Company_Id    => r_New_Day.Company_Id,
                                            i_Filial_Id     => r_New_Day.Filial_Id,
                                            i_Calendar_Id   => r_New_Day.Calendar_Id,
                                            i_Calendar_Date => r_New_Day.Calendar_Date,
                                            o_Row           => r_Old_Day) or
         r_New_Day.Day_Kind <> r_Old_Day.Day_Kind --
         or r_New_Day.Swapped_Date <> r_Old_Day.Swapped_Date then
        Fazo.Push(v_Changed_Dates, r_New_Day.Calendar_Date);
      
        if r_Old_Day.Swapped_Date is not null then
          Fazo.Push(v_Swap_Changed_Dates, r_Old_Day.Swapped_Date);
        end if;
      end if;
    
      if Extract(year from r_New_Day.Calendar_Date) <> i_Calendar.Year then
        Htt_Error.Raise_018(i_Chosen_Year   => i_Calendar.Year,
                            i_Calendar_Date => r_New_Day.Calendar_Date);
      end if;
    
      if r_New_Day.Calendar_Date member of v_Dates then
        Htt_Error.Raise_019(r_New_Day.Calendar_Date);
      end if;
    
      z_Htt_Calendar_Days.Save_Row(r_New_Day);
    
      Fazo.Push(v_Dates, r_New_Day.Calendar_Date);
    end loop;
  
    r_Week_Day.Company_Id  := i_Calendar.Company_Id;
    r_Week_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_Week_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Week_Days.Count
    loop
      r_Week_Day.Order_No        := i_Calendar.Week_Days(i).Order_No;
      r_Week_Day.Plan_Time       := i_Calendar.Week_Days(i).Plan_Time;
      r_Week_Day.Preholiday_Time := i_Calendar.Week_Days(i).Preholiday_Hour;
      r_Week_Day.Preweekend_Time := i_Calendar.Week_Days(i).Preweekend_Hour;
    
      z_Htt_Calendar_Week_Days.Save_Row(r_Week_Day);
    end loop;
  
    delete Htt_Calendar_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id
       and Extract(year from q.Calendar_Date) = i_Calendar.Year
       and q.Calendar_Date not in (select *
                                     from table(v_Dates))
    returning q.Calendar_Date, Nvl(q.Swapped_Date, q.Calendar_Date) bulk collect into v_Deleted_Dates, v_Swap_Deleted_Dates;
  
    for i in 1 .. v_Changed_Dates.Count
    loop
      r_New_Day := z_Htt_Calendar_Days.Lock_Load(i_Company_Id    => r_New_Day.Company_Id,
                                                 i_Filial_Id     => r_New_Day.Filial_Id,
                                                 i_Calendar_Id   => r_New_Day.Calendar_Id,
                                                 i_Calendar_Date => v_Changed_Dates(i));
      begin
        select q.*
          into r_Old_Day
          from Htt_Calendar_Days q
         where q.Company_Id = r_New_Day.Company_Id
           and q.Filial_Id = r_New_Day.Filial_Id
           and q.Calendar_Id = r_New_Day.Calendar_Id
           and (q.Calendar_Date = r_New_Day.Swapped_Date --
               or q.Calendar_Date <> r_New_Day.Calendar_Date and
               q.Swapped_Date = r_New_Day.Swapped_Date or q.Swapped_Date = r_New_Day.Calendar_Date)
           and Rownum = 1;
      
        if r_New_Day.Calendar_Date = r_Old_Day.Calendar_Date or
           r_New_Day.Calendar_Date = r_Old_Day.Swapped_Date then
          Htt_Error.Raise_020(r_New_Day.Calendar_Date);
        else
          Htt_Error.Raise_020(r_New_Day.Swapped_Date);
        end if;
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    delete Htt_Calendar_Rest_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Rest_Days.Count
    loop
      r_Rest_Day.Company_Id  := i_Calendar.Company_Id;
      r_Rest_Day.Filial_Id   := i_Calendar.Filial_Id;
      r_Rest_Day.Calendar_Id := i_Calendar.Calendar_Id;
      r_Rest_Day.Week_Day_No := i_Calendar.Rest_Days(i);
    
      z_Htt_Calendar_Rest_Days.Insert_Row(r_Rest_Day);
    end loop;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union distinct v_Swap_Deleted_Dates;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union v_Swap_Changed_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Changed_Dates);
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Deleted_Dates);
  
    Htt_Core.Notify_Calendar_Day_Change(i_Company_Id  => i_Calendar.Company_Id,
                                        i_Filial_Id   => i_Calendar.Filial_Id,
                                        i_Calendar_Id => i_Calendar.Calendar_Id,
                                        i_Dates       => v_Changed_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  ) is
    r_Calendar Htt_Calendars%rowtype;
  begin
    r_Calendar := z_Htt_Calendars.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Pcode is not null then
      Htt_Error.Raise_021(i_Calendar_Id);
    end if;
  
    z_Htt_Calendars.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Calendar_Id => i_Calendar_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt) is
    r_Schedule                Htt_Schedules%rowtype;
    r_Day                     Htt_Schedule_Origin_Days%rowtype;
    r_Pattern                 Htt_Schedule_Patterns%rowtype;
    r_Pattern_Day             Htt_Schedule_Pattern_Days%rowtype;
    v_Pattern_Day             Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark                    Htt_Pref.Mark_Rt;
    v_Marks                   Htt_Pref.Mark_Nt;
    v_Marks_Day               Htt_Pref.Schedule_Day_Marks_Rt;
    v_Weight                  Htt_Pref.Time_Weight_Rt;
    v_Weights                 Htt_Pref.Time_Weight_Nt;
    v_Weights_Day             Htt_Pref.Schedule_Day_Weights_Rt;
    v_Schedule_Days           Htt_Pref.Schedule_Day_Nt := Htt_Pref.Schedule_Day_Nt();
    v_Dates                   Array_Date := Array_Date();
    v_Calendar_Dates          Array_Date := Array_Date();
    v_Mark_Dates              Array_Date := Array_Date();
    v_Weight_Dates            Array_Date := Array_Date();
    v_Old_Calendar_Id         number;
    v_Shift_Changed           boolean := false;
    v_Borders_Changed         boolean := false;
    v_Allowed_Late_Changed    boolean := false;
    v_Allowed_Early_Changed   boolean := false;
    v_Begin_Late_Changed      boolean := false;
    v_End_Early_Changed       boolean := false;
    v_Calendar_Changed        varchar2(1) := 'N';
    v_Holidays_Changed        varchar2(1) := 'N';
    v_Additional_Rest_Changes varchar2(1) := 'N';
    v_Nonworking_Changed      varchar2(1) := 'N';
    v_Schedule_Attached       varchar2(1) := 'N';
    v_Schedule_Kind           varchar2(1) := i_Schedule.Schedule_Kind;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Schedule.Company_Id,
                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                  o_Row         => r_Schedule) then
      v_Schedule_Kind := r_Schedule.Schedule_Kind;
    
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_101(r_Schedule.Name);
      end if;
    
      begin
        select 'Y'
          into v_Schedule_Attached
          from Htt_Timesheets t
         where t.Company_Id = i_Schedule.Company_Id
           and t.Filial_Id = i_Schedule.Filial_Id
           and t.Schedule_Id = i_Schedule.Schedule_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Schedule_Attached := 'N';
      end;
    
      v_Shift_Changed         := r_Schedule.Shift <> i_Schedule.Shift;
      v_Borders_Changed       := (r_Schedule.Input_Acceptance <> i_Schedule.Input_Acceptance or
                                 r_Schedule.Output_Acceptance <> i_Schedule.Output_Acceptance);
      v_Allowed_Late_Changed  := r_Schedule.Allowed_Late_Time <> i_Schedule.Allowed_Late_Time;
      v_Allowed_Early_Changed := r_Schedule.Allowed_Early_Time <> i_Schedule.Allowed_Early_Time;
      v_Begin_Late_Changed    := r_Schedule.Begin_Late_Time <> i_Schedule.Begin_Late_Time;
      v_End_Early_Changed     := r_Schedule.End_Early_Time <> i_Schedule.End_Early_Time;
    
      if v_Shift_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_022;
      end if;
    
      if v_Borders_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_023;
      end if;
    
      if v_Allowed_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_113;
      end if;
    
      if v_Allowed_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_114;
      end if;
    
      if v_Begin_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_115;
      end if;
    
      if v_End_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_116;
      end if;
    
      if r_Schedule.Track_Duration <> i_Schedule.Track_Duration and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_024;
      end if;
    
      if (r_Schedule.Count_Late <> i_Schedule.Count_Late or
         r_Schedule.Count_Early <> i_Schedule.Count_Early or
         r_Schedule.Count_Lack <> i_Schedule.Count_Lack or
         r_Schedule.Count_Free <> i_Schedule.Count_Free or
         Nvl(r_Schedule.Gps_Turnout_Enabled, 'N') <> Nvl(i_Schedule.Gps_Turnout_Enabled, 'N') or
         Nvl(r_Schedule.Gps_Use_Location, 'N') <> Nvl(i_Schedule.Gps_Use_Location, 'N') or
         Nvl(r_Schedule.Gps_Max_Interval, 0) <> Nvl(i_Schedule.Gps_Max_Interval, 0)) and
         v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_025;
      end if;
    
      v_Old_Calendar_Id := r_Schedule.Calendar_Id;
    
      if not Fazo.Equal(v_Old_Calendar_Id, i_Schedule.Calendar_Id) then
        v_Calendar_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Holidays <> i_Schedule.Take_Holidays then
        v_Holidays_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or
         v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Additional_Rest_Days <> i_Schedule.Take_Additional_Rest_Days then
        v_Additional_Rest_Changes := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Nonworking <> i_Schedule.Take_Nonworking then
        v_Nonworking_Changed := 'Y';
      end if;
    else
      r_Schedule.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Schedules,
                                                i_Id    => i_Schedule.Schedule_Id);
    end if;
  
    r_Schedule.Company_Id                := i_Schedule.Company_Id;
    r_Schedule.Filial_Id                 := i_Schedule.Filial_Id;
    r_Schedule.Schedule_Id               := i_Schedule.Schedule_Id;
    r_Schedule.Name                      := i_Schedule.Name;
    r_Schedule.Schedule_Kind             := v_Schedule_Kind;
    r_Schedule.Shift                     := i_Schedule.Shift;
    r_Schedule.Input_Acceptance          := i_Schedule.Input_Acceptance;
    r_Schedule.Output_Acceptance         := i_Schedule.Output_Acceptance;
    r_Schedule.Track_Duration            := i_Schedule.Track_Duration;
    r_Schedule.Count_Late                := i_Schedule.Count_Late;
    r_Schedule.Count_Early               := i_Schedule.Count_Early;
    r_Schedule.Count_Lack                := i_Schedule.Count_Lack;
    r_Schedule.Count_Free                := i_Schedule.Count_Free;
    r_Schedule.Use_Weights               := i_Schedule.Use_Weights;
    r_Schedule.Allowed_Late_Time         := i_Schedule.Allowed_Late_Time;
    r_Schedule.Allowed_Early_Time        := i_Schedule.Allowed_Early_Time;
    r_Schedule.Begin_Late_Time           := i_Schedule.Begin_Late_Time;
    r_Schedule.End_Early_Time            := i_Schedule.End_Early_Time;
    r_Schedule.Calendar_Id               := i_Schedule.Calendar_Id;
    r_Schedule.Take_Holidays             := i_Schedule.Take_Holidays;
    r_Schedule.Take_Nonworking           := i_Schedule.Take_Nonworking;
    r_Schedule.Take_Additional_Rest_Days := i_Schedule.Take_Additional_Rest_Days;
    r_Schedule.Gps_Turnout_Enabled       := i_Schedule.Gps_Turnout_Enabled;
    r_Schedule.Gps_Use_Location          := i_Schedule.Gps_Use_Location;
    r_Schedule.Gps_Max_Interval          := i_Schedule.Gps_Max_Interval;
    r_Schedule.State                     := i_Schedule.State;
    r_Schedule.Code                      := i_Schedule.Code;
  
    if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      if r_Schedule.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
        Htt_Error.Raise_108;
      end if;
    
      if i_Schedule.Advanced_Setting = 'Y' then
        Htt_Error.Raise_117;
      end if;
    
      r_Schedule.Shift             := 0;
      r_Schedule.Input_Acceptance  := r_Schedule.Track_Duration;
      r_Schedule.Output_Acceptance := r_Schedule.Track_Duration;
    
      r_Schedule.Count_Late  := 'N';
      r_Schedule.Count_Early := 'N';
      r_Schedule.Count_Lack  := 'N';
      r_Schedule.Count_Free  := 'N';
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    elsif r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      r_Schedule.Shift             := null;
      r_Schedule.Input_Acceptance  := null;
      r_Schedule.Output_Acceptance := null;
      r_Schedule.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    end if;
  
    if r_Schedule.Gps_Turnout_Enabled = 'N' then
      r_Schedule.Gps_Use_Location := 'N';
      r_Schedule.Gps_Max_Interval := null;
    end if;
  
    z_Htt_Schedules.Save_Row(r_Schedule);
  
    if (v_Shift_Changed or v_Borders_Changed or v_Allowed_Late_Changed or v_Allowed_Early_Changed or
       v_Begin_Late_Changed or v_End_Early_Changed) and v_Schedule_Attached = 'N' then
      v_Schedule_Days := i_Schedule.Days;
    else
      select Td.Schedule_Date,
             Td.Day_Kind,
             Td.Begin_Time,
             Td.End_Time,
             Decode(Td.Day_Kind, Htt_Pref.c_Day_Kind_Work, Td.Break_Enabled, null),
             Td.Break_Begin_Time,
             Td.Break_End_Time,
             Td.Plan_Time
        bulk collect
        into v_Schedule_Days
        from table(i_Schedule.Days) Td
      minus
      select Od.Schedule_Date,
             Od.Day_Kind,
             (Od.Begin_Time - Trunc(Od.Begin_Time)) * 1440,
             (Od.End_Time - Trunc(Od.End_Time)) * 1440,
             Od.Break_Enabled,
             (Od.Break_Begin_Time - Trunc(Od.Break_Begin_Time)) * 1440,
             (Od.Break_End_Time - Trunc(Od.Break_End_Time)) * 1440,
             Od.Plan_Time
        from Htt_Schedule_Origin_Days Od
       where Od.Company_Id = i_Schedule.Company_Id
         and Od.Filial_Id = i_Schedule.Filial_Id
         and Od.Schedule_Id = i_Schedule.Schedule_Id
         and Extract(year from Od.Schedule_Date) = i_Schedule.Year;
    end if;
  
    for i in 1 .. v_Schedule_Days.Count
    loop
      r_Day := null;
    
      if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        v_Schedule_Days(i).Begin_Time := 0;
        v_Schedule_Days(i).End_Time := 0;
        v_Schedule_Days(i).Break_Enabled := 'N';
      end if;
    
      r_Day.Company_Id    := i_Schedule.Company_Id;
      r_Day.Filial_Id     := i_Schedule.Filial_Id;
      r_Day.Schedule_Id   := i_Schedule.Schedule_Id;
      r_Day.Schedule_Date := v_Schedule_Days(i).Schedule_Date;
      r_Day.Day_Kind      := v_Schedule_Days(i).Day_Kind;
      r_Day.Break_Enabled := v_Schedule_Days(i).Break_Enabled;
    
      if Extract(year from r_Day.Schedule_Date) <> i_Schedule.Year then
        Htt_Error.Raise_026(i_Chosen_Year   => i_Schedule.Year,
                            i_Schedule_Date => r_Day.Schedule_Date);
      end if;
    
      if v_Schedule_Days(i).Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Day.Begin_Time := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).Begin_Time, 'minute');
        r_Day.End_Time   := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).End_Time, 'minute');
      
        if r_Day.End_Time <= r_Day.Begin_Time then
          r_Day.End_Time := r_Day.End_Time + 1;
        end if;
      
        if v_Schedule_Days(i).Break_Enabled = 'Y' then
          r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_Begin_Time, 'minute');
          r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_End_Time, 'minute');
        
          if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
            r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
          end if;
        
          if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
            r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
          end if;
        end if;
      
        r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                   i_Begin_Time       => r_Day.Begin_Time,
                                                   i_End_Time         => r_Day.End_Time,
                                                   i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                   i_Break_End_Time   => r_Day.Break_End_Time);
      
        r_Day.Plan_Time := v_Schedule_Days(i).Plan_Time;
      else
        r_Day.Full_Time     := 0;
        r_Day.Plan_Time     := 0;
        r_Day.Break_Enabled := null;
      end if;
    
      r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Schedule.Shift, 'minute');
      r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
      r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                Numtodsinterval(r_Schedule.Input_Acceptance, 'minute');
      r_Day.Output_Border    := r_Day.Shift_End_Time +
                                Numtodsinterval(r_Schedule.Output_Acceptance, 'minute');
    
      z_Htt_Schedule_Origin_Days.Save_Row(r_Day);
    
      Fazo.Push(v_Dates, r_Day.Schedule_Date);
    end loop;
  
    r_Pattern.Company_Id     := i_Schedule.Company_Id;
    r_Pattern.Filial_Id      := i_Schedule.Filial_Id;
    r_Pattern.Schedule_Id    := i_Schedule.Schedule_Id;
    r_Pattern.Schedule_Kind  := i_Schedule.Pattern.Pattern_Kind;
    r_Pattern.All_Days_Equal := i_Schedule.Pattern.All_Days_Equal;
    r_Pattern.Count_Days     := i_Schedule.Pattern.Count_Days;
    r_Pattern.Begin_Date     := i_Schedule.Pattern.Begin_Date;
    r_Pattern.End_Date       := i_Schedule.Pattern.End_Date;
  
    z_Htt_Schedule_Patterns.Save_Row(r_Pattern);
  
    delete Htt_Schedule_Pattern_Days t
     where t.Company_Id = i_Schedule.Company_Id
       and t.Filial_Id = i_Schedule.Filial_Id
       and t.Schedule_Id = i_Schedule.Schedule_Id;
  
    for i in 1 .. i_Schedule.Pattern.Pattern_Day.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule.Pattern.Pattern_Day(i);
    
      r_Pattern_Day.Company_Id  := i_Schedule.Company_Id;
      r_Pattern_Day.Filial_Id   := i_Schedule.Filial_Id;
      r_Pattern_Day.Schedule_Id := i_Schedule.Schedule_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          r_Pattern_Day.Begin_Time    := 0;
          r_Pattern_Day.End_Time      := 0;
          r_Pattern_Day.Break_Enabled := 'N';
        end if;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Pattern_Days.Save_Row(r_Pattern_Day);
    
      if v_Pattern_Day.End_Time < v_Pattern_Day.Begin_Time then
        v_Pattern_Day.End_Time := v_Pattern_Day.End_Time + 1440;
      end if;
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
      
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
          v_Mark.End_Time   := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_027(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_028(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Pattern_Day.Begin_Time,
                                                                        1440)),
                              i_End_Time_Text   => Htt_Util.To_Time(mod(v_Pattern_Day.End_Time, 1440)));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_029(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Pattern_Marks.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                i_Filial_Id   => i_Schedule.Filial_Id,
                                                i_Schedule_Id => i_Schedule.Schedule_Id,
                                                i_Day_No      => v_Pattern_Day.Day_No,
                                                i_Begin_Time  => v_Mark.Begin_Time,
                                                i_End_Time    => v_Mark.End_Time);
      end loop;
    
      for j in 1 .. v_Pattern_Day.Pattern_Weights.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
        continue when v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work;
      
        v_Weight := v_Pattern_Day.Pattern_Weights(j);
      
        if v_Weight.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
          v_Weight.End_Time   := v_Weight.End_Time + 1440;
        end if;
      
        if v_Weight.End_Time < v_Weight.Begin_Time then
          v_Weight.End_Time := v_Weight.End_Time + 1440;
        end if;
      
        if v_Weight.Begin_Time = v_Weight.End_Time then
          Htt_Error.Raise_124(v_Pattern_Day.Day_No);
        end if;
      
        if v_Weight.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_125(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Pattern_Day.Begin_Time,
                                                                        1440)),
                              i_End_Time_Text   => Htt_Util.To_Time(mod(v_Pattern_Day.End_Time, 1440)));
        end if;
      
        z_Htt_Schedule_Pattern_Weights.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                                  i_Day_No      => v_Pattern_Day.Day_No,
                                                  i_Begin_Time  => v_Weight.Begin_Time,
                                                  i_End_Time    => v_Weight.End_Time,
                                                  i_Weight      => v_Weight.Weight);
      end loop;
    end loop;
  
    for i in 1 .. i_Schedule.Marks.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Marks_Day := i_Schedule.Marks(i);
    
      -- symmetric differrence
      with Old_Marks as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time
          from Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date),
      New_Marks as
       (select m.Begin_Time, m.End_Time
          from table(v_Marks_Day.Marks) m)
      select Begin_Time, End_Time
        bulk collect
        into v_Marks
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              union
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm)
      minus
      select Begin_Time, End_Time
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              intersect
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm);
    
      if v_Marks.Count > 0 then
        delete Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date;
      
        if v_Marks_Day.End_Time < v_Marks_Day.Begin_Time then
          v_Marks_Day.End_Time := v_Marks_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Marks_Day.Marks.Count
        loop
          v_Mark := v_Marks_Day.Marks(j);
        
          if v_Mark.Begin_Time < v_Marks_Day.Begin_Time then
            v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
            v_Mark.End_Time   := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.End_Time < v_Mark.Begin_Time then
            v_Mark.End_Time := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.Begin_Time = v_Mark.End_Time then
            Htt_Error.Raise_030(v_Marks_Day.Schedule_Date);
          end if;
        
          if v_Mark.End_Time > v_Marks_Day.End_Time then
            Htt_Error.Raise_031(i_Schedule_Date   => v_Marks_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Marks_Day.Begin_Time,
                                                                          1440)),
                                i_End_Time_Text   => Htt_Util.To_Time(mod(v_Marks_Day.End_Time, 1440)));
          end if;
        
          z_Htt_Schedule_Origin_Day_Marks.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                     i_Filial_Id     => i_Schedule.Filial_Id,
                                                     i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                     i_Schedule_Date => v_Marks_Day.Schedule_Date,
                                                     i_Begin_Time    => v_Mark.Begin_Time,
                                                     i_End_Time      => v_Mark.End_Time);
        end loop;
      
        Fazo.Push(v_Mark_Dates, v_Marks_Day.Schedule_Date);
      end if;
    end loop;
  
    for i in 1 .. i_Schedule.Weights.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Weights_Day := i_Schedule.Weights(i);
    
      -- symmetric differrence
      with Old_Weights as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time, Dm.Weight
          from Htt_Schedule_Origin_Day_Weights Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Weights_Day.Schedule_Date),
      New_Weights as
       (select m.Begin_Time, m.End_Time, m.Weight
          from table(v_Weights_Day.Weights) m)
      select Begin_Time, End_Time, Weight
        bulk collect
        into v_Weights
        from (select Om.Begin_Time, Om.End_Time, Om.Weight
                from Old_Weights Om
              union
              select Nm.Begin_Time, Nm.End_Time, Nm.Weight
                from New_Weights Nm)
      minus
      select Begin_Time, End_Time, Weight
        from (select Om.Begin_Time, Om.End_Time, Om.Weight
                from Old_Weights Om
              intersect
              select Nm.Begin_Time, Nm.End_Time, Nm.Weight
                from New_Weights Nm);
    
      if v_Weights.Count > 0 then
        delete Htt_Schedule_Origin_Day_Weights Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Weights_Day.Schedule_Date;
      
        if v_Weights_Day.End_Time < v_Weights_Day.Begin_Time then
          v_Weights_Day.End_Time := v_Weights_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Weights_Day.Weights.Count
        loop
          v_Weight := v_Weights_Day.Weights(j);
        
          if v_Weight.Begin_Time < v_Weights_Day.Begin_Time then
            v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
            v_Weight.End_Time   := v_Weight.End_Time + 1440;
          end if;
        
          if v_Weight.End_Time < v_Weight.Begin_Time then
            v_Weight.End_Time := v_Weight.End_Time + 1440;
          end if;
        
          if v_Weight.Begin_Time = v_Weight.End_Time then
            Htt_Error.Raise_126(v_Weights_Day.Schedule_Date);
          end if;
        
          if v_Weight.End_Time > v_Weights_Day.End_Time then
            Htt_Error.Raise_127(i_Schedule_Date   => v_Weights_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Weights_Day.Begin_Time,
                                                                          1440)),
                                i_End_Time_Text   => Htt_Util.To_Time(mod(v_Weights_Day.End_Time,
                                                                          1440)));
          end if;
        
          z_Htt_Schedule_Origin_Day_Weights.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                       i_Filial_Id     => i_Schedule.Filial_Id,
                                                       i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                       i_Schedule_Date => v_Weights_Day.Schedule_Date,
                                                       i_Begin_Time    => v_Weight.Begin_Time,
                                                       i_End_Time      => v_Weight.End_Time,
                                                       i_Weight        => v_Weight.Weight);
        end loop;
      
        Fazo.Push(v_Weight_Dates, v_Weights_Day.Schedule_Date);
      end if;
    end loop;
  
    if Md_Pref.c_Migr_Company_Id != i_Schedule.Company_Id then
      Htt_Util.Assert_Schedule_Marks(i_Company_Id  => i_Schedule.Company_Id,
                                     i_Filial_Id   => i_Schedule.Filial_Id,
                                     i_Schedule_Id => i_Schedule.Schedule_Id,
                                     i_Dates       => v_Mark_Dates);
    
      Htt_Util.Assert_Schedule_Weights(i_Company_Id  => i_Schedule.Company_Id,
                                       i_Filial_Id   => i_Schedule.Filial_Id,
                                       i_Schedule_Id => i_Schedule.Schedule_Id,
                                       i_Dates       => v_Weight_Dates);
    end if;
  
    select Cd.Calendar_Date
      bulk collect
      into v_Calendar_Dates
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Schedule.Company_Id
       and Cd.Filial_Id = i_Schedule.Filial_Id
       and Cd.Calendar_Id in (v_Old_Calendar_Id, i_Schedule.Calendar_Id)
       and (Cd.Day_Kind = Htt_Pref.c_Day_Kind_Swapped and v_Calendar_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Holiday and v_Holidays_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest and v_Additional_Rest_Changes = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking and v_Nonworking_Changed = 'Y');
  
    v_Dates := v_Dates multiset union v_Calendar_Dates;
    v_Dates := v_Dates multiset union v_Mark_Dates;
    v_Dates := v_Dates multiset union distinct v_Weight_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Schedule.Company_Id,
                                 i_Filial_Id   => i_Schedule.Filial_Id,
                                 i_Schedule_Id => i_Schedule.Schedule_Id,
                                 i_Year        => i_Schedule.Year,
                                 i_Dates       => v_Dates);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => i_Schedule.Company_Id,
                                        i_Filial_Id   => i_Schedule.Filial_Id,
                                        i_Schedule_Id => i_Schedule.Schedule_Id,
                                        i_Calendar_Id => i_Schedule.Calendar_Id,
                                        i_Year_Begin  => to_date('01.01.' || i_Schedule.Year,
                                                                 'DD.MM.YYYY'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  o_Row         => r_Schedule) then
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_102(r_Schedule.Name);
      end if;
    
      z_Htt_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Schedule_Id => i_Schedule_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt) is
    r_Schedule_Template Htt_Schedule_Templates%rowtype;
    r_Pattern_Day       Htt_Schedule_Template_Days%rowtype;
    v_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark              Htt_Pref.Mark_Rt;
    v_Mark_Day_Numbers  Array_Number := Array_Number();
  begin
    r_Schedule_Template.Template_Id               := i_Schedule_Template.Template_Id;
    r_Schedule_Template.Name                      := i_Schedule_Template.Name;
    r_Schedule_Template.Shift                     := i_Schedule_Template.Shift;
    r_Schedule_Template.Description               := i_Schedule_Template.Description;
    r_Schedule_Template.Schedule_Kind             := i_Schedule_Template.Schedule_Kind;
    r_Schedule_Template.All_Days_Equal            := i_Schedule_Template.All_Days_Equal;
    r_Schedule_Template.Count_Days                := i_Schedule_Template.Count_Days;
    r_Schedule_Template.Input_Acceptance          := i_Schedule_Template.Input_Acceptance;
    r_Schedule_Template.Output_Acceptance         := i_Schedule_Template.Output_Acceptance;
    r_Schedule_Template.Track_Duration            := i_Schedule_Template.Track_Duration;
    r_Schedule_Template.Count_Late                := i_Schedule_Template.Count_Late;
    r_Schedule_Template.Count_Early               := i_Schedule_Template.Count_Early;
    r_Schedule_Template.Count_Lack                := i_Schedule_Template.Count_Lack;
    r_Schedule_Template.Take_Holidays             := i_Schedule_Template.Take_Holidays;
    r_Schedule_Template.Take_Nonworking           := i_Schedule_Template.Take_Nonworking;
    r_Schedule_Template.Take_Additional_Rest_Days := i_Schedule_Template.Take_Additional_Rest_Days;
    r_Schedule_Template.Order_No                  := i_Schedule_Template.Order_No;
    r_Schedule_Template.State                     := i_Schedule_Template.State;
    r_Schedule_Template.Code                      := i_Schedule_Template.Code;
  
    z_Htt_Schedule_Templates.Save_Row(r_Schedule_Template);
  
    for i in 1 .. i_Schedule_Template.Pattern_Days.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule_Template.Pattern_Days(i);
    
      r_Pattern_Day.Template_Id := i_Schedule_Template.Template_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Template_Days.Save_Row(r_Pattern_Day);
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < i_Schedule_Template.Shift then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_032(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > i_Schedule_Template.Shift + 1440 then
          Htt_Error.Raise_033(i_Day_No     => v_Pattern_Day.Day_No,
                              i_Shift_Text => Htt_Util.To_Time_Text(i_Minutes      => i_Schedule_Template.Shift,
                                                                    i_Show_Minutes => true,
                                                                    i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_034(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Template_Marks.Save_One(i_Template_Id => i_Schedule_Template.Template_Id,
                                               i_Day_No      => v_Pattern_Day.Day_No,
                                               i_Begin_Time  => v_Mark.Begin_Time,
                                               i_End_Time    => v_Mark.End_Time);
      
        Fazo.Push(v_Mark_Day_Numbers, v_Pattern_Day.Day_No);
      end loop;
    end loop;
  
    Htt_Util.Assert_Schedule_Template_Marks(i_Template_Id => i_Schedule_Template.Template_Id,
                                            i_Day_Numbers => v_Mark_Day_Numbers);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number) is
  begin
    z_Htt_Schedule_Templates.Delete_One(i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype) is
    r_Time_Kind   Htt_Time_Kinds%rowtype;
    r_Parent      Htt_Time_Kinds%rowtype;
    v_Pcode       Htt_Time_Kinds.Pcode%type;
    v_Requestable Htt_Time_Kinds.Requestable%type := 'Y';
  begin
    if z_Htt_Time_Kinds.Exist_Lock(i_Company_Id   => i_Time_Kind.Company_Id,
                                   i_Time_Kind_Id => i_Time_Kind.Time_Kind_Id,
                                   o_Row          => r_Time_Kind) then
    
      if r_Time_Kind.Parent_Id <> i_Time_Kind.Parent_Id or
         (r_Time_Kind.Parent_Id is not null and i_Time_Kind.Parent_Id is null) then
        Htt_Error.Raise_035(z_Htt_Time_Kinds.Load(i_Company_Id => r_Time_Kind.Company_Id, --
                            i_Time_Kind_Id => r_Time_Kind.Parent_Id).Name);
      end if;
    
      v_Pcode       := r_Time_Kind.Pcode;
      v_Requestable := r_Time_Kind.Requestable;
    
      if v_Pcode is not null then
        if i_Time_Kind.Parent_Id is not null and r_Time_Kind.Parent_Id is null then
          Htt_Error.Raise_036;
        end if;
      
        if r_Time_Kind.Plan_Load <> i_Time_Kind.Plan_Load then
          Htt_Error.Raise_037(Htt_Util.t_Plan_Load(r_Time_Kind.Plan_Load));
        end if;
      
        if r_Time_Kind.Requestable <> i_Time_Kind.Requestable then
          Htt_Error.Raise_038;
        end if;
      end if;
    end if;
  
    if v_Pcode is null then
      if i_Time_Kind.Parent_Id is null then
        Htt_Error.Raise_039;
      end if;
    
      if i_Time_Kind.Requestable = 'N' then
        Htt_Error.Raise_040;
      end if;
    
      r_Parent := z_Htt_Time_Kinds.Take(i_Company_Id   => i_Time_Kind.Company_Id,
                                        i_Time_Kind_Id => i_Time_Kind.Parent_Id);
    
      if r_Parent.Pcode is null then
        Htt_Error.Raise_041;
      end if;
    
      if r_Parent.Parent_Id is not null then
        Htt_Error.Raise_042;
      end if;
    end if;
  
    if i_Time_Kind.Plan_Load <> r_Parent.Plan_Load then
      Htt_Error.Raise_043(Htt_Util.t_Plan_Load(r_Parent.Plan_Load));
    end if;
  
    r_Time_Kind             := i_Time_Kind;
    r_Time_Kind.Pcode       := v_Pcode;
    r_Time_Kind.Requestable := v_Requestable;
  
    z_Htt_Time_Kinds.Save_Row(r_Time_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  ) is
    r_Time_Kind Htt_Time_Kinds%rowtype;
  begin
    r_Time_Kind := z_Htt_Time_Kinds.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Time_Kind_Id => i_Time_Kind_Id);
  
    if r_Time_Kind.Pcode is not null then
      Htt_Error.Raise_044(i_Time_Kind_Id);
    end if;
  
    z_Htt_Time_Kinds.Delete_One(i_Company_Id   => i_Company_Id, --
                                i_Time_Kind_Id => i_Time_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt) is
    r_Person_Old Htt_Persons%rowtype;
    r_Person_New Htt_Persons%rowtype;
    v_Photo_Shas Array_Varchar2 := Array_Varchar2();
    v_Count      number;
  begin
    if z_Htt_Persons.Exist_Lock(i_Company_Id => i_Person.Company_Id,
                                i_Person_Id  => i_Person.Person_Id,
                                o_Row        => r_Person_Old) then
      null;
    end if;
  
    r_Person_New.Company_Id := i_Person.Company_Id;
    r_Person_New.Person_Id  := i_Person.Person_Id;
    r_Person_New.Pin        := i_Person.Pin;
    r_Person_New.Pin_Code   := i_Person.Pin_Code;
    r_Person_New.Rfid_Code  := i_Person.Rfid_Code;
    r_Person_New.Qr_Code    := i_Person.Qr_Code;
  
    z_Htt_Persons.Save_Row(r_Person_New);
  
    v_Photo_Shas.Extend(i_Person.Photos.Count);
  
    for i in 1 .. i_Person.Photos.Count
    loop
      v_Photo_Shas(i) := i_Person.Photos(i).Photo_Sha;
    
      Person_Save_Photo(i_Company_Id => i_Person.Company_Id,
                        i_Person_Id  => i_Person.Person_Id,
                        i_Photo_Sha  => i_Person.Photos(i).Photo_Sha,
                        i_Is_Main    => i_Person.Photos(i).Is_Main);
    end loop;
  
    for r in (select *
                from Htt_Person_Photos q
               where q.Company_Id = i_Person.Company_Id
                 and q.Person_Id = i_Person.Person_Id
                 and q.Photo_Sha not member of v_Photo_Shas)
    loop
      z_Htt_Person_Photos.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Person_Id  => r.Person_Id,
                                     i_Photo_Sha  => r.Photo_Sha);
    end loop;
  
    select count(*)
      into v_Count
      from Htt_Person_Photos q
     where q.Company_Id = i_Person.Company_Id
       and q.Person_Id = i_Person.Person_Id
       and q.Is_Main = 'Y';
  
    if v_Count > 1 then
      Htt_Error.Raise_045(i_Main_Photo_Cnt => v_Count,
                          i_Person_Name    => z_Mr_Natural_Persons.Load(i_Company_Id => i_Person.Company_Id, --
                                              i_Person_Id => i_Person.Person_Id).Name);
    end if;
  
    if not (Fazo.Equal(r_Person_New.Pin, r_Person_Old.Pin) and
        Fazo.Equal(r_Person_New.Pin_Code, r_Person_Old.Pin_Code) and
        Fazo.Equal(r_Person_New.Rfid_Code, r_Person_Old.Rfid_Code) and
        Fazo.Equal(r_Person_New.Qr_Code, r_Person_Old.Qr_Code)) then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Person.Company_Id,
                                 i_Person_Id  => i_Person.Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  ) is
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha) then
      z_Htt_Person_Photos.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha);
    
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  ) is
    r_Person_Photo Htt_Person_Photos%rowtype;
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha,
                                      o_Row        => r_Person_Photo) then
      z_Htt_Person_Photos.Update_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => Option_Varchar2(i_Is_Main));
    else
      z_Htt_Person_Photos.Insert_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => i_Is_Main);
    end if;
  
    if r_Person_Photo.Company_Id is null or r_Person_Photo.Is_Main <> i_Is_Main then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  ) is
    v_Is_Main varchar2(1);
  
    --------------------------------------------------
    Function Photo_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Person_Photos Pp
       where Pp.Company_Id = i_Company_Id
         and Pp.Person_Id = i_Person_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    v_Is_Main := z_Htt_Person_Photos.Take(i_Company_Id => i_Company_Id, --
                 i_Person_Id => i_Person_Id, --
                 i_Photo_Sha => i_Old_Photo_Sha).Is_Main;
  
    Person_Photo_Delete(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_Old_Photo_Sha);
  
    if not Photo_Exists then
      v_Is_Main := 'Y';
    end if;
  
    if i_New_Photo_Sha is not null then
      Person_Save_Photo(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_New_Photo_Sha,
                        i_Is_Main    => Nvl(v_Is_Main, 'N'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Persons.Delete_One(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype) is
  begin
    z_Htt_Location_Types.Save_Row(i_Location_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  ) is
  begin
    z_Htt_Location_Types.Delete_One(i_Company_Id       => i_Company_Id,
                                    i_Location_Type_Id => i_Location_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Polygon_Save
  (
    i_Company_Id       number,
    i_Location_Id      number,
    i_Polygon_Vertices Array_Varchar2
  ) is
    v_Order_No         number := 0;
    v_Polygon_Vertices Array_Varchar2 := i_Polygon_Vertices;
  begin
    delete from Htt_Location_Polygon_Vertices t
     where t.Company_Id = i_Company_Id
       and t.Location_Id = i_Location_Id;
  
    if v_Polygon_Vertices.Count > 0 and
       v_Polygon_Vertices(v_Polygon_Vertices.Count) <> v_Polygon_Vertices(1) then
      v_Polygon_Vertices.Extend;
      v_Polygon_Vertices(v_Polygon_Vertices.Count) := v_Polygon_Vertices(1);
    end if;
  
    for i in 1 .. v_Polygon_Vertices.Count
    loop
      v_Order_No := v_Order_No + 1;
    
      z_Htt_Location_Polygon_Vertices.Insert_One(i_Company_Id  => i_Company_Id,
                                                 i_Location_Id => i_Location_Id,
                                                 i_Order_No    => v_Order_No,
                                                 i_Latlng      => v_Polygon_Vertices(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  ) is
    r_Row             Htt_Locations%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    if z_Htt_Locations.Exist_Lock(i_Company_Id  => i_Location.Company_Id,
                                  i_Location_Id => i_Location.Location_Id,
                                  o_Row         => r_Row) then
      z_Htt_Locations.Update_Row(i_Location);
    
      if not Fazo.Equal(r_Row.Timezone_Code, i_Location.Timezone_Code) then
        v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
        v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
      
        for r in (select q.Device_Id
                    from Htt_Devices q
                   where q.Company_Id = i_Location.Company_Id
                     and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                     and q.Location_Id = i_Location.Location_Id
                     and q.State = 'A')
        loop
          Htt_Api.Acms_Command_Add(i_Company_Id   => i_Location.Company_Id,
                                   i_Device_Id    => r.Device_Id,
                                   i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
        end loop;
      end if;
    else
      z_Htt_Locations.Insert_Row(i_Location);
    end if;
  
    Location_Polygon_Save(i_Company_Id       => i_Location.Company_Id,
                          i_Location_Id      => i_Location.Location_Id,
                          i_Polygon_Vertices => i_Polygon_Vertices);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Locations.Delete_One(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Insert_Try(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    for r in (select q.Company_Id, q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = i_Location_Id
                 and exists (select 1
                        from Hzk_Devices Dv
                       where Dv.Company_Id = q.Company_Id
                         and Dv.Device_Id = q.Device_Id))
    loop
      Hzk_Api.Device_Sync(i_Company_Id => r.Company_Id, i_Device_Id => r.Device_Id);
    end loop;
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Location_Id => i_Location_Id,
                                 i_Person_Id   => i_Person_Id,
                                 i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Remove_Person(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Location_Id => i_Location_Id,
                                    i_Person_Id   => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    Htt_Core.Location_Sync_Persons(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Person_Global_Sync_All_Location(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
    r_Qrcode Htt_Location_Qr_Codes%rowtype;
  begin
    r_Qrcode := z_Htt_Location_Qr_Codes.Lock_Load(i_Company_Id => i_Company_Id,
                                                  i_Unique_Key => i_Unique_Key);
  
    if r_Qrcode.State = 'P' then
      Htt_Error.Raise_082(i_Location_Id   => r_Qrcode.Location_Id,
                          i_Location_Name => z_Htt_Locations.Load(i_Company_Id => r_Qrcode.Company_Id, --
                                             i_Location_Id => r_Qrcode.Location_Id).Name,
                          i_Created_On    => r_Qrcode.Created_On);
    end if;
  
    r_Qrcode.State := 'P';
  
    z_Htt_Location_Qr_Codes.Update_Row(r_Qrcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
  begin
    z_Htt_Location_Qr_Codes.Delete_One(i_Company_Id => i_Company_Id, i_Unique_Key => i_Unique_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Random_Key varchar2(32) := to_char(Dbms_Crypto.Randombytes(16));
    v_Unique_Key varchar2(64);
  begin
    v_Unique_Key := Fazo.Hash_Sha1(i_Location_Id || ':' || Htt_Next.Qr_Code_Id || v_Random_Key);
  
    z_Htt_Location_Qr_Codes.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Unique_Key  => v_Unique_Key,
                                       i_Location_Id => i_Location_Id,
                                       i_State       => 'A');
  
    return v_Unique_Key;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype) is
    r_Terminal_Model Htt_Terminal_Models%rowtype;
  begin
    r_Terminal_Model := z_Htt_Terminal_Models.Lock_Load(i_Terminal_Model.Model_Id);
  
    if r_Terminal_Model.Pcode <> i_Terminal_Model.Pcode then
      Htt_Error.Raise_046(i_Old_Pcode => r_Terminal_Model.Pcode,
                          i_Model_Id  => i_Terminal_Model.Model_Id);
    end if;
  
    z_Htt_Terminal_Models.Update_Row(i_Terminal_Model);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype) is
    r_Device          Htt_Devices%rowtype := i_Device;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    r_Device.Use_Settings := Nvl(r_Device.Use_Settings, 'N');
  
    if r_Device.Model_Id is null and --
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_047;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if r_Device.Location_Id is null and --
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_048;
    end if;
  
    if r_Device.Use_Settings = 'Y' then
      r_Device.Track_Types   := null;
      r_Device.Mark_Types    := null;
      r_Device.Emotion_Types := null;
      r_Device.Lang_Code     := null;
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          r_Device.Lang_Code is null then
      Htt_Error.Raise_050;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      r_Device.Autogen_Inputs       := 'N';
      r_Device.Autogen_Outputs      := 'N';
      r_Device.Ignore_Tracks        := 'N';
      r_Device.Restricted_Type      := null;
      r_Device.Only_Last_Restricted := null;
    else
      r_Device.Autogen_Inputs  := Nvl(r_Device.Autogen_Inputs, 'N');
      r_Device.Autogen_Outputs := Nvl(r_Device.Autogen_Outputs, 'N');
    
      if r_Device.Restricted_Type not in
         (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
        r_Device.Only_Last_Restricted := null;
      end if;
    end if;
  
    r_Device.Status        := Nvl(r_Device.Status, Htt_Pref.c_Device_Status_Unknown);
    r_Device.Ignore_Tracks := Nvl(r_Device.Ignore_Tracks, 'N');
  
    z_Htt_Devices.Insert_Row(r_Device);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  ) is
    r_Device               Htt_Devices%rowtype;
    v_Track_Types          Option_Varchar2 := i_Track_Types;
    v_Mark_Types           Option_Varchar2 := i_Mark_Types;
    v_Emotion_Types        Option_Varchar2 := i_Emotion_Types;
    v_Lang_Code            Option_Varchar2 := i_Lang_Code;
    v_Autogen_Inputs       Option_Varchar2 := i_Autogen_Inputs;
    v_Autogen_Outputs      Option_Varchar2 := i_Autogen_Outputs;
    v_Ignore_Tracks        Option_Varchar2 := i_Ignore_Tracks;
    v_Restricted_Type      Option_Varchar2 := i_Restricted_Type;
    v_Only_Last_Restricted Option_Varchar2 := i_Only_Last_Restricted;
    v_Charge_Percentage    Option_Number := i_Charge_Percentage;
    v_Dt_Hikvision_Id      number;
    v_Dt_Dahua_Id          number;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, --
                                        i_Device_Id  => i_Device_Id);
  
    if i_Model_Id is not null and --
       i_Model_Id.Val is null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_051;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if i_Location_Id is not null and --
       i_Location_Id.Val is null and
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_052;
    end if;
  
    if i_Use_Settings is not null and --
       i_Use_Settings.Val = 'Y' then
      v_Track_Types   := Option_Varchar2(null);
      v_Mark_Types    := Option_Varchar2(null);
      v_Emotion_Types := Option_Varchar2(null);
      v_Lang_Code     := Option_Varchar2(null);
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          v_Lang_Code is not null and v_Lang_Code.Val is null then
      Htt_Error.Raise_054;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      v_Autogen_Inputs       := null;
      v_Autogen_Outputs      := null;
      v_Restricted_Type      := null;
      v_Only_Last_Restricted := null;
      v_Ignore_Tracks        := null;
    elsif v_Restricted_Type.Val not in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
      v_Only_Last_Restricted := Option_Varchar2(null);
    end if;
  
    if v_Charge_Percentage is not null and v_Charge_Percentage.Val is null then
      v_Charge_Percentage := null;
    end if;
  
    z_Htt_Devices.Update_One(i_Company_Id           => i_Company_Id,
                             i_Device_Id            => i_Device_Id,
                             i_Name                 => i_Name,
                             i_Model_Id             => i_Model_Id,
                             i_Location_Id          => i_Location_Id,
                             i_Charge_Percentage    => v_Charge_Percentage,
                             i_Track_Types          => v_Track_Types,
                             i_Mark_Types           => v_Mark_Types,
                             i_Emotion_Types        => v_Emotion_Types,
                             i_Lang_Code            => v_Lang_Code,
                             i_Use_Settings         => i_Use_Settings,
                             i_Autogen_Inputs       => v_Autogen_Inputs,
                             i_Autogen_Outputs      => v_Autogen_Outputs,
                             i_Ignore_Tracks        => v_Ignore_Tracks,
                             i_Restricted_Type      => v_Restricted_Type,
                             i_Only_Last_Restricted => v_Only_Last_Restricted,
                             i_Last_Seen_On         => i_Last_Seen_On,
                             i_State                => i_State);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) and i_Location_Id is not null and
       i_Location_Id.Val <> r_Device.Location_Id then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype) is
    r_Device Htt_Acms_Devices%rowtype;
  begin
    if not z_Htt_Acms_Devices.Exist_Lock(i_Company_Id => i_Device.Company_Id,
                                         i_Device_Id  => i_Device.Device_Id,
                                         o_Row        => r_Device) then
      r_Device.Company_Id := i_Device.Company_Id;
      r_Device.Device_Id  := i_Device.Device_Id;
    
      -- dynamic ip solution currently disabled
      -- see hac module integration instead 
      r_Device.Dynamic_Ip := 'N';
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := Nvl(i_Device.Host, i_Device.Login);
    else
      if not Fazo.Equal(r_Device.Dynamic_Ip, i_Device.Dynamic_Ip) or --
         not Fazo.Equal(r_Device.Ip_Address, i_Device.Ip_Address) or --
         not Fazo.Equal(r_Device.Port, i_Device.Port) or --
         not Fazo.Equal(r_Device.Protocol, i_Device.Protocol) or --
         not Fazo.Equal(r_Device.Host, i_Device.Host) or --
         not Fazo.Equal(r_Device.Login, i_Device.Login) or --
         not Fazo.Equal(r_Device.Password, i_Device.Password) then
        Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                         i_Device_Id    => r_Device.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
      end if;
    end if;
  
    r_Device.Dynamic_Ip := i_Device.Dynamic_Ip;
    r_Device.Login      := i_Device.Login;
    r_Device.Password   := Nvl(i_Device.Password, r_Device.Password);
  
    if r_Device.Dynamic_Ip = 'Y' then
      r_Device.Ip_Address := i_Device.Ip_Address;
      r_Device.Port       := i_Device.Port;
      r_Device.Protocol   := i_Device.Protocol;
      r_Device.Host       := null;
    else
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := i_Device.Host;
    end if;
  
    z_Htt_Acms_Devices.Save_Row(r_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
    v_Filial_Ids Array_Number;
    r_Device     Htt_Devices%rowtype;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  
    z_Htt_Device_Admins.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    if r_Device.Location_Id is not null then
      v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Device.Company_Id,
                                              i_Location_Id => r_Device.Location_Id,
                                              i_Person_Id   => i_Person_Id);
    
      for i in 1 .. v_Filial_Ids.Count
      loop
        Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => v_Filial_Ids(i),
                                     i_Location_Id => r_Device.Location_Id,
                                     i_Person_Id   => i_Person_Id,
                                     i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
      end loop;
    end if;
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Device_Admins.Delete_One(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Insert_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Device_Update(i_Company_Id => i_Company_Id,
                  i_Device_Id  => i_Device_Id,
                  i_State      => Option_Varchar2('P'));
  
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    for r in (select q.Filial_Id, q.Track_Id
                from Htt_Tracks q
               where q.Company_Id = i_Company_Id
                 and q.Device_Id = i_Device_Id)
    loop
      Track_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => r.Filial_Id,
                   i_Track_Id   => r.Track_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    Htt_Core.Acms_Command_Add(i_Company_Id   => i_Company_Id,
                              i_Device_Id    => i_Device_Id,
                              i_Command_Kind => i_Command_Kind,
                              i_Person_Id    => i_Person_Id,
                              i_Data         => i_Data);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_complete: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Complited),
                                   i_State_Changed_On => Option_Date(sysdate));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_fail: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Failed),
                                   i_State_Changed_On => Option_Date(sysdate),
                                   i_Error_Msg        => Option_Varchar2(i_Error_Msg));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1);
  begin
    if i_Value not in ('Y', 'N') then
      v_Value := 'N';
    else
      v_Value := i_Value;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks,
                           i_Value      => Nvl(v_Value, 'N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_079;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Pin_Autogenerate,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Photo_As_Face_Rec,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Invalid_Auto_Checkout_Enable
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number
  ) return boolean is
    r_Setting Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  begin
    r_Setting := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_User_Id    => i_User_Id);
  
    return r_Setting.Auto_Output_Enabled = 'Y' and r_Setting.Disable_Auto_Checkout = 'Y';
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Notify_Timesheet
  (
    i_Track       Htt_Tracks%rowtype,
    i_Notify_Type varchar2
  ) is
    r_Staff         Href_Staffs%rowtype;
    r_Timesheet     Htt_Timesheets%rowtype;
    v_Manager_Id    number;
    v_Staff_Id      number;
    v_Timesheet_Ids Array_Number;
    result          Hashmap := Hashmap();
  begin
    if not (i_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
        i_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and i_Track.Is_Valid = 'N' and
        Invalid_Auto_Checkout_Enable(i_Company_Id => i_Track.Company_Id,
                                         i_Filial_Id  => i_Track.Filial_Id,
                                         i_User_Id    => i_Track.Person_Id)) then
      return;
    end if;
  
    v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Track.Company_Id,
                                                 i_Filial_Id   => i_Track.Filial_Id,
                                                 i_Employee_Id => i_Track.Person_Id,
                                                 i_Date        => i_Track.Track_Datetime);
  
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Staff_Id   => v_Staff_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => i_Track.Company_Id,
                                             i_Filial_Id  => i_Track.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Track.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    v_Timesheet_Ids := Htt_Core.Find_Track_Timesheets(i_Company_Id     => i_Track.Company_Id,
                                                      i_Filial_Id      => i_Track.Filial_Id,
                                                      i_Staff_Id       => v_Staff_Id,
                                                      i_Track_Datetime => i_Track.Track_Datetime);
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Track.Company_Id,
                                           i_Filial_Id    => i_Track.Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if r_Timesheet.Count_Early = 'Y' and r_Timesheet.Input_Time is not null and
         r_Timesheet.Output_Time is null and i_Track.Track_Datetime between r_Timesheet.Begin_Time and
         r_Timesheet.End_Time then
        Result.Put('notify_type', i_Notify_Type);
        Result.Put('timesheet_id', r_Timesheet.Timesheet_Id);
        Result.Put('timesheet_date', r_Timesheet.Timesheet_Date);
        Result.Put('employee_name',
                   z_Mr_Natural_Persons.Take(i_Company_Id => i_Track.Company_Id, i_Person_Id => i_Track.Person_Id).Name);
        Result.Put('begin_time', to_char(r_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('end_time', to_char(r_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('input_time', to_char(r_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('output_time', to_char(i_Track.Track_Datetime, Href_Pref.c_Time_Format_Minute));
        Result.Put('early_time',
                   Trunc(Htt_Util.Time_Diff(r_Timesheet.End_Time, i_Track.Track_Datetime) / 60));
      
        Mt_Fcm.Send(i_Company_Id => r_Timesheet.Company_Id, --
                    i_User_Id    => v_Manager_Id,
                    i_Data       => result);
      
        return;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Datetime
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Time timestamp with time zone
  ) return date is
    v_Timezone Md_Timezones.Timezone_Code%type;
  begin
    v_Timezone := z_Md_Users.Take(i_Company_Id => i_Company_Id, i_User_Id => i_Person_Id).Timezone_Code;
  
    if v_Timezone is null then
      v_Timezone := Htt_Util.Load_Timezone(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    end if;
  
    return Htt_Util.Timestamp_To_Date(i_Timestamp => i_Track_Time, i_Timezone => v_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add(i_Track Htt_Tracks%rowtype) is
    r_Track          Htt_Tracks%rowtype := i_Track;
    r_Location       Htt_Locations%rowtype;
    r_Device         Htt_Devices%rowtype;
    r_Timesheet      Htt_Timesheets%rowtype;
    v_Device_Type_Id number;
    --------------------------------------------------
    Function Track_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      if r_Track.Device_Id is not null then
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Device_Id = r_Track.Device_Id
           and q.Original_Type = r_Track.Original_Type;
      else
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Original_Type = r_Track.Original_Type;
      end if;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if r_Track.Location_Id is not null then
      r_Location := z_Htt_Locations.Load(i_Company_Id  => r_Track.Company_Id,
                                         i_Location_Id => r_Track.Location_Id);
    
      if r_Track.Latlng is null then
        r_Track.Latlng   := r_Location.Latlng;
        r_Track.Accuracy := r_Location.Accuracy;
      end if;
    end if;
  
    v_Device_Type_Id := Htt_Util.Device_Type_Id(i_Pcode => Htt_Pref.c_Pcode_Device_Type_Staff);
  
    if r_Track.Device_Id is not null then
      r_Device := z_Htt_Devices.Load(i_Company_Id => r_Track.Company_Id,
                                     i_Device_Id  => r_Track.Device_Id);
    
      r_Track.Track_Type := Nvl(r_Device.Restricted_Type, r_Track.Track_Type);
    end if;
  
    if r_Device.Ignore_Tracks = 'Y' then
      return;
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date    := Trunc(r_Track.Track_Datetime);
    r_Track.Is_Valid      := Nvl(r_Track.Is_Valid, 'Y');
    r_Track.Status        := Htt_Pref.c_Track_Status_Draft;
    r_Track.Original_Type := r_Track.Track_Type;
  
    if v_Device_Type_Id = r_Device.Device_Type_Id then
      if Hes_Util.Staff_Track_Settings(i_Company_Id => r_Track.Company_Id, --
       i_Filial_Id => r_Track.Filial_Id, --
       i_User_Id => r_Track.Person_Id).Track_Potential = 'Y' then
        r_Track.Trans_Output := 'Y';
      else
        r_Track.Trans_Output := 'N';
      end if;
    else
      r_Track.Trans_Output := Nvl(r_Device.Autogen_Outputs, 'N');
    end if;
  
    r_Track.Trans_Input := Nvl(r_Device.Autogen_Inputs, 'N');
    r_Track.Trans_Check := case
                             when r_Device.Only_Last_Restricted = 'Y' and
                                  r_Device.Restricted_Type in
                                  (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
                              'Y'
                             else
                              'N'
                           end;
  
    if Htt_Util.Schedule_Trim_Tracks(i_Company_Id => r_Track.Company_Id,
                                     i_Filial_Id  => r_Track.Filial_Id) = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => r_Track.Company_Id,
                                        i_Filial_Id      => r_Track.Filial_Id,
                                        i_Staff_Id       => Href_Util.Get_Primary_Staff_Id(i_Company_Id   => r_Track.Company_Id,
                                                                                           i_Filial_Id    => r_Track.Filial_Id,
                                                                                           i_Employee_Id  => r_Track.Person_Id,
                                                                                           i_Period_Begin => r_Track.Track_Date,
                                                                                           i_Period_End   => r_Track.Track_Date),
                                        i_Timesheet_Date => r_Track.Track_Date);
    
      if r_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Timesheet.Company_Id is null then
        return;
      end if;
    
      if r_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        r_Track.Track_Datetime := Greatest(Least(r_Track.Track_Datetime, r_Timesheet.End_Time),
                                           r_Timesheet.Begin_Time);
        r_Track.Track_Date     := Trunc(r_Track.Track_Date);
        r_Track.Track_Time     := cast(r_Track.Track_Datetime as timestamp with local time zone);
      end if;
    end if;
  
    if r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
       Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                    i_Filial_Id  => r_Track.Filial_Id,
                                    i_User_Id    => r_Track.Person_Id) then
      r_Track.Is_Valid := 'N';
    end if;
  
    if Track_Exists then
      return;
    end if;
  
    -- check if prohibited location
    if r_Track.Is_Valid = 'Y' and r_Track.Latlng is not null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) and
       Htt_Util.Is_Prohibited(i_Company_Id => r_Track.Company_Id,
                              i_Filial_Id  => r_Track.Filial_Id,
                              i_Person_Id  => r_Track.Person_Id,
                              i_Latlng     => r_Track.Latlng) or r_Location.Prohibited = 'Y' then
      r_Track.Is_Valid := 'N';
    end if;
  
    if true or Htt_Util.Is_Track_Accepted_Period(i_Company_Id  => r_Track.Company_Id,
                                                 i_Filial_Id   => r_Track.Filial_Id,
                                                 i_Employee_Id => r_Track.Person_Id,
                                                 i_Period      => r_Track.Track_Date) = 'Y' then
      z_Htt_Tracks.Insert_Row(r_Track);
    
      if Md_Pref.c_Migr_Company_Id != i_Track.Company_Id then
        if r_Track.Is_Valid = 'Y' then
          Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                             i_Filial_Id      => r_Track.Filial_Id,
                             i_Track_Id       => r_Track.Track_Id,
                             i_Employee_Id    => r_Track.Person_Id,
                             i_Track_Datetime => r_Track.Track_Datetime,
                             i_Track_Type     => r_Track.Track_Type,
                             i_Trans_Input    => r_Track.Trans_Input,
                             i_Trans_Output   => r_Track.Trans_Output,
                             i_Trans_Check    => r_Track.Trans_Check);
        elsif r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
              Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                           i_Filial_Id  => r_Track.Filial_Id,
                                           i_User_Id    => r_Track.Person_Id) then
          Notify_Timesheet(i_Track => r_Track, i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
        end if;
      
      end if;
    else
      Htt_Core.Trash_Track_Insert(r_Track);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'Y' then
      Htt_Error.Raise_055(i_Track_Id);
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date := Trunc(r_Track.Track_Datetime);
  
    z_Htt_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                            i_Filial_Id      => i_Filial_Id,
                            i_Track_Id       => i_Track_Id,
                            i_Track_Datetime => Option_Date(r_Track.Track_Datetime),
                            i_Track_Date     => Option_Date(r_Track.Track_Date),
                            i_Is_Valid       => Option_Varchar2('Y'));
  
    Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                       i_Filial_Id      => r_Track.Filial_Id,
                       i_Track_Id       => r_Track.Track_Id,
                       i_Employee_Id    => r_Track.Person_Id,
                       i_Track_Datetime => r_Track.Track_Datetime,
                       i_Track_Type     => r_Track.Track_Type,
                       i_Trans_Input    => r_Track.Trans_Input,
                       i_Trans_Output   => r_Track.Trans_Output,
                       i_Trans_Check    => r_Track.Trans_Check);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'N' then
      Htt_Error.Raise_056(i_Track_Id);
    end if;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Is_Valid   => Option_Varchar2('N'),
                            i_Track_Type => Option_Varchar2(r_Track.Original_Type));
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  
    z_Htt_Tracks.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt) is
    v_Track_Id number;
    v_Exists   varchar2(1) := 'Y';
  begin
    v_Track_Id := Htt_Util.Gps_Track_Id(i_Company_Id => i_Track.Company_Id,
                                        i_Filial_Id  => i_Track.Filial_Id,
                                        i_Person_Id  => i_Track.Person_Id,
                                        i_Track_Date => i_Track.Track_Date);
  
    if z_Htt_Gps_Track_Batches.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                          i_Filial_Id  => i_Track.Filial_Id,
                                          i_Track_Id   => v_Track_Id,
                                          i_Batch_Id   => i_Track.Batch_Id) then
      -- if batch saved then no need to resave it
      return;
    end if;
  
    if v_Track_Id is null then
      v_Track_Id := Htt_Next.Gps_Track_Id;
      v_Exists   := 'N';
    end if;
  
    if v_Exists = 'Y' then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = v_Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, i_Track.Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, v_Track_Id, i_Track.Data);
    end if;
  
    -- gps track batches
    z_Htt_Gps_Track_Batches.Insert_One(i_Company_Id => i_Track.Company_Id,
                                       i_Filial_Id  => i_Track.Filial_Id,
                                       i_Track_Id   => v_Track_Id,
                                       i_Batch_Id   => i_Track.Batch_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt) is
    v_Data blob;
    v_Text varchar2(4000);
  
    --------------------------------------------------
    Procedure Text_Append(i_Text varchar2) is
    begin
      v_Text := v_Text || i_Text || Htt_Pref.c_Gps_Track_Column_Delimiter;
    end;
  begin
    Text_Append(to_char(i_Track.Track_Time, 'hh24:mi:ss'));
    Text_Append(i_Track.Lat);
    Text_Append(i_Track.Lng);
    Text_Append(i_Track.Accuracy);
    Text_Append(i_Track.Provider);
  
    Dbms_Lob.Createtemporary(v_Data, false);
    Dbms_Lob.Open(v_Data, Dbms_Lob.Lob_Readwrite);
    Dbms_Lob.Writeappend(v_Data,
                         Length(v_Text) + 1,
                         Utl_Raw.Cast_To_Raw(v_Text || Htt_Pref.c_Gps_Track_Row_Delimiter));
  
    if z_Htt_Gps_Tracks.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                   i_Filial_Id  => i_Track.Filial_Id,
                                   i_Track_Id   => i_Track.Track_Id) then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = i_Track.Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, v_Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, i_Track.Track_Id, v_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    r_Time_Kind    Htt_Time_Kinds%rowtype;
  
    v_Pcode  Htt_Request_Kinds.Pcode%type;
    v_Date   date := sysdate;
    v_Exists boolean := false;
  begin
    -- TODO add restriction on time_kind_id change
    -- make time_kind_id unchangeable
    -- or allow change to time kind with same plan_load
    -- maybe add timsheets regen after request_kind edit
    -- TODO: add calendar of production days
  
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Request_Kind.Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind.Request_Kind_Id,
                                      o_Row             => r_Request_Kind) then
      if r_Request_Kind.Pcode is not null then
        v_Pcode := r_Request_Kind.Pcode;
      
        if r_Request_Kind.Time_Kind_Id <> i_Request_Kind.Time_Kind_Id then
          Htt_Error.Raise_057(z_Htt_Time_Kinds.Load(i_Company_Id => r_Request_Kind.Company_Id, --
                              i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Name);
        end if;
      end if;
    
      v_Exists := true;
    end if;
  
    r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Request_Kind.Company_Id,
                                         i_Time_Kind_Id => i_Request_Kind.Time_Kind_Id);
  
    if r_Time_Kind.Requestable = 'N' then
      Htt_Error.Raise_058(r_Time_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Init(p_Row                      => r_Request_Kind,
                             i_Company_Id               => i_Request_Kind.Company_Id,
                             i_Request_Kind_Id          => i_Request_Kind.Request_Kind_Id,
                             i_Name                     => i_Request_Kind.Name,
                             i_Time_Kind_Id             => i_Request_Kind.Time_Kind_Id,
                             i_Annually_Limited         => i_Request_Kind.Annually_Limited,
                             i_Day_Count_Type           => i_Request_Kind.Day_Count_Type,
                             i_User_Permitted           => i_Request_Kind.User_Permitted,
                             i_Allow_Unused_Time        => i_Request_Kind.Allow_Unused_Time,
                             i_Request_Restriction_Days => i_Request_Kind.Request_Restriction_Days,
                             i_State                    => i_Request_Kind.State,
                             i_Pcode                    => v_Pcode);
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request_Kind.Annual_Day_Limit := i_Request_Kind.Annual_Day_Limit;
      r_Request_Kind.Carryover_Policy := i_Request_Kind.Carryover_Policy;
    
      if r_Request_Kind.Carryover_Policy <> Htt_Pref.c_Carryover_Policy_Zero then
        if r_Request_Kind.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
          r_Request_Kind.Carryover_Cap_Days := i_Request_Kind.Carryover_Cap_Days;
        end if;
      
        r_Request_Kind.Carryover_Expires_Days := i_Request_Kind.Carryover_Expires_Days;
      end if;
    end if;
  
    z_Htt_Request_Kinds.Save_Row(r_Request_Kind);
  
    -- fix request kind accruals
    if v_Exists then
      for r in (select *
                  from Htt_Staff_Request_Kinds q
                 where q.Company_Id = i_Request_Kind.Company_Id
                   and q.Request_Kind_Id = i_Request_Kind.Request_Kind_Id)
      loop
        Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => r.Company_Id,
                                               i_Filial_Id       => r.Filial_Id,
                                               i_Staff_Id        => r.Staff_Id,
                                               i_Request_Kind_Id => r.Request_Kind_Id,
                                               i_Period          => v_Date);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind_Id,
                                      o_Row             => r_Request_Kind) and
       r_Request_Kind.Pcode is not null then
      Htt_Error.Raise_059(r_Request_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                   i_Request_Kind_Id => i_Request_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Insert_Try(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Helper_Save
  (
    i_Request     Htt_Requests%rowtype,
    i_Staff_Id    number,
    i_Only_Insert boolean := false
  ) is
    v_Begin date;
    v_End   date;
  begin
    v_Begin := Trunc(i_Request.Begin_Time);
    v_End   := Trunc(i_Request.End_Time);
  
    if not i_Only_Insert then
      delete Htt_Request_Helpers q
       where q.Company_Id = i_Request.Company_Id
         and q.Filial_Id = i_Request.Filial_Id
         and q.Request_Id = i_Request.Request_Id;
    end if;
  
    while v_Begin <= v_End
    loop
      z_Htt_Request_Helpers.Insert_One(i_Company_Id    => i_Request.Company_Id,
                                       i_Filial_Id     => i_Request.Filial_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Interval_Date => v_Begin,
                                       i_Request_Id    => i_Request.Request_Id);
      v_Begin := v_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Save(i_Request Htt_Requests%rowtype) is
    r_Request      Htt_Requests%rowtype;
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Exists       boolean;
    v_Diff_Days    number;
    v_Plan_Load    varchar(1);
    v_Min_Length   number;
  begin
    if z_Htt_Requests.Exist_Lock(i_Company_Id => i_Request.Company_Id,
                                 i_Filial_Id  => i_Request.Filial_Id,
                                 i_Request_Id => i_Request.Request_Id,
                                 o_Row        => r_Request) then
      if r_Request.Status <> Htt_Pref.c_Request_Status_New then
        Htt_Error.Raise_060(i_Request_Status   => r_Request.Status,
                            i_Request_Kind_New => Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New));
      end if;
    
      if r_Request.Staff_Id <> i_Request.Staff_Id then
        Htt_Error.Raise_061(Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                 i_Filial_Id  => r_Request.Filial_Id,
                                                 i_Staff_Id   => r_Request.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Request.Company_Id := i_Request.Company_Id;
      r_Request.Filial_Id  := i_Request.Filial_Id;
      r_Request.Request_Id := i_Request.Request_Id;
      r_Request.Staff_Id   := i_Request.Staff_Id;
      r_Request.Status     := Htt_Pref.c_Request_Status_New;
      r_Request.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Request_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit);
    
      if v_Min_Length > Length(i_Request.Note) then
        Htt_Error.Raise_110(v_Min_Length);
      end if;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Request.Company_Id,
                                               i_Request_Kind_Id => i_Request.Request_Kind_Id);
  
    v_Plan_Load := z_Htt_Time_Kinds.Load(i_Company_Id => i_Request.Company_Id, i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Plan_Load;
  
    if v_Plan_Load = Htt_Pref.c_Plan_Load_Extra then
      Htt_Error.Raise_081;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if v_Plan_Load = Htt_Pref.c_Plan_Load_Full and
         i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        Htt_Error.Raise_062(Array_Varchar2(Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Full_Day),
                                           Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Multiple_Days)));
      end if;
    end if;
  
    v_Diff_Days := i_Request.End_Time - i_Request.Begin_Time;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if not (i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and v_Diff_Days > 0 and
          v_Diff_Days < 1 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day and v_Diff_Days = 0 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Multiple_Days and v_Diff_Days >= 1) then
        Htt_Error.Raise_063(i_Request_Type      => i_Request.Request_Type,
                            i_Request_Type_Name => Htt_Util.t_Request_Type(i_Request.Request_Type));
      end if;
    end if;
  
    r_Request.Request_Kind_Id := i_Request.Request_Kind_Id;
    r_Request.Request_Type    := i_Request.Request_Type;
    r_Request.Begin_Time      := i_Request.Begin_Time;
    r_Request.End_Time        := i_Request.End_Time;
    r_Request.Note            := i_Request.Note;
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request.Accrual_Kind := Nvl(i_Request.Accrual_Kind, Htt_Pref.c_Accrual_Kind_Plan);
    else
      r_Request.Accrual_Kind := null;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if r_Request_Kind.Request_Restriction_Days is not null then
        if Trunc(r_Request.Begin_Time) - Trunc(r_Request.Created_On) <
           r_Request_Kind.Request_Restriction_Days then
          Htt_Error.Raise_064(i_Restriction_Days => r_Request_Kind.Request_Restriction_Days,
                              i_Request_Begin    => Trunc(r_Request.Begin_Time),
                              i_Created_On       => Trunc(r_Request.Created_On));
        end if;
      end if;
    end if;
  
    Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                             i_Filial_Id    => r_Request.Filial_Id,
                                             i_Request_Id   => r_Request.Request_Id,
                                             i_Staff_Id     => r_Request.Staff_Id,
                                             i_Begin_Time   => r_Request.Begin_Time,
                                             i_End_Time     => r_Request.End_Time,
                                             i_Request_Type => r_Request.Request_Type);
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    if v_Exists then
      z_Htt_Requests.Update_Row(r_Request);
      Request_Helper_Save(r_Request, i_Staff_Id => r_Request.Staff_Id);
    else
      r_Request.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Requests,
                                               i_Id    => r_Request.Request_Id);
    
      z_Htt_Requests.Insert_Row(r_Request);
    
      Request_Helper_Save(r_Request, --
                          i_Staff_Id    => r_Request.Staff_Id,
                          i_Only_Insert => true);
    
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
  begin
    Htt_Core.Gen_Timesheet_Requests(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet_Plan
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
  begin
    Htt_Core.Change_Timesheet_Plans(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status = Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_065(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Completed),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Denied)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_New),
                              i_Approved_By  => Option_Number(null),
                              i_Completed_By => Option_Number(null));
  
    Fix_Timesheet(i_Company_Id => i_Company_Id,
                  i_Filial_Id  => i_Filial_Id,
                  i_Request_Id => i_Request_Id);
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  ) is
    r_Request          Htt_Requests%rowtype;
    v_Request_Settings Hes_Pref.Staff_Request_Manager_Approval_Rt := Hes_Util.Staff_Request_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                      i_Filial_Id  => i_Filial_Id,
                                                                                                                      i_User_Id    => i_User_Id);
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_066(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Approved),
                              i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Request_Settings.Request_Settings = 'Y' then
      Request_Complete(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Request_Id => i_Request_Id);
    else
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_067(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Completed),
                              i_Completed_By => Option_Number(Md_Env.User_Id));
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Fix_Timesheet(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Request_Id => i_Request_Id);
    end if;
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_068(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Denied),
                              i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_069(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    z_Htt_Requests.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Change_Days_By_Calendar
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    v_Plan_Time_Limit number;
  begin
    for r in (select q.Staff_Id,
                     q.Change_Date,
                     q.Swapped_Date,
                     q.Plan_Time,
                     q.Day_Kind,
                     w.Preholiday_Time,
                     w.Preweekend_Time,
                     c.Monthly_Limit,
                     c.Daily_Limit,
                     w.Plan_Time       Plan_Time_Limit,
                     s.Name            Schedule_Name,
                     c.Name            Calendar_Name,
                     t.Schedule_Id,
                     Ch.Change_Kind
                from Htt_Change_Days q
                join Htt_Plan_Changes Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Change_Id = q.Change_Id
                join Htt_Timesheets t
                  on t.Company_Id = q.Company_Id
                 and t.Filial_Id = q.Filial_Id
                 and t.Staff_Id = q.Staff_Id
                 and t.Timesheet_Date = q.Change_Date
                join Htt_Schedules s
                  on s.Company_Id = t.Company_Id
                 and s.Filial_Id = t.Filial_Id
                 and s.Schedule_Id = t.Schedule_Id
                join Htt_Calendars c
                  on c.Company_Id = t.Company_Id
                 and c.Filial_Id = t.Filial_Id
                 and c.Calendar_Id = t.Calendar_Id
                join Htt_Calendar_Week_Days w
                  on w.Company_Id = c.Company_Id
                 and w.Filial_Id = c.Filial_Id
                 and w.Calendar_Id = c.Calendar_Id
                 and w.Order_No = Htt_Util.Iso_Week_Day_No(t.Timesheet_Date)
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Change_Id = i_Change_Id)
    loop
      if r.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        if r.Monthly_Limit = 'Y' and Trunc(r.Change_Date, 'mon') <> Trunc(r.Swapped_Date, 'mon') then
          Htt_Error.Raise_119(i_Change_Date   => r.Change_Date,
                              i_Swapped_Date  => r.Swapped_Date,
                              i_Calendar_Name => r.Calendar_Name,
                              i_Schedule_Name => r.Schedule_Name);
        end if;
      end if;
    
      v_Plan_Time_Limit := Htt_Util.Get_Plan_Time(i_Company_Id      => i_Company_Id,
                                                  i_Filial_Id       => i_Filial_Id,
                                                  i_Staff_Id        => r.Staff_Id,
                                                  i_Date            => r.Change_Date,
                                                  i_Plan_Time       => r.Plan_Time_Limit,
                                                  i_Preholiday_Time => r.Preholiday_Time,
                                                  i_Preweekend_Time => r.Preweekend_Time);
    
      if r.Daily_Limit = 'Y' and r.Plan_Time / 60 > v_Plan_Time_Limit then
        Htt_Error.Raise_120(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    
      if r.Monthly_Limit = 'Y' and r.Change_Kind = Htt_Pref.c_Change_Kind_Change_Plan and
         not Fazo.Equal(r.Day_Kind,
                        Htt_Util.Schedule_Day_Kind(i_Company_Id    => i_Company_Id,
                                                   i_Filial_Id     => i_Filial_Id,
                                                   i_Staff_Id      => r.Staff_Id,
                                                   i_Schedule_Id   => r.Schedule_Id,
                                                   i_Schedule_Date => r.Change_Date)) then
        Htt_Error.Raise_121(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Change_Monthly_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change           Htt_Plan_Changes%rowtype;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
    v_Employee_Id      number;
    v_Change_Count     number;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => r_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    if v_Change_Day_Limit.Change_With_Monthly_Limit = 'Y' then
      for r in (select distinct Trunc(q.Change_Date, 'mon') Change_Month
                  from Htt_Plan_Changes t
                  join Htt_Change_Days q
                    on q.Company_Id = t.Company_Id
                   and q.Filial_Id = t.Filial_Id
                   and q.Change_Id = t.Change_Id
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Change_Id = i_Change_Id
                 order by 1)
      loop
        v_Change_Count := Htt_Util.Get_Staff_Change_Monthly_Count(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Change_Id  => i_Change_Id,
                                                                  i_Month      => r.Change_Month);
      
        if v_Change_Day_Limit.Change_Monthly_Limit < v_Change_Count then
          Htt_Error.Raise_133(z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, i_Person_Id => v_Employee_Id).Name,
                              r.Change_Month,
                              v_Change_Day_Limit.Change_Monthly_Limit,
                              v_Change_Count);
        end if;
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt) is
    r_Change           Htt_Plan_Changes%rowtype;
    r_Change_Day       Htt_Change_Days%rowtype;
    v_Change_Dates     Array_Date := Array_Date();
    v_Change_Day       Htt_Pref.Change_Day_Rt;
    v_Swapped_Date     date;
    v_Exists           boolean;
    v_Min_Length       number;
    v_Employee_Id      number;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
  
    -------------------------------------------------- 
    Procedure Prepare_Change_Day(p_Change_Date in out nocopy Htt_Change_Days%rowtype) is
    begin
      if p_Change_Date.Day_Kind in (Htt_Pref.c_Day_Kind_Rest,
                                    Htt_Pref.c_Day_Kind_Holiday,
                                    Htt_Pref.c_Day_Kind_Additional_Rest) or
         p_Change_Date.Day_Kind is null then
        p_Change_Date.Begin_Time       := null;
        p_Change_Date.End_Time         := null;
        p_Change_Date.Break_Enabled    := null;
        p_Change_Date.Break_Begin_Time := null;
        p_Change_Date.Break_End_Time   := null;
        p_Change_Date.Plan_Time        := null;
      
        if p_Change_Date.Day_Kind is not null then
          p_Change_Date.Plan_Time := 0;
        end if;
      else
        p_Change_Date.Break_Enabled := Nvl(p_Change_Date.Break_Enabled, 'N');
      
        if p_Change_Date.End_Time <= p_Change_Date.Begin_Time then
          p_Change_Date.End_Time := p_Change_Date.End_Time + 1;
        end if;
      
        if p_Change_Date.Break_Enabled = 'Y' then
          if p_Change_Date.Break_Begin_Time <= p_Change_Date.Begin_Time then
            p_Change_Date.Break_Begin_Time := p_Change_Date.Break_Begin_Time + 1;
          end if;
        
          if p_Change_Date.Break_End_Time <= p_Change_Date.Break_Begin_Time then
            p_Change_Date.Break_End_Time := p_Change_Date.Break_End_Time + 1;
          end if;
        else
          p_Change_Date.Break_Begin_Time := null;
          p_Change_Date.Break_End_Time   := null;
        end if;
      end if;
    end;
  begin
    if i_Change.Change_Days.Count = 0 then
      Htt_Error.Raise_070;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit);
    
      if v_Min_Length > Length(i_Change.Note) then
        Htt_Error.Raise_109(v_Min_Length);
      end if;
    end if;
  
    if z_Htt_Plan_Changes.Exist_Lock(i_Company_Id => i_Change.Company_Id,
                                     i_Filial_Id  => i_Change.Filial_Id,
                                     i_Change_Id  => i_Change.Change_Id,
                                     o_Row        => r_Change) then
      if r_Change.Status <> Htt_Pref.c_Change_Status_New then
        Htt_Error.Raise_071(i_Change_Status   => r_Change.Status,
                            i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
      end if;
    
      if r_Change.Staff_Id <> i_Change.Staff_Id then
        Htt_Error.Raise_072(Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                 i_Filial_Id  => r_Change.Filial_Id,
                                                 i_Staff_Id   => r_Change.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Change.Company_Id := i_Change.Company_Id;
      r_Change.Filial_Id  := i_Change.Filial_Id;
      r_Change.Change_Id  := i_Change.Change_Id;
      r_Change.Staff_Id   := i_Change.Staff_Id;
      r_Change.Status     := Htt_Pref.c_Change_Status_New;
      r_Change.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if i_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
      if mod(i_Change.Change_Days.Count, 2) = 1 then
        Htt_Error.Raise_073;
      end if;
    end if;
  
    r_Change.Change_Kind := i_Change.Change_Kind;
    r_Change.Note        := i_Change.Note;
  
    if v_Exists then
      z_Htt_Plan_Changes.Update_Row(r_Change);
    else
      z_Htt_Plan_Changes.Insert_Row(r_Change);
    end if;
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Change.Company_Id,
                                               i_Filial_Id  => i_Change.Filial_Id,
                                               i_Staff_Id   => i_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Change.Company_Id,
                                                                   i_Filial_Id  => i_Change.Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    v_Change_Dates.Extend(i_Change.Change_Days.Count);
  
    for i in 1 .. i_Change.Change_Days.Count
    loop
      v_Change_Day := i_Change.Change_Days(i);
      v_Change_Dates(i) := v_Change_Day.Change_Date;
    
      v_Swapped_Date := null;
      if r_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        v_Swapped_Date := v_Change_Day.Swapped_Date;
      end if;
    
      if v_Change_Day_Limit.Change_With_Restriction_Days = 'Y' then
        if Trunc(Least(v_Change_Dates(i), Nvl(v_Swapped_Date, v_Change_Dates(i)))) -
           Trunc(r_Change.Created_On) < v_Change_Day_Limit.Change_Restriction_Days then
          Htt_Error.Raise_112(i_Restriction_Days => v_Change_Day_Limit.Change_Restriction_Days,
                              i_Change_Day       => Trunc(Least(v_Change_Dates(i),
                                                                Nvl(v_Swapped_Date, v_Change_Dates(i)))),
                              i_Created_On       => Trunc(r_Change.Created_On));
        end if;
      end if;
    
      r_Change_Day.Company_Id       := r_Change.Company_Id;
      r_Change_Day.Filial_Id        := r_Change.Filial_Id;
      r_Change_Day.Change_Id        := r_Change.Change_Id;
      r_Change_Day.Change_Date      := v_Change_Day.Change_Date;
      r_Change_Day.Swapped_Date     := v_Swapped_Date;
      r_Change_Day.Staff_Id         := r_Change.Staff_Id;
      r_Change_Day.Day_Kind         := v_Change_Day.Day_Kind;
      r_Change_Day.Begin_Time       := v_Change_Day.Begin_Time;
      r_Change_Day.End_Time         := v_Change_Day.End_Time;
      r_Change_Day.Break_Enabled    := v_Change_Day.Break_Enabled;
      r_Change_Day.Break_Begin_Time := v_Change_Day.Break_Begin_Time;
      r_Change_Day.Break_End_Time   := v_Change_Day.Break_End_Time;
      r_Change_Day.Plan_Time        := v_Change_Day.Plan_Time;
    
      Prepare_Change_Day(r_Change_Day);
    
      r_Change_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Change_Day.Day_Kind,
                                                        i_Begin_Time       => r_Change_Day.Begin_Time,
                                                        i_End_Time         => r_Change_Day.End_Time,
                                                        i_Break_Begin_Time => r_Change_Day.Break_Begin_Time,
                                                        i_Break_End_Time   => r_Change_Day.Break_End_Time);
      -- full time in seconds
      r_Change_Day.Full_Time := r_Change_Day.Full_Time * 60;
    
      z_Htt_Change_Days.Save_Row(r_Change_Day);
    end loop;
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    if v_Exists then
      delete from Htt_Change_Days Cd
       where Cd.Company_Id = r_Change.Company_Id
         and Cd.Filial_Id = r_Change.Filial_Id
         and Cd.Change_Id = r_Change.Change_Id
         and Cd.Change_Date not member of v_Change_Dates;
    end if;
  
    -- checking for monthly limit
    if v_Change_Day_Limit.Change_With_Monthly_Limit = 'Y' then
      Check_Change_Monthly_Limit(i_Company_Id => i_Change.Company_Id,
                                 i_Filial_Id  => i_Change.Filial_Id,
                                 i_Change_Id  => i_Change.Change_Id);
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    if not v_Exists then
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_074(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    z_Htt_Plan_Changes.Delete_One(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_075(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Completed),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Denied)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_New),
                                  i_Approved_By  => Option_Number(null),
                                  i_Completed_By => Option_Number(null));
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Change_Id  => i_Change_Id);
    end if;
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  ) is
    r_Change          Htt_Plan_Changes%rowtype;
    v_Change_Settings Hes_Pref.Staff_Change_Manager_Approval_Rt := Hes_Util.Staff_Change_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                   i_Filial_Id  => i_Filial_Id,
                                                                                                                   i_User_Id    => i_User_Id);
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_076(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Approved),
                                  i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Change_Settings.Change_Settings = 'Y' then
      Change_Complete(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Change_Id  => i_Change_Id);
    else
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_077(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    -- checking for monthly limit
    Check_Change_Monthly_Limit(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Change_Id  => i_Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Completed),
                                  i_Completed_By => Option_Number(Md_Env.User_Id));
  
    Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Change_Id  => i_Change_Id);
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_078(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Denied),
                                  i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weights_Save(i_Change_Day_Weights Htt_Pref.Change_Day_Weights) is
    r_Change       Htt_Plan_Changes%rowtype;
    r_Change_Day   Htt_Change_Days%rowtype;
    v_Weight       Htt_Pref.Time_Weight_Rt;
    v_Begin_Minute number;
    v_End_Minute   number;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Change_Day_Weights.Company_Id,
                                             i_Filial_Id  => i_Change_Day_Weights.Filial_Id,
                                             i_Change_Id  => i_Change_Day_Weights.Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Htt_Error.Raise_132(r_Change.Change_Id);
    end if;
  
    r_Change_Day := z_Htt_Change_Days.Load(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                           i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                           i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                           i_Change_Date => i_Change_Day_Weights.Change_Date,
                                           i_Change_Id   => i_Change_Day_Weights.Change_Id);
  
    if r_Change_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Change_Day.Swapped_Date is not null then
      return;
    end if;
  
    -- delete old weight
    delete Htt_Change_Day_Weights q
     where q.Company_Id = i_Change_Day_Weights.Company_Id
       and q.Filial_Id = i_Change_Day_Weights.Filial_Id
       and q.Staff_Id = i_Change_Day_Weights.Staff_Id
       and q.Change_Date = i_Change_Day_Weights.Change_Date
       and q.Change_Id = i_Change_Day_Weights.Change_Id;
  
    v_Begin_Minute := (r_Change_Day.Begin_Time - Trunc(r_Change_Day.Change_Date)) * 1440;
    v_End_Minute   := (r_Change_Day.End_Time - Trunc(r_Change_Day.Change_Date)) * 1440;
  
    for i in 1 .. i_Change_Day_Weights.Weights.Count
    loop
      v_Weight := i_Change_Day_Weights.Weights(i);
    
      if v_Weight.Begin_Time < v_Begin_Minute then
        v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
        v_Weight.End_Time   := v_Weight.End_Time + 1440;
      end if;
    
      if v_Weight.End_Time < v_Weight.Begin_Time then
        v_Weight.End_Time := v_Weight.End_Time + 1440;
      end if;
    
      if v_Weight.Begin_Time = v_Weight.End_Time then
        Htt_Error.Raise_129(i_Part_No => i);
      end if;
    
      if v_Weight.End_Time > v_End_Minute then
        Htt_Error.Raise_130(i_Part_No         => i,
                            i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Begin_Minute, 1440)),
                            i_End_Time_Text   => Htt_Util.To_Time(mod(v_End_Minute, 1440)));
      end if;
    
      z_Htt_Change_Day_Weights.Insert_One(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                          i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                          i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                          i_Change_Id   => i_Change_Day_Weights.Change_Id,
                                          i_Change_Date => i_Change_Day_Weights.Change_Date,
                                          i_Begin_Time  => v_Weight.Begin_Time,
                                          i_End_Time    => v_Weight.End_Time,
                                          i_Weight      => v_Weight.Weight);
    end loop;
  
    Htt_Util.Assert_Change_Day_Weights(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                       i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                       i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                       i_Change_Date => i_Change_Day_Weights.Change_Date,
                                       i_Change_Id   => i_Change_Day_Weights.Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
  begin
    Htt_Core.Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  i_Dates       => i_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Total_Distance number;
  begin
    for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                 from Htt_Gps_Tracks q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Calculated = 'N')
    loop
      v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Person_Id  => Gt.Person_Id,
                                                           i_Track_Date => Gt.Track_Date);
    
      z_Htt_Gps_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Track_Id       => Gt.Track_Id,
                                  i_Total_Distance => Option_Number(v_Total_Distance),
                                  i_Calculated     => Option_Varchar2('Y'));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt) is
    r_Registry      Htt_Schedule_Registries%rowtype;
    r_Day           Htt_Unit_Schedule_Days%rowtype;
    v_Unit          Htt_Pref.Registry_Unit_Rt;
    v_Unit_Day      Htt_Pref.Schedule_Day_Rt;
    v_Used_Unit_Ids Array_Number := Array_Number();
  
    v_Old_Calendar_Id    number;
    v_Calendar_Changed   varchar2(1) := 'N';
    v_Holidays_Changed   varchar2(1) := 'N';
    v_Nonworking_Changed varchar2(1) := 'N';
  
    v_Company_Id number := i_Registry.Company_Id;
    v_Filial_Id  number := i_Registry.Filial_Id;
  
    v_Staff_Name varchar2(500 char);
    v_Robot_Name varchar2(500 char);
  
    --------------------------------------------------
    Procedure Save_Registry is
      v_Exists boolean;
    begin
      if z_Htt_Schedule_Registries.Exist_Lock(i_Company_Id  => i_Registry.Company_Id,
                                              i_Filial_Id   => i_Registry.Filial_Id,
                                              i_Registry_Id => i_Registry.Registry_Id,
                                              o_Row         => r_Registry) then
        if r_Registry.Posted = 'Y' then
          Htt_Error.Raise_083;
        end if;
      
        if r_Registry.Registry_Kind <> i_Registry.Registry_Kind then
          Htt_Error.Raise_084;
        end if;
      
        v_Old_Calendar_Id := r_Registry.Calendar_Id;
      
        if not Fazo.Equal(v_Old_Calendar_Id, i_Registry.Calendar_Id) then
          v_Calendar_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Holidays <> i_Registry.Take_Holidays then
          v_Holidays_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Nonworking <> i_Registry.Take_Nonworking then
          v_Nonworking_Changed := 'Y';
        end if;
      
        v_Exists := true;
      else
        r_Registry.Company_Id    := i_Registry.Company_Id;
        r_Registry.Filial_Id     := i_Registry.Filial_Id;
        r_Registry.Registry_Id   := i_Registry.Registry_Id;
        r_Registry.Registry_Kind := i_Registry.Registry_Kind;
        r_Registry.Schedule_Kind := i_Registry.Schedule_Kind;
      
        v_Exists := false;
      end if;
    
      r_Registry.Registry_Date             := i_Registry.Registry_Date;
      r_Registry.Registry_Number           := i_Registry.Registry_Number;
      r_Registry.Month                     := i_Registry.Month;
      r_Registry.Division_Id               := i_Registry.Division_Id;
      r_Registry.Note                      := i_Registry.Note;
      r_Registry.Posted                    := 'N';
      r_Registry.Shift                     := i_Registry.Shift;
      r_Registry.Input_Acceptance          := i_Registry.Input_Acceptance;
      r_Registry.Output_Acceptance         := i_Registry.Output_Acceptance;
      r_Registry.Track_Duration            := i_Registry.Track_Duration;
      r_Registry.Count_Late                := i_Registry.Count_Late;
      r_Registry.Count_Lack                := i_Registry.Count_Lack;
      r_Registry.Count_Early               := i_Registry.Count_Early;
      r_Registry.Count_Free                := i_Registry.Count_Free;
      r_Registry.Allowed_Late_Time         := i_Registry.Allowed_Late_Time;
      r_Registry.Allowed_Early_Time        := i_Registry.Allowed_Early_Time;
      r_Registry.Begin_Late_Time           := i_Registry.Begin_Late_Time;
      r_Registry.End_Early_Time            := i_Registry.End_Early_Time;
      r_Registry.Calendar_Id               := i_Registry.Calendar_Id;
      r_Registry.Take_Holidays             := i_Registry.Take_Holidays;
      r_Registry.Take_Nonworking           := i_Registry.Take_Nonworking;
      r_Registry.Take_Additional_Rest_Days := i_Registry.Take_Additional_Rest_Days;
      r_Registry.Gps_Turnout_Enabled       := Nvl(i_Registry.Gps_Turnout_Enabled, 'N');
      r_Registry.Gps_Use_Location          := Nvl(i_Registry.Gps_Use_Location, 'N');
      r_Registry.Gps_Max_Interval          := i_Registry.Gps_Max_Interval;
    
      if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        if r_Registry.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
          Htt_Error.Raise_108;
        end if;
      
        if i_Registry.Advanced_Setting = 'Y' then
          Htt_Error.Raise_117;
        end if;
      
        r_Registry.Shift             := 0;
        r_Registry.Input_Acceptance  := r_Registry.Track_Duration;
        r_Registry.Output_Acceptance := r_Registry.Track_Duration;
      
        r_Registry.Count_Late  := 'N';
        r_Registry.Count_Early := 'N';
        r_Registry.Count_Lack  := 'N';
        r_Registry.Count_Free  := 'N';
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      elsif r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
        r_Registry.Shift             := null;
        r_Registry.Input_Acceptance  := null;
        r_Registry.Output_Acceptance := null;
        r_Registry.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      end if;
    
      if r_Registry.Gps_Turnout_Enabled = 'N' then
        r_Registry.Gps_Use_Location := 'N';
        r_Registry.Gps_Max_Interval := null;
      end if;
    
      if v_Exists then
        z_Htt_Schedule_Registries.Update_Row(r_Registry);
      else
        if r_Registry.Registry_Number is null then
          r_Registry.Registry_Number := Md_Core.Gen_Number(i_Company_Id => r_Registry.Company_Id,
                                                           i_Filial_Id  => r_Registry.Filial_Id,
                                                           i_Table      => Zt.Htt_Schedule_Registries,
                                                           i_Column     => z.Registry_Number);
        end if;
      
        z_Htt_Schedule_Registries.Insert_Row(r_Registry);
      end if;
    end;
  
  begin
    -- save registry start
    Save_Registry;
  
    for i in 1 .. i_Registry.Units.Count
    loop
      v_Unit := i_Registry.Units(i);
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff and
         (v_Unit.Robot_Id is not null or v_Unit.Staff_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_086;
      end if;
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot and
         (v_Unit.Staff_Id is not null or v_Unit.Robot_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_087;
      end if;
    
      z_Htt_Registry_Units.Save_One(i_Company_Id      => i_Registry.Company_Id,
                                    i_Filial_Id       => i_Registry.Filial_Id,
                                    i_Unit_Id         => v_Unit.Unit_Id,
                                    i_Registry_Id     => i_Registry.Registry_Id,
                                    i_Staff_Id        => v_Unit.Staff_Id,
                                    i_Robot_Id        => v_Unit.Robot_Id,
                                    i_Monthly_Minutes => v_Unit.Monthly_Minutes,
                                    i_Monthly_Days    => v_Unit.Monthly_Days);
    
      -- todo: assert v_unit.unit_days must be full month
    
      for k in 1 .. v_Unit.Unit_Days.Count
      loop
        v_Unit_Day := v_Unit.Unit_Days(k);
      
        if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          v_Unit_Day.Begin_Time    := 0;
          v_Unit_Day.End_Time      := 0;
          v_Unit_Day.Break_Enabled := 'N';
        end if;
      
        -- todo: comment
        -- check month
        if Trunc(v_Unit_Day.Schedule_Date, 'mon') <> i_Registry.Month then
          if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            v_Staff_Name := z_Md_Persons.Load(i_Company_Id => v_Company_Id, i_Person_Id => z_Href_Staffs.Load( --
                            i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Staff_Id => v_Unit.Staff_Id).Employee_Id).Name;
          
            Htt_Error.Raise_085(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Staff_Name    => v_Staff_Name);
          else
            v_Robot_Name := z_Mrf_Robots.Load(i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Robot_Id => v_Unit.Robot_Id).Name;
            Htt_Error.Raise_099(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Robot_Name    => v_Robot_Name);
          end if;
        end if;
      
        r_Day := null;
      
        r_Day.Company_Id    := i_Registry.Company_Id;
        r_Day.Filial_Id     := i_Registry.Filial_Id;
        r_Day.Unit_Id       := v_Unit.Unit_Id;
        r_Day.Schedule_Date := v_Unit_Day.Schedule_Date;
        r_Day.Day_Kind      := v_Unit_Day.Day_Kind;
      
        if v_Unit_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
          r_Day.Begin_Time := r_Day.Schedule_Date +
                              Numtodsinterval(v_Unit_Day.Begin_Time, 'minute');
          r_Day.End_Time   := r_Day.Schedule_Date + --
                              Numtodsinterval(v_Unit_Day.End_Time, 'minute');
        
          if r_Day.End_Time <= r_Day.Begin_Time then
            r_Day.End_Time := r_Day.End_Time + 1;
          end if;
        
          r_Day.Break_Enabled := v_Unit_Day.Break_Enabled;
        
          if v_Unit_Day.Break_Enabled = 'Y' then
            r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_Begin_Time, 'minute');
            r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_End_Time, 'minute');
          
            if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
              r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
            end if;
          
            if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
              r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
            end if;
          end if;
        
          r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                     i_Begin_Time       => r_Day.Begin_Time,
                                                     i_End_Time         => r_Day.End_Time,
                                                     i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                     i_Break_End_Time   => r_Day.Break_End_Time);
        
          r_Day.Plan_Time := v_Unit_Day.Plan_Time;
        else
          r_Day.Full_Time := 0;
          r_Day.Plan_Time := 0;
        end if;
      
        r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Registry.Shift, 'minute');
        r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
        r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                  Numtodsinterval(r_Registry.Input_Acceptance, 'minute');
        r_Day.Output_Border    := r_Day.Shift_End_Time +
                                  Numtodsinterval(r_Registry.Output_Acceptance, 'minute');
      
        z_Htt_Unit_Schedule_Days.Save_Row(r_Day);
      end loop;
    
      Fazo.Push(v_Used_Unit_Ids, v_Unit.Unit_Id);
    end loop;
  
    -- delete unnecessary rows
    delete Htt_Registry_Units p
     where p.Company_Id = i_Registry.Company_Id
       and p.Filial_Id = i_Registry.Filial_Id
       and p.Registry_Id = i_Registry.Registry_Id
       and p.Unit_Id not member of v_Used_Unit_Ids;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_088;
    end if;
  
    z_Htt_Schedule_Registries.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Registry_Id => i_Registry_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
    -------------------------------------------------- 
    Procedure Check_Same_Date
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Registry_Id number
    ) is
      v_Staff_Id number;
      v_Robot_Id number;
    begin
      -- todo: optimize query
      select q.Staff_Id, q.Robot_Id
        into v_Staff_Id, v_Robot_Id
        from Htt_Registry_Units q
        join Htt_Schedule_Registries d
          on d.Company_Id = q.Company_Id
         and d.Filial_Id = q.Filial_Id
         and d.Registry_Id = q.Registry_Id
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id <> i_Registry_Id
         and d.Posted = 'Y'
         and exists (select 1
                from Htt_Registry_Units r
                join Htt_Schedule_Registries s
                  on s.Company_Id = r.Company_Id
                 and s.Filial_Id = r.Filial_Id
                 and s.Registry_Id = r.Registry_Id
               where r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and s.Month = d.Month
                 and (r.Staff_Id = q.Staff_Id or r.Robot_Id = q.Robot_Id)
                 and r.Registry_Id = i_Registry_Id)
         and Rownum = 1;
    
      if v_Staff_Id is not null then
        Htt_Error.Raise_096(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => v_Staff_Id));
      end if;
      if v_Robot_Id is not null then
        Htt_Error.Raise_097(z_Mrf_Robots.Take( --
                            i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    exception
      when No_Data_Found then
        null;
    end;
  
    --------------------------------------------------
    Procedure Swap_Staff_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Staff_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Staff_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Staff_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Swap_Robot_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Robot_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Robot_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Robot_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Load_Calendar_Days is
      v_Unit_Ids                   Array_Number;
      v_Swappable                  boolean := false;
      r_Staff_Schedule_Date        Htt_Staff_Schedule_Days%rowtype;
      r_Staff_Schedule_Swaped_Date Htt_Staff_Schedule_Days%rowtype;
      r_Robot_Schedule_Date        Htt_Robot_Schedule_Days%rowtype;
      r_Robot_Schedule_Swaped_Date Htt_Robot_Schedule_Days%rowtype;
    begin
      select q.Unit_Id
        bulk collect
        into v_Unit_Ids
        from Htt_Registry_Units q
       where q.Company_Id = r_Registry.Company_Id
         and q.Filial_Id = r_Registry.Filial_Id
         and q.Registry_Id = r_Registry.Registry_Id;
    
      for r in (select *
                  from Htt_Calendar_Days q
                 where q.Company_Id = r_Registry.Company_Id
                   and q.Filial_Id = r_Registry.Filial_Id
                   and q.Calendar_Id = r_Registry.Calendar_Id
                   and Trunc(q.Calendar_Date, 'mon') = r_Registry.Month
                   and (q.Swapped_Date is null or --
                       Trunc(q.Swapped_Date, 'mon') = r_Registry.Month))
      loop
        for i in 1 .. v_Unit_Ids.Count
        loop
          if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            r_Staff_Schedule_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Staff_Schedule_Date.Begin_Time       := null;
              r_Staff_Schedule_Date.End_Time         := null;
              r_Staff_Schedule_Date.Break_Enabled    := null;
              r_Staff_Schedule_Date.Break_Begin_Time := null;
              r_Staff_Schedule_Date.Break_End_Time   := null;
              r_Staff_Schedule_Date.Full_Time        := 0;
              r_Staff_Schedule_Date.Plan_Time        := 0;
              r_Staff_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Staff_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Staff_Schedule_Swaped_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Swaped_Date,
                                          p_Work_Day => r_Staff_Schedule_Date);
                else
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Date,
                                          p_Work_Day => r_Staff_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Date);
          else
            r_Robot_Schedule_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Robot_Schedule_Date.Begin_Time       := null;
              r_Robot_Schedule_Date.End_Time         := null;
              r_Robot_Schedule_Date.Break_Enabled    := null;
              r_Robot_Schedule_Date.Break_Begin_Time := null;
              r_Robot_Schedule_Date.Break_End_Time   := null;
              r_Robot_Schedule_Date.Full_Time        := 0;
              r_Robot_Schedule_Date.Plan_Time        := 0;
              r_Robot_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Robot_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Robot_Schedule_Swaped_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Swaped_Date,
                                          p_Work_Day => r_Robot_Schedule_Date);
                else
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Date,
                                          p_Work_Day => r_Robot_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Date);
          end if;
        end loop;
      end loop;
    end;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_093;
    end if;
  
    Check_Same_Date(i_Company_Id  => i_Company_Id,
                    i_Filial_Id   => i_Filial_Id,
                    i_Registry_Id => r_Registry.Registry_Id);
  
    r_Registry.Posted := 'Y';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      insert into Htt_Staff_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Staff_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Staff_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      insert into Htt_Robot_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Robot_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Robot_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    if r_Registry.Calendar_Id is not null then
      Load_Calendar_Days;
    end if;
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    else
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    end if;
  
    Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Registry_Id => i_Registry_Id);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => r_Registry.Company_Id,
                                        i_Filial_Id   => r_Registry.Filial_Id,
                                        i_Schedule_Id => v_Schedule_Id,
                                        i_Calendar_Id => r_Registry.Calendar_Id,
                                        i_Year_Begin  => Trunc(r_Registry.Month, 'year'),
                                        i_Registry_Id => r_Registry.Registry_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    r_Registry.Posted := 'N';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      delete Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      delete Htt_Robot_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    -- when repost this function runs into post function
    if not i_Repost then
      Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Registry_Id => i_Registry_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype) is
    r_Server      Htt_Acms_Servers%rowtype;
    v_Secret_Code varchar2(4000);
  begin
    if not z_Htt_Acms_Servers.Exist_Lock(i_Server_Id => i_Server.Server_Id, --
                                         o_Row       => r_Server) then
    
      v_Secret_Code := i_Server.Url || Sys_Guid() || i_Server.Server_Id;
    
      r_Server.Server_Id   := i_Server.Server_Id;
      r_Server.Secret_Code := Fazo.Hash_Sha1(v_Secret_Code);
    end if;
  
    r_Server.Name     := i_Server.Name;
    r_Server.Url      := i_Server.Url;
    r_Server.Order_No := i_Server.Order_No;
  
    z_Htt_Acms_Servers.Save_Row(r_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
    v_Cnt number;
  begin
    select count(1)
      into v_Cnt
      from Htt_Company_Acms_Servers q
     where q.Server_Id = i_Server_Id;
  
    if v_Cnt > 0 then
      b.Raise_Error(t('some companies attached this server, initially you must detach companies. cnt: $1',
                      v_Cnt));
    end if;
  
    z_Htt_Acms_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Save_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                 and q.State = 'A')
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Delete_One(i_Company_Id => i_Company_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id))
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Device);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype) is
  begin
    z_Htt_Acms_Tracks.Insert_Row(i_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  ) is
    r_Hik_Track  Htt_Acms_Tracks%rowtype;
    r_Track      Htt_Tracks%rowtype;
    r_Device     Htt_Devices%rowtype;
    v_Filial_Ids Array_Number;
  begin
    r_Hik_Track := z_Htt_Acms_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Track_Id   => i_Track_Id);
  
    if r_Hik_Track.Status = Htt_Pref.c_Acms_Track_Status_Completed then
      b.Raise_Error(t('acms track was already integrate, track_id=$1', i_Track_Id));
    end if;
  
    r_Device := z_Htt_Devices.Load(i_Company_Id => r_Hik_Track.Company_Id,
                                   i_Device_Id  => r_Hik_Track.Device_Id);
  
    r_Track.Company_Id  := r_Hik_Track.Company_Id;
    r_Track.Track_Time  := Htt_Util.Convert_Timestamp(i_Date     => r_Hik_Track.Track_Datetime,
                                                      i_Timezone => Htt_Util.Load_Timezone(i_Company_Id  => r_Device.Company_Id,
                                                                                           i_Location_Id => r_Device.Location_Id));
    r_Track.Track_Type  := r_Hik_Track.Track_Type;
    r_Track.Person_Id   := r_Hik_Track.Person_Id;
    r_Track.Mark_Type   := r_Hik_Track.Mark_Type;
    r_Track.Device_Id   := r_Hik_Track.Device_Id;
    r_Track.Location_Id := r_Device.Location_Id;
    r_Track.Is_Valid    := 'Y';
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    if v_Filial_Ids.Count = 0 then
      Htt_Error.Raise_105(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Location_Id => r_Track.Location_Id,
                          i_Person_Id   => r_Track.Person_Id);
    end if;
  
    for i in 1 .. v_Filial_Ids.Count
    loop
      r_Track.Filial_Id := v_Filial_Ids(i);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    r_Hik_Track.Status     := Htt_Pref.c_Acms_Track_Status_Completed;
    r_Hik_Track.Error_Text := null;
  
    z_Htt_Acms_Tracks.Save_Row(r_Hik_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Copies tracks from other filials to given filial
  -- Tracks are copied from hiring date in given filial
  -- First migrated employees temporary employees is filled
  -- Then tracks are migrated with attention to attached locations
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  ) is
    r_Track Htt_Tracks%rowtype;
  
    --------------------------------------------------
    Procedure Fill_Migrated_Employees
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Employee_Ids Array_Number
    ) is
      v_Date  date := Trunc(sysdate);
      v_Count number := i_Employee_Ids.Count;
    begin
      insert into Htt_Migrated_Employees
        (Company_Id, Filial_Id, Employee_Id, Period_Begin)
        select i_Company_Id, p.Filial_Id, Qr.Employee_Id, Qr.Hiring_Date
          from (select q.Employee_Id, q.Hiring_Date
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and (v_Count = 0 or q.Employee_Id member of i_Employee_Ids)
                   and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                   and q.State = 'A'
                   and q.Hiring_Date <= v_Date
                   and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)) Qr
          join Md_Filials p
            on p.Company_Id = i_Company_Id
           and p.Filial_Id <> i_Filial_Id
           and p.State = 'A';
    end;
  begin
    Fill_Migrated_Employees(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Employee_Ids => i_Employee_Ids);
  
    for r in (select *
                from Htt_Tracks p
               where (p.Company_Id, p.Filial_Id, p.Person_Id) in
                     (select q.Company_Id, q.Filial_Id, q.Employee_Id
                        from Htt_Migrated_Employees q)
                 and p.Track_Date >= (select q.Period_Begin
                                        from Htt_Migrated_Employees q
                                       where q.Company_Id = p.Company_Id
                                         and q.Filial_Id = p.Filial_Id
                                         and q.Employee_Id = p.Person_Id)
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = p.Person_Id)
                 and not exists (select 1
                        from Htt_Tracks T1
                       where T1.Company_Id = i_Company_Id
                         and T1.Filial_Id = i_Filial_Id
                         and T1.Track_Time = p.Track_Time
                         and T1.Person_Id = p.Person_Id
                         and Nvl(T1.Device_Id, -1) = Nvl(p.Device_Id, -1)
                         and T1.Original_Type = p.Original_Type))
    loop
      r_Track := r;
    
      r_Track.Filial_Id  := i_Filial_Id;
      r_Track.Track_Type := r.Original_Type;
      r_Track.Track_Id   := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    -- cleanup
    delete Htt_Migrated_Employees p
     where p.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Location_Sync_Person_Global,
                           i_Value      => i_Value);
  
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Htt_Api;
/

create or replace package Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_083;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_087;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_097(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2);

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_113;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_114;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_115;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_116;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_124(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_125
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_126(i_Schedule_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_127
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_128
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_129(i_Part_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_130
  (
    i_Part_No         number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_131(i_Change_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_132(i_Change_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_133
  (
    i_Employee_Name        varchar2,
    i_Change_Month         date,
    i_Change_Monthly_Limit number,
    i_Change_Monthly_Count number
  );
end Htt_Error;
/
create or replace package body Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Href_Pref.c_Htt_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('001:title:timesheet locked'),
          i_S1      => t('001:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('002:title:timesheet locked'),
          i_S1      => t('002:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('003:solution:reduce overtime by $1{overtime_exceed} and try again',
                              i_Overtime_Exceed_Text);
    end if;
  
    Error(i_Code    => '003',
          i_Message => t('003:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('003:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:fact value for $1{time_kind_name} exceeded 24 hours on timesheet $2{timesheet_date} for $3{staff_name}',
                         i_Time_Kind_Name,
                         i_Timesheet_Date,
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('005:solution:reduce overtime by $1{overtime_exceed} and try again');
    end if;
  
    Error(i_Code    => '005',
          i_Message => t('005:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('005:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => t('005:solution:increase free time on $1{timesheet_date} by changing plan hours in schedule $2{schedule_name}',
                         i_Timesheet_Date,
                         i_Schedule_Name),
          i_S3      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:request insertion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('006:title:timesheet locked'),
          i_S1      => t('006:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:track deletion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('007:title:timesheet locked'),
          i_S1      => t('007:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008 is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:{inserting overtime days} company id must be unique in dirty timesheet'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:cannot find location with $1{location_code}', i_Code),
          i_Title   => t('009:title:no data found'),
          i_S1      => t('009:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:cannot find location with $1{location_name}', i_Name),
          i_Title   => t('010:title:no data found'),
          i_S1      => t('010:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:cannot find schedule with $1{schedule_code}', i_Code),
          i_Title   => t('011:title:no data found'),
          i_S1      => t('011:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:cannot find schedule with $1{schedule_name}', i_Name),
          i_Title   => t('012:title:no data found'),
          i_S1      => t('012:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:marks for schedule $1{schedule_name} intersect on day $2{schedule_date}',
                         i_Schedule_Name,
                         i_Schedule_Date),
          i_S1      => t('013:solution:resolve intersection on $1{schedule_date} and try again',
                         i_Schedule_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:marks for template $1{template_name} intersect on day $2{day_no}',
                         i_Template_Name,
                         i_Day_No),
          i_S1      => t('014:solution:resolve intersection on $1{day_no} and try again', i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('015:title:timesheet locked'),
          i_S1      => t('015:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  ) is
    v_Exceed_Amount number := i_Used_Cnt + i_Request_Cnt - i_Annual_Limit;
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:staff $1{staff_name} request $2{request_kind_name} exceed annual limit $3{annual_limit} for year $4{exceed_year} by $5{exceed_amount}, used_amount:$6',
                         i_Staff_Name,
                         i_Request_Kind_Name,
                         i_Annual_Limit,
                         Extract(year from i_Year),
                         v_Exceed_Amount,
                         i_Used_Cnt),
          i_Title   => t('016:title:request annual limit exceeded'),
          i_S1      => t('016:solution:add annual limit for $1{request_kind_name}',
                         i_Request_Kind_Name),
          i_S2      => t('016:solution:decrease request days count by $1{exceed_amount}',
                         v_Exceed_Amount));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  ) is
  
    --------------------------------------------------
    Function Request_Time
    (
      i_Request_Type varchar2,
      i_Begin_Time   date,
      i_End_Time     date
    ) return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)') || to_char(i_Begin_Time, ', hh24:mi-') || to_char(i_End_Time,
                                                                                                          'hh24:mi');
        when Htt_Pref.c_Request_Type_Full_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return to_char(i_Begin_Time, 'fmdd mon (dy) - ') || to_char(i_End_Time, 'fmdd mon (dy)');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Begin_Inside boolean := i_Begin_Time between i_Intersect_Begin and i_Intersect_End;
      v_End_Inside   boolean := i_End_Time between i_Intersect_Begin and i_Intersect_End;
    begin
      case
        when v_Begin_Inside and not v_End_Inside then
          return t('017:solution:move request begin time after $1{intersect_end}', i_Intersect_End);
        when not v_Begin_Inside and v_End_Inside then
          return t('017:solution:move request end time before $1{intersect_start}',
                   i_Intersect_Begin);
        else
          return t('017:solution:move request out of $1{intersect_start} and $2{intersect_end}',
                   i_Intersect_Begin,
                   i_Intersect_End);
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:staff $1{staff_name} already has completed request during $2{request_time}',
                         i_Staff_Name,
                         Request_Time(i_Request_Type, i_Begin_Time, i_End_Time)),
          i_Title   => t('017:title:requests intersection'),
          i_S1      => t('017:solution:reset request with ID $1{request_id} and try again',
                         i_Intersect_Id),
          i_S2      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:chosen year ($1{chosen_year}) and calendar date year ($2{calendar_date}) are different',
                         i_Chosen_Year,
                         i_Calendar_Date),
          i_S1      => t('018:solution:change chosen year and try again'),
          i_S2      => t('018:solution:remove $1{calendar_date} from calendar and try again',
                         i_Calendar_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('019:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('020:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:cannot delete system calendar $1{calendar_id}', i_Calendar_Id),
          i_S1      => t('021:solution:remove this calendar from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022 is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:cannot change shift when schedule is attached to any staff'),
          i_Title   => t('022:title:used schedule'),
          i_S1      => t('022:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023 is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:cannot change track acceptance borders when schedule is attached to any staff'),
          i_Title   => t('023:title:used schedule'),
          i_S1      => t('023:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024 is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:cannot change track duration when schedule is attached to any staff'),
          i_Title   => t('024:title:used schedule'),
          i_S1      => t('024:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025 is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot change fact settings when schedule is attached to any staff'),
          i_Title   => t('025:title:used schedule'),
          i_S1      => t('025:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:chosen year ($1{chosen_year}) and schedule date year ($2{schedule_date}) are different',
                         i_Chosen_Year,
                         i_Schedule_Date),
          i_S1      => t('026:solution:change chosen year and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('027:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:pattern mark outside of worktime on day $1{day_no}', i_Day_No),
          i_S1      => t('028:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('028:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:marks begin time and end time is same on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('030:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:pattern mark outside of worktime on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('031:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('031:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('032:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  ) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:pattern mark outside of shift on day $1{day_no}', i_Day_No),
          i_S1      => t('033:solution:set mark end time before $1{shift_value}', i_Shift_Text),
          i_S2      => t('033:solution:set mark begin time after $1{shift_value}', i_Shift_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:cannot change time kind parent'),
          i_S1      => t('035:solution:restore old parent ($1{old_parent_name}) and try again',
                         i_Old_Parent_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036 is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:cannot set parent for system time kind'),
          i_S1      => t('036:solution:remove parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:cannot change plan load of system time kind'),
          i_S1      => t('037:solution:restore old plan load ($1{old_plan_load}) and try again',
                         i_Old_Plan_Load_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038 is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:cannot change requestable type of system time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039 is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:cannot create non system time kind without parent'),
          i_S1      => t('039:solution:set parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040 is
  begin
    Error(i_Code => '040', i_Message => t('040:message:cannot create non requestable time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041 is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:cannot set non system parent'),
          i_S1      => t('041:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042 is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:cannot set second level parent'),
          i_S1      => t('042:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2) is
  begin
    Error(i_Code    => '043',
          i_Message => t('043:message:time kind and its parent have different plan loads'),
          i_S1      => t('043:solution:set plan load to $1{parent_plan_load} and try again',
                         i_Parent_Plan_Load));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:cannot delete system time kind $1{time_kind_id}',
                         i_Time_Kind_Id),
          i_S1      => t('044:solution:remove this time kind from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  ) is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:found $1{main_photo_cnt} photos marked as main, only one photo can be main, person_name:$2',
                         i_Main_Photo_Cnt,
                         i_Person_Name),
          i_Title   => t('045:title:multiple main photos'),
          i_S1      => t('045:solution:unmark all photos and leave only one main photo'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  ) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:cannot change terminal model pcode'),
          i_S1      => t('046:solution:restore old pcode ($1{old_pcode}) for terminal model with ID $2{model_id}',
                         i_Old_Pcode,
                         i_Model_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047 is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:terminal must have model selected'),
          i_Title   => t('047:title:null model value'),
          i_S1      => t('047:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048 is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:location cannot be null'),
          i_Title   => t('048:title:null location value'),
          i_S1      => t('048:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050 is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:timepad must have language selected'),
          i_Title   => t('050:title:null language value'),
          i_S1      => t('050:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051 is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:terminal must have model selected'),
          i_Title   => t('051:title:null model value'),
          i_S1      => t('051:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052 is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:location cannot be null'),
          i_Title   => t('052:title:null location value'),
          i_S1      => t('052:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054 is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:timepad must have language selected'),
          i_Title   => t('054:title:null language value'),
          i_S1      => t('054:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:track $1{track_id} is already valid', i_Track_Id),
          i_S1      => t('055:solution:remove track $1{track_id} from validation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:track $1{track_id} is already invalid', i_Track_Id),
          i_S1      => t('056:solution:remove track $1{track_id} from invalidation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '057',
          i_Message => t('057:message:cant change time kind for system defined request kind'),
          i_S1      => t('057:solution:restore old time kind ($1{time_kind_name}) and try again',
                         i_Time_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:time kind $1{time_kind_name} is not requestable, it cannot be used for request kind',
                         i_Time_Kind_Name),
          i_S1      => t('058:solution:choose requestable time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:cant delete system defined request kind'),
          i_S1      => t('059:solution:remove request kind $1{request_kind_name} from deletion list and try again',
                         i_Request_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:to change/save request it shouldnt be approved, completed or denied {its status should be $1{request_status_new}}',
                         i_Request_Kind_New),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('060:solution:reset request and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:request staff cannot be changed'),
          i_S1      => t('061:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:request type and time kind plan load dont match'),
          i_S1      => t('062:solution:change requets type to one of $1{request_types} and try again',
                         Fazo.Gather(i_Allowed_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  ) is
  
    --------------------------------------------------
    Function Request_Time_Msg return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return t('063:request_time_msg:only part of day');
        when Htt_Pref.c_Request_Type_Full_Day then
          return t('063:request_time_msg:only one full day');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return t('063:request_time_msg:at least two days');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '063',
          i_Message => t('063:message:when request type is $1{request_type_name} request time should take $2{request_time_msg}',
                         i_Request_Type_Name,
                         Request_Time_Msg),
          i_Title   => t('063:title:request time is wrong'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('064:restriction_reason:request should be created $1{restriction_days} days in advance of request begin date $2{request_begin_date}',
                 v_Restriction_Days,
                 Trunc(i_Request_Begin));
      end if;
    
      return t('064:restriction_reason:request cannot be created $1{restriction_days} days after requst begin date $2{request_begin_date}',
               v_Restriction_Days,
               Trunc(i_Request_Begin));
    end;
  
  begin
    Error(i_Code    => '064',
          i_Message => t('064:message:exceeded request restriction days, $1{restriction_reason}',
                         Restriction_Reason),
          i_Title   => t('064:title:request restriction days'),
          i_S1      => t('064:solution:move request begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '065',
          i_Message => t('065:message:to reset request it must be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('065:solution:remove request (ID $1{request_id}) from reset list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '066',
          i_Message => t('066:message:to approve request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('066:solution:remove request (ID $1{request_id}) from approval list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '067',
          i_Message => t('067:message:to complete request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('067:solution:remove request (ID $1{request_id}) from completion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '068',
          i_Message => t('068:message:to deny request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('068:solution:remove request (ID $1{request_id}) from denial list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '069',
          i_Message => t('069:message:to delete request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('069:solution:remove request (ID $1{request_id}) from deletion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070 is
  begin
    Error(i_Code    => '070',
          i_Message => t('070:message:change must have at least one change day'),
          i_Title   => t('070:title:no change days'),
          i_S1      => t('070:solution:add change days and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '071',
          i_Message => t('071:message:to change/save plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('071:solution:reset plan change and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '072',
          i_Message => t('072:message:plan change staff cannot be changed'),
          i_S1      => t('072:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073 is
  begin
    Error(i_Code    => '073',
          i_Message => t('073:message:one date has not changed date'),
          i_S1      => t('073:title:add changed date for date which has not change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '074',
          i_Message => t('074:message:to delete plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('074:solution:remove plan change (ID $1{change_id}) from deletion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '075',
          i_Message => t('075:message:to reset plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('075:solution:remove plan change (ID $1{change_id}) from reset list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '076',
          i_Message => t('076:message:to approve plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('076:solution:remove plan change (ID $1{change_id}) from approval list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '077',
          i_Message => t('077:message:to complete plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('077:solution:remove plan change (ID $1{change_id}) from completion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '078',
          i_Message => t('078:message:to deny plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('078:solution:remove plan change (ID $1{change_id}) from denial list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079 is
  begin
    Error(i_Code => '079', i_Message => t('079:message:pin autogenerate value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080 is
  begin
    Error(i_Code => '080', i_Message => t('080:message:photo as face rec value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081 is
  begin
    Error(i_Code    => '081',
          i_Message => t('081:message:plan load cannot be extra'),
          i_S1      => t('081:solution:set another time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  ) is
  begin
    Error(i_Code    => '082',
          i_Message => t('082:message:qr code already deactivated, location_id:$1, location_name:$2, created_on:$3',
                         i_Location_Id,
                         i_Location_Name,
                         to_char(i_Created_On, Href_Pref.c_Date_Format_Second)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083 is
  begin
    Error(i_Code => '083', i_Message => t('083:message:cannot change posted, unpost first'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084 is
  begin
    Error(i_Code    => '084',
          i_Message => t('084:message:cannot change registry kind, registry kinds must be same'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '085',
          i_Message => t('085:message:chosen month for staff ($1{staff_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Staff_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('085:solution:change chosen month and try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086 is
  begin
    Error(i_Code    => '086',
          i_Message => t('086:message:cannot have robot unit in staff individual staff schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_087 is
  begin
    Error(i_Code    => '087',
          i_Message => t('087:message:cannot have staff unit in robot individual robot schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088 is
  begin
    Error(i_Code => '088', i_Message => t('088:message:cannot delete posted schedule registry'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '089',
          i_Message => t('089:message:Date ($1{i_date}) is missing in staff individual schedule for staff ($2{i_staff_name})',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '090',
          i_Message => t('090:message:Date ($1{i_date}) is missing in robot individual schedule for position: ($2{i_robot_name})',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  ) is
  begin
    Error(i_Code    => '091',
          i_Message => t('091:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) intersect',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '092',
          i_Message => t('092:message:At the date of ($1{i_date}) marks of robot ($2{i_robot_name}) intersect',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093 is
  begin
    Error(i_Code => '093', i_Message => t('093:message:cannot post posted documnent'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date) is
  begin
    Error(i_Code    => '094',
          i_Message => t('094:message:At the date of ($1{i_date}) there are no robot marks and no staff marks',
                         i_Date));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '095',
          i_Message => t('095:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) and of robot ($3{i_robot_name}) are present',
                         i_Date,
                         i_Staff_Name,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '096',
          i_Message => t('096:message:staff ($1{i_staff_name}) has at least two registries for individual schedule with intersecting dates.',
                         i_Staff_Name),
          i_S1      => t('096:Delete/unpost other registries then try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_097(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '097',
          i_Message => t('097:message:robot ($1{i_robot_name}) has at least two registries for individual schedule with intersecting date.',
                         i_Robot_Name),
          i_S1      => t('097:Delete/unpost other registries then try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '99',
          i_Message => t('099:message:chosen month for robot ($1{robot_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Robot_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('099:solution:change chosen month and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  ) is
  begin
    Error(i_Code    => '100',
          i_Message => t('100:message:staff $1{staff_name} already has approved plan change on $2{change_date}',
                         i_Staff_Name,
                         i_Change_Date),
          i_Title   => t('100:title:plan change intersection'),
          i_S1      => t('100:solution:reset change with ID $1{change_id} and try again',
                         i_Intersect_Id),
          i_S2      => t('100:solution:choose another change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '101',
          i_Message => t('101:message:$1{schedule_name} is system schedule, system schedule cannot be edited',
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '102',
          i_Message => t('102:message:$1{schedule_name} is system schedule, system schedule cannot be deleted',
                         i_Schedule_Name),
          i_S1      => t('102:solution:exclude $1{schedule_name} from delete list'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  ) is
  begin
    Error(i_Code    => '103',
          i_Message => t('103:message:found undefined days in schedule $1{schedule_name} on $2{undefined_month}',
                         i_Schedule_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('103:title:Undefined month'),
          i_S1      => t('103:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '104',
          i_Message => t('104:message:found undefined days in individual schedule for $1{staff_name} on $2{undefined_month}',
                         i_Staff_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('104:title:Undefined month'),
          i_S1      => t('104:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Error(i_Code    => '105',
          i_Message => t('105:message:the person is not attached to the location where the device is installed, filial=$2, location=$1, person=$3',
                         
                         z_Md_Filials.Take        (i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Name,
                         z_Htt_Locations.Take     (i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Name,
                         z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id).Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '106',
          i_Message => t('106:message:found undefined days in individual schedule for $1{robot_name} on $2{undefined_month}',
                         i_Robot_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('106:title:Undefined month'),
          i_S1      => t('106:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  ) is
  begin
    Error(i_Code    => '107',
          i_Message => t('107:message:employee $1{staff_name} has worktime intersection on $2{intersection_date}, end time for previous date $3{end_time} comes after begin time for current date $4{begin_time}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_End_Time, Href_Pref.c_Date_Format_Minute),
                         to_char(i_Begin_Time, Href_Pref.c_Date_Format_Minute)),
          i_Title   => t('107:title:work time intersection'),
          i_S1      => t('107:solution:move schedule change date after closest rest day, so worktime will not intersect'),
          i_S2      => t('107:solution:move begin time for $1{work_day_date} after $2{end_time} to remove intersection',
                         i_Timesheet_Date,
                         i_End_Time),
          i_S3      => t('107:solution:move end time for $1{work_day_date} before $2{begin_time} to remove intersection',
                         i_Timesheet_Date - 1,
                         i_Begin_Time));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108 is
  begin
    Error(i_Code    => '108',
          i_Message => t('108:message:max length of work day cannot exceed $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600),
          i_Title   => t('108:title:worktime limit'),
          i_S1      => t('108:solution:reduce max length of work day {defined by track_duration} to be less than $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number) is
  begin
    Error(i_Code    => '109',
          i_Message => t('109:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('109:title:length of note is not enough'),
          i_S1      => t('109:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number) is
  begin
    Error(i_Code    => '110',
          i_Message => t('110:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('110:title:length of note is not enough'),
          i_S1      => t('110:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2) is
  begin
    Error(i_Code    => '111',
          i_Message => t('111:message:you do not have access $1{schedule_kind} kind of schedule',
                         i_Schedule_Kind));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('112:message:restriction_reason:change should be created $1{restriction_days} days in advance of change day $2{change_day}',
                 v_Restriction_Days,
                 i_Change_Day);
      end if;
    
      return t('112:message:restriction_reason:change cannot be created $1{restriction_days} days after change day $2{change_day}',
               v_Restriction_Days,
               i_Change_Day);
    end;
  
  begin
    Error(i_Code    => '112',
          i_Message => Restriction_Reason,
          i_Title   => t('112:title:change restriction days'),
          i_S1      => t('112:solution:move change begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_113 is
  begin
    Error(i_Code    => '113',
          i_Message => t('113:message:cannot change allowed late time when schedule is attached to any staff'),
          i_Title   => t('113:title:used schedule'),
          i_S1      => t('113:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_114 is
  begin
    Error(i_Code    => '114',
          i_Message => t('114:message:cannot change allowed early time when schedule is attached to any staff'),
          i_Title   => t('114:title:used schedule'),
          i_S1      => t('114:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_115 is
  begin
    Error(i_Code    => '115',
          i_Message => t('115:message:cannot change begin late time when schedule is attached to any staff'),
          i_Title   => t('115:title:used schedule'),
          i_S1      => t('115:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_116 is
  begin
    Error(i_Code    => '116',
          i_Message => t('116:message:cannot change end early time when schedule is attached to any staff'),
          i_Title   => t('116:title:used schedule'),
          i_S1      => t('116:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117 is
  begin
    Error(i_Code    => '117',
          i_Message => t('117:message:cannot use advansed setting for $1{schedule_kind_name} schedule',
                         Htt_Util.t_Schedule_Kind(Htt_Pref.c_Schedule_Kind_Hourly)),
          i_Title   => t('117:title:used schedule'),
          i_S1      => t('117:solution:turn of advansed setting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118 is
  begin
    Error(i_Code    => '118',
          i_Message => t('118:message:location sync person global must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '119',
          i_Message => t('119:message:if there is a monthly limit in the staff calendar, swapped days should be in one month.
                                        you cannot swap $1{change_date} with $2{swapped_day} as there is a monthly limit on staff calendar',
                         i_Change_Date,
                         i_Swapped_Date),
          i_Title   => t('119:title:swapped dates are in different months'),
          i_S1      => t('119:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('119:solution:make the same month of swapped dates'),
          i_S3      => t('119:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '120',
          i_Message => t('120:message:plan time for $1{change_date} has exceeded the daily limit of calendar',
                         i_Change_Date),
          i_Title   => t('120:title:daily plan exceeded'),
          i_S1      => t('120:solution:turn off daily limit from $1{calendar_name}', i_Calendar_Name),
          i_S2      => t('120:solution:reduce plan time'),
          i_S3      => t('120:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '121',
          i_Message => t('121:message:because of monthly limit of calendar is on you cannot change day kind of $1{change_date}',
                         i_Change_Date),
          i_Title   => t('121:title:day kind changed'),
          i_S1      => t('121:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('121:solution:do not change the day kind'),
          i_S3      => t('121:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('122:message:in $1{robot_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    elsif i_Staff_Name is not null then
      v_Message := t('122:message:in $1{staff_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    else
      v_Message := t('122:message:for $1{schedule_date}, plan time has exceeded the limit of the calendar, plan_time = $2{plan_time}, limit_time = $3{limit_time}',
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    end if;
  
    Error(i_Code    => '122',
          i_Message => v_Message,
          i_Title   => t('122:title:daily plan time exceeded from calendar plan time'),
          i_S1      => t('122:solution:turn of daily limit from calendar'),
          i_S2      => t('122:solution:reduse daily plan time'),
          i_S3      => t('122:solution:remove calendar'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('123:message:in $1{robot_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Robot_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    elsif i_Staff_Name is not null then
      v_Message := t('123:message:in $1{staff_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Staff_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    else
      v_Message := t('123:message:plan days count must be the same with plan day limit in calendar for $1{month}, plan days = $2{plan_day}, limit day = $3{limit_day}',
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    end if;
  
    Error(i_Code    => '123',
          i_Message => v_Message,
          i_Title   => t('123:title:monthly working day count is not the same with calendar day limit'),
          i_S1      => t('123:solution:turn of monthly limit from calendar'),
          i_S2      => t('123:solution:make the same working day count with working day limit of calendar'),
          i_S3      => t('123:solution:remove calendar'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_124(i_Day_No number) is
  begin
    Error(i_Code    => '124',
          i_Message => t('124:message:pattern weighted time part begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('124:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_125
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '125',
          i_Message => t('125:message:pattern weighted time part outside of worktime on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('125:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('125:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_126(i_Schedule_Date date) is
  begin
    Error(i_Code    => '126',
          i_Message => t('126:message:weighted time part begin time and end time is same on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('126:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_127
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '127',
          i_Message => t('127:message:weighted time part outside of worktime on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('127:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('127:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_128
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '128',
          i_Message => t('128:message:weighted time part for schedule $1{schedule_name} intersect on day $2{schedule_date}',
                         i_Schedule_Name,
                         i_Schedule_Date),
          i_S1      => t('128:solution:resolve intersection on $1{schedule_date} and try again',
                         i_Schedule_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_129(i_Part_No number) is
  begin
    Error(i_Code    => '129',
          i_Message => t('129:message:change day weighted time part begin time and end time is same on part $1{part_no}',
                         i_Part_No),
          i_S1      => t('129:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_130
  (
    i_Part_No         number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '130',
          i_Message => t('130:message:change day weighted time part outside of worktime on part $1{part_no}',
                         i_Part_No),
          i_S1      => t('130:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('130:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_131(i_Change_Date date) is
  begin
    Error(i_Code    => '131',
          i_Message => t('131:message:weighted time part intersect on day $1{change_date}',
                         i_Change_Date),
          i_S1      => t('131:solution:resolve intersection on $1{change_date} and try again',
                         i_Change_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_132(i_Change_Id number) is
  begin
    Error(i_Code    => '132',
          i_Message => t('132:message:you cannot change weighted part if change status is $1{status_name}. change_id = $2{change_id}',
                         Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_Completed),
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_133
  (
    i_Employee_Name        varchar2,
    i_Change_Month         date,
    i_Change_Monthly_Limit number,
    i_Change_Monthly_Count number
  ) is
  begin
    Error(i_Code    => '133',
          i_Message => t('133:message:the employee $1{employee_name} has exceeded the maximum allowed schedule changes limit by $2{exceeded_count}, allowed $3{monthly_limit}, for $4{month_year}',
                         i_Employee_Name,
                         i_Change_Monthly_Count - i_Change_Monthly_Limit,
                         i_Change_Monthly_Limit,
                         to_char(i_Change_Month, 'Month yyyy')),
          i_S1      => t('133:solution:try to exceed the maximum allowed limit from settings'),
          i_S2      => t('133:solution:try to cancel one of the change requests'));
  end;

end Htt_Error;
/

create or replace package Htt_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  );
  ------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Week_Day
  (
    o_Calendar        in out nocopy Htt_Pref.Calendar_Rt,
    i_Order_No        number,
    i_Plan_Time       number,
    i_Preholiday_Hour number,
    i_Preweekend_Hour number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Calendar_Id   number,
    i_Name          varchar2,
    i_Code          varchar2,
    i_Year          number,
    i_Monthly_Limit varchar2,
    i_Daily_Limit   varchar2,
    i_Rest_Day      Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Weights_Add
  (
    o_Weights    in out nocopy Htt_Pref.Time_Weight_Nt,
    i_Begin_Time number,
    i_End_Time   number,
    i_Weight     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Weights_New
  (
    o_Schedule_Day_Weights in out nocopy Htt_Pref.Schedule_Day_Weights_Rt,
    i_Schedule_Date        date,
    i_Begin_Date           number,
    i_End_Date             number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Weights_Add
  (
    o_Schedule    in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Weights Htt_Pref.Schedule_Day_Weights_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Check_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Use_Weights               varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Calendar_Monthly_Limit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date
  ) return Array_Number;
  ---------------------------------------------------------------------------------------------------- 
  Function Schedule_Day_Kind
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number := null,
    i_Robot_Id      number := null,
    i_Schedule_Id   number,
    i_Schedule_Date date
  ) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Check_Day_Kind
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number := null,
    i_Robot_Id    number := null,
    i_Schedule_Id number := null,
    i_Date        date,
    i_Day_Kind    varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Plan_Time
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number := null,
    i_Robot_Id        number := null,
    i_Schedule_Id     number := null,
    i_Date            date,
    i_Plan_Time       number,
    i_Preholiday_Time number,
    i_Preweekend_Time number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weight_New
  (
    o_Change_Day_Weights in out nocopy Htt_Pref.Change_Day_Weights,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Change_Id          number,
    i_Change_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weight_Add
  (
    o_Change_Day_Weights in out nocopy Htt_Pref.Change_Day_Weights,
    i_Begin_Time         number,
    i_End_Time           number,
    i_Weight             number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date;
  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number;
  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone;
  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt;
  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number;
  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2;
  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Weights
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Change_Day_Weights
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Change_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date;
  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined;
  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Staff_Schedule_Days%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Robot_Schedule_Days%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Change_Monthly_Count
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Month      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Change_Monthly_Count
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number,
    i_Month      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2;
  Function Day_Kinds return Matrix_Varchar2;
  Function Calendar_Day_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2;
  Function Pattern_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2;
  Function Schedule_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2;
  Function Protocols return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2;
  Function Command_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2;
  Function Command_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2;
  Function Person_Roles return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2;
  Function Track_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2;
  Function Providers return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2;
  Function Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2;
  Function Plan_Loads return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2;
  Function Day_Count_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2;
  Function Carryover_Policies return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2;
  Function Request_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2;
  Function Request_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2;
  Function Attach_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2;
  Function Change_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2;
  Function Change_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2;
  Function Dashboard_Status_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2;
  Function Accrual_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2;
  Function Acms_Track_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2;
  Function Acms_Mark_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2;
  Function Location_Defined_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2;
  Function Work_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2;
end Htt_Util;
/
create or replace package body Htt_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Company_Timezones  Fazo.Varchar2_Code_Aat;
  g_Cache_Filial_Timezones   Fazo.Varchar2_Code_Aat;
  g_Cache_Location_Timezones Fazo.Varchar2_Code_Aat;
  g_Cache_Time_Kind_Ids      Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person     in out nocopy Htt_Pref.Person_Rt,
    i_Company_Id number,
    i_Person_Id  number,
    i_Pin        varchar2,
    i_Pin_Code   number,
    i_Rfid_Code  varchar2,
    i_Qr_Code    varchar2
  ) is
  begin
    o_Person.Company_Id := i_Company_Id;
    o_Person.Person_Id  := i_Person_Id;
    o_Person.Pin        := i_Pin;
    o_Person.Pin_Code   := i_Pin_Code;
    o_Person.Rfid_Code  := i_Rfid_Code;
    o_Person.Qr_Code    := i_Qr_Code;
  
    o_Person.Photos := Htt_Pref.Photo_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Add_Photo
  (
    p_Person    in out nocopy Htt_Pref.Person_Rt,
    i_Photo_Sha varchar2,
    i_Is_Main   varchar2
  ) is
    v_Photo Htt_Pref.Photo_Rt;
  begin
    v_Photo.Photo_Sha := i_Photo_Sha;
    v_Photo.Is_Main   := i_Is_Main;
  
    p_Person.Photos.Extend;
    p_Person.Photos(p_Person.Photos.Count) := v_Photo;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Day
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Calendar_Date date,
    i_Name          varchar2,
    i_Day_Kind      varchar2,
    i_Swapped_Date  date
  ) is
    v_Day Htt_Pref.Calendar_Day_Rt;
  begin
    v_Day.Calendar_Date := i_Calendar_Date;
    v_Day.Name          := i_Name;
    v_Day.Day_Kind      := i_Day_Kind;
    v_Day.Swapped_Date  := i_Swapped_Date;
  
    o_Calendar.Days.Extend();
    o_Calendar.Days(o_Calendar.Days.Count) := v_Day;
  end;

  ------------------------------------------------------------------------------------------------
  Procedure Calendar_Add_Week_Day
  (
    o_Calendar        in out nocopy Htt_Pref.Calendar_Rt,
    i_Order_No        number,
    i_Plan_Time       number,
    i_Preholiday_Hour number,
    i_Preweekend_Hour number
  ) is
    v_Week_Day Htt_Pref.Calendar_Week_Days_Rt;
  begin
    v_Week_Day.Order_No        := i_Order_No;
    v_Week_Day.Plan_Time       := i_Plan_Time;
    v_Week_Day.Preholiday_Hour := i_Preholiday_Hour;
    v_Week_Day.Preweekend_Hour := i_Preweekend_Hour;
  
    o_Calendar.Week_Days.Extend();
    o_Calendar.Week_Days(o_Calendar.Week_Days.Count) := v_Week_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_New
  (
    o_Calendar      in out nocopy Htt_Pref.Calendar_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Calendar_Id   number,
    i_Name          varchar2,
    i_Code          varchar2,
    i_Year          number,
    i_Monthly_Limit varchar2,
    i_Daily_Limit   varchar2,
    i_Rest_Day      Array_Number
  ) is
  begin
    o_Calendar.Company_Id    := i_Company_Id;
    o_Calendar.Filial_Id     := i_Filial_Id;
    o_Calendar.Calendar_Id   := i_Calendar_Id;
    o_Calendar.Name          := i_Name;
    o_Calendar.Code          := i_Code;
    o_Calendar.Year          := i_Year;
    o_Calendar.Monthly_Limit := i_Monthly_Limit;
    o_Calendar.Daily_Limit   := i_Daily_Limit;
    o_Calendar.Rest_Days     := i_Rest_Day;
  
    o_Calendar.Days      := Htt_Pref.Calendar_Day_Nt();
    o_Calendar.Week_Days := Htt_Pref.Calender_Week_Days_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Marks_Add
  (
    o_Marks      in out nocopy Htt_Pref.Mark_Nt,
    i_Begin_Time number,
    i_End_Time   number
  ) is
    v_Mark Htt_Pref.Mark_Rt;
  begin
    o_Marks.Extend();
  
    v_Mark.Begin_Time := i_Begin_Time;
    v_Mark.End_Time   := i_End_Time;
  
    o_Marks(o_Marks.Count) := v_Mark;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Weights_Add
  (
    o_Weights    in out nocopy Htt_Pref.Time_Weight_Nt,
    i_Begin_Time number,
    i_End_Time   number,
    i_Weight     number
  ) is
    v_Weight Htt_Pref.Time_Weight_Rt;
  begin
    o_Weights.Extend();
  
    v_Weight.Begin_Time := i_Begin_Time;
    v_Weight.End_Time   := i_End_Time;
    v_Weight.Weight     := i_Weight;
  
    o_Weights(o_Weights.Count) := v_Weight;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_New
  (
    o_Day              in out nocopy Htt_Pref.Schedule_Day_Rt,
    i_Schedule_Date    date,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Day.Schedule_Date    := i_Schedule_Date;
    o_Day.Day_Kind         := i_Day_Kind;
    o_Day.Begin_Time       := i_Begin_Time;
    o_Day.End_Time         := i_End_Time;
    o_Day.Break_Enabled    := i_Break_Enabled;
    o_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Day.Break_End_Time   := i_Break_End_Time;
    o_Day.Plan_Time        := i_Plan_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Add
  (
    o_Schedule in out nocopy Htt_Pref.Schedule_Rt,
    i_Day      Htt_Pref.Schedule_Day_Rt
  ) is
  begin
    o_Schedule.Days.Extend();
    o_Schedule.Days(o_Schedule.Days.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_New
  (
    o_Schedule_Day_Marks in out nocopy Htt_Pref.Schedule_Day_Marks_Rt,
    i_Schedule_Date      date,
    i_Begin_Date         number,
    i_End_Date           number
  ) is
  begin
    o_Schedule_Day_Marks.Schedule_Date := i_Schedule_Date;
    o_Schedule_Day_Marks.Begin_Time    := i_Begin_Date;
    o_Schedule_Day_Marks.End_Time      := i_End_Date;
  
    o_Schedule_Day_Marks.Marks := Htt_Pref.Mark_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Marks_Add
  (
    o_Schedule  in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Marks Htt_Pref.Schedule_Day_Marks_Rt
  ) is
  begin
    o_Schedule.Marks.Extend();
    o_Schedule.Marks(o_Schedule.Marks.Count) := i_Day_Marks;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Weights_New
  (
    o_Schedule_Day_Weights in out nocopy Htt_Pref.Schedule_Day_Weights_Rt,
    i_Schedule_Date        date,
    i_Begin_Date           number,
    i_End_Date             number
  ) is
  begin
    o_Schedule_Day_Weights.Schedule_Date := i_Schedule_Date;
    o_Schedule_Day_Weights.Begin_Time    := i_Begin_Date;
    o_Schedule_Day_Weights.End_Time      := i_End_Date;
  
    o_Schedule_Day_Weights.Weights := Htt_Pref.Time_Weight_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Day_Weights_Add
  (
    o_Schedule    in out nocopy Htt_Pref.Schedule_Rt,
    i_Day_Weights Htt_Pref.Schedule_Day_Weights_Rt
  ) is
  begin
    o_Schedule.Weights.Extend();
    o_Schedule.Weights(o_Schedule.Weights.Count) := i_Day_Weights;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_New
  (
    o_Pattern_Day      in out nocopy Htt_Pref.Schedule_Pattern_Day_Rt,
    i_Day_No           number,
    i_Day_Kind         varchar2,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time number,
    i_Break_End_Time   number,
    i_Plan_Time        number
  ) is
  begin
    o_Pattern_Day.Day_No           := i_Day_No;
    o_Pattern_Day.Day_Kind         := i_Day_Kind;
    o_Pattern_Day.Begin_Time       := i_Begin_Time;
    o_Pattern_Day.End_Time         := i_End_Time;
    o_Pattern_Day.Break_Enabled    := i_Break_Enabled;
    o_Pattern_Day.Break_Begin_Time := i_Break_Begin_Time;
    o_Pattern_Day.Break_End_Time   := i_Break_End_Time;
    o_Pattern_Day.Plan_Time        := i_Plan_Time;
  
    o_Pattern_Day.Pattern_Marks   := Htt_Pref.Mark_Nt();
    o_Pattern_Day.Pattern_Weights := Htt_Pref.Time_Weight_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_Day_Add
  (
    o_Schedule_Pattern in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Day              Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Pattern.Pattern_Day.Extend();
    o_Schedule_Pattern.Pattern_Day(o_Schedule_Pattern.Pattern_Day.Count) := i_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Pattern_New
  (
    o_Pattern        in out nocopy Htt_Pref.Schedule_Pattern_Rt,
    i_Pattern_Kind   varchar2,
    i_All_Days_Equal varchar2,
    i_Count_Days     number,
    i_Begin_Date     date,
    i_End_Date       date
  ) is
  begin
    o_Pattern.Pattern_Kind   := i_Pattern_Kind;
    o_Pattern.All_Days_Equal := i_All_Days_Equal;
    o_Pattern.Count_Days     := i_Count_Days;
    o_Pattern.Begin_Date     := i_Begin_Date;
    o_Pattern.End_Date       := i_End_Date;
  
    o_Pattern.Pattern_Day := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Registry_Unit_New
  (
    o_Registry_Unit   in out nocopy Htt_Pref.Registry_Unit_Rt,
    i_Unit_Id         number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Monthly_Minutes number,
    i_Monthly_Days    number
  ) is
  begin
    o_Registry_Unit.Unit_Id         := i_Unit_Id;
    o_Registry_Unit.Staff_Id        := i_Staff_Id;
    o_Registry_Unit.Robot_Id        := i_Robot_Id;
    o_Registry_Unit.Monthly_Minutes := i_Monthly_Minutes;
    o_Registry_Unit.Monthly_Days    := i_Monthly_Days;
  
    o_Registry_Unit.Unit_Days    := Htt_Pref.Schedule_Day_Nt();
    o_Registry_Unit.Unit_Marks   := Htt_Pref.Schedule_Day_Marks_Nt();
    o_Registry_Unit.Unit_Weights := Htt_Pref.Schedule_Day_Weights_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_New
  (
    o_Schedule_Registry         in out nocopy Htt_Pref.Schedule_Registry_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Registry_Id               number,
    i_Registry_Date             date,
    i_Registry_Number           varchar2,
    i_Registry_Kind             varchar2,
    i_Schedule_Kind             varchar2,
    i_Month                     date,
    i_Division_Id               number,
    i_Note                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number
  ) is
  begin
    o_Schedule_Registry.Company_Id                := i_Company_Id;
    o_Schedule_Registry.Filial_Id                 := i_Filial_Id;
    o_Schedule_Registry.Registry_Id               := i_Registry_Id;
    o_Schedule_Registry.Registry_Date             := i_Registry_Date;
    o_Schedule_Registry.Registry_Number           := i_Registry_Number;
    o_Schedule_Registry.Registry_Kind             := i_Registry_Kind;
    o_Schedule_Registry.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Registry.Month                     := i_Month;
    o_Schedule_Registry.Division_Id               := i_Division_Id;
    o_Schedule_Registry.Note                      := i_Note;
    o_Schedule_Registry.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Registry.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Registry.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Registry.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Registry.Count_Late                := i_Count_Late;
    o_Schedule_Registry.Count_Early               := i_Count_Early;
    o_Schedule_Registry.Count_Lack                := i_Count_Lack;
    o_Schedule_Registry.Count_Free                := i_Count_Free;
    o_Schedule_Registry.Advanced_Setting          := 'N';
    o_Schedule_Registry.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule_Registry.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule_Registry.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule_Registry.End_Early_Time            := i_End_Early_Time;
    o_Schedule_Registry.Calendar_Id               := i_Calendar_Id;
    o_Schedule_Registry.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Registry.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Registry.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Registry.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule_Registry.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule_Registry.Gps_Max_Interval          := i_Gps_Max_Interval;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule_Registry.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule_Registry.Units := Htt_Pref.Registry_Unit_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Staff_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number
  ) is
    v_Monthly_Limits     Array_Number;
    r_Calendar           Htt_Calendars%rowtype;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Monthly_Limit = 'Y' then
      v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => i_Calendar_Id,
                                                 i_Year_Begin  => i_Year_Begin);
      for r in (select Sd.Staff_Id,
                       Trunc(max(Sd.Schedule_Date), 'mon') month,
                       to_char(max(Sd.Schedule_Date), 'mm') Month_No,
                       count(*) Working_Day_Count
                  from Htt_Staff_Schedule_Days Sd
                 where Sd.Company_Id = i_Company_Id
                   and Sd.Filial_Id = i_Filial_Id
                   and Sd.Registry_Id = i_Registry_Id
                   and Sd.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                 group by Sd.Staff_Id)
      loop
        if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
          Htt_Error.Raise_123(i_Month      => to_char(r.Month, 'Month', v_Nls_Language),
                              i_Plan_Days  => r.Working_Day_Count,
                              i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)),
                              i_Staff_Name => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => r.Staff_Id));
        end if;
      end loop;
    end if;
  
    if r_Calendar.Daily_Limit = 'Y' then
      for r in (select *
                  from (select Sd.Staff_Id,
                               Sd.Schedule_Date,
                               Sd.Plan_Time,
                               (case
                                  when Td.Day_Kind = v_Dk_Holiday and Otd.Day_Kind = v_Dk_Rest then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                  when Td.Day_Kind = v_Dk_Holiday then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                  when Td.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                   Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                  else
                                   w.Plan_Time
                                end) Limit_Time
                          from Htt_Staff_Schedule_Days Sd
                          join Htt_Calendar_Week_Days w
                            on w.Company_Id = Sd.Company_Id
                           and w.Filial_Id = Sd.Filial_Id
                           and w.Calendar_Id = r_Calendar.Calendar_Id
                           and w.Order_No = Iso_Week_Day_No(Sd.Schedule_Date)
                          left join Htt_Staff_Schedule_Days Td -- schedule tomorrow day
                            on Td.Company_Id = Sd.Company_Id
                           and Td.Filial_Id = Sd.Filial_Id
                           and Td.Registry_Id = Sd.Registry_Id
                           and Td.Unit_Id = Sd.Unit_Id
                           and Td.Schedule_Date = Sd.Schedule_Date + 1
                          left join Htt_Unit_Schedule_Days Otd -- origin schedule tommorrow day
                            on Otd.Company_Id = Sd.Company_Id
                           and Otd.Filial_Id = Sd.Filial_Id
                           and Otd.Unit_Id = Sd.Unit_Id
                           and Otd.Schedule_Date = Sd.Schedule_Date + 1
                         where Sd.Company_Id = i_Company_Id
                           and Sd.Filial_Id = i_Filial_Id
                           and Sd.Registry_Id = i_Registry_Id) t
                 where t.Plan_Time > t.Limit_Time)
      loop
        Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                            i_Plan_Time     => r.Plan_Time,
                            i_Limit_Time    => r.Limit_Time,
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => r.Staff_Id));
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Robot_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number
  ) is
    v_Monthly_Limits     Array_Number;
    r_Calendar           Htt_Calendars%rowtype;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Monthly_Limit = 'Y' then
      v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => i_Calendar_Id,
                                                 i_Year_Begin  => i_Year_Begin);
      for r in (select (select Rob.Name
                          from Mrf_Robots Rob
                         where Rob.Company_Id = i_Company_Id
                           and Rob.Filial_Id = i_Filial_Id
                           and Rob.Robot_Id = Sd.Robot_Id) Robot_Name,
                       Trunc(max(Sd.Schedule_Date), 'mon') month,
                       to_char(max(Sd.Schedule_Date), 'mm') Month_No,
                       count(*) Working_Day_Count
                  from Htt_Robot_Schedule_Days Sd
                 where Sd.Company_Id = i_Company_Id
                   and Sd.Filial_Id = i_Filial_Id
                   and Sd.Registry_Id = i_Registry_Id
                   and Sd.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                 group by Sd.Robot_Id)
      loop
        if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
          Htt_Error.Raise_123(i_Month      => to_char(r.Month, 'Month', v_Nls_Language),
                              i_Plan_Days  => r.Working_Day_Count,
                              i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)),
                              i_Robot_Name => r.Robot_Name);
        end if;
      end loop;
    end if;
  
    if r_Calendar.Daily_Limit = 'Y' then
      for r in (select *
                  from (select (select Rob.Name
                                  from Mrf_Robots Rob
                                 where Rob.Company_Id = Sd.Company_Id
                                   and Rob.Filial_Id = Sd.Filial_Id
                                   and Rob.Robot_Id = Sd.Robot_Id) Robot_Name,
                               Sd.Schedule_Date,
                               Sd.Plan_Time,
                               (case
                                  when Td.Day_Kind = v_Dk_Holiday and Otd.Day_Kind = v_Dk_Rest then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                  when Td.Day_Kind = v_Dk_Holiday then
                                   Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                  when Td.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                   Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                  else
                                   w.Plan_Time
                                end) Limit_Time
                          from Htt_Robot_Schedule_Days Sd
                          join Htt_Calendar_Week_Days w
                            on w.Company_Id = Sd.Company_Id
                           and w.Filial_Id = Sd.Filial_Id
                           and w.Calendar_Id = r_Calendar.Calendar_Id
                           and w.Order_No = Iso_Week_Day_No(Sd.Schedule_Date)
                          left join Htt_Robot_Schedule_Days Td -- schedule tomorrow day
                            on Td.Company_Id = Sd.Company_Id
                           and Td.Filial_Id = Sd.Filial_Id
                           and Td.Registry_Id = Sd.Registry_Id
                           and Td.Unit_Id = Sd.Unit_Id
                           and Td.Schedule_Date = Sd.Schedule_Date + 1
                          left join Htt_Unit_Schedule_Days Otd -- origin schedule tommorrow day
                            on Otd.Company_Id = Sd.Company_Id
                           and Otd.Filial_Id = Sd.Filial_Id
                           and Otd.Unit_Id = Sd.Unit_Id
                           and Otd.Schedule_Date = Sd.Schedule_Date + 1
                         where Sd.Company_Id = i_Company_Id
                           and Sd.Filial_Id = i_Filial_Id
                           and Sd.Registry_Id = i_Registry_Id) t
                 where t.Plan_Time > t.Limit_Time)
      loop
        Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                            i_Plan_Time     => r.Plan_Time,
                            i_Limit_Time    => r.Limit_Time,
                            i_Robot_Name    => r.Robot_Name);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Schedule_By_Calendar
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Calendar_Id number,
    i_Year_Begin  date,
    i_Registry_Id number := null
  ) is
    r_Calendar           Htt_Calendars%rowtype;
    v_Monthly_Limits     Array_Number;
    v_Nls_Language       varchar2(100) := Uit_Href.Get_Nls_Language;
    v_Dk_Holiday         varchar2(1) := Htt_Pref.c_Day_Kind_Holiday;
    v_Dk_Additional_Rest varchar2(1) := Htt_Pref.c_Day_Kind_Additional_Rest;
    v_Dk_Rest            varchar2(1) := Htt_Pref.c_Day_Kind_Rest;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Check_Staff_Schedule_By_Calendar(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id,
                                       i_Year_Begin  => i_Year_Begin,
                                       i_Registry_Id => i_Registry_Id);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Check_Robot_Schedule_By_Calendar(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Calendar_Id => i_Calendar_Id,
                                       i_Year_Begin  => i_Year_Begin,
                                       i_Registry_Id => i_Registry_Id);
    
    else
      r_Calendar := z_Htt_Calendars.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Calendar_Id => i_Calendar_Id);
    
      if r_Calendar.Monthly_Limit = 'Y' then
        v_Monthly_Limits := Calendar_Monthly_Limit(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Calendar_Id => i_Calendar_Id,
                                                   i_Year_Begin  => i_Year_Begin);
      
        for r in (select *
                    from (select to_char(q.Schedule_Date, 'mm') Month_No, count(*) Working_Day_Count
                            from Htt_Schedule_Days q
                           where q.Company_Id = i_Company_Id
                             and q.Filial_Id = i_Filial_Id
                             and q.Schedule_Id = i_Schedule_Id
                             and Trunc(q.Schedule_Date, 'year') = i_Year_Begin
                             and q.Day_Kind in
                                 (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
                           group by to_char(q.Schedule_Date, 'mm')) t)
        loop
          if r.Working_Day_Count <> v_Monthly_Limits(to_number(r.Month_No)) then
            Htt_Error.Raise_123(i_Month      => to_char(Add_Months(i_Year_Begin, r.Month_No - 1),
                                                        'Month',
                                                        v_Nls_Language),
                                i_Plan_Days  => r.Working_Day_Count,
                                i_Limit_Days => v_Monthly_Limits(to_number(r.Month_No)));
          end if;
        end loop;
      end if;
    
      if r_Calendar.Daily_Limit = 'Y' then
        for r in (select *
                    from (select q.Schedule_Date,
                                 q.Plan_Time,
                                 (case
                                    when Tm.Day_Kind = v_Dk_Holiday and Otm.Day_Kind = v_Dk_Rest then
                                     Greatest(0, w.Plan_Time - w.Preholiday_Time - w.Preweekend_Time)
                                    when Tm.Day_Kind = v_Dk_Holiday then
                                     Greatest(0, w.Plan_Time - w.Preholiday_Time)
                                    when Tm.Day_Kind in (v_Dk_Additional_Rest, v_Dk_Rest) then
                                     Greatest(0, w.Plan_Time - w.Preweekend_Time)
                                    else
                                     w.Plan_Time
                                  end) Limit_Time
                            from Htt_Schedule_Days q
                            join Htt_Calendar_Week_Days w
                              on w.Company_Id = q.Company_Id
                             and w.Filial_Id = q.Filial_Id
                             and w.Calendar_Id = r_Calendar.Calendar_Id
                             and w.Order_No = Iso_Week_Day_No(q.Schedule_Date)
                            left join Htt_Schedule_Days Tm -- schedule tomorrow day
                              on Tm.Company_Id = q.Company_Id
                             and Tm.Filial_Id = q.Filial_Id
                             and Tm.Schedule_Id = q.Schedule_Id
                             and Tm.Schedule_Date = q.Schedule_Date + 1
                            left join Htt_Schedule_Origin_Days Otm -- origin schedule tommorrow day
                              on Otm.Company_Id = q.Company_Id
                             and Otm.Filial_Id = q.Filial_Id
                             and Otm.Schedule_Id = q.Schedule_Id
                             and Otm.Schedule_Date = q.Schedule_Date + 1
                           where q.Company_Id = i_Company_Id
                             and q.Filial_Id = i_Filial_Id
                             and q.Schedule_Id = i_Schedule_Id) t
                   where t.Plan_Time > t.Limit_Time)
        loop
          Htt_Error.Raise_122(i_Schedule_Date => r.Schedule_Date,
                              i_Plan_Time     => r.Plan_Time,
                              i_Limit_Time    => r.Limit_Time);
        end loop;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_New
  (
    o_Schedule                  in out nocopy Htt_Pref.Schedule_Rt,
    i_Company_Id                number,
    i_Filial_Id                 number,
    i_Schedule_Id               number,
    i_Name                      varchar2,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Count_Free                varchar2,
    i_Use_Weights               varchar2,
    i_Allowed_Late_Time         number,
    i_Allowed_Early_Time        number,
    i_Begin_Late_Time           number,
    i_End_Early_Time            number,
    i_Calendar_Id               number,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Gps_Turnout_Enabled       varchar2,
    i_Gps_Use_Location          varchar2,
    i_Gps_Max_Interval          number,
    i_State                     varchar2,
    i_Code                      varchar2,
    i_Year                      number,
    i_Schedule_Kind             varchar2 := Htt_Pref.c_Schedule_Kind_Flexible
  ) is
  begin
    o_Schedule.Company_Id                := i_Company_Id;
    o_Schedule.Filial_Id                 := i_Filial_Id;
    o_Schedule.Schedule_Id               := i_Schedule_Id;
    o_Schedule.Name                      := i_Name;
    o_Schedule.Shift                     := i_Shift;
    o_Schedule.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule.Input_Acceptance          := i_Input_Acceptance;
    o_Schedule.Output_Acceptance         := i_Output_Acceptance;
    o_Schedule.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule.Count_Late                := i_Count_Late;
    o_Schedule.Count_Early               := i_Count_Early;
    o_Schedule.Count_Lack                := i_Count_Lack;
    o_Schedule.Count_Free                := i_Count_Free;
    o_Schedule.Use_Weights               := i_Use_Weights;
    o_Schedule.Advanced_Setting          := 'N';
    o_Schedule.Allowed_Late_Time         := i_Allowed_Late_Time;
    o_Schedule.Allowed_Early_Time        := i_Allowed_Early_Time;
    o_Schedule.Begin_Late_Time           := i_Begin_Late_Time;
    o_Schedule.End_Early_Time            := i_End_Early_Time;
    o_Schedule.Calendar_Id               := i_Calendar_Id;
    o_Schedule.Take_Holidays             := i_Take_Holidays;
    o_Schedule.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule.Gps_Turnout_Enabled       := i_Gps_Turnout_Enabled;
    o_Schedule.Gps_Use_Location          := i_Gps_Use_Location;
    o_Schedule.Gps_Max_Interval          := i_Gps_Max_Interval;
    o_Schedule.State                     := i_State;
    o_Schedule.Code                      := i_Code;
    o_Schedule.Year                      := i_Year;
  
    if i_Allowed_Late_Time <> 0 or i_Allowed_Early_Time <> 0 or --
       i_Begin_Late_Time <> 0 or i_End_Early_Time <> 0 then
      o_Schedule.Advanced_Setting := 'Y';
    end if;
  
    o_Schedule.Days    := Htt_Pref.Schedule_Day_Nt();
    o_Schedule.Marks   := Htt_Pref.Schedule_Day_Marks_Nt();
    o_Schedule.Weights := Htt_Pref.Schedule_Day_Weights_Nt();
    o_Schedule.Pattern := Htt_Pref.Schedule_Pattern_Rt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Pattern_Add
  (
    o_Schedule_Template in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt
  ) is
  begin
    o_Schedule_Template.Pattern_Days.Extend();
    o_Schedule_Template.Pattern_Days(o_Schedule_Template.Pattern_Days.Count) := i_Pattern_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_New
  (
    o_Schedule_Template         in out nocopy Htt_Pref.Schedule_Template_Rt,
    i_Template_Id               number,
    i_Name                      varchar2,
    i_Description               varchar2,
    i_Schedule_Kind             varchar2,
    i_All_Days_Equal            varchar2,
    i_Count_Days                number,
    i_Shift                     number,
    i_Input_Acceptance          number,
    i_Output_Acceptance         number,
    i_Track_Duration            number,
    i_Count_Late                varchar2,
    i_Count_Early               varchar2,
    i_Count_Lack                varchar2,
    i_Take_Holidays             varchar2,
    i_Take_Nonworking           varchar2,
    i_Take_Additional_Rest_Days varchar2,
    i_Order_No                  number,
    i_State                     varchar2,
    i_Code                      varchar2
  ) is
  begin
    o_Schedule_Template.Template_Id               := i_Template_Id;
    o_Schedule_Template.Name                      := i_Name;
    o_Schedule_Template.Description               := i_Description;
    o_Schedule_Template.Schedule_Kind             := i_Schedule_Kind;
    o_Schedule_Template.All_Days_Equal            := i_All_Days_Equal;
    o_Schedule_Template.Count_Days                := i_Count_Days;
    o_Schedule_Template.Shift                     := Nvl(i_Shift, 0);
    o_Schedule_Template.Input_Acceptance          := Nvl(i_Input_Acceptance, 0);
    o_Schedule_Template.Output_Acceptance         := Nvl(i_Output_Acceptance, 0);
    o_Schedule_Template.Track_Duration            := Nvl(i_Track_Duration, 1440);
    o_Schedule_Template.Count_Late                := i_Count_Late;
    o_Schedule_Template.Count_Early               := i_Count_Early;
    o_Schedule_Template.Count_Lack                := i_Count_Lack;
    o_Schedule_Template.Take_Holidays             := i_Take_Holidays;
    o_Schedule_Template.Take_Nonworking           := i_Take_Nonworking;
    o_Schedule_Template.Take_Additional_Rest_Days := i_Take_Additional_Rest_Days;
    o_Schedule_Template.Order_No                  := i_Order_No;
    o_Schedule_Template.State                     := i_State;
    o_Schedule_Template.Code                      := i_Code;
  
    o_Schedule_Template.Pattern_Days := Htt_Pref.Schedule_Pattern_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Monthly_Limit
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Year_Begin  date
  ) return Array_Number is
    v_Month_Begin    date;
    v_Month_End      date;
    v_Monthly_Limits Array_Number := Array_Number();
  begin
    v_Monthly_Limits.Extend(12);
  
    for i in 1 .. 12
    loop
      v_Month_Begin := Add_Months(i_Year_Begin, i - 1);
      v_Month_End   := Last_Day(v_Month_Begin);
    
      v_Monthly_Limits(i) := v_Month_End - v_Month_Begin + 1 -
                             Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Calendar_Id => i_Calendar_Id,
                                                      i_Begin_Date  => v_Month_Begin,
                                                      i_End_Date    => v_Month_End);
    end loop;
  
    return v_Monthly_Limits;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Day_Kind
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number := null,
    i_Robot_Id      number := null,
    i_Schedule_Id   number,
    i_Schedule_Date date
  ) return varchar2 is
    v_Day_Kind varchar2(1);
    v_Unit_Id  number;
    v_Robot_Id number := i_Robot_Id;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      v_Unit_Id := z_Htt_Staff_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Staff_Id => i_Staff_Id, --
                   i_Schedule_Date => i_Schedule_Date).Unit_Id;
    
      v_Day_Kind := z_Htt_Unit_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Unit_Id => v_Unit_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      if v_Robot_Id is not null then
        v_Robot_Id := Hpd_Util.Get_Closest_Robot_Id(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_Schedule_Date);
      end if;
    
      v_Unit_Id := z_Htt_Robot_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                   i_Filial_Id => i_Filial_Id, --
                   i_Robot_Id => v_Robot_Id, --
                   i_Schedule_Date => i_Schedule_Date).Unit_Id;
    
      v_Day_Kind := z_Htt_Unit_Schedule_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Unit_Id => v_Unit_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    else
      v_Day_Kind := z_Htt_Schedule_Origin_Days.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Schedule_Id => i_Schedule_Id, --
                    i_Schedule_Date => i_Schedule_Date).Day_Kind;
    end if;
  
    return v_Day_Kind;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Check_Day_Kind
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number := null,
    i_Robot_Id    number := null,
    i_Schedule_Id number := null,
    i_Date        date,
    i_Day_Kind    varchar2
  ) return varchar2 is
    r_Timesheet         Htt_Timesheets%rowtype;
    v_Schedule_Day_Kind varchar2(1);
  begin
    r_Timesheet := Timesheet(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Timesheet_Date => i_Date);
  
    v_Schedule_Day_Kind := Schedule_Day_Kind(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Staff_Id      => i_Staff_Id,
                                             i_Robot_Id      => i_Robot_Id,
                                             i_Schedule_Id   => Nvl(r_Timesheet.Schedule_Id,
                                                                    i_Schedule_Id),
                                             i_Schedule_Date => i_Date);
  
    if r_Timesheet.Day_Kind = i_Day_Kind or v_Schedule_Day_Kind = i_Day_Kind then
      return 'Y';
    end if;
  
    return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Plan_Time
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number := null,
    i_Robot_Id        number := null,
    i_Schedule_Id     number := null,
    i_Date            date,
    i_Plan_Time       number,
    i_Preholiday_Time number,
    i_Preweekend_Time number
  ) return number is
    v_Plan_Time number := i_Plan_Time;
  begin
    if Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Holiday) = 'Y' then
      v_Plan_Time := Greatest(v_Plan_Time - i_Preholiday_Time, 0);
    end if;
  
    if Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Additional_Rest) = 'Y' or
       Htt_Util.Check_Day_Kind(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Staff_Id    => i_Staff_Id,
                               i_Robot_Id    => i_Robot_Id,
                               i_Schedule_Id => i_Schedule_Id,
                               i_Date        => i_Date + 1,
                               i_Day_Kind    => Htt_Pref.c_Day_Kind_Rest) = 'Y' then
      v_Plan_Time := Greatest(v_Plan_Time - i_Preweekend_Time, 0);
    end if;
  
    return v_Plan_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Add
  (
    o_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Input_Time   date,
    i_Output_Time  date
  ) is
  begin
    o_Timesheets.Extend;
    o_Timesheets(o_Timesheets.Count) := Htt_Pref.Timesheet_Rt(Company_Id   => i_Company_Id,
                                                              Filial_Id    => i_Filial_Id,
                                                              Timesheet_Id => i_Timesheet_Id,
                                                              Input_Time   => i_Input_Time,
                                                              Output_Time  => i_Output_Time);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Fact_Add
  (
    o_Facts        in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Time_Kind_Id number,
    i_Fact_Value   number
  ) is
  begin
    o_Facts.Extend();
    o_Facts(o_Facts.Count) := Htt_Pref.Timesheet_Fact_Rt(Company_Id   => i_Company_Id,
                                                         Filial_Id    => i_Filial_Id,
                                                         Timesheet_Id => i_Timesheet_Id,
                                                         Time_Kind_Id => i_Time_Kind_Id,
                                                         Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_New
  (
    o_Change      in out nocopy Htt_Pref.Change_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Staff_Id    number,
    i_Change_Kind varchar2,
    i_Note        varchar2
  ) is
  begin
    o_Change.Company_Id  := i_Company_Id;
    o_Change.Filial_Id   := i_Filial_Id;
    o_Change.Change_Id   := i_Change_Id;
    o_Change.Staff_Id    := i_Staff_Id;
    o_Change.Change_Kind := i_Change_Kind;
    o_Change.Note        := i_Note;
  
    o_Change.Change_Days := Htt_Pref.Change_Day_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Add
  (
    o_Change           in out nocopy Htt_Pref.Change_Rt,
    i_Change_Date      date,
    i_Swapped_Date     date := null,
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Enabled    varchar2,
    i_Break_Begin_Time date,
    i_Break_End_Time   date,
    i_Plan_Time        number
  ) is
    v_Change_Day Htt_Pref.Change_Day_Rt;
  begin
    v_Change_Day.Change_Date      := i_Change_Date;
    v_Change_Day.Swapped_Date     := i_Swapped_Date;
    v_Change_Day.Begin_Time       := i_Begin_Time;
    v_Change_Day.End_Time         := i_End_Time;
    v_Change_Day.Day_Kind         := i_Day_Kind;
    v_Change_Day.Break_Enabled    := i_Break_Enabled;
    v_Change_Day.Break_Begin_Time := i_Break_Begin_Time;
    v_Change_Day.Break_End_Time   := i_Break_End_Time;
    v_Change_Day.Plan_Time        := i_Plan_Time;
  
    o_Change.Change_Days.Extend();
    o_Change.Change_Days(o_Change.Change_Days.Count) := v_Change_Day;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weight_New
  (
    o_Change_Day_Weights in out nocopy Htt_Pref.Change_Day_Weights,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Change_Id          number,
    i_Change_Date        date
  ) is
  begin
    o_Change_Day_Weights.Company_Id  := i_Company_Id;
    o_Change_Day_Weights.Filial_Id   := i_Filial_Id;
    o_Change_Day_Weights.Staff_Id    := i_Staff_Id;
    o_Change_Day_Weights.Change_Id   := i_Change_Id;
    o_Change_Day_Weights.Change_Date := i_Change_Date;
  
    o_Change_Day_Weights.Weights := Htt_Pref.Time_Weight_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weight_Add
  (
    o_Change_Day_Weights in out nocopy Htt_Pref.Change_Day_Weights,
    i_Begin_Time         number,
    i_End_Time           number,
    i_Weight             number
  ) is
    v_Weight Htt_Pref.Time_Weight_Rt;
  begin
    v_Weight.Begin_Time := i_Begin_Time;
    v_Weight.End_Time   := i_End_Time;
    v_Weight.Weight     := i_Weight;
  
    o_Change_Day_Weights.Weights.Extend();
    o_Change_Day_Weights.Weights(o_Change_Day_Weights.Weights.Count) := v_Weight;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone(i_Company_Id number) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
  begin
    return g_Cache_Company_Timezones(i_Company_Id);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Company_Infos.Load(i_Company_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Dbtimezone;
      end if;
    
      g_Cache_Company_Timezones(i_Company_Id) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Filial_Id;
  begin
    return g_Cache_Filial_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Md_Filials.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Filial_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timezone
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Timezone_Code Md_Timezones.Timezone_Code%type;
    v_Code          varchar2(100) := i_Company_Id || ' ' || i_Location_Id;
  begin
    return g_Cache_Location_Timezones(v_Code);
  exception
    when No_Data_Found then
      v_Timezone_Code := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Timezone_Code;
    
      if v_Timezone_Code is null then
        v_Timezone_Code := Load_Timezone(i_Company_Id);
      end if;
    
      g_Cache_Location_Timezones(v_Code) := v_Timezone_Code;
    
      return v_Timezone_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timestamp_To_Date
  (
    i_Timestamp timestamp with time zone,
    i_Timezone  varchar2 := null
  ) return date is
  begin
    if i_Timezone is not null then
      return to_date(to_char(i_Timestamp At time zone i_Timezone, 'ddmmyyyyhh24miss'),
                     'ddmmyyyyhh24miss');
    end if;
  
    return to_date(to_char(i_Timestamp, 'ddmmyyyyhh24miss'), 'ddmmyyyyhh24miss');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Current_Date
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return date is
  begin
    return Timestamp_To_Date(i_Timestamp => Current_Timestamp,
                             i_Timezone  => Load_Timezone(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id));
  
  end;

  ----------------------------------------------------------------------------------------------------
  Function Take_Device_By_Serial_Number
  (
    i_Company_Id     number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return Htt_Devices%rowtype is
    r_Device Htt_Devices%rowtype;
  begin
    select q.*
      into r_Device
      from Htt_Devices q
     where q.Company_Id = i_Company_Id
       and q.Device_Type_Id = i_Device_Type_Id
       and q.Serial_Number = i_Serial_Number;
  
    return r_Device;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Parent_Time_Kinds(i_Company_Id number) return Htt_Pref.Time_Kind_Nt is
    result Htt_Pref.Time_Kind_Nt;
  begin
    select Tk.Name, Lower(Tk.Pcode)
      bulk collect
      into result
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Pcode is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Parent_Or_Self_Id
  (
    i_Company_Id   number,
    i_Time_Kind_Id varchar2
  ) return number is
    result number;
  begin
    result := z_Htt_Time_Kinds.Take(i_Company_Id => i_Company_Id, i_Time_Kind_Id => i_Time_Kind_Id).Parent_Id;
  
    if result is null then
      result := i_Time_Kind_Id;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    v_Code varchar2(100) := i_Company_Id || ' ' || i_Pcode;
    result number;
  begin
    return g_Cache_Time_Kind_Ids(v_Code);
  exception
    when No_Data_Found then
      select Time_Kind_Id
        into result
        from Htt_Time_Kinds
       where Company_Id = i_Company_Id
         and Pcode = i_Pcode;
    
      g_Cache_Time_Kind_Ids(v_Code) := result;
    
      return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Time_Kind_With_Child_Ids
  (
    i_Company_Id number,
    i_Pcodes     Array_Varchar2
  ) return Array_Number is
    result Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into result
      from Htt_Time_Kinds Tk
      left join Htt_Time_Kinds p
        on p.Company_Id = Tk.Company_Id
       and p.Time_Kind_Id = Tk.Parent_Id
     where Tk.Company_Id = i_Company_Id
       and (Tk.Pcode member of i_Pcodes or p.Pcode member of i_Pcodes);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Id
  (
    i_Company_Id number,
    i_Pin        varchar2
  ) return number is
    result number;
  begin
    select t.Person_Id
      into result
      from Htt_Persons t
     where t.Company_Id = i_Company_Id
       and t.Pin = i_Pin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select p.Schedule_Id
      into result
      from Htt_Schedules p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Trim_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin_Autogenerate(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Pin_Autogenerate),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Photo_As_Face_Rec(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Htt_Pref.c_Photo_As_Face_Rec),
               'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pin
  (
    i_Company_Id number,
    i_Person_Id  number
  ) return varchar2 is
  begin
    return z_Htt_Persons.Load(i_Company_Id => i_Company_Id, --
                              i_Person_Id  => i_Person_Id).Pin;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Filial_Ids
  (
    i_Company_Id  number,
    i_Location_Id number,
    i_Person_Id   number
  ) return Array_Number is
    result Array_Number;
  begin
    select q.Filial_Id
      bulk collect
      into result
      from Htt_Location_Persons q
     where q.Company_Id = i_Company_Id
       and q.Location_Id = i_Location_Id
       and q.Person_Id = i_Person_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_009(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Location_Id
      into result
      from Htt_Locations q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when others then
      Htt_Error.Raise_010(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Code = i_Code;
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_011(i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Schedule_Id
      into result
      from Htt_Schedules q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Htt_Error.Raise_012(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Id(i_Pcode varchar2) return number is
    result number;
  begin
    select q.Device_Type_Id
      into result
      from Htt_Device_Types q
     where q.Pcode = i_Pcode;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Type_Pcode(i_Device_Type_Id number) return varchar2 is
    result varchar2(20);
  begin
    select q.Pcode
      into result
      from Htt_Device_Types q
     where q.Device_Type_Id = i_Device_Type_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Qr_Code_Gen(i_Person_Id number) return varchar2 is
    v_Key varchar2(100 char) := to_char(Dbms_Crypto.Randombytes(32));
  begin
    return Fazo.Hash_Sha1(i_Person_Id || ':qr_code_secret_key:' || v_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Manager_Device_Sn(i_Serial_Number varchar2) return varchar2 is
  begin
    return 'manager_device:' || i_Serial_Number;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Timestamp
  (
    i_Date     date,
    i_Timezone varchar2
  ) return timestamp
    with time zone is
  begin
    return From_Tz(cast(i_Date as timestamp), i_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Iso_Week_Day_No(i_Date date) return number is
  begin
    return Trunc(i_Date) - Trunc(i_Date, 'iw') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Default_Calendar_Id
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return number is
    result number;
  begin
    select Calendar_Id
      into result
      from Htt_Calendars c
     where c.Company_Id = i_Company_Id
       and c.Filial_Id = i_Filial_Id
       and c.Pcode = Htt_Pref.c_Pcode_Default_Calendar;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Rest_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number := null
  ) return Array_Number is
    v_Calendar_Id number;
    result        Array_Number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    select Cd.Week_Day_No
      bulk collect
      into result
      from Htt_Calendar_Rest_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = v_Calendar_Id;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Calendar_Day
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Calendar_Id  number,
    i_Date         date,
    o_Calendar_Day out nocopy Htt_Calendar_Days%rowtype
  ) return boolean is
  begin
    if not z_Htt_Calendar_Days.Exist(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Calendar_Id   => i_Calendar_Id,
                                     i_Calendar_Date => i_Date,
                                     o_Row           => o_Calendar_Day) then
      begin
        select *
          into o_Calendar_Day
          from Htt_Calendar_Days Cd
         where Cd.Company_Id = i_Company_Id
           and Cd.Filial_Id = i_Filial_Id
           and Cd.Calendar_Id = i_Calendar_Id
           and Cd.Swapped_Date = i_Date;
      exception
        when No_Data_Found then
          return false;
      end;
    end if;
  
    return true;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Official_Rest_Day
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Date        date
  ) return boolean is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Rest_Days    Array_Number;
    v_Calendar_Id  number;
  begin
    v_Calendar_Id := Nvl(i_Calendar_Id,
                         Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id));
  
    v_Rest_Days := Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Calendar_Id => v_Calendar_Id);
  
    if Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                       i_Filial_Id    => i_Filial_Id,
                       i_Calendar_Id  => v_Calendar_Id,
                       i_Date         => i_Date,
                       o_Calendar_Day => r_Calendar_Day) and
       r_Calendar_Day.Day_Kind in
       (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest) then
      return true;
    end if;
  
    return Fazo.Contains(v_Rest_Days, Iso_Week_Day_No(i_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Official_Rest_Days_Count
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Rest_Days_Count number := 0;
    v_Holiday_Count   number;
  begin
    if i_End_Date < i_Begin_Date then
      return 0;
    end if;
  
    select count(*)
      into v_Holiday_Count
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Calendar_Id = i_Calendar_Id
       and Cd.Calendar_Date between i_Begin_Date and i_End_Date
       and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest)
       and not exists (select *
              from Htt_Calendar_Rest_Days w
             where w.Company_Id = Cd.Company_Id
               and w.Filial_Id = Cd.Filial_Id
               and w.Calendar_Id = Cd.Calendar_Id
               and w.Week_Day_No = Iso_Week_Day_No(Cd.Calendar_Date));
  
    for r in (select Rd.Week_Day_No
                from Htt_Calendar_Rest_Days Rd
               where Rd.Company_Id = i_Company_Id
                 and Rd.Filial_Id = i_Filial_Id
                 and Rd.Calendar_Id = i_Calendar_Id)
    loop
      v_Rest_Days_Count := v_Rest_Days_Count +
                           (Trunc(i_End_Date, 'iw') - Trunc(i_Begin_Date + 7, 'iw')) / 7;
    
      if i_End_Date - Trunc(i_End_Date, 'iw') + 1 >= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    
      if i_Begin_Date - Trunc(i_Begin_Date, 'iw') + 1 <= r.Week_Day_No then
        v_Rest_Days_Count := v_Rest_Days_Count + 1;
      end if;
    end loop;
  
    return v_Holiday_Count + v_Rest_Days_Count;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Track
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Person_Id      number,
    i_Track_Type     varchar2,
    i_Track_Datetime date,
    i_Device_Id      number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Type = i_Track_Type
       and q.Track_Datetime = i_Track_Datetime
       and q.Device_Id = i_Device_Id;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    o_Timesheet      out Htt_Timesheets%rowtype
  ) return boolean is
  begin
    o_Timesheet := Timesheet(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Timesheet_Date => i_Timesheet_Date);
  
    return o_Timesheet.Company_Id is not null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exist_Request
  (
    i_Company_Id      number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Staff_Id = i_Staff_Id
       and q.Request_Kind_Id = i_Request_Kind_Id
       and q.Status = Htt_Pref.c_Request_Status_Completed
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Htt_Timesheets%rowtype is
    result Htt_Timesheets%rowtype;
  begin
    select *
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date = i_Timesheet_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Prohibited
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Latlng     varchar2
  ) return boolean is
    v_Track_Latlng    Array_Varchar2;
    v_Location_Latlng Array_Varchar2;
  begin
    v_Track_Latlng := Fazo.Split(i_Latlng, ',');
  
    for r in (select l.Latlng, l.Accuracy
                from Htt_Locations l
               where l.Company_Id = i_Company_Id
                 and l.Prohibited = 'Y'
                 and l.State = 'A'
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = l.Location_Id
                         and Lp.Person_Id = i_Person_Id))
    loop
      v_Location_Latlng := Fazo.Split(r.Latlng, ',');
    
      if r.Accuracy >= Nvl(Trunc(Power(Power(69.1 * (v_Location_Latlng(1) - v_Track_Latlng(1)), 2) +
                                       Power(53.0 * (v_Location_Latlng(2) - v_Track_Latlng(2)), 2),
                                       0.5) / 0.00062137),
                           0) then
        return true;
      end if;
    end loop;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Track_Accepted_Period
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Period      date
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date + Href_Pref.c_Diff_Hiring <= i_Period
       and Nvl(s.Dismissal_Date + Href_Pref.c_Diff_Dismissal, i_Period) >= i_Period
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Not_Accepted_Periods
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return Href_Pref.Period_Nt is
    result Href_Pref.Period_Nt;
  begin
    select q.Begin_Date, q.End_Date
      bulk collect
      into result
      from (select Nvl(Lag(s.Dismissal_Date)
                       Over(order by s.Hiring_Date) + Href_Pref.c_Diff_Dismissal,
                       Href_Pref.c_Min_Date) as Begin_Date,
                   s.Hiring_Date + Href_Pref.c_Diff_Hiring as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
            union
            select s.Dismissal_Date + Href_Pref.c_Diff_Dismissal as Begin_Date,
                   Href_Pref.c_Max_Date as End_Date
              from Href_Staffs s
             where s.Company_Id = i_Company_Id
               and s.Filial_Id = i_Filial_Id
               and s.Employee_Id = i_Employee_Id
               and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
               and s.State = 'A'
               and s.Hiring_Date = (select max(S1.Hiring_Date)
                                      from Href_Staffs S1
                                     where S1.Company_Id = i_Company_Id
                                       and S1.Filial_Id = i_Filial_Id
                                       and S1.Employee_Id = i_Employee_Id
                                       and S1.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                                       and S1.State = 'A')
               and s.Dismissal_Date is not null) q;
  
    if Result.Count = 0 then
      Result.Extend;
      result(Result.Last) := Href_Pref.Period_Rt(Href_Pref.c_Min_Date, Href_Pref.c_Max_Date);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Minutes(i_Date date) return number is
    f_Arr  Array_Number;
    v_Time varchar2(5) := to_char(i_Date, Href_Pref.c_Time_Format_Minute);
  begin
    f_Arr := Fazo.To_Array_Number(Fazo.Split(v_Time, ':'));
    return f_Arr(1) * 60 + f_Arr(2);
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time(i_Minutes number) return varchar2 is
  begin
    if i_Minutes is null then
      return null;
    end if;
    return Lpad(Trunc(i_Minutes / 60), 2, '0') || ':' || Lpad(mod(i_Minutes, 60), 2, '0');
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Seconds_Text
  (
    i_Seconds      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true,
    i_Show_Seconds boolean := false
  ) return varchar2 is
    v_Seconds number := i_Seconds;
    v_Value   number;
    v_Sign    varchar2(1);
    result    varchar2(50 char);
  begin
    if Nvl(v_Seconds, 0) = 0 then
      return null;
    end if;
  
    if v_Seconds < 0 then
      v_Sign    := '-';
      v_Seconds := -v_Seconds;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(v_Seconds / 3600);
    else
      v_Value := Round(v_Seconds / 3600, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(mod(v_Seconds, 3600) / 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    if i_Show_Minutes and i_Show_Seconds then
      v_Value := Trunc(mod(v_Seconds, 60));
    
      if i_Show_Words then
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
        
          result := result || v_Value || ' ' || t('sec');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return v_Sign || result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function To_Time_Text
  (
    i_Minutes      number,
    i_Show_Minutes boolean := false,
    i_Show_Words   boolean := true
  ) return varchar2 is
    v_Value number;
    result  varchar2(50 char);
  begin
    if Nvl(i_Minutes, 0) = 0 then
      return null;
    end if;
  
    if i_Show_Minutes then
      v_Value := Trunc(i_Minutes / 60);
    else
      v_Value := Round(i_Minutes / 60, 2);
    end if;
  
    if v_Value > 0 or not i_Show_Words then
      result := Rtrim(to_char(v_Value, 'FM999990.99'), '.');
    end if;
  
    if i_Show_Minutes then
      v_Value := mod(Trunc(i_Minutes), 60);
    
      if i_Show_Words then
        if result is not null then
          result := result || ' ' || t('hh');
        end if;
      
        if v_Value > 0 then
          if result is not null then
            result := result || ' ';
          end if;
          result := result || v_Value || ' ' || t('min');
        end if;
      else
        result := result || ':' || v_Value;
      end if;
    end if;
  
    return result;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Load_Request_Kind_Accrual
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) return Htt_Request_Kind_Accruals%rowtype is
    result Htt_Request_Kind_Accruals%rowtype;
  begin
    select p.*
      into result
      from Htt_Request_Kind_Accruals p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Request_Kind_Id = i_Request_Kind_Id
       and p.Accrual_Kind = i_Accrual_Kind
       and i_Period_End <= p.Period
       and Trunc(p.Period, 'yyyy') <= i_Period_Begin;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Count_Request_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Day_Count_Type     varchar2,
    i_Request_Begin_Time date,
    i_Request_End_Time   date
  ) return number is
    v_Date      date := i_Request_Begin_Time;
    r_Timesheet Htt_Timesheets%rowtype;
    r_Schedule  Htt_Schedules%rowtype;
    result      number := 0;
  begin
    for i in 0 .. Floor(i_Request_End_Time - v_Date)
    loop
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Date + i);
    
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => r_Timesheet.Schedule_Id);
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days and
         r_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        result := result + 1;
      end if;
    
      if i_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Calendar_Id => r_Schedule.Calendar_Id,
                                  i_Date        => r_Timesheet.Timesheet_Date) then
        result := result + 1;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Request_Kind_Used_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Accrual_Kind    varchar2,
    i_Period          date,
    i_Request_Id      number := null
  ) return number is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Start date := Trunc(i_Period, 'yyyy');
    v_Period_End   date := Year_Last_Day(i_Period);
    v_Request_Id   number := Nvl(i_Request_Id, -1);
    v_Calendar_Id  number := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Days_Cnt number;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists
               (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind in (Htt_Pref.c_Day_Kind_Work,
                                            Htt_Pref.c_Day_Kind_Rest,
                                            Htt_Pref.c_Day_Kind_Nonworking)
                         and not exists
                       (select 1
                                from Htt_Calendar_Rest_Days Rd
                               where Rd.Company_Id = k.Company_Id
                                 and Rd.Filial_Id = k.Filial_Id
                                 and Rd.Calendar_Id = Nvl(k.Calendar_Id, v_Calendar_Id)
                                 and Rd.Week_Day_No =
                                     (Trunc(k.Timesheet_Date) - Trunc(k.Timesheet_Date, 'iw') + 1)))
               group by p.Interval_Date);
    elsif r_Request_Kind.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Work_Days then
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
                 and exists (select 1
                        from Htt_Timesheets k
                       where k.Company_Id = p.Company_Id
                         and k.Filial_Id = p.Filial_Id
                         and k.Staff_Id = p.Staff_Id
                         and k.Timesheet_Date = p.Interval_Date
                         and k.Day_Kind = Htt_Pref.c_Day_Kind_Work)
               group by p.Interval_Date);
    else
      select count(*)
        into v_Days_Cnt
        from (select p.Interval_Date
                from Htt_Requests q
                join Htt_Request_Helpers p
                  on p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Interval_Date between v_Period_Start and v_Period_End
                 and p.Request_Id = q.Request_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Request_Id <> v_Request_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Request_Kind_Id = i_Request_Kind_Id
                 and q.Accrual_Kind = i_Accrual_Kind
                 and q.Status = Htt_Pref.c_Request_Status_Completed
               group by p.Interval_Date);
    end if;
  
    return v_Days_Cnt;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Marks
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    v_Error_Date date;
  begin
    select Dm.Schedule_Date
      into v_Error_Date
      from Htt_Schedule_Origin_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of i_Dates
       and exists (select 1
              from Htt_Schedule_Origin_Day_Marks Sm
             where Sm.Company_Id = Dm.Company_Id
               and Sm.Filial_Id = Dm.Filial_Id
               and Sm.Schedule_Id = Dm.Schedule_Id
               and Sm.Schedule_Date = Dm.Schedule_Date
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_013(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                           i_Filial_Id => i_Filial_Id, --
                                           i_Schedule_Id => i_Schedule_Id).Name,
                        i_Schedule_Date => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Weights
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    v_Error_Date date;
  begin
    select Dm.Schedule_Date
      into v_Error_Date
      from Htt_Schedule_Origin_Day_Weights Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of i_Dates
       and exists (select 1
              from Htt_Schedule_Origin_Day_Weights Sm
             where Sm.Company_Id = Dm.Company_Id
               and Sm.Filial_Id = Dm.Filial_Id
               and Sm.Schedule_Id = Dm.Schedule_Id
               and Sm.Schedule_Date = Dm.Schedule_Date
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_128(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                           i_Filial_Id => i_Filial_Id, --
                                           i_Schedule_Id => i_Schedule_Id).Name,
                        i_Schedule_Date => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Change_Day_Weights
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Change_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'X'
      into v_Dummy
      from Htt_Change_Day_Weights q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Change_Date = i_Change_Date
       and q.Change_Id = i_Change_Id
       and exists (select 1
              from Htt_Change_Day_Weights w
             where w.Company_Id = q.Company_Id
               and w.Filial_Id = q.Filial_Id
               and w.Staff_Id = q.Staff_Id
               and w.Change_Date = q.Change_Date
               and w.Change_Id = q.Change_Id
               and w.Begin_Time <> q.Begin_Time
               and q.Begin_Time < w.End_Time
               and q.End_Time > w.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_131(i_Change_Date => i_Change_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Schedule_Template_Marks
  (
    i_Template_Id number,
    i_Day_Numbers Array_Number
  ) is
    v_Error_Day number;
  begin
    select Dm.Day_No
      into v_Error_Day
      from Htt_Schedule_Template_Marks Dm
     where Dm.Template_Id = i_Template_Id
       and Dm.Day_No member of i_Day_Numbers
       and exists (select 1
              from Htt_Schedule_Template_Marks Sm
             where Sm.Template_Id = Dm.Template_Id
               and Sm.Day_No = Dm.Day_No
               and Sm.Begin_Time <> Dm.Begin_Time
               and Dm.Begin_Time < Sm.End_Time
               and Dm.End_Time > Sm.Begin_Time)
       and Rownum = 1;
  
    Htt_Error.Raise_014(i_Template_Name => z_Htt_Schedule_Templates.Load(i_Template_Id).Name,
                        i_Day_No        => v_Error_Day);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Timesheet_Locks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Dates      Array_Date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    begin
      select Tl.Timesheet_Date
        into v_Locked_Date
        from Htt_Timesheet_Locks Tl
       where Tl.Company_Id = i_Company_Id
         and Tl.Filial_Id = i_Filial_Id
         and Tl.Staff_Id = i_Staff_Id
         and Tl.Timesheet_Date member of i_Dates
         and Rownum = 1;
    
      r_Timebook := z_Hpr_Timebooks.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Timebook_Id => z_Hpr_Timesheet_Locks.Load(i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Staff_Id => i_Staff_Id, --
                                                          i_Timesheet_Date => v_Locked_Date).Timebook_Id);
    
      Htt_Error.Raise_015(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => v_Locked_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    exception
      when No_Data_Found then
        null;
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Request_Has_Available_Days
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Staff_Id           number,
    i_Request_Id         number,
    i_Request_Kind_Id    number,
    i_Request_Begin_Time date,
    i_Request_End_Time   date,
    i_Accrual_Kind       varchar2
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Period_Begin date := Year_Last_Day(i_Request_Begin_Time);
    v_Period_End   date := Year_Last_Day(i_Request_End_Time);
  
    --------------------------------------------------
    Procedure Assert_Year
    (
      i_Year_Begin date,
      i_Year_End   date
    ) is
      v_Used_Days    number;
      v_Request_Days number;
      r_Accrual      Htt_Request_Kind_Accruals%rowtype;
    
      v_Begin_Time date := Greatest(i_Request_Begin_Time, i_Year_Begin);
      v_End_Time   date := Least(i_Request_End_Time, i_Year_End);
    begin
      v_Request_Days := Count_Request_Days(i_Company_Id         => i_Company_Id,
                                           i_Filial_Id          => i_Filial_Id,
                                           i_Staff_Id           => i_Staff_Id,
                                           i_Day_Count_Type     => r_Request_Kind.Day_Count_Type,
                                           i_Request_Begin_Time => v_Begin_Time,
                                           i_Request_End_Time   => v_End_Time);
    
      r_Accrual := Load_Request_Kind_Accrual(i_Company_Id      => i_Company_Id,
                                             i_Filial_Id       => i_Filial_Id,
                                             i_Staff_Id        => i_Staff_Id,
                                             i_Request_Kind_Id => i_Request_Kind_Id,
                                             i_Accrual_Kind    => i_Accrual_Kind,
                                             i_Period_Begin    => v_Begin_Time,
                                             i_Period_End      => v_End_Time);
    
      r_Accrual.Accrued_Days := Nvl(r_Accrual.Accrued_Days, 0);
    
      v_Used_Days := Get_Request_Kind_Used_Days(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => i_Staff_Id,
                                                i_Request_Kind_Id => i_Request_Kind_Id,
                                                i_Accrual_Kind    => i_Accrual_Kind,
                                                i_Period          => v_End_Time,
                                                i_Request_Id      => i_Request_Id);
      if v_Used_Days + v_Request_Days > r_Accrual.Accrued_Days then
        Htt_Error.Raise_016(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                        i_Filial_Id  => i_Filial_Id,
                                                                        i_Staff_Id   => i_Staff_Id),
                            i_Request_Kind_Name => r_Request_Kind.Name,
                            i_Year              => i_Year_End,
                            i_Used_Cnt          => v_Used_Days,
                            i_Request_Cnt       => v_Request_Days,
                            i_Annual_Limit      => r_Accrual.Accrued_Days);
      end if;
    end;
  begin
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    while v_Period_Begin <= v_Period_End
    loop
      v_Period_Begin := Year_Last_Day(v_Period_Begin);
    
      Assert_Year(i_Year_Begin => Trunc(v_Period_Begin, 'yyyy'), i_Year_End => v_Period_Begin);
    
      v_Period_Begin := v_Period_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Intersection_Request
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Staff_Id     number,
    i_Begin_Time   date,
    i_End_Time     date,
    i_Request_Type varchar2
  ) is
    v_Request_Id number;
    v_Begin_Time date;
    v_End_Time   date;
  begin
    select q.Request_Id, q.Begin_Time, q.End_Time
      into v_Request_Id, v_Begin_Time, v_End_Time
      from Htt_Requests q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Request_Id <> i_Request_Id
       and q.Staff_Id = i_Staff_Id
       and q.Status in (Htt_Pref.c_Request_Status_Completed, Htt_Pref.c_Request_Status_Approved)
       and (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
           i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and --
           q.End_Time > i_Begin_Time and q.Begin_Time < i_End_Time or
           not (q.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and
            i_Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day) and
           Trunc(q.End_Time) >= Trunc(i_Begin_Time) and Trunc(q.Begin_Time) <= Trunc(i_End_Time))
       and Rownum = 1;
  
    Htt_Error.Raise_017(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id    => v_Request_Id,
                        i_Intersect_Begin => v_Begin_Time,
                        i_Intersect_End   => v_End_Time,
                        i_Request_Type    => i_Request_Type,
                        i_Begin_Time      => i_Begin_Time,
                        i_End_Time        => i_End_Time);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Has_Approved_Plan_Change
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Change_Id  number
  ) is
    v_Error_Date   date;
    v_Intersect_Id number;
  begin
    select Sd.Change_Date, Sd.Change_Id
      into v_Error_Date, v_Intersect_Id
      from Htt_Change_Days Sd
     where Sd.Company_Id = i_Company_Id
       and Sd.Filial_Id = i_Filial_Id
       and Sd.Staff_Id = i_Staff_Id
       and Sd.Change_Id <> i_Change_Id
       and exists (select 1
              from Htt_Change_Days Cd
             where Cd.Company_Id = i_Company_Id
               and Cd.Filial_Id = i_Filial_Id
               and Cd.Staff_Id = i_Staff_Id
               and Cd.Change_Id = i_Change_Id
               and Cd.Change_Date = Sd.Change_Date)
       and exists (select 1
              from Htt_Plan_Changes Pc
             where Pc.Company_Id = i_Company_Id
               and Pc.Filial_Id = i_Filial_Id
               and Pc.Change_Id = Sd.Change_Id
               and Pc.Status in (Htt_Pref.c_Change_Status_Approved,
                                 Htt_Pref.c_Change_Status_Completed))
       and Rownum = 1;
  
    Htt_Error.Raise_100(i_Staff_Name   => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                        i_Intersect_Id => v_Intersect_Id,
                        i_Change_Date  => v_Error_Date);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Full_Time
  (
    i_Day_Kind         varchar2,
    i_Begin_Time       date,
    i_End_Time         date,
    i_Break_Begin_Time date,
    i_Break_End_Time   date
  ) return number is
  begin
    if i_Day_Kind in
       (Htt_Pref.c_Day_Kind_Rest, Htt_Pref.c_Day_Kind_Additional_Rest, Htt_Pref.c_Day_Kind_Holiday) then
      return 0;
    end if;
  
    return Nvl((i_End_Time - i_Begin_Time - Nvl(i_Break_End_Time - i_Break_Begin_Time, 0)) * 1440,
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Time difference in seconds
  ----------------------------------------------------------------------------------------------------
  Function Time_Diff
  (
    i_Time1 date,
    i_Time2 date
  ) return number is
  begin
    return Greatest(Round((i_Time1 - i_Time2) * 86400), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- intersection part of two timelines
  ----------------------------------------------------------------------------------------------------
  Function Timeline_Intersection
  (
    i_Fr_Begin date,
    i_Fr_End   date,
    i_Sc_Begin date,
    i_Sc_End   date
  ) return number is
  begin
    if i_Fr_Begin >= i_Fr_End or i_Sc_Begin >= i_Sc_End then
      return 0;
    end if;
  
    return Time_Diff(Least(i_Sc_End, Greatest(i_Fr_End, i_Sc_Begin)),
                     Greatest(Least(i_Fr_Begin, i_Sc_End), i_Sc_Begin));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Intime
  (
    i_Begin_Time       date,
    i_End_Time         date,
    i_Begin_Break_Time date,
    i_End_Break_Time   date,
    i_Input            date,
    i_Output           date
  ) return number is
  begin
    return Timeline_Intersection(i_Fr_Begin => i_Begin_Time,
                                 i_Fr_End   => i_End_Time,
                                 i_Sc_Begin => i_Input,
                                 i_Sc_End   => i_Output) - --
    Timeline_Intersection(i_Fr_Begin => i_Begin_Break_Time,
                          i_Fr_End   => i_End_Break_Time,
                          i_Sc_Begin => i_Input,
                          i_Sc_End   => i_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select q.Track_Id
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date = i_Track_Date;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Change(i_Change_Id number) return varchar2 is
    r_Change Htt_Plan_Changes%rowtype;
    result   varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Plan_Changes.Name)));
  
    r_Change := z_Htt_Plan_Changes.Take(i_Company_Id => Md_Env.Company_Id,
                                        i_Filial_Id  => Md_Env.Filial_Id,
                                        i_Change_Id  => i_Change_Id);
  
    if r_Change.Change_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                    i_Filial_Id  => r_Change.Filial_Id,
                                                    i_Staff_Id   => r_Change.Staff_Id),
                               r_Change.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Request(i_Request_Id number) return varchar2 is
    r_Request Htt_Requests%rowtype;
    result    varchar2(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Requests.Name)));
  
    r_Request := z_Htt_Requests.Take(i_Company_Id => Md_Env.Company_Id,
                                     i_Filial_Id  => Md_Env.Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    if r_Request.Request_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{staff_name} by $2{created_on}',
                               Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                    i_Filial_Id  => r_Request.Filial_Id,
                                                    i_Staff_Id   => r_Request.Staff_Id),
                               r_Request.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Tname_Track(i_Track_Id number) return varchar2 is
    r_Track Htt_Tracks%rowtype;
    result  varchar(4000);
  begin
    result := b.Translate(Ui_Kernel.Gen_Table_Message(Lower(Zt.Htt_Tracks.Name)));
  
    r_Track := z_Htt_Tracks.Take(i_Company_Id => Md_Env.Company_Id,
                                 i_Filial_Id  => Md_Env.Filial_Id,
                                 i_Track_Id   => i_Track_Id);
  
    if r_Track.Track_Id is null then
      return result;
    end if;
  
    return result || ': ' || t('# $1{person_name} by $2{created_on}',
                               z_Mr_Natural_Persons.Take(i_Company_Id => r_Track.Company_Id, i_Person_Id => r_Track.Person_Id).Name,
                               r_Track.Created_On);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Kind_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Request_Kind_Id
      into result
      from Htt_Request_Kinds
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) return varchar2 is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Request_Id => i_Request_Id);
  
    return z_Htt_Request_Kinds.Load(i_Company_Id      => r_Request.Company_Id,
                                    i_Request_Kind_Id => r_Request.Request_Kind_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Nls_Language return varchar2 is
    v_Language varchar2(20);
  begin
    if Biruni_Route.Get_Lang_Code = 'en' then
      v_Language := 'english';
    elsif Biruni_Route.Get_Lang_Code = 'uz' then
      v_Language := '''latin uzbek''';
    else
      v_Language := 'russian';
    end if;
  
    return 'nls_date_language = ' || v_Language;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Time
  (
    i_Request_Type varchar2,
    i_Begin_Time   date,
    i_End_Time     date
  ) return varchar2 is
    v_Format       varchar2(20) := 'fmdd mon. yyyy';
    v_Nls_Language varchar2(100) := Get_Nls_Language;
  begin
    case i_Request_Type
      when Htt_Pref.c_Request_Type_Part_Of_Day then
        return t('$1{request_date}, $2{request_begin_time}-$3{request_end_time}',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_Begin_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language),
                 to_char(i_End_Time, Href_Pref.c_Time_Format_Minute, v_Nls_Language));
      when Htt_Pref.c_Request_Type_Full_Day then
        return t('$1{request_date} (full day)', to_char(i_Begin_Time, v_Format, v_Nls_Language));
      else
        return t('$1{request_begin_date} - $2{request_end_date} ($3 days)',
                 to_char(i_Begin_Time, v_Format, v_Nls_Language),
                 to_char(i_End_Time, v_Format, v_Nls_Language),
                 Trunc(i_End_Time - i_Begin_Time) + 1);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Requests_Time_Sum
  (
    i_Company_Id            number,
    i_Filial_Id             number,
    i_Timesheet_Id          number,
    i_Take_Turnout_Requests boolean := false
  ) return number is
    result                 number;
    v_Turnout_Time_Kind_Id number;
    v_Take_Turnout         varchar2(1) := 'N';
  begin
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    if i_Take_Turnout_Requests then
      v_Take_Turnout := 'Y';
    end if;
  
    select sum(t.Fact_Value)
      into result
      from Htt_Timesheet_Facts t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Timesheet_Id = i_Timesheet_Id
       and exists (select 1
              from Htt_Time_Kinds p
             where p.Company_Id = t.Company_Id
               and p.Time_Kind_Id = t.Time_Kind_Id
               and p.Requestable = 'Y'
               and (v_Take_Turnout = 'Y' or --
                   (v_Take_Turnout = 'N' and --
                   (p.Parent_Id is null or --
                   p.Parent_Id <> v_Turnout_Time_Kind_Id))));
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  -- gets facts with children
  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date,
    i_Time_Kind_Id   number
  ) return number is
    result number;
  begin
    select sum(Tf.Fact_Value)
      into result
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date = i_Timesheet_Date
       and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = i_Time_Kind_Id;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Fact_Value
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Take_Children boolean := false
  ) return number is
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    v_Fact_Value     number;
    v_Children_Value number := 0;
  begin
    r_Timesheet_Fact := z_Htt_Timesheet_Facts.Take(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Timesheet_Id => i_Timesheet_Id,
                                                   i_Time_Kind_Id => i_Time_Kind_Id);
  
    v_Fact_Value := Nvl(r_Timesheet_Fact.Fact_Value, 0);
  
    if i_Take_Children then
      select sum(t.Fact_Value)
        into v_Children_Value
        from Htt_Timesheet_Facts t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Timesheet_Id = i_Timesheet_Id
         and exists (select 1
                from Htt_Time_Kinds p
               where p.Company_Id = t.Company_Id
                 and p.Time_Kind_Id = t.Time_Kind_Id
                 and p.Parent_Id = i_Time_Kind_Id);
    
      v_Children_Value := Nvl(v_Children_Value, 0);
    end if;
  
    v_Fact_Value := v_Fact_Value + v_Children_Value;
  
    return v_Fact_Value;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Full_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(q.Parent_Id, q.Time_Kind_Id), sum(q.Fact_Value)
      bulk collect
      into result
      from (select Tk.Parent_Id, Tk.Time_Kind_Id, f.Fact_Value
              from Htt_Timesheet_Facts f
              join Htt_Time_Kinds Tk
                on Tk.Company_Id = f.Company_Id
               and Tk.Time_Kind_Id = f.Time_Kind_Id
             where f.Company_Id = i_Company_Id
               and f.Filial_Id = i_Filial_Id
               and f.Timesheet_Id = i_Timesheet_Id
             order by Tk.Pcode) q
     group by Nvl(q.Parent_Id, q.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- sum of time kind facts over period [i_Begin_Date, i_End_Date]
  -- only parent time kinds are taken
  -- if time kind is child (has parent_id) it is converted to its parent
  Function Get_Full_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return Htt_Pref.Timesheet_Aggregated_Fact_Nt is
    result Htt_Pref.Timesheet_Aggregated_Fact_Nt;
  begin
    select Nvl(Tk.Parent_Id, Tk.Time_Kind_Id), sum(Tf.Fact_Value)
      bulk collect
      into result
      from Htt_Timesheet_Facts Tf
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = Tf.Company_Id
       and Tk.Time_Kind_Id = Tf.Time_Kind_Id
      join Htt_Timesheets t
        on t.Company_Id = Tf.Company_Id
       and t.Filial_Id = Tf.Filial_Id
       and t.Timesheet_Id = Tf.Timesheet_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date >= i_Begin_Date
       and t.Timesheet_Date <= i_End_Date
     group by Nvl(Tk.Parent_Id, Tk.Time_Kind_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Turnout_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Turnout_Count number;
    v_Turnout_Ids   Array_Number;
  begin
    v_Turnout_Ids := Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                              i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select max(Qr.Cnt)
      into v_Turnout_Count
      from (select count(*) Cnt
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Employee_Id = i_Employee_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and exists (select *
                      from Htt_Timesheet_Facts Tf
                     where Tf.Company_Id = t.Company_Id
                       and Tf.Filial_Id = t.Filial_Id
                       and Tf.Timesheet_Id = t.Timesheet_Id
                       and Tf.Time_Kind_Id member of v_Turnout_Ids
                       and Tf.Fact_Value > 0)
             group by t.Staff_Id) Qr;
  
    return Nvl(v_Turnout_Count, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Locked_Turnout_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates number of vacation days
  -- that has locked fact days
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Locked_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Ids Array_Number;
    v_Rest_Days   Array_Number;
    v_Calendar_Id number;
    result        number;
  begin
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
    v_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id);
    v_Rest_Days   := Htt_Util.Calendar_Rest_Days(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Calendar_Id => v_Calendar_Id);
  
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and (Trunc(t.Timesheet_Date) - Trunc(t.Timesheet_Date, 'iw') + 1) not member of
     v_Rest_Days
       and not exists
     (select *
              from Htt_Calendar_Days Cd
             where Cd.Company_Id = t.Company_Id
               and Cd.Filial_Id = t.Filial_Id
               and Cd.Calendar_Id = v_Calendar_Id
               and Cd.Calendar_Date = t.Timesheet_Date
               and Cd.Day_Kind in (Htt_Pref.c_Day_Kind_Holiday, Htt_Pref.c_Day_Kind_Additional_Rest))
       and exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = t.Company_Id
               and Tl.Filial_Id = t.Filial_Id
               and Tl.Staff_Id = t.Staff_Id
               and Tl.Timesheet_Date = t.Timesheet_Date)
       and exists (select *
              from Htt_Timesheet_Facts Tf
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id
               and Tf.Time_Kind_Id member of v_Turnout_Ids
               and Tf.Fact_Value > 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select count(*)
      into result
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and t.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and t.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Plan_Time)
      into result
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date between i_Begin_Date and i_End_Date
       and q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and q.Plan_Time > 0;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Vacation_Days_Count      number := i_End_Date - i_Begin_Date + 1;
    v_Official_Rest_Days_Count number;
    v_Default_Calendar_Id      number;
    v_Fact_Days                number;
  begin
    v_Default_Calendar_Id := Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                           i_Filial_Id   => i_Filial_Id,
                                                           i_Calendar_Id => v_Default_Calendar_Id,
                                                           i_Begin_Date  => i_Begin_Date,
                                                           i_End_Date    => i_End_Date);
  
    v_Fact_Days := Calc_Fact_Locked_Vacation_Days(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    return Nvl(v_Vacation_Days_Count - v_Official_Rest_Days_Count - v_Fact_Days, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Schedule_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Schedule_Id  number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Schedule_Id = i_Schedule_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_103(i_Schedule_Name => z_Htt_Schedules.Load(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Schedule_Id => i_Schedule_Id).Name,
                          i_Month         => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Staff_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes
      from Htt_Staff_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_104(i_Staff_Name => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                               i_Filial_Id  => i_Filial_Id,
                                                               i_Staff_Id   => i_Staff_Id),
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Calc_Robot_Plan
  (
    o_Plan_Days    out number,
    o_Plan_Minutes out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period       date
  ) is
    v_Robot_Id number;
    v_Days_Cnt number;
  begin
    select count(*),
           count(case
                    when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                         q.Plan_Time > 0 then
                     1
                    else
                     null
                  end),
           sum(case
                  when q.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) and
                       q.Plan_Time > 0 then
                   q.Plan_Time
                  else
                   null
                end),
           max(p.Robot_Id)
      into v_Days_Cnt, o_Plan_Days, o_Plan_Minutes, v_Robot_Id
      from Hpd_Agreements_Cache p
      join Htt_Robot_Schedule_Days q
        on q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = p.Robot_Id
       and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and i_Period between p.Begin_Date and p.End_Date;
  
    if v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1 then
      Htt_Error.Raise_106(i_Robot_Name => z_Mrf_Robots.Take(i_Company_Id => i_Company_Id, --
                                          i_Filial_Id => i_Filial_Id, --
                                          i_Robot_Id => v_Robot_Id).Name,
                          i_Month      => i_Period);
    end if;
  
    o_Plan_Minutes := Nvl(o_Plan_Minutes, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => result,
                      o_Plan_Minutes => v_Dummy,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => result,
                         o_Plan_Minutes => v_Dummy,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Minutes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return number is
    v_Dummy number;
    result  number;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      Calc_Staff_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      Calc_Robot_Plan(o_Plan_Days    => v_Dummy,
                      o_Plan_Minutes => result,
                      i_Company_Id   => i_Company_Id,
                      i_Filial_Id    => i_Filial_Id,
                      i_Staff_Id     => i_Staff_Id,
                      i_Period       => i_Period);
    else
      Calc_Schedule_Plan(o_Plan_Days    => v_Dummy,
                         o_Plan_Minutes => result,
                         i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Schedule_Id  => i_Schedule_Id,
                         i_Period       => i_Period);
    end if;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Time_Kind_Facts
  (
    o_Fact_Seconds out number,
    o_Fact_Days    out number,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Time_Kind_Id number,
    i_Begin_Date   date,
    i_End_Date     date
  ) is
    v_Tk_Ids Array_Number;
  begin
    select Tk.Time_Kind_Id
      bulk collect
      into v_Tk_Ids
      from Htt_Time_Kinds Tk
     where Tk.Company_Id = i_Company_Id
       and Tk.Parent_Id = i_Time_Kind_Id;
  
    Fazo.Push(v_Tk_Ids, i_Time_Kind_Id);
  
    select sum(Tf.Fact_Value), count(distinct t.Timesheet_Id)
      into o_Fact_Seconds, o_Fact_Days
      from Htt_Timesheets t
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = t.Company_Id
       and Tf.Filial_Id = t.Filial_Id
       and Tf.Timesheet_Id = t.Timesheet_Id
       and Tf.Time_Kind_Id member of v_Tk_Ids
       and Tf.Fact_Value > 0
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  
    o_Fact_Seconds := Nvl(o_Fact_Seconds, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Seconds
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select Nvl(sum(t.Coef * t.Weight *
                   Round(86400 * (t.Intersection_End - t.Intersection_Begin), 2)),
               0)
      into result
      from (select Tw.Coef,
                   Tw.Weight,
                   Least(Tw.End_Time, i.Interval_End) Intersection_End,
                   Greatest(Tw.Begin_Time, i.Interval_Begin) Intersection_Begin
              from Htt_Timesheets q
              join Htt_Timesheet_Intervals i
                on i.Company_Id = q.Company_Id
               and i.Filial_Id = q.Filial_Id
               and i.Timesheet_Id = q.Timesheet_Id
              join Htt_Timesheet_Weights Tw
                on Tw.Company_Id = q.Company_Id
               and Tw.Filial_Id = q.Filial_Id
               and Tw.Timesheet_Id = q.Timesheet_Id
               and Greatest(Tw.Begin_Time, i.Interval_Begin) < Least(Tw.End_Time, i.Interval_End)
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Staff_Id = i_Staff_Id
               and q.Timesheet_Date between i_Begin_Date and i_End_Date) t;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Undefined_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Period      date
  ) return boolean is
    v_Days_Cnt number := 0;
  begin
    if i_Schedule_Id =
       Schedule_Id(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    elsif i_Schedule_Id =
          Schedule_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id  => i_Filial_Id,
                      i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      select count(*)
        into v_Days_Cnt
        from Hpd_Agreements_Cache p
        join Htt_Robot_Schedule_Days q
          on q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Robot_Id = p.Robot_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon')
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and i_Period between p.Begin_Date and p.End_Date;
    else
      select count(*)
        into v_Days_Cnt
        from Htt_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Schedule_Id = i_Schedule_Id
         and Trunc(q.Schedule_Date, 'Mon') = Trunc(i_Period, 'Mon');
    end if;
  
    return v_Days_Cnt <> Last_Day(i_Period) - Trunc(i_Period, 'Mon') + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Year_Last_Day(i_Date date) return date is
  begin
    return Add_Months(Trunc(i_Date, 'yyyy'), 12) - 1;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Quarter_Last_Day(i_Date date) return date is
  begin
    return Last_Day(Add_Months(Trunc(i_Date, 'Q'), 2));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Datas
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Only_Gps   varchar2 := 'Y'
  ) return Htt_Pref.Gps_Track_Data_Nt
    pipelined is
    v_Track         Htt_Pref.Gps_Track_Data_Rt;
    v_Track_Arr     Array_Varchar2;
    v_Len           number;
    v_Offset        number;
    v_Pos           pls_integer;
    v_Last_Pos      pls_integer;
    v_Part_Data     varchar2(32767);
    c_Row_Delimiter varchar(1) := Chr(10);
  begin
    v_Track.Company_Id := i_Company_Id;
    v_Track.Filial_Id  := i_Filial_Id;
    v_Track.Person_Id  := i_Person_Id;
  
    for Gps_Track in (select q.*,
                             (select w.Data
                                from Htt_Gps_Track_Datas w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Track_Id = q.Track_Id) as Data
                        from Htt_Gps_Tracks q
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Person_Id = i_Person_Id
                         and q.Track_Date between i_Begin_Date and i_End_Date)
    loop
      if Dbms_Lob.Isopen(Gps_Track.Data) = 0 then
        Dbms_Lob.Open(Lob_Loc => Gps_Track.Data, Open_Mode => Dbms_Lob.Lob_Readonly);
      end if;
    
      v_Track.Track_Id   := Gps_Track.Track_Id;
      v_Track.Track_Date := Gps_Track.Track_Date;
    
      v_Offset := 1;
      v_Len    := Dbms_Lob.Getlength(Gps_Track.Data);
    
      while v_Offset < v_Len
      loop
        v_Part_Data := v_Part_Data ||
                       Utl_Raw.Cast_To_Varchar2(Dbms_Lob.Substr(Lob_Loc => Gps_Track.Data,
                                                                Amount  => 30000,
                                                                Offset  => v_Offset));
      
        v_Pos      := 1;
        v_Last_Pos := 1;
      
        loop
          v_Pos := Instr(v_Part_Data, Htt_Pref.c_Gps_Track_Row_Delimiter, v_Last_Pos);
        
          if v_Pos > 0 then
            v_Track_Arr := Fazo.Split(Substr(v_Part_Data, v_Last_Pos, v_Pos - v_Last_Pos),
                                      Htt_Pref.c_Gps_Track_Column_Delimiter);
          
            if v_Track_Arr.Count < 5 then
              v_Track_Arr.Extend(5); -- handling error
            end if;
          
            v_Track.Track_Time := to_date(to_char(v_Track.Track_Date, Href_Pref.c_Date_Format_Day) || ' ' ||
                                          v_Track_Arr(1),
                                          Href_Pref.c_Date_Format_Second);
            v_Track.Lat        := v_Track_Arr(2);
            v_Track.Lng        := v_Track_Arr(3);
            v_Track.Accuracy   := v_Track_Arr(4);
            v_Track.Provider   := v_Track_Arr(5);
            -- TODO: temporary provider filters only GPS
            if (i_Only_Gps = 'Y' and v_Track.Provider = Htt_Pref.c_Provider_Gps or i_Only_Gps = 'N') and
               v_Track.Accuracy <= 50 then
              pipe row(v_Track);
            end if;
          else
            v_Part_Data := Substr(v_Part_Data, v_Last_Pos);
            exit;
          end if;
        
          v_Last_Pos := v_Pos + Length(c_Row_Delimiter);
        end loop;
      
        v_Offset := v_Offset + 30000;
      end loop;
    
      Dbms_Lob.Close(Gps_Track.Data);
    end loop;
  
    return;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Staff_Schedule_Days%rowtype is
    v_Staff_Schedule_Date Htt_Staff_Schedule_Days%rowtype;
  begin
    select *
      into v_Staff_Schedule_Date
      from Htt_Staff_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Unit_Id = i_Unit_Id
       and q.Schedule_Date = i_Date;
  
    return v_Staff_Schedule_Date;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Robot_Schedule_Day
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Unit_Id    number,
    i_Date       date
  ) return Htt_Robot_Schedule_Days%rowtype is
    v_Robot_Schedule_Date Htt_Robot_Schedule_Days%rowtype;
  begin
    select *
      into v_Robot_Schedule_Date
      from Htt_Robot_Schedule_Days q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Unit_Id = i_Unit_Id
       and q.Schedule_Date = i_Date;
  
    return v_Robot_Schedule_Date;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    select sum(q.Total_Distance)
      into result
      from Htt_Gps_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = i_Person_Id
       and q.Track_Date between i_Begin_Date and i_End_Date;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Gps_Track_Distance
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Date date
  ) return number is
    result number;
  begin
    select Nvl(Trunc(sum(Power(Power(69.1 * (Lat2 - Lat1), 2) + Power(53.0 * (Lng2 - Lng1), 2), 0.5)) /
                     0.00062137),
               0)
      into result
      from (select Lat Lat1,
                   Lng Lng1,
                   Lag(Lat) Over(order by Rownum) Lat2,
                   Lag(Lng) Over(order by Rownum) Lng2
              from (select q.*
                      from Gps_Track_Datas(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Person_Id  => i_Person_Id,
                                           i_Begin_Date => i_Track_Date,
                                           i_End_Date   => i_Track_Date) q
                     order by q.Track_Time))
     where Lat2 is not null;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Sync_Global_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Htt_Pref.c_Location_Sync_Person_Global),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Change_Monthly_Count
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Month      date
  ) return number is
    v_Change_Count number;
  begin
    select count(1)
      into v_Change_Count
      from Htt_Plan_Changes t
      join Htt_Change_Days q
        on q.Company_Id = t.Company_Id
       and q.Filial_Id = t.Filial_Id
       and q.Change_Id = t.Change_Id
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Status = Htt_Pref.c_Change_Status_Completed
       and q.Change_Date between Trunc(i_Month, 'mon') and Last_Day(i_Month)
       and (t.Change_Kind = Htt_Pref.c_Change_Kind_Change_Plan or q.Change_Date < q.Swapped_Date);
  
    return v_Change_Count;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Staff_Change_Monthly_Count
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number,
    i_Month      date
  ) return number is
    r_Change       Htt_Plan_Changes%rowtype;
    v_Change_Count number;
  begin
    r_Change := z_Htt_Plan_Changes.Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Change_Id  => i_Change_Id);
    select count(1)
      into v_Change_Count
      from Htt_Plan_Changes t
      join Htt_Change_Days q
        on q.Company_Id = t.Company_Id
       and q.Filial_Id = t.Filial_Id
       and q.Change_Id = t.Change_Id
     where t.Company_Id = r_Change.Company_Id
       and t.Filial_Id = r_Change.Filial_Id
       and t.Staff_Id = r_Change.Staff_Id
       and (t.Change_Id = r_Change.Change_Id or t.Status = Htt_Pref.c_Change_Status_Completed)
       and q.Change_Date between Trunc(i_Month, 'mon') and Last_Day(i_Month)
       and (t.Change_Kind = Htt_Pref.c_Change_Kind_Change_Plan or q.Change_Date < q.Swapped_Date);
  
    return v_Change_Count;
  end;

  ----------------------------------------------------------------------------------------------------
  -- day kind
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Work return varchar2 is
  begin
    return t('day_kind:work');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Rest return varchar2 is
  begin
    return t('day_kind:rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Additional_Rest return varchar2 is
  begin
    return t('day_kind:additional rest');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Holiday return varchar2 is
  begin
    return t('day_kind:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Nonworking return varchar2 is
  begin
    return t('day_kind:nonworking');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind_Swapped return varchar2 is
  begin
    return t('day_kind:swapped');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Kind(i_Day_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Day_Kind --
    when Htt_Pref.c_Day_Kind_Work then t_Day_Kind_Work --
    when Htt_Pref.c_Day_Kind_Rest then t_Day_Kind_Rest --
    when Htt_Pref.c_Day_Kind_Additional_Rest then t_Day_Kind_Additional_Rest --      
    when Htt_Pref.c_Day_Kind_Holiday then t_Day_Kind_Holiday --
    when Htt_Pref.c_Day_Kind_Nonworking then t_Day_Kind_Nonworking --
    when Htt_Pref.c_Day_Kind_Swapped then t_Day_Kind_Swapped --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Work, --
                                          Htt_Pref.c_Day_Kind_Rest,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Work, --
                                          t_Day_Kind_Rest,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Holiday,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calendar_Day_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Kind_Holiday,
                                          Htt_Pref.c_Day_Kind_Additional_Rest,
                                          Htt_Pref.c_Day_Kind_Nonworking,
                                          Htt_Pref.c_Day_Kind_Swapped),
                           Array_Varchar2(t_Day_Kind_Holiday,
                                          t_Day_Kind_Additional_Rest,
                                          t_Day_Kind_Nonworking,
                                          t_Day_Kind_Swapped));
  end;

  ----------------------------------------------------------------------------------------------------
  -- pattern kind (translate message should be renamed to pattern kind)
  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Weekly return varchar2 is
  begin
    return t('schedule_kind:weekly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind_Periodic return varchar2 is
  begin
    return t('schedule_kind:periodic');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pattern_Kind(i_Pattern_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Pattern_Kind --
    when Htt_Pref.c_Pattern_Kind_Weekly then t_Pattern_Kind_Weekly --
    when Htt_Pref.c_Pattern_Kind_Periodic then t_Pattern_Kind_Periodic --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pattern_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Pattern_Kind_Weekly, --
                                          Htt_Pref.c_Pattern_Kind_Periodic),
                           Array_Varchar2(t_Pattern_Kind_Weekly, --
                                          t_Pattern_Kind_Periodic));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Custom return varchar2 is
  begin
    return t('schedule_kind:custom');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Flexible return varchar2 is
  begin
    return t('schedule_kind:flexible');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind_Hourly return varchar2 is
  begin
    return t('schedule_kind:hourly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Schedule_Kind(i_Schedule_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Schedule_Kind --
    when Htt_Pref.c_Schedule_Kind_Custom then t_Schedule_Kind_Custom --
    when Htt_Pref.c_Schedule_Kind_Flexible then t_Schedule_Kind_Flexible --
    when Htt_Pref.c_Schedule_Kind_Hourly then t_Schedule_Kind_Hourly --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Schedule_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Schedule_Kind_Custom, --
                                          Htt_Pref.c_Schedule_Kind_Flexible,
                                          Htt_Pref.c_Schedule_Kind_Hourly),
                           Array_Varchar2(t_Schedule_Kind_Custom, --
                                          t_Schedule_Kind_Flexible,
                                          t_Schedule_Kind_Hourly));
  end;

  ----------------------------------------------------------------------------------------------------
  -- protocol
  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Http return varchar2 is
  begin
    return t('protocol:http');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol_Https return varchar2 is
  begin
    return t('protocol:https');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Protocol(i_Protocol varchar2) return varchar2 is
  begin
    return --
    case i_Protocol --
    when Htt_Pref.c_Protocol_Http then t_Protocol_Http --
    when Htt_Pref.c_Protocol_Https then t_Protocol_Https --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Protocols return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Protocol_Http, --
                                          Htt_Pref.c_Protocol_Https),
                           Array_Varchar2(t_Protocol_Http, --
                                          t_Protocol_Https));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command kind
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Device return varchar2 is
  begin
    return t('command_kind: update device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_All_Device_Persons return varchar2 is
  begin
    return t('command_kind: update all device persons');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Update_Person return varchar2 is
  begin
    return t('command_kind: update person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Device return varchar2 is
  begin
    return t('command_kind: remove device');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Remove_Person return varchar2 is
  begin
    return t('command_kind: remove person');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind_Sync_Tracks return varchar2 is
  begin
    return t('command_kind: sync tracks');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Kind(i_Command_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Command_Kind --
    when Htt_Pref.c_Command_Kind_Update_Device then t_Command_Kind_Update_Device --
    when Htt_Pref.c_Command_Kind_Update_All_Device_Persons then t_Command_Kind_Update_All_Device_Persons --
    when Htt_Pref.c_Command_Kind_Update_Person then t_Command_Kind_Update_Person --
    when Htt_Pref.c_Command_Kind_Remove_Device then t_Command_Kind_Remove_Device --
    when Htt_Pref.c_Command_Kind_Remove_Person then t_Command_Kind_Remove_Person --
    when Htt_Pref.c_Command_Kind_Sync_Tracks then t_Command_Kind_Sync_Tracks --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Kind_Update_Device,
                                          Htt_Pref.c_Command_Kind_Update_All_Device_Persons,
                                          Htt_Pref.c_Command_Kind_Update_Person,
                                          Htt_Pref.c_Command_Kind_Remove_Device,
                                          Htt_Pref.c_Command_Kind_Remove_Person,
                                          Htt_Pref.c_Command_Kind_Sync_Tracks),
                           Array_Varchar2(t_Command_Kind_Update_Device,
                                          t_Command_Kind_Update_All_Device_Persons,
                                          t_Command_Kind_Update_Person,
                                          t_Command_Kind_Remove_Device,
                                          t_Command_Kind_Remove_Person,
                                          t_Command_Kind_Sync_Tracks));
  end;

  ----------------------------------------------------------------------------------------------------
  -- command status
  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_New return varchar2 is
  begin
    return t('command_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Sent return varchar2 is
  begin
    return t('command_status: sent');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Complited return varchar2 is
  begin
    return t('command_status: complited');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status_Failed return varchar2 is
  begin
    return t('command_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Command_Status(i_Command_Status varchar2) return varchar2 is
  begin
    return --
    case i_Command_Status --
    when Htt_Pref.c_Command_Status_New then t_Command_Status_New --
    when Htt_Pref.c_Command_Status_Sent then t_Command_Status_Sent --
    when Htt_Pref.c_Command_Status_Complited then t_Command_Status_Complited --
    when Htt_Pref.c_Command_Status_Failed then t_Command_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Command_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Command_Status_New,
                                          Htt_Pref.c_Command_Status_Sent,
                                          Htt_Pref.c_Command_Status_Complited,
                                          Htt_Pref.c_Command_Status_Failed),
                           Array_Varchar2(t_Command_Status_New,
                                          t_Command_Status_Sent,
                                          t_Command_Status_Complited,
                                          t_Command_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- person role
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Admin return varchar2 is
  begin
    return t('person_role:admin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role_Normal return varchar2 is
  begin
    return t('person_role:normal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Role(i_Person_Role varchar2) return varchar2 is
  begin
    return --
    case i_Person_Role --
    when Htt_Pref.c_Person_Role_Admin then t_Person_Role_Admin --
    when Htt_Pref.c_Person_Role_Normal then t_Person_Role_Normal --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Roles return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Person_Role_Admin, --
                                          Htt_Pref.c_Person_Role_Normal),
                           Array_Varchar2(t_Person_Role_Admin, --
                                          t_Person_Role_Normal));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track type
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Input return varchar2 is
  begin
    return t('track_type:input');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Output return varchar2 is
  begin
    return t('track_type:output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Check return varchar2 is
  begin
    return t('track_type:check');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Merger return varchar2 is
  begin
    return t('track_type:merger');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Potential_Output return varchar2 is
  begin
    return t('track_type:potential');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type_Gps_Output return varchar2 is
  begin
    return t('track_type:potential gps output');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Type(i_Track_Type varchar2) return varchar2 is
  begin
    return --
    case i_Track_Type --
    when Htt_Pref.c_Track_Type_Input then t_Track_Type_Input --
    when Htt_Pref.c_Track_Type_Output then t_Track_Type_Output --
    when Htt_Pref.c_Track_Type_Check then t_Track_Type_Check --
    when Htt_Pref.c_Track_Type_Merger then t_Track_Type_Merger --
    when Htt_Pref.c_Track_Type_Potential_Output then t_Track_Type_Potential_Output --
    when Htt_Pref.c_Track_Type_Gps_Output then t_Track_Type_Gps_Output --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Type_Input,
                                          Htt_Pref.c_Track_Type_Output,
                                          Htt_Pref.c_Track_Type_Check,
                                          Htt_Pref.c_Track_Type_Merger,
                                          Htt_Pref.c_Track_Type_Potential_Output,
                                          Htt_Pref.c_Track_Type_Gps_Output),
                           Array_Varchar2(t_Track_Type_Input,
                                          t_Track_Type_Output,
                                          t_Track_Type_Check,
                                          t_Track_Type_Merger,
                                          t_Track_Type_Potential_Output,
                                          t_Track_Type_Gps_Output));
  end;

  ----------------------------------------------------------------------------------------------------
  -- provider
  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Gps return varchar2 is
  begin
    return t('provider:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider_Network return varchar2 is
  begin
    return t('provider:network');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Provider(i_Provider varchar2) return varchar2 is
  begin
    return --
    case i_Provider --
    when Htt_Pref.c_Provider_Gps then t_Provider_Gps --
    when Htt_Pref.c_Provider_Network then t_Provider_Network --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Providers return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Provider_Gps, --
                                          Htt_Pref.c_Provider_Network),
                           Array_Varchar2(t_Provider_Gps, --
                                          t_Provider_Network));
  end;

  ----------------------------------------------------------------------------------------------------
  -- mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Password return varchar2 is
  begin
    return t('mark_type:password');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Touch return varchar2 is
  begin
    return t('mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Rfid_Card return varchar2 is
  begin
    return t('mark_type:rfid_card');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Qr_Code return varchar2 is
  begin
    return t('mark_type:qr_code');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Face return varchar2 is
  begin
    return t('mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Manual return varchar2 is
  begin
    return t('mark_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type_Auto return varchar2 is
  begin
    return t('mark_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return --
    case i_Mark_Type --
    when Htt_Pref.c_Mark_Type_Password then t_Mark_Type_Password --
    when Htt_Pref.c_Mark_Type_Touch then t_Mark_Type_Touch --
    when Htt_Pref.c_Mark_Type_Rfid_Card then t_Mark_Type_Rfid_Card --
    when Htt_Pref.c_Mark_Type_Qr_Code then t_Mark_Type_Qr_Code --
    when Htt_Pref.c_Mark_Type_Face then t_Mark_Type_Face --
    when Htt_Pref.c_Mark_Type_Manual then t_Mark_Type_Manual --
    when Htt_Pref.c_Mark_Type_Auto then t_Mark_Type_Auto --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Mark_Type_Password,
                                          Htt_Pref.c_Mark_Type_Touch,
                                          Htt_Pref.c_Mark_Type_Rfid_Card,
                                          Htt_Pref.c_Mark_Type_Qr_Code,
                                          Htt_Pref.c_Mark_Type_Face,
                                          Htt_Pref.c_Mark_Type_Manual,
                                          Htt_Pref.c_Mark_Type_Auto),
                           Array_Varchar2(t_Mark_Type_Password,
                                          t_Mark_Type_Touch,
                                          t_Mark_Type_Rfid_Card,
                                          t_Mark_Type_Qr_Code,
                                          t_Mark_Type_Face,
                                          t_Mark_Type_Manual,
                                          t_Mark_Type_Auto));
  end;

  ----------------------------------------------------------------------------------------------------
  -- track status
  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Draft return varchar2 is
  begin
    return t('track_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Not_Used return varchar2 is
  begin
    return t('track_status:not_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Partially_Used return varchar2 is
  begin
    return t('track_status:partially_used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status_Used return varchar2 is
  begin
    return t('track_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Track_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Htt_Pref.c_Track_Status_Draft then t_Track_Status_Draft --
    when Htt_Pref.c_Track_Status_Not_Used then t_Track_Status_Not_Used --
    when Htt_Pref.c_Track_Status_Partially_Used then t_Track_Status_Partially_Used --
    when Htt_Pref.c_Track_Status_Used then t_Track_Status_Used --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Track_Status_Draft,
                                          Htt_Pref.c_Track_Status_Not_Used,
                                          Htt_Pref.c_Track_Status_Partially_Used,
                                          Htt_Pref.c_Track_Status_Used),
                           Array_Varchar2(t_Track_Status_Draft,
                                          t_Track_Status_Not_Used,
                                          t_Track_Status_Partially_Used,
                                          t_Track_Status_Used));
  end;

  ----------------------------------------------------------------------------------------------------
  -- plan load
  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Part return varchar2 is
  begin
    return t('plan_load:part');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Full return varchar2 is
  begin
    return t('plan_load:full');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load_Extra return varchar2 is
  begin
    return t('plan_load:extra');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Plan_Load(i_Plan_Load varchar2) return varchar2 is
  begin
    return case i_Plan_Load --
    when Htt_Pref.c_Plan_Load_Part then t_Plan_Load_Part --
    when Htt_Pref.c_Plan_Load_Full then t_Plan_Load_Full --
    when Htt_Pref.c_Plan_Load_Extra then t_Plan_Load_Extra --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Plan_Loads return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Plan_Load_Part,
                                          Htt_Pref.c_Plan_Load_Full,
                                          Htt_Pref.c_Plan_Load_Extra),
                           Array_Varchar2(t_Plan_Load_Part, --
                                          t_Plan_Load_Full, --
                                          t_Plan_Load_Extra));
  end;

  ----------------------------------------------------------------------------------------------------
  -- day count type
  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Calendar_Days return varchar2 is
  begin
    return t('day_count_type:calendar days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Work_Days return varchar2 is
  begin
    return t('day_count_type:work days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type_Production_Days return varchar2 is
  begin
    return t('day_count_type:production days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Day_Count_Type(i_Day_Count_Type varchar2) return varchar2 is
  begin
    return case i_Day_Count_Type --
    when Htt_Pref.c_Day_Count_Type_Calendar_Days then t_Day_Count_Type_Calendar_Days --
    when Htt_Pref.c_Day_Count_Type_Work_Days then t_Day_Count_Type_Work_Days --
    when Htt_Pref.c_Day_Count_Type_Production_Days then t_Day_Count_Type_Production_Days end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Day_Count_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Day_Count_Type_Calendar_Days,
                                          Htt_Pref.c_Day_Count_Type_Work_Days,
                                          Htt_Pref.c_Day_Count_Type_Production_Days),
                           Array_Varchar2(t_Day_Count_Type_Calendar_Days,
                                          t_Day_Count_Type_Work_Days,
                                          t_Day_Count_Type_Production_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- carryover policy
  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_All return varchar2 is
  begin
    return t('carryover_policy: all');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Zero return varchar2 is
  begin
    return t('carryover_policy: zero');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy_Cap return varchar2 is
  begin
    return t('carryover_policy: cap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Carryover_Policy(i_Carryover_Policy varchar2) return varchar2 is
  begin
    return case i_Carryover_Policy --
    when Htt_Pref.c_Carryover_Policy_All then t_Carryover_Policy_All --
    when Htt_Pref.c_Carryover_Policy_Zero then t_Carryover_Policy_Zero --
    when Htt_Pref.c_Carryover_Policy_Cap then t_Carryover_Policy_Cap end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Carryover_Policies return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Carryover_Policy_All,
                                          Htt_Pref.c_Carryover_Policy_Zero,
                                          Htt_Pref.c_Carryover_Policy_Cap),
                           Array_Varchar2(t_Carryover_Policy_All,
                                          t_Carryover_Policy_Zero,
                                          t_Carryover_Policy_Cap));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request kind
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Part_Of_Day return varchar2 is
  begin
    return t('request_type:part_of_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Full_Day return varchar2 is
  begin
    return t('request_type:full_day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type_Multiple_Days return varchar2 is
  begin
    return t('request_type:multiple_days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Type(i_Request_Type varchar2) return varchar2 is
  begin
    return case i_Request_Type --
    when Htt_Pref.c_Request_Type_Part_Of_Day then t_Request_Type_Part_Of_Day --
    when Htt_Pref.c_Request_Type_Full_Day then t_Request_Type_Full_Day --
    when Htt_Pref.c_Request_Type_Multiple_Days then t_Request_Type_Multiple_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Type_Part_Of_Day,
                                          Htt_Pref.c_Request_Type_Full_Day,
                                          Htt_Pref.c_Request_Type_Multiple_Days),
                           Array_Varchar2(t_Request_Type_Part_Of_Day,
                                          t_Request_Type_Full_Day,
                                          t_Request_Type_Multiple_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request status
  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_New return varchar2 is
  begin
    return t('request_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Approved return varchar2 is
  begin
    return t('request_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Completed return varchar2 is
  begin
    return t('request_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status_Denied return varchar2 is
  begin
    return t('request_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Status(i_Request_Status varchar2) return varchar2 is
  begin
    return case i_Request_Status --
    when Htt_Pref.c_Request_Status_New then t_Request_Status_New --
    when Htt_Pref.c_Request_Status_Approved then t_Request_Status_Approved --
    when Htt_Pref.c_Request_Status_Completed then t_Request_Status_Completed --
    when Htt_Pref.c_Request_Status_Denied then t_Request_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Request_Status_New,
                                          Htt_Pref.c_Request_Status_Approved,
                                          Htt_Pref.c_Request_Status_Completed,
                                          Htt_Pref.c_Request_Status_Denied),
                           Array_Varchar2(t_Request_Status_New,
                                          t_Request_Status_Approved,
                                          t_Request_Status_Completed,
                                          t_Request_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Notification_Title
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Notify_Type     varchar2,
    t_Request_Kind_Id number
  ) return varchar2 is
    v_Request_Type varchar2(100);
  begin
    v_Request_Type := z_Htt_Request_Kinds.Load(i_Company_Id => i_Company_Id, i_Request_Kind_Id => t_Request_Kind_Id).Name;
  
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Request then
        return t('for $1{person_name} $2{request_kind_name} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Change_Status then
        return t('for $1{person_name} $2{request_kind_name} status change',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
      when Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
        return t('for $1{person_name} $2{request_kind_name} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 v_Request_Type);
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  -- attach types
  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Auto return varchar2 is
  begin
    return t('attach_type:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Manual return varchar2 is
  begin
    return t('attach_type:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type_Global return varchar2 is
  begin
    return t('attach_type:global');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attach_Type(i_Attach_Type varchar2) return varchar2 is
  begin
    return case i_Attach_Type --
    when Htt_Pref.c_Attach_Type_Manual then t_Attach_Type_Manual --
    when Htt_Pref.c_Attach_Type_Auto then t_Attach_Type_Auto --
    when Htt_Pref.c_Attach_Type_Global then t_Attach_Type_Global --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Attach_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Attach_Type_Manual,
                                          Htt_Pref.c_Attach_Type_Auto,
                                          Htt_Pref.c_Attach_Type_Global),
                           Array_Varchar2(t_Attach_Type_Manual,
                                          t_Attach_Type_Auto,
                                          t_Attach_Type_Global));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change status
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_New return varchar2 is
  begin
    return t('change_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Approved return varchar2 is
  begin
    return t('change_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Completed return varchar2 is
  begin
    return t('change_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status_Denied return varchar2 is
  begin
    return t('change_status:denied');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Status(i_Change_Status varchar2) return varchar2 is
  begin
    return case i_Change_Status --
    when Htt_Pref.c_Change_Status_New then t_Change_Status_New --
    when Htt_Pref.c_Change_Status_Approved then t_Change_Status_Approved --
    when Htt_Pref.c_Change_Status_Completed then t_Change_Status_Completed --
    when Htt_Pref.c_Change_Status_Denied then t_Change_Status_Denied --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Status_New,
                                          Htt_Pref.c_Change_Status_Approved,
                                          Htt_Pref.c_Change_Status_Completed,
                                          Htt_Pref.c_Change_Status_Denied),
                           Array_Varchar2(t_Change_Status_New,
                                          t_Change_Status_Approved,
                                          t_Change_Status_Completed,
                                          t_Change_Status_Denied));
  end;

  ----------------------------------------------------------------------------------------------------
  -- change kind
  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Swap return varchar2 is
  begin
    return t('change_kind:swap');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind_Change_Plan return varchar2 is
  begin
    return t('change_kind:change_plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Kind(i_Change_Kind varchar2) return varchar2 is
  begin
    return case i_Change_Kind --
    when Htt_Pref.c_Change_Kind_Swap then t_Change_Kind_Swap --
    when Htt_Pref.c_Change_Kind_Change_Plan then t_Change_Kind_Change_Plan --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Change_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Change_Kind_Swap,
                                          Htt_Pref.c_Change_Kind_Change_Plan),
                           Array_Varchar2(t_Change_Kind_Swap, --
                                          t_Change_Kind_Change_Plan));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Notification_Title
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Notify_Type varchar2,
    i_Change_Kind varchar2
  ) return varchar2 is
  begin
    case i_Notify_Type
      when Hes_Pref.c_Pref_Nt_Plan_Change then
        return t('for $1{person_name} $2{change_kind} saved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change then
        return t('for $1{person_name} $2{change_kind} status changed',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
      when Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
        return t('for $1{person_name} $2{change_kind} approved',
                 z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
                 t_Change_Kind(i_Change_Kind));
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- dashboard status kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Worktime_Not_Started return varchar2 is
  begin
    return t('dashboard:working time not begin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Leave_Exists return varchar2 is
  begin
    return t('dashboard:leave');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Late return varchar2 is
  begin
    return t('dashboard:late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Intime return varchar2 is
  begin
    return t('dashboard:intime');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Staff_Not_Come return varchar2 is
  begin
    return t('dashboard:not come');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Rest_Day return varchar2 is
  begin
    return t('dashboard:rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Additional_Rest_Day return varchar2 is
  begin
    return t('dashboard:additional rest day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Holiday return varchar2 is
  begin
    return t('dashboard:holiday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Nonworking_Day return varchar2 is
  begin
    return t('dashboard:nonworking day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Not_Licensed_Day return varchar2 is
  begin
    return t('dashboard: not licensed day');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_No_Timesheet return varchar2 is
  begin
    return t('dashboard:no timesheet');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dashboard_Status_Kinds(i_Dashboard_Status_Kinds varchar2) return varchar2 is
  begin
    return case i_Dashboard_Status_Kinds --
    when Htt_Pref.c_Dashboard_Worktime_Not_Started then t_Dashboard_Worktime_Not_Started --
    when Htt_Pref.c_Dashboard_Leave_Exists then t_Dashboard_Leave_Exists --
    when Htt_Pref.c_Dashboard_Staff_Late then t_Dashboard_Staff_Late --
    when Htt_Pref.c_Dashboard_Staff_Intime then t_Dashboard_Staff_Intime --
    when Htt_Pref.c_Dashboard_Staff_Not_Come then t_Dashboard_Staff_Not_Come --
    when Htt_Pref.c_Dashboard_Rest_Day then t_Dashboard_Rest_Day --
    when Htt_Pref.c_Dashboard_Holiday then t_Dashboard_Holiday --
    when Htt_Pref.c_Dashboard_Additional_Rest_Day then t_Dashboard_Additional_Rest_Day --      
    when Htt_Pref.c_Dashboard_Nonworking_Day then t_Dashboard_Nonworking_Day --
    when Htt_Pref.c_Dashboard_Not_Licensed_Day then t_Dashboard_Not_Licensed_Day --
    when Htt_Pref.c_Dashboard_No_Timesheet then t_Dashboard_No_Timesheet --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dashboard_Status_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Dashboard_Worktime_Not_Started,
                                          Htt_Pref.c_Dashboard_Leave_Exists,
                                          Htt_Pref.c_Dashboard_Staff_Late,
                                          Htt_Pref.c_Dashboard_Staff_Intime,
                                          Htt_Pref.c_Dashboard_Staff_Not_Come,
                                          Htt_Pref.c_Dashboard_Rest_Day,
                                          Htt_Pref.c_Dashboard_Holiday,
                                          Htt_Pref.c_Dashboard_Additional_Rest_Day,
                                          Htt_Pref.c_Dashboard_Nonworking_Day,
                                          Htt_Pref.c_Dashboard_Not_Licensed_Day,
                                          Htt_Pref.c_Dashboard_No_Timesheet),
                           Array_Varchar2(t_Dashboard_Worktime_Not_Started, --
                                          t_Dashboard_Leave_Exists,
                                          t_Dashboard_Staff_Late,
                                          t_Dashboard_Staff_Intime,
                                          t_Dashboard_Staff_Not_Come,
                                          t_Dashboard_Rest_Day,
                                          t_Dashboard_Holiday,
                                          t_Dashboard_Additional_Rest_Day,
                                          t_Dashboard_Nonworking_Day,
                                          t_Dashboard_Not_Licensed_Day,
                                          t_Dashboard_No_Timesheet));
  end;

  ----------------------------------------------------------------------------------------------------
  -- request  accrual kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Plan return varchar2 is
  begin
    return t('accrual_kind:plan');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kind_Carryover return varchar2 is
  begin
    return t('accrual_kind:carryover');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Accrual_Kinds(i_Accrual_Kind varchar2) return varchar2 is
  begin
    return case i_Accrual_Kind --
    when Htt_Pref.c_Accrual_Kind_Plan then t_Accrual_Kind_Plan --
    when Htt_Pref.c_Accrual_Kind_Carryover then t_Accrual_Kind_Carryover --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Accrual_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Accrual_Kind_Plan,
                                          Htt_Pref.c_Accrual_Kind_Carryover),
                           Array_Varchar2(t_Accrual_Kind_Plan, --
                                          t_Accrual_Kind_Carryover));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms track status
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_New return varchar2 is
  begin
    return t('acms_track_status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Completed return varchar2 is
  begin
    return t('acms_track_status: completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status_Failed return varchar2 is
  begin
    return t('acms_track_status: failed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Track_Status(i_Track_Status varchar2) return varchar2 is
  begin
    return case i_Track_Status --
    when Htt_Pref.c_Acms_Track_Status_New then t_Acms_Track_Status_New --
    when Htt_Pref.c_Acms_Track_Status_Completed then t_Acms_Track_Status_Completed --
    when Htt_Pref.c_Acms_Track_Status_Failed then t_Acms_Track_Status_Failed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Track_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Track_Status_New,
                                          Htt_Pref.c_Acms_Track_Status_Completed,
                                          Htt_Pref.c_Acms_Track_Status_Failed),
                           Array_Varchar2(t_Acms_Track_Status_New,
                                          t_Acms_Track_Status_Completed,
                                          t_Acms_Track_Status_Failed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- acms mark type
  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Touch return varchar2 is
  begin
    return t('acms_mark_type:touch');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type_Face return varchar2 is
  begin
    return t('acms_mark_type:face');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Acms_Mark_Type(i_Mark_Type varchar2) return varchar2 is
  begin
    return case i_Mark_Type --
    when Htt_Pref.c_Acms_Mark_Type_Face then t_Acms_Mark_Type_Face --
    when Htt_Pref.c_Acms_Mark_Type_Touch then t_Acms_Mark_Type_Touch --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Acms_Mark_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Acms_Mark_Type_Face, --
                                          Htt_Pref.c_Acms_Mark_Type_Touch),
                           Array_Varchar2(t_Acms_Mark_Type_Face, --
                                          t_Acms_Mark_Type_Touch));
  end;

  ----------------------------------------------------------------------------------------------------
  -- location defined by
  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Gps return varchar2 is
  begin
    return t('location_defined_by:gps');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_By_Bssid return varchar2 is
  begin
    return t('location_defined_by:bssid');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Location_Defined_Type(i_Location_Defined_Type varchar2) return varchar2 is
  begin
    return case i_Location_Defined_Type --
    when Htt_Pref.c_Location_Defined_By_Gps then t_Location_Defined_By_Gps --
    when Htt_Pref.c_Location_Defined_By_Bssid then t_Location_Defined_By_Bssid --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Defined_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Location_Defined_By_Gps, --
                                          Htt_Pref.c_Location_Defined_By_Bssid),
                           Array_Varchar2(t_Location_Defined_By_Gps, --
                                          t_Location_Defined_By_Bssid));
  end;

  ----------------------------------------------------------------------------------------------------
  -- work statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_In return varchar2 is
  begin
    return t('work_status:in');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Work_Status_Out return varchar2 is
  begin
    return t('work_status:out');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status_Returned return varchar2 is
  begin
    return t('work_status:returned');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Work_Status(i_Work_Status varchar2) return varchar2 is
  begin
    return case i_Work_Status --
    when Htt_Pref.c_Work_Status_In then t_Work_Status_In --
    when Htt_Pref.c_Work_Status_Out then t_Work_Status_Out --
    when Htt_Pref.c_Work_Status_Returned then t_Work_Status_Returned --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Work_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Work_Status_In, --
                                          Htt_Pref.c_Work_Status_Out,
                                          Htt_Pref.c_Work_Status_Returned),
                           Array_Varchar2(t_Work_Status_In, --
                                          t_Work_Status_Out,
                                          t_Work_Status_Returned));
  end;

  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Online return varchar2 is
  begin
    return t('device_status:online');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Device_Status_Offline return varchar2 is
  begin
    return t('device_status:offline');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status_Unknown return varchar2 is
  begin
    return t('device_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Device_Status(i_Status varchar2) return varchar2 is
  begin
    return case i_Status --
    when Htt_Pref.c_Device_Status_Online then t_Device_Status_Online --
    when Htt_Pref.c_Device_Status_Offline then t_Device_Status_Offline --
    when Htt_Pref.c_Device_Status_Unknown then t_Device_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Device_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htt_Pref.c_Device_Status_Online,
                                          Htt_Pref.c_Device_Status_Offline,
                                          Htt_Pref.c_Device_Status_Unknown),
                           Array_Varchar2(t_Device_Status_Online,
                                          t_Device_Status_Offline,
                                          t_Device_Status_Unknown));
  end;

end Htt_Util;
/

