set define off
create or replace package Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service;
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id        number,
    i_Device           Htt_Devices%rowtype,
    i_Person_Code      varchar2,
    i_Track_Time       timestamp with local time zone,
    i_Photo_Sha        varchar2 := null,
    i_Track_Type       varchar2 := Htt_Pref.c_Track_Type_Check,
    i_Person_Auth_Type varchar2 := Hac_Pref.c_Person_Auth_Type_Person_Code
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Load_Device_Settings
  (
    i_Server_Id      varchar2,
    i_Door_Code      varchar2,
    o_Device_Exists  out varchar2,
    o_Tracks_Ignored out varchar2,
    o_Image_Ignored  out varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Load_Dahua_Device_Settings
  (
    i_Host_Url       varchar2,
    i_Dss_Channel_Id varchar2,
    o_Device_Exists  out varchar2,
    o_Image_Ignored  out varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Load_Listening_Device_Settings
  (
    i_Device_Token  varchar2,
    o_Device_Exists out varchar2,
    o_Image_Ignored out varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Hik_Device_Listener_Event
  (
    i_Token   varchar2,
    i_Pic_Sha varchar2,
    i_Val     Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  );
end Hac_Core;
/
create or replace package body Hac_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function Build_Hik_Runtime_Service
  (
    i_Host_Url           varchar2,
    i_Partner_Key        varchar2,
    i_Partner_Secret     varchar2,
    i_Request_Path       varchar2,
    i_Data               Json_Object_t := null,
    i_Response_Procedure varchar2,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Array_Varchar2,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    v_Service Runtime_Service;
    v_Details Hashmap := Hashmap();
  begin
    v_Details.Put('partner_key', i_Partner_Key);
    v_Details.Put('partner_secret', i_Partner_Secret);
    v_Details.Put('host_url', i_Host_Url);
    v_Details.Put('request_path', i_Request_Path);
  
    v_Service := Runtime_Service(Hac_Pref.c_Hik_Api_Service_Name);
  
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(Nvl(i_Data, Json_Object_t).To_Clob));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Response_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Dahua_Runtime_Service
  (
    i_Server_Id          number,
    i_Api_Uri            varchar2,
    i_Api_Method         varchar2,
    i_Responce_Procedure varchar2,
    i_Host_Url           varchar2 := null,
    i_Uri_Query_Params   Gmap := null,
    i_Object_Id          varchar2 := null,
    i_Data               Gmap := Gmap(),
    i_Face_Picture_Sha   varchar2 := null,
    i_Action_In          varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap,
    i_Action_Out         varchar2 := Biruni_Pref.c_Rs_Action_In_Out_Hashmap
  ) return Runtime_Service is
    r_Server     Hac_Servers%rowtype := z_Hac_Servers.Load(i_Server_Id);
    r_Dss_Server Hac_Dss_Servers%rowtype := z_Hac_Dss_Servers.Load(i_Server_Id);
    v_Service    Runtime_Service;
    v_Details    Hashmap := Hashmap();
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys Array_Varchar2;
      v_Delimiter  varchar2(1) := '&';
      v_Key        varchar2(100);
      result       varchar2(4000);
    begin
      if i_Uri_Query_Params is null then
        return result;
      end if;
    
      v_Param_Keys := i_Uri_Query_Params.Keyset;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || i_Uri_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return result;
    end;
  begin
    v_Details.Put('host_url', Nvl(i_Host_Url, r_Server.Host_Url));
    v_Details.Put('method', i_Api_Method);
    v_Details.Put('api_uri', i_Api_Uri);
    v_Details.Put('object_id', i_Object_Id);
    v_Details.Put('query_params', Gather_Query_Params);
    v_Details.Put('auth_details',
                  Fazo.Zip_Map('username', r_Dss_Server.Username, 'password', r_Dss_Server.Password));
    v_Details.Put('face_picture_sha', i_Face_Picture_Sha);
  
    v_Service := Runtime_Service(Hac_Pref.c_Dahua_Api_Service_Name);
    v_Service.Set_Detail(v_Details);
    v_Service.Set_Data(Fazo.Read_Clob(i_Data.Val.To_Clob()));
  
    v_Service.Set_Response_Procedure(Response_Procedure => i_Responce_Procedure,
                                     Action_In          => i_Action_In,
                                     Action_Out         => i_Action_Out);
  
    return v_Service;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Hac_Servers%rowtype) is
  begin
    z_Hac_Servers.Save_Row(i_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
  begin
    z_Hac_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Attach
  (
    i_Company_Id  number,
    i_Device_Id   number,
    i_Attach_Kind varchar2
  ) is
    -------------------------------------------------- 
    Procedure Assert_Singular_Primary_Attachment is
      v_Dummy varchar2(1);
    begin
      if i_Attach_Kind <> Hac_Pref.c_Device_Attach_Primary then
        return;
      end if;
    
      select 'x'
        into v_Dummy
        from Hac_Company_Devices p
       where p.Device_Id = i_Device_Id
         and p.Attach_Kind = Hac_Pref.c_Device_Attach_Primary
         and p.Company_Id <> i_Company_Id;
    
      Hac_Error.Raise_001;
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Singular_Primary_Attachment;
  
    z_Hac_Company_Devices.Insert_Try(i_Company_Id  => i_Company_Id,
                                     i_Device_Id   => i_Device_Id,
                                     i_Attach_Kind => i_Attach_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Detach
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Hac_Company_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save
  (
    i_Company_Id  number,
    i_Device      Hac_Devices%rowtype,
    i_Event_Types Array_Number := Array_Number()
  ) is
    v_Old_Company_Id number;
  begin
    if z_Hac_Devices.Exist_Lock(i_Server_Id => i_Device.Server_Id,
                                i_Device_Id => i_Device.Device_Id) then
      v_Old_Company_Id := Hac_Util.Load_Primary_Company(i_Device.Device_Id);
    end if;
  
    z_Hac_Devices.Save_Row(i_Device);
  
    if i_Company_Id is null then
      Hac_Error.Raise_002;
    end if;
  
    if v_Old_Company_Id <> i_Company_Id then
      Device_Detach(i_Company_Id => v_Old_Company_Id, i_Device_Id => i_Device.Device_Id);
    end if;
  
    Device_Attach(i_Company_Id  => i_Company_Id,
                  i_Device_Id   => i_Device.Device_Id,
                  i_Attach_Kind => Hac_Pref.c_Device_Attach_Primary);
  
    for i in 1 .. i_Event_Types.Count
    loop
      z_Hac_Device_Event_Types.Insert_Try(i_Server_Id       => i_Device.Server_Id,
                                          i_Device_Id       => i_Device.Device_Id,
                                          i_Device_Type_Id  => i_Device.Device_Type_Id,
                                          i_Event_Type_Code => i_Event_Types(i));
    end loop;
  
    delete Hac_Device_Event_Types q
     where q.Server_Id = i_Device.Server_Id
       and q.Device_Id = i_Device.Device_Id
       and q.Device_Type_Id = i_Device.Device_Type_Id
       and q.Event_Type_Code not member of i_Event_Types;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Delete
  (
    i_Server_Id number,
    i_Device_Id number
  ) is
  begin
    z_Hac_Devices.Delete_One(i_Server_Id => i_Server_Id, i_Device_Id => i_Device_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Analyze_Server_Person_Info
  (
    i_Server_Id      number,
    i_Person         Mr_Natural_Persons%rowtype,
    i_Photo_Sha      varchar2,
    i_Device_Type_Id number,
    i_Rfid_Code      varchar2 := null,
    o_Person_Data    out Gmap
  ) is
    c_Out_Action_Create constant varchar2(1) := 'C';
    c_Out_Action_Update constant varchar2(1) := 'U';
  
    v_Out_Action varchar2(1);
  
    r_Server_Person Hac_Server_Persons%rowtype;
  
    v_Response_Data Gmap;
  
    --------------------------------------------------
    Function Attached_To_Device
    (
      i_Company_Id     number,
      i_Device_Type_Id number,
      i_Person_Id      number
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons Lp
       where Lp.Company_Id = i_Company_Id
         and Lp.Person_Id = i_Person_Id
         and exists (select 1
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = Lp.Location_Id
                 and q.Device_Type_Id = i_Device_Type_Id)
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if i_Server_Id is null then
      return;
    end if;
  
    if z_Hac_Server_Persons.Exist(i_Server_Id  => i_Server_Id,
                                  i_Company_Id => i_Person.Company_Id,
                                  i_Person_Id  => i_Person.Person_Id,
                                  o_Row        => r_Server_Person) then
      if r_Server_Person.Person_Code is null or
         not Fazo.Equal(r_Server_Person.First_Name, i_Person.First_Name) or
         not Fazo.Equal(r_Server_Person.Last_Name, i_Person.Last_Name) or
         not Fazo.Equal(r_Server_Person.Photo_Sha, i_Photo_Sha) or
         not Fazo.Equal(r_Server_Person.Rfid_Code, i_Rfid_Code) then
        v_Out_Action := c_Out_Action_Update;
      end if;
    else
      if Attached_To_Device(i_Company_Id     => i_Person.Company_Id,
                            i_Device_Type_Id => i_Device_Type_Id,
                            i_Person_Id      => i_Person.Person_Id) then
        v_Out_Action := c_Out_Action_Create;
      end if;
    end if;
  
    if v_Out_Action in (c_Out_Action_Create, c_Out_Action_Update) then
      o_Person_Data := Gmap();
    
      o_Person_Data.Put('person_code', Nvl(r_Server_Person.Person_Code, ''));
      o_Person_Data.Put('external_code',
                        Nvl(r_Server_Person.External_Code, Hac_Util.Gen_Hik_External_Code));
      o_Person_Data.Put('first_name', i_Person.First_Name);
      o_Person_Data.Put('last_name', Nvl(i_Person.Last_Name, ''));
      o_Person_Data.Put('photo_sha', Nvl(i_Photo_Sha, ''));
      o_Person_Data.Put('rfid_code', Nvl(i_Rfid_Code, ''));
    
      v_Response_Data := Gmap();
    
      v_Response_Data.Put('server_id', i_Server_Id);
      v_Response_Data.Put('company_id', i_Person.Company_Id);
      v_Response_Data.Put('person_id', i_Person.Person_Id);
    
      o_Person_Data.Put('response_data', v_Response_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Info
  (
    i_Company   Hac_Dss_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Groups Array_Varchar2;
  
    v_Person_Data Gmap;
  
    --------------------------------------------------
    Function Person_Code
    (
      i_Company_Id number,
      i_Person_Id  number
    ) return varchar2 is
    begin
      return z_Md_Companies.Load(i_Company_Id).Code || i_Person_Id;
    end;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Dahua_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Person_Group_Code is not null then
      v_Person_Data.Put('person_group_code', i_Company.Person_Group_Code);
      v_Person_Data.Put('start_time', Hac_Pref.c_Auth_Start_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Auth_End_Time);
    
      v_Person_Data.Put('person_id',
                        Coalesce(v_Person_Data.o_Varchar2('person_code'),
                                 Person_Code(i_Company_Id => i_Person.Company_Id,
                                             i_Person_Id  => i_Person.Person_Id)));
    
      select q.Access_Group_Code
        bulk collect
        into v_Access_Groups
        from Hac_Device_Persons Dp
        join Hac_Dss_Devices q
          on q.Server_Id = i_Company.Server_Id
         and q.Device_Id = Dp.Device_Id
       where Dp.Server_Id = i_Company.Server_Id
         and Dp.Company_Id = i_Person.Company_Id
         and Dp.Person_Id = i_Person.Person_Id
       group by q.Access_Group_Code;
    
      v_Person_Data.Put('access_groups', v_Access_Groups);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Info
  (
    i_Company   Hac_Hik_Company_Servers%rowtype,
    i_Person    Mr_Natural_Persons%rowtype,
    i_Photo_Sha varchar2,
    i_Rfid_Code varchar2,
    o_Data      out Gmap
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Person_Data Gmap;
  begin
    Analyze_Server_Person_Info(i_Server_Id      => i_Company.Server_Id,
                               i_Person         => i_Person,
                               i_Photo_Sha      => i_Photo_Sha,
                               i_Device_Type_Id => v_Hikvision_Type_Id,
                               i_Rfid_Code      => i_Rfid_Code,
                               o_Person_Data    => v_Person_Data);
  
    if v_Person_Data is not null and i_Company.Organization_Code is not null then
      v_Person_Data.Put('organization_code', i_Company.Organization_Code);
      v_Person_Data.Put('begin_time', Hac_Pref.c_Hik_Begin_Time);
      v_Person_Data.Put('end_time', Hac_Pref.c_Hik_End_Time);
    
      o_Data := v_Person_Data;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Person_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Photo_Sha  varchar2(64);
    r_Person     Mr_Natural_Persons%rowtype;
    r_Htt_Person Htt_Persons%rowtype;
  
    v_Dss_Data      Gmap;
    v_Dss_Info_List Glist := Glist();
  
    v_Hik_Data      Gmap;
    v_Hik_Info_List Glist := Glist();
  
    v_Dss_Server Gmap := Gmap();
    v_Hik_Server Gmap := Gmap();
  
    result Gmap := Gmap();
  begin
    o_Data := Array_Varchar2();
  
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    for i in 1 .. i_Person_Ids.Count
    loop
      r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id,
                                                i_Person_Id  => i_Person_Ids(i));
      r_Htt_Person := z_Htt_Persons.Take(i_Company_Id => i_Company_Id,
                                         i_Person_Id  => i_Person_Ids(i));
      v_Photo_Sha  := Hac_Util.Take_Main_Photo(i_Company_Id => i_Company_Id,
                                               i_Person_Id  => i_Person_Ids(i));
    
      Analyze_Dahua_Person_Info(i_Company   => r_Dss_Company,
                                i_Person    => r_Person,
                                i_Photo_Sha => v_Photo_Sha,
                                i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                o_Data      => v_Dss_Data);
    
      Analyze_Hikvision_Person_Info(i_Company   => r_Hik_Company,
                                    i_Person    => r_Person,
                                    i_Photo_Sha => v_Photo_Sha,
                                    i_Rfid_Code => r_Htt_Person.Rfid_Code,
                                    o_Data      => v_Hik_Data);
    
      if v_Dss_Data is not null then
        v_Dss_Info_List.Push(v_Dss_Data.Val);
      end if;
    
      if v_Hik_Data is not null then
        v_Hik_Info_List.Push(v_Hik_Data.Val);
      end if;
    end loop;
  
    if r_Dss_Server.Server_Id is not null then
      v_Dss_Server.Put('host_url', v_Dss_Host_Url);
      v_Dss_Server.Put('username', r_Dss_Server.Username);
      v_Dss_Server.Put('password', r_Dss_Server.Password);
    
      v_Dss_Server.Put('persons', v_Dss_Info_List);
    
      Result.Put('dahua_data', v_Dss_Server);
    end if;
  
    if r_Hik_Server.Server_Id is not null then
      v_Hik_Server.Put('host_url', v_Hik_Host_Url);
      v_Hik_Server.Put('partner_key', r_Hik_Server.Partner_Key);
      v_Hik_Server.Put('partner_secret', r_Hik_Server.Partner_Secret);
    
      v_Hik_Server.Put('persons', v_Hik_Info_List);
    
      Result.Put('hikvision_data', v_Hik_Server);
    end if;
  
    o_Data := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Attachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Htt_Location_Persons Lp
                  on Lp.Company_Id = i_Company_Id
                 and Lp.Location_Id = p.Location_Id
                 and Lp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Lp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Hac_Device_Persons Dp
                       where Dp.Server_Id = i_Server_Id
                         and Dp.Company_Id = i_Company_Id
                         and Dp.Device_Id = q.Device_Id
                         and Dp.Person_Id = Lp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Dahua_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Dahua_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Group_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dss_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Dahua_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Group_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Group_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_group_code', r.Access_Group_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Hikvision_Person_Detachment
  (
    i_Company_Id number,
    i_Server_Id  number,
    i_Person_Ids Array_Number,
    o_Data       out Glist
  ) is
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    v_Access_Data   Gmap := Gmap();
    v_Response_Data Gmap;
  begin
    o_Data := Glist();
  
    for r in (select q.Device_Id,
                     q.Access_Level_Code,
                     cast(collect(Sp.Person_Code) as Array_Varchar2) Person_Codes,
                     cast(collect(to_number(to_char(Sp.Person_Id))) as Array_Number) Person_Ids
                from Hac_Hik_Devices q
                join Htt_Devices p
                  on p.Company_Id = i_Company_Id
                 and p.Device_Type_Id = v_Hikvision_Type_Id
                 and p.Serial_Number = q.Serial_Number
                join Hac_Device_Persons Dp
                  on Dp.Server_Id = i_Server_Id
                 and Dp.Company_Id = i_Company_Id
                 and Dp.Device_Id = q.Device_Id
                 and Dp.Person_Id member of i_Person_Ids
                join Hac_Server_Persons Sp
                  on Sp.Server_Id = i_Server_Id
                 and Sp.Company_Id = i_Company_Id
                 and Sp.Person_Id = Dp.Person_Id
               where q.Server_Id = i_Server_Id
                 and q.Access_Level_Code is not null
                 and not exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = Dp.Person_Id)
               group by q.Device_Id, q.Access_Level_Code
               order by q.Device_Id)
    loop
      if r.Person_Codes.Count > 0 then
        v_Access_Data.Put('access_level_code', r.Access_Level_Code);
        v_Access_Data.Put('person_codes', r.Person_Codes);
      
        v_Response_Data := Gmap();
      
        v_Response_Data.Put('server_id', i_Server_Id);
        v_Response_Data.Put('company_id', i_Company_Id);
        v_Response_Data.Put('device_id', r.Device_Id);
        v_Response_Data.Put('person_ids', r.Person_Ids);
      
        v_Access_Data.Put('response_data', v_Response_Data);
      
        o_Data.Push(v_Access_Data.Val);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Analyze_Attachment_Info
  (
    i_Company_Id number,
    i_Person_Ids Array_Varchar2,
    o_Data       out Array_Varchar2
  ) is
    r_Dss_Company Hac_Dss_Company_Servers%rowtype := z_Hac_Dss_Company_Servers.Take(i_Company_Id);
    r_Hik_Company Hac_Hik_Company_Servers%rowtype := z_Hac_Hik_Company_Servers.Take(i_Company_Id);
  
    r_Dss_Server Hac_Dss_Servers%rowtype;
    r_Hik_Server Hac_Hik_Servers%rowtype;
  
    v_Dss_Host_Url Hac_Servers.Host_Url%type;
    v_Hik_Host_Url Hac_Servers.Host_Url%type;
  
    v_Dss_List Glist;
    v_Hik_List Glist;
  
    v_Dss_Data Gmap := Gmap();
    v_Hik_Data Gmap := Gmap();
  
    v_Person_Ids Array_Number := Fazo.Sort(Fazo.To_Array_Number(i_Person_Ids));
  
    v_Result Gmap := Gmap();
  begin
    r_Dss_Server   := z_Hac_Dss_Servers.Take(r_Dss_Company.Server_Id);
    v_Dss_Host_Url := z_Hac_Servers.Take(r_Dss_Company.Server_Id).Host_Url;
  
    r_Hik_Server   := z_Hac_Hik_Servers.Take(r_Hik_Company.Server_Id);
    v_Hik_Host_Url := z_Hac_Servers.Take(r_Hik_Company.Server_Id).Host_Url;
  
    v_Dss_Data.Put('host_url', Nvl(v_Dss_Host_Url, ''));
    v_Dss_Data.Put('username', Nvl(r_Dss_Server.Username, ''));
    v_Dss_Data.Put('password', Nvl(r_Dss_Server.Password, ''));
  
    v_Hik_Data.Put('host_url', Nvl(v_Hik_Host_Url, ''));
    v_Hik_Data.Put('partner_key', Nvl(r_Hik_Server.Partner_Key, ''));
    v_Hik_Data.Put('partner_secret', Nvl(r_Hik_Server.Partner_Secret, ''));
  
    if r_Dss_Company.Server_Id is not null then
      Analyze_Dahua_Person_Attachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('attachment_info', v_Dss_List);
    
      Analyze_Dahua_Person_Detachment(i_Company_Id => i_Company_Id,
                                      i_Server_Id  => r_Dss_Company.Server_Id,
                                      i_Person_Ids => v_Person_Ids,
                                      o_Data       => v_Dss_List);
      v_Dss_Data.Put('detachment_info', v_Dss_List);
    end if;
  
    if r_Hik_Company.Server_Id is not null then
      Analyze_Hikvision_Person_Attachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('attachment_info', v_Hik_List);
    
      Analyze_Hikvision_Person_Detachment(i_Company_Id => i_Company_Id,
                                          i_Server_Id  => r_Hik_Company.Server_Id,
                                          i_Person_Ids => v_Person_Ids,
                                          o_Data       => v_Hik_List);
      v_Hik_Data.Put('detachment_info', v_Hik_List);
    end if;
  
    v_Result.Put('dahua_data', v_Dss_Data);
    v_Result.Put('hikvision_data', v_Hik_Data);
  
    o_Data := Fazo.Read_Clob(v_Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Attach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Ids Array_Varchar2
  ) is
  begin
    -- TODO FIX, TEZROQ To'g'rilash kerak
    for i in 1 .. i_Person_Ids.Count
    loop
      z_Hac_Device_Persons.Insert_Try(i_Server_Id  => i_Server_Id,
                                      i_Company_Id => i_Company_Id,
                                      i_Device_Id  => i_Device_Id,
                                      i_Person_Id  => i_Person_Ids(i));
    end loop;
    /*insert into Hac_Device_Persons
      (Server_Id, Company_Id, Device_Id, Person_Id)
    values
      (i_Server_Id, i_Company_Id, i_Device_Id, to_number(i_Person_Ids(i)));*/
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Persons_Detach
  (
    i_Server_Id  number,
    i_Company_Id number,
    i_Device_Id  number,
    
    i_Person_Ids Array_Varchar2
  ) is
  begin
    forall i in 1 .. i_Person_Ids.Count
      delete from Hac_Device_Persons q
       where q.Server_Id = i_Server_Id
         and q.Company_Id = i_Company_Id
         and q.Device_Id = i_Device_Id
         and q.Person_Id = to_number(i_Person_Ids(i));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2
  ) is
  begin
    if not z_Hac_Server_Persons.Exist_Lock(i_Server_Id  => i_Server_Id,
                                           i_Company_Id => i_Company_Id,
                                           i_Person_Id  => i_Person_Id) then
      z_Hac_Server_Persons.Insert_One(i_Server_Id     => i_Server_Id,
                                      i_Company_Id    => i_Company_Id,
                                      i_Person_Id     => i_Person_Id,
                                      i_External_Code => i_External_Code);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Person_Info
  (
    i_Server_Id     number,
    i_Company_Id    number,
    i_Person_Id     number,
    i_External_Code varchar2,
    i_First_Name    varchar2,
    i_Last_Name     varchar2,
    i_Photo_Sha     varchar2,
    i_Rfid_Code     varchar2,
    i_Person_Code   varchar2 := null
  ) is
    v_Person_Code Option_Varchar2 := case
                                       when i_Person_Code is not null then
                                        Option_Varchar2(i_Person_Code)
                                       else
                                        null
                                     end;
  begin
    z_Hac_Server_Persons.Update_One(i_Server_Id     => i_Server_Id,
                                    i_Company_Id    => i_Company_Id,
                                    i_Person_Id     => i_Person_Id,
                                    i_First_Name    => Option_Varchar2(i_First_Name),
                                    i_Last_Name     => Option_Varchar2(i_Last_Name),
                                    i_Photo_Sha     => Option_Varchar2(i_Photo_Sha),
                                    i_Rfid_Code     => Option_Varchar2(i_Rfid_Code),
                                    i_Person_Code   => v_Person_Code,
                                    i_External_Code => Option_Varchar2(i_External_Code));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Request_Params varchar2,
    i_Error_Message  varchar2
  ) is
    pragma autonomous_transaction;
  begin
    z_Hac_Error_Log.Save_One(i_Log_Id         => Hac_Error_Log_Sq.Nextval,
                             i_Request_Params => i_Request_Params,
                             i_Error_Message  => i_Error_Message);
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hac_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Hac_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin hac_core.notify_acms_devices; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Acms_Devices is
    v_Company Hashmap;
    v_Data    Arraylist := Arraylist();
  begin
    for r in (select Dt.Company_Id,
                     cast(collect(to_number(to_char(Dt.Person_Id))) as Array_Number) Person_Ids
                from Hac_Dirty_Persons Dt
               group by Dt.Company_Id)
    loop
      v_Company := Fazo.Zip_Map('company_id', r.Company_Id);
      v_Company.Put('person_ids', r.Person_Ids);
    
      v_Data.Push(v_Company);
    end loop;
  
    b.Add_Final_Service(i_Class_Name => Hac_Pref.c_Acms_Final_Service_Name, i_Data => v_Data);
  
    delete Hac_Dirty_Persons;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Save_Device_Track
  (
    i_Server_Id        number,
    i_Device           Htt_Devices%rowtype,
    i_Person_Code      varchar2,
    i_Track_Time       timestamp with local time zone,
    i_Photo_Sha        varchar2 := null,
    i_Track_Type       varchar2 := Htt_Pref.c_Track_Type_Check,
    i_Person_Auth_Type varchar2 := Hac_Pref.c_Person_Auth_Type_Person_Code
  ) is
    v_Filial_Ids Array_Number;
    r_Track      Htt_Tracks%rowtype;
  begin
    r_Track.Company_Id  := i_Device.Company_Id;
    r_Track.Device_Id   := i_Device.Device_Id;
    r_Track.Location_Id := i_Device.Location_Id;
  
    if i_Person_Auth_Type = Hac_Pref.c_Person_Auth_Type_External_Code then
      r_Track.Person_Id := Hac_Util.Take_Person_Id_By_External_Code(i_Server_Id     => i_Server_Id,
                                                                    i_Company_Id    => i_Device.Company_Id,
                                                                    i_External_Code => i_Person_Code);
    elsif i_Person_Auth_Type = Hac_Pref.c_Person_Auth_Type_Pin then
      r_Track.Person_Id := Htt_Util.Person_Id(i_Company_Id => i_Device.Company_Id, --
                                              i_Pin        => i_Person_Code);
    else
      r_Track.Person_Id := Hac_Util.Take_Person_Id_By_Code(i_Server_Id   => i_Server_Id,
                                                           i_Company_Id  => i_Device.Company_Id,
                                                           i_Person_Code => i_Person_Code);
    end if;
  
    r_Track.Track_Type := i_Track_Type;
    r_Track.Mark_Type  := Htt_Pref.c_Mark_Type_Face;
    r_Track.Track_Time := i_Track_Time;
    r_Track.Is_Valid   := 'Y';
    r_Track.Photo_Sha  := i_Photo_Sha;
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    for j in 1 .. v_Filial_Ids.Count
    loop
      Ui_Context.Init_Migr(i_Company_Id   => i_Device.Company_Id,
                           i_User_Id      => Md_Pref.User_System(i_Device.Company_Id),
                           i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr,
                           i_Filial_Id    => v_Filial_Ids(j));
    
      r_Track.Filial_Id := v_Filial_Ids(j);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dss_Track
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Source_Type    varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    r_Server         Hac_Servers%rowtype;
    r_Device         Hac_Dss_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
    p_Error_Data     Hashmap;
  
    --------------------------------------------------
    Procedure Save_Notification_Message is
      pragma autonomous_transaction;
    begin
      z_Hac_Dss_Tracks.Insert_Try(i_Host_Url        => i_Host_Url,
                                  i_Person_Code     => Nvl(i_Person_Code,
                                                           Hac_Pref.c_Unknown_Person_Code),
                                  i_Device_Code     => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id),
                                  i_Track_Time      => i_Track_Time,
                                  i_Source_Type     => i_Source_Type,
                                  i_Photo_Url       => i_Photo_Url,
                                  i_Photo_Sha       => i_Photo_Sha,
                                  i_Event_Type_Code => i_Event_Type,
                                  i_Extra_Info      => i_Extra_Info);
      commit;
    
    exception
      when others then
        insert into Hac_Error_Log
          (Log_Id, Request_Params, Error_Message, Created_On)
        values
          (Hac_Error_Log_Sq.Nextval,
           i_Extra_Info,
           Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
           Dbms_Utility.Format_Error_Backtrace,
           Current_Timestamp);
      
        commit;
    end;
  begin
    Save_Notification_Message;
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Dahua),
                                       i_Event_Type_Code => i_Event_Type) then
      return;
    end if;
  
    r_Server := Hac_Util.Take_Server_By_Host_Url(i_Host_Url);
    r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => r_Server.Server_Id,
                                                    i_Device_Code => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id));
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Biruni_Route.Context_Begin;
    
      Save_Device_Track(i_Server_Id   => r_Server.Server_Id, --
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => Htt_Util.Convert_Timestamp(i_Date     => Hac_Util.Unix_Ts_To_Date(i_Track_Time),
                                                                    i_Timezone => Hac_Pref.c_Utc_Timezone_Code),
                        i_Photo_Sha   => i_Photo_Sha);
    
      Biruni_Route.Context_End;
    end loop;
    commit;
  exception
    when others then
      rollback;
      p_Error_Data := Fazo.Zip_Map('source',
                                   'dahua',
                                   'host_url',
                                   i_Host_Url,
                                   'person_code',
                                   i_Person_Code,
                                   'dss_channel_id',
                                   i_Dss_Channel_Id,
                                   'track_time',
                                   i_Track_Time);
    
      Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                     i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) || Chr(10) ||
                                         Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Ex_Event
  (
    i_Server_Id             number,
    i_Door_Code             varchar2,
    i_Person_Code           varchar2,
    i_Event_Time            varchar2,
    i_Event_Type            varchar2,
    i_Event_Code            varchar2,
    i_Check_In_And_Out_Type number,
    i_Event_Type_Code       number,
    i_Door_Name             varchar2,
    i_Src_Type              varchar2 := null,
    i_Status                number := null,
    i_Card_No               varchar2,
    i_Person_Name           varchar2 := null,
    i_Person_Type           varchar2 := null,
    i_Pic_Uri               varchar2,
    i_Pic_Sha               varchar2,
    i_Device_Time           varchar2 := null,
    i_Reader_Code           varchar2,
    i_Reader_Name           varchar2,
    i_Extra_Info            varchar2
  ) is
    pragma autonomous_transaction;
    c_Timestamp_Format varchar2(50) := 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM';
  
    --------------------------------------------------
    Function Event_Exists
    (
      i_Server_Id   number,
      i_Door_Code   varchar2,
      i_Person_Code varchar2,
      i_Event_Time  timestamp with local time zone
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hac_Hik_Ex_Events q
       where q.Server_Id = i_Server_Id
         and q.Door_Code = i_Door_Code
         and q.Person_Code = i_Person_Code
         and q.Event_Time = i_Event_Time;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Event_Exists(i_Server_Id   => i_Server_Id,
                    i_Door_Code   => i_Door_Code,
                    i_Person_Code => i_Person_Code,
                    i_Event_Time  => To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format)) then
      return;
    end if;
  
    insert into Hac_Hik_Ex_Events
      (Server_Id,
       Door_Code,
       Person_Code,
       Event_Time,
       Event_Type,
       Event_Code,
       Check_In_And_Out_Type,
       Event_Type_Code,
       Door_Name,
       Src_Type,
       Status,
       Card_No,
       Person_Name,
       Person_Type,
       Pic_Uri,
       Pic_Sha,
       Device_Time,
       Reader_Code,
       Reader_Name,
       Extra_Info,
       Created_On)
    values
      (i_Server_Id,
       i_Door_Code,
       i_Person_Code,
       To_Timestamp_Tz(i_Event_Time, c_Timestamp_Format),
       i_Event_Type,
       i_Event_Code,
       i_Check_In_And_Out_Type,
       i_Event_Type_Code,
       i_Door_Name,
       i_Src_Type,
       i_Status,
       i_Card_No,
       i_Person_Name,
       i_Person_Type,
       i_Pic_Uri,
       i_Pic_Sha,
       i_Device_Time,
       i_Reader_Code,
       i_Reader_Name,
       i_Extra_Info,
       Current_Timestamp);
    commit;
  
  exception
    when others then
      insert into Hac_Error_Log
        (Log_Id, Request_Params, Error_Message, Created_On)
      values
        (Hac_Error_Log_Sq.Nextval,
         i_Extra_Info,
         Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
         Dbms_Utility.Format_Error_Backtrace,
         Current_Timestamp);
    
      commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Track
  (
    i_Server_Id   number,
    i_Person_Code varchar2,
    i_Door_Code   varchar2,
    i_Track_Time  varchar2,
    i_Photo_Sha   varchar2,
    i_Track_Type  number
  ) is
    v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    r_Device         Hac_Hik_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
  begin
    r_Device := Hac_Util.Get_Hik_Device_By_Door_Code(i_Server_Id => i_Server_Id,
                                                     i_Door_Code => i_Door_Code);
  
    for r in (select *
                from Hac_Company_Devices Cd
               where Cd.Device_Id = r_Device.Device_Id)
    loop
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => r_Device.Serial_Number);
    
      Save_Device_Track(i_Server_Id   => i_Server_Id,
                        i_Device      => r_Htt_Device,
                        i_Person_Code => i_Person_Code,
                        i_Track_Time  => To_Timestamp_Tz(i_Track_Time,
                                                         'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM'),
                        i_Photo_Sha   => i_Photo_Sha,
                        i_Track_Type  => case i_Track_Type
                                           when Hac_Pref.c_Hik_Track_Type_Input then
                                            Htt_Pref.c_Track_Type_Input
                                           when Hac_Pref.c_Hik_Track_Type_Output then
                                            Htt_Pref.c_Track_Type_Output
                                           else
                                            Htt_Pref.c_Track_Type_Check
                                         end);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks
  (
    i_Host_Url    varchar2,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Person_Code varchar2(300);
    v_Photo_Url   varchar2(300);
    v_Channel_Id  varchar2(350);
    v_Photo_Sha   varchar2(64);
    v_Track_Time  number;
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      v_Channel_Id  := v_Track.r_Varchar2('channelId');
      v_Person_Code := v_Track.r_Varchar2('personId');
      v_Track_Time  := v_Track.r_Number('alarmTime');
      v_Photo_Url   := v_Track.o_Varchar2('captureImageUrl');
      v_Photo_Sha   := v_Track.o_Varchar2('photo_sha');
    
      Hac_Core.Save_Dss_Track(i_Host_Url       => i_Host_Url,
                              i_Person_Code    => v_Person_Code,
                              i_Dss_Channel_Id => v_Channel_Id,
                              i_Track_Time     => v_Track_Time,
                              i_Photo_Url      => v_Photo_Url,
                              i_Photo_Sha      => v_Photo_Sha,
                              i_Source_Type    => i_Source_Type,
                              i_Event_Type     => v_Track.o_Varchar2('alarmTypeId'),
                              i_Extra_Info     => v_Track.Json);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks
  (
    i_Server_Id   number,
    i_Source_Type varchar2,
    i_Tracks      Glist
  ) is
    v_Track Gmap;
  
    v_Door_Code       varchar2(1000 char);
    v_Event_Time      varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
  
    v_Hac_Device_Type_Id number := Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision);
  begin
    for j in 1 .. i_Tracks.Count
    loop
      v_Track := Gmap(i_Tracks.r_Gmap(j));
    
      begin
        v_Person_Code     := v_Track.r_Varchar2('personId');
        v_Door_Code       := v_Track.r_Varchar2('doorIndexCode');
        v_Event_Time      := v_Track.r_Varchar2('eventTime');
        v_Hik_Track_Type  := v_Track.r_Number('checkInAndOutType');
        v_Event_Type_Code := v_Track.r_Number('eventType');
      
        Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => i_Server_Id,
                                   i_Door_Code             => v_Door_Code,
                                   i_Person_Code           => v_Person_Code,
                                   i_Event_Time            => v_Event_Time,
                                   i_Event_Type            => i_Source_Type,
                                   i_Event_Code            => v_Track.r_Varchar2('eventId'),
                                   i_Check_In_And_Out_Type => v_Hik_Track_Type,
                                   i_Event_Type_Code       => v_Event_Type_Code,
                                   i_Door_Name             => v_Track.o_Varchar2('doorName'),
                                   i_Card_No               => v_Track.o_Varchar2('cardNo'),
                                   i_Person_Name           => v_Track.o_Varchar2('personName'),
                                   i_Person_Type           => v_Track.o_Varchar2('personType'),
                                   i_Pic_Uri               => v_Track.o_Varchar2('picUri'),
                                   i_Pic_Sha               => v_Track.o_Varchar2('photo_sha'),
                                   i_Device_Time           => v_Track.o_Varchar2('deviceTime'),
                                   i_Reader_Code           => v_Track.o_Varchar2('readerIndexCode'),
                                   i_Reader_Name           => v_Track.o_Varchar2('readerName'),
                                   i_Extra_Info            => v_Track.Json);
      
        continue when not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => v_Hac_Device_Type_Id,
                                                      i_Event_Type_Code => v_Event_Type_Code);
      
        Hac_Core.Save_Hik_Track(i_Server_Id   => i_Server_Id,
                                i_Person_Code => v_Person_Code,
                                i_Track_Time  => v_Event_Time,
                                i_Door_Code   => v_Door_Code,
                                i_Photo_Sha   => v_Track.o_Varchar2('photo_sha'),
                                i_Track_Type  => v_Hik_Track_Type);
      exception
        when others then
          Hac_Core.Save_Error_Log(i_Request_Params => v_Track.Json,
                                  i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                      Chr(10) || Dbms_Utility.Format_Error_Backtrace);
      end;
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Authenticate_Hik_Servlet
  (
    i_Token          varchar2,
    o_Server_Id      out number,
    o_Host_Url       out varchar2,
    o_Partner_Key    out varchar2,
    o_Partner_Secret out varchar2
  ) is
  begin
    select k.Server_Id, t.Host_Url, k.Partner_Key, k.Partner_Secret
      into o_Server_Id, o_Host_Url, o_Partner_Key, o_Partner_Secret
      from Hac_Hik_Servers k
      join Hac_Servers t
        on t.Server_Id = k.Server_Id
     where k.Token = i_Token;
  exception
    when No_Data_Found then
      Hac_Error.Raise_006(i_Token);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Image_Ignored
  (
    i_Device_Id      number,
    i_Device_Type_Id number,
    i_Serial_Number  varchar2
  ) return varchar2 Result_Cache is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hac_Company_Devices Cd
      join Htt_Devices q
        on q.Company_Id = Cd.Company_Id
       and q.Device_Type_Id = i_Device_Type_Id
       and q.Serial_Number = i_Serial_Number
     where Cd.Device_Id = i_Device_Id
       and q.Ignore_Images = 'N'
       and Rownum = 1;
  
    return 'N';
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Load_Device_Settings
  (
    i_Server_Id      varchar2,
    i_Door_Code      varchar2,
    o_Device_Exists  out varchar2,
    o_Tracks_Ignored out varchar2,
    o_Image_Ignored  out varchar2
  ) is
    r_Device         Hac_Hik_Devices%rowtype;
    v_Device_Type_Id number;
  begin
    r_Device := Hac_Util.Get_Hik_Device_By_Door_Code(i_Server_Id => i_Server_Id,
                                                     i_Door_Code => i_Door_Code);
  
    if r_Device.Serial_Number is null then
      o_Device_Exists  := 'N';
      o_Tracks_Ignored := 'Y';
      o_Image_Ignored  := 'Y';
    
      return;
    end if;
  
    v_Device_Type_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    o_Device_Exists  := 'Y';
    o_Tracks_Ignored := r_Device.Ignore_Tracks;
    o_Image_Ignored  := Image_Ignored(i_Device_Id      => r_Device.Device_Id,
                                      i_Device_Type_Id => v_Device_Type_Id,
                                      i_Serial_Number  => r_Device.Serial_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Load_Dahua_Device_Settings
  (
    i_Host_Url       varchar2,
    i_Dss_Channel_Id varchar2,
    o_Device_Exists  out varchar2,
    o_Image_Ignored  out varchar2
  ) is
    v_Device_Type_Id number;
    r_Server         Hac_Servers%rowtype;
    r_Device         Hac_Dss_Devices%rowtype;
  
  begin
    r_Server := Hac_Util.Take_Server_By_Host_Url(i_Host_Url);
    r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => r_Server.Server_Id,
                                                    i_Device_Code => Hac_Util.Extract_Device_Code(i_Dss_Channel_Id));
  
    if r_Device.Serial_Number is null then
      o_Device_Exists := 'N';
      o_Image_Ignored := 'Y';
    
      return;
    end if;
  
    v_Device_Type_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    o_Device_Exists := 'Y';
    o_Image_Ignored := Image_Ignored(i_Device_Id      => r_Device.Device_Id,
                                     i_Device_Type_Id => v_Device_Type_Id,
                                     i_Serial_Number  => r_Device.Serial_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Load_Listening_Device_Settings
  (
    i_Device_Token  varchar2,
    o_Device_Exists out varchar2,
    o_Image_Ignored out varchar2
  ) is
    r_Device         Hac_Hik_Listening_Devices%rowtype;
    r_Htt_Device     Htt_Devices%rowtype;
    v_Device_Type_Id number;
  begin
    r_Device := z_Hac_Hik_Listening_Devices.Take(i_Device_Token);
  
    if r_Device.Serial_Number is null then
      o_Device_Exists := 'N';
      o_Image_Ignored := 'Y';
    
      return;
    end if;
  
    o_Device_Exists := 'Y';
  
    v_Device_Type_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
  
    r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => r_Device.Company_Id,
                                                          i_Device_Type_Id => v_Device_Type_Id,
                                                          i_Serial_Number  => r_Device.Serial_Number);
  
    o_Image_Ignored := r_Htt_Device.Ignore_Images;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Event(i_Val Array_Varchar2) is
    v_Event_Data  Gmap;
    v_Person_Data Gmap;
    ---------- 
    v_Door_Code       varchar2(1000 char);
    v_Happen_Time     varchar2(100 char);
    v_Person_Code     varchar2(1000 char);
    v_Event_Type_Code number;
    v_Hik_Track_Type  number;
    ---------- 
    v_Host_Name  varchar2(1024 char);
    v_Server_Id  number;
    p_Error_Data Hashmap;
  begin
  
    v_Event_Data  := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Server_Id   := to_number(v_Event_Data.r_Varchar2('serverId'));
    v_Person_Data := v_Event_Data.r_Gmap('data');
    ---------- 
    v_Person_Code     := v_Person_Data.r_Varchar2('personId');
    v_Happen_Time     := v_Event_Data.r_Varchar2('happenTime');
    v_Door_Code       := v_Event_Data.r_Varchar2('srcIndex');
    v_Event_Type_Code := v_Event_Data.r_Number('eventType');
  
    v_Hik_Track_Type := v_Person_Data.r_Number('checkInAndOutType');
  
    Hac_Core.Save_Hik_Ex_Event(i_Server_Id             => v_Server_Id,
                               i_Door_Code             => v_Door_Code,
                               i_Person_Code           => v_Person_Code,
                               i_Event_Time            => v_Happen_Time,
                               i_Event_Type            => Hac_Pref.c_Hik_Event_Type_From_Notifications,
                               i_Event_Code            => v_Event_Data.r_Varchar2('eventId'),
                               i_Check_In_And_Out_Type => v_Hik_Track_Type,
                               i_Event_Type_Code       => v_Event_Type_Code,
                               i_Door_Name             => v_Event_Data.o_Varchar2('srcName'),
                               i_Src_Type              => v_Event_Data.o_Varchar2('srcType'),
                               i_Status                => v_Event_Data.o_Number('status'),
                               i_Card_No               => v_Person_Data.o_Varchar2('cardNo'),
                               i_Pic_Uri               => v_Person_Data.o_Varchar2('picUri'),
                               i_Pic_Sha               => v_Person_Data.o_Varchar2('picSha'),
                               i_Reader_Code           => v_Person_Data.o_Varchar2('readerIndexCode'),
                               i_Reader_Name           => v_Person_Data.o_Varchar2('readerName'),
                               i_Extra_Info            => v_Event_Data.Json);
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id  => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision),
                                       i_Event_Type_Code => v_Event_Type_Code) then
      return;
    end if;
  
    Hac_Core.Save_Hik_Track(i_Server_Id   => v_Server_Id,
                            i_Person_Code => v_Person_Code,
                            i_Track_Time  => v_Happen_Time,
                            i_Door_Code   => v_Door_Code,
                            i_Photo_Sha   => v_Person_Data.o_Varchar2('picSha'),
                            i_Track_Type  => v_Hik_Track_Type);
  exception
    when others then
      p_Error_Data := Fazo.Zip_Map('source',
                                   'hikvision',
                                   'host_name',
                                   v_Host_Name,
                                   'person_code',
                                   v_Person_Code,
                                   'door_code',
                                   v_Door_Code,
                                   'track_time',
                                   v_Happen_Time);
    
      Hac_Core.Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                              i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                  Chr(10) || Dbms_Utility.Format_Error_Backtrace);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Receive_Hik_Device_Listener_Event
  (
    i_Token   varchar2,
    i_Pic_Sha varchar2,
    i_Val     Array_Varchar2
  ) is
    v_Data       Gmap;
    v_Event_Data Gmap;
  
    v_Event_Type        varchar2(300 char);
    v_Event_Time        timestamp with local time zone;
    v_Person_Code       varchar2(300 char);
    v_Attendance_Status varchar2(300 char);
    v_Major_Event_Type  number;
    v_Sub_Event_Type    number;
  
    r_Device Hac_Hik_Listening_Devices%rowtype;
  
    p_Error_Data Hashmap;
  
    c_Timestamp_Format varchar2(50) := 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM';
  
    -------------------------------------------------- 
    Procedure Save_Hik_Device_Listener_Event
    (
      i_Device_Token      varchar2,
      i_Device_Code       varchar2,
      i_Mac_Address       varchar2,
      i_Event_Time        timestamp with local time zone,
      i_Person_Code       varchar2,
      i_Event_Type        varchar2,
      i_Major_Event_Type  varchar2,
      i_Sub_Event_Type    varchar2,
      i_Attendance_Status varchar2,
      i_Pic_Sha           varchar2,
      i_Extra_Info        varchar2
    ) is
      pragma autonomous_transaction;
    begin
      insert into Hac_Hik_Device_Listener_Events
        (Event_Id,
         Device_Token,
         Device_Code,
         Mac_Address,
         Event_Time,
         Person_Code,
         Event_Type,
         Major_Event_Type,
         Sub_Event_Type,
         Attendance_Status,
         Pic_Sha,
         Extra_Info,
         Created_On)
      values
        (Hac_Hik_Device_Events_Sq.Nextval,
         i_Device_Token,
         i_Device_Code,
         i_Mac_Address,
         i_Event_Time,
         i_Person_Code,
         i_Event_Type,
         i_Major_Event_Type,
         i_Sub_Event_Type,
         i_Attendance_Status,
         i_Pic_Sha,
         i_Extra_Info,
         Current_Timestamp);
      commit;
    
    exception
      when others then
        insert into Hac_Error_Log
          (Log_Id, Request_Params, Error_Message, Created_On)
        values
          (Hac_Error_Log_Sq.Nextval,
           i_Extra_Info,
           Dbms_Utility.Format_Error_Stack || Chr(13) || Chr(10) ||
           Dbms_Utility.Format_Error_Backtrace,
           Current_Timestamp);
      
        commit;
    end;
  
    --------------------------------------------------
    Procedure Save_Hik_Listener_Tracks
    (
      i_Device            Hac_Hik_Listening_Devices%rowtype,
      i_Event_Time        timestamp with local time zone,
      i_Person_Code       varchar2,
      i_Attendance_Status varchar2,
      i_Pic_Sha           varchar2
    ) is
      v_Device_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
      r_Device         Hac_Hik_Devices%rowtype;
      r_Htt_Device     Htt_Devices%rowtype;
    begin
      r_Device := Hac_Util.Take_Hik_Device_By_Serial_Number(i_Device.Serial_Number);
    
      r_Htt_Device := Htt_Util.Take_Device_By_Serial_Number(i_Company_Id     => i_Device.Company_Id,
                                                            i_Device_Type_Id => v_Device_Type_Id,
                                                            i_Serial_Number  => i_Device.Serial_Number);
    
      Save_Device_Track(i_Server_Id        => r_Device.Server_Id,
                        i_Device           => r_Htt_Device,
                        i_Person_Code      => i_Person_Code,
                        i_Track_Time       => i_Event_Time,
                        i_Photo_Sha        => i_Pic_Sha,
                        i_Person_Auth_Type => i_Device.Person_Auth_Type,
                        i_Track_Type       => case i_Attendance_Status
                                                when Hac_Pref.c_Attendance_Status_Input then
                                                 Htt_Pref.c_Track_Type_Input
                                                when Hac_Pref.c_Attendance_Status_Output then
                                                 Htt_Pref.c_Track_Type_Output
                                                else
                                                 Htt_Pref.c_Track_Type_Check
                                              end);
    end;
  
  begin
    r_Device := z_Hac_Hik_Listening_Devices.Load(i_Device_Token => i_Token);
  
    v_Data := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
  
    v_Event_Type := v_Data.r_Varchar2('eventType');
    v_Event_Time := To_Timestamp_Tz(v_Data.r_Varchar2('dateTime'), c_Timestamp_Format);
  
    v_Event_Data := Nvl(v_Data.o_Gmap(v_Event_Type), Gmap());
  
    v_Person_Code       := v_Event_Data.o_Varchar2('employeeNoString');
    v_Major_Event_Type  := v_Event_Data.o_Number('majorEventType');
    v_Sub_Event_Type    := v_Event_Data.o_Number('subEventType');
    v_Attendance_Status := v_Event_Data.o_Varchar2('attendanceStatus');
  
    Save_Hik_Device_Listener_Event(i_Device_Token      => r_Device.Device_Token,
                                   i_Device_Code       => v_Data.o_Varchar2('deviceID'),
                                   i_Mac_Address       => v_Data.o_Varchar2('macAddress'),
                                   i_Event_Time        => v_Event_Time,
                                   i_Person_Code       => v_Person_Code,
                                   i_Event_Type        => v_Event_Type,
                                   i_Major_Event_Type  => v_Major_Event_Type,
                                   i_Sub_Event_Type    => v_Sub_Event_Type,
                                   i_Attendance_Status => v_Attendance_Status,
                                   i_Pic_Sha           => i_Pic_Sha,
                                   i_Extra_Info        => v_Data.Json);
  
    if not Hac_Util.Is_Good_Event_Type(i_Device_Type_Id   => Hac_Util.Device_Type_Id(Hac_Pref.c_Pcode_Device_Type_Hikvision),
                                       i_Event_Type_Code  => v_Sub_Event_Type,
                                       i_Major_Event_Type => v_Major_Event_Type) then
      return;
    end if;
  
    Save_Hik_Listener_Tracks(i_Device            => r_Device,
                             i_Event_Time        => v_Event_Time,
                             i_Person_Code       => v_Person_Code,
                             i_Attendance_Status => v_Attendance_Status,
                             i_Pic_Sha           => i_Pic_Sha);
  exception
    when others then
      p_Error_Data := Fazo.Zip_Map('source',
                                   'hikvision_device',
                                   'device_token',
                                   i_Token,
                                   'person_code',
                                   v_Person_Code,
                                   'track_time',
                                   v_Event_Time);
    
      Hac_Core.Save_Error_Log(i_Request_Params => p_Error_Data.Json,
                              i_Error_Message  => Dbms_Utility.Format_Error_Stack() || Chr(13) ||
                                                  Chr(10) || Dbms_Utility.Format_Error_Backtrace);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Execute by Application servers
  -- Don't remove this procedure
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Mq_Notification
  (
    i_Host_Url       varchar2,
    i_Person_Code    varchar2,
    i_Dss_Channel_Id varchar2,
    i_Track_Time     varchar2,
    i_Photo_Url      varchar2,
    i_Photo_Sha      varchar2,
    i_Event_Type     varchar2,
    i_Extra_Info     varchar2
  ) is
  begin
    Dbms_Session.Reset_Package;
    Save_Dss_Track(i_Host_Url       => i_Host_Url,
                   i_Person_Code    => i_Person_Code,
                   i_Dss_Channel_Id => i_Dss_Channel_Id,
                   i_Track_Time     => i_Track_Time,
                   i_Photo_Url      => i_Photo_Url,
                   i_Photo_Sha      => i_Photo_Sha,
                   i_Source_Type    => Hac_Pref.c_Dss_Track_Source_Queue,
                   i_Event_Type     => i_Event_Type,
                   i_Extra_Info     => i_Extra_Info);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Acms_Device_Update
  (
    i_Server_Id number,
    i_Device_Id number,
    i_Device_Ip Option_Varchar2 := null,
    i_Ready     Option_Varchar2 := null,
    i_Status    Option_Varchar2 := null
  ) is
  begin
    z_Hac_Devices.Update_One(i_Server_Id => i_Server_Id,
                             i_Device_Id => i_Device_Id,
                             i_Device_Ip => i_Device_Ip,
                             i_Ready     => i_Ready,
                             i_Status    => i_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_File
  (
    i_Sha          varchar2,
    i_File_Size    varchar2,
    i_File_Name    varchar2,
    i_Content_Type varchar2,
    i_Store_Kind   varchar2
  ) is
  begin
    z_Biruni_Files.Insert_Try(i_Sha          => i_Sha,
                              i_File_Size    => i_File_Size,
                              i_Store_Kind   => i_Store_Kind,
                              i_File_Name    => i_File_Name,
                              i_Content_Type => i_Content_Type);
  end;

end Hac_Core;
/

create or replace package Hac_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Token varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007(i_Event_Type_Code number);
end Hac_Error;
/
create or replace package body Hac_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HAC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hac_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:only one primary attachment to is allowed to one device'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002 is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:device must have primary company attached to it'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:cannot delete primary attachment to company'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004 is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:synchronised company must have same server_id as target server_id'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005 is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:company not ready for work'),
          i_S1      => t('005:solution:provide person group code'),
          i_S2      => t('005:solution:provide department code'),
          i_S3      => t('005:solution:provide organization code'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Token varchar2) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:no server with provided token, token = $1', i_Token),
          i_S1      => t('006:solution:set new server token and resubscribe events'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007(i_Event_Type_Code number) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:unknown event type provided, event type code = $1',
                         i_Event_Type_Code));
  end;

end Hac_Error;
/

create or replace package Hac_Job is
  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Track_Load_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Face_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Fingerprint_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Card_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Dss_Device_Update_Response(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Hik_Device_Update_Response(i_Val Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Request(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Response(i_Input Array_Varchar2);
end Hac_Job;
/
create or replace package body Hac_Job is
  c_Start_Time constant date := Trunc(sysdate) - 2;
  c_End_Time   constant date := sysdate;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Temp_Tables is
    pragma autonomous_transaction;
  begin
    delete from Hac_Temp_Ex_Hik_Device_Infos;
    delete from Hac_Temp_Ex_Dss_Device_Infos;
    delete from Hac_Temp_Device_Infos;
  
    commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dahua_Track_Load_Request_Procedure(o_Output out Array_Varchar2) is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url varchar2,
      i_Username varchar2,
      i_Password varchar2
    ) return Gmap is
      v_Details      Gmap := Gmap();
      v_Auth_Details Gmap := Gmap();
    begin
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('method', Href_Pref.c_Http_Method_Post);
      v_Details.Put('api_uri', Hac_Pref.c_Tracks_Fetch_Uri);
      v_Details.Put('object_id', '');
      v_Details.Put('query_params', '');
      v_Details.Put('face_picture_sha', '');
    
      v_Auth_Details.Put('username', i_Username);
      v_Auth_Details.Put('password', i_Password);
    
      v_Details.Put('auth_details', v_Auth_Details);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map
    (
      i_Company_Id number,
      i_Server_Id  number,
      i_Start_Time date,
      i_End_Time   date
    ) return Gmap is
      v_Channel_Ids Array_Varchar2;
      v_Data        Gmap := Gmap();
    begin
      select p.Device_Code || Hac_Pref.c_Default_Channel_Id_Tail
        bulk collect
        into v_Channel_Ids
        from Hac_Company_Devices q
        join Hac_Dss_Devices p
          on p.Device_Id = q.Device_Id
       where q.Company_Id = i_Company_Id
         and p.Server_Id = i_Server_Id;
    
      v_Data.Val.Put('page', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      v_Data.Put('channelIds', v_Channel_Ids);
      v_Data.Put('startTime', Hac_Util.Date_To_Unix_Ts(i_Start_Time));
      v_Data.Put('endTime', Hac_Util.Date_To_Unix_Ts(i_End_Time));
    
      return v_Data;
    end;
  
  begin
    Clear_Temp_Tables;
  
    for Cmp in (select q.*,
                       Sv.Username,
                       Sv.Password,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = q.Server_Id) Host_Url
                  from Hac_Dss_Company_Servers q
                  join Hac_Dss_Servers Sv
                    on Sv.Server_Id = q.Server_Id
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Dss_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where p.Company_Id = q.Company_Id
                           and Dv.Server_Id = q.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url => Cmp.Host_Url,
                                         i_Username => Cmp.Username,
                                         i_Password => Cmp.Password);
      v_Data_Map   := Prepare_Data_Map(i_Company_Id => Cmp.Company_Id,
                                       i_Server_Id  => Cmp.Server_Id,
                                       i_Start_Time => c_Start_Time,
                                       i_End_Time   => c_End_Time);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('company_id', Cmp.Company_Id);
      v_Company_Data.Put('iterator_key', 'page');
      v_Company_Data.Put('tracks_key', 'pageData');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('dahua', v_Company_List);
    Result.Put('dahua_procedure', 'HAC_JOB.SAVE_DAHUA_TRACKS');
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Dahua_Tracks(i_Input Array_Varchar2) is
    v_Company Gmap := Gmap(Json_Object_t.Parse(Fazo.Make_Clob(i_Input)));
  begin
    Hac_Core.Save_Dahua_Tracks(i_Host_Url    => v_Company.r_Varchar2('host_url'),
                               i_Source_Type => Hac_Pref.c_Dss_Track_Source_Job,
                               i_Tracks      => v_Company.r_Glist('tracks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_Load_Request_Procedure
  (
    i_Event_Type number,
    o_Output     out Array_Varchar2
  ) is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    -------------------------------------------------- 
    Function Format_Date(i_Date date) return varchar2 is
    begin
      return to_char(i_Date, 'YYYY-MM-DD"T"HH24:MI:SS') || Substr(Tz_Offset(Sessiontimezone), 1, 6);
    end;
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url       varchar2,
      i_Partner_Key    varchar2,
      i_Partner_Secret varchar2
    ) return Gmap is
      v_Details Gmap := Gmap();
    begin
      v_Details.Put('partner_key', i_Partner_Key);
      v_Details.Put('partner_secret', i_Partner_Secret);
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('request_path', Hac_Pref.c_Hik_Request_Path_Get_Events);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map
    (
      i_Company_Id number,
      i_Server_Id  number,
      i_Event_Type number,
      i_Start_Time date,
      i_End_Time   date
    ) return Gmap is
      v_Door_Codes Array_Varchar2;
      v_Data       Gmap := Gmap();
    begin
      select p.Door_Code
        bulk collect
        into v_Door_Codes
        from Hac_Company_Devices q
        join Hac_Hik_Devices p
          on p.Device_Id = q.Device_Id
       where q.Company_Id = i_Company_Id
         and p.Server_Id = i_Server_Id;
    
      v_Data.Val.Put('pageNo', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      v_Data.Val.Put('eventType', i_Event_Type);
      v_Data.Put('doorIndexCodes', v_Door_Codes);
      v_Data.Put('startTime', Format_Date(i_Start_Time));
      v_Data.Put('endTime', Format_Date(i_End_Time));
    
      return v_Data;
    end;
  
  begin
    Clear_Temp_Tables;
  
    for Cmp in (select q.*,
                       Sv.Partner_Key,
                       Sv.Partner_Secret,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = q.Server_Id) Host_Url
                  from Hac_Hik_Company_Servers q
                  join Hac_Hik_Servers Sv
                    on Sv.Server_Id = q.Server_Id
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Hik_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where p.Company_Id = q.Company_Id
                           and Dv.Server_Id = q.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url       => Cmp.Host_Url,
                                         i_Partner_Key    => Cmp.Partner_Key,
                                         i_Partner_Secret => Cmp.Partner_Secret);
      v_Data_Map   := Prepare_Data_Map(i_Company_Id => Cmp.Company_Id,
                                       i_Server_Id  => Cmp.Server_Id,
                                       i_Event_Type => i_Event_Type,
                                       i_Start_Time => c_Start_Time,
                                       i_End_Time   => c_End_Time);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('company_id', Cmp.Company_Id);
      v_Company_Data.Put('iterator_key', 'pageNo');
      v_Company_Data.Put('tracks_key', 'list');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('hik', v_Company_List);
    Result.Put('hik_procedure', 'HAC_JOB.SAVE_HIK_TRACKS');
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Face_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Face,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Fingerprint_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Fingerprint,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hik_Track_By_Card_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Hik_Track_Load_Request_Procedure(i_Event_Type => Hac_Pref.c_Hik_Event_Code_By_Card,
                                     o_Output     => o_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Hik_Tracks(i_Input Array_Varchar2) is
    v_Company Gmap := Gmap(Json_Object_t.Parse(Fazo.Make_Clob(i_Input)));
  begin
    Hac_Core.Save_Hik_Tracks(i_Server_Id   => v_Company.r_Number('server_id'),
                             i_Source_Type => Hac_Pref.c_Hik_Event_Type_Loaded_By_Job,
                             i_Tracks      => v_Company.r_Glist('tracks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dss_Device_Update_Request return Gmap is
    v_Detail_Map   Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Gather_Query_Params return varchar2 is
      v_Param_Keys   Array_Varchar2;
      v_Delimiter    varchar2(1) := '&';
      v_Key          varchar2(100);
      v_Query_Params Gmap := Gmap();
      result         varchar2(4000);
    begin
      v_Query_Params.Put('page', Hac_Pref.c_Start_Page_Num);
      v_Query_Params.Put('pageSize', Hac_Pref.c_Default_Page_Size);
      v_Query_Params.Put('orderDirection', Hac_Pref.c_Descending_Order_Direction);
    
      v_Param_Keys := v_Query_Params.Keyset;
    
      for i in 1 .. v_Param_Keys.Count
      loop
        v_Key := v_Param_Keys(i);
      
        result := result || v_Key || '=' || v_Query_Params.r_Varchar2(v_Key);
        if i <> v_Param_Keys.Count then
          result := result || v_Delimiter;
        end if;
      end loop;
    
      return result;
    end;
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url varchar2,
      i_Username varchar2,
      i_Password varchar2
    ) return Gmap is
      v_Details      Gmap := Gmap();
      v_Auth_Details Gmap := Gmap();
    begin
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('method', Href_Pref.c_Http_Method_Get);
      v_Details.Put('api_uri', Hac_Pref.c_Device_Uri || Hac_Pref.c_Page_Uri);
      v_Details.Put('query_params', Gather_Query_Params);
    
      v_Auth_Details.Put('username', i_Username);
      v_Auth_Details.Put('password', i_Password);
    
      v_Details.Put('auth_details', v_Auth_Details);
    
      return v_Details;
    end;
  begin
    for Cmp in (select Sv.Server_Id,
                       Sv.Username,
                       Sv.Password,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = Sv.Server_Id) Host_Url
                  from Hac_Dss_Servers Sv
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Dss_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where Dv.Server_Id = Sv.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url => Cmp.Host_Url,
                                         i_Username => Cmp.Username,
                                         i_Password => Cmp.Password);
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', Gmap());
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('iterator_key', 'page');
      v_Company_Data.Put('device_key', 'pageData');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('dahua', v_Company_List);
    Result.Put('dahua_procedure', 'HAC_JOB.DSS_DEVICE_UPDATE_RESPONSE');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Dss_Device_Update_Response(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Device_List Glist;
    v_Device      Gmap;
    v_Server_Id   varchar2(20);
    r_Device      Hac_Dss_Devices%rowtype;
  begin
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Device_List := Nvl(v_Data.o_Glist('devices'), Glist());
    v_Server_Id   := v_Data.r_Varchar2('server_id');
  
    for i in 0 .. v_Device_List.Count - 1
    loop
      v_Device := Gmap(Json_Object_t(v_Device_List.Val.Get(i)));
    
      r_Device := Hac_Util.Take_Device_By_Device_Code(i_Server_Id   => v_Server_Id,
                                                      i_Device_Code => v_Device.r_Varchar2('deviceCode'));
    
      if r_Device.Device_Id is not null then
        z_Hac_Dss_Ex_Devices.Update_One(i_Server_Id   => v_Server_Id,
                                        i_Device_Code => v_Device.r_Varchar2('deviceCode'),
                                        i_Status      => Option_Varchar2(v_Device.r_Varchar2('status')));
        z_Hac_Temp_Ex_Dss_Device_Infos.Insert_One(i_Device_Code => v_Device.r_Varchar2('deviceCode'),
                                                  i_Server_Id   => v_Server_Id);
      
        z_Hac_Devices.Update_One(i_Device_Id => r_Device.Device_Id,
                                 i_Server_Id => v_Server_Id,
                                 i_Status    => Option_Varchar2(Hac_Util.Map_Dss_Device_Status(v_Device.r_Varchar2('status'))));
        z_Hac_Temp_Device_Infos.Insert_One(i_Device_Id => r_Device.Device_Id,
                                           i_Server_Id => v_Server_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Hik_Device_Update_Request return Gmap is
    v_Detail_Map   Gmap;
    v_Data_Map     Gmap;
    v_Company_Data Gmap;
    v_Company_List Glist := Glist();
    result         Gmap := Gmap();
  
    --------------------------------------------------
    Function Prepare_Detail_Map
    (
      i_Host_Url       varchar2,
      i_Partner_Key    varchar2,
      i_Partner_Secret varchar2
    ) return Gmap is
      v_Details Gmap := Gmap();
    begin
      v_Details.Put('partner_key', i_Partner_Key);
      v_Details.Put('partner_secret', i_Partner_Secret);
      v_Details.Put('host_url', i_Host_Url);
      v_Details.Put('request_path', Hac_Pref.c_Hik_Request_Path_Get_Devices);
    
      return v_Details;
    end;
  
    --------------------------------------------------
    Function Prepare_Data_Map return Gmap is
      v_Data Gmap := Gmap();
    begin
      v_Data.Val.Put('pageNo', Hac_Pref.c_Start_Page_Num);
      v_Data.Val.Put('pageSize', Hac_Pref.c_Default_Page_Size);
    
      return v_Data;
    end;
  begin
    for Cmp in (select Sv.Server_Id,
                       Sv.Partner_Key,
                       Sv.Partner_Secret,
                       (select Sr.Host_Url
                          from Hac_Servers Sr
                         where Sr.Server_Id = Sv.Server_Id) Host_Url
                  from Hac_Hik_Servers Sv
                 where exists (select 1
                          from Hac_Company_Devices p
                          join Hac_Hik_Devices Dv
                            on Dv.Device_Id = p.Device_Id
                         where Dv.Server_Id = Sv.Server_Id))
    loop
      v_Company_Data := Gmap();
    
      v_Detail_Map := Prepare_Detail_Map(i_Host_Url       => Cmp.Host_Url,
                                         i_Partner_Key    => Cmp.Partner_Key,
                                         i_Partner_Secret => Cmp.Partner_Secret);
      v_Data_Map   := Prepare_Data_Map;
    
      v_Company_Data.Put('detail', v_Detail_Map);
      v_Company_Data.Put('request_data', v_Data_Map);
      v_Company_Data.Put('host_url', Cmp.Host_Url);
      v_Company_Data.Put('server_id', Cmp.Server_Id);
      v_Company_Data.Put('iterator_key', 'pageNo');
      v_Company_Data.Put('device_key', 'list');
    
      v_Company_List.Push(v_Company_Data.Val);
    end loop;
  
    Result.Put('hik', v_Company_List);
    Result.Put('hik_procedure', 'HAC_JOB.HIK_DEVICE_UPDATE_RESPONSE');
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Hik_Device_Update_Response(i_Val Array_Varchar2) is
    v_Data        Gmap;
    v_Device_List Glist;
    v_Device      Gmap;
    v_Server_Id   varchar2(20);
    r_Device      Hac_Hik_Devices%rowtype;
  begin
    v_Data        := Gmap(Json_Object_t(Fazo.Make_Clob(i_Val)));
    v_Device_List := Nvl(v_Data.o_Glist('devices'), Glist());
    v_Server_Id   := v_Data.r_Varchar2('server_id');
  
    for i in 0 .. v_Device_List.Count - 1
    loop
      v_Device := Gmap(Json_Object_t(v_Device_List.Val.Get(i)));
    
      r_Device := Hac_Util.Take_Hik_Device_By_Device_Code(i_Server_Id   => v_Server_Id,
                                                          i_Device_Code => v_Device.r_Varchar2('acsDevIndexCode'));
    
      if r_Device.Device_Id is not null then
        z_Hac_Hik_Ex_Devices.Update_One(i_Device_Code => v_Device.r_Varchar2('acsDevIndexCode'),
                                        i_Server_Id   => v_Server_Id,
                                        i_Status      => Option_Varchar2(v_Device.r_Varchar2('status')));
        z_Hac_Temp_Ex_Hik_Device_Infos.Insert_One(i_Device_Code => v_Device.r_Varchar2('acsDevIndexCode'),
                                                  i_Server_Id   => v_Server_Id);
      
        z_Hac_Devices.Update_One(i_Device_Id => r_Device.Device_Id,
                                 i_Server_Id => v_Server_Id,
                                 i_Status    => Option_Varchar2(Hac_Util.Map_Hik_Device_Status(v_Device.r_Varchar2('status'))));
        z_Hac_Temp_Device_Infos.Insert_One(i_Device_Id => r_Device.Device_Id,
                                           i_Server_Id => v_Server_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Request(o_Output out Array_Varchar2) is
    v_Hik_Data Gmap := Hik_Device_Update_Request;
    v_Dss_Data Gmap := Dss_Device_Update_Request;
    result     Gmap := Gmap();
  begin
    Result.Put_All(v_Hik_Data);
    Result.Put_All(v_Dss_Data);
  
    o_Output := Fazo.Read_Clob(Result.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Status_Update
  (
    i_Company_Id        number,
    i_Hikvision_Type_Id number,
    i_Dahua_Type_Id     number,
    i_Terminal_Type_Id  number
  ) is
  begin
    Biruni_Route.Context_Begin;
    Ui_Auth.Logon_As_System(i_Company_Id);
  
    for Hik in (select Dev.Company_Id, Dev.Device_Id, Dc.Status
                  from Htt_Devices Dev
                  join Hac_Hik_Devices Hd
                    on Hd.Serial_Number = Dev.Serial_Number
                  join Hac_Devices Dc
                    on Dc.Server_Id = Hd.Server_Id
                   and Dc.Device_Id = Hd.Device_Id
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Hikvision_Type_Id)
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Hik.Company_Id,
                               i_Device_Id  => Hik.Device_Id,
                               i_Status     => Option_Varchar2(Hik.Status));
    end loop;
  
    for Hik in (select Dev.Company_Id, Dev.Device_Id
                  from Htt_Devices Dev
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Hikvision_Type_Id
                   and Dev.Status <> Htt_Pref.c_Device_Status_Unknown
                   and not exists
                 (select 1
                          from Hac_Hik_Devices Hd
                         where Hd.Serial_Number = Dev.Serial_Number
                           and exists (select 1
                                  from Hac_Company_Devices w
                                 where w.Company_Id = i_Company_Id
                                   and w.Device_Id = Hd.Device_Id)))
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Hik.Company_Id,
                               i_Device_Id  => Hik.Device_Id,
                               i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Unknown));
    end loop;
  
    for Dss in (select Dev.Company_Id, Dev.Device_Id, Dc.Status
                  from Htt_Devices Dev
                  join Hac_Dss_Devices Hd
                    on Hd.Serial_Number = Dev.Serial_Number
                  join Hac_Devices Dc
                    on Dc.Server_Id = Hd.Server_Id
                   and Dc.Device_Id = Hd.Device_Id
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Dahua_Type_Id)
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Dss.Company_Id,
                               i_Device_Id  => Dss.Device_Id,
                               i_Status     => Option_Varchar2(Dss.Status));
    end loop;
  
    for Dss in (select Dev.Company_Id, Dev.Device_Id
                  from Htt_Devices Dev
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Dahua_Type_Id
                   and Dev.Status <> Htt_Pref.c_Device_Status_Unknown
                   and not exists
                 (select 1
                          from Hac_Dss_Devices Hd
                         where Hd.Serial_Number = Dev.Serial_Number
                           and exists (select 1
                                  from Hac_Company_Devices w
                                 where w.Company_Id = i_Company_Id
                                   and w.Device_Id = Hd.Device_Id)))
    loop
      z_Htt_Devices.Update_One(i_Company_Id => Dss.Company_Id,
                               i_Device_Id  => Dss.Device_Id,
                               i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Unknown));
    end loop;
  
    for Ter in (select Dev.Company_Id,
                       Dev.Device_Id,
                       ((sysdate - Dev.Last_Seen_On) * 24 * 60) as Min_Diff
                  from Htt_Devices Dev
                 where Dev.Company_Id = i_Company_Id
                   and Dev.Device_Type_Id = i_Terminal_Type_Id)
    loop
      if Ter.Min_Diff > 2 then
        z_Htt_Devices.Update_One(i_Company_Id => Ter.Company_Id,
                                 i_Device_Id  => Ter.Device_Id,
                                 i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Offline));
      else
        z_Htt_Devices.Update_One(i_Company_Id => Ter.Company_Id,
                                 i_Device_Id  => Ter.Device_Id,
                                 i_Status     => Option_Varchar2(Htt_Pref.c_Device_Status_Online));
      end if;
    end loop;
  
    Biruni_Route.Context_End;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure All_Device_Status_Update_Response(i_Input Array_Varchar2) is
    v_Company_Ids       Array_Number;
    v_Hikvision_Type_Id number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dahua_Type_Id     number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    v_Terminal_Type_Id  number := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal);
  begin
    select q.Company_Id
      bulk collect
      into v_Company_Ids
      from Htt_Devices q
     where exists
     (select 1
              from Md_Companies w
             where w.Company_Id = q.Company_Id
               and w.State = 'A')
       and q.Device_Type_Id in (v_Hikvision_Type_Id, v_Dahua_Type_Id, v_Terminal_Type_Id)
     group by q.Company_Id;
  
    for Dev in (select q.Server_Id, q.Device_Code
                  from Hac_Hik_Ex_Devices q
                 where not exists (select 1
                          from Hac_Temp_Ex_Hik_Device_Infos w
                         where w.Server_Id = q.Server_Id
                           and w.Device_Code = q.Device_Code))
    loop
      z_Hac_Hik_Ex_Devices.Update_One(i_Server_Id   => Dev.Server_Id,
                                      i_Device_Code => Dev.Device_Code,
                                      i_Status      => Option_Varchar2(Hac_Pref.c_Hik_Device_Status_Unknown));
    end loop;
  
    for Dev in (select q.Server_Id, q.Device_Code
                  from Hac_Dss_Ex_Devices q
                 where not exists (select 1
                          from Hac_Temp_Ex_Dss_Device_Infos w
                         where w.Device_Code = q.Device_Code
                           and w.Server_Id = q.Server_Id))
    loop
      z_Hac_Dss_Ex_Devices.Update_One(i_Device_Code => Dev.Device_Code,
                                      i_Server_Id   => Dev.Server_Id,
                                      i_Status      => Option_Varchar2(Hac_Pref.c_Dss_Device_Status_Unknown));
    
    end loop;
  
    for Dev in (select *
                  from Hac_Devices q
                 where not exists (select 1
                          from Hac_Temp_Device_Infos w
                         where w.Device_Id = q.Device_Id
                           and w.Server_Id = q.Server_Id))
    loop
      z_Hac_Devices.Update_One(i_Device_Id => Dev.Device_Id,
                               i_Server_Id => Dev.Server_Id,
                               i_Status    => Option_Varchar2(Hac_Pref.c_Device_Status_Unknown));
    end loop;
  
    for i in 1 .. v_Company_Ids.Count
    loop
      Device_Status_Update(i_Company_Id        => v_Company_Ids(i),
                           i_Hikvision_Type_Id => v_Hikvision_Type_Id,
                           i_Dahua_Type_Id     => v_Dahua_Type_Id,
                           i_Terminal_Type_Id  => v_Terminal_Type_Id);
    end loop;
  
    Clear_Temp_Tables;
  end;

end Hac_Job;
/

create or replace package Hac_Pref is
  ----------------------------------------------------------------------------------------------------
  type Dss_Server_Rt is record(
    Acms     Hac_Servers%rowtype,
    Username varchar2(300 char),
    Password varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Dss_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Register_Code varchar2(300 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Server_Rt is record(
    Acms           Hac_Servers%rowtype,
    Partner_Key    varchar2(300 char),
    Partner_Secret varchar2(300 char),
    Token          varchar2(64 char));
  ----------------------------------------------------------------------------------------------------
  type Hik_Device_Rt is record(
    Company_Id    number,
    Acms          Hac_Devices%rowtype,
    Isup_Password varchar2(300 char),
    Ignore_Tracks varchar2(1),
    Event_Types   Array_Number);
  ----------------------------------------------------------------------------------------------------
  c_Acms_Final_Service_Name constant varchar2(100) := 'com.verifix.vhr.AcmsFinalService';
  ----------------------------------------------------------------------------------------------------
  -- Dahua integration preferences
  ----------------------------------------------------------------------------------------------------
  c_Dahua_Api_Service_Name        constant varchar2(100) := 'com.verifix.vhr.dahua.DahuaRuntimeService';
  c_Start_Page_Num                constant number := 1; -- used in get list requests
  c_Default_Page_Size             constant number := 500; -- used in get list requests, max number of items in list
  c_Ascending_Order_Direction     constant number := 0; -- used in get list requests
  c_Descending_Order_Direction    constant number := 1; -- used in get list requests
  c_Dahua_Gender_Neutral          constant number := 0;
  c_Person_Source_Management_List constant number := 0;
  c_Auth_Start_Time               constant number := 1615824000; -- unix timestamp in seconds, 01.01.2000 00:00:00
  c_Auth_End_Time                 constant number := 1931443199; -- unix timestamp in seconds, 01.01.2050 00:00:00
  ----------------------------------------------------------------------------------------------------
  -- DAHUA DEVICE CHANNEL CODE
  ---------------------------------------------------------------------------------------------------- 
  -- channel code consists of: 
  -- device_code + '$' + device_type + '$' + channel_sequence_val + '$' + unit_sequence_val
  -- by default device type is '7' (access_control)
  -- by default channel_sequence_val is '0' (only one)
  -- by default unit_sequence_val is '0' (only one)
  ---------------------------------------------------------------------------------------------------- 
  c_Default_Channel_Id_Tail constant varchar2(10) := '$7$0$0';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API METHODS
  ---------------------------------------------------------------------------------------------------- 
  c_Org_Tree_Uri     constant varchar2(50) := '/brms/api/v1.0/tree/deviceOrg';
  c_Person_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/person-group';
  c_Device_Uri       constant varchar2(50) := '/brms/api/v1.1/device';
  c_Door_Group_Uri   constant varchar2(50) := '/obms/api/v1.0/accessControl/doorGroup';
  c_Access_Group_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access-group';
  c_Person_Uri       constant varchar2(50) := '/obms/api/v1.1/acs/person';
  c_Tracks_Fetch_Uri constant varchar2(50) := '/obms/api/v1.1/acs/access/record/fetch/page';
  ----------------------------------------------------------------------------------------------------
  -- DAHUA API RESOURCE uris (are added to the api method uris)
  ----------------------------------------------------------------------------------------------------
  c_List_Uri                  constant varchar2(50) := '/list';
  c_Page_Uri                  constant varchar2(50) := '/page';
  c_Person_Access_Authorize   constant varchar2(50) := '/person/authorize';
  c_Person_Access_Deauthorize constant varchar2(50) := '/person/unauthorize';
  ----------------------------------------------------------------------------------------------------
  -- Dahua default role ids (are kept in DSS server)
  ----------------------------------------------------------------------------------------------------
  c_Superadmin_Role_Id constant number := 1;
  c_Admin_Role_Id      constant number := 2;
  ----------------------------------------------------------------------------------------------------
  -- Dahua default org code
  ----------------------------------------------------------------------------------------------------
  c_Default_Root_Org_Code constant varchar2(3) := '001';
  ----------------------------------------------------------------------------------------------------
  c_Utc_Timezone_Code constant varchar2(3) := 'UTC';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision integration preferences
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Api_Service_Name constant varchar2(100) := 'com.verifix.vhr.hikvision.HikvisionRuntimeService';
  c_Hik_Begin_Time       constant varchar2(50) := '2020-01-01T00:00:00+00:00';
  c_Hik_End_Time         constant varchar2(50) := '2037-12-31T23:59:59+00:00'; -- max allowed effective date
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision request paths
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Request_Path_Get_Events              constant varchar2(100 char) := '/artemis/api/acs/v1/door/events';
  c_Hik_Request_Path_Get_Access_Levels       constant varchar2(100 char) := '/artemis/api/acs/v1/privilege/group';
  c_Hik_Request_Path_Get_Devices             constant varchar2(100 char) := '/artemis/api/resource/v1/acsDevice/acsDeviceList';
  c_Hik_Request_Path_Get_Doors               constant varchar2(100 char) := '/artemis/api/resource/v1/acsDoor/acsDoorList';
  c_Hik_Request_Path_Get_Organizations       constant varchar2(100 char) := '/artemis/api/resource/v1/org/orgList';
  c_Hik_Request_Path_Get_Persons             constant varchar2(100 char) := '/artemis/api/resource/v1/person/personList';
  c_Hik_Request_Path_Get_Person_Photo        constant varchar2(100 char) := '/artemis/api/resource/v1/person/picture_data';
  c_Hik_Request_Path_Subscribe_To_Tracks     constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionByEventTypes';
  c_Hik_Request_Path_Unsubscribe_From_Tracks constant varchar2(100 char) := '/artemis/api/eventService/v1/eventUnSubscriptionByEventTypes';
  c_Hik_Request_Path_Subscriptions_List      constant varchar2(100 char) := '/artemis/api/eventService/v1/eventSubscriptionView';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Device_Status_Offline constant number := 2;
  c_Hik_Device_Status_Online  constant number := 1;
  c_Hik_Device_Status_Unknown constant number := 0;
  ----------------------------------------------------------------------------------------------------  
  -- Dahua device statuses
  ----------------------------------------------------------------------------------------------------  
  c_Dss_Device_Status_Offline constant number := 0;
  c_Dss_Device_Status_Online  constant number := 1;
  c_Dss_Device_Status_Unknown constant number := 2;
  ----------------------------------------------------------------------------------------------------
  -- device statuses
  ---------------------------------------------------------------------------------------------------- 
  c_Device_Status_Offline constant varchar2(1) := 'F';
  c_Device_Status_Online  constant varchar2(1) := 'O';
  c_Device_Status_Unknown constant varchar2(1) := 'U';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision door states
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Door_State_Remain_Open   constant varchar2(2) := 'RO';
  c_Hik_Door_State_Closed        constant varchar2(1) := 'C';
  c_Hik_Door_State_Open          constant varchar2(1) := 'O';
  c_Hik_Door_State_Remain_Closed constant varchar2(2) := 'RC';
  c_Hik_Door_State_Offline       constant varchar2(1) := 'F';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision access level types
  ----------------------------------------------------------------------------------------------------
  c_Hik_Access_Level_Type_Access_Control number := 1;
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event types (Verifix side)
  ----------------------------------------------------------------------------------------------------
  c_Hik_Event_Type_From_Notifications constant varchar2(1) := 'N';
  c_Hik_Event_Type_Manually_Retrieved constant varchar2(1) := 'M';
  c_Hik_Event_Type_Loaded_By_Job      constant varchar2(1) := 'J';
  ---------------------------------------------------------------------------------------------------- 
  -- Hikvision event type codes
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Code_By_Face        constant number := 196893;
  c_Hik_Event_Code_By_Fingerprint constant number := 200516;
  c_Hik_Event_Code_By_Card        constant number := 198914;
  ----------------------------------------------------------------------------------------------------
  -- Hikvision event receiver data
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Event_Receiver_Route_Uri        constant varchar2(100 char) := 'hik/event_receiver';
  c_Hik_Device_Event_Receiver_Route_Uri constant varchar2(100 char) := '/hik/device/event_receiver';
  ----------------------------------------------------------------------------------------------------
  -- device attach kind
  ----------------------------------------------------------------------------------------------------
  c_Device_Attach_Primary   constant varchar2(1) := 'P';
  c_Device_Attach_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- device types 
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Device_Type_Hikvision constant varchar2(20) := 'VHR:1';
  c_Pcode_Device_Type_Dahua     constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- DSS TRACK SOURCE
  ----------------------------------------------------------------------------------------------------
  c_Dss_Track_Source_Manual constant varchar2(1) := 'M';
  c_Dss_Track_Source_Queue  constant varchar2(1) := 'Q';
  c_Dss_Track_Source_Job    constant varchar2(1) := 'J';
  ----------------------------------------------------------------------------------------------------
  -- HIK TRACK TYPES
  ---------------------------------------------------------------------------------------------------- 
  c_Hik_Track_Type_Input  constant number := 1;
  c_Hik_Track_Type_Output constant number := 2;
  ----------------------------------------------------------------------------------------------------
  c_Unknown_Person_Code constant number := -1;
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Delimiter constant varchar2(1) := '#';
  ----------------------------------------------------------------------------------------------------
  -- person auth types
  ----------------------------------------------------------------------------------------------------
  c_Person_Auth_Type_Person_Code   constant varchar2(1) := 'C';
  c_Person_Auth_Type_External_Code constant varchar2(1) := 'E';
  c_Person_Auth_Type_Pin           constant varchar2(1) := 'P';
  ----------------------------------------------------------------------------------------------------
  -- Hik listening Device attendance statuses
  ----------------------------------------------------------------------------------------------------
  c_Attendance_Status_Input  constant varchar2(100) := 'checkIn';
  c_Attendance_Status_Output constant varchar2(100) := 'checkOut';
  ----------------------------------------------------------------------------------------------------
  c_Event_Type_Source_Dss        constant varchar2(1) := 'D';
  c_Event_Type_Source_Hikcentral constant varchar2(1) := 'H';
  c_Event_Type_Source_Hik_Device constant varchar2(1) := 'L';
  ----------------------------------------------------------------------------------------------------
  c_Accepted_Major_Event_Type constant number := 5;
end Hac_Pref;
/
create or replace package body Hac_Pref is
end Hac_Pref;
/

create or replace package Hes_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Request_Max_Days number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Error_Code    varchar2,
    i_Error_Message varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010;
end Hes_Error;
/
create or replace package body Hes_Error is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HES:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hes_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message: at least one of "gps determination" and "face recognition" must be enabled'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002 is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:qr code limit time must be less than 24 hours'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:Billz subject is empty. subject must be provided'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004 is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:Billz secret_key is empty. secret_key must be provided'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005 is
  begin
    Error(i_Code => '005', i_Message => t('005:message:Billz credentials are not provided'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Request_Max_Days number) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:request date period must be smaller than $1 days',
                         i_Request_Max_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Error_Code    varchar2,
    i_Error_Message varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:Billz API returned an error. code = $1, message = $2',
                         i_Error_Code,
                         i_Error_Message));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008 is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:Billz API returned neither a result nor an error'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009 is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:you do not have access to create/update request'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010 is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:you do not have access to create/update change'));
  end;

end Hes_Error;
/

create or replace package Hface_Error is
  ----------------------------------------------------------------------------------------------------
  Function Error_Map_003 return Hashmap;
  ----------------------------------------------------------------------------------------------------
  Function Error_Map_004 return Hashmap;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005;
end Hface_Error;
/
create or replace package body Hface_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HFACE:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hface_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Error_Map
  (
    i_Code      varchar2,
    i_Message   varchar2,
    i_Title     varchar2 := null,
    i_Solutions Array_Varchar2 := Array_Varchar2()
  ) return Hashmap is
    v_Map Hashmap;
  begin
    v_Map := Fazo.Zip_Map('code', --
                          Verifix_Settings.c_Hface_Error_Code || i_Code,
                          'message',
                          i_Message);
  
    v_Map.Put('title', Nvl(i_Title, t('title:error')));
  
    if i_Solutions.Count > 0 then
      v_Map.Put('solutions', i_Solutions);
    end if;
  
    return v_Map;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Error_Map_003 return Hashmap is
  begin
    return Error_Map(i_Code      => '003',
                     i_Message   => t('003:message:face recognition service couldnt recognize any faces in image'),
                     i_Title     => t('003:title:no face found'),
                     i_Solutions => Array_Varchar2(t('003:solution:try again with another image')));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Error_Map_004 return Hashmap is
  begin
    return Error_Map(i_Code    => '004',
                     i_Message => t('004:message:couldnt establish connection with face recognition service, try again later'),
                     i_Title   => t('004:title:connection failure'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code => '001', i_Message => t('001:message:recognition settings are not provided'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002 is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:duplicate prevention value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:face recognition service couldnt recognize any faces in image'),
          i_Title   => t('003:title:no face found'),
          i_S1      => t('003:solution:try again with another image'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004 is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:couldnt establish connection with face recognition service, try again later'),
          i_Title   => t('004:title:connection failure'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005 is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:duplicate prevention is enabled'),
          i_Title   => t('005:title:illegal action'));
  end;

end Hface_Error;
/

create or replace package Hide_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_003;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_004(i_Element_Name varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_005
  (
    i_Element_Name varchar2,
    i_Is_Before    boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Variable_Name varchar2);
end Hide_Error;
/
create or replace package body Hide_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('hide:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hide_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code => '001', i_Message => t('001:message:brackets are placed incorrectly'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002 is
  begin
    Error(i_Code => '002', i_Message => t('002:message:cannot be divided by zero'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:recursion exceeds the maximum number of steps'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_004(i_Element_Name varchar2) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:an arithmetic operation is omitted before the $1{element_name}',
                         i_Element_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_005
  (
    i_Element_Name varchar2,
    i_Is_Before    boolean := false
  ) is
    v_Message varchar2(500) := t('005:message:an variable is omitted after the $1{element_name}',
                                 i_Element_Name);
  begin
    if i_Is_Before then
      v_Message := t('005:message:an variable is omitted before the $1{element_name}',
                     i_Element_Name);
    end if;
  
    Error(i_Code => '005', i_Message => v_Message);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Variable_Name varchar2) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:there is no value for $1{variable_name} variable.',
                         i_Variable_Name));
  end;

end Hide_Error;
/

create or replace package Hide_Pref is
  ----------------------------------------------------------------------------------------------------
  type Element_Rt is record(
    Element_Name       varchar2(200),
    Element_Type       varchar2(1),
    Element_Precedence number);
  type Element_Nt is table of Element_Rt;

  ----------------------------------------------------------------------------------------------------
  type Global_Variable_Rt is record(
    name  varchar(200),
    value number);
  type Global_Variable_Nt is table of Global_Variable_Rt;

  ----------------------------------------------------------------------------------------------------
  type Expression_Rt is record(
    Syntax_Is_Valid            boolean,
    Expression_Elements        Element_Nt,
    Expression_Bracket_Indexes Array_Number,
    Global_Variable            Array_Varchar2);

  ---------------------------------------------------------------------------------------------------- 
  -- element type
  ----------------------------------------------------------------------------------------------------
  c_Element_Type_Arithmetic_Operator constant varchar2(1) := 'A';
  c_Element_Type_Bracket             constant varchar2(1) := 'B';
  c_Element_Type_Variable            constant varchar2(1) := 'V';
  ----------------------------------------------------------------------------------------------------
  c_Max_Recursion_Step_Count constant number := 25;

end Hide_Pref;
/
create or replace package body Hide_Pref is
end Hide_Pref;
/

create or replace package Hide_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Add_Global_Variable_Value
  (
    o_Global_Variable_Value in out nocopy Hide_Pref.Global_Variable_Nt,
    i_Name                  varchar2,
    i_Value                 number
  );
  ------------------------------------------------------------------------------------------------
  Function Parse_Expression(i_Expression varchar2) return Hide_Pref.Expression_Rt;
  ---------------------------------------------------------------------------------------------------- 
  Function Expression_Execute
  (
    i_Expression       varchar2,
    i_Global_Variables Hide_Pref.Global_Variable_Nt := Hide_Pref.Global_Variable_Nt()
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Global_Variables(i_Expression varchar2) return Array_Varchar2;
end Hide_Util;
/
create or replace package body Hide_Util is
  -------------------------------------------------- 
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('hide_UTIL:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  --------------------------------------------------
  Function Is_Number(p_String varchar2) return boolean is
    v_Num number;
  begin
    v_Num := to_number(p_String, '9999999999.99999');
    return true;
  exception
    when Value_Error then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Precedence_Operator(i_Operator varchar) return number is
  begin
    if i_Operator = '+' or i_Operator = '-' then
      return 1;
    elsif i_Operator = '*' or i_Operator = '/' then
      return 2;
    else
      return 0;
    end if;
  end;

  --------------------------------------------------
  Function Is_Operator(i_Identifier varchar2) return boolean is
  begin
    if i_Identifier member of Array_Varchar2('+', '-', '/', '*') then
      return true;
    end if;
  
    return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Element_Add
  (
    i_Elements     in out nocopy Hide_Pref.Element_Nt,
    i_Element_Name varchar2,
    i_Element_Type varchar2
  ) is
    v_Element Hide_Pref.Element_Rt;
  begin
    v_Element.Element_Name := i_Element_Name;
    v_Element.Element_Type := i_Element_Type;
  
    i_Elements.Extend();
    i_Elements(i_Elements.Count) := v_Element;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Add_Global_Variable_Value
  (
    o_Global_Variable_Value in out nocopy Hide_Pref.Global_Variable_Nt,
    i_Name                  varchar2,
    i_Value                 number
  ) is
    v_Variable Hide_Pref.Global_Variable_Rt;
  begin
    v_Variable.Name  := i_Name;
    v_Variable.Value := i_Value;
  
    o_Global_Variable_Value.Extend();
    o_Global_Variable_Value(o_Global_Variable_Value.Count) := v_Variable;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Is_Brackets(i_Element varchar2) return boolean is
  begin
    return i_Element = '(' or i_Element = ')';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Brackets_Index(i_Elements Hide_Pref.Element_Nt) return Array_Number is
    v_Stack           Array_Number := Array_Number();
    v_Bracket_Indexes Array_Number := Array_Number();
    v_Size            number := 0;
  begin
    v_Bracket_Indexes.Extend(i_Elements.Count);
    v_Stack.Extend(i_Elements.Count / 2);
  
    for i in 1 .. i_Elements.Count
    loop
      if i_Elements(i).Element_Name = '(' then
        v_Size := v_Size + 1;
        v_Stack(v_Size) := i;
      elsif i_Elements(i).Element_Name = ')' then
        if v_Size = 0 then
          Hide_Error.Raise_001;
        end if;
      
        v_Bracket_Indexes(v_Stack(v_Size)) := i;
        v_Size := v_Size - 1;
      end if;
    end loop;
  
    if v_Size > 0 then
      Hide_Error.Raise_001;
    end if;
  
    return v_Bracket_Indexes;
  end;

  Procedure Assert_Variable_Enabled(i_Variable_Name varchar2) is
    v_Variable_Parts Array_Varchar2;
  begin
    if Is_Number(i_Variable_Name) then
      return;
    end if;
  
    v_Variable_Parts := Fazo.Split(i_Variable_Name, ' ');
  
    if v_Variable_Parts.Count = 1 then
      return;
    end if;
  
    for i in 2 .. v_Variable_Parts.Count
    loop
      if Nvl(Length(v_Variable_Parts(i)), 0) > 0 then
        Hide_Error.Raise_004(v_Variable_Parts(i));
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Parse_Expression_Elements(i_Expression varchar2) return Hide_Pref.Element_Nt is
    v_Element    varchar2(200);
    v_Char       varchar2(1);
    v_Expression varchar2(500) := i_Expression;
    v_Elements   Hide_Pref.Element_Nt := Hide_Pref.Element_Nt();
  begin
    if i_Expression is null then
      return v_Elements;
    end if;
  
    if Substr(i_Expression, 0, 1) in ('+', '-') then
      v_Expression := '0' || i_Expression;
    end if;
  
    for i in 1 .. Length(v_Expression)
    loop
      v_Char := Substr(v_Expression, i, 1);
    
      if Is_Brackets(v_Char) then
        v_Element := trim(v_Element);
      
        if Nvl(Length(v_Element), 0) > 0 and v_Elements.Count > 0 and v_Elements(v_Elements.Count).Element_Name = ')' then
          Hide_Error.Raise_004(v_Element);
        end if;
      
        if (Nvl(Length(v_Element), 0) > 0 or
           v_Elements.Count > 0 and v_Elements(v_Elements.Count).Element_Name = ')') and
           v_Char = '(' then
          Hide_Error.Raise_004('(');
        end if;
      
        if not (Nvl(Length(v_Element), 0) > 0 or
            v_Elements.Count > 0 and v_Elements(v_Elements.Count).Element_Name = ')') and
           v_Char = ')' then
          Hide_Error.Raise_005(v_Elements(v_Elements.Count).Element_Name);
        end if;
      
        if v_Char = ')' and Nvl(Length(v_Element), 0) > 0 then
          Assert_Variable_Enabled(v_Element);
        
          Element_Add(i_Elements     => v_Elements,
                      i_Element_Name => v_Element,
                      i_Element_Type => Hide_Pref.c_Element_Type_Variable);
        
          v_Element := '';
        end if;
      
        Element_Add(i_Elements     => v_Elements,
                    i_Element_Name => v_Char,
                    i_Element_Type => Hide_Pref.c_Element_Type_Bracket);
      elsif Is_Operator(v_Char) then
        v_Element := trim(v_Element);
      
        if Nvl(Length(v_Element), 0) > 0 and v_Elements.Count > 0 and v_Elements(v_Elements.Count).Element_Name = ')' then
          Hide_Error.Raise_004(v_Element);
        end if;
      
        if Nvl(Length(v_Element), 0) = 0 and
           (v_Elements.Count = 0 or v_Elements(v_Elements.Count).Element_Name <> ')') then
          if not ((v_Elements.Count = 0 or v_Elements(v_Elements.Count).Element_Name = '(') and
              v_Char in ('+', '-')) then
            Hide_Error.Raise_005(i_Element_Name => v_Char, i_Is_Before => true);
          end if;
        else
        
          if Nvl(Length(v_Element), 0) > 0 then
            Assert_Variable_Enabled(v_Element);
          
            Element_Add(i_Elements     => v_Elements,
                        i_Element_Name => v_Element,
                        i_Element_Type => Hide_Pref.c_Element_Type_Variable);
          end if;
        end if;
      
        Element_Add(i_Elements     => v_Elements,
                    i_Element_Name => v_Char,
                    i_Element_Type => Hide_Pref.c_Element_Type_Arithmetic_Operator);
      
        v_Element := '';
      else
        v_Element := v_Element || v_Char;
      end if;
    end loop;
  
    v_Element := trim(v_Element);
  
    if Nvl(Length(v_Element), 0) > 0 then
      if Nvl(Length(v_Element), 0) > 0 and v_Elements.Count > 0 and v_Elements(v_Elements.Count).Element_Name = ')' then
        Hide_Error.Raise_004(v_Element);
      end if;
    
      Assert_Variable_Enabled(v_Element);
    
      Element_Add(i_Elements     => v_Elements,
                  i_Element_Name => v_Element,
                  i_Element_Type => Hide_Pref.c_Element_Type_Variable);
    end if;
  
    if v_Elements.Count > 0 and v_Elements(v_Elements.Count)
      .Element_Type = Hide_Pref.c_Element_Type_Arithmetic_Operator then
      Hide_Error.Raise_005(i_Element_Name => v_Elements(v_Elements.Count).Element_Name);
    end if;
  
    return v_Elements;
  end;

  --------------------------------------------------
  Function Execute_Operator
  (
    i_First_Argument  number,
    i_Second_Argument number,
    i_Operator        varchar2
  ) return number is
    v_Result number;
  begin
    case i_Operator
      when '+' then
        v_Result := i_First_Argument + i_Second_Argument;
      when '-' then
        v_Result := i_First_Argument - i_Second_Argument;
      when '*' then
        v_Result := i_First_Argument * i_Second_Argument;
      when '/' then
        if i_Second_Argument = 0 then
          b.Raise_Error(t('cannot be divided by zero'));
        else
          v_Result := i_First_Argument / i_Second_Argument;
        end if;
      else
        Dbms_Output.Put_Line('wrong operator: ' || i_Operator);
        return 0;
        b.Raise_Error(t('wrong argument was chosen'));
    end case;
  
    return v_Result;
  end;

  ------------------------------------------------------------------------------------------------
  Function Parse_Expression(i_Expression varchar2) return Hide_Pref.Expression_Rt is
    v_Expression          Hide_Pref.Expression_Rt;
    v_Expression_Elements Hide_Pref.Element_Nt;
    v_Global_Variables    Array_Varchar2 := Array_Varchar2();
  begin
    v_Expression_Elements                   := Parse_Expression_Elements(i_Expression);
    v_Expression.Expression_Elements        := v_Expression_Elements;
    v_Expression.Expression_Bracket_Indexes := Get_Brackets_Index(v_Expression.Expression_Elements);
  
    for i in 1 .. v_Expression_Elements.Count
    loop
      if v_Expression_Elements(i).Element_Type = Hide_Pref.c_Element_Type_Variable then
        if not Is_Number(v_Expression_Elements(i).Element_Name) then
          Fazo.Push(v_Global_Variables, v_Expression_Elements(i).Element_Name);
        end if;
      end if;
    end loop;
  
    v_Expression.Global_Variable := set(v_Global_Variables);
    v_Expression.Syntax_Is_Valid := true;
  
    return v_Expression;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Expression_Execute
  (
    i_Expression       varchar2,
    i_Global_Variables Hide_Pref.Global_Variable_Nt := Hide_Pref.Global_Variable_Nt()
  ) return number is
    v_Expression      Hide_Pref.Expression_Rt := Parse_Expression(i_Expression);
    v_Elements        Hide_Pref.Element_Nt := v_Expression.Expression_Elements;
    v_Bracket_Indexes Array_Number := v_Expression.Expression_Bracket_Indexes;
    v_Element_Values  Fazo.Number_Code_Aat;
  
    --------------------------------------------------
    Function Get_Element_Value(i_Element_Name varchar2) return number is
    begin
      if Is_Number(i_Element_Name) then
        return to_number(i_Element_Name, '9999999999.999999');
      end if;
    
      if not v_Element_Values.Exists(i_Element_Name) then
        b.Raise_Error('|' || i_Element_Name || '|');
      end if;
    
      return v_Element_Values(i_Element_Name);
    end;
  
    -------------------------------------------------- 
    Function Calc_Expression
    (
      i_Begin    number,
      i_End      number,
      i_Step_Cnt number := Hide_Pref.c_Max_Recursion_Step_Count
    ) return number;
  
    --------------------------------------------------
    Function Calculat_Same_Precedence
    (
      i_Begin    number,
      i_End      number,
      i_Step_Cnt number
    ) return number is
      v_Second_Argument number;
      v_Numerator       number := 1;
      v_Denominator     number := 1;
      v_Index           number;
      Is_Numerator      boolean := false;
    begin
      if i_Step_Cnt <= 0 then
        Hide_Error.Raise_003;
      end if;
    
      if i_Begin = i_End then
        return Get_Element_Value(v_Elements(i_Begin).Element_Name);
      end if;
    
      if Is_Brackets(v_Elements(i_Begin).Element_Name) then
        v_Numerator := Calc_Expression(i_Begin    => i_Begin + 1,
                                       i_End      => v_Bracket_Indexes(i_Begin) - 1,
                                       i_Step_Cnt => i_Step_Cnt - 1);
      
        v_Index := v_Bracket_Indexes(i_Begin) + 1;
      else
        v_Numerator := Get_Element_Value(v_Elements(i_Begin).Element_Name);
        v_Index     := i_Begin + 1;
      end if;
    
      while v_Index < i_End
      loop
        Is_Numerator := v_Elements(v_Index).Element_Name = '*';
      
        if Is_Brackets(v_Elements(v_Index + 1).Element_Name) then
        
          v_Second_Argument := Calc_Expression(i_Begin    => v_Index + 2,
                                               i_End      => v_Bracket_Indexes(v_Index + 1) - 1,
                                               i_Step_Cnt => i_Step_Cnt - 1);
        
          v_Index := v_Bracket_Indexes(v_Index + 1) + 1;
        else
          v_Second_Argument := Get_Element_Value(v_Elements(v_Index + 1).Element_Name);
          v_Index           := v_Index + 2;
        end if;
      
        if Is_Numerator then
          v_Numerator := v_Numerator * v_Second_Argument;
        else
          v_Denominator := v_Denominator * v_Second_Argument;
        end if;
      end loop;
    
      return Execute_Operator(i_First_Argument  => v_Numerator,
                              i_Second_Argument => v_Denominator,
                              i_Operator        => '/');
    end;
  
    --------------------------------------------------
    Function Parse_Next_Value
    (
      i_Begin    number,
      i_End      number,
      i_Index    in out number,
      i_Step_Cnt number
    ) return number is
      v_Parser number := i_Begin;
    begin
      while v_Parser <= i_End
      loop
        if Is_Brackets(v_Elements(v_Parser).Element_Name) then
          v_Parser := v_Bracket_Indexes(v_Parser) + 1;
        elsif v_Elements(v_Parser).Element_Type = Hide_Pref.c_Element_Type_Arithmetic_Operator then
          if Get_Precedence_Operator(v_Elements(v_Parser).Element_Name) = 1 then
            exit;
          else
            v_Parser := v_Parser + 1;
          end if;
        else
          v_Parser := v_Parser + 1;
        end if;
      end loop;
    
      i_Index := Least(v_Parser, i_End);
    
      return Calculat_Same_Precedence(i_Begin    => i_Begin,
                                      i_End      => v_Parser - 1,
                                      i_Step_Cnt => i_Step_Cnt);
    end;
  
    -------------------------------------------------- 
    Function Calc_Expression
    (
      i_Begin    number,
      i_End      number,
      i_Step_Cnt number := Hide_Pref.c_Max_Recursion_Step_Count
    ) return number is
      v_Summa           number := 0;
      v_Second_Argument number;
      v_Index           number := i_Begin;
      v_Is_Positive     boolean;
    begin
      if i_Step_Cnt <= 0 then
        Hide_Error.Raise_003;
      end if;
    
      if v_Elements(v_Index).Element_Name not in ('+', '-') then
        v_Summa := Parse_Next_Value(i_Begin    => v_Index,
                                    i_End      => i_End,
                                    i_Index    => v_Index,
                                    i_Step_Cnt => i_Step_Cnt);
      end if;
    
      while v_Index < i_End
      loop
        v_Is_Positive     := v_Elements(v_Index).Element_Name = '+';
        v_Second_Argument := Parse_Next_Value(i_Begin    => v_Index + 1,
                                              i_End      => i_End,
                                              i_Index    => v_Index,
                                              i_Step_Cnt => i_Step_Cnt);
      
        if v_Is_Positive then
          v_Summa := v_Summa + v_Second_Argument;
        else
          v_Summa := v_Summa - v_Second_Argument;
        end if;
      end loop;
    
      return v_Summa;
    end;
  begin
    for i in 1 .. i_Global_Variables.Count
    loop
      v_Element_Values(i_Global_Variables(i).Name) := i_Global_Variables(i).Value;
    end loop;
  
    for i in 1 .. v_Expression.Global_Variable.Count
    loop
      if not v_Element_Values.Exists(v_Expression.Global_Variable(i)) then
        Hide_Error.Raise_006(v_Expression.Global_Variable(i));
      end if;
    end loop;
  
    return Round(Calc_Expression(i_Begin => 1, i_End => v_Elements.Count), 6);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Global_Variables(i_Expression varchar2) return Array_Varchar2 is
  begin
    return Parse_Expression(i_Expression).Global_Variable;
  end;

end Hide_Util;
/

create or replace package Hlic_Core is
  -- License calculation module 
  -- License is given to hired employees
  -- and taken from them when they are dismissed 

  ----------------------------------------------------------------------------------------------------
  -- %usage Gives or Takes license from employees if they are currently working
  -- Should only be called from functions 
  -- that hire and fire employees <br>
  -- if employee works in several filials: 
  -- <ul> 
  --    <li> he doesn't gain additional licenses if he is hired in another filial</li>
  --    <li> he doesn't lose licenses if he is fired from one of filials</li>
  -- </ul>
  Procedure Revise_License_By_Dirty_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Ids  Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  -- %usage Uses kl_subscriptions table to check if license is available 
  -- %raises Hlic_Error.Raise_002 fired when company has expired license
  -- %param i_Company_Id       ID for that you want to check
  -- %param i_Subscription_End is date when you want to check license
  Procedure Check_Subscription
  (
    i_Company_Id       number,
    i_Subscription_End date
  );
  ----------------------------------------------------------------------------------------------------
  -- %usage updates subscription date in kl_subscriptions table  <br>
  -- searches latest date in current month ([current_date, last_day(current_date)]) from <b>kl_license_balances</b>
  -- uses kl_license_balances table rows for current month ([current_date, last_day(current_date)])
  -- to find latest date that doesn't require additional license <br>
  -- if latest date is before current_date 
  -- then subscription date is set to current_date - 1 <br>
  -- if latest date is equal to last_date in current_month (last_day(current_date))
  -- then subscription date is set to last date in next month 
  -- if next month doesn't require additional licenses <br>
  -- if latest date is in the remainder of current_month ([current_date, last_day(current_date)])
  -- then subsriotion date is set to latest date
  Procedure Update_Subscription_Date(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  -- %usage generates rows for Hlic_Required_Dates table starting from last generated date to i_last_gen_date
  -- doesn't generate any dates if interval is stoppped <br>
  -- if interval was not previouly generated 
  -- it generates dates starting from interval.start_date <br>
  -- also fills any holes in generation interval <br>
  -- fills cache for Hlic_Core.Run_Units_Revising <br>
  -- <b>Hlic_Core.Run_Units_Revising must be called after this function</b> <br>
  -- %param i_Interval_Id is primary key ID for Hlic_Required_Intervals   
  -- %param i_Last_Gen_Date is upper bound for date generation
  Procedure Generate_Required_Dates
  (
    i_Company_Id    number,
    i_Interval_Id   number,
    i_Last_Gen_Date date
  );
  ----------------------------------------------------------------------------------------------------
  -- %usage gives/takes license based for employees that are in cache for this function
  -- cache for this function is primarily filled by Hlic_Core.Generate_Required_Dates <br>
  -- other sources may appear in future <br>
  -- %raises Hlic_Error.Raise_001 fires when cache is empty (uninitialised)
  Procedure Run_Units_Revising(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  -- %usage calls Hlic_Core.Generate_Required_Dates and Hlic_Core.Update_Subscription_Date for each active company
  Procedure Generate;
end Hlic_Core;
/
create or replace package body Hlic_Core is
  ----------------------------------------------------------------------------------------------------
  c_Format constant varchar2(8) := 'yyyymmdd';
  ----------------------------------------------------------------------------------------------------
  g_Units       Matrix_Number;
  g_Unit_Indexs Fazo.Number_Code_Aat;
  ----------------------------------------------------------------------------------------------------
  Procedure Init_Units is
    v_Null Fazo.Number_Code_Aat;
  begin
    g_Units       := Matrix_Number();
    g_Unit_Indexs := v_Null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unit_Needs_To_Be_Revise
  (
    i_Person_Id   number,
    i_Revise_Date date
  ) is
    v_Key   varchar2(10) := to_char(i_Revise_Date, c_Format);
    v_Index number;
  begin
    if not g_Unit_Indexs.Exists(v_Key) then
      g_Units.Extend;
      g_Units(g_Units.Count) := Array_Number();
      g_Unit_Indexs(v_Key) := g_Units.Count;
    end if;
  
    v_Index := g_Unit_Indexs(v_Key);
  
    Fazo.Push(g_Units(v_Index), i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unit_Needs_To_Be_Mass_Revise
  (
    i_Person_Id    number,
    i_Revise_Dates Array_Date
  ) is
  begin
    for i in 1 .. i_Revise_Dates.Count
    loop
      Unit_Needs_To_Be_Revise(i_Person_Id   => i_Person_Id, --
                              i_Revise_Date => i_Revise_Dates(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Add_Required_Dates_By_Period
  (
    i_Interval Hlic_Required_Intervals%rowtype,
    i_Start    date,
    i_Finish   date
  ) is
    v_Start date := i_Start;
  begin
    while v_Start <= i_Finish
    loop
      z_Hlic_Required_Dates.Insert_One(i_Company_Id    => i_Interval.Company_Id,
                                       i_Filial_Id     => i_Interval.Filial_Id,
                                       i_Interval_Id   => i_Interval.Interval_Id,
                                       i_Required_Date => v_Start,
                                       i_Employee_Id   => i_Interval.Employee_Id,
                                       i_Staff_Id      => i_Interval.Staff_Id);
    
      Unit_Needs_To_Be_Revise(i_Person_Id   => i_Interval.Employee_Id, --
                              i_Revise_Date => v_Start);
    
      v_Start := v_Start + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Run_Units_Revising(i_Company_Id number) is
    v_Key         varchar2(10);
    v_Date        date;
    v_Index       number;
    v_Employee_Id number;
    v_Ids         Array_Number;
    r_Balance     Kl_License_Balances%rowtype;
    --------------------------------------------------
    Function Check_Return
    (
      i_Company_Id  number,
      i_Employee_Id number,
      i_Date        date
    ) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hlic_Required_Dates q
       where q.Company_Id = i_Company_Id
         and q.Employee_Id = i_Employee_Id
         and q.Required_Date = i_Date
         and Rownum = 1;
    
      return false;
    exception
      when No_Data_Found then
        return true;
    end;
  begin
    if g_Units is null then
      Hlic_Error.Raise_001;
    end if;
  
    v_Key := g_Unit_Indexs.First;
  
    while v_Key is not null
    loop
      v_Index := g_Unit_Indexs(v_Key);
      v_Date  := to_date(v_Key, c_Format);
      v_Ids   := g_Units(v_Index);
    
      r_Balance := Kl_Core.License_Balance_Load(i_Company_Id   => i_Company_Id,
                                                i_License_Code => Hlic_Pref.c_License_Code_Hrm_Base,
                                                i_Balance_Date => v_Date);
    
      for i in 1 .. v_Ids.Count
      loop
      
        v_Employee_Id := v_Ids(i);
      
        if Check_Return(i_Company_Id  => i_Company_Id, --
                        i_Employee_Id => v_Employee_Id,
                        i_Date        => v_Date) then
          -- return license part
          Kl_Core.Return_License(p_Balance   => r_Balance, --
                                 i_Holder_Id => v_Employee_Id);
        else
          -- take license part
          Kl_Core.Take_License(p_Balance   => r_Balance, --
                               i_Holder_Id => v_Employee_Id);
        end if;
      end loop;
    
      Kl_Core.Distribute_Remain_Licenses(r_Balance);
    
      v_Key := g_Unit_Indexs.Next(v_Key);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Interval_Insert_And_Generate(i_Staff Href_Staffs%rowtype) is
    result Hlic_Required_Intervals%rowtype;
  begin
    Result.Company_Id  := i_Staff.Company_Id;
    Result.Filial_Id   := i_Staff.Filial_Id;
    Result.Interval_Id := Hlic_Next.Interval_Id;
    Result.Staff_Id    := i_Staff.Staff_Id;
    Result.Employee_Id := i_Staff.Employee_Id;
    Result.Start_Date  := i_Staff.Hiring_Date;
    Result.Finish_Date := i_Staff.Dismissal_Date;
  
    if i_Staff.Dismissal_Date is null then
      Result.Status := Hlic_Pref.c_Interval_Status_Continue;
    else
      Result.Status := Hlic_Pref.c_Interval_Status_Stop;
    end if;
  
    z_Hlic_Required_Intervals.Save_Row(result);
  
    -- generate interval dates
    Add_Required_Dates_By_Period(i_Interval => result,
                                 i_Start    => Result.Start_Date,
                                 i_Finish   => Nvl(Result.Finish_Date,
                                                   Hlic_Util.Max_License_Generate_Date));
  end;
  ----------------------------------------------------------------------------------------------------
  Function Interval_Lock_Load
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return Hlic_Required_Intervals%rowtype is
    result Hlic_Required_Intervals%rowtype;
  begin
    select *
      into result
      from Hlic_Required_Intervals q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       for update;
  
    return result;
  
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Interval_Update
  (
    i_Staff    Href_Staffs%rowtype,
    i_Interval Hlic_Required_Intervals%rowtype
  ) is
    r_Interval      Hlic_Required_Intervals%rowtype := i_Interval;
    v_Max_Gen_Date  date := Hlic_Util.Max_License_Generate_Date;
    v_Last_Gen_Date date;
    v_Start         date;
    v_Finish        date;
    v_Revise_Dates  Array_Date;
  begin
    select max(q.Required_Date)
      into v_Last_Gen_Date
      from Hlic_Required_Dates q
     where q.Company_Id = i_Interval.Company_Id
       and q.Interval_Id = i_Interval.Interval_Id;
  
    v_Last_Gen_Date := Nvl(v_Last_Gen_Date, i_Interval.Start_Date - 1);
  
    -- insert new dates; left side  
    Add_Required_Dates_By_Period(i_Interval => i_Interval,
                                 i_Start    => i_Staff.Hiring_Date,
                                 i_Finish   => i_Interval.Start_Date - 1);
  
    -- insert new dates; right side
    Add_Required_Dates_By_Period(i_Interval => i_Interval,
                                 i_Start    => v_Last_Gen_Date + 1,
                                 i_Finish   => Nvl(i_Staff.Dismissal_Date, v_Max_Gen_Date));
    -- remove excesses dates; left side  
    v_Finish := i_Staff.Hiring_Date;
  
    delete Hlic_Required_Dates q
     where q.Company_Id = i_Interval.Company_Id
       and q.Interval_Id = i_Interval.Interval_Id
       and q.Required_Date < v_Finish
    returning q.Required_Date bulk collect into v_Revise_Dates;
  
    Unit_Needs_To_Be_Mass_Revise(i_Person_Id    => i_Interval.Employee_Id,
                                 i_Revise_Dates => v_Revise_Dates);
  
    -- remove excesses dates; right side      
    v_Start := Nvl(i_Staff.Dismissal_Date, v_Max_Gen_Date);
  
    delete Hlic_Required_Dates q
     where q.Company_Id = i_Interval.Company_Id
       and q.Interval_Id = i_Interval.Interval_Id
       and q.Required_Date > v_Start
    returning q.Required_Date bulk collect into v_Revise_Dates;
  
    Unit_Needs_To_Be_Mass_Revise(i_Person_Id    => i_Interval.Employee_Id,
                                 i_Revise_Dates => v_Revise_Dates);
  
    -- update interval  
    r_Interval.Start_Date  := i_Staff.Hiring_Date;
    r_Interval.Finish_Date := i_Staff.Dismissal_Date;
  
    if r_Interval.Finish_Date is null then
      r_Interval.Status := Hlic_Pref.c_Interval_Status_Continue;
    else
      r_Interval.Status := Hlic_Pref.c_Interval_Status_Stop;
    end if;
  
    z_Hlic_Required_Intervals.Save_Row(r_Interval);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Interval_Remove(i_Interval Hlic_Required_Intervals%rowtype) is
    v_Revise_Dates Array_Date;
  begin
    delete Hlic_Required_Dates q
     where q.Company_Id = i_Interval.Company_Id
       and q.Interval_Id = i_Interval.Interval_Id
    returning q.Required_Date bulk collect into v_Revise_Dates;
  
    Unit_Needs_To_Be_Mass_Revise(i_Person_Id    => i_Interval.Employee_Id,
                                 i_Revise_Dates => v_Revise_Dates);
  
    z_Hlic_Required_Intervals.Delete_One(i_Company_Id  => i_Interval.Company_Id,
                                         i_Interval_Id => i_Interval.Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Interval
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff    Href_Staffs%rowtype;
    r_Interval Hlic_Required_Intervals%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    -- this is when primary staff changes secondary and need to remove
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Secondary then
      r_Staff.State := 'P';
    end if;
  
    Kl_Core.License_Lock_Holder_Lock(i_Company_Id => i_Company_Id,
                                     i_Holder_Id  => r_Staff.Employee_Id);
  
    r_Interval := Interval_Lock_Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id);
  
    if r_Interval.Company_Id is null then
      if r_Staff.State = 'P' then
        return;
      end if;
    
      Interval_Insert_And_Generate(r_Staff);
    elsif r_Staff.State = 'P' then
      Interval_Remove(r_Interval);
    else
      Interval_Update(i_Staff => r_Staff, i_Interval => r_Interval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Subscription
  (
    i_Company_Id       number,
    i_Subscription_End date
  ) is
    v_Curr_Date        date := Trunc(Current_Date);
    v_Subscription_End date := Nvl(i_Subscription_End, Last_Day(v_Curr_Date));
    v_Available        number;
    v_Required         number;
  
    r_Subscription Kl_Subscriptions%rowtype;
  begin
    if Md_Util.License_Disabled(i_Company_Id) or i_Company_Id = Md_Pref.Company_Head then
      return;
    end if;
  
    r_Subscription := z_Kl_Subscriptions.Lock_Load(i_Company_Id   => i_Company_Id,
                                                   i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
  
    if r_Subscription.End_Date < v_Curr_Date then
      select min(p.Available_Amount), max(p.Required_Amount)
        into v_Available, v_Required
        from Kl_License_Balances p
       where p.Company_Id = i_Company_Id
         and p.License_Code = Hlic_Pref.c_License_Code_Hrm_Base
         and p.Balance_Date between v_Curr_Date and v_Subscription_End;
    
      Hlic_Error.Raise_002(v_Required - v_Available);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Subscription_Date(i_Company_Id number) is
    v_Curr_Date         date := Trunc(Current_Date);
    v_Subscription_Date date;
    v_Last_Date         date;
    v_Next_Last_Date    date;
    v_Subscribed        boolean := false;
    v_Cnt               number;
  begin
    v_Last_Date := Last_Day(v_Curr_Date);
  
    for r in (select *
                from Kl_License_Balances q
               where q.Company_Id = i_Company_Id
                 and q.License_Code = Hlic_Pref.c_License_Code_Hrm_Base
                 and q.Balance_Date between v_Curr_Date and v_Last_Date
               order by q.Balance_Date desc)
    loop
      if r.Available_Amount > 0 and not v_Subscribed then
        v_Subscribed        := true;
        v_Subscription_Date := r.Balance_Date;
      end if;
    
      if v_Subscribed and r.Required_Amount > 0 then
        v_Subscribed := false;
        exit;
      end if;
    end loop;
  
    if not v_Subscribed then
      v_Subscription_Date := v_Curr_Date - 1;
    elsif v_Subscription_Date = v_Last_Date then
      v_Next_Last_Date := Last_Day(v_Last_Date + 1);
    
      select count(1)
        into v_Cnt
        from Kl_License_Balances Lb
       where Lb.Company_Id = i_Company_Id
         and Lb.License_Code = Hlic_Pref.c_License_Code_Hrm_Base
         and Lb.Balance_Date between v_Last_Date + 1 and v_Next_Last_Date
         and Lb.Required_Amount = 0;
    
      if v_Cnt = v_Next_Last_Date - v_Last_Date then
        v_Subscription_Date := v_Next_Last_Date;
      end if;
    end if;
  
    z_Kl_Subscriptions.Save_One(i_Company_Id   => i_Company_Id,
                                i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr,
                                i_End_Date     => v_Subscription_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_License_By_Dirty_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Ids  Array_Number
  ) is
    v_Subscription_End date;
  begin
    return;
    Init_Units;
  
    for i in 1 .. i_Staff_Ids.Count
    loop
      Fix_Interval(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => i_Staff_Ids(i));
    end loop;
  
    Run_Units_Revising(i_Company_Id);
  
    v_Subscription_End := z_Kl_Subscriptions.Take(i_Company_Id => i_Company_Id, --
                          i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr).End_Date;
  
    Update_Subscription_Date(i_Company_Id);
  
    Check_Subscription(i_Company_Id, v_Subscription_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Generate_Required_Dates
  (
    i_Company_Id    number,
    i_Interval_Id   number,
    i_Last_Gen_Date date
  ) is
    r_Interval Hlic_Required_Intervals%rowtype;
    v_Start    date;
  begin
    r_Interval := z_Hlic_Required_Intervals.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Interval_Id => i_Interval_Id);
  
    if r_Interval.Status = Hlic_Pref.c_Interval_Status_Stop then
      return;
    end if;
  
    select max(q.Required_Date)
      into v_Start
      from Hlic_Required_Dates q
     where q.Company_Id = i_Company_Id
       and q.Interval_Id = i_Interval_Id;
  
    Add_Required_Dates_By_Period(i_Interval => r_Interval,
                                 i_Start    => Nvl(v_Start + 1, r_Interval.Start_Date),
                                 i_Finish   => i_Last_Gen_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Generate_Company(i_Company_Id number) is
    v_Date date := Hlic_Util.Max_License_Generate_Date;
  begin
    Biruni_Route.Context_Begin;
  
    Init_Units;
  
    for r in (select *
                from Hlic_Required_Intervals q
               where q.Company_Id = i_Company_Id
                 and q.Status = Hlic_Pref.c_Interval_Status_Continue
               order by q.Employee_Id)
    loop
      Kl_Core.License_Lock_Holder_Lock(i_Company_Id => i_Company_Id, --
                                       i_Holder_Id  => r.Employee_Id);
    
      Generate_Required_Dates(i_Company_Id    => i_Company_Id,
                              i_Interval_Id   => r.Interval_Id,
                              i_Last_Gen_Date => v_Date);
    end loop;
  
    Run_Units_Revising(i_Company_Id);
  
    Update_Subscription_Date(i_Company_Id);
  
    Biruni_Route.Context_End;
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Generate is
  begin
    return;
    for c in (select *
                from Md_Companies q
               where q.State = 'A'
               order by q.Company_Id)
    loop
      Generate_Company(c.Company_Id);
    end loop;
  end;

end Hlic_Core;
/

create or replace package Hlic_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Exceed_Amount number);
end Hlic_Error;
/
create or replace package body Hlic_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HLIC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hlic_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:units not initialized for run_units_revising'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Exceed_Amount number) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:required licenses exceeded available amount by $1{exceed_amount}',
                         i_Exceed_Amount),
          i_Title   => t('002:title:not enough licenses'),
          i_S1      => t('002:solution:buy additional licenses'));
  end;

end Hlic_Error;
/

create or replace package Hln_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Group_Save(i_Question_Group Hln_Question_Groups%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Group_Delete
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Question_Group_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Type_Save(i_Question_Type Hln_Question_Types%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Type_Delete
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Question_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Save(i_Question Hln_Pref.Question_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Question_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Exam_Save(i_Exam Hln_Pref.Exam_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Testing_Period_Change_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Save
  (
    i_Testing        Hln_Testings%rowtype,
    i_User_Id        number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Set_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Enter
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Testing_Return_Execute
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------         
  Procedure Testing_Pause
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Continue
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Return_Checking
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Finish
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Stop
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_User_Id        number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Add_Time
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Added_Time     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Set_Begin_Time
  (
    i_Company_Id              number,
    i_Filial_Id               number,
    i_Testing_Id              number,
    i_Begin_Time_Period_Begin number,
    i_Begin_Time_Period_End   number := null,
    i_Attestation_Id          number := null
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Testing_Start
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Testing_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_User_Id        number,
    i_Attestation_Id number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Save
  (
    i_Attestation Hln_Pref.Attestation_Rt,
    i_User_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Attestation_Id number,
    i_User_Id        number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Send_Answer
  (
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Testing_Id          number,
    i_Person_Id           number,
    i_Question_Id         number,
    i_Current_Question_No number,
    i_Question_Option_Ids Array_Number,
    i_Writing_Answer      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Check_Answer
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Testing_Id  number,
    i_Question_Id number,
    i_Correct     varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Mark_Question
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Testing_Id  number,
    i_Question_Id number,
    i_Person_Id   number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Training_Subject_Group_Save(i_Subject_Group Hln_Pref.Training_Subject_Group_Rt);
  ----------------------------------------------------------------------------------------------------   
  Procedure Trainig_Subject_Group_Delete
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Subject_Group_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Training_Subject_Save(i_Training_Subject Hln_Training_Subjects%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Training_Subject_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Subject_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Training_Save
  (
    i_Training Hln_Pref.Training_Rt,
    i_User_Id  number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Training_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_User_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assess_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Person_Id   number,
    i_Passed      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assess_Person_Subject
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Person_Id   number,
    i_Subject_Id  number,
    i_Passed      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Training_Set_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Training_Execute
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Training_Finish
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  );
end Hln_Api;
/
create or replace package body Hln_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HLN:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Group_Save(i_Question_Group Hln_Question_Groups%rowtype) is
    r_Data Hln_Question_Groups%rowtype;
  begin
    if z_Hln_Question_Groups.Exist_Lock(i_Company_Id        => i_Question_Group.Company_Id,
                                        i_Filial_Id         => i_Question_Group.Filial_Id,
                                        i_Question_Group_Id => i_Question_Group.Question_Group_Id,
                                        o_Row               => r_Data) and r_Data.Pcode is not null then
      if not Fazo.Equal(r_Data.Pcode, i_Question_Group.Pcode) then
        Hln_Error.Raise_004(r_Data.Name);
      end if;
    end if;
  
    z_Hln_Question_Groups.Save_Row(i_Question_Group);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Group_Delete
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Question_Group_Id number
  ) is
    r_Data Hln_Question_Groups%rowtype;
  begin
    if z_Hln_Question_Groups.Exist_Lock(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Question_Group_Id => i_Question_Group_Id,
                                        o_Row               => r_Data) and r_Data.Pcode is not null then
      Hln_Error.Raise_005(r_Data.Name);
    end if;
  
    z_Hln_Question_Groups.Delete_One(i_Company_Id        => i_Company_Id,
                                     i_Filial_Id         => i_Filial_Id,
                                     i_Question_Group_Id => i_Question_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Type_Save(i_Question_Type Hln_Question_Types%rowtype) is
    r_Question_Type Hln_Question_Types%rowtype;
  begin
    if z_Hln_Question_Types.Exist_Lock(i_Company_Id       => i_Question_Type.Company_Id,
                                       i_Filial_Id        => i_Question_Type.Filial_Id,
                                       i_Question_Type_Id => i_Question_Type.Question_Type_Id,
                                       o_Row              => r_Question_Type) and
       (r_Question_Type.Question_Group_Id != i_Question_Type.Question_Group_Id) then
      Hln_Error.Raise_006(i_Question_Type.Name);
    end if;
  
    z_Hln_Question_Types.Save_Row(i_Question_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Type_Delete
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Question_Type_Id number
  ) is
    r_Data Hln_Question_Types%rowtype;
  begin
    if z_Hln_Question_Types.Exist_Lock(i_Company_Id       => i_Company_Id,
                                       i_Filial_Id        => i_Filial_Id,
                                       i_Question_Type_Id => i_Question_Type_Id,
                                       o_Row              => r_Data) and r_Data.Pcode is not null then
      Hln_Error.Raise_007(r_Data.Name);
    end if;
  
    z_Hln_Question_Types.Delete_One(i_Company_Id       => i_Company_Id,
                                    i_Filial_Id        => i_Filial_Id,
                                    i_Question_Type_Id => i_Question_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Save(i_Question Hln_Pref.Question_Rt) is
    v_Option           Hln_Pref.Question_Option_Rt;
    v_Group_Bind       Hln_Pref.Question_Group_Rt;
    v_Option_Ids       Array_Number;
    v_Is_Correct_Count number := 0;
  begin
    z_Hln_Questions.Save_One(i_Company_Id   => i_Question.Company_Id,
                             i_Filial_Id    => i_Question.Filial_Id,
                             i_Question_Id  => i_Question.Question_Id,
                             i_Name         => i_Question.Name,
                             i_Answer_Type  => i_Question.Answer_Type,
                             i_Code         => i_Question.Code,
                             i_State        => i_Question.State,
                             i_Writing_Hint => i_Question.Writing_Hint);
  
    -- question group bind
    delete from Hln_Question_Group_Binds Gb
     where Gb.Company_Id = i_Question.Company_Id
       and Gb.Filial_Id = i_Question.Filial_Id
       and Gb.Question_Id = i_Question.Question_Id;
  
    for i in 1 .. i_Question.Group_Binds.Count
    loop
      v_Group_Bind := i_Question.Group_Binds(i);
    
      if v_Group_Bind.Question_Type_Id is not null then
        z_Hln_Question_Group_Binds.Insert_One(i_Company_Id        => i_Question.Company_Id,
                                              i_Filial_Id         => i_Question.Filial_Id,
                                              i_Question_Id       => i_Question.Question_Id,
                                              i_Question_Group_Id => v_Group_Bind.Question_Group_Id,
                                              i_Question_Type_Id  => v_Group_Bind.Question_Type_Id);
      
      end if;
    end loop;
  
    Hln_Util.Assert_Required_Groups(i_Company_Id  => i_Question.Company_Id,
                                    i_Filial_Id   => i_Question.Filial_Id,
                                    i_Question_Id => i_Question.Question_Id);
  
    -- question files
    for i in 1 .. i_Question.Files.Count
    loop
      z_Hln_Question_Files.Save_One(i_Company_Id  => i_Question.Company_Id,
                                    i_Filial_Id   => i_Question.Filial_Id,
                                    i_Question_Id => i_Question.Question_Id,
                                    i_File_Sha    => i_Question.Files(i),
                                    i_Order_No    => i + 1);
    end loop;
  
    for r in (select *
                from Hln_Question_Files t
               where t.Company_Id = i_Question.Company_Id
                 and t.Filial_Id = i_Question.Filial_Id
                 and t.Question_Id = i_Question.Question_Id
                 and t.File_Sha not member of i_Question.Files)
    loop
      z_Hln_Question_Files.Delete_One(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Question_Id => r.Question_Id,
                                      i_File_Sha    => r.File_Sha);
    end loop;
  
    -- question options
    v_Option_Ids := Array_Number();
  
    if i_Question.Answer_Type = Hln_Pref.c_Answer_Type_Single or
       i_Question.Answer_Type = Hln_Pref.c_Answer_Type_Multiple then
      v_Option_Ids.Extend(i_Question.Options.Count);
    
      if i_Question.Options.Count < 2 then
        Hln_Error.Raise_008(i_Question.Question_Id);
      end if;
    
      for i in 1 .. i_Question.Options.Count
      loop
        v_Option := i_Question.Options(i);
        v_Option_Ids(i) := v_Option.Question_Option_Id;
      
        if v_Option.Is_Correct = 'Y' then
          v_Is_Correct_Count := v_Is_Correct_Count + 1;
        end if;
      
        z_Hln_Question_Options.Save_One(i_Company_Id         => i_Question.Company_Id,
                                        i_Filial_Id          => i_Question.Filial_Id,
                                        i_Question_Option_Id => v_Option.Question_Option_Id,
                                        i_Name               => v_Option.Name,
                                        i_File_Sha           => v_Option.File_Sha,
                                        i_Question_Id        => i_Question.Question_Id,
                                        i_Is_Correct         => v_Option.Is_Correct,
                                        i_Order_No           => v_Option.Order_No);
      end loop;
    
      if v_Is_Correct_Count = 0 then
        Hln_Error.Raise_009(i_Question.Question_Id);
      elsif i_Question.Answer_Type = Hln_Pref.c_Answer_Type_Single and v_Is_Correct_Count != 1 then
        Hln_Error.Raise_010(i_Question.Question_Id);
      end if;
    end if;
  
    for r in (select *
                from Hln_Question_Options t
               where t.Company_Id = i_Question.Company_Id
                 and t.Filial_Id = i_Question.Filial_Id
                 and t.Question_Id = i_Question.Question_Id
                 and t.Question_Option_Id not member of v_Option_Ids)
    loop
      z_Hln_Question_Options.Delete_One(i_Company_Id         => r.Company_Id,
                                        i_Filial_Id          => r.Filial_Id,
                                        i_Question_Option_Id => r.Question_Option_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Question_Id number
  ) is
  begin
    z_Hln_Questions.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Question_Id => i_Question_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Exam_Save(i_Exam Hln_Pref.Exam_Rt) is
    r_Exam         Hln_Exams%rowtype;
    v_Question     Hln_Pref.Exam_Question_Rt;
    v_Pattern      Hln_Pref.Exam_Pattern_Rt;
    v_Type         Hln_Pref.Question_Group_Rt;
    v_Question_Ids Array_Number := Array_Number();
    v_Pattern_Ids  Array_Number := Array_Number();
    v_Sum_Quantity number;
    v_Exists       boolean := true;
  begin
    if not z_Hln_Exams.Exist_Lock(i_Company_Id => i_Exam.Company_Id,
                                  i_Filial_Id  => i_Exam.Filial_Id,
                                  i_Exam_Id    => i_Exam.Exam_Id,
                                  o_Row        => r_Exam) then
      r_Exam.Company_Id := i_Exam.Company_Id;
      r_Exam.Filial_Id  := i_Exam.Filial_Id;
      r_Exam.Exam_Id    := i_Exam.Exam_Id;
    
      v_Exists := false;
    end if;
  
    if v_Exists and r_Exam.For_Recruitment = 'Y' and i_Exam.For_Recruitment = 'N' then
      Hln_Error.Raise_061(i_Exam.Name);
    end if;
  
    if i_Exam.For_Recruitment = 'Y' then
      if i_Exam.Pick_Kind = Hln_Pref.c_Exam_Pick_Kind_Auto then
        Hln_Error.Raise_057(i_Exam.Name);
      end if;
    
      Hln_Util.Validate_Exam_Questions(i_Company_Id => i_Exam.Company_Id,
                                       i_Filial_Id  => i_Exam.Filial_Id,
                                       i_Exam_Name  => i_Exam.Name,
                                       i_Question   => i_Exam.Exam_Question);
    end if;
  
    r_Exam.Name                := i_Exam.Name;
    r_Exam.Pick_Kind           := i_Exam.Pick_Kind;
    r_Exam.Duration            := i_Exam.Duration;
    r_Exam.Passing_Percentage  := i_Exam.Passing_Percentage;
    r_Exam.Question_Count      := i_Exam.Question_Count;
    r_Exam.Randomize_Questions := i_Exam.Randomize_Questions;
    r_Exam.Randomize_Options   := i_Exam.Randomize_Options;
    r_Exam.For_Recruitment     := i_Exam.For_Recruitment;
    r_Exam.State               := i_Exam.State;
  
    if r_Exam.Passing_Percentage is not null then
      r_Exam.Passing_Score := Ceil(r_Exam.Passing_Percentage * r_Exam.Question_Count / 100);
    else
      r_Exam.Passing_Score := i_Exam.Passing_Score;
    end if;
  
    if v_Exists then
      z_Hln_Exams.Update_Row(r_Exam);
    else
      z_Hln_Exams.Insert_Row(r_Exam);
    end if;
  
    -- on manual pick kind exam contains manual question
    -- on auto pick contains only patterns
    if r_Exam.Pick_Kind = Hln_Pref.c_Exam_Pick_Kind_Manual then
      if r_Exam.Question_Count > i_Exam.Exam_Question.Count then
        Hln_Error.Raise_011(i_Exam_Question_Count => i_Exam.Exam_Question.Count,
                            i_Question_Count      => r_Exam.Question_Count);
      end if;
    
      v_Question_Ids.Extend(i_Exam.Exam_Question.Count);
    
      for i in 1 .. i_Exam.Exam_Question.Count
      loop
        v_Question := i_Exam.Exam_Question(i);
        v_Question_Ids(i) := v_Question.Question_Id;
      
        z_Hln_Exam_Manual_Questions.Save_One(i_Company_Id  => r_Exam.Company_Id,
                                             i_Filial_Id   => r_Exam.Filial_Id,
                                             i_Exam_Id     => r_Exam.Exam_Id,
                                             i_Question_Id => v_Question.Question_Id,
                                             i_Order_No    => v_Question.Order_No);
      end loop;
    else
      v_Pattern_Ids.Extend(i_Exam.Exam_Pattern.Count);
    
      for i in 1 .. i_Exam.Exam_Pattern.Count
      loop
        v_Pattern := i_Exam.Exam_Pattern(i);
        v_Pattern_Ids(i) := v_Pattern.Pattern_Id;
      
        z_Hln_Exam_Patterns.Save_One(i_Company_Id               => r_Exam.Company_Id,
                                     i_Filial_Id                => r_Exam.Filial_Id,
                                     i_Pattern_Id               => v_Pattern.Pattern_Id,
                                     i_Exam_Id                  => r_Exam.Exam_Id,
                                     i_Quantity                 => v_Pattern.Quantity,
                                     i_Has_Writing_Question     => v_Pattern.Has_Writing_Question,
                                     i_Max_Cnt_Writing_Question => v_Pattern.Max_Cnt_Writing_Question,
                                     i_Order_No                 => v_Pattern.Order_No);
      
        delete from Hln_Pattern_Question_Types Pqt
         where Pqt.Company_Id = r_Exam.Company_Id
           and Pqt.Filial_Id = r_Exam.Filial_Id
           and Pqt.Pattern_Id = v_Pattern.Pattern_Id;
      
        for j in 1 .. v_Pattern.Question_Types.Count
        loop
          v_Type := v_Pattern.Question_Types(j);
        
          z_Hln_Pattern_Question_Types.Save_One(i_Company_Id        => r_Exam.Company_Id,
                                                i_Filial_Id         => r_Exam.Filial_Id,
                                                i_Pattern_Id        => v_Pattern.Pattern_Id,
                                                i_Question_Type_Id  => v_Type.Question_Type_Id,
                                                i_Question_Group_Id => v_Type.Question_Group_Id);
        end loop;
      
        v_Sum_Quantity := v_Sum_Quantity + v_Pattern.Quantity;
      end loop;
    
      if v_Sum_Quantity <> r_Exam.Question_Count then
        Hln_Error.Raise_012(i_Sum_Quantity        => v_Sum_Quantity,
                            i_Exam_Question_Count => r_Exam.Question_Count);
      end if;
    end if;
  
    -- delete manual questions, patterns
    for r in (select *
                from Hln_Exam_Manual_Questions q
               where q.Company_Id = r_Exam.Company_Id
                 and q.Filial_Id = r_Exam.Filial_Id
                 and q.Exam_Id = r_Exam.Exam_Id
                 and q.Question_Id not member of v_Question_Ids)
    loop
      z_Hln_Exam_Manual_Questions.Delete_One(i_Company_Id  => r.Company_Id,
                                             i_Filial_Id   => r.Filial_Id,
                                             i_Exam_Id     => r.Exam_Id,
                                             i_Question_Id => r.Question_Id);
    end loop;
  
    for r in (select *
                from Hln_Exam_Patterns q
               where q.Company_Id = r_Exam.Company_Id
                 and q.Filial_Id = r_Exam.Filial_Id
                 and q.Exam_Id = r_Exam.Exam_Id
                 and q.Pattern_Id not member of v_Pattern_Ids)
    loop
      z_Hln_Exam_Patterns.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Filial_Id  => r.Filial_Id,
                                     i_Pattern_Id => r.Pattern_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Id    number
  ) is
  begin
    z_Hln_Exams.Delete_One(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Exam_Id    => i_Exam_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Testing
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Attestation_Id number,
    i_Testing_Id     number
  ) is
    v_Attestation_Id number;
  begin
    if i_Attestation_Id is not null then
      z_Hln_Attestations.Lock_Only(i_Company_Id     => i_Company_Id,
                                   i_Filial_Id      => i_Filial_Id,
                                   i_Attestation_Id => i_Attestation_Id);
      z_Hln_Attestation_Testings.Lock_Only(i_Company_Id     => i_Company_Id,
                                           i_Filial_Id      => i_Filial_Id,
                                           i_Attestation_Id => i_Attestation_Id,
                                           i_Testing_Id     => i_Testing_Id);
    else
      v_Attestation_Id := Hln_Util.Get_Attestation_Id(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Testing_Id => i_Testing_Id);
    
      if v_Attestation_Id is not null then
        Hln_Error.Raise_013(i_Testing_Number     => z_Hln_Testings.Load(i_Company_Id => i_Company_Id, --
                                                    i_Filial_Id => i_Filial_Id, --
                                                    i_Testing_Id => i_Testing_Id).Testing_Number,
                            i_Attestation_Number => z_Hln_Attestations.Load(i_Company_Id => i_Company_Id, --
                                                    i_Filial_Id => i_Filial_Id, --
                                                    i_Attestation_Id => v_Attestation_Id).Attestation_Number);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------        
  Procedure Testing_Question_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number,
    i_Exam_Id    number
  ) is
    r_Exam                Hln_Exams%rowtype;
    r_Testing_Question    Hln_Testing_Questions%rowtype;
    r_Question_Option     Hln_Testing_Question_Options%rowtype;
    v_Question_Ids        Array_Number;
    v_Question_Option_Ids Array_Number;
  begin
    r_Exam := z_Hln_Exams.Lock_Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Exam_Id    => i_Exam_Id);
  
    delete from Hln_Testing_Questions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Testing_Id = i_Testing_Id;
  
    r_Testing_Question.Company_Id := i_Company_Id;
    r_Testing_Question.Filial_Id  := i_Filial_Id;
    r_Testing_Question.Testing_Id := i_Testing_Id;
  
    r_Question_Option.Company_Id := i_Company_Id;
    r_Question_Option.Filial_Id  := i_Filial_Id;
    r_Question_Option.Testing_Id := i_Testing_Id;
  
    if r_Exam.Pick_Kind = Hln_Pref.c_Exam_Pick_Kind_Manual then
      select Mq.Question_Id
        bulk collect
        into v_Question_Ids
        from Hln_Exam_Manual_Questions Mq
       where Mq.Company_Id = r_Exam.Company_Id
         and Mq.Filial_Id = r_Exam.Filial_Id
         and Mq.Exam_Id = r_Exam.Exam_Id
       order by Mq.Order_No;
    
      if r_Exam.Randomize_Questions = 'Y' then
        v_Question_Ids := Hln_Util.Randomizer_Array(v_Question_Ids);
      end if;
    else
      v_Question_Ids := Hln_Core.Gen_Exam_Questions(i_Company_Id => r_Testing_Question.Company_Id,
                                                    i_Filial_Id  => r_Testing_Question.Filial_Id,
                                                    i_Exam_Id    => r_Exam.Exam_Id);
    end if;
  
    for i in 1 .. r_Exam.Question_Count
    loop
      r_Testing_Question.Question_Id := v_Question_Ids(i);
      r_Testing_Question.Order_No    := i;
    
      z_Hln_Testing_Questions.Save_Row(r_Testing_Question);
    
      --option save
      r_Question_Option.Question_Id := r_Testing_Question.Question_Id;
    
      select q.Question_Option_Id
        bulk collect
        into v_Question_Option_Ids
        from Hln_Question_Options q
       where q.Company_Id = r_Testing_Question.Company_Id
         and q.Filial_Id = r_Testing_Question.Filial_Id
         and q.Question_Id = r_Testing_Question.Question_Id
       order by q.Order_No;
    
      if r_Exam.Randomize_Options = 'Y' then
        v_Question_Option_Ids := Hln_Util.Randomizer_Array(v_Question_Option_Ids);
      end if;
    
      for j in 1 .. v_Question_Option_Ids.Count
      loop
        r_Question_Option.Question_Option_Id := v_Question_Option_Ids(j);
        r_Question_Option.Order_No           := j;
      
        z_Hln_Testing_Question_Options.Save_Row(r_Question_Option);
      end loop;
    end loop;
  end;

  -------------------------------------------------- 
  Procedure Send_Notification
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Ids Array_Number,
    i_Title      varchar2
  ) is
  begin
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => i_Title,
                                i_Person_Ids => i_Person_Ids);
  end;

  -------------------------------------------------- 
  Procedure Send_Notification
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number,
    i_Person_Id  number,
    i_Title      varchar2
  ) is
  begin
    if i_User_Id <> i_Person_Id then
      Send_Notification(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Title      => i_Title,
                        i_Person_Ids => Array_Number(i_Person_Id));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Testing_Period_Change_Setting_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Hln_Error.Raise_053;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Hln_Pref.c_Testing_Period_Change_Setting,
                           i_Value      => i_Value);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Save
  (
    i_Testing        Hln_Testings%rowtype,
    i_User_Id        number,
    i_Attestation_Id number := null
  ) is
    v_Exists            boolean;
    v_Period_Setting_On varchar2(1) := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Testing.Company_Id,
                                                                                   i_Filial_Id  => i_Testing.Filial_Id);
    v_Is_Period_On      boolean := v_Period_Setting_On = 'Y';
    r_Testing           Hln_Testings%rowtype;
    r_Exam              Hln_Exams%rowtype;
    r_Old_Testing       Hln_Testings%rowtype;
    t_Participant       varchar2(50) := Hln_Util.t_Person_Kind(Hln_Pref.c_Person_Kind_Participant);
    t_Examiner          varchar2(50) := Hln_Util.t_Person_Kind(Hln_Pref.c_Person_Kind_Examiner);
    t_Testing           varchar2(50) := Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Testing);
  begin
    if i_Testing.Person_Id = i_Testing.Examiner_Id then
      Hln_Error.Raise_014(i_Testing.Testing_Id);
    end if;
  
    if z_Hln_Testings.Exist_Lock(i_Company_Id => i_Testing.Company_Id,
                                 i_Filial_Id  => i_Testing.Filial_Id,
                                 i_Testing_Id => i_Testing.Testing_Id,
                                 o_Row        => r_Testing) then
      if r_Testing.Status <> Hln_Pref.c_Testing_Status_New then
        Hln_Error.Raise_015(i_Testing_Number => r_Testing.Testing_Number,
                            i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
      end if;
    
      Assert_Testing(i_Company_Id     => i_Testing.Company_Id,
                     i_Filial_Id      => i_Testing.Filial_Id,
                     i_Attestation_Id => i_Attestation_Id,
                     i_Testing_Id     => i_Testing.Testing_Id);
    
      v_Exists      := true;
      r_Old_Testing := r_Testing;
    else
      r_Testing.Company_Id := i_Testing.Company_Id;
      r_Testing.Filial_Id  := i_Testing.Filial_Id;
      r_Testing.Testing_Id := i_Testing.Testing_Id;
      r_Testing.Passed     := Hln_Pref.c_Passed_Indeterminate;
      r_Testing.Status     := Hln_Pref.c_Testing_Status_New;
    
      v_Exists := false;
    end if;
  
    r_Testing.Exam_Id                 := i_Testing.Exam_Id;
    r_Testing.Person_Id               := i_Testing.Person_Id;
    r_Testing.Examiner_Id             := i_Testing.Examiner_Id;
    r_Testing.Testing_Number          := i_Testing.Testing_Number;
    r_Testing.Testing_Date            := i_Testing.Testing_Date;
    r_Testing.Begin_Time_Period_Begin := i_Testing.Begin_Time_Period_Begin;
    r_Testing.Begin_Time_Period_End   := i_Testing.Begin_Time_Period_End;
    r_Testing.End_Time                := null;
    r_Testing.Fact_Begin_Time         := null;
    r_Testing.Fact_End_Time           := null;
    r_Testing.Pause_Time              := null;
    r_Testing.Current_Question_No     := null;
    r_Testing.Correct_Questions_Count := null;
    r_Testing.Note                    := i_Testing.Note;
  
    r_Exam := z_Hln_Exams.Lock_Load(i_Company_Id => r_Testing.Company_Id,
                                    i_Filial_Id  => r_Testing.Filial_Id,
                                    i_Exam_Id    => r_Testing.Exam_Id);
  
    if v_Is_Period_On and r_Testing.Begin_Time_Period_Begin > r_Testing.Begin_Time_Period_End then
      Hln_Error.Raise_055(i_Testing_Number => r_Testing.Testing_Number,
                          i_Period_Begin   => r_Testing.Begin_Time_Period_Begin,
                          i_Period_End     => r_Testing.Begin_Time_Period_End);
    end if;
  
    if not v_Is_Period_On then
      r_Testing.End_Time := r_Testing.Begin_Time_Period_Begin +
                            Numtodsinterval(r_Exam.Duration, 'minute');
    end if;
  
    if v_Exists then
      z_Hln_Testings.Update_Row(r_Testing);
    
      if r_Old_Testing.Person_Id <> r_Testing.Person_Id then
        Send_Notification(i_Company_Id => r_Old_Testing.Company_Id,
                          i_Filial_Id  => r_Old_Testing.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Old_Testing.Person_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Old_Testing.Testing_Number,
                                                                                i_Begin_Time    => r_Old_Testing.Begin_Time_Period_Begin,
                                                                                i_End_Time      => r_Old_Testing.Begin_Time_Period_End,
                                                                                i_Is_Period     => v_Period_Setting_On,
                                                                                i_Action_Kind   => t_Testing));
      
        Send_Notification(i_Company_Id => r_Testing.Company_Id,
                          i_Filial_Id  => r_Testing.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Testing.Person_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Participant,
                                                                                i_Action_Number => r_Testing.Testing_Number,
                                                                                i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                                i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                                i_Is_Period     => v_Period_Setting_On,
                                                                                i_Action_Kind   => t_Testing));
      else
        if r_Old_Testing.Testing_Number <> r_Testing.Testing_Number or --
           r_Old_Testing.Begin_Time_Period_Begin <> r_Testing.Begin_Time_Period_Begin or --
           r_Old_Testing.Begin_Time_Period_End <> r_Testing.Begin_Time_Period_End then
          Send_Notification(i_Company_Id => r_Testing.Company_Id,
                            i_Filial_Id  => r_Testing.Filial_Id,
                            i_User_Id    => i_User_Id,
                            i_Person_Id  => r_Testing.Person_Id,
                            i_Title      => Hln_Util.t_Notification_Action_Update(i_Action_Number => r_Testing.Testing_Number,
                                                                                  i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                                  i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                                  i_Is_Period     => v_Period_Setting_On,
                                                                                  i_Action_Kind   => t_Testing));
        end if;
      end if;
    
      if i_Attestation_Id is null then
        if r_Old_Testing.Examiner_Id <> r_Testing.Examiner_Id then
          Send_Notification(i_Company_Id => r_Old_Testing.Company_Id,
                            i_Filial_Id  => r_Old_Testing.Filial_Id,
                            i_User_Id    => i_User_Id,
                            i_Person_Id  => r_Old_Testing.Examiner_Id,
                            i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Old_Testing.Testing_Number,
                                                                                  i_Begin_Time    => r_Old_Testing.Begin_Time_Period_Begin,
                                                                                  i_End_Time      => r_Old_Testing.Begin_Time_Period_End,
                                                                                  i_Is_Period     => v_Period_Setting_On,
                                                                                  i_Action_Kind   => t_Testing));
        
          Send_Notification(i_Company_Id => r_Testing.Company_Id,
                            i_Filial_Id  => r_Testing.Filial_Id,
                            i_User_Id    => i_User_Id,
                            i_Person_Id  => r_Testing.Examiner_Id,
                            i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Examiner,
                                                                                  i_Action_Number => r_Testing.Testing_Number,
                                                                                  i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                                  i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                                  i_Is_Period     => v_Period_Setting_On,
                                                                                  i_Action_Kind   => t_Testing));
        else
          if r_Old_Testing.Testing_Number <> r_Testing.Testing_Number or --
             r_Old_Testing.Begin_Time_Period_Begin <> r_Testing.Begin_Time_Period_Begin or --
             r_Old_Testing.Begin_Time_Period_End <> r_Testing.Begin_Time_Period_End then
            Send_Notification(i_Company_Id => r_Testing.Company_Id,
                              i_Filial_Id  => r_Testing.Filial_Id,
                              i_User_Id    => i_User_Id,
                              i_Person_Id  => r_Testing.Examiner_Id,
                              i_Title      => Hln_Util.t_Notification_Action_Update(i_Action_Number => r_Testing.Testing_Number,
                                                                                    i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                                    i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                                    i_Is_Period     => v_Period_Setting_On,
                                                                                    i_Action_Kind   => t_Testing));
          end if;
        end if;
      end if;
    else
      if r_Testing.Testing_Number is null then
        r_Testing.Testing_Number := Md_Core.Gen_Number(i_Company_Id => r_Testing.Company_Id,
                                                       i_Filial_Id  => r_Testing.Filial_Id,
                                                       i_Table      => Zt.Hln_Testings,
                                                       i_Column     => z.Testing_Number);
      end if;
    
      z_Hln_Testings.Insert_Row(r_Testing);
    
      Send_Notification(i_Company_Id => r_Testing.Company_Id,
                        i_Filial_Id  => r_Testing.Filial_Id,
                        i_User_Id    => i_User_Id,
                        i_Person_Id  => r_Testing.Person_Id,
                        i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Participant,
                                                                              i_Action_Number => r_Testing.Testing_Number,
                                                                              i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                              i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                              i_Is_Period     => v_Period_Setting_On,
                                                                              i_Action_Kind   => t_Testing));
    
      if i_Attestation_Id is null then
        Send_Notification(i_Company_Id => r_Testing.Company_Id,
                          i_Filial_Id  => r_Testing.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Testing.Examiner_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Examiner,
                                                                                i_Action_Number => r_Testing.Testing_Number,
                                                                                i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                                i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                                i_Is_Period     => v_Period_Setting_On,
                                                                                i_Action_Kind   => t_Testing));
      end if;
    end if;
  
    Testing_Question_Save(i_Company_Id => r_Testing.Company_Id,
                          i_Filial_Id  => r_Testing.Filial_Id,
                          i_Testing_Id => r_Testing.Testing_Id,
                          i_Exam_Id    => r_Testing.Exam_Id);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Set_New
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status = Hln_Pref.c_Testing_Status_New then
      Hln_Error.Raise_016(r_Testing.Testing_Number);
    end if;
  
    -- clear question facts
    for Quest in (select *
                    from Hln_Testing_Questions q
                   where q.Company_Id = i_Company_Id
                     and q.Filial_Id = i_Filial_Id
                     and q.Testing_Id = i_Testing_Id)
    loop
      z_Hln_Testing_Questions.Update_One(i_Company_Id     => Quest.Company_Id,
                                         i_Filial_Id      => Quest.Filial_Id,
                                         i_Testing_Id     => Quest.Testing_Id,
                                         i_Question_Id    => Quest.Question_Id,
                                         i_Writing_Answer => Option_Varchar2(null),
                                         i_Marked         => Option_Varchar2(null),
                                         i_Correct        => Option_Varchar2(null));
    end loop;
  
    for Opt in (select *
                  from Hln_Testing_Question_Options o
                 where o.Company_Id = i_Company_Id
                   and o.Filial_Id = i_Filial_Id
                   and o.Testing_Id = i_Testing_Id)
    loop
      z_Hln_Testing_Question_Options.Update_One(i_Company_Id         => Opt.Company_Id,
                                                i_Filial_Id          => Opt.Filial_Id,
                                                i_Testing_Id         => Opt.Testing_Id,
                                                i_Question_Id        => Opt.Question_Id,
                                                i_Question_Option_Id => Opt.Question_Option_Id,
                                                i_Chosen             => Option_Varchar2(null));
    end loop;
  
    z_Hln_Testings.Update_One(i_Company_Id              => i_Company_Id,
                              i_Filial_Id               => i_Filial_Id,
                              i_Testing_Id              => i_Testing_Id,
                              i_End_Time                => Option_Date(null),
                              i_Pause_Time              => Option_Date(null),
                              i_Fact_Begin_Time         => Option_Date(null),
                              i_Fact_End_Time           => Option_Date(null),
                              i_Current_Question_No     => Option_Number(null),
                              i_Passed                  => Option_Varchar2(Hln_Pref.c_Passed_Indeterminate),
                              i_Correct_Questions_Count => Option_Number(null),
                              i_Status                  => Option_Varchar2(Hln_Pref.c_Testing_Status_New));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  -- changes testing status to executed
  ----------------------------------------------------------------------------------------------------         
  Procedure Testing_Enter
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    v_Is_Period_On boolean := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id) = 'Y';
    v_Current_Date date := Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id, --
                                                     i_Filial_Id  => i_Filial_Id);
    r_Testing      Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_New then
      Hln_Error.Raise_017(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    if v_Is_Period_On then
      if r_Testing.Begin_Time_Period_Begin is not null and
         v_Current_Date not between r_Testing.Begin_Time_Period_Begin and
         r_Testing.Begin_Time_Period_End then
        Hln_Error.Raise_054(i_Testing_Number => r_Testing.Testing_Number,
                            i_Period_Begin   => r_Testing.Begin_Time_Period_Begin,
                            i_Period_End     => r_Testing.Begin_Time_Period_End);
      end if;
    
      r_Testing.End_Time := v_Current_Date + Numtodsinterval(z_Hln_Exams.Load(i_Company_Id => r_Testing.Company_Id, i_Filial_Id => r_Testing.Filial_Id, i_Exam_Id => r_Testing.Exam_Id).Duration,
                                                             'minute');
    else
      if r_Testing.Begin_Time_Period_Begin is null then
        Hln_Error.Raise_018(r_Testing.Testing_Number);
      elsif r_Testing.End_Time is null then
        if v_Current_Date < r_Testing.Begin_Time_Period_Begin then
          Hln_Error.Raise_019(i_Begin_Time     => to_char(r_Testing.Begin_Time_Period_Begin,
                                                          Href_Pref.c_Date_Format_Minute),
                              i_Testing_Number => r_Testing.Testing_Number);
        end if;
      elsif not v_Current_Date between r_Testing.Begin_Time_Period_Begin and r_Testing.End_Time then
        Hln_Error.Raise_020(i_Begin_Time     => to_char(r_Testing.Begin_Time_Period_Begin,
                                                        Href_Pref.c_Date_Format_Minute),
                            i_End_Time       => to_char(r_Testing.End_Time,
                                                        Href_Pref.c_Date_Format_Minute),
                            i_Testing_Number => r_Testing.Testing_Number);
      end if;
    end if;
  
    z_Hln_Testings.Update_One(i_Company_Id              => i_Company_Id,
                              i_Filial_Id               => i_Filial_Id,
                              i_Testing_Id              => i_Testing_Id,
                              i_End_Time                => Option_Date(r_Testing.End_Time),
                              i_Fact_Begin_Time         => Option_Date(v_Current_Date),
                              i_Passed                  => Option_Varchar2(Hln_Pref.c_Passed_Indeterminate),
                              i_Correct_Questions_Count => Option_Number(null),
                              i_Status                  => Option_Varchar2(Hln_Pref.c_Testing_Status_Executed));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Testing_Return_Execute
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status not in
       (Hln_Pref.c_Testing_Status_Checking, Hln_Pref.c_Testing_Status_Finished) then
      Hln_Error.Raise_021(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    for r in (select *
                from Hln_Testing_Questions q
               where q.Company_Id = i_Company_Id
                 and q.Testing_Id = i_Testing_Id)
    loop
      z_Hln_Testing_Questions.Update_One(i_Company_Id  => r.Company_Id,
                                         i_Filial_Id   => r.Filial_Id,
                                         i_Testing_Id  => r.Testing_Id,
                                         i_Question_Id => r.Question_Id,
                                         i_Correct     => Option_Varchar2(null));
    end loop;
  
    z_Hln_Testings.Update_One(i_Company_Id              => i_Company_Id,
                              i_Filial_Id               => i_Filial_Id,
                              i_Testing_Id              => i_Testing_Id,
                              i_Fact_End_Time           => Option_Date(null),
                              i_Passed                  => Option_Varchar2(Hln_Pref.c_Passed_Indeterminate),
                              i_Correct_Questions_Count => Option_Number(null),
                              i_Status                  => Option_Varchar2(Hln_Pref.c_Testing_Status_Executed));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------         
  Procedure Testing_Pause
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_Executed then
      Hln_Error.Raise_022(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    z_Hln_Testings.Update_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Testing_Id => i_Testing_Id,
                              i_Pause_Time => Option_Date(Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                                                    i_Filial_Id  => i_Filial_Id)),
                              i_Status     => Option_Varchar2(Hln_Pref.c_Testing_Status_Paused));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Continue
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_Paused then
      Hln_Error.Raise_023(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    if r_Testing.End_Time is not null then
      r_Testing.End_Time := r_Testing.End_Time + (Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                                            i_Filial_Id  => i_Filial_Id) -
                            r_Testing.Pause_Time);
    end if;
  
    z_Hln_Testings.Update_One(i_Company_Id => r_Testing.Company_Id,
                              i_Filial_Id  => r_Testing.Filial_Id,
                              i_Testing_Id => r_Testing.Testing_Id,
                              i_End_Time   => Option_Date(r_Testing.End_Time),
                              i_Pause_Time => Option_Date(null),
                              i_Status     => Option_Varchar2(Hln_Pref.c_Testing_Status_Executed));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Testing_Return_Checking
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_Finished then
      Hln_Error.Raise_024(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    -- clear question facts
    for Quest in (select *
                    from Hln_Testing_Questions q
                   where q.Company_Id = i_Company_Id
                     and q.Filial_Id = i_Filial_Id
                     and q.Testing_Id = i_Testing_Id)
    loop
      z_Hln_Testing_Questions.Update_One(i_Company_Id  => Quest.Company_Id,
                                         i_Filial_Id   => Quest.Filial_Id,
                                         i_Testing_Id  => Quest.Testing_Id,
                                         i_Question_Id => Quest.Question_Id,
                                         i_Marked      => Option_Varchar2(null),
                                         i_Correct     => Option_Varchar2(null));
    end loop;
  
    z_Hln_Testings.Update_One(i_Company_Id              => i_Company_Id,
                              i_Filial_Id               => i_Filial_Id,
                              i_Testing_Id              => i_Testing_Id,
                              i_Passed                  => Option_Varchar2(Hln_Pref.c_Passed_Indeterminate),
                              i_Correct_Questions_Count => Option_Number(null),
                              i_Status                  => Option_Varchar2(Hln_Pref.c_Testing_Status_Checking));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------         
  Procedure Testing_Finish
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing                 Hln_Testings%rowtype;
    v_Correct_Questions_Count number;
    v_Passed                  varchar2(1);
    v_Dummy                   varchar2(1);
    r_Question                Hln_Questions%rowtype;
    v_Question_Ids            Array_Number;
    v_Option_Ids              Array_Number;
    v_Passing_Score           number;
    v_Correct_Options_Count   number;
    v_Options_Count           number := 0;
    v_Fact_End_Time           date;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    v_Fact_End_Time := r_Testing.Fact_End_Time;
  
    if r_Testing.Status = Hln_Pref.c_Testing_Status_Finished then
      Hln_Error.Raise_025(r_Testing.Testing_Number);
    elsif r_Testing.Status = Hln_Pref.c_Testing_Status_Checking then
      -- check writing questions are checked 
      begin
        select 'x'
          into v_Dummy
          from Hln_Testing_Questions q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Testing_Id = i_Testing_Id
           and q.Correct is null
           and exists (select 1
                  from Hln_Questions w
                 where w.Company_Id = q.Company_Id
                   and w.Filial_Id = q.Filial_Id
                   and w.Question_Id = q.Question_Id
                   and w.Answer_Type = Hln_Pref.c_Answer_Type_Writing)
           and Rownum = 1;
        Hln_Error.Raise_026(r_Testing.Testing_Number);
      exception
        when No_Data_Found then
          null;
      end;
    elsif r_Testing.Status = Hln_Pref.c_Testing_Status_New and r_Testing.End_Time is not null and
          Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id, --
                                    i_Filial_Id  => i_Filial_Id) < r_Testing.End_Time then
      Hln_Error.Raise_027(i_End_Time       => to_char(r_Testing.End_Time,
                                                      Href_Pref.c_Date_Format_Minute),
                          i_Testing_Number => r_Testing.Testing_Number);
    elsif r_Testing.Status in
          (Hln_Pref.c_Testing_Status_Executed, Hln_Pref.c_Testing_Status_Paused) then
      v_Fact_End_Time := Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id);
    end if;
  
    -- calc testing results
    -- check chosen answers
    select q.Question_Id
      bulk collect
      into v_Question_Ids
      from Hln_Testing_Questions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Testing_Id = i_Testing_Id
       and not exists (select *
              from Hln_Questions Qu
             where Qu.Company_Id = q.Company_Id
               and Qu.Filial_Id = q.Filial_Id
               and Qu.Question_Id = q.Question_Id
               and Qu.Answer_Type = Hln_Pref.c_Answer_Type_Writing);
  
    for i in 1 .. v_Question_Ids.Count
    loop
      r_Question := z_Hln_Questions.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Question_Id => v_Question_Ids(i));
    
      select count(*)
        into v_Correct_Options_Count
        from Hln_Question_Options q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Question_Id = v_Question_Ids(i)
         and q.Is_Correct = 'Y';
    
      select q.Question_Option_Id
        bulk collect
        into v_Option_Ids
        from Hln_Testing_Question_Options q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Testing_Id = i_Testing_Id
         and q.Question_Id = v_Question_Ids(i)
         and q.Chosen = 'Y';
    
      v_Options_Count := 0;
      if v_Correct_Options_Count = v_Option_Ids.Count then
        for j in 1 .. v_Option_Ids.Count
        loop
          if z_Hln_Question_Options.Load(i_Company_Id => i_Company_Id, --
           i_Filial_Id => i_Filial_Id, --
           i_Question_Option_Id => v_Option_Ids(j)).Is_Correct = 'Y' then
          
            v_Options_Count := v_Options_Count + 1;
          end if;
        end loop;
      end if;
    
      if v_Correct_Options_Count = v_Options_Count then
        z_Hln_Testing_Questions.Update_One(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Testing_Id  => i_Testing_Id,
                                           i_Question_Id => v_Question_Ids(i),
                                           i_Correct     => Option_Varchar2('Y'));
      else
        z_Hln_Testing_Questions.Update_One(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Testing_Id  => i_Testing_Id,
                                           i_Question_Id => v_Question_Ids(i),
                                           i_Correct     => Option_Varchar2('N'));
      end if;
    end loop;
  
    -- calc testing total result
    select count(q.Correct)
      into v_Correct_Questions_Count
      from Hln_Testing_Questions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Testing_Id = i_Testing_Id
       and q.Correct = 'Y';
  
    v_Passing_Score := z_Hln_Exams.Load(i_Company_Id => r_Testing.Company_Id, --
                       i_Filial_Id => i_Filial_Id, --
                       i_Exam_Id => r_Testing.Exam_Id).Passing_Score;
  
    if (v_Correct_Questions_Count >= v_Passing_Score) then
      v_Passed := 'Y';
    else
      v_Passed := 'N';
    end if;
  
    z_Hln_Testings.Update_One(i_Company_Id              => i_Company_Id,
                              i_Filial_Id               => i_Filial_Id,
                              i_Testing_Id              => i_Testing_Id,
                              i_Fact_End_Time           => Option_Date(v_Fact_End_Time),
                              i_Pause_Time              => Option_Date(null),
                              i_Correct_Questions_Count => Option_Number(v_Correct_Questions_Count),
                              i_Passed                  => Option_Varchar2(v_Passed),
                              i_Status                  => Option_Varchar2(Hln_Pref.c_Testing_Status_Finished));
  
    if i_Attestation_Id is not null then
      Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                      i_Filial_Id      => r_Testing.Filial_Id,
                                      i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Stop
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_User_Id        number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if not (r_Testing.Status = Hln_Pref.c_Testing_Status_Executed or
        r_Testing.Status = Hln_Pref.c_Testing_Status_Paused) then
      Hln_Error.Raise_028(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    if i_User_Id <> r_Testing.Person_Id and r_Testing.End_Time is not null and
       r_Testing.End_Time >
       Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id, --
                                 i_Filial_Id  => i_Filial_Id) then
      Hln_Error.Raise_029(i_End_Time       => r_Testing.End_Time,
                          i_Testing_Number => r_Testing.Testing_Number);
    end if;
  
    if Hln_Util.Has_Writing_Question(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Testing_Id => i_Testing_Id) = 'Y' then
      z_Hln_Testings.Update_One(i_Company_Id    => i_Company_Id,
                                i_Filial_Id     => i_Filial_Id,
                                i_Testing_Id    => i_Testing_Id,
                                i_Fact_End_Time => Option_Date(Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                                                         i_Filial_Id  => i_Filial_Id)),
                                i_Pause_Time    => Option_Date(null),
                                i_Status        => Option_Varchar2(Hln_Pref.c_Testing_Status_Checking));
    
      if i_Attestation_Id is not null then
        Hln_Core.Make_Dirty_Attestation(i_Company_Id     => r_Testing.Company_Id,
                                        i_Filial_Id      => r_Testing.Filial_Id,
                                        i_Attestation_Id => i_Attestation_Id);
      end if;
    else
      Testing_Finish(i_Company_Id     => i_Company_Id,
                     i_Filial_Id      => i_Filial_Id,
                     i_Testing_Id     => i_Testing_Id,
                     i_Attestation_Id => i_Attestation_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Add_Time
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Added_Time     number,
    i_Attestation_Id number := null
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if (r_Testing.Status = Hln_Pref.c_Testing_Status_Executed or
       r_Testing.Status = Hln_Pref.c_Testing_Status_Paused) then
      if r_Testing.End_Time is not null then
        r_Testing.End_Time := r_Testing.End_Time + Nvl(i_Added_Time, 0) / 1440;
      
        z_Hln_Testings.Update_One(i_Company_Id => r_Testing.Company_Id,
                                  i_Filial_Id  => r_Testing.Filial_Id,
                                  i_Testing_Id => r_Testing.Testing_Id,
                                  i_End_Time   => Option_Date(r_Testing.End_Time));
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Testing_Set_Begin_Time
  (
    i_Company_Id              number,
    i_Filial_Id               number,
    i_Testing_Id              number,
    i_Begin_Time_Period_Begin number,
    i_Begin_Time_Period_End   number := null,
    i_Attestation_Id          number := null
  ) is
    v_Is_Period boolean := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id) = 'Y';
    r_Testing   Hln_Testings%rowtype;
    r_Exam      Hln_Exams%rowtype;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_New then
      Hln_Error.Raise_030(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    r_Exam := z_Hln_Exams.Lock_Load(i_Company_Id => r_Testing.Company_Id,
                                    i_Filial_Id  => r_Testing.Filial_Id,
                                    i_Exam_Id    => r_Testing.Exam_Id);
  
    if v_Is_Period then
      r_Testing.Begin_Time_Period_Begin := r_Testing.Testing_Date +
                                           Numtodsinterval(i_Begin_Time_Period_Begin, 'minute');
      r_Testing.Begin_Time_Period_End   := r_Testing.Testing_Date +
                                           Numtodsinterval(i_Begin_Time_Period_End, 'minute');
    else
      r_Testing.Begin_Time_Period_Begin := r_Testing.Testing_Date +
                                           Numtodsinterval(i_Begin_Time_Period_Begin, 'minute');
      r_Testing.End_Time                := r_Testing.Begin_Time_Period_Begin +
                                           Numtodsinterval(r_Exam.Duration, 'minute');
    end if;
  
    z_Hln_Testings.Update_Row(r_Testing);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Testing_Start
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_Attestation_Id number := null
  ) is
    r_Testing      Hln_Testings%rowtype;
    r_Exam         Hln_Exams%rowtype;
    v_Current_Date date;
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    v_Current_Date := Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id);
  
    if Trunc(v_Current_Date) <> r_Testing.Testing_Date then
      Hln_Error.Raise_031(i_Current_Date   => v_Current_Date,
                          i_Testing_Date   => r_Testing.Testing_Date,
                          i_Testing_Number => r_Testing.Testing_Number);
    end if;
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_New then
      Hln_Error.Raise_032(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    r_Exam := z_Hln_Exams.Lock_Load(i_Company_Id => r_Testing.Company_Id,
                                    i_Filial_Id  => r_Testing.Filial_Id,
                                    i_Exam_Id    => r_Testing.Exam_Id);
  
    r_Testing.Begin_Time_Period_Begin := v_Current_Date;
    r_Testing.End_Time                := r_Testing.Begin_Time_Period_Begin +
                                         Numtodsinterval(r_Exam.Duration, 'minute');
  
    z_Hln_Testings.Update_Row(r_Testing);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Testing_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Testing_Id     number,
    i_User_Id        number,
    i_Attestation_Id number := null
  ) is
    v_Period_Setting_On varchar2(1) := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Company_Id,
                                                                                   i_Filial_Id  => i_Filial_Id);
    r_Testing           Hln_Testings%rowtype;
    t_Testing           varchar2(50) := Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Testing);
  begin
    Assert_Testing(i_Company_Id     => i_Company_Id,
                   i_Filial_Id      => i_Filial_Id,
                   i_Attestation_Id => i_Attestation_Id,
                   i_Testing_Id     => i_Testing_Id);
  
    if i_Attestation_Id is not null then
      z_Hln_Attestation_Testings.Delete_One(i_Company_Id     => i_Company_Id,
                                            i_Filial_Id      => i_Filial_Id,
                                            i_Attestation_Id => i_Attestation_Id,
                                            i_Testing_Id     => i_Testing_Id);
    end if;
  
    r_Testing := z_Hln_Testings.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Testing_Id => i_Testing_Id);
  
    z_Hln_Testings.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Testing_Id => i_Testing_Id);
  
    Send_Notification(i_Company_Id => r_Testing.Company_Id,
                      i_Filial_Id  => r_Testing.Filial_Id,
                      i_User_Id    => i_User_Id,
                      i_Person_Id  => r_Testing.Person_Id,
                      i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Testing.Testing_Number,
                                                                            i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                            i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                            i_Is_Period     => v_Period_Setting_On,
                                                                            i_Action_Kind   => t_Testing));
  
    if i_Attestation_Id is null then
      Send_Notification(i_Company_Id => r_Testing.Company_Id,
                        i_Filial_Id  => r_Testing.Filial_Id,
                        i_User_Id    => i_User_Id,
                        i_Person_Id  => r_Testing.Examiner_Id,
                        i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Testing.Testing_Number,
                                                                              i_Begin_Time    => r_Testing.Begin_Time_Period_Begin,
                                                                              i_End_Time      => r_Testing.Begin_Time_Period_End,
                                                                              i_Is_Period     => v_Period_Setting_On,
                                                                              i_Action_Kind   => t_Testing));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Save
  (
    i_Attestation Hln_Pref.Attestation_Rt,
    i_User_Id     number
  ) is
    v_Testing           Hln_Pref.Testing_Rt;
    v_Testing_Ids       Array_Number := Array_Number();
    v_Dub_Person_Ids    Array_Number;
    v_Person_Names      Array_Varchar2;
    v_Person_Ids        Array_Number := Array_Number();
    v_Exists            boolean;
    v_Period_Setting_On varchar2(1) := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Attestation.Company_Id,
                                                                                   i_Filial_Id  => i_Attestation.Filial_Id);
    v_Is_Period         boolean := v_Period_Setting_On = 'Y';
    t_Examiner          varchar2(50) := Hln_Util.t_Person_Kind(Hln_Pref.c_Person_Kind_Examiner);
    t_Attestation       varchar2(50) := Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Attestation);
    r_Attestation       Hln_Attestations%rowtype;
    r_Old_Attestation   Hln_Attestations%rowtype;
    r_Testing           Hln_Testings%rowtype;
  begin
    if z_Hln_Attestations.Exist_Lock(i_Company_Id     => i_Attestation.Company_Id,
                                     i_Filial_Id      => i_Attestation.Filial_Id,
                                     i_Attestation_Id => i_Attestation.Attestation_Id,
                                     o_Row            => r_Attestation) then
      if r_Attestation.Status <> Hln_Pref.c_Attestation_Status_New then
        Hln_Error.Raise_033(i_Attestation_Number => r_Attestation.Attestation_Number,
                            i_Status_Name        => Hln_Util.t_Attestation_Status(r_Attestation.Status));
      end if;
    
      v_Exists          := true;
      r_Old_Attestation := r_Attestation;
    else
      r_Attestation.Company_Id     := i_Attestation.Company_Id;
      r_Attestation.Filial_Id      := i_Attestation.Filial_Id;
      r_Attestation.Attestation_Id := i_Attestation.Attestation_Id;
      r_Attestation.Status         := Hln_Pref.c_Attestation_Status_New;
    
      v_Exists := false;
    end if;
  
    r_Attestation.Attestation_Number      := i_Attestation.Attestation_Number;
    r_Attestation.Name                    := i_Attestation.Name;
    r_Attestation.Attestation_Date        := i_Attestation.Attestation_Date;
    r_Attestation.Begin_Time_Period_Begin := i_Attestation.Begin_Time_Period_Begin;
    r_Attestation.Begin_Time_Period_End   := i_Attestation.Begin_Time_Period_End;
    r_Attestation.Examiner_Id             := i_Attestation.Examiner_Id;
    r_Attestation.Note                    := i_Attestation.Note;
  
    if v_Is_Period and r_Attestation.Begin_Time_Period_Begin > r_Attestation.Begin_Time_Period_End then
      Hln_Error.Raise_056(i_Attestation_Number => r_Attestation.Attestation_Number,
                          i_Period_Begin       => r_Attestation.Begin_Time_Period_Begin,
                          i_Period_End         => r_Attestation.Begin_Time_Period_End);
    end if;
  
    if v_Exists then
      z_Hln_Attestations.Update_Row(r_Attestation);
    
      if r_Old_Attestation.Examiner_Id <> r_Attestation.Examiner_Id then
        Send_Notification(i_Company_Id => r_Attestation.Company_Id,
                          i_Filial_Id  => r_Attestation.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Attestation.Examiner_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Examiner,
                                                                                i_Action_Number => r_Attestation.Attestation_Number,
                                                                                i_Begin_Time    => r_Attestation.Begin_Time_Period_Begin,
                                                                                i_End_Time      => r_Attestation.Begin_Time_Period_End,
                                                                                i_Is_Period     => v_Period_Setting_On,
                                                                                i_Action_Kind   => t_Attestation));
      
        Send_Notification(i_Company_Id => r_Old_Attestation.Company_Id,
                          i_Filial_Id  => r_Old_Attestation.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Old_Attestation.Examiner_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Old_Attestation.Attestation_Number,
                                                                                i_Begin_Time    => r_Old_Attestation.Begin_Time_Period_Begin,
                                                                                i_End_Time      => r_Old_Attestation.Begin_Time_Period_End,
                                                                                i_Is_Period     => v_Period_Setting_On,
                                                                                i_Action_Kind   => t_Attestation));
      else
        if r_Old_Attestation.Begin_Time_Period_Begin <> r_Attestation.Begin_Time_Period_Begin or --
           r_Old_Attestation.Begin_Time_Period_End <> r_Attestation.Begin_Time_Period_End or --
           r_Old_Attestation.Attestation_Number <> r_Attestation.Attestation_Number then
          Send_Notification(i_Company_Id => r_Old_Attestation.Company_Id,
                            i_Filial_Id  => r_Old_Attestation.Filial_Id,
                            i_User_Id    => i_User_Id,
                            i_Person_Id  => r_Old_Attestation.Examiner_Id,
                            i_Title      => Hln_Util.t_Notification_Action_Update(i_Action_Number => r_Attestation.Attestation_Number,
                                                                                  i_Begin_Time    => r_Attestation.Begin_Time_Period_Begin,
                                                                                  i_End_Time      => r_Attestation.Begin_Time_Period_End,
                                                                                  i_Is_Period     => v_Period_Setting_On,
                                                                                  i_Action_Kind   => t_Attestation));
        end if;
      end if;
    else
      if r_Attestation.Attestation_Number is null then
        r_Attestation.Attestation_Number := Md_Core.Gen_Number(i_Company_Id => r_Attestation.Company_Id,
                                                               i_Filial_Id  => r_Attestation.Filial_Id,
                                                               i_Table      => Zt.Hln_Attestations,
                                                               i_Column     => z.Attestation_Number);
      end if;
    
      z_Hln_Attestations.Insert_Row(r_Attestation);
    
      Send_Notification(i_Company_Id => r_Attestation.Company_Id,
                        i_Filial_Id  => r_Attestation.Filial_Id,
                        i_User_Id    => i_User_Id,
                        i_Person_Id  => r_Attestation.Examiner_Id,
                        i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Examiner,
                                                                              i_Action_Number => r_Attestation.Attestation_Number,
                                                                              i_Begin_Time    => r_Attestation.Begin_Time_Period_Begin,
                                                                              i_End_Time      => r_Attestation.Begin_Time_Period_End,
                                                                              i_Is_Period     => v_Period_Setting_On,
                                                                              i_Action_Kind   => t_Attestation));
    end if;
  
    v_Testing_Ids.Extend(i_Attestation.Testings.Count);
    v_Person_Ids.Extend(i_Attestation.Testings.Count);
  
    for i in 1 .. i_Attestation.Testings.Count
    loop
      v_Testing := i_Attestation.Testings(i);
      v_Testing_Ids(i) := v_Testing.Testing_Id;
      v_Person_Ids(i) := v_Testing.Person_Id;
    
      if not z_Hln_Testings.Exist_Lock(i_Company_Id => i_Attestation.Company_Id,
                                       i_Filial_Id  => i_Attestation.Filial_Id,
                                       i_Testing_Id => v_Testing.Testing_Id,
                                       o_Row        => r_Testing) then
        r_Testing            := null;
        r_Testing.Company_Id := i_Attestation.Company_Id;
        r_Testing.Filial_Id  := i_Attestation.Filial_Id;
        r_Testing.Testing_Id := v_Testing.Testing_Id;
      end if;
    
      r_Testing.Exam_Id                 := v_Testing.Exam_Id;
      r_Testing.Person_Id               := v_Testing.Person_Id;
      r_Testing.Examiner_Id             := i_Attestation.Examiner_Id;
      r_Testing.Testing_Date            := i_Attestation.Attestation_Date;
      r_Testing.Begin_Time_Period_Begin := i_Attestation.Begin_Time_Period_Begin;
      r_Testing.Begin_Time_Period_End   := i_Attestation.Begin_Time_Period_End;
      r_Testing.Note                    := i_Attestation.Note;
      r_Testing.Passed                  := Hln_Pref.c_Passed_Indeterminate;
      r_Testing.Status                  := Hln_Pref.c_Testing_Status_New;
    
      Testing_Save(i_Testing        => r_Testing,
                   i_User_Id        => i_User_Id,
                   i_Attestation_Id => i_Attestation.Attestation_Id);
    
      z_Hln_Attestation_Testings.Insert_Try(i_Company_Id     => i_Attestation.Company_Id,
                                            i_Filial_Id      => i_Attestation.Filial_Id,
                                            i_Attestation_Id => i_Attestation.Attestation_Id,
                                            i_Testing_Id     => v_Testing.Testing_Id);
    end loop;
  
    select Column_Value
      bulk collect
      into v_Dub_Person_Ids
      from table(v_Person_Ids)
     group by Column_Value
    having count(*) > 1;
  
    if v_Dub_Person_Ids.Count > 0 then
      select q.Name
        bulk collect
        into v_Person_Names
        from Mr_Natural_Persons q
       where q.Company_Id = r_Attestation.Company_Id
         and q.Person_Id member of v_Dub_Person_Ids;
    
      Hln_Error.Raise_034(i_Attestation_Number => r_Attestation.Attestation_Number,
                          i_Person_Names       => Fazo.Gather(v_Person_Names, ', '));
    end if;
  
    for r in (select *
                from Hln_Attestation_Testings q
               where q.Company_Id = i_Attestation.Company_Id
                 and q.Filial_Id = i_Attestation.Filial_Id
                 and q.Attestation_Id = i_Attestation.Attestation_Id
                 and q.Testing_Id not member of v_Testing_Ids)
    loop
      Testing_Delete(i_Company_Id     => r.Company_Id,
                     i_Filial_Id      => r.Filial_Id,
                     i_Testing_Id     => r.Testing_Id,
                     i_User_Id        => i_User_Id,
                     i_Attestation_Id => r.Attestation_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Delete
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Attestation_Id number,
    i_User_Id        number
  ) is
    v_Period_Setting_On varchar2(1) := Hln_Util.Testing_Period_Change_Setting_Load(i_Company_Id => i_Company_Id,
                                                                                   i_Filial_Id  => i_Filial_Id);
    r_Attestation       Hln_Attestations%rowtype;
  begin
    r_Attestation := z_Hln_Attestations.Lock_Load(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Attestation_Id => i_Attestation_Id);
  
    if r_Attestation.Status <> Hln_Pref.c_Attestation_Status_New then
      Hln_Error.Raise_035(i_Attestation_Number => r_Attestation.Attestation_Number,
                          i_Status_Name        => Hln_Util.t_Attestation_Status(r_Attestation.Status));
    end if;
  
    for r in (select *
                from Hln_Attestation_Testings q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Attestation_Id = i_Attestation_Id)
    loop
      Testing_Delete(i_Company_Id     => r.Company_Id,
                     i_Filial_Id      => r.Filial_Id,
                     i_Testing_Id     => r.Testing_Id,
                     i_User_Id        => i_User_Id,
                     i_Attestation_Id => r.Attestation_Id);
    end loop;
  
    z_Hln_Attestations.Delete_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Attestation_Id => i_Attestation_Id);
  
    Send_Notification(i_Company_Id => r_Attestation.Company_Id,
                      i_Filial_Id  => r_Attestation.Filial_Id,
                      i_User_Id    => i_User_Id,
                      i_Person_Id  => r_Attestation.Examiner_Id,
                      i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Attestation.Attestation_Number,
                                                                            i_Begin_Time    => r_Attestation.Begin_Time_Period_Begin,
                                                                            i_End_Time      => r_Attestation.Begin_Time_Period_End,
                                                                            i_Is_Period     => v_Period_Setting_On,
                                                                            i_Action_Kind   => Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Attestation)));
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Send_Answer
  (
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Testing_Id          number,
    i_Person_Id           number,
    i_Question_Id         number,
    i_Current_Question_No number,
    i_Question_Option_Ids Array_Number,
    i_Writing_Answer      varchar2
  ) is
    r_Testing  Hln_Testings%rowtype;
    r_Question Hln_Questions%rowtype;
  begin
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_Executed then
      Hln_Error.Raise_036(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    Hln_Util.Assert_Access_Person(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Testing_Id => i_Testing_Id,
                                  i_Person_Id  => i_Person_Id);
  
    r_Question := z_Hln_Questions.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Question_Id => i_Question_Id);
  
    if r_Question.Answer_Type = Hln_Pref.c_Answer_Type_Single and i_Question_Option_Ids.Count > 1 then
      Hln_Error.Raise_037(i_Testing_Number => r_Testing.Testing_Number,
                          i_Question_Id    => r_Question.Question_Id);
    elsif r_Question.Answer_Type = Hln_Pref.c_Answer_Type_Writing and
          i_Question_Option_Ids.Count > 0 then
      Hln_Error.Raise_038(i_Testing_Number => r_Testing.Testing_Number,
                          i_Question_Id    => r_Question.Question_Id);
    elsif r_Question.Answer_Type <> Hln_Pref.c_Answer_Type_Writing and i_Writing_Answer is not null then
      Hln_Error.Raise_039(i_Testing_Number => r_Testing.Testing_Number,
                          i_Question_Id    => r_Question.Question_Id);
    end if;
  
    -- save chosen answers
    if r_Question.Answer_Type != Hln_Pref.c_Answer_Type_Writing then
      update Hln_Testing_Question_Options q
         set q.Chosen = 'N'
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Testing_Id = i_Testing_Id
         and q.Question_Id = i_Question_Id
         and q.Question_Option_Id not member of i_Question_Option_Ids;
    
      for i in 1 .. i_Question_Option_Ids.Count
      loop
        z_Hln_Testing_Question_Options.Update_One(i_Company_Id         => i_Company_Id,
                                                  i_Filial_Id          => i_Filial_Id,
                                                  i_Testing_Id         => i_Testing_Id,
                                                  i_Question_Id        => i_Question_Id,
                                                  i_Question_Option_Id => i_Question_Option_Ids(i),
                                                  i_Chosen             => Option_Varchar2('Y'));
      end loop;
    else
      z_Hln_Testing_Questions.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Testing_Id     => i_Testing_Id,
                                         i_Question_Id    => i_Question_Id,
                                         i_Writing_Answer => Option_Varchar2(i_Writing_Answer));
    end if;
  
    --update current question number
    z_Hln_Testings.Update_One(i_Company_Id          => i_Company_Id,
                              i_Filial_Id           => i_Filial_Id,
                              i_Testing_Id          => i_Testing_Id,
                              i_Current_Question_No => Option_Number(i_Current_Question_No));
  
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Check_Answer
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Testing_Id  number,
    i_Question_Id number,
    i_Correct     varchar2
  ) is
    r_Testing Hln_Testings%rowtype;
  begin
    r_Testing := z_Hln_Testings.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Status <> Hln_Pref.c_Testing_Status_Checking then
      Hln_Error.Raise_040(i_Testing_Number => r_Testing.Testing_Number,
                          i_Status_Name    => Hln_Util.t_Testing_Status(r_Testing.Status));
    end if;
  
    z_Hln_Testing_Questions.Update_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Testing_Id  => i_Testing_Id,
                                       i_Question_Id => i_Question_Id,
                                       i_Correct     => Option_Varchar2(i_Correct));
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Mark_Question
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Testing_Id  number,
    i_Question_Id number,
    i_Person_Id   number
  ) is
    r_Testing_Question Hln_Testing_Questions%rowtype;
  begin
    Hln_Util.Assert_Access_Person(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Testing_Id => i_Testing_Id,
                                  i_Person_Id  => i_Person_Id);
  
    r_Testing_Question := z_Hln_Testing_Questions.Lock_Load(i_Company_Id  => i_Company_Id,
                                                            i_Filial_Id   => i_Filial_Id,
                                                            i_Testing_Id  => i_Testing_Id,
                                                            i_Question_Id => i_Question_Id);
  
    z_Hln_Testing_Questions.Update_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Testing_Id  => i_Testing_Id,
                                       i_Question_Id => i_Question_Id,
                                       i_Marked      => Option_Varchar2(Md_Util.Decode(r_Testing_Question.Marked,
                                                                                       'Y',
                                                                                       'N',
                                                                                       'N',
                                                                                       'Y',
                                                                                       'Y')));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Training_Subject_Group_Save(i_Subject_Group Hln_Pref.Training_Subject_Group_Rt) is
  begin
    z_Hln_Training_Subject_Groups.Save_One(i_Company_Id       => i_Subject_Group.Company_Id,
                                           i_Filial_Id        => i_Subject_Group.Filial_Id,
                                           i_Subject_Group_Id => i_Subject_Group.Subject_Group_Id,
                                           i_Name             => i_Subject_Group.Name,
                                           i_Code             => i_Subject_Group.Code,
                                           i_State            => i_Subject_Group.State);
  
    for i in 1 .. i_Subject_Group.Subject_Ids.Count
    loop
      z_Hln_Training_Subject_Group_Subjects.Insert_Try(i_Company_Id       => i_Subject_Group.Company_Id,
                                                       i_Filial_Id        => i_Subject_Group.Filial_Id,
                                                       i_Subject_Group_Id => i_Subject_Group.Subject_Group_Id,
                                                       i_Subject_Id       => i_Subject_Group.Subject_Ids(i));
    end loop;
  
    delete Hln_Training_Subject_Group_Subjects q
     where q.Company_Id = i_Subject_Group.Company_Id
       and q.Filial_Id = i_Subject_Group.Filial_Id
       and q.Subject_Group_Id = i_Subject_Group.Subject_Group_Id
       and q.Subject_Id not member of i_Subject_Group.Subject_Ids;
  end;

  ----------------------------------------------------------------------------------------------------   
  Procedure Trainig_Subject_Group_Delete
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Subject_Group_Id number
  ) is
  begin
    z_Hln_Training_Subject_Groups.Delete_One(i_Company_Id       => i_Company_Id,
                                             i_Filial_Id        => i_Filial_Id,
                                             i_Subject_Group_Id => i_Subject_Group_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Subject_Save(i_Training_Subject Hln_Training_Subjects%rowtype) is
  begin
    z_Hln_Training_Subjects.Save_Row(i_Training_Subject);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Subject_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Subject_Id number
  ) is
  begin
    z_Hln_Training_Subjects.Delete_One(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Subject_Id => i_Subject_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Save
  (
    i_Training Hln_Pref.Training_Rt,
    i_User_Id  number
  ) is
    v_Exists                boolean;
    t_Participant           varchar2(50) := Hln_Util.t_Person_Kind(Hln_Pref.c_Person_Kind_Participant);
    t_Mentor                varchar2(50) := Hln_Util.t_Person_Kind(Hln_Pref.c_Person_Kind_Mentor);
    t_Training              varchar2(50) := Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Training);
    v_Subject_Ids           Array_Number := i_Training.Subject_Ids;
    r_Training              Hln_Trainings%rowtype;
    r_Old_Training          Hln_Trainings%rowtype;
    v_Old_Person_Ids        Array_Number;
    v_Updatable_Person_Ids  Array_Number := Array_Number();
    v_Attachable_Person_Ids Array_Number := Array_Number();
    v_Detachable_Person_Id  Array_Number := Array_Number();
  begin
    if z_Hln_Trainings.Exist_Lock(i_Company_Id  => i_Training.Company_Id,
                                  i_Filial_Id   => i_Training.Filial_Id,
                                  i_Training_Id => i_Training.Training_Id,
                                  o_Row         => r_Training) then
      if r_Training.Status <> Hln_Pref.c_Training_Status_New then
        Hln_Error.Raise_041(i_Training_Number => r_Training.Training_Number,
                            i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
      end if;
    
      v_Exists       := true;
      r_Old_Training := r_Training;
    else
      r_Training.Company_Id  := i_Training.Company_Id;
      r_Training.Filial_Id   := i_Training.Filial_Id;
      r_Training.Training_Id := i_Training.Training_Id;
      r_Training.Status      := Hln_Pref.c_Training_Status_New;
    
      v_Exists := false;
    end if;
  
    r_Training.Training_Number  := i_Training.Training_Number;
    r_Training.Begin_Date       := i_Training.Begin_Date;
    r_Training.Mentor_Id        := i_Training.Mentor_Id;
    r_Training.Address          := i_Training.Address;
    r_Training.Subject_Group_Id := i_Training.Subject_Group_Id;
  
    if v_Exists then
      z_Hln_Trainings.Update_Row(r_Training);
    
      if r_Old_Training.Mentor_Id <> r_Training.Mentor_Id then
        Send_Notification(i_Company_Id => r_Training.Company_Id,
                          i_Filial_Id  => r_Training.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Training.Mentor_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Mentor,
                                                                                i_Action_Number => r_Training.Training_Number,
                                                                                i_Begin_Time    => r_Training.Begin_Date,
                                                                                i_Action_Kind   => t_Training));
      
        Send_Notification(i_Company_Id => r_Old_Training.Company_Id,
                          i_Filial_Id  => r_Old_Training.Filial_Id,
                          i_User_Id    => i_User_Id,
                          i_Person_Id  => r_Old_Training.Mentor_Id,
                          i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Old_Training.Training_Number,
                                                                                i_Begin_Time    => r_Old_Training.Begin_Date,
                                                                                i_Action_Kind   => t_Training));
      else
        if r_Old_Training.Training_Number <> r_Training.Training_Number or --
           r_Old_Training.Begin_Date <> r_Training.Begin_Date then
          Send_Notification(i_Company_Id => r_Training.Company_Id,
                            i_Filial_Id  => r_Training.Filial_Id,
                            i_User_Id    => i_User_Id,
                            i_Person_Id  => r_Training.Mentor_Id,
                            i_Title      => Hln_Util.t_Notification_Action_Update(i_Action_Number => r_Training.Training_Number,
                                                                                  i_Begin_Time    => r_Training.Begin_Date,
                                                                                  i_Action_Kind   => t_Training));
        end if;
      end if;
    
      select q.Person_Id
        bulk collect
        into v_Old_Person_Ids
        from Hln_Training_Persons q
       where q.Company_Id = r_Training.Company_Id
         and q.Filial_Id = r_Training.Filial_Id
         and q.Training_Id = r_Training.Training_Id;
    
      v_Updatable_Person_Ids  := (v_Old_Person_Ids multiset intersect i_Training.Persons) multiset
                                 Except Array_Number(i_User_Id);
      v_Detachable_Person_Id  := (v_Old_Person_Ids multiset Except i_Training.Persons) multiset
                                 Except Array_Number(i_User_Id);
      v_Attachable_Person_Ids := (i_Training.Persons multiset Except v_Old_Person_Ids) multiset
                                 Except Array_Number(i_User_Id);
    
      Send_Notification(i_Company_Id => r_Training.Company_Id,
                        i_Filial_Id  => r_Training.Filial_Id,
                        i_Person_Ids => v_Attachable_Person_Ids,
                        i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Participant,
                                                                              i_Action_Number => r_Training.Training_Number,
                                                                              i_Begin_Time    => r_Training.Begin_Date,
                                                                              i_Action_Kind   => t_Training));
    
      Send_Notification(i_Company_Id => r_Old_Training.Company_Id,
                        i_Filial_Id  => r_Old_Training.Filial_Id,
                        i_Person_Ids => v_Detachable_Person_Id,
                        i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Old_Training.Training_Number,
                                                                              i_Begin_Time    => r_Old_Training.Begin_Date,
                                                                              i_Action_Kind   => t_Training));
    
      if r_Old_Training.Training_Number <> r_Training.Training_Number or --
         r_Old_Training.Begin_Date <> r_Training.Begin_Date then
        Send_Notification(i_Company_Id => r_Training.Company_Id,
                          i_Filial_Id  => r_Training.Filial_Id,
                          i_Person_Ids => v_Updatable_Person_Ids,
                          i_Title      => Hln_Util.t_Notification_Action_Update(i_Action_Number => r_Training.Training_Number,
                                                                                i_Begin_Time    => r_Training.Begin_Date,
                                                                                i_Action_Kind   => t_Training));
      end if;
    else
      if r_Training.Training_Number is null then
        r_Training.Training_Number := Md_Core.Gen_Number(i_Company_Id => r_Training.Company_Id,
                                                         i_Filial_Id  => r_Training.Filial_Id,
                                                         i_Table      => Zt.Hln_Trainings,
                                                         i_Column     => z.Training_Number);
      end if;
    
      z_Hln_Trainings.Insert_Row(r_Training);
    
      Send_Notification(i_Company_Id => r_Training.Company_Id,
                        i_Filial_Id  => r_Training.Filial_Id,
                        i_User_Id    => i_User_Id,
                        i_Person_Id  => r_Training.Mentor_Id,
                        i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Mentor,
                                                                              i_Action_Number => r_Training.Training_Number,
                                                                              i_Begin_Time    => r_Training.Begin_Date,
                                                                              i_Action_Kind   => t_Training));
    
      Send_Notification(i_Company_Id => r_Training.Company_Id,
                        i_Filial_Id  => r_Training.Filial_Id,
                        i_Person_Ids => i_Training.Persons,
                        i_Title      => Hln_Util.t_Notification_Action_Attach(i_Person_Type   => t_Participant,
                                                                              i_Action_Number => r_Training.Training_Number,
                                                                              i_Begin_Time    => r_Training.Begin_Date,
                                                                              i_Action_Kind   => t_Training));
    end if;
  
    if i_Training.Subject_Group_Id is not null then
      select q.Subject_Id
        bulk collect
        into v_Subject_Ids
        from Hln_Training_Subject_Group_Subjects q
       where q.Company_Id = i_Training.Company_Id
         and q.Filial_Id = i_Training.Filial_Id
         and q.Subject_Group_Id = i_Training.Subject_Group_Id;
    
      if v_Subject_Ids.Count = 0 then
        Hln_Error.Raise_062(z_Hln_Training_Subject_Groups.Load(i_Company_Id => i_Training.Company_Id, --
                            i_Filial_Id => i_Training.Filial_Id, -- 
                            i_Subject_Group_Id => i_Training.Subject_Group_Id).Name);
      end if;
    end if;
  
    if v_Subject_Ids.Count = 0 then
      Hln_Error.Raise_052;
    end if;
  
    for i in 1 .. v_Subject_Ids.Count
    loop
      z_Hln_Training_Current_Subjects.Insert_Try(i_Company_Id  => i_Training.Company_Id,
                                                 i_Filial_Id   => i_Training.Filial_Id,
                                                 i_Training_Id => i_Training.Training_Id,
                                                 i_Subject_Id  => v_Subject_Ids(i));
    end loop;
  
    delete from Hln_Training_Current_Subjects q
     where q.Company_Id = i_Training.Company_Id
       and q.Filial_Id = i_Training.Filial_Id
       and q.Training_Id = i_Training.Training_Id
       and q.Subject_Id not member of v_Subject_Ids;
  
    for i in 1 .. i_Training.Persons.Count
    loop
      z_Hln_Training_Persons.Insert_Try(i_Company_Id  => i_Training.Company_Id,
                                        i_Filial_Id   => i_Training.Filial_Id,
                                        i_Training_Id => i_Training.Training_Id,
                                        i_Person_Id   => i_Training.Persons(i),
                                        i_Passed      => Hln_Pref.c_Passed_Indeterminate);
    
      for j in 1 .. v_Subject_Ids.Count
      loop
        z_Hln_Training_Person_Subjects.Insert_Try(i_Company_Id  => i_Training.Company_Id,
                                                  i_Filial_Id   => i_Training.Filial_Id,
                                                  i_Training_Id => i_Training.Training_Id,
                                                  i_Person_Id   => i_Training.Persons(i),
                                                  i_Subject_Id  => v_Subject_Ids(j),
                                                  i_Passed      => Hln_Pref.c_Passed_Indeterminate);
      end loop;
    end loop;
  
    for r in (select *
                from Hln_Training_Persons q
               where q.Company_Id = i_Training.Company_Id
                 and q.Filial_Id = i_Training.Filial_Id
                 and q.Training_Id = i_Training.Training_Id
                 and q.Person_Id not member of i_Training.Persons)
    loop
      z_Hln_Training_Persons.Delete_One(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Training_Id => r.Training_Id,
                                        i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Training_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_User_Id     number
  ) is
    v_Person_Ids Array_Number;
    r_Training   Hln_Trainings%rowtype;
  begin
    r_Training := z_Hln_Trainings.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Training_Id => i_Training_Id);
  
    if r_Training.Status <> Hln_Pref.c_Training_Status_New then
      Hln_Error.Raise_042(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  
    select q.Person_Id
      bulk collect
      into v_Person_Ids
      from Hln_Training_Persons q
     where q.Company_Id = r_Training.Company_Id
       and q.Filial_Id = r_Training.Filial_Id
       and q.Training_Id = r_Training.Training_Id
       and q.Person_Id <> i_User_Id;
  
    if r_Training.Mentor_Id <> i_User_Id then
      Fazo.Push(v_Person_Ids, r_Training.Mentor_Id);
    end if;
  
    z_Hln_Trainings.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Training_Id => i_Training_Id);
  
    Send_Notification(i_Company_Id => r_Training.Company_Id,
                      i_Filial_Id  => r_Training.Filial_Id,
                      i_Person_Ids => v_Person_Ids,
                      i_Title      => Hln_Util.t_Notification_Action_Detach(i_Action_Number => r_Training.Training_Number,
                                                                            i_Begin_Time    => r_Training.Begin_Date,
                                                                            i_Action_Kind   => Hln_Util.t_Action_Kind(Hln_Pref.c_Action_Kind_Training)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assess_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Person_Id   number,
    i_Passed      varchar2
  ) is
    r_Training Hln_Trainings%rowtype;
  begin
    r_Training := z_Hln_Trainings.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Training_Id => i_Training_Id);
  
    if r_Training.Status <> Hln_Pref.c_Training_Status_Executed then
      Hln_Error.Raise_043(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  
    z_Hln_Training_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Training_Id => i_Training_Id,
                                      i_Person_Id   => i_Person_Id,
                                      i_Passed      => Option_Varchar2(i_Passed));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assess_Person_Subject
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Person_Id   number,
    i_Subject_Id  number,
    i_Passed      varchar2
  ) is
  begin
    z_Hln_Training_Person_Subjects.Update_One(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Training_Id => i_Training_Id,
                                              i_Person_Id   => i_Person_Id,
                                              i_Subject_Id  => i_Subject_Id,
                                              i_Passed      => Option_Varchar2(i_Passed));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Set_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  ) is
    r_Training Hln_Trainings%rowtype;
  begin
    r_Training := z_Hln_Trainings.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Training_Id => i_Training_Id);
  
    if r_Training.Status <> Hln_Pref.c_Training_Status_Executed then
      Hln_Error.Raise_044(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  
    update Hln_Training_Persons q
       set q.Passed = Hln_Pref.c_Passed_Indeterminate
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Training_Id = i_Training_Id;
  
    z_Hln_Trainings.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Training_Id => i_Training_Id,
                               i_Status      => Option_Varchar2(Hln_Pref.c_Training_Status_New));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Execute
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  ) is
    r_Training Hln_Trainings%rowtype;
  begin
    r_Training := z_Hln_Trainings.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Training_Id => i_Training_Id);
  
    if r_Training.Status = Hln_Pref.c_Training_Status_Executed then
      Hln_Error.Raise_045(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  
    z_Hln_Trainings.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Training_Id => i_Training_Id,
                               i_Status      => Option_Varchar2(Hln_Pref.c_Training_Status_Executed));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_Finish
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number
  ) is
    r_Training Hln_Trainings%rowtype;
    v_Dummy    varchar2(1);
  begin
    r_Training := z_Hln_Trainings.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Training_Id => i_Training_Id);
  
    begin
      select 'x'
        into v_Dummy
        from Hln_Training_Persons q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Training_Id = i_Training_Id
         and q.Passed = Hln_Pref.c_Passed_Indeterminate
         and Rownum = 1;
      Hln_Error.Raise_046(r_Training.Training_Number);
    exception
      when No_Data_Found then
        null;
    end;
  
    if r_Training.Status <> Hln_Pref.c_Training_Status_Executed then
      Hln_Error.Raise_047(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  
    z_Hln_Trainings.Update_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Training_Id => i_Training_Id,
                               i_Status      => Option_Varchar2(Hln_Pref.c_Training_Status_Finished));
  end;

end Hln_Api;
/

create or replace package Hln_Core is
  ----------------------------------------------------------------------------------------------------  
  Function Gen_Exam_Questions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Id    number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Attestation
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Attestation_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Change_Status;
  ----------------------------------------------------------------------------------------------------
  Procedure Generate_Daily_Notifications;
end Hln_Core;
/
create or replace package body Hln_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HLN:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------       
  Function Gen_Exam_Questions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Id    number
  ) return Array_Number is
    r_Exam                Hln_Exams%rowtype;
    v_Question_Type_Ids   Array_Number;
    v_Question_Type_Names Array_Varchar2;
    v_Result              Array_Number := Array_Number();
    v_Question_Ids        Array_Number := Array_Number();
  begin
    r_Exam := z_Hln_Exams.Lock_Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Exam_Id    => i_Exam_Id);
  
    if r_Exam.Pick_Kind = Hln_Pref.c_Exam_Pick_Kind_Manual then
      Hln_Error.Raise_002(r_Exam.Name);
    end if;
  
    for Ptrn in (select *
                   from Hln_Exam_Patterns Ep
                  where Ep.Company_Id = r_Exam.Company_Id
                    and Ep.Filial_Id = r_Exam.Filial_Id
                    and Ep.Exam_Id = r_Exam.Exam_Id
                  order by Ep.Order_No)
    loop
      select Pqt.Question_Type_Id
        bulk collect
        into v_Question_Type_Ids
        from Hln_Pattern_Question_Types Pqt
       where Pqt.Company_Id = Ptrn.Company_Id
         and Pqt.Filial_Id = Ptrn.Filial_Id
         and Pqt.Pattern_Id = Ptrn.Pattern_Id;
    
      v_Question_Ids := Hln_Util.Randomizer_Array(i_Array       => Hln_Util.Gen_Questions(i_Company_Id                 => i_Company_Id,
                                                                                          i_Filial_Id                  => i_Filial_Id,
                                                                                          i_Question_Types             => v_Question_Type_Ids,
                                                                                          i_Has_Writing_Question       => Ptrn.Has_Writing_Question,
                                                                                          i_Max_Count_Writing_Question => Ptrn.Max_Cnt_Writing_Question,
                                                                                          i_Used_Question_Ids          => v_Result),
                                                  i_Result_Size => Ptrn.Quantity);
    
      if Ptrn.Quantity > v_Question_Ids.Count then
        select q.Name
          bulk collect
          into v_Question_Type_Names
          from Hln_Question_Types q
         where q.Company_Id = Ptrn.Company_Id
           and q.Filial_Id = Ptrn.Filial_Id
           and q.Question_Type_Id member of v_Question_Type_Ids
         order by q.Order_No;
      
        Hln_Error.Raise_003(i_Exam_Name          => r_Exam.Name,
                            i_Pattern_Name       => Fazo.Gather(v_Question_Type_Names, ', '),
                            i_Pattern_Quantity   => Ptrn.Quantity,
                            i_Questions_Quantity => v_Question_Ids.Count);
      end if;
    
      v_Result := v_Result multiset union v_Question_Ids;
    end loop;
  
    return v_Result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Attestation
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Attestation_Id number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hln_Dirty_Attestations q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Attestation_Id = i_Attestation_Id;
  exception
    when No_Data_Found then
      insert into Hln_Dirty_Attestations
        (Company_Id, Filial_Id, Attestation_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Attestation_Id);
    
      b.Add_Post_Callback('begin hln_core.attestation_change_status; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Change_Status is
    v_All_Count    number;
    v_New_Count    number;
    v_Finish_Count number;
  begin
    for r in (select *
                from Hln_Dirty_Attestations)
    loop
      select count(*),
             sum(Decode(w.Status, Hln_Pref.c_Testing_Status_New, 1, 0)),
             sum(Decode(w.Status, Hln_Pref.c_Testing_Status_Finished, 1, 0))
        into v_All_Count, v_New_Count, v_Finish_Count
        from Hln_Attestation_Testings q
        join Hln_Testings w
          on w.Company_Id = q.Company_Id
         and w.Testing_Id = q.Testing_Id
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Attestation_Id = r.Attestation_Id;
    
      z_Hln_Attestations.Update_One(i_Company_Id     => r.Company_Id,
                                    i_Filial_Id      => r.Filial_Id,
                                    i_Attestation_Id => r.Attestation_Id,
                                    i_Status         => Option_Varchar2(Md_Util.Decode(v_All_Count,
                                                                                       v_New_Count,
                                                                                       Hln_Pref.c_Testing_Status_New,
                                                                                       v_Finish_Count,
                                                                                       Hln_Pref.c_Testing_Status_Finished,
                                                                                       Hln_Pref.c_Attestation_Status_Processing)));
    end loop;
  
    delete Hln_Dirty_Attestations;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Generate_Daily_Notifications
  (
    i_Company_Id number,
    i_Lang_Code  varchar2
  ) is
    v_Period_Begin date := sysdate;
    v_Period_End   date := v_Period_Begin + 1;
    v_User_System  number := Md_Pref.User_System(i_Company_Id);
    v_Filial_Head  number := Md_Pref.Filial_Head(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr,
                      i_Lang_Code    => i_Lang_Code);
    
      for Test in (select cast(multiset (select (select t.Person_Id
                                          from Hln_Testings t
                                         where t.Company_Id = p.Company_Id
                                           and t.Filial_Id = p.Filial_Id
                                           and t.Testing_Id = p.Testing_Id) Person_Id
                                  from Hln_Attestation_Testings p
                                 where p.Company_Id = q.Company_Id
                                   and p.Filial_Id = q.Filial_Id
                                   and p.Attestation_Id = q.Attestation_Id) as Array_Number) Person_Ids,
                          q.Begin_Time_Period_Begin,
                          q.Attestation_Number
                     from Hln_Attestations q
                    where q.Company_Id = r.Company_Id
                      and q.Filial_Id = r.Filial_Id
                      and q.Status = Hln_Pref.c_Attestation_Status_New
                      and q.Begin_Time_Period_Begin between v_Period_Begin and v_Period_End)
      loop
        Href_Core.Send_Notification(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Title      => t('today, you have attestation with $1{attestation_number} at $2{begin_time}',
                                                      Test.Attestation_Number,
                                                      to_char(Test.Begin_Time_Period_Begin, 'hh12:mi')),
                                    i_Person_Ids => Test.Person_Ids);
      end loop;
    
      for Training in (select (cast(multiset (select p.Person_Id
                                       from Hln_Training_Persons p
                                      where p.Company_Id = q.Company_Id
                                        and p.Filial_Id = q.Filial_Id
                                        and p.Training_Id = q.Training_Id) as Array_Number)) Person_Ids, --
                              w.Begin_Date,
                              w.Training_Number
                         from Hln_Training_Persons q
                         join Hln_Trainings w
                           on w.Company_Id = q.Company_Id
                          and w.Filial_Id = q.Filial_Id
                          and w.Training_Id = q.Training_Id
                        where w.Company_Id = r.Company_Id
                          and w.Filial_Id = r.Filial_Id
                          and w.Status = Hln_Pref.c_Training_Status_New
                          and w.Begin_Date between v_Period_Begin and v_Period_End)
      loop
        Href_Core.Send_Notification(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Title      => t('today, you have training with $1{training_number} at $2{begin_time}',
                                                      Training.Training_Number,
                                                      to_char(Training.Begin_Date, 'hh12:mi')),
                                    i_Person_Ids => Training.Person_Ids);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Generate_Daily_Notifications is
  begin
    for Cmp in (select c.Company_Id, c.Lang_Code
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Verifix_Settings.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Generate_Daily_Notifications(i_Company_Id => Cmp.Company_Id, i_Lang_Code => Cmp.Lang_Code);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

end Hln_Core;
/

create or replace package Hln_Error is
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Group_Names varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Exam_Name varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Exam_Name          varchar2,
    i_Pattern_Name       varchar2,
    i_Pattern_Quantity   number,
    i_Questions_Quantity number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Question_Group_Name varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Question_Group_Name varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Question_Type_Name varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_007(i_Question_Type_Name varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Question_Id varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Question_Id varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Question_Id varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Exam_Question_Count number,
    i_Question_Count      number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Sum_Quantity        number,
    i_Exam_Question_Count number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Testing_Number     varchar2,
    i_Attestation_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Testing_Number number);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Testing_Number varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Testing_Number varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Begin_Time     varchar2,
    i_Testing_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Begin_Time     varchar2,
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Testing_Number varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Testing_Number varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_027
  (
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_029
  (
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_030
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Current_Date   date,
    i_Testing_Date   date,
    i_Testing_Number varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Attestation_Number varchar2,
    i_Status_Name        varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Attestation_Number varchar2,
    i_Person_Names       varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_035
  (
    i_Attestation_Number varchar2,
    i_Status_Name        varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_038
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_039
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_040
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_041
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_043
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  -----------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Training_Number varchar2);
  ---------------------------------------------------------------------------------------------------
  Procedure Raise_047
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048
  (
    i_Testing_Number       varchar2,
    i_Attached_Person_Name varchar2,
    i_Person_Name          varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050(i_Training_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Testing_Number varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Testing_Number varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Attestation_Number varchar2,
    i_Period_Begin       date,
    i_Period_End         date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Exam_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Exam_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Subject_Group_Name varchar2);
end Hln_Error;
/
create or replace package body Hln_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HLN:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hln_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Group_Names varchar2) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:$1{question_group_names} are required, question type must be chosen for them',
                         i_Group_Names),
          i_Title   => t('001:title:question type not choosen'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Exam_Name varchar2) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:pick kind of $1{exam_name} is not auto', i_Exam_Name),
          i_S1      => t('002:solution:change the pick kind of $1{exam_name} to auto', i_Exam_Name));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Exam_Name          varchar2,
    i_Pattern_Name       varchar2,
    i_Pattern_Quantity   number,
    i_Questions_Quantity number
  ) is
    v_Required_Amount number := i_Pattern_Quantity - i_Questions_Quantity;
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:not enough questions for pattern, exam name: $1{exam_name}, pattern name: $2{pattern_name}, pattern quantity: $3{pattern_quantity}, question quantity: $4{question_quantity}',
                         i_Exam_Name,
                         i_Pattern_Name,
                         i_Pattern_Quantity,
                         i_Questions_Quantity),
          i_S1      => t('003:solution:add many questions as required in this exam, or reduce the quantity of questions, required amount: $1',
                         v_Required_Amount));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Question_Group_Name varchar2) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:cannot change system question group, question group name: $1{group_name}',
                         i_Question_Group_Name));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Question_Group_Name varchar2) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:cannot delete system question group, question group name: $1{group_name}',
                         i_Question_Group_Name));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_006(i_Question_Type_Name varchar2) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:the group of $1{question_type_name} cannot be changed',
                         i_Question_Type_Name));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_007(i_Question_Type_Name varchar2) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:$1{question_type_name} is system question type, it cannot be deleted',
                         i_Question_Type_Name));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Question_Id varchar2) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:question must include at least 2 options, question_id=$1',
                         i_Question_Id),
          i_Title   => t('008:title:not enough options'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Question_Id varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:there must be at least 1 correct answer, question_id=$1',
                         i_Question_Id),
          i_Title   => t('009:title:no correct answers'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Question_Id varchar2) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:answer type is single but correct answers more than 1, question_id=$1',
                         i_Question_Id),
          i_Title   => t('010:title:multiple correct answers'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Exam_Question_Count number,
    i_Question_Count      number
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:$1{exam_question_count} selected questions are less than $2{question_count} exam questions',
                         i_Exam_Question_Count,
                         i_Question_Count));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Sum_Quantity        number,
    i_Exam_Question_Count number
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:sum of patterns question quantity count($1) must be equal exams question count($2)',
                         i_Sum_Quantity,
                         i_Exam_Question_Count),
          i_Title   => t('012:title:questions count are different'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Testing_Number     varchar2,
    i_Attestation_Number varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:this $1{testing_number} testing depends on $2{attestation_number} attestation',
                         i_Testing_Number,
                         i_Attestation_Number),
          i_Title   => t('013:title:testing depends on attestation'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Testing_Number number) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:examiner and participant must be different, testing id: $1',
                         i_Testing_Number));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:to update testing, status must be new, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('015:title:testing in another status'),
          i_S1      => t('015:solution:change status to new and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Testing_Number varchar2) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:testing status is already new, testing number: $1',
                         i_Testing_Number));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:to enter the testing, testing status must be new, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('017:title:testing in another status'),
          i_S1      => t('017:solution:change status to new and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Testing_Number varchar2) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:to enter the testing, begin time must be set, testing number: $1',
                         i_Testing_Number),
          i_S1      => t('018:solution:set begin time for test and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Begin_Time     varchar2,
    i_Testing_Number varchar2
  ) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:$1{testing_number} testing cannot be execute before $2{begin_time}',
                         i_Testing_Number,
                         i_Begin_Time),
          i_S1      => t('019:solution:wait until $1{begin_time} or change begin time as you need',
                         i_Begin_Time));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Begin_Time     varchar2,
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  ) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:testing executes between $1{begin_time} and $2{end_time}, testing number: $3',
                         i_Begin_Time,
                         i_End_Time,
                         i_Testing_Number));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:to return execute, status must be checking or finished, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('021:title:testing in another status'),
          i_S1      => t('021:solution:change status checking or finished and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:to pause testing, status must be execute, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('022:title:testing in another status'),
          i_S1      => t('022:solution:change status execute and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:to continue testing, status must be pause, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('023:title:testing in another status'),
          i_S1      => t('023:solution:change status pause and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:to return checking, testing status must be finished, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('024:title:testing in another status'),
          i_S1      => t('024:solution:change status finished and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Testing_Number varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:testing already finished, testing number: $1',
                         i_Testing_Number));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Testing_Number varchar2) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:cannot finish testing, writing questions are not checked completely, testing number: $1',
                         i_Testing_Number),
          i_Title   => t('026:title:unchecked answers found'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_027
  (
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  ) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:cannot finish to new status until $1{end_time}, testing number: $2',
                         i_End_Time,
                         i_Testing_Number),
          i_S1      => t('027:solution:wait until $1{end_time} or change end time as you need',
                         i_End_Time));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:to stop testing, status must be executed or paused, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('028:title:testing in another status'),
          i_S1      => t('028:solution:change status execute or pause and try again'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_029
  (
    i_End_Time       varchar2,
    i_Testing_Number varchar2
  ) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:cannot stop testing until $1{end_time}, except attached person, testing number: $2',
                         i_End_Time,
                         i_Testing_Number),
          i_S1      => t('029:solution:wait until $1{end_time}', i_End_Time));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_030
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:to set begin time, status must be new, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('030:title:testing in another status'),
          i_S1      => t('030:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Current_Date   date,
    i_Testing_Date   date,
    i_Testing_Number varchar2
  ) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:current date($1) must be equal to testing date($2), testing number: $3',
                         i_Current_Date,
                         i_Testing_Date,
                         i_Testing_Number));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:to start testing, status must be new, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('032:title:testing in another status'),
          i_S1      => t('032:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Attestation_Number varchar2,
    i_Status_Name        varchar2
  ) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:to save attestation, status must be new, attestation number: $1, current status: $2',
                         i_Attestation_Number,
                         i_Status_Name),
          i_Title   => t('033:title:attestation in another status'),
          i_S1      => t('033:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Attestation_Number varchar2,
    i_Person_Names       varchar2
  ) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:persons must be unique, attestation number: $1, duplicate persons: $2',
                         i_Attestation_Number,
                         i_Person_Names),
          i_Title   => t('034:title:duplicate persons found'),
          i_S1      => t('034:solution:remove dublicate persons'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_035
  (
    i_Attestation_Number varchar2,
    i_Status_Name        varchar2
  ) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:to delete attestation, status must be new, attestation number: $1, current status: $2',
                         i_Attestation_Number,
                         i_Status_Name),
          i_Title   => t('035:title:attestation in another status'),
          i_S1      => t('035:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:to send answer, status must be executed, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('036:title:testing in another status'),
          i_S1      => t('036:solution:change status to executed'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  ) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:answer type of $1{testing_number} testing is single, only one answer can be selected, question id: $2',
                         i_Testing_Number,
                         i_Question_Id),
          i_Title   => t('037:title:several selected answers found'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_038
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  ) is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:answer type is writing, testing number: $1, question id: $2',
                         i_Testing_Number,
                         i_Question_Id),
          i_Title   => t('038:title:answers found'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_039
  (
    i_Testing_Number varchar2,
    i_Question_Id    number
  ) is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:answer type is not writing, testing number: $1, question id: $2',
                         i_Testing_Number,
                         i_Question_Id),
          i_Title   => t('039:title:write answer found'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_040
  (
    i_Testing_Number varchar2,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '040',
          i_Message => t('040:message:to check answers, status must be checking, testing number: $1, current status: $2',
                         i_Testing_Number,
                         i_Status_Name),
          i_Title   => t('040:title:testing in another status'),
          i_S1      => t('040:solution:change status to checking'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_041
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:to save training, status must be new, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('041:title:training in another status'),
          i_S1      => t('041:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:to delete training, status must be new, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('042:title:training in another status'),
          i_S1      => t('042:solution:change status to new'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_043
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '043',
          i_Message => t('043:message:to assess person in training, status must be execute, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('043:title:training in another status'),
          i_S1      => t('043:solution:change status to execute'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:to set new in training, status must be executed, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('044:title:training in another status'),
          i_S1      => t('044:solution:change status to executed'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:to execute training, status must be finished, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('045:title:training in another status'),
          i_S1      => t('045:solution:change status to finished'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Training_Number varchar2) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:to finish training, all persons must be checked, training number: $1',
                         i_Training_Number),
          i_Title   => t('046:title:found unchecked persons'));
  end;

  ---------------------------------------------------------------------------------------------------
  Procedure Raise_047
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:to finish training, status must be executed, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('047:title:training in another status'),
          i_S1      => t('047:solution:change status to executed'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048
  (
    i_Testing_Number       varchar2,
    i_Attached_Person_Name varchar2,
    i_Person_Name          varchar2
  ) is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:testing atteched to $1{attached_person_name}, not to $2{person_name}, testing number: $3',
                         i_Attached_Person_Name,
                         i_Person_Name,
                         i_Testing_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Name varchar2) is
  begin
    Error(i_Code    => '049',
          i_Message => t('049:message:$1{question_type_name} not found among question types', i_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050(i_Training_Number varchar2) is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:only admin or mentor can assess, training number: $1',
                         i_Training_Number),
          i_Title   => t('050:title:not access to assess'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051
  (
    i_Training_Number varchar2,
    i_Status_Name     varchar2
  ) is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:to assess training, status must be executed, training number: $1, current status: $2',
                         i_Training_Number,
                         i_Status_Name),
          i_Title   => t('051:title:training in another status'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052 is
  begin
    Error(i_Code => '052', i_Message => t('052:message:you must select at least one subject'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053 is
  begin
    Error(i_Code    => '053',
          i_Message => t('053:message:testing period change value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Testing_Number varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  ) is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:testing must be begin between period begin and period end, testing number: $1, period begin: $2, period end: $3',
                         i_Testing_Number,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('054:title:you can not start testing in this time'),
          i_S1      => t('054:solution:change period begin and period end time'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Testing_Number varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  ) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:begin time period begin must be less than begin time period end, testing number: $1, begin time: $2, end time: $3',
                         i_Testing_Number,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('055:title:period times are in valid'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Attestation_Number varchar2,
    i_Period_Begin       date,
    i_Period_End         date
  ) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:begin time period begin must be less than begin time period end, attestation number: $1, begin time: $2, end time: $3',
                         i_Attestation_Number,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('056:title:period times are in valid'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Exam_Name varchar2) is
  begin
    Error(i_Code    => '057',
          i_Message => t('057:message:if this exam for recruitment, pick kind must be manual, exam name: $1{exam_name}',
                         i_Exam_Name),
          i_Title   => t('057:title:pick kind must be manual'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  ) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:find question with file, if this vacancy for recruitment file should not be set in question or in option, exam name: $1{exam_name}, question id: $2{question_id}',
                         i_Exam_Name,
                         i_Question_Id),
          i_Title   => t('058:title:question not validate'),
          i_S1      => t('058:solution:find this question, remove all files, in question and in options, and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  ) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:if this vacancy for recruitment, options must be less than 4, exam name: $1{exam_name}, question id: $2{question_id}',
                         i_Exam_Name,
                         i_Question_Id),
          i_Title   => t('059:title:question not validate'),
          i_S1      => t('059:solution:find this question, reduce number of options, and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Exam_Name   varchar2,
    i_Question_Id varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:if this vacancy for recruitment, answer type of question must be Single, exam name: $1{exam_name}, question id: $2{question_id}',
                         i_Exam_Name,
                         i_Question_Id),
          i_Title   => t('060:title:question not validate'),
          i_S1      => t('060:solution:find this question, change answer type to Single, and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Exam_Name varchar2) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:old exam was for recrutiment, new exam is not, you can not edit if its already set for recruitment, exam name: $1{exam_name}',
                         i_Exam_Name),
          i_Title   => t('061:title:you can not update exam'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Subject_Group_Name varchar2) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:subjects not found for this subject group, subject group name: $1',
                         i_Subject_Group_Name),
          i_Title   => t('062:title:subjects not found'));
  end;

end Hln_Error;
/

create or replace package Hln_Next is
  ----------------------------------------------------------------------------------------------------
  Function Question_Group_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Question_Type_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Question_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Question_Option_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Exam_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Pattern_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Testing_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Attestation_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Subject_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Training_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Training_Subject_Group_Id return number;
end Hln_Next;
/
create or replace package body Hln_Next is
  ----------------------------------------------------------------------------------------------------
  Function Question_Group_Id return number is
  begin
    return Hln_Question_Groups_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Question_Type_Id return number is
  begin
    return Hln_Question_Types_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Question_Id return number is
  begin
    return Hln_Questions_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Question_Option_Id return number is
  begin
    return Hln_Question_Options_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Exam_Id return number is
  begin
    return Hln_Exams_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Pattern_Id return number is
  begin
    return Hln_Exam_Patterns_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Testing_Id return number is
  begin
    return Hln_Testings_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Attestation_Id return number is
  begin
    return Hln_Attestations_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Subject_Id return number is
  begin
    return Hln_Training_Subjects_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Training_Id return number is
  begin
    return Hln_Trainings_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Training_Subject_Group_Id return number is
  begin
    return Hln_Training_Subject_Groups_Sq.Nextval;
  end;

end Hln_Next;
/

create or replace package Hln_Pref is
  ----------------------------------------------------------------------------------------------------
  type Question_Option_Rt is record(
    Question_Option_Id number,
    name               varchar2(1000 char),
    File_Sha           varchar2(64),
    Is_Correct         varchar2(1),
    Order_No           number(2));
  type Question_Option_Nt is table of Question_Option_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Question_Group_Rt is record(
    Question_Group_Id number,
    Question_Type_Id  number);
  type Question_Group_Nt is table of Question_Group_Rt;
  ----------------------------------------------------------------------------------------------------
  type Question_Rt is record(
    Company_Id   number,
    Filial_Id    number,
    Question_Id  number,
    name         varchar2(2000 char),
    Answer_Type  varchar2(1),
    Code         varchar2(50 char),
    State        varchar2(1),
    Writing_Hint varchar2(500 char),
    Files        Array_Varchar2,
    Options      Question_Option_Nt,
    Group_Binds  Question_Group_Nt);
  ----------------------------------------------------------------------------------------------------  
  type Exam_Question_Rt is record(
    Question_Id number,
    Order_No    number);
  type Exam_Question_Nt is table of Exam_Question_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Exam_Pattern_Rt is record(
    Pattern_Id               number,
    Quantity                 number,
    Has_Writing_Question     varchar2(1),
    Max_Cnt_Writing_Question number,
    Order_No                 number,
    Question_Types           Question_Group_Nt);
  type Exam_Pattern_Nt is table of Exam_Pattern_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Exam_Rt is record(
    Company_Id          number,
    Filial_Id           number,
    Exam_Id             number,
    name                varchar2(100 char),
    Pick_Kind           varchar2(1),
    Duration            number(5),
    Passing_Score       number(4),
    Passing_Percentage  number(3),
    Question_Count      number(4),
    Randomize_Questions varchar2(1),
    Randomize_Options   varchar2(1),
    For_Recruitment     varchar2(1),
    State               varchar2(1),
    Exam_Question       Exam_Question_Nt,
    Exam_Pattern        Exam_Pattern_Nt);
  ----------------------------------------------------------------------------------------------------
  type Testing_Rt is record(
    Testing_Id number,
    Person_Id  number,
    Exam_Id    number);
  type Testing_Nt is table of Testing_Rt;
  ----------------------------------------------------------------------------------------------------
  type Attestation_Rt is record(
    Company_Id              number,
    Filial_Id               number,
    Attestation_Id          number,
    Attestation_Number      varchar2(50),
    name                    varchar2(100 char),
    Attestation_Date        date,
    Begin_Time_Period_Begin date,
    Begin_Time_Period_End   date,
    Examiner_Id             number,
    Note                    varchar2(300 char),
    Testings                Testing_Nt);
  ----------------------------------------------------------------------------------------------------
  type Training_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Training_Id      number,
    Training_Number  varchar2(50),
    Begin_Date       date,
    Mentor_Id        number,
    Subject_Group_Id number,
    Subject_Ids      Array_Number,
    Address          varchar2(300 char),
    Persons          Array_Number);
  ----------------------------------------------------------------------------------------------------  
  type Training_Subject_Group_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Subject_Group_Id number,
    name             varchar(100 char),
    Code             varchar2(50),
    State            varchar2(1),
    Subject_Ids      Array_Number);
  ----------------------------------------------------------------------------------------------------  
  -- exam pick kinds
  ----------------------------------------------------------------------------------------------------  
  c_Exam_Pick_Kind_Manual constant varchar2(1) := 'M';
  c_Exam_Pick_Kind_Auto   constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- answer types
  ----------------------------------------------------------------------------------------------------
  c_Answer_Type_Single   varchar2(1) := 'S';
  c_Answer_Type_Multiple varchar2(1) := 'M';
  c_Answer_Type_Writing  varchar2(1) := 'W';
  ----------------------------------------------------------------------------------------------------  
  -- testing statuses
  ----------------------------------------------------------------------------------------------------
  c_Testing_Status_New      varchar2(1) := 'N';
  c_Testing_Status_Executed varchar2(1) := 'E';
  c_Testing_Status_Paused   varchar2(1) := 'P';
  c_Testing_Status_Checking varchar2(1) := 'C';
  c_Testing_Status_Finished varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- attestation statuses
  ----------------------------------------------------------------------------------------------------
  c_Attestation_Status_New        varchar2(1) := 'N';
  c_Attestation_Status_Processing varchar2(1) := 'P';
  c_Attestation_Status_Finished   varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------
  -- training statuses
  ----------------------------------------------------------------------------------------------------
  c_Training_Status_New      varchar2(1) := 'N';
  c_Training_Status_Executed varchar2(1) := 'E';
  c_Training_Status_Finished varchar2(1) := 'F';
  ----------------------------------------------------------------------------------------------------  
  -- passed indeterminate
  ----------------------------------------------------------------------------------------------------  
  c_Passed_Indeterminate varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  -- action kinds
  ----------------------------------------------------------------------------------------------------
  c_Action_Kind_Testing     constant varchar2(1) := 'T'; -- (T)esting
  c_Action_Kind_Attestation constant varchar2(1) := 'A'; -- (A)ttestation
  c_Action_Kind_Training    constant varchar2(1) := 'R'; -- t(R)aining
  ----------------------------------------------------------------------------------------------------
  -- person kind
  ----------------------------------------------------------------------------------------------------
  c_Person_Kind_Mentor      constant varchar2(1) := 'M'; -- (M)entor
  c_Person_Kind_Examiner    constant varchar2(1) := 'E'; -- (E)xaminer
  c_Person_Kind_Participant constant varchar2(1) := 'P'; -- (P)articipant
  ----------------------------------------------------------------------------------------------------
  -- testing period change setting
  ----------------------------------------------------------------------------------------------------  
  c_Testing_Period_Change_Setting constant varchar2(50) := 'VHR:HLN:TESTING_PERIOD_CHANGE';
end Hln_Pref;
/
create or replace package body Hln_Pref is
end Hln_Pref;
/

create or replace package Hln_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Required_Groups
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Question_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Question_New
  (
    o_Question     in out nocopy Hln_Pref.Question_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Question_Id  number,
    i_Name         varchar2,
    i_Answer_Type  varchar2,
    i_Code         varchar2,
    i_State        varchar2,
    i_Writing_Hint varchar2,
    i_Files        Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Add_Option
  (
    p_Question           in out nocopy Hln_Pref.Question_Rt,
    i_Question_Option_Id number,
    i_Name               varchar2,
    i_File_Sha           varchar2,
    i_Is_Correct         varchar2,
    i_Order_No           number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Question_Add_Group_Bind
  (
    p_Question          in out nocopy Hln_Pref.Question_Rt,
    i_Question_Group_Id number,
    i_Question_Type_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Exam_New
  (
    o_Exam                out Hln_Pref.Exam_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Exam_Id             number,
    i_Name                varchar2,
    i_Pick_Kind           varchar2,
    i_Duration            number,
    i_Passing_Score       number,
    i_Passing_Percentage  number,
    i_Question_Count      number,
    i_Randomize_Questions varchar2,
    i_Randomize_Options   varchar2,
    i_For_Recruitment     varchar2,
    i_State               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Add_Question
  (
    p_Exam        in out nocopy Hln_Pref.Exam_Rt,
    i_Question_Id number,
    i_Order_No    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Add_Pattern
  (
    p_Exam                     in out nocopy Hln_Pref.Exam_Rt,
    i_Pattern_Id               number,
    i_Quantity                 number,
    i_Has_Writing_Question     varchar2,
    i_Max_Cnt_Writing_Question number,
    i_Order_No                 number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Pattern_Add_Question_Type
  (
    p_Pattern           in out nocopy Hln_Pref.Exam_Pattern_Rt,
    i_Question_Group_Id number,
    i_Question_Type_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Training_New
  (
    o_Training         out Hln_Pref.Training_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Training_Id      number,
    i_Training_Number  varchar2,
    i_Begin_Date       date,
    i_Mentor_Id        number,
    i_Subject_Group_Id number,
    i_Subject_Ids      Array_Number,
    i_Address          varchar2,
    i_Persons          Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_New
  (
    o_Attestation             out Hln_Pref.Attestation_Rt,
    i_Company_Id              number,
    i_Filial_Id               number,
    i_Attestation_Id          number,
    i_Attestation_Number      varchar2,
    i_Name                    varchar2,
    i_Attestation_Date        date,
    i_Begin_Time_Period_Begin date,
    i_Begin_Time_Period_End   date,
    i_Examiner_Id             number,
    i_Note                    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Add_Testing
  (
    p_Attestation in out nocopy Hln_Pref.Attestation_Rt,
    i_Testing_Id  number,
    i_Person_Id   number,
    i_Exam_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Access_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Question_Type_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Has_Writing_Question
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Randomizer_Array
  (
    i_Array       Array_Number,
    i_Result_Size number := null
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Gen_Questions
  (
    i_Company_Id                 number,
    i_Filial_Id                  number,
    i_Question_Types             Array_Number,
    i_Has_Writing_Question       varchar2,
    i_Max_Count_Writing_Question number,
    i_Used_Question_Ids          Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Attestation_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Assess
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Mentor_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Function Testing_Period_Change_Setting_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Validate_Exam_Questions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Name  varchar2,
    i_Question   Hln_Pref.Exam_Question_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Function t_Answer_Type(i_Answer_Type varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Answer_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Pick_Kind(i_Pick_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Pick_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Attach
  (
    i_Person_Type   varchar2,
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Detach
  (
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Update
  (
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status(i_Testing_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Testing_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Attestation_Status(i_Attestation_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Attestation_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Training_Status(i_Training_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Training_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Passed_Indeterminate return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Action_Kind(i_Action_Kind varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Kind(i_Person_Kind varchar2) return varchar2;
end Hln_Util;
/
create or replace package body Hln_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HLN:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Required_Groups
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Question_Id number
  ) is
    v_Group_Ids   Array_Number;
    v_Group_Names Array_Varchar2;
  begin
    select g.Question_Group_Id
      bulk collect
      into v_Group_Ids
      from Hln_Question_Groups g
     where g.Company_Id = i_Company_Id
       and g.Filial_Id = i_Filial_Id
       and g.State = 'A'
       and g.Is_Required = 'Y'
       and not exists (select 1
              from Hln_Question_Group_Binds t
             where t.Company_Id = g.Company_Id
               and t.Filial_Id = g.Filial_Id
               and t.Question_Id = i_Question_Id
               and t.Question_Group_Id = g.Question_Group_Id);
  
    if v_Group_Ids.Count > 0 then
      select g.Name
        bulk collect
        into v_Group_Names
        from Hln_Question_Groups g
       where g.Company_Id = i_Company_Id
         and g.Filial_Id = i_Filial_Id
         and g.Question_Group_Id member of v_Group_Ids;
    
      Hln_Error.Raise_001(Fazo.Gather(v_Group_Names, ', '));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_New
  (
    o_Question     in out nocopy Hln_Pref.Question_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Question_Id  number,
    i_Name         varchar2,
    i_Answer_Type  varchar2,
    i_Code         varchar2,
    i_State        varchar2,
    i_Writing_Hint varchar2,
    i_Files        Array_Varchar2
  ) is
  begin
    o_Question.Company_Id   := i_Company_Id;
    o_Question.Filial_Id    := i_Filial_Id;
    o_Question.Question_Id  := i_Question_Id;
    o_Question.Name         := i_Name;
    o_Question.Answer_Type  := i_Answer_Type;
    o_Question.Code         := i_Code;
    o_Question.State        := i_State;
    o_Question.Writing_Hint := i_Writing_Hint;
    o_Question.Files        := i_Files;
  
    o_Question.Options     := Hln_Pref.Question_Option_Nt();
    o_Question.Group_Binds := Hln_Pref.Question_Group_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Add_Option
  (
    p_Question           in out nocopy Hln_Pref.Question_Rt,
    i_Question_Option_Id number,
    i_Name               varchar2,
    i_File_Sha           varchar2,
    i_Is_Correct         varchar2,
    i_Order_No           number
  ) is
    v_Option Hln_Pref.Question_Option_Rt;
  begin
    v_Option.Question_Option_Id := i_Question_Option_Id;
    v_Option.Name               := i_Name;
    v_Option.File_Sha           := i_File_Sha;
    v_Option.Is_Correct         := i_Is_Correct;
    v_Option.Order_No           := i_Order_No;
  
    p_Question.Options.Extend;
    p_Question.Options(p_Question.Options.Count) := v_Option;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Question_Add_Group_Bind
  (
    p_Question          in out nocopy Hln_Pref.Question_Rt,
    i_Question_Group_Id number,
    i_Question_Type_Id  number
  ) is
    v_Group_Binds Hln_Pref.Question_Group_Rt;
  begin
    v_Group_Binds.Question_Group_Id := i_Question_Group_Id;
    v_Group_Binds.Question_Type_Id  := i_Question_Type_Id;
  
    p_Question.Group_Binds.Extend;
    p_Question.Group_Binds(p_Question.Group_Binds.Count) := v_Group_Binds;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Exam_New
  (
    o_Exam                out Hln_Pref.Exam_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Exam_Id             number,
    i_Name                varchar2,
    i_Pick_Kind           varchar2,
    i_Duration            number,
    i_Passing_Score       number,
    i_Passing_Percentage  number,
    i_Question_Count      number,
    i_Randomize_Questions varchar2,
    i_Randomize_Options   varchar2,
    i_For_Recruitment     varchar2,
    i_State               varchar2
  ) is
  begin
    o_Exam.Company_Id          := i_Company_Id;
    o_Exam.Filial_Id           := i_Filial_Id;
    o_Exam.Exam_Id             := i_Exam_Id;
    o_Exam.Name                := i_Name;
    o_Exam.Pick_Kind           := i_Pick_Kind;
    o_Exam.Duration            := i_Duration;
    o_Exam.Passing_Score       := i_Passing_Score;
    o_Exam.Passing_Percentage  := i_Passing_Percentage;
    o_Exam.Question_Count      := i_Question_Count;
    o_Exam.Randomize_Questions := i_Randomize_Questions;
    o_Exam.Randomize_Options   := i_Randomize_Options;
    o_Exam.For_Recruitment     := i_For_Recruitment;
    o_Exam.State               := i_State;
  
    o_Exam.Exam_Question := Hln_Pref.Exam_Question_Nt();
    o_Exam.Exam_Pattern  := Hln_Pref.Exam_Pattern_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Add_Question
  (
    p_Exam        in out nocopy Hln_Pref.Exam_Rt,
    i_Question_Id number,
    i_Order_No    number
  ) is
    v_Question Hln_Pref.Exam_Question_Rt;
  begin
    v_Question.Question_Id := i_Question_Id;
    v_Question.Order_No    := i_Order_No;
  
    p_Exam.Exam_Question.Extend;
    p_Exam.Exam_Question(p_Exam.Exam_Question.Count) := v_Question;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Exam_Add_Pattern
  (
    p_Exam                     in out nocopy Hln_Pref.Exam_Rt,
    i_Pattern_Id               number,
    i_Quantity                 number,
    i_Has_Writing_Question     varchar2,
    i_Max_Cnt_Writing_Question number,
    i_Order_No                 number
  ) is
    v_Pattern Hln_Pref.Exam_Pattern_Rt;
  begin
    v_Pattern.Pattern_Id               := i_Pattern_Id;
    v_Pattern.Quantity                 := i_Quantity;
    v_Pattern.Has_Writing_Question     := i_Has_Writing_Question;
    v_Pattern.Max_Cnt_Writing_Question := i_Max_Cnt_Writing_Question;
    v_Pattern.Order_No                 := i_Order_No;
    v_Pattern.Question_Types           := Hln_Pref.Question_Group_Nt();
  
    p_Exam.Exam_Pattern.Extend;
    p_Exam.Exam_Pattern(p_Exam.Exam_Pattern.Count) := v_Pattern;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Pattern_Add_Question_Type
  (
    p_Pattern           in out nocopy Hln_Pref.Exam_Pattern_Rt,
    i_Question_Group_Id number,
    i_Question_Type_Id  number
  ) is
    v_Type Hln_Pref.Question_Group_Rt;
  begin
    v_Type.Question_Group_Id := i_Question_Group_Id;
    v_Type.Question_Type_Id  := i_Question_Type_Id;
  
    p_Pattern.Question_Types.Extend;
    p_Pattern.Question_Types(p_Pattern.Question_Types.Count) := v_Type;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Training_New
  (
    o_Training         out Hln_Pref.Training_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Training_Id      number,
    i_Training_Number  varchar2,
    i_Begin_Date       date,
    i_Mentor_Id        number,
    i_Subject_Group_Id number,
    i_Subject_Ids      Array_Number,
    i_Address          varchar2,
    i_Persons          Array_Number
  ) is
  begin
    o_Training.Company_Id       := i_Company_Id;
    o_Training.Filial_Id        := i_Filial_Id;
    o_Training.Training_Id      := i_Training_Id;
    o_Training.Training_Number  := i_Training_Number;
    o_Training.Begin_Date       := i_Begin_Date;
    o_Training.Mentor_Id        := i_Mentor_Id;
    o_Training.Subject_Group_Id := i_Subject_Group_Id;
    o_Training.Subject_Ids      := i_Subject_Ids;
    o_Training.Address          := i_Address;
    o_Training.Persons          := i_Persons;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_New
  (
    o_Attestation             out Hln_Pref.Attestation_Rt,
    i_Company_Id              number,
    i_Filial_Id               number,
    i_Attestation_Id          number,
    i_Attestation_Number      varchar2,
    i_Name                    varchar2,
    i_Attestation_Date        date,
    i_Begin_Time_Period_Begin date,
    i_Begin_Time_Period_End   date,
    i_Examiner_Id             number,
    i_Note                    varchar2
  ) is
  begin
    o_Attestation.Company_Id              := i_Company_Id;
    o_Attestation.Filial_Id               := i_Filial_Id;
    o_Attestation.Attestation_Id          := i_Attestation_Id;
    o_Attestation.Attestation_Number      := i_Attestation_Number;
    o_Attestation.Name                    := i_Name;
    o_Attestation.Attestation_Date        := i_Attestation_Date;
    o_Attestation.Begin_Time_Period_Begin := i_Begin_Time_Period_Begin;
    o_Attestation.Begin_Time_Period_End   := i_Begin_Time_Period_End;
    o_Attestation.Examiner_Id             := i_Examiner_Id;
    o_Attestation.Note                    := i_Note;
  
    o_Attestation.Testings := Hln_Pref.Testing_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attestation_Add_Testing
  (
    p_Attestation in out nocopy Hln_Pref.Attestation_Rt,
    i_Testing_Id  number,
    i_Person_Id   number,
    i_Exam_Id     number
  ) is
    v_Testing Hln_Pref.Testing_Rt;
  begin
    v_Testing.Testing_Id := i_Testing_Id;
    v_Testing.Person_Id  := i_Person_Id;
    v_Testing.Exam_Id    := i_Exam_Id;
  
    p_Attestation.Testings.Extend;
    p_Attestation.Testings(p_Attestation.Testings.Count) := v_Testing;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Access_Person
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number,
    i_Person_Id  number
  ) is
    v_Attached_Person_Name varchar2(100);
    v_Person_Name          varchar2(100);
    r_Testing              Hln_Testings%rowtype;
  begin
    r_Testing := z_Hln_Testings.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Testing_Id => i_Testing_Id);
  
    if r_Testing.Person_Id <> i_Person_Id then
      v_Attached_Person_Name := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, i_Person_Id => r_Testing.Person_Id).Name;
      v_Person_Name          := z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id).Name;
    
      Hln_Error.Raise_048(i_Testing_Number       => r_Testing.Testing_Number,
                          i_Attached_Person_Name => v_Attached_Person_Name,
                          i_Person_Name          => v_Person_Name);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Question_Type_Id_By_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select Qt.Question_Type_Id
      into result
      from Hln_Question_Types Qt
     where Qt.Company_Id = i_Company_Id
       and Qt.Filial_Id = i_Filial_Id
       and Lower(Qt.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Hln_Error.Raise_049(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Writing_Question
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hln_Questions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Answer_Type = Hln_Pref.c_Answer_Type_Writing
       and exists (select *
              from Hln_Testing_Questions Tq
             where Tq.Company_Id = i_Company_Id
               and Tq.Filial_Id = i_Filial_Id
               and Tq.Testing_Id = i_Testing_Id
               and Tq.Question_Id = q.Question_Id)
       and Rownum = 1;
    return 'Y';
  
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Randomizer_Array
  (
    i_Array       Array_Number,
    i_Result_Size number := null
  ) return Array_Number is
    v_Array       Array_Number := i_Array;
    v_Result_Size number := Least(Nvl(i_Result_Size, i_Array.Count), i_Array.Count);
    v_Size        number := i_Array.Count;
    result        Array_Number := Array_Number();
    v_Random      number;
  begin
    Result.Extend(v_Result_Size);
  
    for i in 1 .. v_Result_Size
    loop
      v_Random := Href_Util.Random_Integer(i_Low => 1, i_High => v_Size);
    
      result(i) := v_Array(v_Random);
    
      v_Array(v_Random) := v_Array(v_Size);
      v_Array(v_Size) := result(i);
      v_Size := v_Size - 1;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Gen_Questions
  (
    i_Company_Id                 number,
    i_Filial_Id                  number,
    i_Question_Types             Array_Number,
    i_Has_Writing_Question       varchar2,
    i_Max_Count_Writing_Question number,
    i_Used_Question_Ids          Array_Number
  ) return Array_Number is
    v_Question_Ids         Array_Number;
    v_Writing_Question_Ids Array_Number := Array_Number();
  begin
    if i_Has_Writing_Question = 'Y' then
      select q.Question_Id
        bulk collect
        into v_Writing_Question_Ids
        from Hln_Questions q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Question_Id not in (select Column_Value
                                     from table(i_Used_Question_Ids))
         and q.State = 'A'
         and q.Answer_Type = Hln_Pref.c_Answer_Type_Writing
         and not exists (select 1
                from table(i_Question_Types)
               where not exists (select *
                        from Hln_Question_Group_Binds Gb
                       where Gb.Company_Id = q.Company_Id
                         and Gb.Filial_Id = q.Filial_Id
                         and Gb.Question_Id = q.Question_Id
                         and Gb.Question_Type_Id = Column_Value));
    
      if i_Max_Count_Writing_Question is not null then
        v_Writing_Question_Ids := Randomizer_Array(v_Writing_Question_Ids,
                                                   i_Max_Count_Writing_Question);
      end if;
    end if;
  
    select q.Question_Id
      bulk collect
      into v_Question_Ids
      from Hln_Questions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Question_Id not in (select Column_Value
                                   from table(i_Used_Question_Ids))
       and q.State = 'A'
       and q.Answer_Type in (Hln_Pref.c_Answer_Type_Multiple, Hln_Pref.c_Answer_Type_Single)
       and not exists (select 1
              from table(i_Question_Types)
             where not exists (select 1
                      from Hln_Question_Group_Binds Gb
                     where Gb.Company_Id = q.Company_Id
                       and Gb.Filial_Id = q.Filial_Id
                       and Gb.Question_Id = q.Question_Id
                       and Gb.Question_Type_Id = Column_Value));
  
    return v_Writing_Question_Ids multiset union v_Question_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Attestation_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Testing_Id number
  ) return number is
    result number;
  begin
    select q.Attestation_Id
      into result
      from Hln_Attestation_Testings q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Testing_Id = i_Testing_Id
       and Rownum = 1;
  
    return result;
  
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Assess
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Training_Id number,
    i_Mentor_Id   number
  ) is
    r_Training Hln_Trainings%rowtype;
  begin
    r_Training := z_Hln_Trainings.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Training_Id => i_Training_Id);
  
    if r_Training.Mentor_Id <> i_Mentor_Id and Md_Pref.User_Admin(i_Company_Id) <> Md_Env.User_Id then
      Hln_Error.Raise_050(r_Training.Training_Number);
    end if;
  
    if r_Training.Status <> Hln_Pref.c_Training_Status_Executed then
      Hln_Error.Raise_051(i_Training_Number => r_Training.Training_Number,
                          i_Status_Name     => Hln_Util.t_Training_Status(r_Training.Status));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Testing_Period_Change_Setting_Load
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Hln_Pref.c_Testing_Period_Change_Setting),
               'N');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Check_Questions
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Question_Id number,
    i_Exam_Name   varchar2
  ) is
    v_Count number;
  begin
    select count(*)
      into v_Count
      from Hln_Question_Options Qo
     where Qo.Company_Id = i_Company_Id
       and Qo.Filial_Id = i_Filial_Id
       and Qo.Question_Id = i_Question_Id;
  
    if v_Count > 4 then
      Hln_Error.Raise_059(i_Exam_Name => i_Exam_Name, i_Question_Id => i_Question_Id);
    end if;
  
    select 1
      into v_Count
      from Dual
     where exists (select 1
              from Hln_Question_Files q
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Question_Id = i_Question_Id)
        or exists (select 1
              from Hln_Question_Options Qo
             where Qo.Company_Id = i_Company_Id
               and Qo.Filial_Id = i_Filial_Id
               and Qo.Question_Id = i_Question_Id
               and Qo.File_Sha is not null);
  
    Hln_Error.Raise_058(i_Exam_Name => i_Exam_Name, i_Question_Id => i_Question_Id);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Validate_Exam_Questions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Exam_Name  varchar2,
    i_Question   Hln_Pref.Exam_Question_Nt
  ) is
    v_Question Hln_Pref.Exam_Question_Rt;
    r_Quesiton Hln_Questions%rowtype;
  begin
    for i in 1 .. i_Question.Count
    loop
      v_Question := i_Question(i);
    
      r_Quesiton := z_Hln_Questions.Lock_Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Question_Id => v_Question.Question_Id);
    
      if r_Quesiton.Answer_Type <> Hln_Pref.c_Answer_Type_Single then
        Hln_Error.Raise_060(i_Exam_Name => i_Exam_Name, i_Question_Id => v_Question.Question_Id);
      end if;
    
      Check_Questions(i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Question_Id => v_Question.Question_Id,
                      i_Exam_Name   => i_Exam_Name);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Answer_Type_Single return varchar2 is
  begin
    return t('answer_type:single');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Answer_Type_Multiple return varchar2 is
  begin
    return t('answer_type:multiple');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Answer_Type_Writing return varchar2 is
  begin
    return t('answer_type:writing');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Answer_Type(i_Answer_Type varchar2) return varchar2 is
  begin
    return --
    case i_Answer_Type --
    when Hln_Pref.c_Answer_Type_Single then t_Answer_Type_Single --
    when Hln_Pref.c_Answer_Type_Multiple then t_Answer_Type_Multiple --
    when Hln_Pref.c_Answer_Type_Writing then t_Answer_Type_Writing --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Answer_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hln_Pref.c_Answer_Type_Single,
                                          Hln_Pref.c_Answer_Type_Multiple,
                                          Hln_Pref.c_Answer_Type_Writing),
                           Array_Varchar2(t_Answer_Type_Single,
                                          t_Answer_Type_Multiple,
                                          t_Answer_Type_Writing));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pick_Kind_Manual return varchar2 is
  begin
    return t('pick_kind:manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pick_Kind_Auto return varchar2 is
  begin
    return t('pick_kind:auto');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Pick_Kind(i_Pick_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Pick_Kind --
    when Hln_Pref.c_Exam_Pick_Kind_Manual then t_Pick_Kind_Manual --
    when Hln_Pref.c_Exam_Pick_Kind_Auto then t_Pick_Kind_Auto --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Pick_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hln_Pref.c_Exam_Pick_Kind_Manual,
                                          Hln_Pref.c_Exam_Pick_Kind_Auto),
                           Array_Varchar2(t_Pick_Kind_Manual, --
                                          t_Pick_Kind_Auto));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Attach
  (
    i_Person_Type   varchar2,
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2 is
  begin
    if i_Is_Period = 'Y' then
      return t('you attached as $1{person_type} to $2{action_kind} with $3{action_number} on between $4{begin_time} and $5{end_time}',
               i_Person_Type,
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'),
               to_char(i_End_Time, 'DD.MM.YYYY HH24:MI'));
    else
      return t('you attached as $1{person_type} to $2{action_kind} with $3{action_number} on $4{begin_time}',
               i_Person_Type,
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Detach
  (
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2 is
  begin
    if i_Is_Period = 'Y' then
      return t('you detached from $1{action_kind} with $2{action_number} on between $3{begin_time} and $4{end_time}',
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'),
               to_char(i_End_Time, 'DD.MM.YYYY HH24:MI'));
    else
      return t('you detached from $1{action_kind} with $2{action_number} on $3{begin_time}',
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Action_Update
  (
    i_Action_Number varchar2,
    i_Begin_Time    date,
    i_End_Time      date := null,
    i_Is_Period     varchar2 := null,
    i_Action_Kind   varchar2
  ) return varchar2 is
  begin
    if i_Is_Period = 'Y' then
      return t('your $1{action_kind} info updated to $2{action_number} on between $3{begin_time} and $4{end_time}',
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'),
               to_char(i_End_Time, 'DD.MM.YYYY HH24:MI'));
    else
      return t('your $1{action_kind} info updated to $2{action_number} on $3{begin_time}',
               i_Action_Kind,
               i_Action_Number,
               to_char(i_Begin_Time, 'DD.MM.YYYY HH24:MI'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status_New return varchar2 is
  begin
    return t('testing_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status_Executed return varchar2 is
  begin
    return t('testing_status:executed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status_Paused return varchar2 is
  begin
    return t('testing_status:paused');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status_Checking return varchar2 is
  begin
    return t('testing_status:checking');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status_Finished return varchar2 is
  begin
    return t('testing_status:finished');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing_Status(i_Testing_Status varchar2) return varchar2 is
  begin
    return --
    case i_Testing_Status --
    when Hln_Pref.c_Testing_Status_New then t_Testing_Status_New --
    when Hln_Pref.c_Testing_Status_Executed then t_Testing_Status_Executed --
    when Hln_Pref.c_Testing_Status_Paused then t_Testing_Status_Paused --
    when Hln_Pref.c_Testing_Status_Checking then t_Testing_Status_Checking --
    when Hln_Pref.c_Testing_Status_Finished then t_Testing_Status_Finished --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Testing_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hln_Pref.c_Testing_Status_New,
                                          Hln_Pref.c_Testing_Status_Executed,
                                          Hln_Pref.c_Testing_Status_Paused,
                                          Hln_Pref.c_Testing_Status_Checking,
                                          Hln_Pref.c_Testing_Status_Finished),
                           Array_Varchar2(t_Testing_Status_New,
                                          t_Testing_Status_Executed,
                                          t_Testing_Status_Paused,
                                          t_Testing_Status_Checking,
                                          t_Testing_Status_Finished));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attestation_Status_New return varchar2 is
  begin
    return t('attestation_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attestation_Status_Processing return varchar2 is
  begin
    return t('attestation_status:processing');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attestation_Status_Finished return varchar2 is
  begin
    return t('attestation_status:finished');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attestation_Status(i_Attestation_Status varchar2) return varchar2 is
  begin
    return --
    case i_Attestation_Status --
    when Hln_Pref.c_Attestation_Status_New then t_Attestation_Status_New --
    when Hln_Pref.c_Attestation_Status_Processing then t_Attestation_Status_Processing --
    when Hln_Pref.c_Attestation_Status_Finished then t_Attestation_Status_Finished --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Attestation_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hln_Pref.c_Attestation_Status_New,
                                          Hln_Pref.c_Attestation_Status_Processing,
                                          Hln_Pref.c_Attestation_Status_Finished),
                           Array_Varchar2(t_Attestation_Status_New,
                                          t_Attestation_Status_Processing,
                                          t_Attestation_Status_Finished));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Training_Status_New return varchar2 is
  begin
    return t('training_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Training_Status_Executed return varchar2 is
  begin
    return t('training_status:executed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Training_Status_Finished return varchar2 is
  begin
    return t('training_status:finished');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Training_Status(i_Training_Status varchar2) return varchar2 is
  begin
    return --
    case i_Training_Status --
    when Hln_Pref.c_Training_Status_New then t_Training_Status_New --
    when Hln_Pref.c_Training_Status_Executed then t_Training_Status_Executed --
    when Hln_Pref.c_Training_Status_Finished then t_Training_Status_Finished --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Training_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hln_Pref.c_Training_Status_New,
                                          Hln_Pref.c_Training_Status_Executed,
                                          Hln_Pref.c_Training_Status_Finished),
                           Array_Varchar2(t_Training_Status_New,
                                          t_Training_Status_Executed,
                                          t_Training_Status_Finished));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Passed_Indeterminate return varchar2 is
  begin
    return t('passed: indeterminate');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Testing return varchar2 is
  begin
    return t('testing');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Attestation return varchar2 is
  begin
    return t('attestation');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Training return varchar2 is
  begin
    return t('training');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Action_Kind(i_Action_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Action_Kind --
    when Hln_Pref.c_Action_Kind_Testing then t_Testing --
    when Hln_Pref.c_Action_Kind_Attestation then t_Attestation --
    when Hln_Pref.c_Action_Kind_Training then t_Training --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Mentor return varchar2 is
  begin
    return t('mentor');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Examiner return varchar2 is
  begin
    return t('examiner');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Participant return varchar2 is
  begin
    return t('participant');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Kind(i_Person_Kind varchar2) return varchar2 is
  begin
    return case i_Person_Kind --
    when Hln_Pref.c_Person_Kind_Mentor then t_Mentor --
    when Hln_Pref.c_Person_Kind_Examiner then t_Examiner --
    when Hln_Pref.c_Person_Kind_Participant then t_Participant --
    end;
  end;

end Hln_Util;
/

create or replace package Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Currency_Id number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache;
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Robot_Book_Transactions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  );
end Hpd_Core;
/
create or replace package body Hpd_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Staffs p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Staffs p
        (p.Company_Id, p.Filial_Id, p.Staff_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Insert_Valid_Auto_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Journal_Id number,
    i_Page_Id    number
  ) is
  begin
    update Hpd_Auto_Created_Robots p
       set p.Valid = 'Y'
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Robot_Id = i_Robot_Id;
  
    if sql%notfound then
      insert into Hpd_Auto_Created_Robots p
        (p.Company_Id, p.Filial_Id, p.Robot_Id, p.Journal_Id, p.Page_Id, p.Valid)
      values
        (i_Company_Id, i_Filial_Id, i_Robot_Id, i_Journal_Id, i_Page_Id, 'Y');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Implicit_Robot_Save
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Journal_Id  number,
    i_Page_Id     number,
    i_Open_Date   date,
    i_Close_Date  date,
    i_Schedule_Id number,
    i_Days_Limit  number,
    i_Currency_Id number,
    i_Robot       Hpd_Pref.Robot_Rt,
    i_Indicators  Href_Pref.Indicator_Nt,
    i_Oper_Types  Href_Pref.Oper_Type_Nt
  ) is
    r_Setting Hrm_Settings%rowtype;
    v_Robot   Hrm_Pref.Robot_Rt;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    Update_Insert_Valid_Auto_Robot(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot.Robot_Id,
                                   i_Journal_Id => i_Journal_Id,
                                   i_Page_Id    => i_Page_Id);
  
    Hrm_Util.Robot_New(o_Robot                    => v_Robot,
                       i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Robot_Id                 => i_Robot.Robot_Id,
                       i_Name                     => Hrm_Util.Robot_Name(i_Company_Id  => i_Company_Id,
                                                                         i_Filial_Id   => i_Filial_Id,
                                                                         i_Robot_Id    => i_Robot.Robot_Id,
                                                                         i_Division_Id => i_Robot.Division_Id,
                                                                         i_Job_Id      => i_Robot.Job_Id,
                                                                         i_Rank_Id     => i_Robot.Rank_Id),
                       i_Code                     => null,
                       i_Robot_Group_Id           => null,
                       i_Division_Id              => i_Robot.Division_Id,
                       i_Job_Id                   => i_Robot.Job_Id,
                       i_Org_Unit_Id              => i_Robot.Org_Unit_Id,
                       i_State                    => 'A',
                       i_Opened_Date              => i_Open_Date,
                       i_Closed_Date              => i_Close_Date,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Rank_Id                  => i_Robot.Rank_Id,
                       i_Vacation_Days_Limit      => i_Days_Limit,
                       i_Labor_Function_Id        => null,
                       i_Description              => null,
                       i_Hiring_Condition         => null,
                       i_Contractual_Wage         => case
                                                       when i_Robot.Wage_Scale_Id is not null then
                                                        'N'
                                                       else
                                                        'Y'
                                                     end,
                       i_Position_Employment_Kind => case
                                                       when i_Robot.Employment_Type =
                                                            Hpd_Pref.c_Employment_Type_Contractor then
                                                        Hrm_Pref.c_Position_Employment_Contractor
                                                       else
                                                        Hrm_Pref.c_Position_Employment_Staff
                                                     end,
                       i_Wage_Scale_Id            => i_Robot.Wage_Scale_Id,
                       i_Currency_Id              => i_Currency_Id,
                       i_Access_Hidden_Salary     => 'N');
    v_Robot.Indicators := i_Indicators;
    v_Robot.Oper_Types := i_Oper_Types;
  
    Hrm_Api.Robot_Save(v_Robot,
                       i_Self => z_Hpd_Journal_Pages.Lock_Load(i_Company_Id => i_Company_Id, --
                                 i_Filial_Id => i_Filial_Id, --
                                 i_Page_Id => i_Page_Id).Employee_Id = Md_Env.User_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Unnecessary_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    r_Setting Hrm_Settings%rowtype;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Robot_Id
                from Hpd_Auto_Created_Robots p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Journal_Id = i_Journal_Id
                 and p.Valid = 'N')
    loop
      Hrm_Api.Robot_Delete(i_Company_Id => r.Company_Id,
                           i_Filial_Id  => r.Filial_Id,
                           i_Robot_Id   => r.Robot_Id);
    end loop;
  
    delete Hpd_Auto_Created_Robots;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'A' then
      Hpd_Error.Raise_001(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => i_Staff_Id));
    end if;
  
    z_Href_Staffs.Delete_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Update
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Robot_Id        number,
    i_Fte             number,
    i_Fte_Id          number,
    i_Rank_Id         number,
    i_Schedule_Id     number,
    i_Employment_Type varchar2
  ) is
    r_Staff     Href_Staffs%rowtype;
    r_Robot     Mrf_Robots%rowtype;
    r_Hrm_Robot Hrm_Robots%rowtype;
    r_Employee  Mhr_Employees%rowtype;
  begin
    r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Robot_Id   => i_Robot_Id);
  
    r_Hrm_Robot := z_Hrm_Robots.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Employee_Id => r_Staff.Employee_Id);
  
    z_Href_Staffs.Update_One(i_Company_Id      => i_Company_Id,
                             i_Filial_Id       => i_Filial_Id,
                             i_Staff_Id        => i_Staff_Id,
                             i_Robot_Id        => Option_Number(r_Robot.Robot_Id),
                             i_Division_Id     => Option_Number(r_Robot.Division_Id),
                             i_Job_Id          => Option_Number(r_Robot.Job_Id),
                             i_Org_Unit_Id     => Option_Number(r_Hrm_Robot.Org_Unit_Id),
                             i_Fte             => Option_Number(i_Fte),
                             i_Fte_Id          => Option_Number(i_Fte_Id),
                             i_Rank_Id         => Option_Number(i_Rank_Id),
                             i_Schedule_Id     => Option_Number(i_Schedule_Id),
                             i_Employment_Type => Option_Varchar2(i_Employment_Type));
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and
       not (Fazo.Equal(r_Employee.Division_Id, r_Robot.Division_Id) and
        Fazo.Equal(r_Employee.Job_Id, r_Robot.Job_Id) and --
        Fazo.Equal(r_Employee.Rank_Id, i_Rank_Id)) --
     then
      Href_Api.Employee_Update(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Employee_Id => r_Staff.Employee_Id,
                               i_Division_Id => r_Robot.Division_Id,
                               i_Job_Id      => r_Robot.Job_Id,
                               i_Rank_Id     => i_Rank_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Intersection_Staff
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) is
    v_Dismissal_Date       date;
    v_Staff_Id             number;
    v_Intersected_Staff_Id number;
    v_Intersection_Date    date;
  begin
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                 and q.State = 'A'
               order by q.Hiring_Date)
    loop
      if v_Dismissal_Date is not null and r.Hiring_Date <= v_Dismissal_Date then
        v_Intersected_Staff_Id := r.Staff_Id;
        v_Intersection_Date    := Least(Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date),
                                        v_Dismissal_Date);
        exit;
      end if;
      v_Staff_Id       := r.Staff_Id;
      v_Dismissal_Date := Nvl(r.Dismissal_Date, Href_Pref.c_Max_Date);
    end loop;
  
    if v_Intersected_Staff_Id is not null then
      Hpd_Error.Raise_002(i_Staff_Name        => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => v_Staff_Id),
                          i_Intersection_Date => v_Intersection_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    r_Robot        Hpd_Trans_Robots%rowtype;
    r_Rank         Hpd_Trans_Ranks%rowtype;
    r_Schedule     Hpd_Trans_Schedules%rowtype;
    v_Date         date := Trunc(sysdate);
    v_Desired_Date date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.State = 'P' then
      return;
    end if;
  
    v_Desired_Date := Greatest(r_Staff.Hiring_Date,
                               Least(v_Date, Nvl(r_Staff.Dismissal_Date, v_Date)));
  
    r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Period     => v_Desired_Date);
  
    r_Rank := Hpd_Util.Closest_Rank(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Period     => v_Desired_Date);
  
    r_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Period     => v_Desired_Date);
  
    Staff_Update(i_Company_Id      => i_Company_Id,
                 i_Filial_Id       => i_Filial_Id,
                 i_Staff_Id        => i_Staff_Id,
                 i_Robot_Id        => r_Robot.Robot_Id,
                 i_Fte             => r_Robot.Fte,
                 i_Fte_Id          => r_Robot.Fte_Id,
                 i_Rank_Id         => r_Rank.Rank_Id,
                 i_Schedule_Id     => r_Schedule.Schedule_Id,
                 i_Employment_Type => r_Robot.Employment_Type);
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary and --
       r_Staff.Dismissal_Date < v_Date then
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = r_Staff.Employee_Id)
      loop
        Htt_Core.Location_Remove_Person(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Location_Id => r.Location_Id,
                                        i_Person_Id   => r.Person_Id);
      end loop;
    
      if z_Md_User_Filials.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_User_Id    => r_Staff.Employee_Id,
                                      i_Filial_Id  => i_Filial_Id) then
        Md_Api.User_Remove_Filial(i_Company_Id   => i_Company_Id,
                                  i_User_Id      => r_Staff.Employee_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Remove_Roles => false);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      for St in (select *
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date - 1)
                  order by q.Hiring_Date)
      loop
        Staff_Refresh_Cache(i_Company_Id => St.Company_Id,
                            i_Filial_Id  => St.Filial_Id,
                            i_Staff_Id   => St.Staff_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Staff_Refresh_Cache is
  begin
    for r in (select q.*
                from Hpd_Journal_Page_Cache q)
    loop
      Staff_Refresh_Cache(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Person_Locations
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Employee_Id
                from Hpd_Journal_Page_Cache p
               group by p.Company_Id, p.Filial_Id, p.Employee_Id)
    loop
      Htt_Core.Person_Sync_Locations(i_Company_Id => r.Company_Id,
                                     i_Filial_Id  => r.Filial_Id,
                                     i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Hiring_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Transfer_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) and
       not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.Company_Id, p.Filial_Id, p.Staff_Id
                from Hpd_Journal_Page_Cache p)
    loop
      Hrm_Core.Sync_Division_Managers(i_Company_Id => r.Company_Id,
                                      i_Filial_Id  => r.Filial_Id,
                                      i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissed_To_Candidate
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if not Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
      return;
    end if;
  
    for r in (select p.*, Ds.Employment_Source_Id
                from Hpd_Journal_Page_Cache p
                join Hpd_Dismissal_Transactions Dt
                  on Dt.Company_Id = p.Company_Id
                 and Dt.Filial_Id = p.Filial_Id
                 and Dt.Staff_Id = p.Staff_Id
                join Hpd_Dismissals Ds
                  on Ds.Company_Id = Dt.Company_Id
                 and Ds.Filial_Id = Dt.Filial_Id
                 and Ds.Page_Id = Dt.Page_Id)
    loop
      Href_Core.Dismissed_Candidate_Save(i_Company_Id           => r.Company_Id,
                                         i_Filial_Id            => r.Filial_Id,
                                         i_Staff_Id             => r.Staff_Id,
                                         i_Employment_Source_Id => r.Employment_Source_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Journal_Page_Cache
  (
    i_Company_Id      number,
    i_Journal_Type_Id number
  ) is
  begin
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Journal_Staff_Refresh_Cache;
    end if;
  
    Sync_Person_Locations(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Sync_Division_Managers(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    Dismissed_To_Candidate(i_Company_Id => i_Company_Id, i_Journal_Type_Id => i_Journal_Type_Id);
  
    delete Hpd_Journal_Page_Cache;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fill_Journal_Staff_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    insert into Hpd_Journal_Page_Cache
      (Company_Id, Filial_Id, Staff_Id, Employee_Id)
      select p.Company_Id, p.Filial_Id, p.Staff_Id, p.Employee_Id
        from Hpd_Journal_Pages p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Journal_Id = i_Journal_Id
         and not exists (select *
                from Hpd_Journal_Page_Cache q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Run_Refresh_Cache is
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Verifix_Settings.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Staff_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Robot_Person_Refresh_Cache(Cmp.Company_Id);
      
        Hrm_Core.Sync_Division_Managers(Cmp.Company_Id);
      
        Htt_Core.Person_Sync_Locations(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Turnover_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Days_Kind  varchar2,
    i_Days_Count number
  ) is
    v_Planned_Days number;
    v_Used_Days    number := 0;
    v_Periods      Array_Date;
  
    --------------------------------------------------
    Procedure Insert_Turnover is
      g Hpd_Vacation_Turnover%rowtype;
    begin
      for r in (select *
                  from (select *
                          from Hpd_Vacation_Turnover t
                         where t.Company_Id = i_Company_Id
                           and t.Filial_Id = i_Filial_Id
                           and t.Staff_Id = i_Staff_Id
                           and t.Period < i_Begin_Date
                           and t.Period >= Trunc(i_Begin_Date, 'yyyy')
                         order by t.Period desc)
                 where Rownum = 1)
      loop
        g              := r;
        g.Period       := i_Begin_Date;
        g.Planned_Days := Nvl(v_Planned_Days, g.Planned_Days);
        g.Used_Days    := g.Used_Days + v_Used_Days;
      
        z_Hpd_Vacation_Turnover.Insert_Row(g);
        return;
      end loop;
    
      g.Company_Id   := i_Company_Id;
      g.Filial_Id    := i_Filial_Id;
      g.Staff_Id     := i_Staff_Id;
      g.Period       := i_Begin_Date;
      g.Planned_Days := Coalesce(v_Planned_Days,
                                 Hpd_Util.Get_Closest_Vacation_Days_Limit(i_Company_Id => i_Company_Id,
                                                                          i_Filial_Id  => i_Filial_Id,
                                                                          i_Staff_Id   => i_Staff_Id,
                                                                          i_Period     => i_Begin_Date),
                                 0);
      g.Used_Days    := v_Used_Days;
    
      z_Hpd_Vacation_Turnover.Insert_Row(g);
    end;
  begin
    case i_Days_Kind
      when Hpd_Pref.c_Vacation_Turnover_Planned_Days then
        v_Planned_Days := i_Days_Count;
      when Hpd_Pref.c_Vacation_Turnover_Used_Days then
        v_Used_Days := i_Days_Count;
      else
        Hpd_Error.Raise_003;
    end case;
  
    update Hpd_Vacation_Turnover Lt
       set Lt.Planned_Days = Nvl(v_Planned_Days, Lt.Planned_Days),
           Lt.Used_Days    = Lt.Used_Days + v_Used_Days
     where Lt.Company_Id = i_Company_Id
       and Lt.Filial_Id = i_Filial_Id
       and Lt.Staff_Id = i_Staff_Id
       and Lt.Period >= i_Begin_Date
       and (i_End_Date is null or Lt.Period <= i_End_Date)
    returning Lt.Period bulk collect into v_Periods;
  
    if i_Begin_Date not member of v_Periods then
      Insert_Turnover;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Default_Calendar_Id number;
    v_Vacation_Tk_Id      number;
    v_Official_Days_Cnt   number;
    v_Vacation_Days_Cnt   number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Days_Cnt := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Calendar_Id => v_Default_Calendar_Id,
                                                             i_Begin_Date  => i_Begin_Date,
                                                             i_End_Date    => i_End_Date);
  
    select count(*)
      into v_Vacation_Days_Cnt
      from Hpd_Timeoff_Days p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timeoff_Date between i_Begin_Date and i_End_Date
       and p.Time_Kind_Id = v_Vacation_Tk_Id
       and p.Turnout_Locked = 'N';
  
    return Greatest(v_Vacation_Days_Cnt - v_Official_Days_Cnt, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Min_Cloned date;
  
    --------------------------------------------------
    Function Limit_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Agreements p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Staff_Id = i_Staff_Id
         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
         and p.Period < i_Start_Date
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
  begin
    if Limit_Exists then
      return;
    end if;
  
    select Nvl(min(q.Period), Href_Pref.c_Max_Date)
      into v_Min_Cloned
      from Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    for r in (select p.*
                from Hpd_Journal_Timeoffs p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Begin_Date >= i_Start_Date
                 and p.Begin_Date < v_Min_Cloned
                 and exists (select *
                        from Hpd_Vacations q
                       where q.Company_Id = p.Company_Id
                         and q.Filial_Id = p.Filial_Id
                         and q.Timeoff_Id = p.Timeoff_Id))
    loop
      Spend_Vacation_Days(i_Company_Id => r.Company_Id,
                          i_Filial_Id  => r.Filial_Id,
                          i_Staff_Id   => r.Staff_Id,
                          i_Begin_Date => r.Begin_Date,
                          i_End_Date   => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Vacation_Turnovers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Min_Date   date;
    v_Days_Count number;
  begin
    select min(q.Period)
      into v_Min_Date
      from Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit;
  
    delete Hpd_Vacation_Turnover p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Period < Nvl(v_Min_Date, Href_Pref.c_Max_Date);
  
    if sql%rowcount > 0 and v_Min_Date is not null then
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => Trunc(v_Min_Date, 'yyyy'),
                                         i_End_Date   => v_Min_Date - 1);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Min_Date,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Min_Date),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => -v_Days_Count);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Vacation_Turnover
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Staff_Name Mr_Natural_Persons.Name%type;
    v_Period     date;
    v_Planned    number;
    v_Used       number;
  begin
    v_Staff_Name := Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
  
    select Qr.Period, Qr.Planned_Days, Qr.Used_Days
      into v_Period, v_Planned, v_Used
      from (select *
              from Hpd_Vacation_Turnover p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Staff_Id = i_Staff_Id
               and p.Free_Days < 0
             order by p.Period) Qr
     where Rownum = 1;
  
    Hpd_Error.Raise_004(i_Staff_Name    => v_Staff_Name,
                        i_Exceed_Date   => v_Period,
                        i_Exceed_Amount => v_Used - v_Planned);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Clone
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date
  ) is
  begin
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  
    insert into Hpd_Cloned_Agreements
      (Company_Id, Filial_Id, Staff_Id, Trans_Type, Period, Trans_Id, Action)
      select q.Company_Id, q.Filial_Id, q.Staff_Id, q.Trans_Type, q.Period, q.Trans_Id, q.Action
        from Hpd_Agreements q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = i_Trans_Type
         and q.Period >= i_Begin_Date;
  
    delete Hpd_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Period >= i_Begin_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Fill
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) is
    c_Format constant varchar2(20) := 'yyyymmdd';
    v_Start          date := i_Start_Date;
    f_Date_Set       Fazo.Boolean_Code_Aat;
    v_Key            varchar2(100);
    r_Trans          Hpd_Transactions%rowtype;
    r_Last_Trans     Hpd_Transactions%rowtype;
    v_Dismissal_Date date;
  begin
    f_Date_Set(to_char(v_Start, c_Format)) := true;
  
    for r in (select q.Begin_Date, q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.Begin_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.Begin_Date, c_Format)) := true;
    
      if r.End_Date is not null then
        f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
      end if;
    end loop;
  
    for r in (select q.End_Date
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = i_Trans_Type
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted
                 and q.End_Date >= v_Start)
    loop
      f_Date_Set(to_char(r.End_Date + 1, c_Format)) := true;
    end loop;
  
    for r in (select q.Dismissal_Date
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Event != Hpd_Pref.c_Transaction_Event_To_Be_Deleted)
    loop
      if v_Dismissal_Date is not null then
        Hpd_Error.Raise_005(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_First_Dismissal  => v_Dismissal_Date,
                            i_Second_Dismissal => r.Dismissal_Date);
      end if;
    
      f_Date_Set(to_char(r.Dismissal_Date, c_Format)) := true;
      v_Dismissal_Date := r.Dismissal_Date;
    end loop;
  
    Agreement_Clone(i_Company_Id => i_Company_Id, --
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type,
                    i_Begin_Date => v_Start);
  
    v_Key := f_Date_Set.First;
  
    r_Last_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Trans_Type => i_Trans_Type,
                                                      i_Period     => to_date(v_Key, c_Format) - 1);
    while v_Key is not null
    loop
      v_Start := to_date(v_Key, c_Format);
    
      if v_Start = v_Dismissal_Date then
        if r_Last_Trans.Trans_Id is not null then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => null,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Stop);
        end if;
      
        exit;
      end if;
    
      r_Trans := Hpd_Util.Get_Changing_Transaction(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => v_Start);
    
      if r_Trans.Trans_Id is not null then
        if not Fazo.Equal(r_Trans.Trans_Id, r_Last_Trans.Trans_Id) then
          z_Hpd_Agreements.Insert_One(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Trans_Type => i_Trans_Type,
                                      i_Period     => v_Start,
                                      i_Trans_Id   => r_Trans.Trans_Id,
                                      i_Action     => Hpd_Pref.c_Transaction_Action_Continue);
        end if;
      
        r_Last_Trans := r_Trans;
      end if;
    
      v_Key := f_Date_Set.Next(v_Key);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Robot_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    r_Robot            Hpd_Trans_Robots%rowtype;
    v_Last_Trans_Id    number;
    v_Robot_Trans_Id   number;
    v_Last_Action      varchar2(1);
    v_Position_Booking varchar2(1) := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Position_Booking;
  begin
    -- clear robot transactions
    for r in (select q.Trans_Id, q.Robot_Id
                from Hrm_Robot_Transactions q
                join Hpd_Robot_Trans_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Trans_Id = w.Robot_Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and w.Staff_Id = i_Staff_Id
                 and q.Trans_Date >= i_Start_Date)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    Hpd_Util.Closest_Trans_Info(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                                i_Period     => i_Start_Date - 1,
                                o_Trans_Id   => v_Last_Trans_Id,
                                o_Action     => v_Last_Action);
  
    if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
      r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Last_Trans_Id);
    end if;
  
    for r in (select *
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Robot
                 and q.Period >= i_Start_Date
               order by q.Period)
    loop
      if v_Last_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Robot_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Robot_Id    => r_Robot.Robot_Id,
                                                    i_Occupy_Date => r.Period,
                                                    i_Fte         => r_Robot.Fte,
                                                    i_Tag         => v_Last_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        r_Robot := z_Hpd_Trans_Robots.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => r.Trans_Id);
      
        v_Robot_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Robot_Id    => r_Robot.Robot_Id,
                                                  i_Occupy_Date => r.Period,
                                                  i_Fte         => r_Robot.Fte,
                                                  i_Tag         => r.Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      end if;
    
      v_Last_Trans_Id := r.Trans_Id;
      v_Last_Action   := r.Action;
    end loop;
  
    if v_Position_Booking = 'Y' then
      for r in (select q.Robot_Id, --
                       Nvl((select f.Fte_Value
                             from Href_Ftes f
                            where f.Company_Id = q.Company_Id
                              and f.Fte_Id = q.Fte_Id),
                           q.Fte) Fte,
                       q.Page_Id,
                       d.Begin_Date,
                       d.End_Date
                  from Hpd_Page_Robots q
                  join Hpd_Journal_Pages p
                    on p.Company_Id = q.Company_Id
                   and p.Filial_Id = q.Filial_Id
                   and p.Page_Id = q.Page_Id
                   and p.Staff_Id = i_Staff_Id
                  join Hpd_Journals j
                    on j.Company_Id = p.Company_Id
                   and j.Filial_Id = p.Filial_Id
                   and j.Journal_Id = p.Journal_Id
                   and j.Posted = 'N'
                  join (select h.Company_Id, --
                              h.Filial_Id,
                              h.Page_Id,
                              h.Hiring_Date    Begin_Date,
                              h.Dismissal_Date End_Date
                         from Hpd_Hirings h
                       union
                       select t.Company_Id,
                              t.Filial_Id,
                              t.Page_Id,
                              t.Transfer_Begin Begin_Date,
                              t.Transfer_End   End_Date
                         from Hpd_Transfers t) d
                    on d.Company_Id = q.Company_Id
                   and d.Filial_Id = q.Filial_Id
                   and d.Page_Id = q.Page_Id
                   and d.Begin_Date >= i_Start_Date
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Is_Booked = 'Y')
      loop
        v_Robot_Trans_Id := Hrm_Core.Robot_Occupy(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Robot_Id    => r.Robot_Id,
                                                  i_Occupy_Date => r.Begin_Date,
                                                  i_Fte         => r.Fte,
                                                  i_Is_Booked   => true,
                                                  i_Tag         => r.Page_Id);
      
        z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Page_Id    => r.Page_Id,
                                           i_Trans_Id   => v_Robot_Trans_Id);
      
        z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => v_Robot_Trans_Id,
                                          i_Staff_Id       => i_Staff_Id);
      
        if r.End_Date is not null then
          v_Robot_Trans_Id := Hrm_Core.Robot_Unoccupy(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Robot_Id    => r.Robot_Id,
                                                      i_Occupy_Date => r.End_Date + 1,
                                                      i_Fte         => r.Fte,
                                                      i_Is_Booked   => true,
                                                      i_Tag         => r.Page_Id);
        
          z_Hpd_Robot_Trans_Pages.Insert_One(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Page_Id    => r.Page_Id,
                                             i_Trans_Id   => v_Robot_Trans_Id);
        
          z_Hpd_Robot_Trans_Staffs.Save_One(i_Company_Id     => i_Company_Id,
                                            i_Filial_Id      => i_Filial_Id,
                                            i_Robot_Trans_Id => v_Robot_Trans_Id,
                                            i_Staff_Id       => i_Staff_Id);
        end if;
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Schedule_Agreements
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Schedule_Id number;
    v_Interval    Hpd_Pref.Transaction_Part_Rt;
  begin
    for i in 1 .. i_Changed_Intervals.Count
    loop
      v_Interval := i_Changed_Intervals(i);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Interval.Part_Begin);
    
      Htt_Core.Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Schedule_Id => v_Schedule_Id,
                                     i_Begin_Date  => v_Interval.Part_Begin,
                                     i_End_Date    => v_Interval.Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Integrate_Vacation_Limit_Agreements
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Start_Date date
  ) is
    v_Weighted_Plan_Sum number;
    v_Period_Plan       number := 0;
    v_Year_Begin        date;
    v_Year_End          date;
  begin
    for r in (select p.Days_Limit,
                     Greatest(q.Period, Trunc(i_Start_Date, 'yyyy')) Period_Begin,
                     Lead(q.Period) Over(order by q.Period) - 1 Period_End
                from Hpd_Agreements q
                join Hpd_Trans_Vacation_Limits p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Trans_Id = q.Trans_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                 and q.Action = Hpd_Pref.c_Transaction_Action_Continue
                 and (q.Period >= Trunc(i_Start_Date, 'yyyy') or
                     q.Period = (select max(k.Period)
                                    from Hpd_Agreements k
                                   where k.Company_Id = i_Company_Id
                                     and k.Filial_Id = i_Filial_Id
                                     and k.Staff_Id = i_Staff_Id
                                     and k.Trans_Type = Hpd_Pref.c_Transaction_Type_Vacation_Limit
                                     and k.Period <= Trunc(i_Start_Date, 'yyyy')))
               order by q.Period)
    loop
      v_Year_Begin  := Trunc(r.Period_Begin, 'yyyy');
      v_Year_End    := Htt_Util.Year_Last_Day(r.Period_Begin);
      v_Period_Plan := r.Days_Limit * (v_Year_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := case
                               when r.Period_Begin <> v_Year_Begin then
                                Nvl(v_Weighted_Plan_Sum, r.Days_Limit * (r.Period_Begin - v_Year_Begin))
                               else
                                0
                             end;
    
      while Trunc(r.Period_Begin, 'yyyy') <> Trunc(r.Period_End, 'yyyy') or r.Period_End is null
      loop
        Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => r.Period_Begin,
                                   i_End_Date   => v_Year_End,
                                   i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                   i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                   (v_Year_End - v_Year_Begin + 1));
      
        r.Period_Begin      := v_Year_End + 1;
        v_Year_Begin        := Trunc(r.Period_Begin, 'yyyy');
        v_Year_End          := Htt_Util.Year_Last_Day(r.Period_Begin);
        v_Weighted_Plan_Sum := 0;
        v_Period_Plan       := r.Days_Limit * (v_Year_End - v_Year_Begin + 1);
      
        exit when r.Period_End is null;
      end loop;
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => r.Period_Begin,
                                 i_End_Date   => r.Period_End,
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Planned_Days,
                                 i_Days_Count => (v_Weighted_Plan_Sum + v_Period_Plan) /
                                                 (v_Year_End - v_Year_Begin + 1));
    
      v_Period_Plan := r.Days_Limit * (r.Period_End - r.Period_Begin + 1);
    
      v_Weighted_Plan_Sum := v_Weighted_Plan_Sum + v_Period_Plan;
    end loop;
  
    Delete_Vacation_Turnovers(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Staff_Id   => i_Staff_Id);
  
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Start_Date => i_Start_Date);
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Changed_Intervals
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Start_Date date
  ) return Hpd_Pref.Transaction_Part_Nt is
    v_Last_Trans_Id number;
    v_Orig_Code     varchar2(4000);
    v_Clone_Code    varchar2(4000);
    v_Part          Hpd_Pref.Transaction_Part_Rt;
    result          Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
  begin
    v_Last_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Period     => i_Start_Date - 1);
  
    v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Trans_Id   => v_Last_Trans_Id,
                                           i_Trans_Type => i_Trans_Type);
  
    v_Clone_Code := v_Orig_Code;
  
    for r in (select Nvl(p.Period, q.Period) Period_Start,
                     Lead(Nvl(p.Period, q.Period)) --
                     Over(order by Nvl(p.Period, q.Period)) - 1 Period_End,
                     p.Trans_Id,
                     q.Trans_Id Clone_Trans_Id,
                     p.Action,
                     q.Action Clone_Action
                from (select *
                        from Hpd_Agreements Og
                       where Og.Company_Id = i_Company_Id
                         and Og.Filial_Id = i_Filial_Id
                         and Og.Staff_Id = i_Staff_Id
                         and Og.Trans_Type = i_Trans_Type
                         and Og.Period >= i_Start_Date) p
                full join (select *
                            from Hpd_Cloned_Agreements Cl
                           where Cl.Company_Id = i_Company_Id
                             and Cl.Filial_Id = i_Filial_Id
                             and Cl.Staff_Id = i_Staff_Id
                             and Cl.Trans_Type = i_Trans_Type) q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Trans_Type = p.Trans_Type
                 and q.Period = p.Period
               order by Nvl(p.Period, q.Period))
    loop
      if r.Clone_Trans_Id is not null and --
         r.Clone_Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Clone_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Trans_Id   => r.Clone_Trans_Id,
                                                i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Clone_Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Clone_Code := Gmap().Json();
      end if;
    
      if r.Trans_Id is not null and --
         r.Action = Hpd_Pref.c_Transaction_Action_Continue then
        v_Orig_Code := Hpd_Util.Get_Trans_Code(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Trans_Id   => r.Trans_Id,
                                               i_Trans_Type => i_Trans_Type);
      end if;
    
      if r.Action = Hpd_Pref.c_Transaction_Action_Stop then
        v_Orig_Code := Gmap().Json();
      end if;
    
      if v_Orig_Code <> v_Clone_Code then
        v_Part.Part_Begin := r.Period_Start;
        v_Part.Part_End   := r.Period_End;
      
        Result.Extend;
        result(Result.Count) := v_Part;
      end if;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Timeoff_Interval_Kind
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Timeoff_Id number
  ) return varchar2 is
    result varchar2(1);
  begin
    select Coalesce((select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation
                      from Hpd_Vacations Vc
                     where Vc.Company_Id = Tn.Company_Id
                       and Vc.Filial_Id = Tn.Filial_Id
                       and Vc.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave
                       from Hpd_Sick_Leaves Sl
                      where Sl.Company_Id = Tn.Company_Id
                        and Sl.Filial_Id = Tn.Filial_Id
                        and Sl.Timeoff_Id = Tn.Timeoff_Id),
                    (select Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip
                       from Hpd_Business_Trips Bt
                      where Bt.Company_Id = Tn.Company_Id
                        and Bt.Filial_Id = Tn.Filial_Id
                        and Bt.Timeoff_Id = Tn.Timeoff_Id),
                    null)
      into result
      from Hpd_Journal_Timeoffs Tn
     where Tn.Company_Id = i_Company_Id
       and Tn.Filial_Id = i_Filial_Id
       and Tn.Timeoff_Id = i_Timeoff_Id;
  
    if result is null then
      b.Raise_Not_Implemented;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Changed_Intervals
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Trans_Type        varchar2,
    i_Changed_Intervals Hpd_Pref.Transaction_Part_Nt
  ) is
    v_Begin_Date    date;
    v_End_Date      date;
    v_Interval_Id   number;
    v_Timeoff_Id    number;
    v_Interval_Kind varchar2(1);
  begin
    if i_Trans_Type <> Hpd_Pref.c_Transaction_Type_Vacation_Limit then
      begin
        select Lc.Begin_Date, Lc.End_Date, Lc.Interval_Id, Lc.Kind
          into v_Begin_Date, v_End_Date, v_Interval_Id, v_Interval_Kind
          from Hpd_Lock_Intervals Lc
         where Lc.Company_Id = i_Company_Id
           and Lc.Filial_Id = i_Filial_Id
           and Lc.Staff_Id = i_Staff_Id
           and exists (select *
                  from table(i_Changed_Intervals) Ch
                 where Ch.Part_Begin <= Lc.End_Date
                   and Nvl(Ch.Part_End, Href_Pref.c_Max_Date) >= Lc.Begin_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          select p.Timeoff_Id
            into v_Timeoff_Id
            from Hpd_Timeoff_Intervals p
           where p.Company_Id = i_Company_Id
             and p.Filial_Id = i_Filial_Id
             and p.Interval_Id = v_Interval_Id;
        
          v_Interval_Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Timeoff_Id => v_Timeoff_Id);
        end if;
      
        Hpd_Error.Raise_006(i_Interval_Kind => v_Interval_Kind,
                            i_Trans_Type    => i_Trans_Type,
                            i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                            i_Begin_Date    => v_Begin_Date,
                            i_End_Date      => v_End_Date);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Aggreement_Check
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy    varchar2(1);
    v_Count    number;
    v_Min_Date date;
    r_Journal  Hpd_Journals%rowtype;
  begin
    select count(1), min(w.Begin_Date)
      into v_Count, v_Min_Date
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress);
  
    -- TODO comment  
    if v_Count = 0 then
      return;
    end if;
  
    select 'x'
      into v_Dummy
      from Hpd_Transactions w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Trans_Type = i_Trans_Type
       and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                       Hpd_Pref.c_Transaction_Event_In_Progress)
       and w.Begin_Date = v_Min_Date
       and w.End_Date is null
       and Rownum = 1;
  exception
    when No_Data_Found then
      select w.Journal_Id
        into r_Journal.Journal_Id
        from Hpd_Transactions w
       where w.Company_Id = i_Company_Id
         and w.Filial_Id = i_Filial_Id
         and w.Staff_Id = i_Staff_Id
         and w.Trans_Type = i_Trans_Type
         and w.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, --
                         Hpd_Pref.c_Transaction_Event_In_Progress)
         and w.Begin_Date = v_Min_Date
       order by w.Order_No desc
       fetch first row only;
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Journal_Id => r_Journal.Journal_Id);
    
      Hpd_Error.Raise_074(i_Journal_Id     => r_Journal.Journal_Id, --
                          i_Journal_Number => r_Journal.Journal_Number,
                          i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Evaluate
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Staff_Id               number,
    i_Trans_Type             varchar2,
    i_Changed_Dismissal_Date date
  ) is
    v_Start             date := i_Changed_Dismissal_Date;
    v_Trans_Start       date;
    v_Changed_Intervals Hpd_Pref.Transaction_Part_Nt;
  begin
    Assert_Aggreement_Check(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id,
                            i_Trans_Type => i_Trans_Type);
  
    select min(q.Begin_Date)
      into v_Trans_Start
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                       Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
  
    v_Start := Least(Nvl(v_Start, v_Trans_Start), Nvl(v_Trans_Start, v_Start));
  
    if v_Start is null then
      Hpd_Error.Raise_030;
    end if;
  
    Agreement_Fill(i_Company_Id => i_Company_Id, --
                   i_Filial_Id  => i_Filial_Id,
                   i_Staff_Id   => i_Staff_Id,
                   i_Trans_Type => i_Trans_Type,
                   i_Start_Date => v_Start);
  
    if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
      v_Changed_Intervals := Get_Changed_Intervals(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Staff_Id   => i_Staff_Id,
                                                   i_Trans_Type => i_Trans_Type,
                                                   i_Start_Date => v_Start);
    
      Assert_Changed_Intervals(i_Company_Id        => i_Company_Id,
                               i_Filial_Id         => i_Filial_Id,
                               i_Staff_Id          => i_Staff_Id,
                               i_Trans_Type        => i_Trans_Type,
                               i_Changed_Intervals => v_Changed_Intervals);
    end if;
  
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        Integrate_Robot_Agreements(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Start_Date => v_Start);
      when Hpd_Pref.c_Transaction_Type_Schedule then
        if not Hpd_Pref.g_Migration_Active and Md_Pref.c_Migr_Company_Id != i_Company_Id then
          Integrate_Schedule_Agreements(i_Company_Id        => i_Company_Id,
                                        i_Filial_Id         => i_Filial_Id,
                                        i_Staff_Id          => i_Staff_Id,
                                        i_Changed_Intervals => v_Changed_Intervals);
        end if;
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        if not Hpd_Pref.g_Migration_Active and v_Changed_Intervals.Count > 0 then
          Integrate_Vacation_Limit_Agreements(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Start_Date => v_Start);
        end if;
      else
        null;
    end case;
  
    -- deleting stacked transactions
    delete from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked transactions
    update Hpd_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Start_Date date first in progress trans before first to_be_integrated/to_be_deleted trans 
  -- %param i_Finish_Date date first in progress trans after last to_be_integrated/to_be_deleted trans max among different trans types
  Procedure Fill_Agreements_Cache
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Start_Date     date,
    i_Finish_Date    date,
    i_Dismissal_Date date
  ) is
    v_Finish_Date date := Least(i_Finish_Date, Nvl(i_Dismissal_Date - 1, i_Finish_Date));
    v_Old_Cache   Hpd_Pref.Agreement_Cache_Nt;
  
    v_Min_Old_Begin date;
    v_Max_Old_End   date;
  
    -------------------------------------------------- 
    Procedure Integrate_Individual_Robot_Schedules is
      v_Cache             Hpd_Pref.Agreement_Cache_Rt;
      v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                         i_Filial_Id  => i_Filial_Id,
                                                         i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    begin
      if v_Old_Cache.Count = 0 then
        v_Old_Cache.Extend;
        v_Old_Cache(1) := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                                      Robot_Id    => -1,
                                                      Schedule_Id => -1,
                                                      Begin_Date  => i_Start_Date,
                                                      End_Date    => v_Finish_Date);
      end if;
    
      if v_Min_Old_Begin is not null then
        -- adding period before old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => Href_Pref.c_Min_Date,
                                               End_Date    => v_Min_Old_Begin - 1);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      if v_Max_Old_End is not null then
        -- adding period after old changes
        -- to register new changes in this period
        v_Cache := Hpd_Pref.Agreement_Cache_Rt(Staff_Id    => i_Staff_Id,
                                               Robot_Id    => -1,
                                               Schedule_Id => -1,
                                               Begin_Date  => case
                                                                when v_Max_Old_End <> Href_Pref.c_Max_Date then
                                                                 v_Max_Old_End + 1
                                                                else
                                                                 v_Max_Old_End
                                                              end,
                                               End_Date    => Href_Pref.c_Max_Date);
      
        v_Old_Cache.Extend;
        v_Old_Cache(v_Old_Cache.Count) := v_Cache;
      end if;
    
      for r in (with Old_Cache as
                   (select Oc.Begin_Date,
                          Oc.End_Date,
                          Oc.Robot_Id,
                          Nvl(Oc.Schedule_Id, -1) Schedule_Id
                     from table(v_Old_Cache) Oc),
                  New_Cache as
                   (select Nc.Begin_Date, Nc.End_Date, Nc.Robot_Id
                     from Hpd_Agreements_Cache Nc
                    where Nc.Company_Id = i_Company_Id
                      and Nc.Filial_Id = i_Filial_Id
                      and Nc.Staff_Id = i_Staff_Id
                      and Nc.Begin_Date between i_Start_Date and v_Finish_Date
                      and Nc.Schedule_Id = v_Robot_Schedule_Id)
                  select q.Robot_Id,
                         Greatest(q.Begin_Date, p.Begin_Date) Begin_Date,
                         Least(q.End_Date, p.End_Date) End_Date
                    from New_Cache q
                    join Old_Cache p
                      on p.Begin_Date <= q.End_Date
                     and p.End_Date >= q.Begin_Date
                     and (p.Robot_Id <> q.Robot_Id or p.Schedule_Id <> v_Robot_Schedule_Id))
      loop
        -- used min with max_date - 1 because later it may be used as end_date + 1
        -- and using max_date + 1 will cause error
        Htt_Core.Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Staff_Id    => i_Staff_Id,
                                               i_Robot_Id    => r.Robot_Id,
                                               i_Schedule_Id => v_Robot_Schedule_Id,
                                               i_Begin_Date  => r.Begin_Date,
                                               i_End_Date    => Least(r.End_Date,
                                                                      Href_Pref.c_Max_Date - 1));
      end loop;
    end;
  begin
    select min(q.Begin_Date), max(q.End_Date)
      into v_Min_Old_Begin, v_Max_Old_End
      from Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date;
  
    delete Hpd_Agreements_Cache q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Begin_Date between i_Start_Date and i_Finish_Date
    returning q.Staff_Id, q.Robot_Id, q.Schedule_Id, q.Begin_Date, q.End_Date bulk collect into v_Old_Cache;
  
    insert into Hpd_Agreements_Cache
      (Company_Id, Filial_Id, Staff_Id, Begin_Date, End_Date, Robot_Id, Schedule_Id)
      with Last_Cache as
       (select Gc.Robot_Id, Gc.Schedule_Id
          from Hpd_Agreements_Cache Gc
         where Gc.Company_Id = i_Company_Id
           and Gc.Filial_Id = i_Filial_Id
           and Gc.Staff_Id = i_Staff_Id
           and i_Start_Date - 1 between Gc.Begin_Date and Gc.End_Date)
      select i_Company_Id,
             i_Filial_Id,
             i_Staff_Id,
             Qr.Period Begin_Date,
             Lead(Qr.Period - 1, 1, v_Finish_Date) Over(order by Qr.Period) End_Date,
             Last_Value(Qr.Robot_Id Ignore nulls) Over(order by Qr.Period) Robot_Id,
             Last_Value(Qr.Schedule_Id Ignore nulls) Over(order by Qr.Period) Schedule_Id
        from (select p.Period, --
                     Nvl(max(Ts.Schedule_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Schedule_Id
                                   from Last_Cache Lc),
                                null)) Schedule_Id,
                     Nvl(max(Tr.Robot_Id),
                         Decode(p.Period,
                                i_Start_Date,
                                (select Lc.Robot_Id
                                   from Last_Cache Lc),
                                null)) Robot_Id
                from Hpd_Agreements p
                left join Hpd_Trans_Schedules Ts
                  on Ts.Company_Id = p.Company_Id
                 and Ts.Filial_Id = p.Filial_Id
                 and Ts.Trans_Id = p.Trans_Id
                left join Hpd_Trans_Robots Tr
                  on Tr.Company_Id = p.Company_Id
                 and Tr.Filial_Id = p.Filial_Id
                 and Tr.Trans_Id = p.Trans_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Staff_Id = i_Staff_Id
                 and p.Period between i_Start_Date and v_Finish_Date
                 and p.Trans_Type in
                     (Hpd_Pref.c_Transaction_Type_Robot, Hpd_Pref.c_Transaction_Type_Schedule)
                 and p.Action = Hpd_Pref.c_Transaction_Action_Continue
               group by p.Period) Qr;
  
    Integrate_Individual_Robot_Schedules;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreements_Evaluate(i_Company_Id number) is
    r_Staff                  Href_Staffs%rowtype;
    r_Employee               Mhr_Employees%rowtype;
    r_Person                 Md_Persons%rowtype;
    v_Changed_Dismissal_Date date;
    v_Dismissal_Date         date;
    v_Min_Change_Date        date;
    v_Max_Change_Date        date;
  
    --------------------------------------------------
    Procedure Check_Transactions(i_Staff Href_Staffs%rowtype) is
    begin
      -- check exists transactions before hiring
      for r in (select *
                  from Hpd_Transactions q
                 where q.Company_Id = i_Staff.Company_Id
                   and q.Filial_Id = i_Staff.Filial_Id
                   and q.Staff_Id = i_Staff.Staff_Id
                   and q.Begin_Date < i_Staff.Hiring_Date
                   and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                   Hpd_Pref.c_Transaction_Event_In_Progress)
                   and Rownum = 1)
      loop
        r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                           i_Filial_Id   => i_Staff.Filial_Id,
                                           i_Employee_Id => i_Staff.Employee_Id);
      
        r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                      i_Person_Id  => i_Staff.Employee_Id);
      
        Hpd_Error.Raise_007(i_Staff_Name  => r_Person.Name,
                            i_Trans_Type  => r.Trans_Type,
                            i_Trans_Date  => r.Begin_Date,
                            i_Hiring_Date => i_Staff.Hiring_Date);
      end loop;
    
      -- check there are other documents after dismissal document
      if i_Staff.Dismissal_Date is not null then
        for r in (select *
                    from Hpd_Transactions q
                   where q.Company_Id = i_Staff.Company_Id
                     and q.Filial_Id = i_Staff.Filial_Id
                     and q.Staff_Id = i_Staff.Staff_Id
                     and q.Begin_Date > i_Staff.Dismissal_Date
                     and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                                     Hpd_Pref.c_Transaction_Event_In_Progress)
                   order by q.Begin_Date
                   fetch first row only)
        loop
          r_Employee := z_Mhr_Employees.Load(i_Company_Id  => i_Staff.Company_Id,
                                             i_Filial_Id   => i_Staff.Filial_Id,
                                             i_Employee_Id => i_Staff.Employee_Id);
        
          r_Person := z_Md_Persons.Load(i_Company_Id => i_Staff.Company_Id,
                                        i_Person_Id  => i_Staff.Employee_Id);
        
          Hpd_Error.Raise_008(i_Staff_Name     => r_Person.Name,
                              i_Trans_Type     => r.Trans_Type,
                              i_Trans_Date     => r.Begin_Date,
                              i_Dismissal_Date => i_Staff.Dismissal_Date);
        end loop;
      end if;
    end;
  begin
    --
    for r in (select q.Company_Id, --
                     q.Filial_Id,
                     q.Staff_Id
                from Hpd_Dirty_Agreements q
               group by q.Company_Id, q.Filial_Id, q.Staff_Id)
    loop
      r_Staff := z_Href_Staffs.Load(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Staff_Id   => r.Staff_Id);
    
      -- check exists transactions before hiring
      Check_Transactions(r_Staff);
    
      -- get lowest changed dismissal date
      select min(q.Dismissal_Date),
             min(Decode(q.Event, Hpd_Pref.c_Transaction_Event_To_Be_Deleted, null, q.Dismissal_Date))
        into v_Changed_Dismissal_Date, v_Dismissal_Date
        from Hpd_Dismissal_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id;
    
      select min(q.Begin_Date), max(q.Begin_Date)
        into v_Min_Change_Date, v_Max_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Event in (Hpd_Pref.c_Transaction_Event_To_Be_Integrated,
                         Hpd_Pref.c_Transaction_Event_To_Be_Deleted);
    
      v_Min_Change_Date := Nvl(Least(Nvl(v_Min_Change_Date, v_Changed_Dismissal_Date),
                                     Nvl(v_Changed_Dismissal_Date, v_Min_Change_Date)),
                               Href_Pref.c_Min_Date);
    
      v_Max_Change_Date := Nvl(v_Max_Change_Date, v_Min_Change_Date);
    
      select max(Qr.Begin_Date)
        into v_Max_Change_Date
        from (select min(Tr.Begin_Date) Begin_Date
                from (select q.Trans_Type, q.Begin_Date - 1 Begin_Date
                        from Hpd_Transactions q
                       where q.Company_Id = r.Company_Id
                         and q.Filial_Id = r.Filial_Id
                         and q.Staff_Id = r.Staff_Id
                         and q.Trans_Type in
                             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
                         and q.Begin_Date > v_Max_Change_Date
                         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
                      union all
                      select Hpd_Pref.c_Transaction_Type_Schedule, Href_Pref.c_Max_Date
                        from Dual
                      union all
                      select Hpd_Pref.c_Transaction_Type_Robot, Href_Pref.c_Max_Date
                        from Dual) Tr
               group by Tr.Trans_Type) Qr;
    
      select max(q.Begin_Date)
        into v_Min_Change_Date
        from Hpd_Transactions q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Staff_Id = r.Staff_Id
         and q.Trans_Type in
             (Hpd_Pref.c_Transaction_Type_Schedule, Hpd_Pref.c_Transaction_Type_Robot)
         and q.Begin_Date < v_Min_Change_Date
         and q.Event = Hpd_Pref.c_Transaction_Event_In_Progress;
    
      v_Min_Change_Date := Nvl(v_Min_Change_Date, Href_Pref.c_Min_Date);
    
      for Agr in (select q.Trans_Type
                    from Hpd_Dirty_Agreements q
                   where q.Company_Id = r.Company_Id
                     and q.Filial_Id = r.Filial_Id
                     and q.Staff_Id = r.Staff_Id)
      loop
        Agreement_Evaluate(i_Company_Id             => r.Company_Id,
                           i_Filial_Id              => r.Filial_Id,
                           i_Staff_Id               => r.Staff_Id,
                           i_Trans_Type             => Agr.Trans_Type,
                           i_Changed_Dismissal_Date => v_Changed_Dismissal_Date);
      end loop;
    
      -- if staff is passive, check that there are no more transactions
      if r_Staff.State = 'P' then
        for Trans in (select *
                        from Hpd_Transactions St
                       where St.Company_Id = r.Company_Id
                         and St.Filial_Id = r.Filial_Id
                         and St.Staff_Id = r.Staff_Id)
        loop
          Hpd_Error.Raise_009(Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                   i_Staff_Id   => r_Staff.Staff_Id));
        end loop;
      end if;
    
      Fill_Agreements_Cache(i_Company_Id     => r.Company_Id,
                            i_Filial_Id      => r.Filial_Id,
                            i_Staff_Id       => r.Staff_Id,
                            i_Start_Date     => v_Min_Change_Date,
                            i_Finish_Date    => v_Max_Change_Date,
                            i_Dismissal_Date => v_Dismissal_Date);
    end loop;
  
    -- deleting stacked dismissal transactions
    delete Hpd_Dismissal_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Deleted;
  
    -- move in progree stacked dismissal transactions
    update Hpd_Dismissal_Transactions q
       set q.Event = Hpd_Pref.c_Transaction_Event_In_Progress
     where q.Company_Id = i_Company_Id
       and q.Event = Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    delete Hpd_Cloned_Agreements q
     where q.Company_Id = i_Company_Id;
  
    delete Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Agreement_Dirty
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Agreements q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Trans_Type = i_Trans_Type;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Agreements
        (Company_Id, Filial_Id, Staff_Id, Trans_Type)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id, i_Trans_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Parent_Staff
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Employee_Id    number,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) return number is
    v_Dismissal_Date date := Nvl(i_Dismissal_Date, Href_Pref.c_Max_Date);
    result           Href_Staffs%rowtype;
  begin
    select q.*
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Employee_Id = i_Employee_Id
       and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and q.State = 'A'
       and Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) >= i_Hiring_Date
       and q.Hiring_Date <= v_Dismissal_Date;
  
    -- check cross out from primary job
    if Result.Hiring_Date <= i_Hiring_Date and
       Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) >= v_Dismissal_Date then
      return Result.Staff_Id;
    end if;
  
    if i_Hiring_Date < Result.Hiring_Date then
      Hpd_Error.Raise_010(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                     i_Filial_Id  => Result.Filial_Id,
                                                                     i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Hiring   => Result.Hiring_Date,
                          i_Secondary_Hiring => i_Hiring_Date);
    end if;
  
    if v_Dismissal_Date > Nvl(Result.Dismissal_Date, Href_Pref.c_Max_Date) then
      Hpd_Error.Raise_011(i_Staff_Name          => Href_Util.Staff_Name(i_Company_Id => Result.Company_Id,
                                                                        i_Filial_Id  => Result.Filial_Id,
                                                                        i_Staff_Id   => Result.Staff_Id),
                          i_Primary_Dismissal   => Result.Dismissal_Date,
                          i_Secondary_Dismissal => v_Dismissal_Date);
    end if;
  exception
    when No_Data_Found then
      Hpd_Error.Raise_012(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
    when Too_Many_Rows then
      Hpd_Error.Raise_013(i_Staff_Name  => z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, --
                                           i_Person_Id => i_Employee_Id).Name,
                          i_Hiring_Date => i_Hiring_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Trans_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Trans_Type varchar2,
    i_Begin_Date date,
    i_End_Date   date,
    i_Order_No   number,
    i_Journal_Id number,
    i_Page_Id    number,
    i_Tag        varchar2
  ) return number is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Begin_Date then
      Hpd_Error.Raise_014(i_Staff_Name  => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                i_Filial_Id  => i_Filial_Id,
                                                                i_Staff_Id   => i_Staff_Id),
                          i_Trans_Type  => i_Trans_Type,
                          i_Trans_Date  => i_Begin_Date,
                          i_Hiring_Date => r_Staff.Hiring_Date);
    end if;
  
    r_Trans.Company_Id := i_Company_Id;
    r_Trans.Filial_Id  := i_Filial_Id;
    r_Trans.Trans_Id   := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id   := i_Staff_Id;
    r_Trans.Trans_Type := i_Trans_Type;
    r_Trans.Begin_Date := i_Begin_Date;
    r_Trans.End_Date   := i_End_Date;
    r_Trans.Order_No   := i_Order_No;
    r_Trans.Journal_Id := i_Journal_Id;
    r_Trans.Page_Id    := i_Page_Id;
    r_Trans.Tag        := i_Tag;
    r_Trans.Event      := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Transactions.Insert_Row(r_Trans);
  
    Agreement_Dirty(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Staff_Id   => i_Staff_Id,
                    i_Trans_Type => i_Trans_Type);
  
    return r_Trans.Trans_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Life_Cycle_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff  Href_Staffs%rowtype;
    v_Cnt    number;
    r_Person Md_Persons%rowtype;
    --------------------------------------------------
    Function Staff_State return varchar2 is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpd_Hirings q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and exists (select *
                from Hpd_Journal_Pages w
                join Hpd_Journals k
                  on k.Company_Id = i_Company_Id
                 and k.Filial_Id = i_Filial_Id
                 and k.Journal_Id = w.Journal_Id
               where w.Company_Id = i_Company_Id
                 and w.Filial_Id = i_Filial_Id
                 and w.Page_Id = q.Page_Id
                 and k.Posted = 'Y');
    
      return 'A';
    exception
      when No_Data_Found then
        return 'P';
    end;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    r_Staff.State := Staff_State;
  
    select min(Dt.Dismissal_Date) - 1, min(k.Dismissal_Reason_Id), min(k.Note), count(1)
      into r_Staff.Dismissal_Date, r_Staff.Dismissal_Reason_Id, r_Staff.Dismissal_Note, v_Cnt
      from Hpd_Journal_Pages Jp
      join Hpd_Dismissal_Transactions Dt
        on Dt.Company_Id = Jp.Company_Id
       and Dt.Filial_Id = Jp.Filial_Id
       and Dt.Page_Id = Jp.Page_Id
       and Dt.Event in
           (Hpd_Pref.c_Transaction_Event_To_Be_Integrated, Hpd_Pref.c_Transaction_Event_In_Progress)
      left join Hpd_Dismissals k
        on k.Company_Id = Dt.Company_Id
       and k.Filial_Id = Dt.Filial_Id
       and k.Page_Id = Dt.Page_Id
     where Jp.Company_Id = i_Company_Id
       and Jp.Filial_Id = i_Filial_Id
       and Jp.Staff_Id = i_Staff_Id;
  
    if Nvl(v_Cnt, 0) > 1 then
      r_Person := z_Md_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                    i_Person_Id  => r_Staff.Employee_Id);
    
      Hpd_Error.Raise_015(i_Staff_Name => r_Person.Name, i_Dismissed_Cnt => v_Cnt);
    end if;
  
    if r_Staff.Hiring_Date > r_Staff.Dismissal_Date then
      Hpd_Error.Raise_016(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Staff.Company_Id,
                                                                   i_Filial_Id  => r_Staff.Filial_Id,
                                                                   i_Staff_Id   => r_Staff.Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => r_Staff.Dismissal_Date);
    end if;
  
    z_Href_Staffs.Save_Row(r_Staff);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Relationship_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff Href_Staffs%rowtype;
    v_Count number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
    if r_Staff.State = 'P' then
      if r_Staff.Dismissal_Date is not null then
        Hpd_Error.Raise_017(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      select count(1)
        into v_Count
        from Href_Staffs q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Parent_Id = i_Staff_Id
         and q.State = 'A';
    
      if v_Count > 0 then
        Hpd_Error.Raise_018(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => i_Staff_Id));
      end if;
    
      return;
    end if;
  
    if r_Staff.Staff_Kind = Href_Pref.c_Staff_Kind_Primary then
      Assert_Intersection_Staff(i_Company_Id  => i_Company_Id,
                                i_Filial_Id   => i_Filial_Id,
                                i_Employee_Id => r_Staff.Employee_Id);
      for r in (select *
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Parent_Id = i_Staff_Id
                   and q.State = 'A'
                   and not (r_Staff.Hiring_Date <= q.Hiring_Date and
                        Nvl(q.Dismissal_Date, Href_Pref.c_Max_Date) <=
                        Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date)))
      loop
        Hpd_Error.Raise_019(i_Staff_Name       => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                       i_Filial_Id  => i_Filial_Id,
                                                                       i_Staff_Id   => i_Staff_Id),
                            i_Secondary_Hiring => r.Hiring_Date,
                            i_Primary_Hiring   => r_Staff.Hiring_Date);
      end loop;
    else
      z_Href_Staffs.Update_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Parent_Id  => Option_Number(Get_Parent_Staff(i_Company_Id     => r_Staff.Company_Id,
                                                                              i_Filial_Id      => r_Staff.Filial_Id,
                                                                              i_Employee_Id    => r_Staff.Employee_Id,
                                                                              i_Hiring_Date    => r_Staff.Hiring_Date,
                                                                              i_Dismissal_Date => r_Staff.Dismissal_Date)));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Employee_Number
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff        Href_Staffs%rowtype;
    v_Staff_Number varchar2(50 char);
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    select p.Staff_Number
      into v_Staff_Number
      from Href_Staffs p
     where p.Company_Id = r_Staff.Company_Id
       and p.Filial_Id = r_Staff.Filial_Id
       and p.Employee_Id = r_Staff.Employee_Id
       and p.State = 'A'
       and p.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
     order by p.Hiring_Date desc
     fetch first row only;
  
    z_Mhr_Employees.Update_One(i_Company_Id      => r_Staff.Company_Id,
                               i_Filial_Id       => r_Staff.Filial_Id,
                               i_Employee_Id     => r_Staff.Employee_Id,
                               i_Employee_Number => Option_Varchar2(v_Staff_Number));
  exception
    when No_Data_Found then
      return;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Attach_User_Filial
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Staff   Href_Staffs%rowtype;
    r_Person  Mr_Natural_Persons%rowtype;
    r_User    Md_Users%rowtype;
    v_Role_Id number;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Staff_Kind <> Href_Pref.c_Staff_Kind_Primary or --
       r_Staff.Dismissal_Date is not null then
      return;
    end if;
  
    if not z_Md_Users.Exist_Lock(i_Company_Id => i_Company_Id, --
                                 i_User_Id    => r_Staff.Employee_Id) then
      r_Person := z_Mr_Natural_Persons.Lock_Load(i_Company_Id => i_Company_Id,
                                                 i_Person_Id  => r_Staff.Employee_Id);
    
      z_Md_Users.Init(p_Row        => r_User,
                      i_Company_Id => r_Person.Company_Id,
                      i_User_Id    => r_Person.Person_Id,
                      i_Name       => r_Person.Name,
                      i_User_Kind  => Md_Pref.c_Uk_Normal,
                      i_Gender     => r_Person.Gender,
                      i_State      => 'A');
    
      Md_Api.User_Save(r_User);
    end if;
  
    if not z_Md_User_Filials.Exist(i_Company_Id => i_Company_Id,
                                   i_User_Id    => r_Staff.Employee_Id,
                                   i_Filial_Id  => i_Filial_Id) then
      Md_Api.User_Add_Filial(i_Company_Id => i_Company_Id,
                             i_User_Id    => r_Staff.Employee_Id,
                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    v_Role_Id := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                 i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
  
    if not z_Md_User_Roles.Exist(i_Company_Id => i_Company_Id,
                                 i_User_Id    => r_Staff.Employee_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Role_Id    => v_Role_Id) then
      Md_Api.Role_Grant(i_Company_Id => i_Company_Id,
                        i_User_Id    => r_Staff.Employee_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Role_Id    => v_Role_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Staffs_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Staff_Ids Array_Number;
  begin
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Life_Cycle_Evaluate(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Staff_Relationship_Evaluate(i_Company_Id => r.Company_Id,
                                  i_Filial_Id  => r.Filial_Id,
                                  i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id
               order by q.Staff_Id)
    loop
      Update_Employee_Number(i_Company_Id => r.Company_Id,
                             i_Filial_Id  => r.Filial_Id,
                             i_Staff_Id   => r.Staff_Id);
    end loop;
  
    for r in (select *
                from Hpd_Dirty_Staffs q
               where q.Company_Id = i_Company_Id)
    loop
      Attach_User_Filial(i_Company_Id => r.Company_Id,
                         i_Filial_Id  => r.Filial_Id,
                         i_Staff_Id   => r.Staff_Id);
    end loop;
  
    select q.Staff_Id
      bulk collect
      into v_Staff_Ids
      from Hpd_Dirty_Staffs q
      join Href_Staffs w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Staff_Id = w.Staff_Id
     where q.Company_Id = i_Company_Id
     order by w.Employee_Id;
  
    Hlic_Core.Revise_License_By_Dirty_Staffs(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Staff_Ids  => v_Staff_Ids);
  
    delete Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    for r in (select Jp.Employee_Id
                from Hpd_Journal_Pages Jp
               where Jp.Company_Id = i_Company_Id
                 and Jp.Filial_Id = i_Filial_Id
                 and Jp.Journal_Id = i_Journal_Id
               group by Jp.Employee_Id)
    loop
      Htt_Api.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Person_Id  => r.Employee_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Staff
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpd_Dirty_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  exception
    when No_Data_Found then
      insert into Hpd_Dirty_Staffs q
        (Company_Id, Filial_Id, Staff_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Terminate
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Journal_Id     number,
    i_Page_Id        number,
    i_Dismissal_Date date
  ) is
    r_Staff Href_Staffs%rowtype;
    r_Trans Hpd_Dismissal_Transactions%rowtype;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Hiring_Date > i_Dismissal_Date then
      Hpd_Error.Raise_020(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_Staff_Id   => i_Staff_Id),
                          i_Hiring_Date    => r_Staff.Hiring_Date,
                          i_Dismissal_Date => i_Dismissal_Date);
    end if;
  
    r_Trans.Company_Id     := i_Company_Id;
    r_Trans.Filial_Id      := i_Filial_Id;
    r_Trans.Trans_Id       := Hpd_Next.Trans_Id;
    r_Trans.Staff_Id       := i_Staff_Id;
    r_Trans.Dismissal_Date := i_Dismissal_Date + 1;
    r_Trans.Journal_Id     := i_Journal_Id;
    r_Trans.Page_Id        := i_Page_Id;
    r_Trans.Event          := Hpd_Pref.c_Transaction_Event_To_Be_Integrated;
  
    z_Hpd_Dismissal_Transactions.Insert_Row(r_Trans);
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Restore
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number,
    i_Staff_Id   number
  ) is
  begin
    for r in (select *
                from Hpd_Dismissal_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Dismissal_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                              i_Filial_Id  => r.Filial_Id,
                                              i_Trans_Id   => r.Trans_Id,
                                              i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    end loop;
  
    for r in (select q.Trans_Type
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
               group by q.Trans_Type)
    loop
      Agreement_Dirty(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Staff_Id   => i_Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Trans_Insert
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Journal_Id       number,
    i_Page_Id          number,
    i_Staff_Id         number,
    i_Begin_Date       date,
    i_End_Date         date,
    i_Order_No         number,
    i_Robot_Id         number,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Employment_Type  varchar2,
    i_Fte_Id           number,
    i_Fte              number,
    i_Wage_Scale_Id    number,
    i_Contractual_Wage varchar2,
    i_Source_Table     Fazo_Schema.w_Table_Name
  ) is
    v_Fte      number := i_Fte;
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Robot,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    if i_Fte_Id is not null then
      v_Fte := z_Href_Ftes.Load(i_Company_Id => i_Company_Id, i_Fte_Id => i_Fte_Id).Fte_Value;
    end if;
  
    z_Hpd_Trans_Robots.Insert_One(i_Company_Id       => i_Company_Id,
                                  i_Filial_Id        => i_Filial_Id,
                                  i_Trans_Id         => v_Trans_Id,
                                  i_Robot_Id         => i_Robot_Id,
                                  i_Division_Id      => i_Division_Id,
                                  i_Job_Id           => i_Job_Id,
                                  i_Employment_Type  => i_Employment_Type,
                                  i_Fte_Id           => i_Fte_Id,
                                  i_Fte              => v_Fte,
                                  i_Contractual_Wage => i_Contractual_Wage,
                                  i_Wage_Scale_Id    => i_Wage_Scale_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Schedule_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Schedule,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Schedules.Insert_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Trans_Id    => v_Trans_Id,
                                     i_Schedule_Id => i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Currency_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Currency_Id  number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Currency,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Currencies.Insert_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Trans_Id    => v_Trans_Id,
                                      i_Currency_Id => i_Currency_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Days_Limit   number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Vacation_Limit,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    z_Hpd_Trans_Vacation_Limits.Save_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Trans_Id   => v_Trans_Id,
                                         i_Days_Limit => i_Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Rank_Id      number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Trans_Id number;
  begin
    v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Trans_Type => Hpd_Pref.c_Transaction_Type_Rank,
                               i_Journal_Id => i_Journal_Id,
                               i_Page_Id    => i_Page_Id,
                               i_Staff_Id   => i_Staff_Id,
                               i_Begin_Date => i_Begin_Date,
                               i_End_Date   => i_End_Date,
                               i_Order_No   => i_Order_No,
                               i_Tag        => i_Source_Table.Name);
  
    if i_Rank_Id is not null then
      z_Hpd_Trans_Ranks.Insert_One(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Trans_Id   => v_Trans_Id,
                                   i_Rank_Id    => i_Rank_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Trans_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Page_Id      number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Order_No     number,
    i_Source_Table Fazo_Schema.w_Table_Name
  ) is
    v_Indicator     Href_Pref.Indicator_Nt := Href_Pref.Indicator_Nt();
    v_Oper_Types    Href_Pref.Oper_Type_Nt := Href_Pref.Oper_Type_Nt();
    v_Indicator_Ids Array_Number;
    v_Trans_Id      number;
  begin
    for r in (select *
                from Hpd_Page_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      Hpd_Util.Indicator_Add(p_Indicator       => v_Indicator,
                             i_Indicator_Id    => r.Indicator_Id,
                             i_Indicator_Value => r.Indicator_Value);
    end loop;
  
    for r in (select q.*
                from Hpd_Page_Oper_Types q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      select q.Indicator_Id
        bulk collect
        into v_Indicator_Ids
        from Hpd_Oper_Type_Indicators q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Page_Id = r.Page_Id
         and q.Oper_Type_Id = r.Oper_Type_Id;
    
      Hpd_Util.Oper_Type_Add(p_Oper_Type     => v_Oper_Types,
                             i_Oper_Type_Id  => r.Oper_Type_Id,
                             i_Indicator_Ids => v_Indicator_Ids);
    end loop;
  
    if v_Oper_Types.Count > 0 then
      v_Trans_Id := Trans_Insert(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                 i_Journal_Id => i_Journal_Id,
                                 i_Page_Id    => i_Page_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => i_Begin_Date,
                                 i_End_Date   => i_End_Date,
                                 i_Order_No   => i_Order_No,
                                 i_Tag        => i_Source_Table.Name);
    
      for i in 1 .. v_Indicator.Count
      loop
        z_Hpd_Trans_Indicators.Insert_One(i_Company_Id      => i_Company_Id,
                                          i_Filial_Id       => i_Filial_Id,
                                          i_Trans_Id        => v_Trans_Id,
                                          i_Indicator_Id    => v_Indicator(i).Indicator_Id,
                                          i_Indicator_Value => v_Indicator(i).Indicator_Value);
      end loop;
    end if;
  
    for i in 1 .. v_Oper_Types.Count
    loop
      z_Hpd_Trans_Oper_Types.Insert_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => v_Trans_Id,
                                        
                                        i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id);
    
      v_Indicator_Ids := v_Oper_Types(i).Indicator_Ids;
    
      for j in 1 .. v_Indicator_Ids.Count
      loop
        z_Hpd_Trans_Oper_Type_Indicators.Insert_One(i_Company_Id   => i_Company_Id,
                                                    i_Filial_Id    => i_Filial_Id,
                                                    i_Trans_Id     => v_Trans_Id,
                                                    i_Oper_Type_Id => v_Oper_Types(i).Oper_Type_Id,
                                                    i_Indicator_Id => v_Indicator_Ids(j));
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Trans_Clear
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Page_Id    number
  ) is
  begin
    for r in (select *
                from Hpd_Transactions q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Page_Id = i_Page_Id)
    loop
      z_Hpd_Transactions.Update_One(i_Company_Id => r.Company_Id,
                                    i_Filial_Id  => r.Filial_Id,
                                    i_Trans_Id   => r.Trans_Id,
                                    i_Event      => Option_Varchar2(Hpd_Pref.c_Transaction_Event_To_Be_Deleted));
    
      Agreement_Dirty(i_Company_Id => r.Company_Id,
                      i_Filial_Id  => r.Filial_Id,
                      i_Staff_Id   => r.Staff_Id,
                      i_Trans_Type => r.Trans_Type);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Hiring_Date,
                     w.Dismissal_Date,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(k.Employment_Type, Hpd_Pref.c_Employment_Type_Internal_Parttime) nulls last) -- firstly primary jobs line opened
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                         i_Filial_Id        => r.Filial_Id,
                         i_Journal_Id       => r.Journal_Id,
                         i_Page_Id          => r.Page_Id,
                         i_Staff_Id         => r.Staff_Id,
                         i_Begin_Date       => r.Hiring_Date,
                         i_End_Date         => null,
                         i_Order_No         => i_Journal.Posted_Order_No,
                         i_Robot_Id         => r.Robot_Id,
                         i_Division_Id      => r.Division_Id,
                         i_Job_Id           => r.Job_Id,
                         i_Fte_Id           => r.Fte_Id,
                         i_Fte              => r.Fte,
                         i_Employment_Type  => r.Employment_Type,
                         i_Wage_Scale_Id    => r.Wage_Scale_Id,
                         i_Contractual_Wage => r.Contractual_Wage,
                         i_Source_Table     => Zt.Hpd_Hirings);
    
      if r.Dismissal_Date is not null then
        Staff_Terminate(i_Company_Id     => r.Company_Id,
                        i_Filial_Id      => r.Filial_Id,
                        i_Staff_Id       => r.Staff_Id,
                        i_Journal_Id     => r.Journal_Id,
                        i_Page_Id        => r.Page_Id,
                        i_Dismissal_Date => r.Dismissal_Date);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Hiring_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Rank_Id is not null then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Hiring_Date,
                          i_End_Date     => null,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Hiring_Date,
                                    i_End_Date     => null,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Hiring_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Hirings);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date,
                     Ct.Early_Closed_Note,
                     Ct.Posted Contract_Posted
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Contract_Posted = 'Y' and --
         r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date) then
        Cv_Contract_Close(i_Company_Id        => r.Company_Id,
                          i_Filial_Id         => r.Filial_Id,
                          i_Contract_Id       => r.Contract_Id,
                          i_Early_Closed_Date => r.Dismissal_Date,
                          i_Early_Closed_Note => r.Early_Closed_Note);
      
      else
        z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Contract_Id => r.Contract_Id,
                                      i_End_Date    => Option_Date(r.Dismissal_Date));
      
        Cv_Contract_Post(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     w.Transfer_Begin,
                     w.Transfer_End,
                     k.Robot_Id,
                     k.Fte_Id,
                     k.Fte,
                     k.Division_Id,
                     k.Job_Id,
                     k.Rank_Id,
                     k.Allow_Rank,
                     k.Employment_Type,
                     b.Wage_Scale_Id,
                     b.Contractual_Wage,
                     s.Schedule_Id,
                     Pc.Currency_Id,
                     St.Staff_Kind,
                     Pl.Days_Limit
                from Hpd_Journal_Pages q
                join Hpd_Transfers w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Href_Staffs St
                  on St.Company_Id = q.Company_Id
                 and St.Filial_Id = q.Filial_Id
                 and St.Staff_Id = q.Staff_Id
                left join Hpd_Page_Robots k
                  on q.Company_Id = k.Company_Id
                 and q.Filial_Id = k.Filial_Id
                 and q.Page_Id = k.Page_Id
                left join Hpd_Page_Schedules s
                  on q.Company_Id = s.Company_Id
                 and q.Filial_Id = s.Filial_Id
                 and q.Page_Id = s.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
                left join Hpd_Page_Vacation_Limits Pl
                  on q.Company_Id = Pl.Company_Id
                 and q.Filial_Id = Pl.Filial_Id
                 and q.Page_Id = Pl.Page_Id
                left join Hrm_Robots b
                  on b.Company_Id = k.Company_Id
                 and b.Filial_Id = k.Filial_Id
                 and b.Robot_Id = k.Robot_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Robot_Id is not null then
        if r.Staff_Kind != Hpd_Util.Cast_Staff_Kind_By_Emp_Type(r.Employment_Type) then
          Hpd_Error.Raise_021(Href_Util.Staff_Name(i_Company_Id => r.Company_Id,
                                                   i_Filial_Id  => r.Filial_Id,
                                                   i_Staff_Id   => r.Staff_Id));
        end if;
      
        Robot_Trans_Insert(i_Company_Id       => r.Company_Id,
                           i_Filial_Id        => r.Filial_Id,
                           i_Journal_Id       => r.Journal_Id,
                           i_Page_Id          => r.Page_Id,
                           i_Staff_Id         => r.Staff_Id,
                           i_Begin_Date       => r.Transfer_Begin,
                           i_End_Date         => r.Transfer_End,
                           i_Order_No         => i_Journal.Posted_Order_No,
                           i_Robot_Id         => r.Robot_Id,
                           i_Division_Id      => r.Division_Id,
                           i_Job_Id           => r.Job_Id,
                           i_Employment_Type  => r.Employment_Type,
                           i_Fte_Id           => r.Fte_Id,
                           i_Fte              => r.Fte,
                           i_Wage_Scale_Id    => r.Wage_Scale_Id,
                           i_Contractual_Wage => r.Contractual_Wage,
                           i_Source_Table     => Zt.Hpd_Transfers);
      end if;
    
      if r.Schedule_Id is not null then
        Schedule_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Schedule_Id  => r.Schedule_Id,
                              i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Transfer_Begin,
                              i_End_Date     => r.Transfer_End,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      if r.Allow_Rank = 'Y' then
        Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                          i_Filial_Id    => r.Filial_Id,
                          i_Journal_Id   => r.Journal_Id,
                          i_Page_Id      => r.Page_Id,
                          i_Staff_Id     => r.Staff_Id,
                          i_Begin_Date   => r.Transfer_Begin,
                          i_End_Date     => r.Transfer_End,
                          i_Order_No     => i_Journal.Posted_Order_No,
                          i_Rank_Id      => r.Rank_Id,
                          i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      if r.Days_Limit is not null then
        Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                    i_Filial_Id    => r.Filial_Id,
                                    i_Journal_Id   => r.Journal_Id,
                                    i_Page_Id      => r.Page_Id,
                                    i_Staff_Id     => r.Staff_Id,
                                    i_Begin_Date   => r.Transfer_Begin,
                                    i_End_Date     => r.Transfer_End,
                                    i_Order_No     => i_Journal.Posted_Order_No,
                                    i_Days_Limit   => r.Days_Limit,
                                    i_Source_Table => Zt.Hpd_Transfers);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Transfer_Begin,
                             i_End_Date     => r.Transfer_End,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Transfers);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Dismissal_Date
                from Hpd_Journal_Pages q
                join Hpd_Dismissals w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls last) -- firstly secondary jobs line closed
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Terminate(i_Company_Id     => r.Company_Id,
                      i_Filial_Id      => r.Filial_Id,
                      i_Staff_Id       => r.Staff_Id,
                      i_Journal_Id     => i_Journal.Journal_Id,
                      i_Page_Id        => r.Page_Id,
                      i_Dismissal_Date => r.Dismissal_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, Pc.Currency_Id
                from Hpd_Journal_Pages q
                join Hpd_Wage_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                left join Hpd_Page_Currencies Pc
                  on q.Company_Id = Pc.Company_Id
                 and q.Filial_Id = Pc.Filial_Id
                 and q.Page_Id = Pc.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Currency_Id is not null then
        Currency_Trans_Insert(i_Company_Id   => r.Company_Id,
                              i_Filial_Id    => r.Filial_Id,
                              i_Journal_Id   => r.Journal_Id,
                              i_Page_Id      => r.Page_Id,
                              i_Staff_Id     => r.Staff_Id,
                              i_Begin_Date   => r.Change_Date,
                              i_End_Date     => null,
                              i_Order_No     => i_Journal.Posted_Order_No,
                              i_Currency_Id  => r.Currency_Id,
                              i_Source_Table => Zt.Hpd_Hirings);
      end if;
    
      Oper_Type_Trans_Insert(i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Journal_Id   => r.Journal_Id,
                             i_Page_Id      => r.Page_Id,
                             i_Staff_Id     => r.Staff_Id,
                             i_Begin_Date   => r.Change_Date,
                             i_End_Date     => null,
                             i_Order_No     => i_Journal.Posted_Order_No,
                             i_Source_Table => Zt.Hpd_Wage_Changes);
    
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, w.Change_Date, w.Rank_Id
                from Hpd_Journal_Pages q
                join Hpd_Rank_Changes w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Rank_Trans_Insert(i_Company_Id   => r.Company_Id,
                        i_Filial_Id    => r.Filial_Id,
                        i_Journal_Id   => r.Journal_Id,
                        i_Page_Id      => r.Page_Id,
                        i_Staff_Id     => r.Staff_Id,
                        i_Begin_Date   => r.Change_Date,
                        i_End_Date     => null,
                        i_Order_No     => i_Journal.Posted_Order_No,
                        i_Rank_Id      => r.Rank_Id,
                        i_Source_Table => Zt.Hpd_Rank_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*, r.Page_Id, r.Staff_Id
                from Hpd_Vacation_Limit_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Vacation_Limit_Trans_Insert(i_Company_Id   => r.Company_Id,
                                  i_Filial_Id    => r.Filial_Id,
                                  i_Journal_Id   => r.Journal_Id,
                                  i_Page_Id      => r.Page_Id,
                                  i_Staff_Id     => r.Staff_Id,
                                  i_Begin_Date   => r.Change_Date,
                                  i_End_Date     => null,
                                  i_Order_No     => i_Journal.Posted_Order_No,
                                  i_Days_Limit   => r.Days_Limit,
                                  i_Source_Table => Zt.Hpd_Vacation_Limit_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.Begin_Date,
                     q.End_Date,
                     r.Page_Id,
                     r.Staff_Id,
                     (select s.Schedule_Id
                        from Hpd_Page_Schedules s
                       where s.Company_Id = i_Journal.Company_Id
                         and s.Filial_Id = i_Journal.Filial_Id
                         and s.Page_Id = r.Page_Id) as Schedule_Id
                from Hpd_Schedule_Changes q
                join Hpd_Journal_Pages r
                  on r.Company_Id = i_Journal.Company_Id
                 and r.Filial_Id = i_Journal.Filial_Id
                 and r.Journal_Id = q.Journal_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Schedule_Trans_Insert(i_Company_Id   => i_Journal.Company_Id,
                            i_Filial_Id    => i_Journal.Filial_Id,
                            i_Journal_Id   => i_Journal.Journal_Id,
                            i_Page_Id      => r.Page_Id,
                            i_Staff_Id     => r.Staff_Id,
                            i_Begin_Date   => r.Begin_Date,
                            i_End_Date     => r.End_Date,
                            i_Order_No     => i_Journal.Posted_Order_No,
                            i_Schedule_Id  => r.Schedule_Id,
                            i_Source_Table => Zt.Hpd_Schedule_Changes);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Post(i_Journal Hpd_Journals%rowtype) is
    v_Interval_Id number;
  begin
    for r in (select q.*
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Interval_Id := Hpd_Next.Lock_Interval_Id;
    
      Timeoff_Lock_Interval_Insert(i_Company_Id      => r.Company_Id,
                                   i_Filial_Id       => r.Filial_Id,
                                   i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                                   i_Timeoff_Id      => r.Timeoff_Id,
                                   i_Staff_Id        => r.Staff_Id,
                                   i_Begin_Date      => r.Begin_Date,
                                   i_End_Date        => r.End_Date);
    
      Insert_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Post(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Insert_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Post(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Timesheet_Id        number;
  
    --------------------------------------------------
    Procedure Assert_No_Lock_Intervals
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Timeoff_Date date
    ) is
      v_Interval_Kind varchar2(1);
      v_Interval_Id   number;
      v_Timeoff_Id    number;
    begin
      select Lc.Interval_Id, Lc.Kind
        into v_Interval_Id, v_Interval_Kind
        from Hpd_Lock_Intervals Lc
       where Lc.Company_Id = i_Company_Id
         and Lc.Filial_Id = i_Filial_Id
         and Lc.Staff_Id = i_Staff_Id
         and i_Timeoff_Date <= Lc.End_Date
         and i_Timeoff_Date >= Lc.Begin_Date
         and Rownum = 1;
    
      if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
        select p.Timeoff_Id
          into v_Timeoff_Id
          from Hpd_Timeoff_Intervals p
         where p.Company_Id = i_Company_Id
           and p.Filial_Id = i_Filial_Id
           and p.Interval_Id = v_Interval_Id;
      
        v_Interval_Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Timeoff_Id => v_Timeoff_Id);
      end if;
    
      Hpd_Error.Raise_075(i_Interval_Kind => v_Interval_Kind,
                          i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                          i_Timeoff_Date  => i_Timeoff_Date);
    exception
      when No_Data_Found then
        null;
    end;
  
  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    -- check
    for r in (select q.Staff_Id,
                     (select j.Journal_Number
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Number,
                     (select j.Journal_Date
                        from Hpd_Journals j
                       where j.Company_Id = i_Journal.Company_Id
                         and j.Filial_Id = i_Journal.Filial_Id
                         and j.Journal_Id = q.Journal_Id) as Journal_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and (q.Staff_Id, q.Kind) in
                     (select q.Staff_Id, Pa.Kind
                        from Hpd_Journal_Pages q
                        join Hpd_Page_Adjustments Pa
                          on Pa.Company_Id = i_Journal.Company_Id
                         and Pa.Filial_Id = i_Journal.Filial_Id
                         and Pa.Page_Id = q.Page_Id
                       where q.Company_Id = i_Journal.Company_Id
                         and q.Filial_Id = i_Journal.Filial_Id
                         and q.Journal_Id = i_Journal.Journal_Id)
                 and q.Adjustment_Date = r_Timebook_Adjustment.Adjustment_Date
                 and q.Journal_Id <> i_Journal.Journal_Id
                 and Rownum = 1)
    loop
      Hpd_Error.Raise_053(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                    i_Filial_Id  => i_Journal.Filial_Id,
                                                                    i_Staff_Id   => r.Staff_Id),
                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                          i_Journal_Number  => r.Journal_Number,
                          i_Journal_Date    => r.Journal_Date);
    end loop;
  
    for r in (select q.Staff_Id, q.Page_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      if v_Timesheet_Id is null then
        Hpd_Error.Raise_054(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Journal.Company_Id,
                                                                      i_Filial_Id  => i_Journal.Filial_Id,
                                                                      i_Staff_Id   => r.Staff_Id),
                            i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date);
      end if;
    
      Assert_No_Lock_Intervals(i_Company_Id   => i_Journal.Company_Id,
                               i_Filial_Id    => i_Journal.Filial_Id,
                               i_Staff_Id     => r.Staff_Id,
                               i_Timeoff_Date => r_Timebook_Adjustment.Adjustment_Date);
    
      for Adj in (select a.Kind
                    from Hpd_Page_Adjustments a
                   where a.Company_Id = i_Journal.Company_Id
                     and a.Filial_Id = i_Journal.Filial_Id
                     and a.Page_Id = r.Page_Id)
      loop
        z_Hpd_Lock_Adjustments.Insert_One(i_Company_Id      => i_Journal.Company_Id,
                                          i_Filial_Id       => i_Journal.Filial_Id,
                                          i_Staff_Id        => r.Staff_Id,
                                          i_Adjustment_Date => r_Timebook_Adjustment.Adjustment_Date,
                                          i_Kind            => Adj.Kind,
                                          i_Journal_Id      => i_Journal.Journal_Id,
                                          i_Page_Id         => r.Page_Id);
      end loop;
    
      Htt_Core.Save_Adjustment_Fact(i_Company_Id     => i_Journal.Company_Id,
                                    i_Filial_Id      => i_Journal.Filial_Id,
                                    i_Staff_Id       => r.Staff_Id,
                                    i_Timesheet_Id   => v_Timesheet_Id,
                                    i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Fte_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
    v_Current_Date date := Trunc(sysdate);
    v_Fte_Limit    Href_Pref.Fte_Limit_Rt := Href_Util.Load_Fte_Limit(i_Company_Id);
  begin
    if v_Fte_Limit.Fte_Limit_Setting = 'N' then
      return;
    end if;
  
    for r in (select e.Employee_Name
                from (select (select sum(St.Fte)
                                from Href_Staffs St
                               where St.Company_Id = w.Company_Id
                                 and St.Employee_Id = w.Employee_Id
                                 and St.State = 'A'
                                 and St.Hiring_Date <= v_Current_Date
                                 and (St.Dismissal_Date is null or --
                                     St.Dismissal_Date >= v_Current_Date)
                                 and exists (select 1
                                        from Md_Filials f
                                       where f.Company_Id = St.Company_Id
                                         and f.Filial_Id = St.Filial_Id
                                         and f.State = 'A')) Total_Fte,
                             (select Np.Name
                                from Mr_Natural_Persons Np
                               where Np.Company_Id = w.Company_Id
                                 and Np.Person_Id = w.Employee_Id) Employee_Name
                        from Hpd_Journal_Pages q
                        join Href_Staffs w
                          on w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Staff_Id = q.Staff_Id
                       where q.Company_Id = i_Company_Id
                         and q.Filial_Id = i_Filial_Id
                         and q.Journal_Id = i_Journal_Id) e
               where v_Fte_Limit.Fte_Limit < e.Total_Fte)
    loop
      Hpd_Error.Raise_078(r.Employee_Name);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Post
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Sign_Document_Status  varchar2(1);
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'Y' and not Hpd_Pref.g_Migration_Active then
      Hpd_Error.Raise_022(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_069(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    -- Sign Document Check  
    v_Sign_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => i_Company_Id,
                                                                 i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Sign_Document_Status is not null and v_Sign_Document_Status <> Mdf_Pref.c_Ds_Approved then
      Hpd_Error.Raise_084(i_Document_Status => Mdf_Pref.t_Document_Status(v_Sign_Document_Status),
                          i_Journal_Number  => r_Journal.Journal_Number);
    end if;
  
    r_Journal.Posted := 'Y';
  
    if r_Journal.Posted_Order_No is null then
      r_Journal.Posted_Order_No := Md_Core.Gen_Number(i_Company_Id => r_Journal.Company_Id,
                                                      i_Filial_Id  => r_Journal.Filial_Id,
                                                      i_Table      => Zt.Hpd_Journals,
                                                      i_Column     => z.Posted_Order_No);
    end if;
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Post(r_Journal);
    
      Hiring_Cv_Contract_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Post(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Post(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Post(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Post(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Post(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    if not Hpd_Pref.g_Migration_Active then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    
      if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                    i_Journal_Type_Id => r_Journal.Journal_Type_Id) or
         Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                      i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
        Check_Fte_Limit(i_Company_Id => r_Journal.Company_Id,
                        i_Filial_Id  => r_Journal.Filial_Id,
                        i_Journal_Id => r_Journal.Journal_Id);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs e
                  on q.Company_Id = e.Company_Id
                 and q.Filial_Id = e.Filial_Id
                 and q.Staff_Id = e.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(e.Staff_Kind, Href_Pref.c_Staff_Kind_Secondary) nulls first) -- firstly secondary jobs line unposted
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Unpost
  (
    i_Journal Hpd_Journals%rowtype,
    i_Repost  boolean
  ) is
  begin
    for r in (select q.*, --
                     Ct.Contract_Id,
                     w.Dismissal_Date,
                     Ct.End_Date,
                     Ct.Early_Closed_Date
                from Hpd_Journal_Pages q
                join Hpd_Hirings w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Page_Id = w.Page_Id
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = w.Company_Id
                 and Ct.Filial_Id = w.Filial_Id
                 and Ct.Page_Id = w.Page_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      continue when i_Repost and r.Dismissal_Date <> Nvl(r.Early_Closed_Date, r.End_Date);
    
      Cv_Contract_Unpost(i_Company_Id  => r.Company_Id,
                         i_Filial_Id   => r.Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transfer_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissal_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
                left join Href_Staffs w
                  on q.Company_Id = w.Company_Id
                 and q.Filial_Id = w.Filial_Id
                 and q.Staff_Id = w.Staff_Id
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id
               order by Nullif(w.Staff_Kind, Href_Pref.c_Staff_Kind_Primary) nulls first) -- firstly primary jobs line reopen
    loop
      Make_Dirty_Staff(i_Company_Id => r.Company_Id,
                       i_Filial_Id  => r.Filial_Id,
                       i_Staff_Id   => r.Staff_Id);
    
      Staff_Restore(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Page_Id    => r.Page_Id,
                    i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Rank_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Vacation_Limit_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Change_Journal_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Trans_Clear(i_Company_Id => r.Company_Id, --
                  i_Filial_Id  => r.Filial_Id,
                  i_Page_Id    => r.Page_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select q.*,
                     (select w.Interval_Id
                        from Hpd_Timeoff_Intervals w
                       where w.Company_Id = q.Company_Id
                         and w.Filial_Id = q.Filial_Id
                         and w.Timeoff_Id = q.Timeoff_Id) as Interval_Id
                from Hpd_Journal_Timeoffs q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      z_Hpd_Timeoff_Intervals.Delete_One(i_Company_Id => r.Company_Id,
                                         i_Filial_Id  => r.Filial_Id,
                                         i_Timeoff_Id => r.Timeoff_Id);
    
      Lock_Interval_Delete(i_Company_Id  => r.Company_Id,
                           i_Filial_Id   => r.Filial_Id,
                           i_Interval_Id => r.Interval_Id,
                           i_Timeoff_Id  => r.Timeoff_Id);
    
      Remove_Timeoff_Days(i_Company_Id      => r.Company_Id,
                          i_Filial_Id       => r.Filial_Id,
                          i_Journal_Type_Id => i_Journal.Journal_Type_Id,
                          i_Timeoff_Id      => r.Timeoff_Id,
                          i_Staff_Id        => r.Staff_Id,
                          i_Begin_Date      => r.Begin_Date,
                          i_End_Date        => r.End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Overtime_Unpost(i_Journal Hpd_Journals%rowtype) is
  begin
    for r in (select *
                from Hpd_Journal_Overtimes q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      Htt_Core.Remove_Overtime_Facts(i_Company_Id  => r.Company_Id,
                                     i_Filial_Id   => r.Filial_Id,
                                     i_Overtime_Id => r.Overtime_Id);
    
      for w in (select Tl.Timebook_Id
                  from Hpr_Timesheet_Locks Tl
                 where Tl.Company_Id = r.Company_Id
                   and Tl.Filial_Id = r.Filial_Id
                   and Tl.Staff_Id = r.Staff_Id
                   and Tl.Timesheet_Date between r.Begin_Date and r.End_Date
                 group by Tl.Timebook_Id)
      loop
        Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Timebook_Id => w.Timebook_Id,
                                      i_Staff_Id    => r.Staff_Id);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Adjustment_Unpost(i_Journal Hpd_Journals%rowtype) is
    r_Timebook_Adjustment Hpd_Journal_Timebook_Adjustments%rowtype;
    v_Turnout_Adjustment  number;
    v_Overtime_Adjustment number;
    v_Lack_Tk_Id          number;
    v_Timesheet_Id        number;
  begin
    r_Timebook_Adjustment := z_Hpd_Journal_Timebook_Adjustments.Lock_Load(i_Company_Id => i_Journal.Company_Id,
                                                                          i_Filial_Id  => i_Journal.Filial_Id,
                                                                          i_Journal_Id => i_Journal.Journal_Id);
  
    v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => i_Journal.Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select q.Staff_Id
                from Hpd_Journal_Pages q
               where q.Company_Id = i_Journal.Company_Id
                 and q.Filial_Id = i_Journal.Filial_Id
                 and q.Journal_Id = i_Journal.Journal_Id)
    loop
      v_Timesheet_Id := Htt_Util.Timesheet(i_Company_Id => i_Journal.Company_Id, --
                        i_Filial_Id => i_Journal.Filial_Id, --
                        i_Staff_Id => r.Staff_Id, --
                        i_Timesheet_Date => r_Timebook_Adjustment.Adjustment_Date).Timesheet_Id;
    
      continue when v_Timesheet_Id is null;
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Overtime_Adjustment);
    
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => i_Journal.Company_Id,
                                       i_Filial_Id    => i_Journal.Filial_Id,
                                       i_Timesheet_Id => v_Timesheet_Id,
                                       i_Time_Kind_Id => v_Turnout_Adjustment);
    end loop;
  
    for r in (select Df.*,
                     Ts.Timesheet_Id,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = La.Company_Id
                            and Tl.Filial_Id = La.Filial_Id
                            and Tl.Staff_Id = La.Staff_Id
                            and Tl.Timesheet_Date = La.Adjustment_Date),
                         'N') Timesheet_Locked
                from Hpd_Lock_Adjustments La
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = La.Company_Id
                 and Df.Filial_Id = La.Filial_Id
                 and Df.Staff_Id = La.Staff_Id
                 and Df.Adjustment_Date = La.Adjustment_Date
                join Htt_Timesheets Ts
                  on Ts.Company_Id = La.Company_Id
                 and Ts.Filial_Id = La.Filial_Id
                 and Ts.Staff_Id = La.Staff_Id
                 and Ts.Timesheet_Date = La.Adjustment_Date
               where La.Company_Id = i_Journal.Company_Id
                 and La.Filial_Id = i_Journal.Filial_Id
                 and La.Journal_Id = i_Journal.Journal_Id)
    loop
      if r.Timesheet_Locked = 'Y' then
        z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Journal.Company_Id,
                                         i_Filial_Id    => i_Journal.Filial_Id,
                                         i_Timesheet_Id => r.Timesheet_Id,
                                         i_Time_Kind_Id => v_Lack_Tk_Id,
                                         i_Fact_Value   => Option_Number(r.Fact_Value));
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Journal.Company_Id,
                                         i_Filial_Id      => i_Journal.Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Adjustment_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Htt_Core.Make_Dirty_Timesheet(i_Company_Id   => i_Journal.Company_Id,
                                      i_Filial_Id    => i_Journal.Filial_Id,
                                      i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    delete from Hpd_Lock_Adjustments q
     where q.Company_Id = i_Journal.Company_Id
       and q.Filial_Id = i_Journal.Filial_Id
       and q.Journal_Id = i_Journal.Journal_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Unpost
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Journal_Id   number,
    i_Source_Table varchar2 := null,
    i_Source_Id    number := null,
    i_Repost       boolean := false
  ) is
    r_Journal               Hpd_Journals%rowtype;
    v_Document_Status       varchar2(1);
    v_Evaluate_Trash_Tracks boolean := false;
  begin
    r_Journal := z_Hpd_Journals.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Journal_Id => i_Journal_Id);
  
    if r_Journal.Posted = 'N' then
      Hpd_Error.Raise_023(r_Journal.Journal_Number);
    end if;
  
    if not Fazo.Equal(r_Journal.Source_Table, i_Source_Table) or
       not Fazo.Equal(r_Journal.Source_Id, i_Source_Id) then
      Hpd_Error.Raise_070(i_Jounal_Id         => r_Journal.Journal_Id,
                          i_Journal_Number    => r_Journal.Journal_Number,
                          i_Journal_Type_Name => z_Hpd_Journal_Types.Load(i_Company_Id => i_Company_Id, i_Journal_Type_Id => r_Journal.Journal_Type_Id).Name,
                          i_Source_Table      => r_Journal.Source_Table,
                          i_Source_Id         => r_Journal.Source_Id);
    end if;
  
    Fill_Journal_Staff_Cache(i_Company_Id => r_Journal.Company_Id,
                             i_Filial_Id  => r_Journal.Filial_Id,
                             i_Journal_Id => r_Journal.Journal_Id);
  
    if Hpd_Util.Is_Hiring_Journal(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Contractor_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Hiring_Journal_Unpost(r_Journal);
    
      Hiring_Cv_Contract_Unpost(r_Journal, i_Repost);
    
      v_Evaluate_Trash_Tracks := true;
    elsif Hpd_Util.Is_Transfer_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Transfer_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Dismissal_Journal(i_Company_Id      => r_Journal.Company_Id,
                                        i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Dismissal_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Wage_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Wage_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Rank_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                          i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Rank_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Limit_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                           i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Vacation_Limit_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Schedule_Change_Journal(i_Company_Id      => r_Journal.Company_Id,
                                              i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Schedule_Change_Journal_Unpost(r_Journal);
    elsif Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => r_Journal.Company_Id,
                                         i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => r_Journal.Company_Id,
                                            i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timeoff_Unpost(r_Journal);
    elsif Hpd_Util.Is_Overtime_Journal(i_Company_Id      => r_Journal.Company_Id,
                                       i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Overtime_Unpost(r_Journal);
    elsif Hpd_Util.Is_Timebook_Adjustment_Journal(i_Company_Id      => r_Journal.Company_Id,
                                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id) then
      Timebook_Adjustment_Unpost(r_Journal);
    else
      b.Raise_Not_Implemented;
    end if;
  
    r_Journal.Posted := 'N';
  
    z_Hpd_Journals.Save_Row(r_Journal);
  
    -- Sign Document To Draft 
    v_Document_Status := Hpd_Util.Load_Sign_Document_Status(i_Company_Id  => r_Journal.Company_Id,
                                                            i_Document_Id => r_Journal.Sign_Document_Id);
  
    if v_Document_Status is not null then
      Mdf_Api.Document_Draft(i_Company_Id  => r_Journal.Company_Id,
                             i_Document_Id => r_Journal.Sign_Document_Id);
    end if;
  
    if not i_Repost then
      Dirty_Staffs_Evaluate(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Agreements_Evaluate(i_Company_Id);
    
      if v_Evaluate_Trash_Tracks then
        Evaluate_Trash_Tracks(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Journal_Id => i_Journal_Id);
      end if;
    
      Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      Evaluate_Journal_Page_Cache(i_Company_Id      => r_Journal.Company_Id,
                                  i_Journal_Type_Id => r_Journal.Journal_Type_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Evaluate_Used_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date,
    i_Accrual    boolean := true
  ) is
    v_Part       Hpd_Pref.Transaction_Part_Rt;
    v_Parts      Hpd_Pref.Transaction_Part_Nt;
    v_Days_Count number;
    v_Coef       number := 1;
  begin
    if not i_Accrual then
      v_Coef := -1;
    end if;
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Begin_Date        => i_Begin_Date,
                                                     i_End_Date          => i_End_Date,
                                                     i_Trans_Types       => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Vacation_Limit),
                                                     i_Partition_By_Year => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Part := v_Parts(i);
    
      v_Days_Count := Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id,
                                         i_Begin_Date => v_Part.Part_Begin,
                                         i_End_Date   => v_Part.Part_End);
    
      Vacation_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Staff_Id   => i_Staff_Id,
                                 i_Begin_Date => v_Part.Part_Begin,
                                 i_End_Date   => Htt_Util.Year_Last_Day(v_Part.Part_Begin),
                                 i_Days_Kind  => Hpd_Pref.c_Vacation_Turnover_Used_Days,
                                 i_Days_Count => v_Coef * v_Days_Count);
    end loop;
  
    Assert_Vacation_Turnover(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Staff_Id   => i_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Spend_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => true);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Free_Vacation_Days
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    Evaluate_Used_Vacation_Days(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date,
                                i_Accrual    => false);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date,
    i_Kind            varchar2,
    i_Assertable      boolean := true,
    i_Journal_Type_Id number := null,
    o_Interval_Id     out number
  ) is
    v_Intersect_Begin date;
    v_Intersect_End   date;
    v_Interval_Kind   varchar2(1) := i_Kind;
  
    --------------------------------------------------
    Function Get_Timeoff_Interval_Kind return varchar2 is
    begin
      if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                        i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave;
      elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                              i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip;
      elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                         i_Journal_Type_Id => i_Journal_Type_Id) then
        return Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation;
      else
        b.Raise_Not_Implemented;
      end if;
    
      return null;
    end;
  begin
    if i_Assertable then
      -- assert locked interval intersection
      begin
        select q.Begin_Date, q.End_Date
          into v_Intersect_Begin, v_Intersect_End
          from Hpd_Lock_Intervals q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Staff_Id = i_Staff_Id
           and q.Kind = i_Kind
           and Greatest(q.Begin_Date, i_Begin_Date) <= Least(q.End_Date, i_End_Date)
           and Rownum = 1;
      
        if v_Interval_Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
          v_Interval_Kind := Get_Timeoff_Interval_Kind;
        end if;
      
        Hpd_Error.Raise_024(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Interval_Begin  => i_Begin_Date,
                            i_Interval_End    => i_End_Date,
                            i_Intersect_Begin => v_Intersect_Begin,
                            i_Intersect_End   => v_Intersect_End,
                            i_Interval_Kind   => v_Interval_Kind);
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  
    o_Interval_Id := Hpd_Next.Lock_Interval_Id;
  
    z_Hpd_Lock_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Interval_Id => o_Interval_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => i_End_Date,
                                    i_Kind        => i_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Lock_Interval_Insert
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Trans_Id                   number;
    v_Parts                      Hpd_Pref.Transaction_Part_Nt;
    v_Oper_Type_Ids              Array_Number;
    v_Oper_Group_Id              number;
    v_No_Deduction_Oper_Group_Id number;
    v_Deduction_Oper_Group_Id    number;
    v_Overtime_Oper_Group_Id     number;
    o_Interval_Id                number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Timebook,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hpr_Timebook_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Timebook_Id => i_Timebook_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Interval_Id => o_Interval_Id);
  
    v_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_No_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage_No_Deduction);
  
    v_Deduction_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                        i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Penalty_For_Discipline);
  
    v_Overtime_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                       i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Overtime);
  
    v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                     i_Filial_Id       => i_Filial_Id,
                                                     i_Staff_Id        => i_Staff_Id,
                                                     i_Begin_Date      => i_Begin_Date,
                                                     i_End_Date        => i_End_Date,
                                                     i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                         Hpd_Pref.c_Transaction_Type_Operation,
                                                                                         Hpd_Pref.c_Transaction_Type_Schedule,
                                                                                         Hpd_Pref.c_Transaction_Type_Currency),
                                                     i_With_Wage_Scale => true);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                                i_Period     => v_Parts(i).Part_Begin);
    
      select t.Oper_Type_Id
        bulk collect
        into v_Oper_Type_Ids
        from Hpd_Trans_Oper_Types t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Trans_Id = v_Trans_Id
         and exists (select 1
                from Hpr_Oper_Types s
               where s.Company_Id = t.Company_Id
                 and s.Oper_Type_Id = t.Oper_Type_Id
                 and s.Oper_Group_Id in (v_Oper_Group_Id,
                                         v_No_Deduction_Oper_Group_Id,
                                         v_Deduction_Oper_Group_Id,
                                         v_Overtime_Oper_Group_Id));
    
      for j in 1 .. v_Oper_Type_Ids.Count
      loop
        -- this situation must be taken into account
        Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                               i_Filial_Id    => i_Filial_Id,
                               i_Interval_Id  => o_Interval_Id,
                               i_Staff_Id     => i_Staff_Id,
                               i_Oper_Type_Id => v_Oper_Type_Ids(j),
                               i_Begin_Date   => v_Parts(i).Part_Begin,
                               i_End_Date     => v_Parts(i).Part_End);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timeoff_Lock_Interval_Insert
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Parts        Hpd_Pref.Transaction_Part_Nt := Hpd_Pref.Transaction_Part_Nt();
    v_Trans_Types  Array_Varchar2;
    v_Oper_Type_Id number;
    o_Interval_Id  number;
    r_Staff        Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Staff_Id        => i_Staff_Id,
                         i_Begin_Date      => i_Begin_Date,
                         i_End_Date        => i_End_Date,
                         i_Kind            => Hpd_Pref.c_Lock_Interval_Kind_Timeoff,
                         i_Journal_Type_Id => i_Journal_Type_Id,
                         o_Interval_Id     => o_Interval_Id);
  
    z_Hpd_Timeoff_Intervals.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Timeoff_Id  => i_Timeoff_Id,
                                       i_Interval_Id => o_Interval_Id);
  
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Sick_Leave);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Business_Trip);
      v_Trans_Types  := Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                       Hpd_Pref.c_Transaction_Type_Operation,
                                       Hpd_Pref.c_Transaction_Type_Schedule,
                                       Hpd_Pref.c_Transaction_Type_Currency);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Oper_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Vacation);
      v_Trans_Types  := Array_Varchar2();
    else
      b.Raise_Not_Implemented;
    end if;
  
    if v_Trans_Types.Count > 0 then
      v_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                       i_Filial_Id       => i_Filial_Id,
                                                       i_Staff_Id        => i_Staff_Id,
                                                       i_Begin_Date      => i_Begin_Date,
                                                       i_End_Date        => i_End_Date,
                                                       i_Trans_Types     => v_Trans_Types,
                                                       i_With_Wage_Scale => true);
    else
      r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Staff_Id   => i_Staff_Id);
    
      v_Parts.Extend();
      v_Parts(v_Parts.Count) := Hpd_Pref.Transaction_Part_Rt(Part_Begin => Greatest(i_Begin_Date,
                                                                                    r_Staff.Hiring_Date),
                                                             Part_End   => Least(i_End_Date,
                                                                                 Nvl(r_Staff.Dismissal_Date,
                                                                                     i_End_Date)));
    end if;
  
    for i in 1 .. v_Parts.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Id,
                             i_Begin_Date   => v_Parts(i).Part_Begin,
                             i_End_Date     => v_Parts(i).Part_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Perf_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Plan_Id number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
    v_Trans_Id              number;
    r_Staff_Plan            Hper_Staff_Plans%rowtype;
    v_Oper_Type_Ids         Array_Number;
    v_Perf_Oper_Group_Id    number;
    v_Penalty_Oper_Group_Id number;
    v_Begin_Date            date;
    v_End_Date              date;
    v_Trans_Date            date;
    o_Interval_Id           number;
    r_Staff                 Href_Staffs%rowtype;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => Hpd_Pref.c_Lock_Interval_Kind_Performance,
                         i_Assertable  => false,
                         o_Interval_Id => o_Interval_Id);
  
    z_Hper_Staff_Plan_Intervals.Insert_One(i_Company_Id    => i_Company_Id,
                                           i_Filial_Id     => i_Filial_Id,
                                           i_Staff_Plan_Id => i_Staff_Plan_Id,
                                           i_Interval_Id   => o_Interval_Id);
  
    v_Perf_Oper_Group_Id    := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf);
    v_Penalty_Oper_Group_Id := Hpr_Util.Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Perf_Penalty);
  
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    v_Begin_Date := Greatest(i_Begin_Date, r_Staff.Hiring_Date);
    v_End_Date   := Least(i_End_Date, Nvl(r_Staff.Dismissal_Date, i_End_Date));
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => i_Staff_Plan_Id);
  
    select max(q.Begin_Date)
      into v_Trans_Date
      from Hpd_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Page_Id = r_Staff_Plan.Journal_Page_Id;
  
    v_Trans_Date := Greatest(v_Trans_Date, v_Begin_Date);
  
    v_Trans_Id := Hpd_Util.Trans_Id_By_Period(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Trans_Type => Hpd_Pref.c_Transaction_Type_Operation,
                                              i_Period     => v_Trans_Date);
  
    select t.Oper_Type_Id
      bulk collect
      into v_Oper_Type_Ids
      from Hpd_Trans_Oper_Types t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Trans_Id = v_Trans_Id
       and exists
     (select 1
              from Hpr_Oper_Types s
             where s.Company_Id = t.Company_Id
               and s.Oper_Type_Id = t.Oper_Type_Id
               and s.Oper_Group_Id in (v_Perf_Oper_Group_Id, v_Penalty_Oper_Group_Id));
  
    for j in 1 .. v_Oper_Type_Ids.Count
    loop
      -- this situation must be taken into account
      Hpr_Core.Charge_Insert(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Interval_Id  => o_Interval_Id,
                             i_Staff_Id     => i_Staff_Id,
                             i_Oper_Type_Id => v_Oper_Type_Ids(j),
                             i_Begin_Date   => v_Begin_Date,
                             i_End_Date     => v_End_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Lock_Interval_Insert
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Operation_Id  number,
    i_Staff_Id      number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Interval_Kind varchar2
  ) is
    v_Interval_Id number;
  begin
    Lock_Interval_Insert(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => i_End_Date,
                         i_Kind        => i_Interval_Kind,
                         o_Interval_Id => v_Interval_Id);
  
    z_Hpr_Sales_Bonus_Payment_Intervals.Insert_One(i_Company_Id   => i_Company_Id,
                                                   i_Filial_Id    => i_Filial_Id,
                                                   i_Operation_Id => i_Operation_Id,
                                                   i_Interval_Id  => v_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Interval_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Interval_Id number,
    i_Timeoff_Id  number := null
  ) is
    r_Interval   Hpd_Lock_Intervals%rowtype;
    v_Begin_Date date;
    v_End_Date   date;
  begin
    select q.Begin_Date, q.End_Date
      into v_Begin_Date, v_End_Date
      from Hpr_Charges q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = i_Interval_Id
       and q.Status <> Hpr_Pref.c_Charge_Status_New
       and Rownum = 1;
  
    r_Interval := z_Hpd_Lock_Intervals.Lock_Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Interval_Id => i_Interval_Id);
  
    if r_Interval.Kind = Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
      r_Interval.Kind := Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Timeoff_Id => i_Timeoff_Id);
    end if;
  
    Hpd_Error.Raise_025(i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => r_Interval.Company_Id,
                                                                i_Filial_Id  => r_Interval.Filial_Id,
                                                                i_Staff_Id   => r_Interval.Staff_Id),
                        i_Interval_Kind => r_Interval.Kind,
                        i_Charge_Begin  => v_Begin_Date,
                        i_Charge_End    => v_End_Date);
  exception
    when No_Data_Found then
      z_Hpd_Lock_Intervals.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Interval_Id => i_Interval_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Staff_Id       number,
    i_Begin_Date     date,
    i_End_Date       date,
    i_Remove_Timeoff boolean := false
  ) is
  begin
    Htt_Core.Gen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                               i_Filial_Id      => i_Filial_Id,
                               i_Timeoff_Id     => i_Timeoff_Id,
                               i_Remove_Timeoff => i_Remove_Timeoff);
  
    for r in (select Tl.Timebook_Id
                from Hpr_Timesheet_Locks Tl
               where Tl.Company_Id = i_Company_Id
                 and Tl.Filial_Id = i_Filial_Id
                 and Tl.Staff_Id = i_Staff_Id
                 and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
               group by Tl.Timebook_Id)
    loop
      -- careful with hpd_core <=> hpr_core recursion
      Hpr_Core.Regen_Timebook_Facts(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Timebook_Id => r.Timebook_Id,
                                    i_Staff_Id    => i_Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
    v_Timeoff_Tk_Id  number;
    v_Turnout_Id     number;
    v_Turnout_Locked varchar2(1);
    v_Timeoff_Date   date := i_Begin_Date;
  
    --------------------------------------------------
    Procedure Assert_No_Timesheet_Adjustments
    (
      i_Company_Id      number,
      i_Filial_Id       number,
      i_Staff_Id        number,
      i_Timeoff_Id      number,
      i_Adjustment_Date date
    ) is
    begin
      if z_Hpd_Lock_Adjustments.Exist(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Adjustment_Date => i_Adjustment_Date) then
        Hpd_Error.Raise_076(i_Interval_Kind   => Get_Timeoff_Interval_Kind(i_Company_Id => i_Company_Id,
                                                                           i_Filial_Id  => i_Filial_Id,
                                                                           i_Timeoff_Id => i_Timeoff_Id),
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => i_Staff_Id),
                            i_Adjustment_Date => i_Adjustment_Date);
      end if;
    end;
  
  begin
    if Hpd_Util.Is_Sick_Leave_Journal(i_Company_Id      => i_Company_Id,
                                      i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Sick);
    elsif Hpd_Util.Is_Business_Trip_Journal(i_Company_Id      => i_Company_Id,
                                            i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Timeoff_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Trip);
    elsif Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                       i_Journal_Type_Id => i_Journal_Type_Id) then
      v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
      v_Timeoff_Tk_Id  := z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
                          i_Filial_Id => i_Filial_Id, --
                          i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    while v_Timeoff_Date <= i_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist_Lock(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => v_Timeoff_Date) and
         Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                 i_Filial_Id      => i_Filial_Id,
                                 i_Staff_Id       => i_Staff_Id,
                                 i_Timesheet_Date => v_Timeoff_Date,
                                 i_Time_Kind_Id   => v_Turnout_Id) > 0 then
        v_Turnout_Locked := 'Y';
      else
        v_Turnout_Locked := 'N';
      end if;
    
      Assert_No_Timesheet_Adjustments(i_Company_Id      => i_Company_Id,
                                      i_Filial_Id       => i_Filial_Id,
                                      i_Staff_Id        => i_Staff_Id,
                                      i_Timeoff_Id      => i_Timeoff_Id,
                                      i_Adjustment_Date => v_Timeoff_Date);
    
      z_Hpd_Timeoff_Days.Insert_One(i_Company_Id     => i_Company_Id,
                                    i_Filial_Id      => i_Filial_Id,
                                    i_Staff_Id       => i_Staff_Id,
                                    i_Timeoff_Date   => v_Timeoff_Date,
                                    i_Timeoff_Id     => i_Timeoff_Id,
                                    i_Time_Kind_Id   => v_Timeoff_Tk_Id,
                                    i_Turnout_Locked => v_Turnout_Locked);
    
      v_Timeoff_Date := v_Timeoff_Date + 1;
    end loop;
  
    Regen_Timeoff_Facts(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Timeoff_Id => i_Timeoff_Id,
                        i_Staff_Id   => i_Staff_Id,
                        i_Begin_Date => i_Begin_Date,
                        i_End_Date   => i_End_Date);
  
    if v_Vacation_Tk_Id = v_Timeoff_Tk_Id and
       Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) then
      Spend_Vacation_Days(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Timeoff_Days
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Journal_Type_Id number,
    i_Timeoff_Id      number,
    i_Staff_Id        number,
    i_Begin_Date      date,
    i_End_Date        date
  ) is
    v_Vacation_Tk_Id number;
  begin
    v_Vacation_Tk_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Vacation);
  
    if Hpd_Util.Is_Vacation_Journal(i_Company_Id      => i_Company_Id,
                                    i_Journal_Type_Id => i_Journal_Type_Id) and --
       v_Vacation_Tk_Id = --
       z_Hpd_Vacations.Load(i_Company_Id => i_Company_Id, --
       i_Filial_Id => i_Filial_Id, --
       i_Timeoff_Id => i_Timeoff_Id).Time_Kind_Id then
      Free_Vacation_Days(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
    end if;
  
    Regen_Timeoff_Facts(i_Company_Id     => i_Company_Id,
                        i_Filial_Id      => i_Filial_Id,
                        i_Timeoff_Id     => i_Timeoff_Id,
                        i_Staff_Id       => i_Staff_Id,
                        i_Begin_Date     => i_Begin_Date,
                        i_End_Date       => i_End_Date,
                        i_Remove_Timeoff => true);
  
    delete Hpd_Timeoff_Days Td
     where Td.Company_Id = i_Company_Id
       and Td.Filial_Id = i_Filial_Id
       and Td.Timeoff_Id = i_Timeoff_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_026(i_Contract_Id);
    end if;
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                            i_Filial_Id   => r_Contract.Filial_Id,
                                            i_Contract_Id => r_Contract.Contract_Id,
                                            i_Month       => Trunc(r_Contract.End_Date, 'mon'));
    else
      r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
      r_Contract.End_Date   := Trunc(r_Contract.End_Date, 'mon');
    
      while r_Contract.Begin_Date <= r_Contract.End_Date
      loop
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => r_Contract.Company_Id,
                                              i_Filial_Id   => r_Contract.Filial_Id,
                                              i_Contract_Id => r_Contract.Contract_Id,
                                              i_Month       => r_Contract.Begin_Date);
      
        r_Contract.Begin_Date := Add_Months(r_Contract.Begin_Date, 1);
      end loop;
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id  => r_Contract.Company_Id,
                                  i_Filial_Id   => r_Contract.Filial_Id,
                                  i_Contract_Id => r_Contract.Contract_Id,
                                  i_Posted      => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
    v_Month    date;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_027(i_Contract_Id);
    end if;
  
    begin
      select q.Month
        into v_Month
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = r_Contract.Company_Id
         and q.Filial_Id = r_Contract.Filial_Id
         and q.Contract_Id = r_Contract.Contract_Id
         and q.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New
         and Rownum = 1;
    
      Hpd_Error.Raise_028(i_Person_Name => z_Mr_Natural_Persons.Load(i_Company_Id => r_Contract.Company_Id, --
                                           i_Person_Id => r_Contract.Person_Id).Name,
                          i_Fact_Month  => v_Month);
    exception
      when No_Data_Found then
        delete from Hpr_Cv_Contract_Facts q
         where q.Company_Id = r_Contract.Company_Id
           and q.Filial_Id = r_Contract.Filial_Id
           and q.Contract_Id = r_Contract.Contract_Id;
    end;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Posted            => Option_Varchar2('N'),
                                  i_Early_Closed_Date => Option_Date(null),
                                  i_Early_Closed_Note => Option_Varchar2(null));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
    r_Contract    Hpd_Cv_Contracts%rowtype;
    v_Begin_Month date;
  
    --------------------------------------------------
    Function Exist_Fact(i_Month date) return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Hpr_Cv_Contract_Facts q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Contract_Id = i_Contract_Id
         and q.Month = i_Month
         and Rownum = 1;
      return true;
    
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Procedure Gen(i_Month date) is
    begin
      if not Exist_Fact(i_Month) then
        Hpr_Core.Generate_Fact_Of_Cv_Contract(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Contract_Id => i_Contract_Id,
                                              i_Month       => i_Month);
      end if;
    end;
  begin
    if i_Early_Closed_Date is null then
      Hpd_Error.Raise_031(i_Contract_Id);
    end if;
  
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'N' then
      Hpd_Error.Raise_029(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r_Contract.Company_Id,
                                  i_Filial_Id         => r_Contract.Filial_Id,
                                  i_Contract_Id       => r_Contract.Contract_Id,
                                  i_Early_Closed_Date => Option_Date(i_Early_Closed_Date),
                                  i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
  
    r_Contract.Begin_Date := Trunc(r_Contract.Begin_Date, 'mon');
    r_Contract.End_Date   := Trunc(i_Early_Closed_Date, 'mon');
  
    if r_Contract.Contract_Kind = Hpd_Pref.c_Cv_Contract_Kind_Simple then
      Gen(r_Contract.End_Date);
    else
      v_Begin_Month := r_Contract.Begin_Date;
    
      while v_Begin_Month <= r_Contract.End_Date
      loop
        Gen(v_Begin_Month);
        v_Begin_Month := Add_Months(v_Begin_Month, 1);
      end loop;
    end if;
  
    Hpr_Core.Cv_Contract_Facts_Delete(i_Company_Id        => r_Contract.Company_Id,
                                      i_Filial_Id         => r_Contract.Filial_Id,
                                      i_Contract_Id       => r_Contract.Contract_Id,
                                      i_Begin_Date        => r_Contract.Begin_Date,
                                      i_Early_Closed_Date => i_Early_Closed_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number
  ) is
    r_Contract Hpd_Cv_Contracts%rowtype;
  begin
    r_Contract := z_Hpd_Cv_Contracts.Lock_Load(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Contract_Id => i_Contract_Id);
  
    if r_Contract.Posted = 'Y' then
      Hpd_Error.Raise_041(i_Contract_Id);
    end if;
  
    z_Hpd_Cv_Contracts.Delete_One(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Contract_Id => i_Contract_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Close
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Journal_Id        number,
    i_Early_Closed_Date date,
    i_Early_Closed_Note varchar2
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id)
    loop
      z_Hpd_Hirings.Update_One(i_Company_Id     => r.Company_Id,
                               i_Filial_Id      => r.Filial_Id,
                               i_Page_Id        => r.Page_Id,
                               i_Dismissal_Date => Option_Date(i_Early_Closed_Date));
    
      z_Hpd_Cv_Contracts.Update_One(i_Company_Id        => r.Company_Id,
                                    i_Filial_Id         => r.Filial_Id,
                                    i_Contract_Id       => r.Contract_Id,
                                    i_Early_Closed_Note => Option_Varchar2(i_Early_Closed_Note));
    end loop;
  
    Hpd_Core.Journal_Unpost(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Journal_Id => i_Journal_Id,
                            i_Repost     => true);
  
    Hpd_Core.Journal_Post(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Journal_Id => i_Journal_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Hiring_Cv_Contract_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number,
    i_Page_Ids   Array_Number := Array_Number()
  ) is
  begin
    for r in (select q.*, Ct.Contract_Id
                from Hpd_Journal_Pages q
                join Hpd_Cv_Contracts Ct
                  on Ct.Company_Id = q.Company_Id
                 and Ct.Filial_Id = q.Filial_Id
                 and Ct.Page_Id = q.Page_Id
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Journal_Id = i_Journal_Id
                 and q.Page_Id not member of i_Page_Ids)
    loop
      Cv_Contract_Delete(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Contract_Id => r.Contract_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Title          varchar2,
    i_Grants         Array_Varchar2,
    i_Uri            varchar2,
    i_Uri_Param      Hashmap,
    i_Except_User_Id number,
    i_Created_By     number := null -- optional, specified if the user that created the application needs to be notified too
  ) is
  begin
    Href_Core.Send_Application_Notification(i_Company_Id         => i_Company_Id,
                                            i_Filial_Id          => i_Filial_Id,
                                            i_Title              => i_Title,
                                            i_Form               => Hpd_Pref.c_Form_Application_List,
                                            i_Action_Keys        => i_Grants,
                                            i_Uri                => i_Uri,
                                            i_Uri_Param          => i_Uri_Param,
                                            i_Except_User_Id     => i_Except_User_Id,
                                            i_Additional_User_Id => i_Created_By);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Robot_Book_Transactions
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Journal_Id number
  ) is
  begin
    for r in (select p.Page_Id, q.Trans_Id
                from Hpd_Journal_Pages p
                join Hpd_Robot_Trans_Pages q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Page_Id = p.Page_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Journal_Id = i_Journal_Id)
    loop
      z_Hpd_Robot_Trans_Staffs.Delete_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Robot_Trans_Id => r.Trans_Id);
    
      z_Hpd_Robot_Trans_Pages.Delete_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Page_Id    => r.Page_Id,
                                         i_Trans_Id   => r.Trans_Id);
    
      Hrm_Core.Robot_Transaction_Delete(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => r.Trans_Id);
    end loop;
  
    Hrm_Core.Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Hpd_Core;
/

create or replace package Hpd_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name        varchar2,
    i_Intersection_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name    varchar2,
    i_Exceed_Date   date,
    i_Exceed_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name       varchar2,
    i_First_Dismissal  date,
    i_Second_Dismissal date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Interval_Kind varchar2,
    i_Trans_Type    varchar2,
    i_Staff_Name    varchar2,
    i_Begin_Date    date,
    i_End_Date      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name     varchar2,
    i_Trans_Type     varchar2,
    i_Trans_Date     date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name       varchar2,
    i_Primary_Hiring   date,
    i_Secondary_Hiring date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name          varchar2,
    i_Primary_Dismissal   date,
    i_Secondary_Dismissal date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Dismissed_Cnt number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name       varchar2,
    i_Secondary_Hiring date,
    i_Primary_Hiring   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Staff_Name      varchar2,
    i_Interval_Begin  date,
    i_Interval_End    date,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Interval_Kind   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025
  (
    i_Staff_Name    varchar2,
    i_Interval_Kind varchar2,
    i_Charge_Begin  date,
    i_Charge_End    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Person_Name varchar2,
    i_Fact_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Timeoff_Id number,
    i_Journal_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Staff_Name     varchar2,
    i_Journal_Number varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Overtime_Id number,
    i_Journal_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Staff_Name      varchar2,
    i_Oper_Group_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Journal_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Staff_Name varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_050
  (
    i_Date  date,
    i_Month date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date,
    i_Journal_Number  varchar2,
    i_Journal_Date    date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065(i_Application_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Application_Number        varchar2,
    i_Journal_Number            varchar2,
    i_Journal_Employee_Name     varchar2,
    i_Application_Employee_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Application_Number varchar2,
    i_Journal_Number     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Wrong_Application_Type    varchar2,
    i_Expected_Application_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073(i_Staff_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_074
  (
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Staff_Name     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Interval_Kind varchar2,
    i_Staff_Name    varchar2,
    i_Timeoff_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Interval_Kind   varchar2,
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078(i_Employee_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079(i_Application_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080(i_Application_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_084
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_086
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_087
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_088(i_Journal_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_089(i_Journal_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_090
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  );
end Hpd_Error;
/
create or replace package body Hpd_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPD:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hpd_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Interval_Kind(i_Interval_Kind varchar2) return varchar2 is
  begin
    case i_Interval_Kind
      when Hpd_Pref.c_Lock_Interval_Kind_Timebook then
        return t('error:interval_kind:timebook');
      when Hpd_Pref.c_Lock_Interval_Kind_Performance then
        return t('error:interval_kind:perfomance');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Business_Trip then
        return t('error:interval_kind:business_trip');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Sick_Leave then
        return t('error:interval_kind:sick_leave');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff_Vacation then
        return t('error:interval_kind:vacation');
      when Hpd_Pref.c_Lock_Interval_Kind_Timeoff then
        return t('error:interval_kind:timeoff');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales then
        return t('error:interval_kind:sales_bonus_personal_sales');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales then
        return t('error:interval_kind:sales_bonus_department_sales');
      when Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery then
        return t('error:interval_kind:sales_bonus_successful_delivery');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function t_Trans_Type(i_Trans_Type varchar2) return varchar2 is
  begin
    case i_Trans_Type
      when Hpd_Pref.c_Transaction_Type_Robot then
        return t('error:trans_type:robot');
      when Hpd_Pref.c_Transaction_Type_Operation then
        return t('error:trans_type:operation');
      when Hpd_Pref.c_Transaction_Type_Schedule then
        return t('error:trans_type:schedule');
      when Hpd_Pref.c_Transaction_Type_Rank then
        return t('error:trans_type:rank');
      when Hpd_Pref.c_Transaction_Type_Vacation_Limit then
        return t('error:trans_type:vacation limit');
      when Hpd_Pref.c_Transaction_Type_Currency then
        return t('error:trans_type:currency');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Journal_Source_Info
  (
    i_Jounal_Id         number,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number,
    o_Source_Name       out varchar2,
    o_Source_Id         out number
  ) is
  begin
    if i_Source_Table is null then
      o_Source_Name := i_Journal_Type_Name;
      o_Source_Id   := i_Jounal_Id;
    elsif i_Source_Table = Zt.Htm_Recommended_Rank_Documents.Name then
      o_Source_Name := t('error:source:recommended rank document');
      o_Source_Id   := i_Source_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:unpost staff $1 hiring', i_Staff_Name),
          i_Title   => t('001:title:cannot delete staff'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name        varchar2,
    i_Intersection_Date date
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:employee $1{employee_name} staffs intersect on $2{intersection_date}',
                         i_Staff_Name,
                         i_Intersection_Date),
          i_Title   => t('002:title:staff intersection found'),
          i_S1      => t('002:solution:move hiring date after $2{intersection_date}',
                         i_Intersection_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003 is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:got unregistered vacation turnover days kind'),
          i_Title   => t('003:title:days kind not found {vacation turnover days kind}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name    varchar2,
    i_Exceed_Date   date,
    i_Exceed_Amount number
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:cannot post vacation for $1{staff_name} on $2{exceed_date}, exceed_amount=$3',
                         i_Staff_Name,
                         i_Exceed_Date,
                         i_Exceed_Amount),
          i_Title   => t('004:title:vacation limit exceeded'),
          i_S1      => t('004:solution:add vacation limit days or decrease vacation days'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name       varchar2,
    i_First_Dismissal  date,
    i_Second_Dismissal date
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:staff $1{staff_name} has dismissal on $1{first_dismissal_date} and $2{second_dismissal_data_two}',
                         i_Staff_Name,
                         i_First_Dismissal,
                         i_Second_Dismissal),
          i_Title   => t('005:title:two dismissals found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Interval_Kind varchar2,
    i_Trans_Type    varchar2,
    i_Staff_Name    varchar2,
    i_Begin_Date    date,
    i_End_Date      date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
    v_t_Trans_Type    varchar2(50) := t_Trans_Type(i_Trans_Type);
  
    --------------------------------------------------
    Function Blocked_Period
    (
      i_Begin_Date date,
      i_End_Date   date
    ) return varchar2 is
      result varchar2(100) := to_char(i_End_Date, 'month yyyy');
    begin
      if Trunc(i_Begin_Date, 'mon') != Trunc(i_End_Date, 'mon') then
        result := to_char(i_Begin_Date, 'month yyyy') || ' – ' || result;
      end if;
    
      return result;
    end;
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:$1{interval_kind} blocks $2{trans_type} changes for staff $3{staff_name} between $4{begin_date} and $5{end_date}',
                         v_t_Interval_Kind,
                         v_t_Trans_Type,
                         i_Staff_Name,
                         i_Begin_Date,
                         i_End_Date),
          i_Title   => t('006:title:locked interval found'),
          i_S1      => t('006:solution:unpost $1{interval_kind} on $2{blocked_period}',
                         v_t_Interval_Kind,
                         Blocked_Period(i_Begin_Date, i_End_Date)),
          i_S2      => t('006:solution:move $1{trans_type} change date after $2{block_end_date}',
                         v_t_Trans_Type,
                         i_End_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes before hiring_date ($4{hiring_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Hiring_Date),
          i_Title   => t('007:title:found transaction before hiring'),
          i_S1      => t('007:solution:move transaction date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('007:solution:move hiring date before transaction date ($1{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name     varchar2,
    i_Trans_Type     varchar2,
    i_Trans_Date     date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes after dimissal ($4{dismissal_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Dismissal_Date),
          i_Title   => t('008:title:found transaction after dismissal'),
          i_S1      => t('008:solution:move transaction date before dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date),
          i_S2      => t('008:solution:move dismissal date after transaction date ($1{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:to remove $1{staff_name} hirings all transactions should be unposted',
                         i_Staff_Name),
          i_Title   => t('009:title:staff has posted transactions'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name       varchar2,
    i_Primary_Hiring   date,
    i_Secondary_Hiring date
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:secondary job for staff $1{staff_name} started ($2{secondary_hiring}) before primary job ($3{primary_hiring})',
                         i_Staff_Name,
                         i_Secondary_Hiring,
                         i_Primary_Hiring),
          i_Title   => t('010:title:secondary job cross out primary job'),
          i_S1      => t('010:solution:move secondary hiring date after primary hiring date ($1{primary_hiring})',
                         i_Primary_Hiring));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name          varchar2,
    i_Primary_Dismissal   date,
    i_Secondary_Dismissal date
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:secondary job for staff $1{staff_name} ended ($2{secondary_dismissal}) after primary job ($3{primary_dismissal})',
                         i_Staff_Name,
                         i_Secondary_Dismissal,
                         i_Primary_Dismissal),
          i_Title   => t('011:title:secondary job cross out primary job'),
          i_S1      => t('011:solution:move secondary dismissal date before primary dismissal date ($1{primary_hiring})',
                         i_Primary_Dismissal));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:staff $1{staff_name} secondary job requires primary job to be created',
                         i_Staff_Name),
          i_Title   => t('012:title:primary job not found'),
          i_S1      => t('012:solution:create primary job for staff $1{staff_name} before $2{hiring_date}',
                         i_Staff_Name,
                         i_Hiring_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name  varchar2,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:multiple primary jobs found after $1{hiring_date} for staff $2{staff_name}',
                         i_Hiring_Date,
                         i_Staff_Name),
          i_Title   => t('013:title:secondary job intersects multiple primary jobs'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name  varchar2,
    i_Trans_Type  varchar2,
    i_Trans_Date  date,
    i_Hiring_Date date
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:cannot post transaction for $1{staff_name}, because $2{trans_type} transaction on $3{trans_date} comes before hiring_date ($4{hiring_date})',
                         i_Staff_Name,
                         t_Trans_Type(i_Trans_Type),
                         i_Trans_Date,
                         i_Hiring_Date),
          i_Title   => t('014:title:transaction before hiring date'),
          i_S1      => t('014:solution:move transaction date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('014:solution:move hiring date before transaction date ($2{trans_date})',
                         i_Trans_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Dismissed_Cnt number
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:staff $1{staff_name} was dismissed $2{dismissed_cnt} times',
                         i_Staff_Name,
                         i_Dismissed_Cnt),
          i_Title   => t('015:title:multiple dismissals found'),
          i_S1      => t('015:solution:unpost one of dismissals'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:hiring date ($1{hiring_date}) for staff $2{staff_name} should not come after dismissal date ($3{dismissal_date})',
                         i_Hiring_Date,
                         i_Staff_Name,
                         i_Dismissal_Date),
          i_Title   => t('016:title:hiring after dismissal'),
          i_S1      => t('016:solution:move hiring date before dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date),
          i_S2      => t('016:solution:move dismissal date after desired hiring date ($1{hiring_date})',
                         i_Hiring_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:cannot remove hiring. staff $1{staff_name} is already dismissed',
                         i_Staff_Name),
          i_S1      => t('017:solution:unpost dismissal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:cannot remove hiring. staff $1{staff_name} has secondary jobs',
                         i_Staff_Name),
          i_S1      => t('018:solution:remove all secondary jobs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name       varchar2,
    i_Secondary_Hiring date,
    i_Primary_Hiring   date
  ) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:cannot change hiring date. secondary job for staff $1{staff_name} starts ($2{secondary_hiring}) before hiring date ($3{primary_hiring})',
                         i_Staff_Name,
                         i_Secondary_Hiring,
                         i_Primary_Hiring),
          i_S1      => t('019:solution:move hiring date before secondary job start ($1{secondary_hiring})',
                         i_Secondary_Hiring),
          i_S2      => t('019:solution:move secondary job start after hiring date ($1{orimary_hiring})',
                         i_Primary_Hiring));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name     varchar2,
    i_Hiring_Date    date,
    i_Dismissal_Date date
  ) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:dismissal date ($1{dismissal_date}) for staff $2{staff_name} should not come before hiring date ($3{hiring_date})',
                         i_Dismissal_Date,
                         i_Staff_Name,
                         i_Hiring_Date),
          i_Title   => t('020:title:dismissal before hiring'),
          i_S1      => t('020:solution:move dismissal date after hiring date ($1{hiring_date})',
                         i_Hiring_Date),
          i_S2      => t('020:solution:move hiring date before desired dismissal date ($1{dismissal_date})',
                         i_Dismissal_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:staff kind changed for staff $1{staff_name} when transfering other position',
                         i_Staff_Name),
          i_Title   => t('021:title:cannot change staff kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:journal $1{journal_number} already posted', i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:to unpost journal $1{journal_number} it should be initially posted',
                         i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Staff_Name      varchar2,
    i_Interval_Begin  date,
    i_Interval_End    date,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Interval_Kind   varchar2
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Begin_Inside boolean := i_Interval_Begin between i_Intersect_Begin and i_Intersect_End;
      v_End_Inside   boolean := i_Interval_End between i_Intersect_Begin and i_Intersect_End;
    begin
      case
        when v_Begin_Inside and not v_End_Inside then
          return t('024:solution:move $1{interval_kind} start date after $2{intersect_end}',
                   v_t_Interval_Kind,
                   i_Intersect_End);
        when not v_Begin_Inside and v_End_Inside then
          return t('024:solution:move $1{interval_kind} end date before $2{intersect_start}',
                   v_t_Interval_Kind,
                   i_Intersect_Begin);
        when v_Begin_Inside and v_End_Inside then
          return t('024:solution:move $1{interval_kind} out of $2{intersect_start} and $3{intersect_end}',
                   v_t_Interval_Kind,
                   i_Intersect_Begin,
                   i_Intersect_End);
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:found intersection for staff $1{staff_name} on $2{intersect_start} – $3{intersect_date}',
                         i_Staff_Name,
                         i_Intersect_Begin,
                         i_Intersect_End),
          i_Title   => t('024:title:cannot post $1{interval_kind}', v_t_Interval_Kind),
          i_S1      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025
  (
    i_Staff_Name    varchar2,
    i_Interval_Kind varchar2,
    i_Charge_Begin  date,
    i_Charge_End    date
  ) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot unpost $1{interval_kind} for staff $2{staff_name}, found charge linked to interval on $3{charge_begin} – $4{charge_end}',
                         t_Interval_Kind(i_Interval_Kind),
                         i_Staff_Name,
                         i_Charge_Begin,
                         i_Charge_End),
          i_Title   => t('025:title:used charge found'),
          i_S1      => t('025:solution:remove charge by deleting its book'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Contract_Id number) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:cv contract $1{contract_id} already posted', i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Contract_Id number) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:to unpost cv contract $1{contract_id} it should be initially posted',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Person_Name varchar2,
    i_Fact_Month  date
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:cannot unpost cv contract for $1{person_name}, found facts linked to interval on $2{facts_month}',
                         i_Person_Name,
                         to_char(i_Fact_Month, 'month yyyy')),
          i_Title   => t('028:title:used facts found'),
          i_S1      => t('028:solution:unpost facts and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Contract_Id number) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:to early close cv contract $1{contract_id} it should be initially posted',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030 is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:fatal:there is not any changed transactions'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Contract_Id number) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:cv contract $1{contract_id} must have date for early closure',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Timeoff_Id number,
    i_Journal_Id number
  ) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:cannot save timeoff. Timeoffs journal cannot be changed, trying to change timeoff $1{timeoff_id} in journal $2{journal_id}',
                         i_Timeoff_Id,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:to delete staff first unpost staff $1 hiring', i_Staff_Name),
          i_Title   => t('033:title:cannot delete staff'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:expected journal types $1{journal types} but got $2{wrong_journal_type}',
                         Fazo.Gather(i_Expected_Types, ', '),
                         i_Journal_Type),
          i_Title   => t('034:title:wrong journal type'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:cannot change/save journal. journal $1{journal_number} already posted',
                         i_Journal_Number),
          i_S1      => t('035:solution:post journal with changes'),
          i_S2      => t('035:solution:unpost journal then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036
  (
    i_Journal_Type   varchar2,
    i_Expected_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:journal type was $1{wrong_journal_type} but got expected journal types $2{journal types}',
                         i_Journal_Type,
                         Fazo.Gather(i_Expected_Types, ', ')),
          i_Title   => t('036:title:journal type cannot change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037
  (
    i_Staff_Name     varchar2,
    i_Journal_Number varchar2
  ) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:cannot delete hiring for staff $1{staff_name} found journal $2{journal_number} linked to staff',
                         i_Staff_Name,
                         i_Journal_Number),
          i_Title   => t('037:title:staff linked other journals'),
          i_S1      => t('037:solution:remove staff from journal $1{journal_number} and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:cannot delete journal. journal $1{journal_number} already posted',
                         i_Journal_Number),
          i_S1      => t('038:solution:unpost journal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039(i_Contract_Id number) is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:contract $1{contract_id} has no items, when access to add item is No contract must have at least one item',
                         i_Contract_Id),
          i_Title   => t('039:title:no contract items'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040(i_Contract_Id number) is
  begin
    Error(i_Code    => '040',
          i_Message => t('040:message:cannot change/save cv contract. cv contract $1{contract_id} already posted',
                         i_Contract_Id),
          i_S1      => t('040:solution:post contract with changes'),
          i_S2      => t('040:solution:unpost contract then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041(i_Contract_Id number) is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:cannot delete cv contract. cv contract $1{contract_id} must be unposted',
                         i_Contract_Id),
          i_S1      => t('041:solution:unpost contract and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042
  (
    i_Overtime_Id number,
    i_Journal_Id  number
  ) is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:cannot save overtime. overtimes journal cannot be changed, trying to change overtime $1{overtime_id} in journal $2{journal_id}',
                         i_Overtime_Id,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043 is
  begin
    Error(i_Code => '043', i_Message => t('043:message:journal type not registered'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044
  (
    i_Staff_Name      varchar2,
    i_Oper_Group_Name varchar2
  ) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:staff $1{staff_name} has several oper types attached for $2{oper_group_name}',
                         i_Staff_Name,
                         i_Oper_Group_Name),
          i_S1      => t('044:solution:remove all but one oper types and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045 is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:singular type journal cannot contain more than 1 page'),
          i_S1      => t('045:solution:change journal type to multiple'),
          i_S2      => t('045:solution:send each page in separate journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046(i_Journal_Type_Name varchar2) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:cannot change existing journal type'),
          i_S1      => t('046:solution:restore old journal type $1{journal_type_name}',
                         i_Journal_Type_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047 is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:cannot change page in singular journal type'),
          i_S1      => t('047:solution:change journal type to multiple'),
          i_S2      => t('047:solution:send each employee in separate journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048 is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:too many pages. given journal has several journals, route ($1{request_route_uri}) allows only one page per journal',
                         b_Session.Request_Route_Uri));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '049',
          i_Message => t('049:message:schedule for $1{staff_name} is not selected in schedule change journal',
                         i_Staff_Name),
          i_S1      => t('049:solution:select schedule for $1{staff_name}', i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_050
  (
    i_Date  date,
    i_Month date
  ) is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:given overtime date $1 doesnt belong to the given month $2',
                         i_Date,
                         i_Month));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051 is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:too many overtime journals assigned to one journal'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:chosen time kind $1{time_kind_name} is not a vacation time kind',
                         i_Time_Kind_Name),
          i_Title   => t('052:title:wrong time kind'),
          i_S1      => t('052:solution:choose vacation time kind or one of its descendants'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date,
    i_Journal_Number  varchar2,
    i_Journal_Date    date
  ) is
  begin
    Error(i_Code    => '053',
          i_Message => t('053:message:timebook adjustment for $1{staff_name} on $2{adjustment_date} has already been calced in $3{journal_number} from $4{journal_date}',
                         i_Staff_Name,
                         i_Adjustment_Date,
                         i_Journal_Number,
                         i_Journal_Date),
          i_Title   => t('053:title:timebook adjustment has already been calced'),
          i_S1      => t('053:solution:remove adjustment  for $1{staff_name} on $2{adjustment_date} from journal and try again',
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_S2      => t('053:solution:unpost journal $1{journal_number} from $2{journal_date} and try again',
                         i_Journal_Number,
                         i_Journal_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  ) is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:timesheet for $1{staff_name} on $2{adjustment_date} is not found',
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_Title   => t('054:title:timesheet is not found'),
          i_S1      => t('054:solution:set daily schedule for $1{staff_name} on $2{adjustment_date} and try again',
                         i_Staff_Name,
                         i_Adjustment_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:application $1{application_number} cannot be deleted in status $2{status_name}',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_S1      => t('055:solution:change status to new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:application $1{application_number} cannot be edited in status $2{status_name}',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_S1      => t('056:solution:change status to new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057 is
  begin
    Error(i_Code => '057', i_Message => t('057:message:application type not registered'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:status new{status_name} can only be assigned from status waiting{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('058:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:status waiting{status_name} can only be assigned from statuses (new, approved, canceled){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('059:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:status approved{status_name} can only be assigned from statuses (waiting, in progress){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('060:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:status in progress{status_name} can only be assigned from statuses (approved, complete){status_names}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('061:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:status complete{status_name} can only be assigned from status in progress{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('062:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '063',
          i_Message => t('063:message:status canceled{status_name} can only be assigned from status waiting{status_name}, application_number=$1, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)),
          i_Title   => t('063:title:invalid status transition'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Application_Number varchar2,
    i_Status             varchar2
  ) is
  begin
    Error(i_Code    => '064',
          i_Message => t('064:message:application $1{application_number} result can be binded only when status is in progress{status_name}, status_name=$2',
                         i_Application_Number,
                         Hpd_Util.t_Application_Status(i_Status)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065(i_Application_Number varchar2) is
  begin
    Error(i_Code    => '065',
          i_Message => t('065:message:application $1{application_number} result not found',
                         i_Application_Number),
          i_S1      => t('065:solution:you might need to add a posted journal based on this application'),
          i_S2      => t('065:solution:you might need to add a robot based on this application'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Application_Number        varchar2,
    i_Journal_Number            varchar2,
    i_Journal_Employee_Name     varchar2,
    i_Application_Employee_Name varchar2
  ) is
  begin
    Error(i_Code    => '066',
          i_Message => t('066:message:application $1{application_number} based journal $2{journal_number} employee $3{employee_name} does not match with employee $4{employee_name} in application',
                         i_Application_Number,
                         i_Journal_Number,
                         i_Journal_Employee_Name,
                         i_Application_Employee_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Application_Number varchar2,
    i_Journal_Number     varchar2
  ) is
  begin
    Error(i_Code    => '067',
          i_Message => t('067:message:application $1{application_number} based journal $2{journal_number} already exists',
                         i_Application_Number,
                         i_Journal_Number),
          i_S1      => t('067:solution:you can delete journal $1{journal_number} and try to add new',
                         i_Journal_Number),
          i_S2      => t('067:solution:you can edit existing journal $1{journal_number}',
                         i_Journal_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '068',
          i_Message => t('068:message:cannot change/save journal. the source of the journal $1{journal_number} cannot be changed',
                         i_Journal_Number),
          i_Title   => t('063:title:the source is changed'),
          i_S1      => t('068:solution:do this action in $1{source_name} form and source_id is $2{source_id}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '069',
          i_Message => t('069:message:cannot post journal. the source of the journal $1{journal_number} and the source of this action are not equal',
                         i_Journal_Number),
          i_Title   => t('069:title:the source is changed'),
          i_S1      => t('069:solution:do this action in $1{source_name} form and source_id is $2{source_id}',
                         v_Source_Name,
                         v_Source_Id),
          i_S2      => t('069:solution:remove this jounal from the list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070
  (
    i_Jounal_Id         number,
    i_Journal_Number    varchar2,
    i_Journal_Type_Name varchar2,
    i_Source_Table      varchar2,
    i_Source_Id         number
  ) is
    v_Source_Name varchar2(500 char);
    v_Source_Id   number;
  begin
    Journal_Source_Info(i_Jounal_Id         => i_Jounal_Id,
                        i_Journal_Type_Name => i_Journal_Type_Name,
                        i_Source_Table      => i_Source_Table,
                        i_Source_Id         => i_Source_Id,
                        o_Source_Name       => v_Source_Name,
                        o_Source_Id         => v_Source_Id);
  
    Error(i_Code    => '070',
          i_Message => t('070:message:cannot unpost/delete journal. the source of the journal $1{journal_number} and the source of this action are not equal',
                         i_Journal_Number),
          i_Title   => t('070:title:the source is changed'),
          i_S1      => t('070:solution:do this action in $1{source_name} form and source_id is $2{source_id}',
                         v_Source_Name,
                         v_Source_Id),
          i_S2      => t('070:solution:remove this jounal from the list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Wrong_Application_Type    varchar2,
    i_Expected_Application_Type varchar2
  ) is
  begin
    Error(i_Code    => '071',
          i_Message => t('071:message:when saving application expected $1{expected_application_type_name} application type, but got $2{wrong_application_type_name} application type',
                         i_Wrong_Application_Type,
                         i_Expected_Application_Type),
          i_Title   => t('071:title:application type cannot be changed'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072 is
  begin
    Error(i_Code    => '072',
          i_Message => t('072:message:you must select currency when it is enabled'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073(i_Staff_Id number) is
  begin
    Error(i_Code    => '073',
          i_Message => t('073:message:hiring journal not found, staff_id: $1{staff_id}', i_Staff_Id));
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_074
  (
    i_Journal_Id     number,
    i_Journal_Number varchar2,
    i_Staff_Name     varchar2
  ) is
  begin
    Error(i_Code    => '074',
          i_Title   => t('074:title:continuous transaction'),
          i_Message => t('074:message:staff $1{staff_name} must have at least one continuous transaction',
                         i_Staff_Name),
          i_S1      => t('074:solution:in journal $1{journal_number} (ID: $2{journal_id}) remove end date',
                         i_Journal_Number,
                         i_Journal_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Interval_Kind varchar2,
    i_Staff_Name    varchar2,
    i_Timeoff_Date  date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  begin
    Error(i_Code    => '075',
          i_Message => t('075:message:$1{interval_kind} blocks timesheet adjustments for staff $2{staff_name} on $3{timeoff_date}',
                         v_t_Interval_Kind,
                         i_Staff_Name,
                         i_Timeoff_Date),
          i_Title   => t('075:title:timeoff found'),
          i_S1      => t('075:solution:unpost $1{interval_kind} on $2{timeoff_date}',
                         v_t_Interval_Kind,
                         i_Timeoff_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Interval_Kind   varchar2,
    i_Staff_Name      varchar2,
    i_Adjustment_Date date
  ) is
    v_t_Interval_Kind varchar2(50) := t_Interval_Kind(i_Interval_Kind);
  begin
    Error(i_Code    => '076',
          i_Message => t('076:message:timesheet adjustment blocks $1{interval_kind} for staff $2{staff_name} on $3{adjustment_date}',
                         v_t_Interval_Kind,
                         i_Staff_Name,
                         i_Adjustment_Date),
          i_Title   => t('076:title:timesheet adjustment found'),
          i_S1      => t('076:solution:unpost timesheet adjustment on $1{adjustment_date}',
                         i_Adjustment_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077 is
  begin
    Error(i_Code => '077', i_Message => t('077:message:you must select at least one region'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078(i_Employee_Name varchar2) is
  begin
    Error(i_Code    => '078',
          i_Message => t('078:message:fte of $1{employee_name} has exceeded the fte limit',
                         i_Employee_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079(i_Application_Number varchar2) is
  begin
    Error(i_Code    => '079',
          i_Message => t('079:message:application $1{application_number} must have at least one transferred staff',
                         i_Application_Number),
          i_Title   => t('079:title:no transfers found'),
          i_S1      => t('079:solution:try to add at least one staff transfer into application $1{application_number} and try again',
                         i_Application_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080(i_Application_Type_Name varchar2) is
  begin
    Error(i_Code    => '080',
          i_Message => t('080:message:application must have at least one staff transfer, application_type=$1',
                         i_Application_Type_Name),
          i_Title   => t('080:title:no transfers found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081 is
  begin
    Error(i_Code => '081', i_Message => t('081:message:contractor journal must have an end date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '082',
          i_Message => t('082:message:cannot change employment type to contractor'),
          i_S1      => t('082:solution:remove staff $1 from journal', i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '083',
          i_Message => t('083:message:cannot have contractor employees in transfer journal'),
          i_S1      => t('083:solution:remove staff $1 from journal', i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_084
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  ) is
  begin
    Error(i_Code    => '084',
          i_Message => t('084:message:for post this journal, sign document status must be approved, sign document status: $1{document_status}, journal number: $2{journal_number}',
                         i_Document_Status,
                         i_Journal_Number),
          i_Title   => t('084:title:cannot post this journal'),
          i_S1      => t('084:solution:change sign document status to approved and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  ) is
  begin
    Error(i_Code    => '085',
          i_Message => t('085:message:for delete this journal, sign document status must be draft, sign document status: $1{document_status}, journal number: $2{journal_number}',
                         i_Document_Status,
                         i_Journal_Number),
          i_Title   => t('085:title:cannot delete this journal'),
          i_S1      => t('085:solution:change sign document status to draft and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_086
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  ) is
  begin
    Error(i_Code    => '086',
          i_Message => t('086:message:for edit this journal, sign document status must be draft, sign document status: $1{document_status}, journal number: $2{journal_number}',
                         i_Document_Status,
                         i_Journal_Number),
          i_Title   => t('086:title:cannot edit this journal'),
          i_S1      => t('086:solution:change sign document status to draft and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_087
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  ) is
  begin
    Error(i_Code    => '087',
          i_Message => t('087:message:for unpost this journal, sign document status must be approved, sign document status: $1{document_status}, journal number: $2{journal_number}',
                         i_Document_Status,
                         i_Journal_Number),
          i_Title   => t('087:title:cannot unpost this journal'),
          i_S1      => t('087:solution:change sign document status to approved and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_088(i_Journal_Type_Name varchar2) is
  begin
    Error(i_Code    => '088',
          i_Message => t('088:message:for save sign document you must create sign template for this journal type, journal type name: $1{journal_type_name}',
                         i_Journal_Type_Name),
          i_Title   => t('088:title:cannot save sign document'),
          i_S1      => t('088:solution:create sign template for this journal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_089(i_Journal_Number varchar2) is
  begin
    Error(i_Code    => '089',
          i_Message => t('089:message:for save sign document journal must be unposted, journal number: $1{journal_number}',
                         i_Journal_Number),
          i_Title   => t('089:title:cannot save sign document'),
          i_S1      => t('089:solution:unpost journal and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_090
  (
    i_Document_Status varchar2,
    i_Journal_Number  varchar2
  ) is
  begin
    Error(i_Code    => '090',
          i_Message => t('090:message:for edit journal sign document status must be draft and journal must be unposted, sign document status: $1{status}, journal number: $2{journal_number}',
                         i_Document_Status,
                         i_Journal_Number),
          i_Title   => t('090:title:you cannot edit journal'),
          i_S1      => t('090:solution:unpost journal and change sign document status to draft and try again'));
  end;

end Hpd_Error;
/

create or replace package Hpd_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Hpd_Watcher;
/
create or replace package body Hpd_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head     number := Md_Pref.c_Company_Head;
    v_Pcode_Like       varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query            varchar2(4000);
    r_Journal_Type     Hpd_Journal_Types%rowtype;
    r_Application_Type Hpd_Application_Types%rowtype;
    v_Lang_Code        varchar2(5) := z_Md_Companies.Load(i_Company_Id).Lang_Code;
  begin
    -- add default journal types
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hpd_Journal_Types,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hpd_Journal_Types t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Order_No)
    loop
      r_Journal_Type                 := r;
      r_Journal_Type.Company_Id      := i_Company_Id;
      r_Journal_Type.Journal_Type_Id := Hpd_Next.Journal_Type_Id;
    
      execute immediate v_Query
        using in r_Journal_Type, out r_Journal_Type;
    
      z_Hpd_Journal_Types.Save_Row(r_Journal_Type);
    end loop;
  
    -- add default application types
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hpd_Application_Types,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hpd_Application_Types t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Order_No)
    loop
      r_Application_Type                     := r;
      r_Application_Type.Company_Id          := i_Company_Id;
      r_Application_Type.Application_Type_Id := Hpd_Next.Application_Type_Id;
    
      execute immediate v_Query
        using in r_Application_Type, out r_Application_Type;
    
      z_Hpd_Application_Types.Save_Row(r_Application_Type);
    end loop;
  end;

end Hpd_Watcher;
/

create or replace package Hper_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Plan_Type_Id   number,
    i_Plan_Type_Name varchar2,
    i_Calc_Kind      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Plan_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Plan_Type_Name varchar2,
    i_First_Rule     varchar2,
    i_Second_Rule    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Main_Plan_Count number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Plan_Id              number,
    i_Current_Total_Weight number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Plan_Id              number,
    i_Current_Total_Weight number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Plan_Id number,
    i_Plan_Type_Id  number,
    i_Amount        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Month_End number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Plan_Type varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Plan_Date     date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Plan_Date     date
  );
end Hper_Error;
/
create or replace package body Hper_Error is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPER:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hper_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Plan_Type_Id   number,
    i_Plan_Type_Name varchar2,
    i_Calc_Kind      varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message: calc kind of $1{plan_type_name} is not task, plan_type_id=$2, calc_kind=$3',
                         i_Plan_Type_Name,
                         i_Plan_Type_Id,
                         Hper_Util.t_Calc_Kind(i_Calc_Kind)),
          i_Title   => t('001:title: calc kind of plan type is wrong'),
          i_S1      => t('001:solution: change calc kind of $1{plan_type_name} to task',
                         i_Plan_Type_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002(i_Plan_Id number) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message: job, division and employment type are required for standard plan, plan_id=$1',
                         i_Plan_Id),
          i_S1      => t('002:solution: select job, division and employement type'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Plan_Type_Name varchar2,
    i_First_Rule     varchar2,
    i_Second_Rule    varchar2
  ) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message: plan type $1{plan_type_name} has intersection on rule $2{first_rule} and rule $3{second_rule}',
                         i_Plan_Type_Name,
                         i_First_Rule,
                         i_Second_Rule),
          i_Title   => t('003:title: rules intersected'),
          i_S1      => t('003:solution: change $1{first_rule} rule or $2{second_rule} rule',
                         i_First_Rule,
                         i_Second_Rule));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Main_Plan_Count number) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message: there must be at least one main plan, main_plan_count=$1',
                         i_Main_Plan_Count),
          i_S1      => t('004:solution: add at least one main plan'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Plan_Id              number,
    i_Current_Total_Weight number
  ) is
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Excess_Weight number := i_Current_Total_Weight - 100;
    begin
      if v_Excess_Weight > 0 then
        return t('005:solution:reduce weight by $1{excess_weight}', Abs(v_Excess_Weight));
      end if;
    
      return t('005:solution:increase weight by $1{excess_weight}', Abs(v_Excess_Weight));
    end;
  
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message: total weight of main plans must be 100, current total weight is $1, plan_id=$2',
                         i_Current_Total_Weight,
                         i_Plan_Id),
          i_Title   => t('005:title: total weight must be 100'),
          i_S1      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Plan_Id              number,
    i_Current_Total_Weight number
  ) is
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Excess_Weight number := i_Current_Total_Weight - 100;
    begin
      if v_Excess_Weight > 0 then
        return t('006:solution:reduce weight by $1{excess_weight}', Abs(v_Excess_Weight));
      end if;
    
      return t('006:solution:increase weight by $1{excess_weight}', Abs(v_Excess_Weight));
    end;
  
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message: total weight of extra plans must be 100, current total weight is $1, plan_id=$2',
                         i_Current_Total_Weight,
                         i_Plan_Id),
          i_Title   => t('006:title: total weight must be 100'),
          i_S1      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message: staff plan must be draft or new, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_Title   => t('007:title: staff plan cannot be updated'),
          i_S1      => t('007:solution: change the status of staff plan to draft or new'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message: staff plan must be draft or new, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_Title   => t('008:title: staff plan part cannot be saved'),
          i_S1      => t('008:solution: change the status of staff plan to draft or new'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message: staff plan must be draft or new, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_Title   => t('009:title: staff plan part cannot be deleted'),
          i_S1      => t('009:solution: change the status of staff plan to draft or new'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message: staff plan must be draft or new, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_Title   => t('010:title: staff plan tasks cannot be updated'),
          i_S1      => t('010:solution: change the status of staff plan to draft or new'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message: staff plan can be draft when status is new, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_S1      => t('011:solution: change the status of staff plan to new'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message: staff plan can be new when status is draft or waiting, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_S1      => t('012:solution: change the status of staff plan to draft or waiting'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message: staff plan can be waiting when status is draft, new or completed, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_S1      => t('013:solution: change the status of staff plan to draft, new or completed'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message: staff plan can be completed when status is waiting, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_S1      => t('014:solution: change the status of staff plan to waiting'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Status        varchar2,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message: staff plan can be deleted when status is draft, staff_name=$1, staff_plan_id=$2, status=$3, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         Hper_Util.t_Staff_Plan_Status(i_Status),
                         i_Plan_Date),
          i_S1      => t('015:solution: change the status of staff plan to draft'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Plan_Id number,
    i_Plan_Type_Id  number,
    i_Amount        number
  ) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message: part amount must be equal to zero, staff_plan_id=$1, plan_type_id=$2, remined_amount=$3',
                         i_Staff_Plan_Id,
                         i_Plan_Type_Id,
                         i_Amount),
          i_S1      => t('016:solution: retry or contact to developers'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017(i_Month_End number) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message: month end must be in [1: 28], month_end:$1', i_Month_End),
          i_Title   => t('017:title: month end is wrong'),
          i_S1      => t('017:solution: change month end in the setting to a number in range [1: 28]'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018(i_Plan_Type varchar2) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message: item plan type must be main or extra, plan_type=$1',
                         i_Plan_Type),
          i_Title   => t('018:title: item plan type is wrong'),
          i_S1      => t('018:solution: change item plan type to main or extra'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message: staff plan cannot be added manually to external plan type, staff_name=$1, staff_plan_id=$2, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         i_Plan_Date),
          i_Title   => t('019:title: staff plan part cannot be saved'),
          i_S1      => t('019:solution: do not save part for this plan type'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Staff_Name    varchar2,
    i_Staff_Plan_Id number,
    i_Plan_Date     date
  ) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message: staff plan cannot be deleted manually from external plan type, staff_name=$1, staff_plan_id=$2, plan_date=$4',
                         i_Staff_Name,
                         i_Staff_Plan_Id,
                         i_Plan_Date),
          i_Title   => t('020:title: staff plan part cannot be deleted'));
  end;

end Hper_Error;
/

create or replace package Hper_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Hper_Watcher;
/
create or replace package body Hper_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head number := Md_Pref.Company_Head;
    v_Pc_Like      varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query        varchar2(4000);
    r_Task_Group   Ms_Task_Groups%rowtype;
  begin
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Ms_Task_Groups,
                                                i_Lang_Code => z_Md_Companies.Load(i_Company_Id).Lang_Code);
  
    for r in (select *
                from Ms_Task_Groups t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pc_Like)
    loop
      r_Task_Group               := r;
      r_Task_Group.Company_Id    := i_Company_Id;
      r_Task_Group.Task_Group_Id := Ms_Next.Task_Group_Id;
    
      execute immediate v_Query
        using in r_Task_Group, out r_Task_Group;
    
      z_Ms_Task_Groups.Insert_Row(r_Task_Group);
    end loop;
  end;
  
end Hper_Watcher;
/

create or replace package Hpr_Core is
  ----------------------------------------------------------------------------------------------------  
  Procedure Generate_Fact_Of_Cv_Contract
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number,
    i_Month       date
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Facts_Delete
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Begin_Date        date,
    i_Early_Closed_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Lock_Timesheets
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unlock_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timebook_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Staff_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Staffs_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt);
  ----------------------------------------------------------------------------------------------------
  Function Sheet_Staff_Used
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    o_Sheet_Id     out number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Staff_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Staffs_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Staff_Insert
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Sheet_Id       number,
    i_Staff_Id       number,
    i_Period_Begin   date,
    i_Period_End     date,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  -- this function must be used only from hpd_core
  Procedure Charge_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Charge_Id    number := null,
    i_Interval_Id  number,
    i_Doc_Oper_Id  number := null,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Currency_Id  number := null,
    i_Amount       number := null,
    i_Status       varchar := Hpr_Pref.c_Charge_Status_New
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Draft
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Charge_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Charge_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  );
end Hpr_Core;
/
create or replace package body Hpr_Core is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Generate_Fact_Of_Cv_Contract
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Contract_Id number,
    i_Month       date
  ) is
    r_Fact Hpr_Cv_Contract_Facts%rowtype;
  begin
    r_Fact.Company_Id  := i_Company_Id;
    r_Fact.Filial_Id   := i_Filial_Id;
    r_Fact.Fact_Id     := Hpr_Next.Cv_Contract_Fact_Id;
    r_Fact.Contract_Id := i_Contract_Id;
    r_Fact.Month       := i_Month;
    r_Fact.Status      := Hpr_Pref.c_Cv_Contract_Fact_Status_New;
  
    z_Hpr_Cv_Contract_Facts.Save_Row(r_Fact);
  
    for r in (select *
                from Hpd_Cv_Contract_Items q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Contract_Id = i_Contract_Id)
    loop
      z_Hpr_Cv_Contract_Fact_Items.Save_One(i_Company_Id       => r.Company_Id,
                                            i_Filial_Id        => r.Filial_Id,
                                            i_Fact_Item_Id     => Hpr_Next.Cv_Contract_Fact_Item_Id,
                                            i_Fact_Id          => r_Fact.Fact_Id,
                                            i_Contract_Item_Id => r.Contract_Item_Id,
                                            i_Plan_Quantity    => r.Quantity,
                                            i_Plan_Amount      => r.Amount,
                                            i_Fact_Quantity    => 0,
                                            i_Fact_Amount      => 0,
                                            i_Name             => r.Name);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Save(i_Contract_Fact Hpr_Pref.Cv_Contract_Fact_Rt) is
    r_Fact               Hpr_Cv_Contract_Facts%rowtype;
    r_Item               Hpr_Cv_Contract_Fact_Items%rowtype;
    v_Item               Hpr_Pref.Cv_Contract_Fact_Item_Rt;
    v_Access_To_Add_Item boolean;
    v_Fact_Item_Ids      Array_Number := Array_Number();
  begin
    r_Fact := z_Hpr_Cv_Contract_Facts.Lock_Load(i_Company_Id => i_Contract_Fact.Company_Id,
                                                i_Filial_Id  => i_Contract_Fact.Filial_Id,
                                                i_Fact_Id    => i_Contract_Fact.Fact_Id);
  
    if r_Fact.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New then
      Hpr_Error.Raise_001(i_Fact_Id     => r_Fact.Fact_Id,
                          i_Status_Name => Hpr_Util.t_Cv_Fact_Status(r_Fact.Status));
    end if;
  
    v_Access_To_Add_Item := z_Hpd_Cv_Contracts.Load(i_Company_Id => r_Fact.Company_Id, --
                            i_Filial_Id => r_Fact.Filial_Id, --
                            i_Contract_Id => r_Fact.Contract_Id).Access_To_Add_Item = 'Y';
  
    v_Fact_Item_Ids.Extend(i_Contract_Fact.Items.Count);
  
    for i in 1 .. i_Contract_Fact.Items.Count
    loop
      v_Item := i_Contract_Fact.Items(i);
    
      if z_Hpr_Cv_Contract_Fact_Items.Exist_Lock(i_Company_Id   => r_Fact.Company_Id,
                                                 i_Filial_Id    => r_Fact.Filial_Id,
                                                 i_Fact_Item_Id => v_Item.Fact_Item_Id,
                                                 o_Row          => r_Item) then
        if r_Item.Fact_Id != r_Fact.Fact_Id then
          Hpr_Error.Raise_002(i_Fact_Id      => r_Fact.Fact_Id,
                              i_Item_Fact_Id => r_Item.Fact_Id,
                              i_Item_Id      => r_Item.Fact_Item_Id);
        end if;
      
        r_Item.Fact_Amount := v_Item.Fact_Amount;
      
        if r_Item.Contract_Item_Id is not null then
          r_Item.Fact_Quantity := v_Item.Fact_Amount * r_Item.Plan_Quantity / r_Item.Plan_Amount;
        else
          if v_Access_To_Add_Item then
            r_Item.Name          := v_Item.Name;
            r_Item.Fact_Quantity := 1;
          else
            Hpr_Error.Raise_003(r_Fact.Contract_Id);
          end if;
        end if;
      
        z_Hpr_Cv_Contract_Fact_Items.Save_Row(r_Item);
      else
        if not v_Access_To_Add_Item then
          Hpr_Error.Raise_004(r_Fact.Contract_Id);
        end if;
      
        z_Hpr_Cv_Contract_Fact_Items.Insert_One(i_Company_Id    => r_Fact.Company_Id,
                                                i_Filial_Id     => r_Fact.Filial_Id,
                                                i_Fact_Item_Id  => v_Item.Fact_Item_Id,
                                                i_Fact_Id       => r_Fact.Fact_Id,
                                                i_Fact_Quantity => 1,
                                                i_Fact_Amount   => v_Item.Fact_Amount,
                                                i_Name          => v_Item.Name);
      end if;
    
      v_Fact_Item_Ids(i) := v_Item.Fact_Item_Id;
    end loop;
  
    delete Hpr_Cv_Contract_Fact_Items q
     where q.Company_Id = r_Fact.Company_Id
       and q.Filial_Id = r_Fact.Filial_Id
       and q.Fact_Id = r_Fact.Fact_Id
       and q.Fact_Item_Id not member of v_Fact_Item_Ids;
  
    select sum(q.Fact_Amount)
      into r_Fact.Total_Amount
      from Hpr_Cv_Contract_Fact_Items q
     where q.Company_Id = r_Fact.Company_Id
       and q.Filial_Id = r_Fact.Filial_Id
       and q.Fact_Id = r_Fact.Fact_Id;
  
    z_Hpr_Cv_Contract_Facts.Save_Row(r_Fact);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Cv_Contract_Facts_Delete
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Contract_Id       number,
    i_Begin_Date        date,
    i_Early_Closed_Date date
  ) is
    v_Fact_Id number;
    v_Month   date;
    v_Status  varchar2(1);
  begin
    select q.Fact_Id, q.Month, q.Status
      into v_Fact_Id, v_Month, v_Status
      from Hpr_Cv_Contract_Facts q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Contract_Id = i_Contract_Id
       and q.Month not between i_Begin_Date and i_Early_Closed_Date
       and q.Status != Hpr_Pref.c_Cv_Contract_Fact_Status_New
       and Rownum = 1;
  
    Hpr_Error.Raise_005(i_Fact_Id     => v_Fact_Id,
                        i_Month       => v_Month,
                        i_Status_Name => Hpr_Util.t_Cv_Fact_Status(v_Status));
  exception
    when No_Data_Found then
      delete from Hpr_Cv_Contract_Facts q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Contract_Id = i_Contract_Id
         and q.Month not between i_Begin_Date and i_Early_Closed_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Save(i_Penalty Hpr_Pref.Penalty_Rt) is
    r_Penalty       Hpr_Penalties%rowtype;
    v_Policy        Hpr_Pref.Penalty_Policy_Rt;
    v_Policy_2      Hpr_Pref.Penalty_Policy_Rt;
    v_Penalty_Codes Array_Varchar2;
    v_Key           varchar2(100);
    v_Index         number;
    v_Cache         Fazo.Number_Code_Aat;
    v_Ids           Array_Number;
    v_Matrix        Matrix_Number := Matrix_Number();
    v_Max_Value     number := 1000000000;
    v_Exists        boolean := false;
  
    -------------------------------------------------
    Function Penalty_Number(i_Penalty_Kind varchar2) return number is
    begin
      return --
      case i_Penalty_Kind --
      when Hpr_Pref.c_Penalty_Kind_Late then 1 --
      when Hpr_Pref.c_Penalty_Kind_Early then 2 --
      when Hpr_Pref.c_Penalty_Kind_Lack then 3 --
      when Hpr_Pref.c_Penalty_Kind_Day_Skip then 4 --
      when Hpr_Pref.c_Penalty_Kind_Mark_Skip then 5 --
      end;
    end;
  
    -------------------------------------------------  
    Function Penalty_Kind(i_Penalty_Number varchar2) return varchar2 is
    begin
      return --
      case i_Penalty_Number --
      when 1 then Hpr_Pref.c_Penalty_Kind_Late --
      when 2 then Hpr_Pref.c_Penalty_Kind_Early --
      when 3 then Hpr_Pref.c_Penalty_Kind_Lack --
      when 4 then Hpr_Pref.c_Penalty_Kind_Day_Skip --
      when 5 then Hpr_Pref.c_Penalty_Kind_Mark_Skip --
      end;
    end;
  
    -------------------------------------------------- 
    Procedure Fix_Policy(p_Policy in out nocopy Hpr_Pref.Penalty_Policy_Rt) is
    begin
      case p_Policy.Penalty_Type
        when Hpr_Pref.c_Penalty_Type_Coef then
          p_Policy.Penalty_Per_Time := null;
          p_Policy.Penalty_Amount   := null;
          p_Policy.Penalty_Time     := null;
        when Hpr_Pref.c_Penalty_Type_Amount then
          p_Policy.Penalty_Coef := null;
          p_Policy.Penalty_Time := null;
        when Hpr_Pref.c_Penalty_Type_Time then
          p_Policy.Penalty_Coef     := null;
          p_Policy.Penalty_Per_Time := null;
          p_Policy.Penalty_Amount   := null;
      end case;
    end;
  
    --------------------------------------------------
    Function Penalty_Unit_Min_Or_Times(i_Penalty_Kind varchar2) return varchar2 is
    begin
      if i_Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
        return Hpr_Util.t_Penalty_Rule_Unit_Times;
      else
        return Hpr_Util.t_Penalty_Rule_Unit_Min;
      end if;
    end;
  begin
    -- check
    for i in 1 .. i_Penalty.Policies.Count
    loop
      v_Policy           := i_Penalty.Policies(i);
      v_Policy.From_Time := Nvl(v_Policy.From_Time, 0);
      v_Policy.To_Time   := Nvl(v_Policy.To_Time, v_Max_Value);
    
      v_Key := v_Policy.Penalty_Kind || ':' || v_Policy.From_Time || ':' || v_Policy.To_Time;
    
      begin
        v_Index := v_Cache(v_Key);
      exception
        when No_Data_Found then
          Fazo.Push(v_Matrix,
                    Array_Number(Penalty_Number(v_Policy.Penalty_Kind),
                                 v_Policy.From_Time,
                                 v_Policy.To_Time));
        
          v_Index := v_Matrix.Count;
          v_Cache(v_Key) := v_Index;
      end;
    
      Fazo.Push(v_Matrix(v_Index), i);
    end loop;
  
    -- matrix keeps penalty policies
    -- values in one matrix row:
    -- indexes:
    --        1: penalty_kind
    --        2: from_time 
    --        3: to_time
    --       >4: indexes of policies with same (from_time, to_time) 
    --           but different (from_day, to_day)
  
    for i in 1 .. v_Matrix.Count
    loop
      for j in i + 1 .. v_Matrix.Count
      loop
        if v_Matrix(i) (1) = v_Matrix(j) (1) and --
           v_Matrix(i) (3) > v_Matrix(j) (2) and v_Matrix(i) (2) < v_Matrix(j) (3) then
          Hpr_Error.Raise_006(i_Penalty_Kind => Hpr_Util.t_Penalty_Kind(Penalty_Kind(v_Matrix(i) (1))),
                              i_First_Rule   => Href_Util.t_From_To_Rule(i_From      => v_Matrix(i) (2),
                                                                         i_To        => v_Matrix(i) (3),
                                                                         i_Rule_Unit => Penalty_Unit_Min_Or_Times(v_Matrix(i) (1))),
                              i_Second_Rule  => Href_Util.t_From_To_Rule(i_From      => v_Matrix(j) (2),
                                                                         i_To        => v_Matrix(j) (3),
                                                                         i_Rule_Unit => Penalty_Unit_Min_Or_Times(v_Matrix(i) (1))));
        end if;
      end loop;
    end loop;
  
    for k in 1 .. v_Matrix.Count
    loop
      v_Ids := v_Matrix(k);
    
      for i in 4 .. v_Ids.Count
      loop
        v_Policy          := i_Penalty.Policies(v_Ids(i));
        v_Policy.From_Day := Nvl(v_Policy.From_Day, 0);
        v_Policy.To_Day   := Nvl(v_Policy.To_Day, v_Max_Value);
      
        for j in i + 1 .. v_Ids.Count
        loop
          v_Policy_2          := i_Penalty.Policies(v_Ids(j));
          v_Policy_2.From_Day := Nvl(v_Policy_2.From_Day, 0);
          v_Policy_2.To_Day   := Nvl(v_Policy_2.To_Day, v_Max_Value);
        
          if v_Policy.To_Day > v_Policy_2.From_Day and v_Policy.From_Day < v_Policy_2.To_Day then
            Hpr_Error.Raise_007(i_Time_Rule    => Href_Util.t_From_To_Rule(i_From      => v_Policy.From_Time,
                                                                           i_To        => v_Policy.To_Time,
                                                                           i_Rule_Unit => Hpr_Util.t_Penalty_Rule_Unit_Min),
                                i_Penalty_Kind => Hpr_Util.t_Penalty_Kind(v_Policy.Penalty_Kind),
                                i_First_Rule   => Href_Util.t_From_To_Rule(i_From      => v_Policy.From_Day,
                                                                           i_To        => v_Policy.To_Day,
                                                                           i_Rule_Unit => Hpr_Util.t_Penalty_Rule_Unit_Days),
                                i_Second_Rule  => Href_Util.t_From_To_Rule(i_From      => v_Policy_2.From_Day,
                                                                           i_To        => v_Policy_2.To_Day,
                                                                           i_Rule_Unit => Hpr_Util.t_Penalty_Rule_Unit_Days));
          end if;
        end loop;
      end loop;
    end loop;
  
    -- save
    if z_Hpr_Penalties.Exist_Lock(i_Company_Id => i_Penalty.Company_Id,
                                  i_Filial_Id  => i_Penalty.Filial_Id,
                                  i_Penalty_Id => i_Penalty.Penalty_Id,
                                  o_Row        => r_Penalty) then
      if r_Penalty.Month <> i_Penalty.Month then
        Hpr_Error.Raise_008(r_Penalty.Penalty_Id);
      end if;
    
      if not Fazo.Equal(r_Penalty.Division_Id, i_Penalty.Division_Id) then
        Hpr_Error.Raise_009(r_Penalty.Penalty_Id);
      end if;
    
      v_Exists := true;
    else
      r_Penalty.Company_Id  := i_Penalty.Company_Id;
      r_Penalty.Filial_Id   := i_Penalty.Filial_Id;
      r_Penalty.Penalty_Id  := i_Penalty.Penalty_Id;
      r_Penalty.Month       := i_Penalty.Month;
      r_Penalty.Division_Id := i_Penalty.Division_Id;
    end if;
  
    r_Penalty.Name  := i_Penalty.Name;
    r_Penalty.State := i_Penalty.State;
  
    if v_Exists then
      z_Hpr_Penalties.Update_Row(r_Penalty);
    else
      z_Hpr_Penalties.Insert_Row(r_Penalty);
    end if;
  
    v_Penalty_Codes := Array_Varchar2();
    v_Penalty_Codes.Extend(i_Penalty.Policies.Count);
  
    for i in 1 .. i_Penalty.Policies.Count
    loop
      v_Policy := i_Penalty.Policies(i);
    
      Fix_Policy(v_Policy);
    
      z_Hpr_Penalty_Policies.Save_One(i_Company_Id           => i_Penalty.Company_Id,
                                      i_Filial_Id            => i_Penalty.Filial_Id,
                                      i_Penalty_Id           => i_Penalty.Penalty_Id,
                                      i_Penalty_Kind         => v_Policy.Penalty_Kind,
                                      i_From_Day             => v_Policy.From_Day,
                                      i_From_Time            => v_Policy.From_Time,
                                      i_To_Day               => v_Policy.To_Day,
                                      i_To_Time              => v_Policy.To_Time,
                                      i_Penalty_Coef         => v_Policy.Penalty_Coef,
                                      i_Penalty_Per_Time     => v_Policy.Penalty_Per_Time,
                                      i_Penalty_Amount       => v_Policy.Penalty_Amount,
                                      i_Penalty_Time         => v_Policy.Penalty_Time,
                                      i_Calc_After_From_Time => v_Policy.Calc_After_From_Time);
    
      v_Penalty_Codes(i) := v_Policy.Penalty_Kind || ':' || v_Policy.From_Day || ':' ||
                            v_Policy.From_Time;
    end loop;
  
    if v_Exists then
      for r in (select *
                  from Hpr_Penalty_Policies q
                 where q.Company_Id = i_Penalty.Company_Id
                   and q.Filial_Id = i_Penalty.Filial_Id
                   and q.Penalty_Id = i_Penalty.Penalty_Id
                   and q.Penalty_Kind || ':' || q.From_Day || ':' || q.From_Time not member of
                 v_Penalty_Codes)
      loop
        z_Hpr_Penalty_Policies.Delete_One(i_Company_Id   => r.Company_Id,
                                          i_Filial_Id    => r.Filial_Id,
                                          i_Penalty_Id   => r.Penalty_Id,
                                          i_Penalty_Kind => r.Penalty_Kind,
                                          i_From_Day     => r.From_Day,
                                          i_From_Time    => r.From_Time);
      end loop;
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Lock_Timesheets
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
  begin
    for r in (select *
                from Htt_Timesheets t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and exists (select *
                        from Hpr_Timebook_Staffs Ts
                       where Ts.Company_Id = i_Company_Id
                         and Ts.Filial_Id = i_Filial_Id
                         and Ts.Timebook_Id = i_Timebook_Id
                         and Ts.Staff_Id = t.Staff_Id)
                 and t.Timesheet_Date >= i_Period_Begin
                 and t.Timesheet_Date <= i_Period_End)
    loop
      Htt_Core.Timesheet_Lock(i_Company_Id     => r.Company_Id,
                              i_Filial_Id      => r.Filial_Id,
                              i_Staff_Id       => r.Staff_Id,
                              i_Timesheet_Date => r.Timesheet_Date);
    
      z_Hpr_Timesheet_Locks.Insert_One(i_Company_Id     => r.Company_Id,
                                       i_Filial_Id      => r.Filial_Id,
                                       i_Staff_Id       => r.Staff_Id,
                                       i_Timesheet_Date => r.Timesheet_Date,
                                       i_Timebook_Id    => i_Timebook_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unlock_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number
  ) is
  begin
    for r in (select *
                from Hpr_Timesheet_Locks Tl
               where Tl.Company_Id = i_Company_Id
                 and Tl.Filial_Id = i_Filial_Id
                 and Tl.Timebook_Id = i_Timebook_Id)
    loop
      z_Hpr_Timesheet_Locks.Delete_One(i_Company_Id     => r.Company_Id,
                                       i_Filial_Id      => r.Filial_Id,
                                       i_Staff_Id       => r.Staff_Id,
                                       i_Timesheet_Date => r.Timesheet_Date);
    
      Htt_Core.Timesheet_Unlock(i_Company_Id     => r.Company_Id,
                                i_Filial_Id      => r.Filial_Id,
                                i_Staff_Id       => r.Staff_Id,
                                i_Timesheet_Date => r.Timesheet_Date);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timebook_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Facts      Htt_Pref.Timesheet_Aggregated_Fact_Nt;
    v_Fact_Hours number;
  begin
    v_Facts := Htt_Util.Get_Full_Facts(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Begin_Date => i_Begin_Date,
                                       i_End_Date   => i_End_Date);
  
    -- save facts  
    for i in 1 .. v_Facts.Count
    loop
      v_Fact_Hours := Round(v_Facts(i).Fact_Value / 3600, 2);
    
      if v_Fact_Hours > 0 then
        z_Hpr_Timebook_Facts.Insert_One(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Timebook_Id  => i_Timebook_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Time_Kind_Id => v_Facts(i).Time_Kind_Id,
                                        i_Fact_Hours   => v_Fact_Hours);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- this function must be used only from hpd_core
  ---------------------------------------------------------------------------------------------------- 
  Procedure Regen_Timebook_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Timebook_Id number,
    i_Staff_Id    number
  ) is
    r_Timebook Hpr_Timebooks%rowtype;
  begin
    r_Timebook := z_Hpr_Timebooks.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Timebook_Id => i_Timebook_Id);
  
    delete Hpr_Timebook_Facts Tf
     where Tf.Company_Id = i_Company_Id
       and Tf.Filial_Id = i_Filial_Id
       and Tf.Timebook_Id = i_Timebook_Id
       and Tf.Staff_Id = i_Staff_Id;
  
    Gen_Timebook_Facts(i_Company_Id  => i_Company_Id,
                       i_Filial_Id   => i_Filial_Id,
                       i_Timebook_Id => i_Timebook_Id,
                       i_Staff_Id    => i_Staff_Id,
                       i_Begin_Date  => r_Timebook.Period_Begin,
                       i_End_Date    => r_Timebook.Period_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Staff_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    r_Robot            Mrf_Robots%rowtype;
    r_Staff            Href_Staffs%rowtype;
    v_Desired_Date     date;
    v_Time_Kind_Id     number;
    v_Plan_Days        number;
    v_Plan_Hours       number;
    v_Fact_Days        number;
    v_Fact_Hours       number;
  
    --------------------------------------------------
    Function Get_Lock_Timebook_Number return number is
      result varchar2(50 char);
    begin
      select (select p.Timebook_Number
                from Hpr_Timebooks p
               where p.Company_Id = w.Company_Id
                 and p.Filial_Id = w.Filial_Id
                 and p.Timebook_Id = w.Timebook_Id)
        into result
        from Hpr_Timesheet_Locks w
       where w.Company_Id = i_Company_Id
         and w.Filial_Id = i_Filial_Id
         and w.Staff_Id = i_Staff_Id
         and w.Timesheet_Date >= i_Period_Begin
         and w.Timesheet_Date <= i_Period_End
         and (i_Timebook_Id is null or w.Timebook_Id <> i_Timebook_Id)
         and Rownum = 1;
    
      return result;
    end;
  begin
    if Hpr_Util.Is_Staff_Blocked(i_Company_Id   => i_Company_Id,
                                 i_Filial_Id    => i_Filial_Id,
                                 i_Staff_Id     => i_Staff_Id,
                                 i_Timebook_Id  => i_Timebook_Id,
                                 i_Period_Begin => i_Period_Begin,
                                 i_Period_End   => i_Period_End) = 'Y' then
      Hpr_Error.Raise_010(i_Timebook_Number => Get_Lock_Timebook_Number,
                          i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Period_Begin    => i_Period_Begin,
                          i_Period_End      => i_Period_End);
    end if;
  
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    Href_Util.Assert_Staff_Licensed(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Period_Begin => i_Period_Begin,
                                    i_Period_End   => i_Period_End);
  
    v_Desired_Date := Least(i_Period_End, Nvl(r_Staff.Dismissal_Date, i_Period_End));
  
    r_Robot := Hpd_Util.Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Period     => v_Desired_Date);
  
    -- TODO: should be fixed  
    /*    if i_Division_Id is not null then
      if i_Division_Id <> r_Closest_Robot.Division_Id then
     Hpr_Error.Raise_033(i_Staff_Name    => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                i_Filial_Id  => i_Filial_Id,
                                                                i_Staff_Id   => i_Staff_Id),
                        i_Division_Name => z_Mhr_Divisions.Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Division_Id => i_Division_Id).Name); 
      end if;
    end if;*/
  
    -- plan_days is number of working days plus nonworking days that replace working days
    -- such nonworking days are determined by having plan time above zero
    -- counted from timesheets table
    -- since there may be several schedules working in same month
    select count(*), Round(sum(t.Plan_Time) / 3600, 2)
      into v_Plan_Days, v_Plan_Hours
      from Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date >= i_Period_Begin
       and t.Timesheet_Date <= i_Period_End
       and t.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking)
       and t.Full_Time > 0;
  
    -- fact days and hours for timebook staffs table
    -- such working days that have turnout time kind 
    -- and its child time kind fact value above zero
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Fact_Hours,
                                  o_Fact_Days    => v_Fact_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Period_Begin,
                                  i_End_Date     => i_Period_End);
  
    v_Fact_Hours := Round(v_Fact_Hours / 3600, 2);
  
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => v_Desired_Date);
  
    z_Hpr_Timebook_Staffs.Insert_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Timebook_Id => i_Timebook_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                     i_Job_Id      => r_Robot.Job_Id,
                                     i_Division_Id => r_Robot.Division_Id,
                                     i_Plan_Days   => Nvl(v_Plan_Days, 0),
                                     i_Plan_Hours  => Nvl(v_Plan_Hours, 0),
                                     i_Fact_Days   => Nvl(v_Fact_Days, 0),
                                     i_Fact_Hours  => Nvl(v_Fact_Hours, 0));
  
    Gen_Timebook_Facts(i_Company_Id  => i_Company_Id,
                       i_Filial_Id   => i_Filial_Id,
                       i_Timebook_Id => i_Timebook_Id,
                       i_Staff_Id    => i_Staff_Id,
                       i_Begin_Date  => i_Period_Begin,
                       i_End_Date    => i_Period_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_Staffs_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timebook_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
    v_Staff_Ids Array_Number;
  begin
    delete Hpr_Timebook_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timebook_Id = i_Timebook_Id
    returning q.Staff_Id bulk collect into v_Staff_Ids;
  
    for i in 1 .. v_Staff_Ids.Count
    loop
      Timebook_Staff_Insert(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Timebook_Id  => i_Timebook_Id,
                            i_Staff_Id     => v_Staff_Ids(i),
                            i_Period_Begin => i_Period_Begin,
                            i_Period_End   => i_Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Timebook_Save(i_Timebook Hpr_Pref.Timebook_Rt) is
    r_Timebook Hpr_Timebooks%rowtype;
    v_Exists   boolean;
  begin
    if z_Hpr_Timebooks.Exist_Lock(i_Company_Id  => i_Timebook.Company_Id,
                                  i_Filial_Id   => i_Timebook.Filial_Id,
                                  i_Timebook_Id => i_Timebook.Timebook_Id,
                                  o_Row         => r_Timebook) then
      if r_Timebook.Posted = 'Y' then
        Hpr_Error.Raise_011(r_Timebook.Timebook_Number);
      end if;
    
      v_Exists := true;
    else
      r_Timebook.Company_Id  := i_Timebook.Company_Id;
      r_Timebook.Filial_Id   := i_Timebook.Filial_Id;
      r_Timebook.Timebook_Id := i_Timebook.Timebook_Id;
      r_Timebook.Posted      := 'N';
    
      v_Exists := false;
    end if;
  
    r_Timebook.Timebook_Number := i_Timebook.Timebook_Number;
    r_Timebook.Timebook_Date   := i_Timebook.Timebook_Date;
    r_Timebook.Division_Id     := i_Timebook.Division_Id;
    r_Timebook.Period_Begin    := i_Timebook.Period_Begin;
    r_Timebook.Period_End      := i_Timebook.Period_End;
    r_Timebook.Period_Kind     := i_Timebook.Period_Kind;
    r_Timebook.Note            := i_Timebook.Note;
  
    if v_Exists then
      z_Hpr_Timebooks.Update_Row(r_Timebook);
    else
      if r_Timebook.Timebook_Number is null then
        r_Timebook.Timebook_Number := Md_Core.Gen_Number(i_Company_Id => i_Timebook.Company_Id,
                                                         i_Filial_Id  => i_Timebook.Filial_Id,
                                                         i_Table      => Zt.Hpr_Timebooks,
                                                         i_Column     => z.Timebook_Id);
      end if;
    
      r_Timebook.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Hpr_Timebooks,
                                                i_Id    => i_Timebook.Timebook_Id);
    
      z_Hpr_Timebooks.Insert_Row(r_Timebook);
    end if;
  
    -- delete staffs
    delete Hpr_Timebook_Staffs q
     where q.Company_Id = r_Timebook.Company_Id
       and q.Filial_Id = r_Timebook.Filial_Id
       and q.Timebook_Id = r_Timebook.Timebook_Id;
  
    -- staff save
    for i in 1 .. i_Timebook.Staff_Ids.Count
    loop
      Timebook_Staff_Insert(i_Company_Id   => i_Timebook.Company_Id,
                            i_Filial_Id    => i_Timebook.Filial_Id,
                            i_Timebook_Id  => i_Timebook.Timebook_Id,
                            i_Staff_Id     => i_Timebook.Staff_Ids(i),
                            i_Period_Begin => i_Timebook.Period_Begin,
                            i_Period_End   => i_Timebook.Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Sheet_Staff_Used
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    o_Sheet_Id     out number
  ) return boolean is
  begin
    select p.Sheet_Id
      into o_Sheet_Id
      from Hpr_Sheet_Parts p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Part_Begin <= i_Period_End
       and p.Part_End >= i_Period_Begin
       and exists (select *
              from Hpr_Wage_Sheets Ws
             where Ws.Company_Id = p.Company_Id
               and Ws.Filial_Id = p.Filial_Id
               and Ws.Sheet_Id = p.Sheet_Id
               and Ws.Posted = 'Y')
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Staff_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) is
    v_Part  Hpr_Pref.Sheet_Part_Rt;
    v_Parts Hpr_Pref.Sheet_Part_Nt;
  
    v_Lock_Sheet_Id number;
  begin
    if Sheet_Staff_Used(i_Company_Id   => i_Company_Id,
                        i_Filial_Id    => i_Filial_Id,
                        i_Staff_Id     => i_Staff_Id,
                        i_Period_Begin => i_Period_Begin,
                        i_Period_End   => i_Period_End,
                        o_Sheet_Id     => v_Lock_Sheet_Id) then
      Hpr_Error.Raise_012(i_Sheet_Number => z_Hpr_Wage_Sheets.Load(i_Company_Id => i_Company_Id, --
                                            i_Filial_Id => i_Filial_Id, --
                                            i_Sheet_Id => v_Lock_Sheet_Id).Sheet_Number,
                          i_Staff_Name   => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                 i_Filial_Id  => i_Filial_Id,
                                                                 i_Staff_Id   => i_Staff_Id),
                          i_Period_Begin => i_Period_Begin,
                          i_Period_End   => i_Period_End);
    end if;
  
    Href_Util.Assert_Staff_Licensed(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Period_Begin => i_Period_Begin,
                                    i_Period_End   => i_Period_End);
  
    v_Parts := Hpr_Util.Calc_Staff_Parts(i_Company_Id   => i_Company_Id,
                                         i_Filial_Id    => i_Filial_Id,
                                         i_Staff_Id     => i_Staff_Id,
                                         i_Period_Begin => i_Period_Begin,
                                         i_Period_End   => i_Period_End,
                                         i_Round_Model  => i_Round_Model);
  
    for i in 1 .. v_Parts.Count
    loop
      v_Part := v_Parts(i);
    
      z_Hpr_Sheet_Parts.Insert_One(i_Company_Id       => i_Company_Id,
                                   i_Filial_Id        => i_Filial_Id,
                                   i_Part_Id          => Hpr_Next.Sheet_Part_Id,
                                   i_Part_Begin       => v_Part.Part_Begin,
                                   i_Part_End         => v_Part.Part_End,
                                   i_Staff_Id         => i_Staff_Id,
                                   i_Sheet_Id         => i_Sheet_Id,
                                   i_Division_Id      => v_Part.Division_Id,
                                   i_Job_Id           => v_Part.Job_Id,
                                   i_Schedule_Id      => v_Part.Schedule_Id,
                                   i_Fte_Id           => v_Part.Fte_Id,
                                   i_Monthly_Amount   => v_Part.Monthly_Amount,
                                   i_Plan_Amount      => v_Part.Plan_Amount,
                                   i_Wage_Amount      => v_Part.Wage_Amount,
                                   i_Overtime_Amount  => v_Part.Overtime_Amount,
                                   i_Nighttime_Amount => v_Part.Nighttime_Amount,
                                   i_Late_Amount      => v_Part.Late_Amount,
                                   i_Early_Amount     => v_Part.Early_Amount,
                                   i_Lack_Amount      => v_Part.Lack_Amount,
                                   i_Day_Skip_Amount  => v_Part.Day_Skip_Amount,
                                   i_Mark_Skip_Amount => v_Part.Mark_Skip_Amount);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Staffs_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) is
    v_Staff_Ids Array_Number;
  begin
    delete Hpr_Sheet_Parts p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Sheet_Id = i_Sheet_Id
    returning p.Staff_Id bulk collect into v_Staff_Ids;
  
    v_Staff_Ids := set(v_Staff_Ids);
  
    for i in 1 .. v_Staff_Ids.Count
    loop
      Sheet_Staff_Insert(i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Sheet_Id     => i_Sheet_Id,
                         i_Staff_Id     => v_Staff_Ids(i),
                         i_Period_Begin => i_Period_Begin,
                         i_Period_End   => i_Period_End,
                         i_Round_Model  => i_Round_Model);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Staff_Insert
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Sheet_Id       number,
    i_Staff_Id       number,
    i_Period_Begin   date,
    i_Period_End     date,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  ) is
    r_Staff        Href_Staffs%rowtype;
    r_Robot        Hpd_Trans_Robots%rowtype;
    r_Schedule     Hpd_Trans_Schedules%rowtype;
    v_Desired_Date date;
  begin
    if i_Accrual_Amount is null and i_Penalty_Amount is null then
      return;
    end if;
  
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    Href_Util.Assert_Staff_Licensed(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Period_Begin => i_Period_Begin,
                                    i_Period_End   => i_Period_End);
  
    v_Desired_Date := Least(i_Period_End, Nvl(r_Staff.Dismissal_Date, i_Period_End));
  
    r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Period     => v_Desired_Date);
  
    r_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Period     => v_Desired_Date);
  
    z_Hpr_Onetime_Sheet_Staffs.Insert_One(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Sheet_Id       => i_Sheet_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Month          => Trunc(i_Period_Begin, 'mon'),
                                          i_Division_Id    => r_Robot.Division_Id,
                                          i_Job_Id         => r_Robot.Job_Id,
                                          i_Schedule_Id    => r_Schedule.Schedule_Id,
                                          i_Accrual_Amount => Nvl(i_Accrual_Amount, 0),
                                          i_Penalty_Amount => Nvl(i_Penalty_Amount, 0));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Update
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
    v_Staff        Hpr_Pref.Sheet_Staff_Rt;
    v_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt;
  begin
    delete Hpr_Onetime_Sheet_Staffs p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Sheet_Id = i_Sheet_Id
    returning p.Staff_Id, p.Accrual_Amount, p.Penalty_Amount bulk collect into v_Sheet_Staffs;
  
    for i in 1 .. v_Sheet_Staffs.Count
    loop
      v_Staff := v_Sheet_Staffs(i);
    
      Onetime_Staff_Insert(i_Company_Id     => i_Company_Id,
                           i_Filial_Id      => i_Filial_Id,
                           i_Sheet_Id       => i_Sheet_Id,
                           i_Staff_Id       => v_Staff.Staff_Id,
                           i_Period_Begin   => i_Period_Begin,
                           i_Period_End     => i_Period_End,
                           i_Accrual_Amount => v_Staff.Accrual_Amount,
                           i_Penalty_Amount => v_Staff.Penalty_Amount);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- this function must be used only from hpd_core
  Procedure Charge_Insert
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Charge_Id    number := null,
    i_Interval_Id  number,
    i_Doc_Oper_Id  number := null,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Currency_Id  number := null,
    i_Amount       number := null,
    i_Status       varchar := Hpr_Pref.c_Charge_Status_New
  ) is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    r_Closest_Rank     Hpd_Trans_Ranks%rowtype;
    r_Closest_Currency Hpd_Trans_Currencies%rowtype;
    r_Robot            Mrf_Robots%rowtype;
  
    v_Indicator_Ids Array_Number;
    v_Charge_Id     number := i_Charge_Id;
    v_Amount        number;
    v_Value         number;
  begin
    r_Robot := Hpd_Util.Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Period     => i_End_Date);
  
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    r_Closest_Rank := Hpd_Util.Closest_Rank(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Period     => i_End_Date);
  
    if i_Currency_Id is null then
      r_Closest_Currency := Hpd_Util.Closest_Currency(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Period     => i_End_Date);
    end if;
  
    if r_Closest_Schedule.Schedule_Id is null and i_Charge_Id is null then
      return;
    end if;
  
    if Htt_Util.Has_Undefined_Schedule(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Staff_Id    => i_Staff_Id,
                                       i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                       i_Period      => i_End_Date) and i_Charge_Id is null then
      return;
    end if;
  
    if v_Charge_Id is null then
      v_Charge_Id := Hpr_Next.Charge_Id;
    end if;
  
    z_Hpr_Charges.Save_One(i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Charge_Id     => v_Charge_Id,
                           i_Staff_Id      => i_Staff_Id,
                           i_Interval_Id   => i_Interval_Id,
                           i_Doc_Oper_Id   => i_Doc_Oper_Id,
                           i_Begin_Date    => i_Begin_Date,
                           i_End_Date      => i_End_Date,
                           i_Oper_Type_Id  => i_Oper_Type_Id,
                           i_Amount        => Nvl(i_Amount, 0),
                           i_Division_Id   => r_Robot.Division_Id,
                           i_Schedule_Id   => r_Closest_Schedule.Schedule_Id,
                           i_Currency_Id   => Nvl(i_Currency_Id, r_Closest_Currency.Currency_Id),
                           i_Job_Id        => r_Robot.Job_Id,
                           i_Rank_Id       => r_Closest_Rank.Rank_Id,
                           i_Robot_Id      => r_Robot.Robot_Id,
                           i_Wage_Scale_Id => Hpd_Util.Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                                                 i_Filial_Id  => i_Filial_Id,
                                                                                 i_Staff_Id   => i_Staff_Id,
                                                                                 i_Period     => i_Begin_Date),
                           i_Status        => i_Status);
  
    if i_Charge_Id = v_Charge_Id then
      return;
    end if;
  
    select q.Indicator_Id
      bulk collect
      into v_Indicator_Ids
      from Hpr_Oper_Type_Indicators q
     where q.Company_Id = i_Company_Id
       and q.Oper_Type_Id = i_Oper_Type_Id;
  
    for i in 1 .. v_Indicator_Ids.Count
    loop
      v_Value := Hpr_Util.Calc_Indicator_Value(i_Company_Id   => i_Company_Id,
                                               i_Filial_Id    => i_Filial_Id,
                                               i_Staff_Id     => i_Staff_Id,
                                               i_Charge_Id    => v_Charge_Id,
                                               i_Begin_Date   => i_Begin_Date,
                                               i_End_Date     => i_End_Date,
                                               i_Indicator_Id => v_Indicator_Ids(i));
    
      z_Hpr_Charge_Indicators.Insert_One(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Charge_Id       => v_Charge_Id,
                                         i_Indicator_Id    => v_Indicator_Ids(i),
                                         i_Indicator_Value => v_Value);
    end loop;
  
    v_Amount := Hpr_Util.Calc_Amount(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Staff_Id   => i_Staff_Id,
                                     i_Charge_Id  => v_Charge_Id);
  
    if v_Amount > 0 then
      z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Charge_Id  => v_Charge_Id,
                               i_Amount     => Option_Number(v_Amount));
    else
      z_Hpr_Charges.Delete_One(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Charge_Id  => v_Charge_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Draft
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Charge_Id   number,
    i_Document_Id number
  ) is
    r_Charge      Hpr_Charges%rowtype;
    r_Document    Hpr_Charge_Documents%rowtype;
    v_Book_Number varchar2(200);
    v_Book_Date   date;
    v_Staff_Id    number;
    v_Staff_Name  varchar2(200);
  
    -------------------------------------------------- 
    Procedure Get_Book_Infos is
    begin
      select q.Book_Number, q.Book_Date
        into v_Book_Number, v_Book_Date
        from Mpr_Books q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and exists (select 1
                from Hpr_Book_Operations w
               where w.Company_Id = i_Company_Id
                 and w.Filial_Id = i_Filial_Id
                 and w.Book_Id = q.Book_Id
                 and w.Charge_Id = i_Charge_Id);
    exception
      when No_Data_Found then
        null;
    end;
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Document_Id);
  
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status <> Hpr_Pref.c_Charge_Status_New then
      Get_Book_Infos;
    
      v_Staff_Id := z_Hpr_Charge_Document_Operations.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Operation_Id => r_Charge.Doc_Oper_Id).Staff_Id;
    
      v_Staff_Name := z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                      i_Person_Id => Href_Util.Get_Employee_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id => i_Filial_Id, --
                      i_Staff_Id => v_Staff_Id)).Name;
    
      Hpr_Error.Raise_049(i_Staff_Name      => v_Staff_Name,
                          i_Status          => Hpr_Pref.c_Charge_Status_New,
                          i_Document_Number => r_Document.Document_Number,
                          i_Document_Date   => r_Document.Document_Date,
                          i_Book_Number     => v_Book_Number,
                          i_Book_Date       => v_Book_Date);
    end if;
  
    z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Charge_Id  => i_Charge_Id,
                             i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_Draft));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Charge_Id   number,
    i_Document_Id number
  ) is
    r_Charge     Hpr_Charges%rowtype;
    r_Document   Hpr_Charge_Documents%rowtype;
    v_Staff_Id   number;
    v_Staff_Name varchar2(200);
  begin
    r_Document := z_Hpr_Charge_Documents.Load(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Document_Id => i_Document_Id);
  
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status <> Hpr_Pref.c_Charge_Status_Draft then
      v_Staff_Id := z_Hpr_Charge_Document_Operations.Take(i_Company_Id => i_Company_Id, --
                    i_Filial_Id => i_Filial_Id, --
                    i_Operation_Id => r_Charge.Doc_Oper_Id).Staff_Id;
    
      v_Staff_Name := z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                      i_Person_Id => Href_Util.Get_Employee_Id(i_Company_Id => i_Company_Id, --
                      i_Filial_Id => i_Filial_Id, --
                      i_Staff_Id => v_Staff_Id)).Name;
    
      Hpr_Error.Raise_049(i_Charge_Id       => i_Charge_Id,
                          i_Staff_Name      => v_Staff_Name,
                          i_Status          => Hpr_Pref.c_Charge_Status_Draft,
                          i_Document_Number => r_Document.Document_Number,
                          i_Document_Date   => r_Document.Document_Date);
    end if;
  
    z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Charge_Id  => i_Charge_Id,
                             i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_New));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Use
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Charge_Id  number
  ) is
    r_Charge Hpr_Charges%rowtype;
  begin
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status = Hpr_Pref.c_Charge_Status_Completed then
      Hpr_Error.Raise_013(i_Charge_Id    => i_Charge_Id,
                          i_Status_Names => Fazo.Gather(Array_Varchar2(Hpr_Util.t_Charge_Status(Hpr_Pref.c_Charge_Status_New),
                                                                       Hpr_Util.t_Charge_Status(Hpr_Pref.c_Charge_Status_Used)),
                                                        ', '));
    end if;
  
    z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Charge_Id  => i_Charge_Id,
                             i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_Used));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Cancel_Used
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Charge_Id  number
  ) is
    r_Charge Hpr_Charges%rowtype;
    v_Dummy  varchar2(1);
  begin
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status <> Hpr_Pref.c_Charge_Status_Used then
      Hpr_Error.Raise_014(i_Charge_Id);
    end if;
  
    begin
      select 'X'
        into v_Dummy
        from Hpr_Book_Operations q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Charge_Id = i_Charge_Id
         and Rownum = 1;
    exception
      when No_Data_Found then
        z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Charge_Id  => i_Charge_Id,
                                 i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_New));
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Charge_Id  number
  ) is
    r_Charge Hpr_Charges%rowtype;
  begin
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status <> Hpr_Pref.c_Charge_Status_Used then
      Hpr_Error.Raise_015(i_Charge_Id);
    end if;
  
    z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Charge_Id  => i_Charge_Id,
                             i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_Completed));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Cancel_Completed
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Charge_Id  number
  ) is
    r_Charge Hpr_Charges%rowtype;
  begin
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    if r_Charge.Status <> Hpr_Pref.c_Charge_Status_Completed then
      Hpr_Error.Raise_016(i_Charge_Id);
    end if;
  
    z_Hpr_Charges.Update_One(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Charge_Id  => i_Charge_Id,
                             i_Status     => Option_Varchar2(Hpr_Pref.c_Charge_Status_Used));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_Save(i_Oper_Type Hpr_Pref.Oper_Type_Rt) is
    r_Oper_Type     Hpr_Oper_Types%rowtype;
    r_Mpr_Oper_Type Mpr_Oper_Types%rowtype;
    v_Indicator_Ids Array_Number;
    v_Indicators    Matrix_Varchar2;
    v_Errors        Array_Varchar2;
    v_Exists        boolean;
  begin
    if z_Hpr_Oper_Types.Exist_Lock(i_Company_Id   => i_Oper_Type.Oper_Type.Company_Id,
                                   i_Oper_Type_Id => i_Oper_Type.Oper_Type.Oper_Type_Id,
                                   o_Row          => r_Oper_Type) then
      r_Mpr_Oper_Type := z_Mpr_Oper_Types.Lock_Load(i_Company_Id   => r_Oper_Type.Company_Id,
                                                    i_Oper_Type_Id => r_Oper_Type.Oper_Type_Id);
    
      if r_Mpr_Oper_Type.Pcode like Verifix_Settings.c_Pc_Verifix_Hr || '%' and
         not Fazo.Equal(r_Oper_Type.Oper_Group_Id, i_Oper_Type.Oper_Group_Id) then
        Hpr_Error.Raise_017(i_Oper_Type_Id   => r_Oper_Type.Oper_Type_Id,
                            i_Oper_Type_Name => i_Oper_Type.Oper_Type.Name);
      end if;
    
      v_Exists := true;
    end if;
  
    Mpr_Api.Oper_Type_Save(i_Oper_Type.Oper_Type);
  
    r_Oper_Type.Company_Id      := i_Oper_Type.Oper_Type.Company_Id;
    r_Oper_Type.Oper_Type_Id    := i_Oper_Type.Oper_Type.Oper_Type_Id;
    r_Oper_Type.Oper_Group_Id   := i_Oper_Type.Oper_Group_Id;
    r_Oper_Type.Estimation_Type := i_Oper_Type.Estimation_Type;
  
    if r_Oper_Type.Estimation_Type = Hpr_Pref.c_Estimation_Type_Formula then
      r_Oper_Type.Estimation_Formula := i_Oper_Type.Estimation_Formula;
    else
      r_Oper_Type.Estimation_Formula := null;
    end if;
  
    if v_Exists then
      z_Hpr_Oper_Types.Update_Row(r_Oper_Type);
    else
      z_Hpr_Oper_Types.Save_Row(r_Oper_Type);
    end if;
  
    if r_Oper_Type.Estimation_Type = Hpr_Pref.c_Estimation_Type_Formula then
      v_Indicators := Hpr_Util.Formula_Indicators(i_Company_Id => i_Oper_Type.Oper_Type.Company_Id,
                                                  i_Formula    => i_Oper_Type.Estimation_Formula);
    
      v_Indicator_Ids := Array_Number();
      v_Indicator_Ids.Extend(v_Indicators.Count);
    
      for i in 1 .. v_Indicators.Count
      loop
        v_Indicator_Ids(i) := v_Indicators(i) (1);
      
        z_Hpr_Oper_Type_Indicators.Save_One(i_Company_Id   => i_Oper_Type.Oper_Type.Company_Id,
                                            i_Oper_Type_Id => i_Oper_Type.Oper_Type.Oper_Type_Id,
                                            i_Indicator_Id => v_Indicators(i) (1),
                                            i_Identifier   => v_Indicators(i) (2));
      end loop;
    
      if v_Exists then
        for r in (select *
                    from Hpr_Oper_Type_Indicators q
                   where q.Company_Id = i_Oper_Type.Oper_Type.Company_Id
                     and q.Oper_Type_Id = i_Oper_Type.Oper_Type.Oper_Type_Id
                     and q.Indicator_Id not member of v_Indicator_Ids)
        loop
          z_Hpr_Oper_Type_Indicators.Delete_One(i_Company_Id   => i_Oper_Type.Oper_Type.Company_Id,
                                                i_Oper_Type_Id => i_Oper_Type.Oper_Type.Oper_Type_Id,
                                                i_Indicator_Id => r.Indicator_Id);
        end loop;
      end if;
    
      v_Errors := Hpr_Util.Formula_Validate(i_Company_Id => i_Oper_Type.Oper_Type.Company_Id,
                                            i_Formula    => i_Oper_Type.Estimation_Formula);
    
      if v_Errors.Count <> 0 then
        Hpr_Error.Raise_034(Fazo.Gather(v_Errors, Chr(10)));
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Save(i_Book Hpr_Pref.Book_Rt) is
    r_Book            Hpr_Books%rowtype;
    v_Operation       Hpr_Pref.Book_Operation_Rt;
    v_Staff_Ids       Array_Number;
    v_Last_Charge_Ids Array_Number;
    v_New_Charge_Ids  Array_Number := Array_Number();
    v_Exist           boolean;
  begin
    if z_Hpr_Books.Exist_Lock(i_Company_Id => i_Book.Book.Company_Id,
                              i_Filial_Id  => i_Book.Book.Filial_Id,
                              i_Book_Id    => i_Book.Book.Book_Id) then
      v_Exist := true;
    end if;
  
    r_Book.Company_Id   := i_Book.Book.Company_Id;
    r_Book.Filial_Id    := i_Book.Book.Filial_Id;
    r_Book.Book_Id      := i_Book.Book.Book_Id;
    r_Book.Book_Type_Id := i_Book.Book_Type_Id;
  
    select q.Charge_Id
      bulk collect
      into v_Last_Charge_Ids
      from Hpr_Book_Operations q
     where q.Company_Id = r_Book.Company_Id
       and q.Filial_Id = r_Book.Filial_Id
       and q.Book_Id = r_Book.Book_Id
       and q.Autofilled = 'Y';
  
    Mpr_Api.Book_Save(i_Book.Book);
  
    if v_Exist then
      z_Hpr_Books.Update_Row(r_Book);
    else
      z_Hpr_Books.Insert_Row(r_Book);
    end if;
  
    v_Staff_Ids := Array_Number();
    v_Staff_Ids.Extend(i_Book.Operations.Count);
  
    for i in 1 .. i_Book.Operations.Count
    loop
      v_Operation := i_Book.Operations(i);
      v_Staff_Ids(i) := v_Operation.Staff_Id;
    
      z_Hpr_Book_Operations.Save_One(i_Company_Id   => r_Book.Company_Id,
                                     i_Filial_Id    => r_Book.Filial_Id,
                                     i_Book_Id      => r_Book.Book_Id,
                                     i_Operation_Id => v_Operation.Operation_Id,
                                     i_Staff_Id     => v_Operation.Staff_Id,
                                     i_Charge_Id    => v_Operation.Charge_Id,
                                     i_Autofilled   => v_Operation.Autofilled);
    
      if v_Operation.Autofilled = 'Y' then
        Charge_Use(i_Company_Id => r_Book.Company_Id,
                   i_Filial_Id  => r_Book.Filial_Id,
                   i_Charge_Id  => v_Operation.Charge_Id);
      
        v_New_Charge_Ids.Extend;
        v_New_Charge_Ids(v_New_Charge_Ids.Count) := v_Operation.Charge_Id;
      end if;
    end loop;
  
    v_Last_Charge_Ids := v_Last_Charge_Ids multiset Except v_New_Charge_Ids;
  
    for i in 1 .. v_Last_Charge_Ids.Count
    loop
      Charge_Cancel_Used(i_Company_Id => r_Book.Company_Id,
                         i_Filial_Id  => r_Book.Filial_Id,
                         i_Charge_Id  => v_Last_Charge_Ids(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    Mpr_Api.Book_Post(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Book_Id    => i_Book_Id);
  
    for r in (select q.Charge_Id
                from Hpr_Book_Operations q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Book_Id = i_Book_Id
                 and q.Autofilled = 'Y')
    loop
      Charge_Complete(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Charge_Id  => r.Charge_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
  begin
    for r in (select q.Charge_Id
                from Hpr_Book_Operations q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Book_Id = i_Book_Id
                 and q.Autofilled = 'Y')
    loop
      Charge_Cancel_Completed(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Charge_Id  => r.Charge_Id);
    end loop;
  
    Mpr_Api.Book_Unpost(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Book_Id    => i_Book_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Book_Id    number
  ) is
    v_Charge_Ids Array_Number;
  begin
    select q.Charge_Id
      bulk collect
      into v_Charge_Ids
      from Hpr_Book_Operations q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Book_Id = i_Book_Id
       and q.Autofilled = 'Y';
  
    Mpr_Api.Book_Delete(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Book_Id    => i_Book_Id);
  
    for i in 1 .. v_Charge_Ids.Count
    loop
      Charge_Cancel_Used(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Charge_Id  => v_Charge_Ids(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Save(i_Advance Hpr_Pref.Advance_Rt) is
    v_Payment       Mpr_Pref.Payment_Rt;
    v_Employee_Id   number;
    v_Month_Begin   date;
    v_Staff_Id      number;
    v_Turnout_Count number;
  begin
    v_Payment := i_Advance.Payment;
  
    if i_Advance.Payment.Payment_Kind <> Mpr_Pref.c_Pk_Advance then
      Hpr_Error.Raise_035(Mpr_Util.t_Payment_Kind(i_Advance.Payment.Payment_Kind));
    end if;
  
    if i_Advance.Days_Limit is not null then
      v_Month_Begin := Trunc(v_Payment.Booked_Date, 'mon');
    
      for i in 1 .. i_Advance.Employee_Ids.Count
      loop
        v_Employee_Id := i_Advance.Employee_Ids(i);
      
        v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id   => v_Payment.Company_Id,
                                                     i_Filial_Id    => v_Payment.Filial_Id,
                                                     i_Employee_Id  => v_Employee_Id,
                                                     i_Period_Begin => v_Payment.Booked_Date -
                                                                       i_Advance.Days_Limit,
                                                     i_Period_End   => v_Payment.Booked_Date);
        if v_Staff_Id is not null then
          if i_Advance.Limit_Kind = Hpr_Pref.c_Advance_Limit_Turnout_Days then
            v_Turnout_Count := Htt_Util.Calc_Turnout_Days(i_Company_Id  => v_Payment.Company_Id,
                                                          i_Filial_Id   => v_Payment.Filial_Id,
                                                          i_Employee_Id => v_Employee_Id,
                                                          i_Begin_Date  => v_Month_Begin,
                                                          i_End_Date    => v_Payment.Booked_Date);
          
            if v_Turnout_Count < i_Advance.Days_Limit then
              Hpr_Error.Raise_018(i_Staff_Name  => Href_Util.Staff_Name(i_Company_Id => v_Payment.Company_Id,
                                                                        i_Filial_Id  => v_Payment.Filial_Id,
                                                                        i_Staff_Id   => v_Staff_Id),
                                  i_Turnout_Cnt => v_Turnout_Count,
                                  i_Days_Limit  => i_Advance.Days_Limit,
                                  i_Booked_Date => v_Payment.Booked_Date);
            end if;
          end if;
        else
          Hpr_Error.Raise_019(i_Days_Limit    => i_Advance.Days_Limit,
                              i_Employee_Name => z_Mr_Natural_Persons.Load(i_Company_Id => v_Payment.Company_Id, i_Person_Id => v_Employee_Id).Name,
                              i_Booked_Date   => v_Payment.Booked_Date);
        end if;
      end loop;
    end if;
  
    Mpr_Api.Payment_Save(i_Advance.Payment);
  
    z_Hpr_Advance_Settings.Save_One(i_Company_Id => v_Payment.Company_Id,
                                    i_Filial_Id  => v_Payment.Filial_Id,
                                    i_Payment_Id => v_Payment.Payment_Id,
                                    i_Limit_Kind => i_Advance.Limit_Kind,
                                    i_Days_Limit => i_Advance.Days_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Post
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
    r_Payment      Hpr_Sales_Bonus_Payments%rowtype;
    r_Robot        Mrf_Robots%rowtype;
    r_Job          Mhr_Jobs%rowtype;
    v_Period_Begin date;
    v_Period_End   date;
    v_Currency_Id  number;
    v_Corr_Account Mk_Account;
    v_Cash_Or_Bank Mk_Account;
    v_Payment      Mk_Account;
  
    --------------------------------------------------
    Function Interval_Kind(i_Bonus_Type varchar2) return varchar2 is
    begin
      return --
      case i_Bonus_Type --
      when Hrm_Pref.c_Bonus_Type_Personal_Sales then Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Personal_Sales --
      when Hrm_Pref.c_Bonus_Type_Department_Sales then Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Department_Sales --
      when Hrm_Pref.c_Bonus_Type_Successful_Delivery then Hpd_Pref.c_Lock_Interval_Kind_Sales_Bonus_Successful_Delivery --
      end;
    end;
  begin
    r_Payment := z_Hpr_Sales_Bonus_Payments.Lock_Load(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Payment_Id => i_Payment_Id);
  
    if r_Payment.Posted = 'Y' then
      Hpr_Error.Raise_043(r_Payment.Payment_Number);
    end if;
  
    Mk_Journal.Pick(i_Company_Id   => i_Company_Id,
                    i_Filial_Id    => i_Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Sales_Bonus_Payment(i_Payment_Id),
                    i_Trans_Date   => r_Payment.Payment_Date);
  
    v_Currency_Id := Mk_Pref.Base_Currency(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Payment.Payment_Type = Mpr_Pref.c_Pt_Cashbox then
      v_Cash_Or_Bank := Mkr_Account.Cash(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Currency_Id => v_Currency_Id,
                                         i_Cashbox_Id  => r_Payment.Cashbox_Id);
    else
      v_Cash_Or_Bank := Mkr_Account.Bank(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Currency_Id     => v_Currency_Id,
                                         i_Bank_Account_Id => r_Payment.Bank_Account_Id);
    end if;
  
    for r in (select q.*,
                     (select s.Employee_Id
                        from Href_Staffs s
                       where s.Company_Id = i_Company_Id
                         and s.Filial_Id = i_Filial_Id
                         and s.Staff_Id = q.Staff_Id) as Employee_Id,
                     (select s.Dismissal_Date
                        from Href_Staffs s
                       where s.Company_Id = i_Company_Id
                         and s.Filial_Id = i_Filial_Id
                         and s.Staff_Id = q.Staff_Id) as Dismissal_Date
                from Hpr_Sales_Bonus_Payment_Operations q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Payment_Id = i_Payment_Id)
    loop
      if Hpr_Util.Is_Staff_Sales_Bonus_Calced(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Staff_Id     => r.Staff_Id,
                                              i_Bonus_Type   => r.Bonus_Type,
                                              i_Period_Begin => r.Period_Begin,
                                              i_Period_End   => r.Period_End,
                                              o_Period_Begin => v_Period_Begin,
                                              o_Period_End   => v_Period_End) = 'Y' then
        Hpr_Error.Raise_039(i_Payment_Number  => r_Payment.Payment_Number,
                            i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                      i_Filial_Id  => i_Filial_Id,
                                                                      i_Staff_Id   => r.Staff_Id),
                            i_Bonus_Type_Name => Hrm_Util.t_Bonus_Type(r.Bonus_Type),
                            i_Period_Begin    => v_Period_Begin,
                            i_Period_End      => v_Period_End);
      end if;
    
      Hpd_Api.Sales_Bonus_Payment_Lock_Interval_Insert(i_Company_Id    => i_Company_Id,
                                                       i_Filial_Id     => i_Filial_Id,
                                                       i_Operation_Id  => r.Operation_Id,
                                                       i_Staff_Id      => r.Staff_Id,
                                                       i_Begin_Date    => r.Period_Begin,
                                                       i_End_Date      => r.Period_End,
                                                       i_Interval_Kind => Interval_Kind(r.Bonus_Type));
    
      r_Job := z_Mhr_Jobs.Lock_Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Job_Id     => r.Job_Id);
    
      r_Robot := Hpd_Util.Get_Closest_Robot(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => r.Staff_Id,
                                            i_Period     => Least(r.Period_End,
                                                                  Nvl(r.Dismissal_Date, r.Period_End)));
    
      if r.Job_Id <> r_Robot.Job_Id then
        Hpr_Error.Raise_044(i_Payment_Number => r_Payment.Payment_Number,
                            i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id,
                                                                     i_Staff_Id   => r.Staff_Id),
                            i_Job_Name       => r_Job.Name,
                            i_Period_Begin   => r.Period_Begin,
                            i_Period_End     => r.Period_End);
      end if;
    
      -- calc amount
      if r_Job.Expense_Coa_Id is not null then
        v_Corr_Account := Mk_Util.Account(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Coa_Id      => r_Job.Expense_Coa_Id,
                                          i_Currency_Id => v_Currency_Id,
                                          i_Ref_Set     => r_Job.Expense_Ref_Set);
      else
        Hpr_Error.Raise_045(i_Job_Name => r_Job.Name);
      end if;
    
      Mpr_Journal.Accrue(i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Employee_Id  => r.Employee_Id,
                         i_Corr_Account => v_Corr_Account,
                         i_Currency_Id  => v_Currency_Id,
                         i_Amount       => r.Amount,
                         i_Division_Id  => r_Robot.Division_Id,
                         i_Job_Id       => r.Job_Id);
    
      -- pay
      v_Payment := Mkr_Account.Payroll_Accrual(i_Company_Id                   => i_Company_Id,
                                               i_Filial_Id                    => i_Filial_Id,
                                               i_Currency_Id                  => v_Currency_Id,
                                               i_Person_Id                    => r.Employee_Id,
                                               i_Payroll_Accrual_Condition_Id => Mkr_Pref.c_Pac_Free);
    
      Mk_Journal.Add_Trans(i_Debit       => v_Payment,
                           i_Credit      => v_Cash_Or_Bank,
                           i_Amount      => r.Amount,
                           i_Amount_Base => r.Amount,
                           i_Note        => r_Payment.Note);
    end loop;
  
    z_Hpr_Sales_Bonus_Payments.Update_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Payment_Id => i_Payment_Id,
                                          i_Posted     => Option_Varchar2('Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Unpost
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Payment_Id number
  ) is
    r_Payment Hpr_Sales_Bonus_Payments%rowtype;
  begin
    r_Payment := z_Hpr_Sales_Bonus_Payments.Lock_Load(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Payment_Id => i_Payment_Id);
  
    if r_Payment.Posted = 'N' then
      Hpr_Error.Raise_042(r_Payment.Payment_Number);
    end if;
  
    Mk_Journal.Pick(i_Company_Id   => i_Company_Id,
                    i_Filial_Id    => i_Filial_Id,
                    i_Journal_Code => Hpr_Util.Jcode_Sales_Bonus_Payment(i_Payment_Id),
                    i_Trans_Date   => r_Payment.Payment_Date);
  
    Mk_Journal.Clear;
  
    for r in (select q.Operation_Id, q.Interval_Id
                from Hpr_Sales_Bonus_Payment_Intervals q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Operation_Id in (select q.Operation_Id
                                          from Hpr_Sales_Bonus_Payment_Operations p
                                         where p.Company_Id = i_Company_Id
                                           and p.Filial_Id = i_Filial_Id
                                           and p.Payment_Id = i_Payment_Id))
    loop
      z_Hpr_Sales_Bonus_Payment_Intervals.Delete_One(i_Company_Id   => i_Company_Id,
                                                     i_Filial_Id    => i_Filial_Id,
                                                     i_Operation_Id => r.Operation_Id);
      Hpd_Api.Lock_Interval_Delete(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Interval_Id => r.Interval_Id);
    end loop;
  
    z_Hpr_Sales_Bonus_Payments.Update_One(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Payment_Id => i_Payment_Id,
                                          i_Posted     => Option_Varchar2('N'));
  end;

end Hpr_Core;
/

create or replace package Hpr_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Fact_Id      number,
    i_Item_Fact_Id number,
    i_Item_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Contract_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Fact_Id     number,
    i_Month       date,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Penalty_Kind varchar2,
    i_First_Rule   varchar2,
    i_Second_Rule  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Time_Rule    varchar2,
    i_Penalty_Kind varchar2,
    i_First_Rule   varchar2,
    i_Second_Rule  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Penalty_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Penalty_Id number);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_010
  (
    i_Timebook_Number varchar2,
    i_Staff_Name      varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  );
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_011(i_Timebook_Number varchar2);
  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_012
  (
    i_Sheet_Number varchar2,
    i_Staff_Name   varchar2,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_013
  (
    i_Charge_Id    number,
    i_Status_Names varchar2
  );
  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_014(i_Charge_Id number);
  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_015(i_Charge_Id number);
  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_016(i_Charge_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Oper_Type_Id   number,
    i_Oper_Type_Name number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Staff_Name  varchar2,
    i_Turnout_Cnt number,
    i_Days_Limit  number,
    i_Booked_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Employee_Name varchar2,
    i_Days_Limit    number,
    i_Booked_Date   date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Timebook_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Timebook_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Timebook_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Sheet_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Sheet_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Sheet_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Sheet_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Oper_Type_Id   number,
    i_Oper_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Value number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Staff_Name    varchar2,
    i_Division_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Errors varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Current_Payment_Kind varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037;
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_038(i_Payment_Number varchar2);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_039
  (
    i_Payment_Number  varchar2,
    i_Staff_Name      varchar2,
    i_Bonus_Type_Name varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  );
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_040
  (
    i_Payment_Number  varchar2,
    i_Staff_Name      varchar2,
    i_Bonus_Type_Name varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  );
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_041(i_Payment_Number varchar2);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_042(i_Payment_Number varchar2);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_043(i_Payment_Number varchar2);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_044
  (
    i_Payment_Number varchar2,
    i_Staff_Name     varchar2,
    i_Job_Name       varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  );
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_045(i_Job_Name varchar2);
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_046;
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_047(i_Document_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048(i_Document_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049
  (
    i_Charge_Id       number := null,
    i_Staff_Name      varchar2,
    i_Status          varchar2,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Book_Number     varchar2 := null,
    i_Book_Date       date := null
  );
  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_050(i_Document_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051(i_Oper_Type_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Policy_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053(i_Policy_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_First_Row  number,
    i_Second_Row number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Rule_Order number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Name number);
end Hpr_Error;
/
create or replace package body Hpr_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hpr_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:status must be new, fact id: $1, current status: $2',
                         i_Fact_Id,
                         i_Status_Name),
          i_Title   => t('001:title:cannot save civil contract fact'),
          i_S1      => t('001:solution:change fact status to new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Fact_Id      number,
    i_Item_Fact_Id number,
    i_Item_Id      number
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:item not belongs to fact, fact_id: $1, item_fact_id: $2, item_id: $3',
                         i_Fact_Id,
                         i_Item_Fact_Id,
                         i_Item_Id),
          i_Title   => t('002:title:cannot save civil contract fact'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Contract_Id number) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:no access to add item'),
          i_Title   => t('003:title:cannot update civil contract fact'),
          i_S1      => t('003:solution:change access add item of contract $1{contract_id} to yes and try again',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Contract_Id number) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:no access to add item'),
          i_Title   => t('004:title:cannot add civil contract fact'),
          i_S1      => t('004:solution:change access add item of contract $1{contract_id} to yes and try again',
                         i_Contract_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Fact_Id     number,
    i_Month       date,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:to delete fact, status must be new, current status: $1, month: $2',
                         i_Status_Name,
                         to_char(i_Month, 'month yyyy')),
          i_Title   => t('005:title:cannot delete civil contract fact'),
          i_S1      => t('005:solution:change fact $1{fact_id} status to new and try again',
                         i_Fact_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Penalty_Kind varchar2,
    i_First_Rule   varchar2,
    i_Second_Rule  varchar2
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:plan penalty time intersected, penalty_kind: $1, first_rule: $2, second_rule: $3',
                         i_Penalty_Kind,
                         i_First_Rule,
                         i_Second_Rule),
          i_Title   => t('006:title:penalty time intersection $1{penalty_kind}', i_Penalty_Kind),
          i_S1      => t('006:solution:remove intersection in rule times and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Time_Rule    varchar2,
    i_Penalty_Kind varchar2,
    i_First_Rule   varchar2,
    i_Second_Rule  varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:plan penalty day intersection, penalty_kind: $1, first_rule: $2, second_rule: $3, time_rule: $4',
                         i_Penalty_Kind,
                         i_First_Rule,
                         i_Second_Rule,
                         i_Time_Rule),
          i_Title   => t('007:title:penalty day intersection $1{penalty_kind}', i_Penalty_Kind),
          i_S1      => t('007:solution:remove intersection in rule days and try again, time_rule:$1',
                         i_Time_Rule));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Penalty_Id number) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:penalty month cannot be changed, penalty_id: $1', i_Penalty_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Penalty_Id number) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:penalty division cannot be changed, penalty_id: $1',
                         i_Penalty_Id));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_010
  (
    i_Timebook_Number varchar2,
    i_Staff_Name      varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:$1{staff_name} is blocked between $2{period_begin} and $3{period_end}',
                         i_Staff_Name,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('010:title:locked period found'),
          i_S1      => t('010:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_011(i_Timebook_Number varchar2) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:timebook is already posted, timebook_number: $1',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_012
  (
    i_Sheet_Number varchar2,
    i_Staff_Name   varchar2,
    i_Period_Begin date,
    i_Period_End   date
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:another sheet is already posted for $1{staff_name}, period begin: $2, period end: $3',
                         i_Staff_Name,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('012:title:locked period found'),
          i_S1      => t('012:solution:unpost wage sheet $1{sheet_number} and try again',
                         i_Sheet_Number));
  end;

  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_013
  (
    i_Charge_Id    number,
    i_Status_Names varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:to use charge, status must be in $1{status_names}, charge_id: $2',
                         i_Status_Names,
                         i_Charge_Id),
          i_S1      => t('013:solution:change status one of $1{status_names} and try again',
                         i_Status_Names));
  end;

  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_014(i_Charge_Id number) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:to cancel charge, status must be used, charge_id: $1',
                         i_Charge_Id));
  end;

  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_015(i_Charge_Id number) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:to complete charge, status must be used, charge_id: $1',
                         i_Charge_Id));
  end;

  ----------------------------------------------------------------------------------------------------           
  Procedure Raise_016(i_Charge_Id number) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:to cancel complete charge, status must be complete, charge_id: $1',
                         i_Charge_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Oper_Type_Id   number,
    i_Oper_Type_Name number
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:cannot change oper group of system oper type, oper_type_id: $1, oper_type_name: $2',
                         i_Oper_Type_Id,
                         i_Oper_Type_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Staff_Name  varchar2,
    i_Turnout_Cnt number,
    i_Days_Limit  number,
    i_Booked_Date date
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:advance available only to employees worked $1{days_limit} days before $2{booked_date}. staff $3{staff_name} worked only $4{turnout_cnt} days',
                         i_Days_Limit,
                         i_Booked_Date,
                         i_Staff_Name,
                         i_Turnout_Cnt),
          i_Title   => t('018:title:new employee'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019
  (
    i_Employee_Name varchar2,
    i_Days_Limit    number,
    i_Booked_Date   date
  ) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:advance available only to employees hired $1{days_limit} days before $2{booked_date}. employee $3{employee_name} after this date',
                         i_Days_Limit,
                         i_Booked_Date,
                         i_Employee_Name),
          i_Title   => t('019:title:new employee'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:return fact to new, status must be complete, fact_id: $1, current_status: $2',
                         i_Fact_Id,
                         i_Status_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:to complete fact, status must be new, fact_id: $1, current_status: $2',
                         i_Fact_Id,
                         i_Status_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:to accept fact, status must be complete, fact_id: $1, current_status: $2',
                         i_Fact_Id,
                         i_Status_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Fact_Id     number,
    i_Status_Name varchar2
  ) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:to return in complete, status must be accept, fact_id: $1, current_status: $2',
                         i_Fact_Id,
                         i_Status_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Timebook_Number varchar2) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:cannot post timebook. $1{timebook_number} timebook already posted',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Timebook_Number varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot unpost timebook. $1{timebook_number} timebook already unposted',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026(i_Timebook_Number varchar2) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:cannot delete timebook. $1{timebook_number} timebook posted',
                         i_Timebook_Number),
          i_S1      => t('026:solution:before delete timebook, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Sheet_Number varchar2) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:cannot save wage sheet $1{sheet_number} wage sheet already posted',
                         i_Sheet_Number),
          i_S1      => t('027:solution:before save wage sheet, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Sheet_Number varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:cannot delete wage sheet. $1{sheet_number} wage sheet already posted',
                         i_Sheet_Number),
          i_S1      => t('028:solution:before delete wage sheet, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Sheet_Number varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:cannot posted wage sheet. $1{sheet_number} wage sheet already posted',
                         i_Sheet_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Sheet_Number varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:cannot unposted wage sheet. $1{sheet_number} wage sheet already unposted',
                         i_Sheet_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Oper_Type_Id   number,
    i_Oper_Type_Name varchar2
  ) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:cannot delete system oper type, oper_type_id: $1, oper_type_name: $2',
                         i_Oper_Type_Id,
                         i_Oper_Type_Name),
          i_Title   => t('031:title:cannot delete system oper type'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Value number) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:overtime coefficient mus be positive, current_value: $1',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Staff_Name    varchar2,
    i_Division_Name varchar2
  ) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:$1{division_name} of $2{staff_name} is wrong',
                         i_Division_Name,
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Errors varchar2) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:formula execution erors: $1{errors}', i_Errors),
          i_Title   => t('034:title:oper type formula invalid'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Current_Payment_Kind varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:payment kind must be advance, current_payment_kind: $1',
                         i_Current_Payment_Kind));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036 is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:regular wage sheet cannot contains info about one-time operations'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037 is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:one-time wage sheet cannot contains info about regular operations'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_038(i_Payment_Number varchar2) is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:sales bonus payment is already posted, payment_number: $1',
                         i_Payment_Number),
          i_Title   => t('038:title:cannot save sales bonus payment'),
          i_S1      => t('038:solution:before save sales bonus payment, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_039
  (
    i_Payment_Number  varchar2,
    i_Staff_Name      varchar2,
    i_Bonus_Type_Name varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:sales bonus $1{bonus type} for $2{staff_name} is paid between $3{period_begin} and $4{period_end}, payment_number=$5',
                         i_Bonus_Type_Name,
                         i_Staff_Name,
                         i_Period_Begin,
                         i_Period_End,
                         i_Payment_Number),
          i_Title   => t('039:title:sales bonus paid period found'),
          i_S1      => t('039:solution:delete this operation and try again'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_040
  (
    i_Payment_Number  varchar2,
    i_Staff_Name      varchar2,
    i_Bonus_Type_Name varchar2,
    i_Period_Begin    date,
    i_Period_End      date
  ) is
  begin
    Error(i_Code    => '040',
          i_Message => t('040:message:the period of sales bonus $1{bonus type} for $2{staff_name} is not between $3{period_begin} and $4{period_end}, payment_number=$5',
                         i_Bonus_Type_Name,
                         i_Staff_Name,
                         i_Period_Begin,
                         i_Period_End,
                         i_Payment_Number),
          i_Title   => t('040:title:sales bonus period is wrong'),
          i_S1      => t('040:solution:delete this operation and try again'),
          i_S2      => t('040:solution:change the period of payment and try again'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_041(i_Payment_Number varchar2) is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:sales bonus payment is already posted, payment_number: $1',
                         i_Payment_Number),
          i_Title   => t('041:title:cannot post sales bonus payment'),
          i_S1      => t('041:solution:before post sales bonus payment, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_042(i_Payment_Number varchar2) is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:sales bonus payment is already unposted, payment_number: $1',
                         i_Payment_Number),
          i_Title   => t('042:title:cannot unpost sales bonus payment'),
          i_S1      => t('042:solution:before unpost sales bonus payment, post it'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_043(i_Payment_Number varchar2) is
  begin
    Error(i_Code    => '043',
          i_Message => t('043:message:sales bonus payment is already posted, payment_number: $1',
                         i_Payment_Number),
          i_Title   => t('043:title:cannot delete sales bonus payment'),
          i_S1      => t('043:solution:before delete sales bonus payment, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_044
  (
    i_Payment_Number varchar2,
    i_Staff_Name     varchar2,
    i_Job_Name       varchar2,
    i_Period_Begin   date,
    i_Period_End     date
  ) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:$1{staff_name} is not worked to $2{job name} from $3{period_begin} to $4{period_end}, payment_number=$5',
                         i_Staff_Name,
                         i_Job_Name,
                         i_Period_Begin,
                         i_Period_End,
                         i_Payment_Number),
          i_Title   => t('044:title:the job of staff is wrong in payment operation'),
          i_S1      => t('044:solution:delete this operation and try again'),
          i_S2      => t('044:solution:change the job of staff and try again'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_045(i_Job_Name varchar2) is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:no coa attached to $1{job_name}', i_Job_Name),
          i_S1      => t('045:solution:delete this operation and try again'),
          i_S2      => t('045:solution:attach coa to this job and try again'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_046 is
  begin
    Error(i_Code => '046', i_Message => t('046:message:you do not have access view salaries'));
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_047(i_Document_Number varchar2) is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:charge document is already posted, document_number: $1{document_number}',
                         i_Document_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048(i_Document_Number varchar2) is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:cannot delete charge document. $1{document_number} charge document posted',
                         i_Document_Number),
          i_S1      => t('048:solution:before delete charge document, unpost it'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_049
  (
    i_Charge_Id       number := null,
    i_Staff_Name      varchar2,
    i_Status          varchar2,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Book_Number     varchar2 := null,
    i_Book_Date       date := null
  ) is
    t_Message  varchar2(4000);
    t_Solution varchar2(4000);
  begin
    if i_Status = Hpr_Pref.c_Charge_Status_New then
      t_Message  := t('049:message:you can not draft charge whose is not $1{status_name} in $2{documet_number} from $3{document_date} for $4{staff_name}',
                      Hpr_Util.t_Charge_Status(i_Status),
                      i_Document_Number,
                      i_Document_Date,
                      i_Staff_Name);
      t_Solution := t('049:solution:delete book with $1{book_number} and $2{book_date} and try again',
                      i_Book_Number,
                      i_Book_Date);
    elsif i_Status = Hpr_Pref.c_Charge_Status_Draft then
      t_Message := t('049:message:you cannot change status of charge to new if its status id not $1{satus_name} in $2{documet_number} from $3{document_date}, charge_id: $4{charge_id}',
                     Hpr_Util.t_Charge_Status(i_Status),
                     i_Document_Number,
                     i_Document_Date,
                     i_Charge_Id);
    end if;
  
    Error(i_Code => '049', i_Message => t_Message, i_S1 => t_Solution);
  end;

  ----------------------------------------------------------------------------------------------------              
  Procedure Raise_050(i_Document_Number varchar2) is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:charge document is already unposted, document_number: $1{document_number}',
                         i_Document_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051(i_Oper_Type_Id number) is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:estimation kind of oper type must be entered, oper_type_id: $1{oper_typr_id}',
                         i_Oper_Type_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052(i_Policy_Id number) is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:nigttime policy month cannot be changed, policy_id: $1',
                         i_Policy_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_053(i_Policy_Id number) is
  begin
    Error(i_Code    => '053',
          i_Message => t('053:message:nigttime policy division cannot be changed, policy_id: $1',
                         i_Policy_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054
  (
    i_First_Row  number,
    i_Second_Row number
  ) is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:period of $1{first_row_number} rule has intersaction with period of $2{second_row_number} rule',
                         i_First_Row,
                         i_Second_Row));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Rule_Order number) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:coefficient must be greater than 1 on $1{rule_order} rule',
                         i_Rule_Order));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Name number) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:oper type not found with this name, name: $1{oper_type_name}',
                         i_Name));
  end;

end Hpr_Error;
/

create or replace package Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Policy_New
  (
    o_Nigthtime_Policy    out Hpr_Pref.Nighttime_Policy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nigthtime_Policy_Id number,
    i_Month               date,
    i_Name                varchar2 := null,
    i_Division_Id         number := null,
    i_State               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Add_Rule
  (
    o_Nigthtime_Policy in out nocopy Hpr_Pref.Nighttime_Policy_Rt,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Nighttime_Coef   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Division_Ids Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Nighttime_Amount number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Indicator_Id number,
    i_Period       date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perf_Bonus
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perf_Extra_Bonus
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Completed_Exam_Score
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Exam_Id    number,
    i_Period     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Completed_Training_Subjects
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date,
    i_Subject_Ids Array_Number
  ) return number;
  ---------------------------------------------------------------------------------------------------- 
  Function Calc_Average_Attendance_Percentage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perfomance_Percentage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number,
    i_Exam_Id      number := null,
    i_Subject_Ids  Array_Number := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount_With_Indicators
  (
    o_Indicators   out Hpr_Pref.Daily_Indicators_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number;
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Amount
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Division_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  );
  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt;
  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap;
  ----------------------------------------------------------------------------------------------------     
  Function Oper_Type_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2;
  Function Charge_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2;
  Function Estimation_Types return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2;
  Function Advance_Limit_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2;
  Function Period_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2;
  Function Penalty_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2;
  Function Cv_Fact_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2;
  Function t_Penalty_Rule_Unit_Times return varchar2;
  Function t_Penalty_Rule_Unit_Days return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2;
end Hpr_Util;
/
create or replace package body Hpr_Util is
  ----------------------------------------------------------------------------------------------------
  g_Cache_Late_Amount      Fazo.Number_Code_Aat;
  g_Cache_Early_Amount     Fazo.Number_Code_Aat;
  g_Cache_Lack_Amount      Fazo.Number_Code_Aat;
  g_Cache_Day_Skip_Amount  Fazo.Number_Code_Aat;
  g_Cache_Mark_Skip_Amount Fazo.Number_Code_Aat;

  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HPR:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_New
  (
    o_Contract_Fact out Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Fact_Id       number
  ) is
  begin
    o_Contract_Fact.Company_Id := i_Company_Id;
    o_Contract_Fact.Filial_Id  := i_Filial_Id;
    o_Contract_Fact.Fact_Id    := i_Fact_Id;
  
    o_Contract_Fact.Items := Hpr_Pref.Cv_Contract_Fact_Item_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Cv_Contract_Fact_Add_Item
  (
    o_Contract_Fact in out nocopy Hpr_Pref.Cv_Contract_Fact_Rt,
    i_Fact_Item_Id  number,
    i_Fact_Quantity number,
    i_Fact_Amount   number,
    i_Name          varchar2
  ) is
    v_Fact_Item Hpr_Pref.Cv_Contract_Fact_Item_Rt;
  begin
    v_Fact_Item.Fact_Item_Id  := i_Fact_Item_Id;
    v_Fact_Item.Fact_Quantity := i_Fact_Quantity;
    v_Fact_Item.Fact_Amount   := i_Fact_Amount;
    v_Fact_Item.Name          := i_Name;
  
    o_Contract_Fact.Items.Extend;
    o_Contract_Fact.Items(o_Contract_Fact.Items.Count) := v_Fact_Item;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_New
  (
    o_Penalty     out Hpr_Pref.Penalty_Rt,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Penalty_Id  number,
    i_Month       date,
    i_Name        varchar2 := null,
    i_Division_Id number := null,
    i_State       varchar2
  ) is
  begin
    o_Penalty.Company_Id  := i_Company_Id;
    o_Penalty.Filial_Id   := i_Filial_Id;
    o_Penalty.Penalty_Id  := i_Penalty_Id;
    o_Penalty.Month       := i_Month;
    o_Penalty.Name        := i_Name;
    o_Penalty.Division_Id := i_Division_Id;
    o_Penalty.State       := i_State;
  
    o_Penalty.Policies := Hpr_Pref.Penalty_Policy_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Penalty_Add_Policy
  (
    p_Penalty              in out nocopy Hpr_Pref.Penalty_Rt,
    i_Penalty_Kind         varchar2,
    i_Penalty_Type         varchar2,
    i_From_Day             number,
    i_To_Day               number := null,
    i_From_Time            number,
    i_To_Time              number := null,
    i_Penalty_Coef         number := null,
    i_Penalty_Per_Time     number := null,
    i_Penalty_Amount       number := null,
    i_Penalty_Time         number := null,
    i_Calc_After_From_Time varchar2 := null
  ) is
    v_Policy Hpr_Pref.Penalty_Policy_Rt;
  begin
    v_Policy.Penalty_Kind         := i_Penalty_Kind;
    v_Policy.Penalty_Type         := i_Penalty_Type;
    v_Policy.From_Day             := i_From_Day;
    v_Policy.To_Day               := i_To_Day;
    v_Policy.From_Time            := i_From_Time;
    v_Policy.To_Time              := i_To_Time;
    v_Policy.Penalty_Coef         := i_Penalty_Coef;
    v_Policy.Penalty_Per_Time     := i_Penalty_Per_Time;
    v_Policy.Penalty_Amount       := i_Penalty_Amount;
    v_Policy.Penalty_Time         := i_Penalty_Time;
    v_Policy.Calc_After_From_Time := i_Calc_After_From_Time;
  
    p_Penalty.Policies.Extend;
    p_Penalty.Policies(p_Penalty.Policies.Count) := v_Policy;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Policy_New
  (
    o_Nigthtime_Policy    out Hpr_Pref.Nighttime_Policy_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Nigthtime_Policy_Id number,
    i_Month               date,
    i_Name                varchar2 := null,
    i_Division_Id         number := null,
    i_State               varchar2
  ) is
  begin
    o_Nigthtime_Policy.Company_Id           := i_Company_Id;
    o_Nigthtime_Policy.Filial_Id            := i_Filial_Id;
    o_Nigthtime_Policy.Nigthttime_Policy_Id := i_Nigthtime_Policy_Id;
    o_Nigthtime_Policy.Month                := i_Month;
    o_Nigthtime_Policy.Name                 := i_Name;
    o_Nigthtime_Policy.Division_Id          := i_Division_Id;
    o_Nigthtime_Policy.State                := i_State;
  
    o_Nigthtime_Policy.Rules := Hpr_Pref.Nighttime_Rule_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Nigthtime_Add_Rule
  (
    o_Nigthtime_Policy in out nocopy Hpr_Pref.Nighttime_Policy_Rt,
    i_Begin_Time       number,
    i_End_Time         number,
    i_Nighttime_Coef   number
  ) is
    v_Rule     Hpr_Pref.Nighttime_Rule_Rt;
    v_End_Time number := i_End_Time;
  begin
    if v_End_Time < i_Begin_Time then
      v_End_Time := v_End_Time + 1440;
    end if;
  
    v_Rule.Begin_Time     := i_Begin_Time;
    v_Rule.End_Time       := v_End_Time;
    v_Rule.Nighttime_Coef := i_Nighttime_Coef;
  
    o_Nigthtime_Policy.Rules.Extend;
    o_Nigthtime_Policy.Rules(o_Nigthtime_Policy.Rules.Count) := v_Rule;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Sheet_New
  (
    o_Wage_Sheet   out Hpr_Pref.Wage_Sheet_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Sheet_Id     number,
    i_Sheet_Number varchar2,
    i_Sheet_Date   date,
    i_Period_Begin date,
    i_Period_End   date,
    i_Period_Kind  varchar2,
    i_Note         varchar2,
    i_Sheet_Kind   varchar2,
    i_Round_Value  varchar2 := null,
    i_Staff_Ids    Array_Number := Array_Number(),
    i_Division_Ids Array_Number := Array_Number(),
    i_Sheet_Staffs Hpr_Pref.Sheet_Staff_Nt := Hpr_Pref.Sheet_Staff_Nt()
  ) is
  begin
    o_Wage_Sheet.Company_Id   := i_Company_Id;
    o_Wage_Sheet.Filial_Id    := i_Filial_Id;
    o_Wage_Sheet.Sheet_Id     := i_Sheet_Id;
    o_Wage_Sheet.Sheet_Number := i_Sheet_Number;
    o_Wage_Sheet.Sheet_Date   := i_Sheet_Date;
    o_Wage_Sheet.Period_Begin := i_Period_Begin;
    o_Wage_Sheet.Period_End   := i_Period_End;
    o_Wage_Sheet.Period_Kind  := i_Period_Kind;
    o_Wage_Sheet.Note         := i_Note;
    o_Wage_Sheet.Sheet_Kind   := i_Sheet_Kind;
    o_Wage_Sheet.Round_Value  := i_Round_Value;
    o_Wage_Sheet.Staff_Ids    := i_Staff_Ids;
    o_Wage_Sheet.Division_Ids := i_Division_Ids;
    o_Wage_Sheet.Sheet_Staffs := i_Sheet_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Onetime_Sheet_Staff_Add
  (
    p_Staffs         in out nocopy Hpr_Pref.Sheet_Staff_Nt,
    i_Staff_Id       number,
    i_Accrual_Amount number,
    i_Penalty_Amount number
  ) is
    v_Staff Hpr_Pref.Sheet_Staff_Rt;
  begin
    v_Staff.Staff_Id       := i_Staff_Id;
    v_Staff.Accrual_Amount := i_Accrual_Amount;
    v_Staff.Penalty_Amount := i_Penalty_Amount;
  
    p_Staffs.Extend;
    p_Staffs(p_Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sheet_Add_Part
  (
    p_Parts            in out nocopy Hpr_Pref.Sheet_Part_Nt,
    i_Part_Begin       date,
    i_Part_End         date,
    i_Division_Id      number,
    i_Job_Id           number,
    i_Schedule_Id      number,
    i_Fte_Id           number,
    i_Monthly_Amount   number,
    i_Plan_Amount      number,
    i_Wage_Amount      number,
    i_Overtime_Amount  number,
    i_Nighttime_Amount number,
    i_Late_Amount      number,
    i_Early_Amount     number,
    i_Lack_Amount      number,
    i_Day_Skip_Amount  number,
    i_Mark_Skip_Amount number
  ) is
    v_Part Hpr_Pref.Sheet_Part_Rt;
  begin
    v_Part := Hpr_Pref.Sheet_Part_Rt(Part_Begin       => i_Part_Begin,
                                     Part_End         => i_Part_End,
                                     Division_Id      => i_Division_Id,
                                     Job_Id           => i_Job_Id,
                                     Schedule_Id      => i_Schedule_Id,
                                     Fte_Id           => i_Fte_Id,
                                     Monthly_Amount   => i_Monthly_Amount,
                                     Plan_Amount      => i_Plan_Amount,
                                     Wage_Amount      => i_Wage_Amount,
                                     Overtime_Amount  => i_Overtime_Amount,
                                     Nighttime_Amount => i_Nighttime_Amount,
                                     Late_Amount      => i_Late_Amount,
                                     Early_Amount     => i_Early_Amount,
                                     Lack_Amount      => i_Lack_Amount,
                                     Day_Skip_Amount  => i_Day_Skip_Amount,
                                     Mark_Skip_Amount => i_Mark_Skip_Amount);
  
    p_Parts.Extend;
    p_Parts(p_Parts.Count) := v_Part;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timebook_New
  (
    o_Timebook        out Hpr_Pref.Timebook_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Timebook_Id     number,
    i_Timebook_Number varchar2,
    i_Timebook_Date   date,
    i_Period_Begin    date,
    i_Period_End      date,
    i_Period_Kind     varchar2,
    i_Division_Id     number,
    i_Note            varchar2,
    i_Staff_Ids       Array_Number
  ) is
  begin
    o_Timebook.Company_Id      := i_Company_Id;
    o_Timebook.Filial_Id       := i_Filial_Id;
    o_Timebook.Timebook_Id     := i_Timebook_Id;
    o_Timebook.Timebook_Number := i_Timebook_Number;
    o_Timebook.Timebook_Date   := i_Timebook_Date;
    o_Timebook.Period_Begin    := i_Period_Begin;
    o_Timebook.Period_End      := i_Period_End;
    o_Timebook.Period_Kind     := i_Period_Kind;
    o_Timebook.Division_Id     := i_Division_Id;
    o_Timebook.Note            := i_Note;
    o_Timebook.Staff_Ids       := i_Staff_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Oper_Type_New
  (
    o_Oper_Type              out Hpr_Pref.Oper_Type_Rt,
    i_Company_Id             number,
    i_Oper_Type_Id           number,
    i_Oper_Group_Id          number,
    i_Estimation_Type        varchar2,
    i_Estimation_Formula     varchar2,
    i_Operation_Kind         varchar2,
    i_Name                   varchar2,
    i_Short_Name             varchar2,
    i_Accounting_Type        varchar2,
    i_Corr_Coa_Id            number,
    i_Corr_Ref_Set           varchar2,
    i_Income_Tax_Exists      varchar2,
    i_Income_Tax_Rate        number,
    i_Pension_Payment_Exists varchar2,
    i_Pension_Payment_Rate   number,
    i_Social_Payment_Exists  varchar2,
    i_Social_Payment_Rate    number,
    i_Note                   varchar2,
    i_State                  varchar2,
    i_Code                   varchar2
  ) is
  begin
    o_Oper_Type.Oper_Type.Company_Id             := i_Company_Id;
    o_Oper_Type.Oper_Type.Oper_Type_Id           := i_Oper_Type_Id;
    o_Oper_Type.Oper_Type.Operation_Kind         := i_Operation_Kind;
    o_Oper_Type.Oper_Type.Name                   := i_Name;
    o_Oper_Type.Oper_Type.Short_Name             := i_Short_Name;
    o_Oper_Type.Oper_Type.Accounting_Type        := i_Accounting_Type;
    o_Oper_Type.Oper_Type.Corr_Coa_Id            := i_Corr_Coa_Id;
    o_Oper_Type.Oper_Type.Corr_Ref_Set           := i_Corr_Ref_Set;
    o_Oper_Type.Oper_Type.Income_Tax_Exists      := i_Income_Tax_Exists;
    o_Oper_Type.Oper_Type.Income_Tax_Rate        := i_Income_Tax_Rate;
    o_Oper_Type.Oper_Type.Pension_Payment_Exists := i_Pension_Payment_Exists;
    o_Oper_Type.Oper_Type.Pension_Payment_Rate   := i_Pension_Payment_Rate;
    o_Oper_Type.Oper_Type.Social_Payment_Exists  := i_Social_Payment_Exists;
    o_Oper_Type.Oper_Type.Social_Payment_Rate    := i_Social_Payment_Rate;
    o_Oper_Type.Oper_Type.Note                   := i_Note;
    o_Oper_Type.Oper_Type.State                  := i_State;
    o_Oper_Type.Oper_Type.Code                   := i_Code;
    o_Oper_Type.Oper_Group_Id                    := i_Oper_Group_Id;
    o_Oper_Type.Estimation_Type                  := i_Estimation_Type;
    o_Oper_Type.Estimation_Formula               := i_Estimation_Formula;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_New
  (
    o_Book         out Hpr_Pref.Book_Rt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Book_Id      number,
    i_Book_Type_Id number,
    i_Book_Number  varchar2,
    i_Book_Date    date,
    i_Book_Name    varchar2 := null,
    i_Month        date := null,
    i_Division_Id  number := null,
    i_Currency_Id  number,
    i_Note         varchar2 := null
  ) is
    v_Book Mpr_Pref.Book_Rt;
  begin
    Mpr_Util.Book_New(o_Book        => v_Book,
                      i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Book_Id     => i_Book_Id,
                      i_Book_Number => i_Book_Number,
                      i_Book_Date   => i_Book_Date,
                      i_Book_Name   => i_Book_Name,
                      i_Month       => i_Month,
                      i_Division_Id => i_Division_Id,
                      i_Currency_Id => i_Currency_Id,
                      i_Note        => i_Note);
  
    o_Book.Book_Type_Id := i_Book_Type_Id;
    o_Book.Book         := v_Book;
    o_Book.Operations   := Hpr_Pref.Book_Opereration_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Book_Add_Operation
  (
    p_Book                   in out nocopy Hpr_Pref.Book_Rt,
    i_Operation_Id           number,
    i_Staff_Id               number,
    i_Oper_Type_Id           number,
    i_Charge_Id              number,
    i_Autofilled             varchar2,
    i_Note                   varchar2,
    i_Amount                 number,
    i_Net_Amount             number,
    i_Income_Tax_Amount      number := null,
    i_Pension_Payment_Amount number := null,
    i_Social_Payment_Amount  number := null,
    i_Subfilial_Id           number := null
  ) is
    r_Staff     Href_Staffs%rowtype;
    v_Operation Hpr_Pref.Book_Operation_Rt;
    v_Book      Mpr_Pref.Book_Rt := p_Book.Book;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => v_Book.Company_Id,
                                  i_Filial_Id  => v_Book.Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    Mpr_Util.Book_Add_Operation(p_Book                   => v_Book,
                                i_Operation_Id           => i_Operation_Id,
                                i_Employee_Id            => r_Staff.Employee_Id,
                                i_Oper_Type_Id           => i_Oper_Type_Id,
                                i_Amount                 => i_Amount,
                                i_Net_Amount             => i_Net_Amount,
                                i_Income_Tax_Amount      => i_Income_Tax_Amount,
                                i_Pension_Payment_Amount => i_Pension_Payment_Amount,
                                i_Social_Payment_Amount  => i_Social_Payment_Amount,
                                i_Subfilial_Id           => i_Subfilial_Id,
                                i_Note                   => i_Note);
  
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Autofilled   := i_Autofilled;
  
    p_Book.Book := v_Book;
    p_Book.Operations.Extend;
    p_Book.Operations(p_Book.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Charge_Document_New
  (
    o_Charge_Document out Hpr_Pref.Charge_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Document_Name   varchar2,
    i_Month           date,
    i_Oper_Type_Id    number,
    i_Currency_Id     number,
    i_Division_Id     number,
    i_Document_Kind   varchar2
  ) is
  begin
    o_Charge_Document.Company_Id      := i_Company_Id;
    o_Charge_Document.Filial_Id       := i_Filial_Id;
    o_Charge_Document.Document_Id     := i_Document_Id;
    o_Charge_Document.Document_Number := i_Document_Number;
    o_Charge_Document.Document_Date   := i_Document_Date;
    o_Charge_Document.Document_Name   := i_Document_Name;
    o_Charge_Document.Month           := i_Month;
    o_Charge_Document.Oper_Type_Id    := i_Oper_Type_Id;
    o_Charge_Document.Currency_Id     := i_Currency_Id;
    o_Charge_Document.Division_Id     := i_Division_Id;
    o_Charge_Document.Document_Kind   := i_Document_Kind;
    o_Charge_Document.Operations      := Hpr_Pref.Charge_Document_Operation_Nt();
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Charge_Document_Add_Operation
  (
    o_Charge_Document in out Hpr_Pref.Charge_Document_Rt,
    i_Operation_Id    number,
    i_Staff_Id        number,
    i_Charge_Id       number,
    i_Oper_Type_Id    number,
    i_Amount          number,
    i_Note            varchar2
  ) is
    v_Operation Hpr_Pref.Charge_Document_Operation_Rt;
  begin
    v_Operation.Operation_Id := i_Operation_Id;
    v_Operation.Staff_Id     := i_Staff_Id;
    v_Operation.Charge_Id    := i_Charge_Id;
    v_Operation.Oper_Type_Id := i_Oper_Type_Id;
    v_Operation.Amount       := i_Amount;
    v_Operation.Note         := i_Note;
  
    o_Charge_Document.Operations.Extend();
    o_Charge_Document.Operations(o_Charge_Document.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_New
  (
    o_Advance         out nocopy Hpr_Pref.Advance_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Payment_Id      number,
    i_Payment_Number  varchar2,
    i_Payment_Date    date,
    i_Booked_Date     date,
    i_Currency_Id     number,
    i_Payment_Type    varchar2,
    i_Days_Limit      number := null,
    i_Limit_Kind      varchar2,
    i_Division_Id     number := null,
    i_Cashbox_Id      number := null,
    i_Bank_Account_Id number := null,
    i_Note            varchar2,
    i_Souce_Table     varchar2,
    i_Source_Id       number := null
  ) is
    v_Payment Mpr_Pref.Payment_Rt;
  begin
    Mpr_Util.Payment_New(o_Payment         => v_Payment,
                         i_Company_Id      => i_Company_Id,
                         i_Filial_Id       => i_Filial_Id,
                         i_Payment_Id      => i_Payment_Id,
                         i_Payment_Kind    => Mpr_Pref.c_Pk_Advance,
                         i_Payment_Number  => i_Payment_Number,
                         i_Payment_Date    => i_Payment_Date,
                         i_Booked_Date     => i_Booked_Date,
                         i_Currency_Id     => i_Currency_Id,
                         i_Payment_Type    => i_Payment_Type,
                         i_Division_Id     => i_Division_Id,
                         i_Cashbox_Id      => i_Cashbox_Id,
                         i_Bank_Account_Id => i_Bank_Account_Id,
                         i_Note            => i_Note,
                         i_Souce_Table     => i_Souce_Table,
                         i_Source_Id       => i_Source_Id);
  
    o_Advance.Payment      := v_Payment;
    o_Advance.Limit_Kind   := i_Limit_Kind;
    o_Advance.Days_Limit   := i_Days_Limit;
    o_Advance.Employee_Ids := Array_Number();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Advance_Add_Employee
  (
    p_Advance         in out nocopy Hpr_Pref.Advance_Rt,
    i_Employee_Id     number,
    i_Pay_Amount      number,
    i_Bank_Account_Id number := null,
    i_Paid_Date       date := null,
    i_Paid            varchar2 := null,
    i_Note            varchar2 := null
  ) is
  begin
    Mpr_Util.Payment_Add_Employee(p_Payment         => p_Advance.Payment,
                                  i_Employee_Id     => i_Employee_Id,
                                  i_Pay_Amount      => i_Pay_Amount,
                                  i_Bank_Account_Id => i_Bank_Account_Id,
                                  i_Paid_Date       => i_Paid_Date,
                                  i_Paid            => i_Paid,
                                  i_Note            => i_Note);
  
    Fazo.Push(p_Advance.Employee_Ids, i_Employee_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_New
  (
    o_Sales_Bonus_Payment out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Company_Id          number,
    i_Filial_Id           number,
    i_Payment_Id          number,
    i_Payment_Number      varchar2,
    i_Payment_Date        date,
    i_Payment_Name        varchar2 := null,
    i_Begin_Date          date,
    i_End_Date            date,
    i_Division_Id         number := null,
    i_Job_Id              number := null,
    i_Bonus_Type          varchar2 := null,
    i_Payment_Type        varchar2,
    i_Cashbox_Id          number := null,
    i_Bank_Account_Id     number := null,
    i_Note                varchar2 := null
  ) is
  begin
    o_Sales_Bonus_Payment.Company_Id      := i_Company_Id;
    o_Sales_Bonus_Payment.Filial_Id       := i_Filial_Id;
    o_Sales_Bonus_Payment.Payment_Id      := i_Payment_Id;
    o_Sales_Bonus_Payment.Payment_Number  := i_Payment_Number;
    o_Sales_Bonus_Payment.Payment_Date    := i_Payment_Date;
    o_Sales_Bonus_Payment.Payment_Name    := i_Payment_Name;
    o_Sales_Bonus_Payment.Begin_Date      := i_Begin_Date;
    o_Sales_Bonus_Payment.End_Date        := i_End_Date;
    o_Sales_Bonus_Payment.Division_Id     := i_Division_Id;
    o_Sales_Bonus_Payment.Job_Id          := i_Job_Id;
    o_Sales_Bonus_Payment.Bonus_Type      := i_Bonus_Type;
    o_Sales_Bonus_Payment.Payment_Type    := i_Payment_Type;
    o_Sales_Bonus_Payment.Cashbox_Id      := i_Cashbox_Id;
    o_Sales_Bonus_Payment.Bank_Account_Id := i_Bank_Account_Id;
    o_Sales_Bonus_Payment.Note            := i_Note;
  
    o_Sales_Bonus_Payment.Operations := Hpr_Pref.Sales_Bonus_Payment_Operation_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sales_Bonus_Payment_Add_Operation
  (
    p_Sales_Bonus_Payment in out nocopy Hpr_Pref.Sales_Bonus_Payment_Rt,
    i_Operation_Id        number,
    i_Staff_Id            number,
    i_Period_Begin        date,
    i_Period_End          date,
    i_Bonus_Type          varchar2,
    i_Job_Id              number,
    i_Percentage          number,
    i_Periods             Array_Date,
    i_Sales_Amounts       Array_Number,
    i_Amounts             Array_Number
  ) is
    v_Operation Hpr_Pref.Sales_Bonus_Payment_Operation_Rt;
  begin
    v_Operation.Operation_Id  := i_Operation_Id;
    v_Operation.Staff_Id      := i_Staff_Id;
    v_Operation.Period_Begin  := i_Period_Begin;
    v_Operation.Period_End    := i_Period_End;
    v_Operation.Bonus_Type    := i_Bonus_Type;
    v_Operation.Job_Id        := i_Job_Id;
    v_Operation.Percentage    := i_Percentage;
    v_Operation.Periods       := i_Periods;
    v_Operation.Sales_Amounts := i_Sales_Amounts;
    v_Operation.Amounts       := i_Amounts;
  
    p_Sales_Bonus_Payment.Operations.Extend;
    p_Sales_Bonus_Payment.Operations(p_Sales_Bonus_Payment.Operations.Count) := v_Operation;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Currency_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Array_Number is
    --------------------------------------------------
    Function Load_Setting(i_Code varchar2) return Array_Number is
      v_Ids varchar2(4000) := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                           i_Filial_Id  => i_Filial_Id,
                                           i_Code       => i_Code);
    begin
      if v_Ids is null then
        return Array_Number();
      end if;
    
      return Fazo.To_Array_Number(Fazo.Split(v_Ids, Href_Pref.c_Settings_Separator));
    end;
  
  begin
    return Load_Setting(Hpr_Pref.c_Pref_Allow_Other_Currencies);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Use_Subfilial_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Code       => Hpr_Pref.c_Pref_Use_Subfilial_Settings),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Blocked
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Timebook_Id  number := null
  ) return varchar2 is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hpr_Timesheet_Locks w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and w.Timesheet_Date >= i_Period_Begin
       and w.Timesheet_Date <= i_Period_End
       and (i_Timebook_Id is null or w.Timebook_Id <> i_Timebook_Id)
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Staff_Sales_Bonus_Calced
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Bonus_Type   varchar2,
    i_Period_Begin date,
    i_Period_End   date,
    i_Payment_Id   number := null,
    o_Period_Begin out date,
    o_Period_End   out date
  ) return varchar2 is
  begin
    select Greatest(w.Period_Begin, i_Period_Begin), Least(w.Period_End, i_Period_End)
      into o_Period_Begin, o_Period_End
      from Hpr_Sales_Bonus_Payment_Operations w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.Staff_Id = i_Staff_Id
       and Greatest(w.Period_Begin, i_Period_Begin) <= Least(w.Period_End, i_Period_End)
       and (i_Payment_Id is null or w.Payment_Id <> i_Payment_Id)
       and exists (select 1
              from Hpr_Sales_Bonus_Payments p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Payment_Id = w.Payment_Id
               and p.Posted = 'Y')
       and Rownum = 1;
  
    return 'Y';
  exception
    when No_Data_Found then
      return 'N';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Sales_Bonus_Payment(i_Payment_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Sales_Bonus_Payments,
                                 i_Source_Id    => i_Payment_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Oper_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Oper_Group_Id
      into result
      from Hpr_Oper_Groups
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Book_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Book_Type_Id
      into result
      from Hpr_Book_Types
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  -- execution plan algorithm should be added and taken into account
  ----------------------------------------------------------------------------------------------------
  Function Formula_Execute
  (
    i_Formula   varchar2,
    i_Arguments Matrix_Varchar2
  ) return number is
    v_Formula varchar2(32767) := i_Formula;
    result    number;
  begin
    for i in 1 .. i_Arguments.Count
    loop
      v_Formula := Regexp_Replace(v_Formula,
                                  '(\W|^)' || i_Arguments(i) (1) || '(\W|$)',
                                  '\1to_number(' || i_Arguments(i) (2) || ')\2');
    end loop;
  
    execute immediate 'begin :result := ' || v_Formula || '; end;'
      using out result;
  
    return result;
  exception
    when others then
      b.Raise_Error('execution error: ' || Fazo.Zip_Matrix(i_Arguments).Json);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Variables(i_Formula varchar2) return Array_Varchar2 is
    v_Pattern varchar2(20) := '[^-+*\/() ]+';
    result    Array_Varchar2 := Array_Varchar2();
  begin
    Result.Extend(Regexp_Count(i_Formula, v_Pattern));
  
    for i in 1 .. Result.Count
    loop
      result(i) := Regexp_Substr(i_Formula, v_Pattern, 1, i);
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  -- this function only for system oper type formula when new company added
  ----------------------------------------------------------------------------------------------------
  Function Formula_Fix
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return varchar2 is
    v_Company_Head   number := Md_Pref.c_Company_Head;
    v_Identifiers    Array_Varchar2;
    v_New_Identifier Href_Indicators.Identifier%type;
    result           Hpr_Oper_Types.Estimation_Formula%type := i_Formula;
  begin
    if i_Formula is null then
      return null;
    end if;
  
    v_Identifiers := Hpr_Util.Formula_Variables(result);
  
    Fazo.Sort_Desc(v_Identifiers);
  
    for i in 1 .. v_Identifiers.Count
    loop
      select q.Identifier
        into v_New_Identifier
        from Href_Indicators q
       where q.Company_Id = i_Company_Id
         and q.Pcode = (select w.Pcode
                          from Href_Indicators w
                         where w.Company_Id = v_Company_Head
                           and w.Identifier = v_Identifiers(i));
    
      result := Regexp_Replace(result,
                               '(\W|^)' || v_Identifiers(i) || '(\W|$)',
                               '\1' || v_New_Identifier || '\2');
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Indicators
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Matrix_Varchar2 is
    v_Indicator_Id number;
    v_Variables    Array_Varchar2;
    result         Matrix_Varchar2 := Matrix_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select t.Indicator_Id
          into v_Indicator_Id
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      
        Fazo.Push(result, Array_Varchar2(v_Indicator_Id, v_Variables(i)));
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Formula_Validate
  (
    i_Company_Id number,
    i_Formula    varchar2
  ) return Array_Varchar2 is
    v_Dummy     varchar2(1);
    v_Variables Array_Varchar2;
    v_Arguments Matrix_Varchar2;
    result      Array_Varchar2 := Array_Varchar2();
  begin
    v_Variables := Formula_Variables(i_Formula);
  
    for i in 1 .. v_Variables.Count
    loop
      begin
        select 'x'
          into v_Dummy
          from Href_Indicators t
         where t.Company_Id = i_Company_Id
           and t.Identifier = v_Variables(i);
      exception
        when No_Data_Found then
          if not Fazo.Is_Number(v_Variables(i)) then
            Fazo.Push(result, t('could not find indicator by identifier $1', v_Variables(i)));
          end if;
      end;
    end loop;
  
    -- sorting desc
    select Array_Varchar2(Column_Value, 'null')
      bulk collect
      into v_Arguments
      from table(v_Variables)
     order by Length(Column_Value) desc;
  
    if Result.Count = 0 then
      begin
        v_Dummy := Formula_Execute(i_Formula => i_Formula, i_Arguments => v_Arguments);
      exception
        when others then
          Fazo.Push(result, t('an error occurred while validating a formula calculation'));
      end;
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Overtime_Coef(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Hpr_Pref.c_Overtime_Coef),
               Hpr_Pref.c_Overtime_Coef_Default);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Constant_Indicator
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Indicator_Id number,
    i_Period       date
  ) return number is
    r_Charge        Hpr_Charges%rowtype;
    v_Wage_Scale_Id number;
    v_Rank_Id       number;
    result          number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Take(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Wage_Scale_Id := r_Charge.Wage_Scale_Id;
      v_Rank_Id       := r_Charge.Rank_Id;
    else
      v_Wage_Scale_Id := Hpd_Util.Get_Closest_Wage_Scale_Id(i_Company_Id => i_Company_Id,
                                                            i_Filial_Id  => i_Filial_Id,
                                                            i_Staff_Id   => i_Staff_Id,
                                                            i_Period     => i_Period);
    
      v_Rank_Id := Hpd_Util.Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                i_Filial_Id  => i_Filial_Id,
                                                i_Staff_Id   => i_Staff_Id,
                                                i_Period     => i_Period);
    end if;
  
    if v_Wage_Scale_Id is not null then
      result := Hrm_Util.Closest_Wage_Scale_Indicator_Value(i_Company_Id    => i_Company_Id,
                                                            i_Filial_Id     => i_Filial_Id,
                                                            i_Wage_Scale_Id => v_Wage_Scale_Id,
                                                            i_Indicator_Id  => i_Indicator_Id,
                                                            i_Period        => i_Period,
                                                            i_Rank_Id       => v_Rank_Id);
    end if;
  
    if result is null then
      result := Hpd_Util.Get_Closest_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                     i_Filial_Id    => i_Filial_Id,
                                                     i_Staff_Id     => i_Staff_Id,
                                                     i_Indicator_Id => i_Indicator_Id,
                                                     i_Period       => i_Period);
    end if;
  
    return Nvl(result, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  -- calculate wage indicator by i_begin_date
  -- as wage on vacation is calculated by first day
  ----------------------------------------------------------------------------------------------------
  Function Calc_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Charge_Id    => i_Charge_Id,
                                   i_Indicator_Id => Href_Util.Indicator_Id(i_Company_Id => i_Company_Id, --
                                                                            i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage),
                                   i_Period       => i_Begin_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Rate_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Robot Hpd_Trans_Robots%rowtype;
  begin
    r_Closest_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Staff_Id   => i_Staff_Id,
                                              i_Period     => i_End_Date);
  
    return Nvl(r_Closest_Robot.Fte, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Charge Hpr_Charges%rowtype;
  
    v_Schedule_Id  number;
    v_Oper_Type_Id number;
  
    result number;
  begin
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Charge_Id  => i_Charge_Id);
    
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                        i_Filial_Id     => i_Filial_Id,
                                                        i_Staff_Id      => i_Staff_Id,
                                                        i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                         i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                        i_Period        => i_End_Date);
  
    return Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Staff_Id     => i_Staff_Id,
                            i_Oper_Type_Id => v_Oper_Type_Id,
                            i_Schedule_Id  => v_Schedule_Id,
                            i_Part_Begin   => i_Begin_Date,
                            i_Part_End     => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    return Htt_Util.Calc_Plan_Days(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Staff_Id    => i_Staff_Id,
                                   i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                   i_Period      => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Plan_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Closest_Schedule Hpd_Trans_Schedules%rowtype;
    result             number;
  begin
    r_Closest_Schedule := Hpd_Util.Closest_Schedule(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => i_Filial_Id,
                                                    i_Staff_Id   => i_Staff_Id,
                                                    i_Period     => i_End_Date);
  
    result := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Staff_Id    => i_Staff_Id,
                                         i_Schedule_Id => r_Closest_Schedule.Schedule_Id,
                                         i_Period      => i_End_Date);
  
    return Nvl(Round(result / 60, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Working_Days(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => i_Staff_Id,
                                      i_Begin_Date => i_Begin_Date,
                                      i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Working_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    result number;
  begin
    result := Htt_Util.Calc_Working_Seconds(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Staff_Id   => i_Staff_Id,
                                            i_Begin_Date => i_Begin_Date,
                                            i_End_Date   => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    v_Seconds      number;
    result         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Seconds,
                                  o_Fact_Days    => result,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return result;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Fact_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Time_Kind_Id number;
    result         number;
    v_Days         number;
  begin
    v_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => result,
                                  o_Fact_Days    => v_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => v_Time_Kind_Id,
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Nvl(Round(result / 3600, 2), 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Performance_Data
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date
  ) return Hper_Staff_Plans%rowtype is
    r_Charge        Hpr_Charges%rowtype;
    r_Staff_Plan    Hper_Staff_Plans%rowtype;
    v_Staff_Plan_Id number;
  
    --------------------------------------------------
    Function Get_Performance return Hper_Staff_Plans%rowtype is
    begin
      select q.*
        into r_Staff_Plan
        from Hper_Staff_Plans q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Month_Begin_Date = Trunc(i_Begin_Date, 'mon')
       order by Nvl((select h.Hiring_Date
                      from Hpd_Hirings h
                     where h.Company_Id = q.Company_Id
                       and h.Filial_Id = q.Filial_Id
                       and h.Page_Id = q.Journal_Page_Id
                       and h.Hiring_Date <= i_Begin_Date),
                    (select h.Transfer_Begin
                       from Hpd_Transfers h
                      where h.Company_Id = q.Company_Id
                        and h.Filial_Id = q.Filial_Id
                        and h.Page_Id = q.Journal_Page_Id
                        and h.Transfer_Begin <= i_Begin_Date)) desc nulls last
       fetch first row only;
    
      return r_Staff_Plan;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if i_Charge_Id is null then
      return Get_Performance;
    end if;
  
    r_Charge := z_Hpr_Charges.Lock_Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Charge_Id  => i_Charge_Id);
  
    select q.Staff_Plan_Id
      into v_Staff_Plan_Id
      from Hper_Staff_Plan_Intervals q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Interval_Id = r_Charge.Interval_Id;
  
    r_Staff_Plan := z_Hper_Staff_Plans.Lock_Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Staff_Plan_Id => v_Staff_Plan_Id);
  
    return r_Staff_Plan;
  exception
    when No_Data_Found then
      return null;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Bonus_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Perf_Extra_Penalty_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    r_Staff_Plan Hper_Staff_Plans%rowtype;
  begin
    r_Staff_Plan := Load_Performance_Data(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Staff_Id   => i_Staff_Id,
                                          i_Charge_Id  => i_Charge_Id,
                                          i_Begin_Date => i_Begin_Date);
  
    return Nvl(-r_Staff_Plan.Extra_Fact_Amount, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Average_Perf
  (
    o_Main_Fact_Amount  out number,
    o_Extra_Fact_Amount out number,
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Staff_Id          number,
    i_Period            date
  ) is
    r_Staff      Href_Staffs%rowtype;
    v_Begin_Date date;
    v_End_Date   date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    v_End_Date   := i_Period;
    v_Begin_Date := Add_Months(v_End_Date, -12);
  
    v_Begin_Date := Trunc(Greatest(v_Begin_Date, r_Staff.Hiring_Date), 'mon');
    v_End_Date   := Trunc(Greatest(Least(v_End_Date, Nvl(r_Staff.Dismissal_Date, v_End_Date)),
                                   r_Staff.Hiring_Date),
                          'mon');
  
    select sum(q.Main_Fact_Amount), sum(q.Extra_Fact_Amount)
      into o_Main_Fact_Amount, o_Extra_Fact_Amount
      from Hper_Staff_Plans q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Plan_Date between v_Begin_Date and v_End_Date
       and q.Status = Hper_Pref.c_Staff_Plan_Status_Completed;
  
    o_Main_Fact_Amount  := o_Main_Fact_Amount / 12;
    o_Extra_Fact_Amount := o_Extra_Fact_Amount / 12;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perf_Bonus
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Dummy            number;
    v_Main_Fact_Amount number;
  begin
    Calc_Average_Perf(o_Main_Fact_Amount  => v_Main_Fact_Amount,
                      o_Extra_Fact_Amount => v_Dummy,
                      i_Company_Id        => i_Company_Id,
                      i_Filial_Id         => i_Filial_Id,
                      i_Staff_Id          => i_Staff_Id,
                      i_Period            => i_Begin_Date);
  
    return Nvl(v_Main_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perf_Extra_Bonus
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Dummy             number;
    v_Extra_Fact_Amount number;
  begin
    Calc_Average_Perf(o_Main_Fact_Amount  => v_Dummy,
                      o_Extra_Fact_Amount => v_Extra_Fact_Amount,
                      i_Company_Id        => i_Company_Id,
                      i_Filial_Id         => i_Filial_Id,
                      i_Staff_Id          => i_Staff_Id,
                      i_Period            => i_Begin_Date);
  
    return Nvl(v_Extra_Fact_Amount, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Coefficient_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Timeoff_Id number;
    result       number;
  begin
    begin
      select q.Timeoff_Id
        into v_Timeoff_Id
        from Hpd_Timeoff_Intervals q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Interval_Id = (select w.Interval_Id
                                from Hpr_Charges w
                               where w.Company_Id = i_Company_Id
                                 and w.Filial_Id = i_Filial_Id
                                 and w.Charge_Id = i_Charge_Id);
    exception
      when No_Data_Found then
        return 0;
    end;
  
    result := z_Hpd_Sick_Leaves.Take( --
              i_Company_Id => i_Company_Id, --
              i_Filial_Id => i_Filial_Id, --
              i_Timeoff_Id => v_Timeoff_Id).Coefficient;
  
    return Nvl(result, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Business_Trip_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Days number;
  begin
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return Nvl((i_End_Date - i_Begin_Date + 1) - v_Fact_Days, 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Vacation_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Htt_Util.Calc_Vacation_Days(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Begin_Date => i_Begin_Date,
                                       i_End_Date   => i_End_Date);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Sick_Leave_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Working_Days number;
    v_Fact_Days    number;
  begin
    v_Working_Days := Calc_Working_Days_Indicator(i_Company_Id => i_Company_Id,
                                                  i_Filial_Id  => i_Filial_Id,
                                                  i_Staff_Id   => i_Staff_Id,
                                                  i_Charge_Id  => i_Charge_Id,
                                                  i_Begin_Date => i_Begin_Date,
                                                  i_End_Date   => i_End_Date);
  
    v_Fact_Days := Htt_Util.Calc_Locked_Turnout_Days(i_Company_Id => i_Company_Id,
                                                     i_Filial_Id  => i_Filial_Id,
                                                     i_Staff_Id   => i_Staff_Id,
                                                     i_Begin_Date => i_Begin_Date,
                                                     i_End_Date   => i_End_Date);
  
    return v_Working_Days - v_Fact_Days;
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Mean_Working_Days_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_First_Day  date := Trunc(i_Begin_Date, 'y');
    v_Last_Day   date := Add_Months(v_First_Day, 12) - 1;
    v_Days_Count number := v_Last_Day - v_First_Day + 1;
  
    v_Default_Calendar_Id      number;
    v_Official_Rest_Days_Count number;
  begin
    v_Default_Calendar_Id := Htt_Util.Default_Calendar_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id);
  
    v_Official_Rest_Days_Count := Htt_Util.Official_Rest_Days_Count(i_Company_Id  => i_Company_Id,
                                                                    i_Filial_Id   => i_Filial_Id,
                                                                    i_Calendar_Id => v_Default_Calendar_Id,
                                                                    i_Begin_Date  => v_First_Day,
                                                                    i_End_Date    => v_Last_Day);
  
    return Nvl(Round((v_Days_Count - v_Official_Rest_Days_Count) / 12, 1), 0);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Hours_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Fact_Seconds number;
    v_Fact_Days    number;
  begin
    Htt_Util.Calc_Time_Kind_Facts(o_Fact_Seconds => v_Fact_Seconds,
                                  o_Fact_Days    => v_Fact_Days,
                                  i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Staff_Id     => i_Staff_Id,
                                  i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime),
                                  i_Begin_Date   => i_Begin_Date,
                                  i_End_Date     => i_End_Date);
  
    return Round(v_Fact_Seconds / 3600, 2);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Overtime_Coef_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Load_Overtime_Coef(i_Company_Id);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Policy_Id   number;
    v_Division_Id number;
    result        number;
  begin
    v_Division_Id := Hpd_Util.Get_Closest_Division_Id(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_Staff_Id   => i_Staff_Id,
                                                      i_Period     => i_End_Date);
  
    return Round(Calc_Additional_Nighttime_Amount(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Staff_Id    => i_Staff_Id,
                                                  i_Division_Id => v_Division_Id,
                                                  i_Begin_Date  => i_Begin_Date,
                                                  i_End_Date    => i_End_Date) / 3600,
                 2);
  end;

  -- Calc_Indicator_Value da oson foydalanish uchun keraksiz argumentlar input qilingan
  ----------------------------------------------------------------------------------------------------
  Function Calc_Weighted_Turnout_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
  begin
    return Round(Htt_Util.Calc_Weighted_Turnout_Seconds(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Begin_Date => i_Begin_Date,
                                                        i_End_Date   => i_End_Date) / 3600,
                 2);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Code_Gen
  (
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return varchar2 is
  begin
    if i_Charge_Id is not null then
      return i_Charge_Id;
    end if;
  
    return i_Staff_Id || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_Begin_Date, Href_Pref.c_Date_Format_Day) || --
    Href_Pref.c_Settings_Separator || --
    to_char(i_End_Date, Href_Pref.c_Date_Format_Day);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_Indicators
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Charge_Id     number,
    i_Begin_Date    date,
    i_End_Date      date,
    i_Penalty_Pcode varchar2
  ) return number is
    r_Charge      Hpr_Charges%rowtype;
    v_Hourly_Wage number := 0;
    v_Division_Id number;
    v_Schedule_Id number;
    v_Code        varchar(50);
  
    v_Oper_Type_Ids Array_Number;
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    if i_Charge_Id is not null then
      r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Charge_Id  => i_Charge_Id);
    
      v_Division_Id := r_Charge.Division_Id;
      v_Schedule_Id := r_Charge.Schedule_Id;
    else
      v_Division_Id := Hpd_Util.Get_Closest_Division_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_End_Date);
    end if;
  
    v_Oper_Type_Ids := Hpd_Util.Get_Closest_Oper_Type_Ids(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => Oper_Group_Id(i_Company_Id => i_Company_Id,
                                                                                           i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage),
                                                          i_Period        => i_End_Date);
  
    for i in 1 .. v_Oper_Type_Ids.Count
    loop
      v_Hourly_Wage := v_Hourly_Wage +
                       Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Ids(i),
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => i_Begin_Date,
                                        i_Part_End     => i_End_Date);
    end loop;
  
    Calc_Penalty_Amounts(o_Late_Amount      => g_Cache_Late_Amount(v_Code),
                         o_Early_Amount     => g_Cache_Early_Amount(v_Code),
                         o_Lack_Amount      => g_Cache_Lack_Amount(v_Code),
                         o_Day_Skip_Amount  => g_Cache_Day_Skip_Amount(v_Code),
                         o_Mark_Skip_Amount => g_Cache_Mark_Skip_Amount(v_Code),
                         i_Company_Id       => i_Company_Id,
                         i_Filial_Id        => i_Filial_Id,
                         i_Staff_Id         => i_Staff_Id,
                         i_Division_Id      => v_Division_Id,
                         i_Hourly_Wage      => v_Hourly_Wage,
                         i_Period_Begin     => i_Begin_Date,
                         i_Period_End       => i_End_Date);
  
    case i_Penalty_Pcode
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then
        return g_Cache_Late_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then
        return g_Cache_Early_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then
        return g_Cache_Lack_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then
        return g_Cache_Day_Skip_Amount(v_Code);
      when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then
        return g_Cache_Mark_Skip_Amount(v_Code);
      else
        return null;
    end case;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Late_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Late_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Late);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Early_Output_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Early_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Absence_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Lack_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Absence);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Day_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Day_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Penalty_For_Mark_Skip_Indicator
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Code varchar(50);
  begin
    v_Code := Code_Gen(i_Staff_Id   => i_Staff_Id,
                       i_Charge_Id  => i_Charge_Id,
                       i_Begin_Date => i_Begin_Date,
                       i_End_Date   => i_End_Date);
  
    return g_Cache_Mark_Skip_Amount(v_Code);
  
  exception
    when No_Data_Found then
      return Calc_Penalty_Indicators(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Staff_Id      => i_Staff_Id,
                                     i_Charge_Id     => i_Charge_Id,
                                     i_Begin_Date    => i_Begin_Date,
                                     i_End_Date      => i_End_Date,
                                     i_Penalty_Pcode => Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Completed_Exam_Score
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Exam_Id    number,
    i_Period     date
  ) return number is
    r_Staff       Href_Staffs%rowtype;
    r_Exam        Hln_Exams%rowtype;
    v_Correct_Cnt number;
  begin
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    r_Exam := z_Hln_Exams.Take(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Exam_Id    => i_Exam_Id);
  
    if r_Exam.Question_Count = 0 then
      return 0;
    end if;
  
    begin
      select q.Correct_Questions_Count
        into v_Correct_Cnt
        from Hln_Testings q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Exam_Id = i_Exam_Id
         and q.Person_Id = r_Staff.Employee_Id
         and q.Status = Hln_Pref.c_Testing_Status_Finished
         and q.Testing_Date <= i_Period
       order by q.Testing_Date desc, q.Fact_Begin_Time desc
       fetch first row only;
    exception
      when No_Data_Found then
        v_Correct_Cnt := 0;
    end;
  
    return Nvl(v_Correct_Cnt / r_Exam.Question_Count * 100, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Completed_Training_Subjects
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date,
    i_Subject_Ids Array_Number
  ) return number is
    r_Staff Href_Staffs%rowtype;
  
    v_Passed_Cnt number;
  begin
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if i_Subject_Ids is null or i_Subject_Ids.Count = 0 then
      return 0;
    end if;
  
    select count(distinct q.Subject_Id)
      into v_Passed_Cnt
      from Hln_Training_Person_Subjects q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Person_Id = r_Staff.Employee_Id
       and q.Subject_Id member of i_Subject_Ids
       and q.Passed = 'Y'
       and exists (select 1
              from Hln_Trainings p
             where p.Company_Id = q.Company_Id
               and p.Filial_Id = q.Filial_Id
               and p.Training_Id = q.Training_Id
               and p.Begin_Date between i_Begin_Date and i_End_Date
               and p.Status = Hln_Pref.c_Training_Status_Finished);
  
    return Nvl(v_Passed_Cnt / i_Subject_Ids.Count * 100, 0);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Calc_Average_Attendance_Percentage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Turnout_Tk_Ids Array_Number;
    v_Fact_Cnt       number;
    v_Days_Cnt       number;
  begin
    v_Turnout_Tk_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                          i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    select count(case
                    when exists (select *
                            from Htt_Timesheet_Facts Tf
                           where Tf.Company_Id = q.Company_Id
                             and Tf.Filial_Id = q.Filial_Id
                             and Tf.Timesheet_Id = q.Timesheet_Id
                             and Tf.Time_Kind_Id member of v_Turnout_Tk_Ids
                             and Tf.Fact_Value > 0) then
                     1
                    else
                     null
                  end),
           count(*)
      into v_Fact_Cnt, v_Days_Cnt
      from Htt_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date between i_Begin_Date and i_End_Date
       and q.Day_Kind = Htt_Pref.c_Day_Kind_Work;
  
    if v_Days_Cnt is null or v_Days_Cnt = 0 then
      return 0;
    end if;
  
    return Nvl(v_Fact_Cnt / v_Days_Cnt * 100, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Average_Perfomance_Percentage
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number,
    i_Begin_Date date,
    i_End_Date   date
  ) return number is
    v_Begin_Date date := Trunc(i_Begin_Date);
    v_End_Date   date := Last_Day(i_End_Date);
    result       number;
  begin
    select avg(q.Main_Fact_Percent)
      into result
      from Hper_Staff_Plans q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Plan_Date between v_Begin_Date and v_End_Date
       and q.Status = Hper_Pref.c_Staff_Plan_Status_Completed;
  
    return Nvl(result, 0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Procedures(i_Pcode varchar2) return varchar2 is
  begin
    return --
    case i_Pcode --
    when Href_Pref.c_Pcode_Indicator_Wage then 'hpr_util.calc_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Rate then 'hpr_util.calc_rate_indicator' --
    when Href_Pref.c_Pcode_Indicator_Hourly_Wage then 'hpr_util.calc_hourly_wage_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Days then 'hpr_util.calc_plan_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Plan_Hours then 'hpr_util.calc_plan_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Days then 'hpr_util.calc_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Working_Hours then 'hpr_util.calc_working_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Days then 'hpr_util.calc_fact_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Fact_Hours then 'hpr_util.calc_fact_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Bonus then 'hpr_util.calc_perf_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Bonus then 'hpr_util.calc_perf_extra_bonus_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Coefficient then 'hpr_util.calc_sick_leave_coefficient_indicator' --
    when Href_Pref.c_Pcode_Indicator_Business_Trip_Days then 'hpr_util.calc_business_trip_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Vacation_Days then 'hpr_util.calc_vacation_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Mean_Working_Days then 'hpr_util.calc_mean_working_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Sick_Leave_Days then 'hpr_util.calc_sick_leave_days_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Hours then 'hpr_util.calc_overtime_hours_indicator' --
    when Href_Pref.c_Pcode_Indicator_Overtime_Coef then 'hpr_util.calc_overtime_coef_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Late then 'hpr_util.calc_penalty_for_late_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Early_Output then 'hpr_util.calc_penalty_for_early_output_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Absence then 'hpr_util.calc_penalty_for_absence_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Day_Skip then 'hpr_util.calc_penalty_for_day_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Penalty_For_Mark_Skip then 'hpr_util.calc_penalty_for_mark_skip_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Penalty then 'hpr_util.calc_perf_penalty_indicator' --
    when Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty then 'hpr_util.calc_perf_extra_penalty_indicator' --
    when Href_Pref.c_Pcode_Indicator_Additional_Nighttime then 'hpr_util.calc_additional_nighttime_indicator' --
    when Href_Pref.c_Pcode_Indicator_Weighted_Turnout then 'hpr_util.calc_weighted_turnout_indicator' --
    when Href_Pref.c_Pcode_Indicator_Average_Perf_Bonus then 'hpr_util.calc_average_perf_bonus' --
    when Href_Pref.c_Pcode_Indicator_Average_Perf_Extra_Bonus then 'hpr_util.calc_average_perf_extra_bonus' --
    when Href_Pref.c_Pcode_Indicator_Average_Attendance_Percentage then 'hpr_util.calc_average_attendance_percentage' --
    when Href_Pref.c_Pcode_Indicator_Average_Perfomance_Percentage then 'hpr_util.calc_average_perfomance_percentage' --
    else null end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Indicator_Value
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Charge_Id    number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Indicator_Id number,
    i_Exam_Id      number := null,
    i_Subject_Ids  Array_Number := null
  ) return number is
    v_Proc      varchar2(100);
    r_Indicator Href_Indicators%rowtype;
    result      number;
  
    --------------------------------------------------
    Function Convert_Indicator_Amount
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Staff_Id   number,
      i_Indicator  Href_Indicators%rowtype,
      i_Period     date,
      i_Amount     number
    ) return number is
      v_Currency_Id          number;
      v_Wage_Indicator_Group number;
    begin
      if i_Indicator.Used != Href_Pref.c_Indicator_Used_Constantly and
         i_Indicator.Pcode not in
         (Href_Pref.c_Pcode_Indicator_Perf_Penalty, Href_Pref.c_Pcode_Indicator_Perf_Extra_Penalty) then
        return i_Amount;
      end if;
    
      v_Wage_Indicator_Group := Href_Util.Indicator_Group_Id(i_Company_Id => i_Company_Id,
                                                             i_Pcode      => Href_Pref.c_Pcode_Indicator_Group_Wage);
    
      if i_Indicator.Indicator_Group_Id <> v_Wage_Indicator_Group then
        return i_Amount;
      end if;
    
      v_Currency_Id := Hpd_Util.Get_Closest_Currency_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => i_Period);
    
      if v_Currency_Id is null then
        return i_Amount;
      end if;
    
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Period,
                                      i_Amount      => i_Amount);
    end;
  begin
    r_Indicator := z_Href_Indicators.Load(i_Company_Id   => i_Company_Id, --
                                          i_Indicator_Id => i_Indicator_Id);
  
    v_Proc := Indicator_Procedures(r_Indicator.Pcode);
  
    if v_Proc is not null then
      execute immediate 'declare begin :result := ' || v_Proc ||
                        '(:company_id, :filial_id, :staff_id, :charge_id, :begin_date, :end_date); end;'
        using out result, i_Company_Id, i_Filial_Id, i_Staff_Id, i_Charge_Id, i_Begin_Date, i_End_Date;
    elsif r_Indicator.Pcode = Href_Pref.c_Pcode_Indicator_Trainings_Subjects then
      return Calc_Completed_Training_Subjects(i_Company_Id  => i_Company_Id,
                                              i_Filial_Id   => i_Filial_Id,
                                              i_Staff_Id    => i_Staff_Id,
                                              i_Begin_Date  => i_Begin_Date,
                                              i_End_Date    => i_End_Date,
                                              i_Subject_Ids => i_Subject_Ids);
    elsif r_Indicator.Pcode = Href_Pref.c_Pcode_Indicator_Exam_Results then
      return Calc_Completed_Exam_Score(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Exam_Id    => i_Exam_Id,
                                       i_Period     => i_End_Date);
    else
      result := Calc_Constant_Indicator(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Charge_Id    => i_Charge_Id,
                                        i_Indicator_Id => i_Indicator_Id,
                                        i_Period       => i_End_Date);
    end if;
  
    result := Convert_Indicator_Amount(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id,
                                       i_Indicator  => r_Indicator,
                                       i_Period     => i_End_Date,
                                       i_Amount     => result);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Hourly_Wage
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Schedule_Id  number,
    i_Part_Begin   date,
    i_Part_End     date
  ) return number is
    v_Monthly_Amount  number;
    v_Monthly_Minutes number;
  begin
    v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Staff_Id     => i_Staff_Id,
                                    i_Oper_Type_Id => i_Oper_Type_Id,
                                    i_Part_Begin   => i_Part_Begin,
                                    i_Part_End     => i_Part_End,
                                    i_Calc_Planned => true);
  
    v_Monthly_Minutes := Htt_Util.Calc_Plan_Minutes(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => i_Schedule_Id,
                                                    i_Period      => i_Part_End);
  
    return v_Monthly_Amount / v_Monthly_Minutes * 60;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Charge_Id  number
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    r_Charge    Hpr_Charges%rowtype;
    v_Arguments Matrix_Varchar2;
  begin
    r_Charge := z_Hpr_Charges.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Charge_Id  => i_Charge_Id);
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => r_Charge.Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    select Array_Varchar2(w.Identifier, q.Indicator_Value)
      bulk collect
      into v_Arguments
      from Hpr_Charge_Indicators q
      join Href_Indicators w
        on w.Company_Id = q.Company_Id
       and w.Indicator_Id = q.Indicator_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Charge_Id = i_Charge_Id
     order by Length(w.Identifier) desc;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Amount_With_Indicators
  (
    o_Indicators   out Hpr_Pref.Daily_Indicators_Nt,
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number is
    r_Oper_Type Hpr_Oper_Types%rowtype;
    v_Arguments Matrix_Varchar2 := Matrix_Varchar2();
  
    v_Indicator_Id    number;
    v_Indicator_Value number;
  
    v_Fact_Hours_Id     number := -1;
    v_Weighted_Hours_Id number := -1;
    v_Fact_Days_Id      number := -1;
    v_Plan_Hours_Id     number := -1;
    v_Plan_Days_Id      number := -1;
    v_Worked_Hours_Id   number := -1;
    v_Worked_Days_Id    number := -1;
  
    --------------------------------------------------
    Procedure Load_Indicator_Ids is
    begin
      v_Fact_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Hours);
    
      v_Weighted_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Href_Pref.c_Pcode_Indicator_Weighted_Turnout);
    
      v_Fact_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                               i_Pcode      => Href_Pref.c_Pcode_Indicator_Fact_Days);
    
      if i_Calc_Planned then
        v_Plan_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                  i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Hours);
      
        v_Plan_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                 i_Pcode      => Href_Pref.c_Pcode_Indicator_Plan_Days);
      end if;
    
      if i_Calc_Worked then
        v_Worked_Hours_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                    i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Hours);
      
        v_Worked_Days_Id := Href_Util.Indicator_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Href_Pref.c_Pcode_Indicator_Working_Days);
      end if;
    end;
  
    --------------------------------------------------
    Function Replaced_Indicator_Id(i_Indicator_Id number) return number is
    begin
      case
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Planned then
          return v_Plan_Hours_Id;
        when i_Indicator_Id = v_Weighted_Hours_Id and i_Calc_Planned then
          return v_Plan_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Planned then
          return v_Plan_Days_Id;
        when i_Indicator_Id = v_Fact_Hours_Id and i_Calc_Worked then
          return v_Worked_Hours_Id;
        when i_Indicator_Id = v_Weighted_Hours_Id and i_Calc_Worked then
          return v_Worked_Hours_Id;
        when i_Indicator_Id = v_Fact_Days_Id and i_Calc_Worked then
          return v_Worked_Days_Id;
        else
          null;
      end case;
    
      return i_Indicator_Id;
    end;
  begin
    if i_Oper_Type_Id is null then
      return 0;
    end if;
  
    r_Oper_Type := z_Hpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    if r_Oper_Type.Estimation_Type <> Hpr_Pref.c_Estimation_Type_Formula then
      return 0;
    end if;
  
    if i_Calc_Planned or i_Calc_Worked then
      Load_Indicator_Ids;
    end if;
  
    o_Indicators := Hpr_Pref.Daily_Indicators_Nt();
  
    for r in (select q.Indicator_Id, q.Identifier
                from Hpr_Oper_Type_Indicators q
               where q.Company_Id = i_Company_Id
                 and q.Oper_Type_Id = i_Oper_Type_Id)
    loop
      v_Indicator_Id := r.Indicator_Id;
    
      if (i_Calc_Planned or i_Calc_Worked) and
         v_Indicator_Id in (v_Fact_Hours_Id, v_Fact_Days_Id, v_Weighted_Hours_Id) then
        v_Indicator_Id := Replaced_Indicator_Id(v_Indicator_Id);
      end if;
    
      v_Indicator_Value := Calc_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                i_Filial_Id    => i_Filial_Id,
                                                i_Staff_Id     => i_Staff_Id,
                                                i_Charge_Id    => null,
                                                i_Begin_Date   => i_Part_Begin,
                                                i_End_Date     => i_Part_End,
                                                i_Indicator_Id => v_Indicator_Id);
    
      Fazo.Push(v_Arguments, Array_Varchar2(r.Identifier, v_Indicator_Value));
    
      o_Indicators.Extend;
      o_Indicators(o_Indicators.Count) := Hpr_Pref.Daily_Indicators_Rt(r.Indicator_Id,
                                                                       v_Indicator_Value);
    end loop;
  
    return Formula_Execute(i_Formula   => r_Oper_Type.Estimation_Formula, --
                           i_Arguments => v_Arguments);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Calc_Amount
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Oper_Type_Id number,
    i_Part_Begin   date,
    i_Part_End     date,
    i_Calc_Planned boolean := false,
    i_Calc_Worked  boolean := false
  ) return number is
    v_Dummy Hpr_Pref.Daily_Indicators_Nt;
  begin
    return Calc_Amount_With_Indicators(o_Indicators   => v_Dummy,
                                       i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Staff_Id     => i_Staff_Id,
                                       i_Oper_Type_Id => i_Oper_Type_Id,
                                       i_Part_Begin   => i_Part_Begin,
                                       i_Part_End     => i_Part_End,
                                       i_Calc_Planned => i_Calc_Planned,
                                       i_Calc_Worked  => i_Calc_Worked);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Amounts
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Currency_Id            number,
    i_Date                   date,
    i_Oper_Type_Id           number,
    i_Amount                 number,
    i_Is_Net_Amount          boolean,
    o_Amount                 out number,
    o_Net_Amount             out number,
    o_Income_Tax_Amount      out number,
    o_Pension_Payment_Amount out number,
    o_Social_Payment_Amount  out number
  ) is
    r_Oper_Type   Mpr_Oper_Types%rowtype;
    r_Setting     Mpr_Settings%rowtype;
    v_Currency_Id number := i_Currency_Id;
    --------------------------------------------------
    Function Round_Amount(i_Val number) return number is
    begin
      return Mk_Util.Round_Amount(i_Company_Id  => i_Company_Id,
                                  i_Currency_Id => v_Currency_Id,
                                  i_Amount      => i_Val);
    end;
    --------------------------------------------------
    Function Calc_Base_Amount(i_Val number) return number is
    begin
      return Mk_Util.Calc_Amount_Base(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Currency_Id => v_Currency_Id,
                                      i_Rate_Date   => i_Date,
                                      i_Amount      => i_Val);
    end;
  begin
    r_Oper_Type := z_Mpr_Oper_Types.Load(i_Company_Id   => i_Company_Id,
                                         i_Oper_Type_Id => i_Oper_Type_Id);
  
    r_Setting := z_Mpr_Settings.Load(i_Company_Id => i_Company_Id, --
                                     i_Filial_Id  => i_Filial_Id);
  
    if i_Currency_Id is null then
      v_Currency_Id := Mk_Pref.Base_Currency(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id);
    end if;
  
    o_Amount                 := Round_Amount(i_Amount);
    o_Net_Amount             := Round_Amount(i_Amount);
    o_Income_Tax_Amount      := 0;
    o_Pension_Payment_Amount := 0;
    o_Social_Payment_Amount  := 0;
  
    if r_Setting.Income_Tax_Exists = 'Y' and r_Oper_Type.Income_Tax_Exists = 'Y' then
      if i_Is_Net_Amount then
        o_Amount := Round_Amount(o_Net_Amount * 100 /
                                 (100 - Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate)));
      else
        o_Net_Amount := o_Amount -
                        Round_Amount(o_Amount *
                                     Nvl(r_Oper_Type.Income_Tax_Rate, r_Setting.Income_Tax_Rate) / 100);
      end if;
    
      o_Income_Tax_Amount := Round_Amount((o_Amount * Nvl(r_Oper_Type.Income_Tax_Rate,
                                                          r_Setting.Income_Tax_Rate) / 100));
    
      if r_Setting.Pension_Payment_Exists = 'Y' and r_Oper_Type.Pension_Payment_Exists = 'Y' then
        o_Pension_Payment_Amount := Round_Amount((o_Amount *
                                                 Nvl(r_Oper_Type.Pension_Payment_Rate,
                                                      r_Setting.Pension_Payment_Rate) / 100));
      
      end if;
    end if;
  
    if r_Setting.Social_Payment_Exists = 'Y' and r_Oper_Type.Social_Payment_Exists = 'Y' then
      o_Social_Payment_Amount := Round_Amount((o_Amount *
                                              Nvl(r_Oper_Type.Social_Payment_Rate,
                                                   r_Setting.Social_Payment_Rate) / 100));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculates penalty for (begin, end) period
  -- ignores policy changes between (begin, end)
  -- takes policy closest to period_begin date
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amount
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    o_Day_Amounts      out nocopy Matrix_Number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Late_Id        number;
    v_Early_Id       number;
    v_Lack_Id        number;
    v_Time_Kind_Id   number;
    v_Penalty_Id     number;
    v_Days_Cnt       number;
    v_Penalty_Amount number;
    v_Policy         Hpr_Pref.Penalty_Policy_Rt;
    v_Policies       Hpr_Pref.Penalty_Policy_Nt;
  
    v_Fact_Tk_Id    number;
    v_Fact_Value    number;
    v_Plan_Time     number;
    v_Input_Time    date;
    v_Output_Time   date;
    v_Input_Times   Array_Date;
    v_Output_Times  Array_Date;
    v_Fact_Date     date;
    v_Fact_Dates    Array_Date;
    v_Mark_Dates    Array_Date;
    v_Skipped_Marks Array_Number;
    v_Facts         Matrix_Number;
  
    v_Wage_Per_Minute number := i_Hourly_Wage / 60;
  
    --------------------------------------------------
    Procedure Init_Day_Amounts is
      v_Count number;
    begin
      o_Day_Amounts := Matrix_Number();
      v_Count       := i_Period_End - Trunc(i_Period_Begin, 'Mon') + 1;
    
      o_Day_Amounts.Extend(v_Count);
    
      for i in 1 .. v_Count
      loop
        o_Day_Amounts(i) := Array_Number(0, 0, 0, 0, 0);
      end loop;
    end;
  
    --------------------------------------------------
    Function Day_Index(i_Date date) return number is
    begin
      return i_Date - Trunc(i_Period_Begin, 'Mon') + 1;
    end;
  
    --------------------------------------------------
    Function To_Minutes(i_Sec number) return number is
    begin
      return Round(i_Sec / 60, 2);
    end;
  
    --------------------------------------------------
    Function Get_Tk_Id(i_Penalty_Kind varchar2) return number is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          return v_Late_Id;
        when Hpr_Pref.c_Penalty_Kind_Early then
          return v_Early_Id;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          return v_Lack_Id;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          return v_Lack_Id;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Function Calc_Amount
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Wage_Per_Minute number,
      i_Facts_Value     number
    ) return number is
      v_Calc_After_From_Time boolean := Nvl(i_Policy.Calc_After_From_Time, 'N') = 'Y';
    begin
      case i_Policy.Penalty_Type
        when Hpr_Pref.c_Penalty_Type_Coef then
          if v_Calc_After_From_Time then
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value - i_Policy.From_Time) * i_Policy.Penalty_Coef;
          else
            return i_Wage_Per_Minute * To_Minutes(i_Facts_Value) * i_Policy.Penalty_Coef;
          end if;
        when Hpr_Pref.c_Penalty_Type_Amount then
          if i_Policy.Penalty_Per_Time is null then
            return i_Policy.Penalty_Amount;
          else
            if v_Calc_After_From_Time then
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value - i_Policy.From_Time) /
                                                     i_Policy.Penalty_Per_Time);
            else
              return i_Policy.Penalty_Amount * Trunc(To_Minutes(i_Facts_Value) /
                                                     i_Policy.Penalty_Per_Time);
            end if;
          end if;
        when Hpr_Pref.c_Penalty_Type_Time then
          return i_Wage_Per_Minute * i_Policy.Penalty_Time;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Policy          Hpr_Pref.Penalty_Policy_Rt,
      i_Penalty_Amount  number,
      i_Day_Index       number,
      p_Late_Amount     in out number,
      p_Early_Amount    in out number,
      p_Lack_Amount     in out number,
      p_Day_Skip_Amount in out number
    ) is
    begin
      case i_Policy.Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Late then
          p_Late_Amount := p_Late_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(1) := o_Day_Amounts(i_Day_Index) (1) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Early then
          p_Early_Amount := p_Early_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(2) := o_Day_Amounts(i_Day_Index) (2) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Lack then
          p_Lack_Amount := p_Lack_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(3) := o_Day_Amounts(i_Day_Index) (3) + i_Penalty_Amount;
        when Hpr_Pref.c_Penalty_Kind_Day_Skip then
          p_Day_Skip_Amount := p_Day_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(4) := o_Day_Amounts(i_Day_Index) (4) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  
    --------------------------------------------------
    Procedure Add_Amounts
    (
      i_Penalty_Kind     varchar2,
      i_Penalty_Amount   number,
      i_Day_Index        number,
      p_Mark_Skip_Amount in out number
    ) is
    begin
      case i_Penalty_Kind
        when Hpr_Pref.c_Penalty_Kind_Mark_Skip then
          p_Mark_Skip_Amount := p_Mark_Skip_Amount + i_Penalty_Amount;
        
          o_Day_Amounts(i_Day_Index)(5) := o_Day_Amounts(i_Day_Index) (5) + i_Penalty_Amount;
        else
          b.Raise_Not_Implemented;
      end case;
    end;
  begin
    o_Late_Amount      := 0;
    o_Early_Amount     := 0;
    o_Lack_Amount      := 0;
    o_Day_Skip_Amount  := 0;
    o_Mark_Skip_Amount := 0;
  
    v_Late_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late);
  
    v_Early_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                        i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early);
  
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Penalty_Id := Get_Closest_Penalty_Id(i_Company_Id  => i_Company_Id,
                                           i_Filial_Id   => i_Filial_Id,
                                           i_Division_Id => i_Division_Id,
                                           i_Period      => i_Period_Begin);
  
    select Pp.Penalty_Kind,
           case
              when Pp.Penalty_Coef is not null then
               Hpr_Pref.c_Penalty_Type_Coef
              when Pp.Penalty_Amount is not null then
               Hpr_Pref.c_Penalty_Type_Amount
              when Pp.Penalty_Time is not null then
               Hpr_Pref.c_Penalty_Type_Time
            end case,
           Pp.From_Day,
           Pp.To_Day,
           Pp.From_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.To_Time * case
              when Pp.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
               1 -- to times
              else
               60 -- to seconds
            end,
           Pp.Penalty_Coef,
           Pp.Penalty_Per_Time,
           Pp.Penalty_Amount,
           Pp.Penalty_Time,
           Pp.Calc_After_From_Time
      bulk collect
      into v_Policies
      from Hpr_Penalty_Policies Pp
     where Pp.Company_Id = i_Company_Id
       and Pp.Filial_Id = i_Filial_Id
       and Pp.Penalty_Id = v_Penalty_Id;
  
    select p.Timesheet_Date, --
           p.Input_Time, --
           p.Output_Time, --
           Array_Number(Tf.Time_Kind_Id, Tf.Fact_Value, p.Plan_Time)
      bulk collect
      into v_Fact_Dates, v_Input_Times, v_Output_Times, v_Facts
      from Htt_Timesheets p
      join Htt_Timesheet_Facts Tf
        on Tf.Company_Id = p.Company_Id
       and Tf.Filial_Id = p.Filial_Id
       and Tf.Timesheet_Id = p.Timesheet_Id
       and Tf.Time_Kind_Id in (v_Late_Id, v_Early_Id, v_Lack_Id)
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between Trunc(i_Period_Begin, 'Mon') and i_Period_End
     order by p.Timesheet_Date, Tf.Time_Kind_Id;
  
    select p.Planned_Marks - p.Done_Marks, p.Timesheet_Date
      bulk collect
      into v_Skipped_Marks, v_Mark_Dates
      from Htt_Timesheets p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id
       and p.Staff_Id = i_Staff_Id
       and p.Timesheet_Date between i_Period_Begin and i_Period_End
       and p.Day_Kind = Htt_Pref.c_Day_Kind_Work
       and p.Planned_Marks > p.Done_Marks;
  
    Init_Day_Amounts;
  
    for i in 1 .. v_Policies.Count
    loop
      v_Policy := v_Policies(i);
    
      v_Days_Cnt := 0;
    
      if v_Policy.Penalty_Kind = Hpr_Pref.c_Penalty_Kind_Mark_Skip then
        for j in 1 .. v_Skipped_Marks.Count
        loop
          if v_Skipped_Marks(j) > v_Policy.From_Time and --
             v_Skipped_Marks(j) <= Nvl(v_Policy.To_Time, v_Skipped_Marks(j)) then
            Add_Amounts(i_Penalty_Kind     => v_Policy.Penalty_Kind,
                        i_Penalty_Amount   => v_Policy.Penalty_Amount,
                        i_Day_Index        => Day_Index(v_Mark_Dates(j)),
                        p_Mark_Skip_Amount => o_Mark_Skip_Amount);
          end if;
        end loop;
      else
        v_Time_Kind_Id := Get_Tk_Id(v_Policy.Penalty_Kind);
      
        for j in 1 .. v_Facts.Count
        loop
          v_Fact_Tk_Id  := v_Facts(j) (1);
          v_Fact_Value  := v_Facts(j) (2);
          v_Plan_Time   := v_Facts(j) (3);
          v_Input_Time  := v_Input_Times(j);
          v_Output_Time := v_Output_Times(j);
          v_Fact_Date   := v_Fact_Dates(j);
        
          continue when v_Fact_Tk_Id <> v_Time_Kind_Id;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Input_Time is not null and v_Output_Time is not null;
        
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value = v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Day_Skip;
          continue when v_Fact_Tk_Id = v_Lack_Id and v_Fact_Value <> v_Plan_Time and v_Policy.Penalty_Kind <> Hpr_Pref.c_Penalty_Kind_Lack;
        
          if v_Fact_Value > v_Policy.From_Time and
             v_Fact_Value <= Nvl(v_Policy.To_Time, v_Fact_Value) then
            v_Days_Cnt := v_Days_Cnt + 1;
          
            if v_Fact_Date between i_Period_Begin and i_Period_End then
              v_Penalty_Amount := Calc_Amount(i_Policy          => v_Policy,
                                              i_Wage_Per_Minute => v_Wage_Per_Minute,
                                              i_Facts_Value     => v_Fact_Value);
            
              if v_Days_Cnt > v_Policy.From_Day and --
                 v_Days_Cnt <= Nvl(v_Policy.To_Day, v_Days_Cnt) then
                Add_Amounts(i_Policy          => v_Policy,
                            i_Penalty_Amount  => v_Penalty_Amount,
                            i_Day_Index       => Day_Index(v_Fact_Date),
                            p_Late_Amount     => o_Late_Amount,
                            p_Early_Amount    => o_Early_Amount,
                            p_Lack_Amount     => o_Lack_Amount,
                            p_Day_Skip_Amount => o_Day_Skip_Amount);
              end if;
            end if;
          end if;
        end loop;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Daily_Penalty_Amounts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Division_Id  number,
    i_Hourly_Wage  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Matrix_Number is
    v_Dummy_Late      number;
    v_Dummy_Early     number;
    v_Dummy_Lack      number;
    v_Dummy_Day_Skip  number;
    v_Dummy_Mark_Skip number;
    v_Daily_Amounts   Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => v_Dummy_Late,
                        o_Early_Amount     => v_Dummy_Early,
                        o_Lack_Amount      => v_Dummy_Lack,
                        o_Day_Skip_Amount  => v_Dummy_Day_Skip,
                        o_Mark_Skip_Amount => v_Dummy_Mark_Skip,
                        o_Day_Amounts      => v_Daily_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  
    return v_Daily_Amounts;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Nighttime_Policy_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number is
    v_Policy_Id number;
  begin
    select q.Nighttime_Policy_Id
      into v_Policy_Id
      from Hpr_Nighttime_Policies q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Month = (select max(p.Month)
                        from Hpr_Nighttime_Policies p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Month <= Trunc(i_Period, 'mon')
                         and p.Division_Id = i_Division_Id
                         and p.State = 'A')
       and q.Division_Id = i_Division_Id
       and q.State = 'A';
  
    return v_Policy_Id;
  
  exception
    when No_Data_Found then
      begin
        select q.Nighttime_Policy_Id
          into v_Policy_Id
          from Hpr_Nighttime_Policies q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Month = (select max(p.Month)
                            from Hpr_Nighttime_Policies p
                           where p.Company_Id = i_Company_Id
                             and p.Filial_Id = i_Filial_Id
                             and p.Month <= Trunc(i_Period, 'mon')
                             and p.Division_Id is null
                             and p.State = 'A')
           and q.Division_Id is null
           and q.State = 'A';
      
        return v_Policy_Id;
      
      exception
        when No_Data_Found then
          return null;
      end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Additional_Nighttime_Amount
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Division_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) return number is
    v_Policy_Id number;
    result      number;
  begin
    v_Policy_Id := Get_Closest_Nighttime_Policy_Id(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Division_Id => i_Division_Id,
                                                   i_Period      => i_End_Date);
  
    select Nvl(sum((t.Nighttime_Coef - 1) *
                   Round(86400 * (t.Intersection_End - t.Intersection_Begin), 2)),
               0)
      into result
      from (select Nr.Nighttime_Coef,
                   Least(i.Interval_End, t.Interval_Date + Numtodsinterval(Nr.End_Time, 'minute')) Intersection_End,
                   Greatest(i.Interval_Begin,
                            t.Interval_Date + Numtodsinterval(Nr.Begin_Time, 'minute')) Intersection_Begin
              from Htt_Timesheets q
              join Htt_Timesheet_Helpers t
                on t.Company_Id = q.Company_Id
               and t.Filial_Id = q.Filial_Id
               and t.Timesheet_Id = q.Timesheet_Id
              join Htt_Timesheet_Intervals i
                on i.Company_Id = q.Company_Id
               and i.Filial_Id = q.Filial_Id
               and i.Timesheet_Id = q.Timesheet_Id
              join Hpr_Nighttime_Rules Nr
                on Nr.Company_Id = q.Company_Id
               and Nr.Filial_Id = q.Filial_Id
               and Nr.Nighttime_Policy_Id = v_Policy_Id
               and Greatest(t.Interval_Date + Numtodsinterval(Nr.Begin_Time, 'minute'),
                            i.Interval_Begin) <
                   Least(t.Interval_Date + Numtodsinterval(Nr.End_Time, 'minute'), i.Interval_End)
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Staff_Id = i_Staff_Id
               and q.Timesheet_Date between i_Begin_Date and i_End_Date) t;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Penalty_Amounts
  (
    o_Late_Amount      out number,
    o_Early_Amount     out number,
    o_Lack_Amount      out number,
    o_Day_Skip_Amount  out number,
    o_Mark_Skip_Amount out number,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Staff_Id         number,
    i_Division_Id      number,
    i_Hourly_Wage      number,
    i_Period_Begin     date,
    i_Period_End       date
  ) is
    v_Dummy_Amounts Matrix_Number;
  begin
    Calc_Penalty_Amount(o_Late_Amount      => o_Late_Amount,
                        o_Early_Amount     => o_Early_Amount,
                        o_Lack_Amount      => o_Lack_Amount,
                        o_Day_Skip_Amount  => o_Day_Skip_Amount,
                        o_Mark_Skip_Amount => o_Mark_Skip_Amount,
                        o_Day_Amounts      => v_Dummy_Amounts,
                        i_Company_Id       => i_Company_Id,
                        i_Filial_Id        => i_Filial_Id,
                        i_Staff_Id         => i_Staff_Id,
                        i_Division_Id      => i_Division_Id,
                        i_Hourly_Wage      => i_Hourly_Wage,
                        i_Period_Begin     => i_Period_Begin,
                        i_Period_End       => i_Period_End);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Calc_Staff_Parts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date,
    i_Round_Model  Round_Model
  ) return Hpr_Pref.Sheet_Part_Nt is
    v_Overtime_Type_Id  number;
    v_Nighttime_Type_Id number;
    v_Weighted_Type_Id  number;
    v_Oper_Type_Id      number;
    v_Oper_Group_Id     number;
    v_Schedule_Id       number;
    v_Monthly_Amount    number;
    v_Plan_Amount       number;
    v_Wage_Amount       number;
    v_Overtime_Amount   number;
    v_Nighttime_Amount  number;
    v_Late_Amount       number;
    v_Early_Amount      number;
    v_Lack_Amount       number;
    v_Day_Skip_Amount   number;
    v_Mark_Skip_Amount  number;
    v_Hourly_Wage       number;
    r_Robot             Hpd_Trans_Robots%rowtype;
    v_Trans_Parts       Hpd_Pref.Transaction_Part_Nt;
    v_Sheet_Parts       Hpr_Pref.Sheet_Part_Nt := Hpr_Pref.Sheet_Part_Nt();
  begin
    v_Oper_Group_Id := Oper_Group_Id(i_Company_Id => i_Company_Id,
                                     i_Pcode      => Hpr_Pref.c_Pcode_Operation_Group_Wage);
  
    v_Overtime_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                                i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Overtime);
  
    v_Nighttime_Type_Id := Mpr_Util.Oper_Type_Id(i_Company_Id => i_Company_Id,
                                                 i_Pcode      => Hpr_Pref.c_Pcode_Oper_Type_Nighttime);
  
    v_Trans_Parts := Hpd_Util.Get_Opened_Transaction_Dates(i_Company_Id      => i_Company_Id,
                                                           i_Filial_Id       => i_Filial_Id,
                                                           i_Staff_Id        => i_Staff_Id,
                                                           i_Begin_Date      => i_Period_Begin,
                                                           i_End_Date        => i_Period_End,
                                                           i_Trans_Types     => Array_Varchar2(Hpd_Pref.c_Transaction_Type_Robot,
                                                                                               Hpd_Pref.c_Transaction_Type_Operation,
                                                                                               Hpd_Pref.c_Transaction_Type_Schedule),
                                                           i_With_Wage_Scale => false);
  
    for i in 1 .. v_Trans_Parts.Count
    loop
      v_Oper_Type_Id := Hpd_Util.Get_Closest_Oper_Type_Id(i_Company_Id    => i_Company_Id,
                                                          i_Filial_Id     => i_Filial_Id,
                                                          i_Staff_Id      => i_Staff_Id,
                                                          i_Oper_Group_Id => v_Oper_Group_Id,
                                                          i_Period        => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Oper_Type_Id is null;
    
      v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                        i_Filial_Id  => i_Filial_Id,
                                                        i_Staff_Id   => i_Staff_Id,
                                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      continue when v_Schedule_Id is null;
    
      continue when Htt_Util.Has_Undefined_Schedule(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Staff_Id    => i_Staff_Id,
                                                    i_Schedule_Id => v_Schedule_Id,
                                                    i_Period      => v_Trans_Parts(i).Part_Begin);
    
      v_Monthly_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                      i_Filial_Id    => i_Filial_Id,
                                      i_Staff_Id     => i_Staff_Id,
                                      i_Oper_Type_Id => v_Oper_Type_Id,
                                      i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                      i_Part_End     => v_Trans_Parts(i).Part_End,
                                      i_Calc_Planned => true);
    
      v_Plan_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End,
                                   i_Calc_Worked  => true);
    
      v_Wage_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                   i_Filial_Id    => i_Filial_Id,
                                   i_Staff_Id     => i_Staff_Id,
                                   i_Oper_Type_Id => v_Oper_Type_Id,
                                   i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                   i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Overtime_Amount := Calc_Amount(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Staff_Id     => i_Staff_Id,
                                       i_Oper_Type_Id => v_Overtime_Type_Id,
                                       i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                       i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Nighttime_Amount := Hpr_Util.Calc_Amount(i_Company_Id   => i_Company_Id,
                                                 i_Filial_Id    => i_Filial_Id,
                                                 i_Staff_Id     => i_Staff_Id,
                                                 i_Oper_Type_Id => v_Nighttime_Type_Id,
                                                 i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                                 i_Part_End     => v_Trans_Parts(i).Part_End);
    
      v_Hourly_Wage := Calc_Hourly_Wage(i_Company_Id   => i_Company_Id,
                                        i_Filial_Id    => i_Filial_Id,
                                        i_Staff_Id     => i_Staff_Id,
                                        i_Oper_Type_Id => v_Oper_Type_Id,
                                        i_Schedule_Id  => v_Schedule_Id,
                                        i_Part_Begin   => v_Trans_Parts(i).Part_Begin,
                                        i_Part_End     => v_Trans_Parts(i).Part_End);
    
      r_Robot := Hpd_Util.Closest_Robot(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Staff_Id   => i_Staff_Id,
                                        i_Period     => v_Trans_Parts(i).Part_Begin);
    
      Calc_Penalty_Amounts(o_Late_Amount      => v_Late_Amount,
                           o_Early_Amount     => v_Early_Amount,
                           o_Lack_Amount      => v_Lack_Amount,
                           o_Day_Skip_Amount  => v_Day_Skip_Amount,
                           o_Mark_Skip_Amount => v_Mark_Skip_Amount,
                           i_Company_Id       => i_Company_Id,
                           i_Filial_Id        => i_Filial_Id,
                           i_Staff_Id         => i_Staff_Id,
                           i_Division_Id      => r_Robot.Division_Id,
                           i_Hourly_Wage      => v_Hourly_Wage,
                           i_Period_Begin     => v_Trans_Parts(i).Part_Begin,
                           i_Period_End       => v_Trans_Parts(i).Part_End);
    
      Sheet_Add_Part(p_Parts            => v_Sheet_Parts,
                     i_Part_Begin       => v_Trans_Parts(i).Part_Begin,
                     i_Part_End         => v_Trans_Parts(i).Part_End,
                     i_Division_Id      => r_Robot.Division_Id,
                     i_Job_Id           => r_Robot.Job_Id,
                     i_Schedule_Id      => v_Schedule_Id,
                     i_Fte_Id           => r_Robot.Fte_Id,
                     i_Monthly_Amount   => i_Round_Model.Eval(v_Monthly_Amount),
                     i_Plan_Amount      => i_Round_Model.Eval(v_Plan_Amount),
                     i_Wage_Amount      => i_Round_Model.Eval(v_Wage_Amount),
                     i_Overtime_Amount  => i_Round_Model.Eval(v_Overtime_Amount),
                     i_Nighttime_Amount => i_Round_Model.Eval(v_Nighttime_Amount),
                     i_Late_Amount      => i_Round_Model.Eval(v_Late_Amount),
                     i_Early_Amount     => i_Round_Model.Eval(v_Early_Amount),
                     i_Lack_Amount      => i_Round_Model.Eval(v_Lack_Amount),
                     i_Day_Skip_Amount  => i_Round_Model.Eval(v_Day_Skip_Amount),
                     i_Mark_Skip_Amount => i_Round_Model.Eval(v_Mark_Skip_Amount));
    end loop;
  
    return v_Sheet_Parts;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Closest_Penalty_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Period      date
  ) return number is
    v_Penalty_Id number;
  begin
    select q.Penalty_Id
      into v_Penalty_Id
      from Hpr_Penalties q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Month = (select max(p.Month)
                        from Hpr_Penalties p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Month <= Trunc(i_Period, 'mon')
                         and p.Division_Id = i_Division_Id
                         and p.State = 'A')
       and q.Division_Id = i_Division_Id
       and q.State = 'A';
  
    return v_Penalty_Id;
  
  exception
    when No_Data_Found then
      begin
        select q.Penalty_Id
          into v_Penalty_Id
          from Hpr_Penalties q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Month = (select max(p.Month)
                            from Hpr_Penalties p
                           where p.Company_Id = i_Company_Id
                             and p.Filial_Id = i_Filial_Id
                             and p.Month <= Trunc(i_Period, 'mon')
                             and p.Division_Id is null
                             and p.State = 'A')
           and q.Division_Id is null
           and q.State = 'A';
      
        return v_Penalty_Id;
      
      exception
        when No_Data_Found then
          return null;
      end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Jcode_Cv_Contract_Fact(i_Fact_Id number) return varchar2 is
  begin
    return Mkr_Util.Journal_Code(i_Source_Table => Zt.Hpr_Cv_Contract_Facts,
                                 i_Source_Id    => i_Fact_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Timebook_Fill_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Hashmap is
    v_Pref_Value varchar2(4000);
  begin
    v_Pref_Value := Md_Pref.Load(i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Code       => Hpr_Pref.c_Pref_Timebook_Fill_Settings);
  
    if v_Pref_Value is null then
      return Fazo.Zip_Map('by_plan_day',
                          'Y',
                          'by_plan_hour',
                          'Y',
                          'norm_hour',
                          'Y',
                          'norm_day',
                          'Y');
    else
      return Fazo.Parse_Map(v_Pref_Value);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------     
  Function Oper_Type_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    v_Id number;
  begin
    select q.Oper_Type_Id
      into v_Id
      from Mpr_Oper_Types q
     where q.Company_Id = i_Company_Id
       and q.Name = i_Name
       and exists (select 1
              from Hpr_Oper_Types w
             where w.Company_Id = q.Company_Id
               and w.Oper_Type_Id = q.Oper_Type_Id);
  
    return v_Id;
  exception
    when No_Data_Found then
      Hpr_Error.Raise_056(i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  -- charge status
  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Draft return varchar2 is
  begin
    return t('charge_status:draft');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_New return varchar2 is
  begin
    return t('charge_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Used return varchar2 is
  begin
    return t('charge_status:used');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status_Completed return varchar2 is
  begin
    return t('charge_status:completed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Charge_Status(i_Charge_Status varchar2) return varchar2 is
  begin
    return --
    case i_Charge_Status --
    when Hpr_Pref.c_Charge_Status_Draft then t_Charge_Status_Draft --
    when Hpr_Pref.c_Charge_Status_New then t_Charge_Status_New --
    when Hpr_Pref.c_Charge_Status_Used then t_Charge_Status_Used --
    when Hpr_Pref.c_Charge_Status_Completed then t_Charge_Status_Completed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Charge_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Charge_Status_Draft,
                                          Hpr_Pref.c_Charge_Status_New,
                                          Hpr_Pref.c_Charge_Status_Used,
                                          Hpr_Pref.c_Charge_Status_Completed),
                           Array_Varchar2(t_Charge_Status_Draft,
                                          t_Charge_Status_New,
                                          t_Charge_Status_Used,
                                          t_Charge_Status_Completed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- estimation type
  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Formula return varchar2 is
  begin
    return t('estimation_type:formula');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type_Entered return varchar2 is
  begin
    return t('estimation_type:entered');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Estimation_Type(i_Estimation_Type varchar2) return varchar2 is
  begin
    return --
    case i_Estimation_Type --
    when Hpr_Pref.c_Estimation_Type_Formula then t_Estimation_Type_Formula --
    when Hpr_Pref.c_Estimation_Type_Entered then t_Estimation_Type_Entered --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Estimation_Types return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Estimation_Type_Formula,
                                          Hpr_Pref.c_Estimation_Type_Entered),
                           Array_Varchar2(t_Estimation_Type_Formula, t_Estimation_Type_Entered));
  end;

  ----------------------------------------------------------------------------------------------------
  -- advance limit kind
  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Turnout_Days return varchar2 is
  begin
    return t('advance_limit_kind:turnout');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Calendar_Days return varchar2 is
  begin
    return t('advance_limit_kind:calendar');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Advance_Limit_Kind(i_Advance_Limit_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Advance_Limit_Kind --
    when Hpr_Pref.c_Advance_Limit_Turnout_Days then t_Advance_Limit_Turnout_Days --
    when Hpr_Pref.c_Advance_Limit_Calendar_Days then t_Advance_Limit_Calendar_Days --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Advance_Limit_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Advance_Limit_Turnout_Days,
                                          Hpr_Pref.c_Advance_Limit_Calendar_Days),
                           Array_Varchar2(t_Advance_Limit_Turnout_Days,
                                          t_Advance_Limit_Calendar_Days));
  end;

  ----------------------------------------------------------------------------------------------------
  -- period kinds
  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Full_Month return varchar2 is
  begin
    return t('period kind: full month');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_First_Half return varchar2 is
  begin
    return t('period kind: month first half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Month_Second_Half return varchar2 is
  begin
    return t('period kind: month second half');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind_Custom return varchar2 is
  begin
    return t('period kind: custom period');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Period_Kind(i_Period_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Period_Kind --
    when Hpr_Pref.c_Period_Full_Month then t_Period_Kind_Full_Month --
    when Hpr_Pref.c_Period_Month_First_Half then t_Period_Kind_Month_First_Half --
    when Hpr_Pref.c_Period_Month_Second_Half then t_Period_Kind_Month_Second_Half --
    when Hpr_Pref.c_Period_Custom then t_Period_Kind_Custom --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Period_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Period_Full_Month,
                                          Hpr_Pref.c_Period_Month_First_Half,
                                          Hpr_Pref.c_Period_Month_Second_Half,
                                          Hpr_Pref.c_Period_Custom),
                           Array_Varchar2(t_Period_Kind_Full_Month,
                                          t_Period_Kind_Month_First_Half,
                                          t_Period_Kind_Month_Second_Half,
                                          t_Period_Kind_Custom));
  end;

  ----------------------------------------------------------------------------------------------------
  -- penaties
  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Late return varchar2 is
  begin
    return t('penalty kind: late');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Early return varchar2 is
  begin
    return t('penalty kind: early');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Lack return varchar2 is
  begin
    return t('penalty kind: lack');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Day_Skip return varchar2 is
  begin
    return t('penalty kind: day skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind_Mark_Skip return varchar2 is
  begin
    return t('penalty kind: mark skip');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Kind(i_Penalty_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Penalty_Kind --
    when Hpr_Pref.c_Penalty_Kind_Late then t_Penalty_Kind_Late --
    when Hpr_Pref.c_Penalty_Kind_Early then t_Penalty_Kind_Early --
    when Hpr_Pref.c_Penalty_Kind_Lack then t_Penalty_Kind_Lack --
    when Hpr_Pref.c_Penalty_Kind_Day_Skip then t_Penalty_Kind_Day_Skip --
    when Hpr_Pref.c_Penalty_Kind_Mark_Skip then t_Penalty_Kind_Mark_Skip --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Penalty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Penalty_Kind_Late,
                                          Hpr_Pref.c_Penalty_Kind_Early,
                                          Hpr_Pref.c_Penalty_Kind_Lack,
                                          Hpr_Pref.c_Penalty_Kind_Day_Skip,
                                          Hpr_Pref.c_Penalty_Kind_Mark_Skip),
                           Array_Varchar2(t_Penalty_Kind_Late,
                                          t_Penalty_Kind_Early,
                                          t_Penalty_Kind_Lack,
                                          t_Penalty_Kind_Day_Skip,
                                          t_Penalty_Kind_Mark_Skip));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_New return varchar2 is
  begin
    return t('cv fact status: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Complete return varchar2 is
  begin
    return t('cv fact status: complete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status_Accept return varchar2 is
  begin
    return t('cv fact status: accept');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Cv_Fact_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_New then t_Cv_Fact_Status_New --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Complete then t_Cv_Fact_Status_Complete --
    when Hpr_Pref.c_Cv_Contract_Fact_Status_Accept then t_Cv_Fact_Status_Accept --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Cv_Fact_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Hpr_Pref.c_Cv_Contract_Fact_Status_New,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Complete,
                                          Hpr_Pref.c_Cv_Contract_Fact_Status_Accept),
                           Array_Varchar2(t_Cv_Fact_Status_New,
                                          t_Cv_Fact_Status_Complete,
                                          t_Cv_Fact_Status_Accept));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Min return varchar2 is
  begin
    return t('penalty_rule:min');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Times return varchar2 is
  begin
    return t('penalty_rule:times');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Penalty_Rule_Unit_Days return varchar2 is
  begin
    return t('penalty_rule:days');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Post
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} posted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Unpost
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} unposted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Save
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} saved $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Update
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} updated $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Timebook_Delete
  (
    i_Company_Id      number,
    i_User_Id         number,
    i_Timebook_Number varchar2,
    i_Month           date
  ) return varchar2 is
  begin
    return t('$1{person_name} deleted $2{timebook_number} timebook for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Timebook_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Post
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} posted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Unpost
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} unposted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Save
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} saved $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Update
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} updated $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Notification_Title_Book_Delete
  (
    i_Company_Id  number,
    i_User_Id     number,
    i_Book_Number varchar2,
    i_Month       date
  ) return varchar2 is
  begin
    return t('$1{peson_name} deleted $2{book_number} for $3{month}',
             z_Md_Users.Load(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id).Name,
             i_Book_Number,
             to_char(i_Month, 'Month yyyy', Htt_Util.Get_Nls_Language));
  end;

end Hpr_Util;
/

create or replace package Hpr_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Hpr_Watcher;
/
create or replace package body Hpr_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head  number := Md_Pref.c_Company_Head;
    v_Pcode_Like    varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query         varchar2(4000);
    c_Oper_Group_Id Fazo.Number_Id_Aat;
    c_Book_Type_Id  Fazo.Number_Id_Aat;
    r_Oper_Group    Hpr_Oper_Groups%rowtype;
    r_Oper_Type     Hpr_Oper_Types%rowtype;
    r_Book_Type     Hpr_Book_Types%rowtype;
    v_Oper_Type     Hpr_Pref.Oper_Type_Rt;
  begin
    -- add default operation groups
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hpr_Oper_Groups,
                                                i_Lang_Code => z_Md_Companies.Load(i_Company_Id).Lang_Code);
  
    for r in (select *
                from Hpr_Oper_Groups t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Oper_Group_Id)
    loop
      r_Oper_Group               := r;
      r_Oper_Group.Company_Id    := i_Company_Id;
      r_Oper_Group.Oper_Group_Id := Hpr_Next.Oper_Group_Id;
    
      execute immediate v_Query
        using in r_Oper_Group, out r_Oper_Group;
    
      z_Hpr_Oper_Groups.Save_Row(r_Oper_Group);
    
      c_Oper_Group_Id(r.Oper_Group_Id) := r_Oper_Group.Oper_Group_Id;
    end loop;
  
    -- add default oper types
    for r in (select *
                from Mpr_Oper_Types t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Oper_Type_Id)
    loop
      v_Oper_Type.Oper_Type := r;
      r_Oper_Type           := z_Hpr_Oper_Types.Load(i_Company_Id   => v_Company_Head,
                                                     i_Oper_Type_Id => r.Oper_Type_Id);
    
      v_Oper_Type.Oper_Type.Company_Id   := i_Company_Id;
      v_Oper_Type.Oper_Type.Oper_Type_Id := Mpr_Next.Oper_Type_Id;
    
      if r_Oper_Type.Oper_Group_Id is not null then
        v_Oper_Type.Oper_Group_Id := c_Oper_Group_Id(r_Oper_Type.Oper_Group_Id);
      else
        v_Oper_Type.Oper_Group_Id := null;
      end if;
    
      v_Oper_Type.Estimation_Type    := r_Oper_Type.Estimation_Type;
      v_Oper_Type.Estimation_Formula := Hpr_Util.Formula_Fix(i_Company_Id => i_Company_Id,
                                                             i_Formula    => r_Oper_Type.Estimation_Formula);
    
      Hpr_Api.Oper_Type_Save(v_Oper_Type);
    
      z_Mpr_Oper_Types.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Oper_Type_Id => v_Oper_Type.Oper_Type.Oper_Type_Id,
                                  i_Pcode        => Option_Varchar2(v_Oper_Type.Oper_Type.Pcode));
    end loop;
  
    -- add default book types
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hpr_Book_Types,
                                                i_Lang_Code => z_Md_Companies.Load(i_Company_Id).Lang_Code);
  
    for r in (select *
                from Hpr_Book_Types t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Book_Type_Id)
    loop
      r_Book_Type              := r;
      r_Book_Type.Company_Id   := i_Company_Id;
      r_Book_Type.Book_Type_Id := Hpr_Next.Book_Type_Id;
    
      execute immediate v_Query
        using in r_Book_Type, out r_Book_Type;
    
      z_Hpr_Book_Types.Save_Row(r_Book_Type);
    
      c_Book_Type_Id(r.Book_Type_Id) := r_Book_Type.Book_Type_Id;
    end loop;
  
    for r in (select *
                from Hpr_Book_Type_Binds t
               where t.Company_Id = v_Company_Head
               order by t.Book_Type_Id)
    loop
      z_Hpr_Book_Type_Binds.Insert_One(i_Company_Id    => i_Company_Id,
                                       i_Book_Type_Id  => c_Book_Type_Id(r.Book_Type_Id),
                                       i_Oper_Group_Id => c_Oper_Group_Id(r.Oper_Group_Id));
    end loop;
  end;

end Hpr_Watcher;
/

create or replace package Hrec_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Funnel_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Vacancy_Id number,
    i_State_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Candidate_Id number,
    i_Stage_Name   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Funnel_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Operation_Id   number,
    i_Operation_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Stage_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Vacancy_Id  number,
    i_Closed_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Error_Code varchar2);
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_020(i_Job_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Region_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_026;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Region_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Vacancy_Name varchar2);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_030(i_Error_Title varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Vacancy_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Group_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Group_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Type_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Type_Name varchar2);
end Hrec_Error;
/
create or replace package body Hrec_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hrec_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:for save application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('001:title:status must be draft'),
          i_S1      => t('001:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:for delete application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('002:title:status must be draft or waiting'),
          i_S1      => t('002:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:this stage $1{stage_name} is system entity, you can not delete it',
                         i_Stage_Name),
          i_Title   => t('003:title:system entities cannot delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:for save stage pcode must be null, stage name: $1{stage_name}',
                         i_Stage_Name),
          i_Title   => t('003:title:pcode must be null'),
          i_S1      => t('004:solution:please delete pcode and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Funnel_Name varchar2) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:this funnel $1{stage_name} is system entity, you can not delete it',
                         i_Funnel_Name),
          i_Title   => t('005:title:system entities cannot delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:for save application status must be draft or waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('006:title:status must be draft'),
          i_S1      => t('006:solution:change application status to draft or waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Vacancy_Id number,
    i_State_Name varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:for save vacancy status must be opened, current state: $1{state_name}, vacancy id: $2{vacancy_id}',
                         i_State_Name,
                         i_Vacancy_Id),
          i_Title   => t('007:title:state must be opend'),
          i_S1      => t('007:solution:change vacancy state to opened and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Candidate_Id number,
    i_Stage_Name   varchar2
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:for remove candidate, stage must be todo, cancidate id: $1{candidate_id}, current stage: $2{stage_name}',
                         i_Candidate_Id,
                         i_Stage_Name),
          i_Title   => t('008:title:current stage must be todo'),
          i_S1      => t('008:solution:change stage todo and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:for change application status to draft current status must be canceled, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('009:title:status must be canceled'),
          i_S1      => t('009:solution:change status to canceled and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:for change application status to waiting current status must be draft, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('010:title:status must be draft'),
          i_S1      => t('010:solution:change status to draft and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:for change application status to approved current status must be waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('011:title:status must be waiting'),
          i_S1      => t('011:solution:change status to waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:for change application status to complited current status must be approved, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('012:title:status must be approved'),
          i_S1      => t('012:solution:change status to approved and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Application_Id number,
    i_Status_Name    varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:for change application status to complited canceled status must be waiting, application id: $1{application_id}, current status: $2{status_name}',
                         i_Application_Id,
                         i_Status_Name),
          i_Title   => t('013:title:status must be waiting'),
          i_S1      => t('013:solution:change status to waiting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Funnel_Name varchar2) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:you can not edit system funnel, funnel name: $1{funnel_name}',
                         i_Funnel_Name),
          i_Title   => t('014:title:system entity can not edit'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Operation_Id   number,
    i_Operation_Kind varchar2
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:you can delete only comment operation, not action operation, operation id: $1{operation_id}, operation kind: $2{operation_kind}',
                         i_Operation_Id,
                         i_Operation_Kind),
          i_Title   => t('015:title:you can delete only comment operation'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Stage_Name varchar2) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:you can not make a passive, in this stage $1{stage_name} has a candidates',
                         i_Stage_Name),
          i_Title   => t('016:title:you can not make a passive'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Vacancy_Id  number,
    i_Closed_Date date
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:vacancy is already closed, vacancy id: $1{vacancy_id}, closed date: $2{closed_date}',
                         i_Vacancy_Id,
                         i_Closed_Date),
          i_Title   => t('017:title:you can close vacancy'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018 is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:you must be auth to hh.ru'),
          i_Title   => t('018:title:no access'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Error_Code varchar2) is
    --------------------------------------------------
    Function Error_Message(i_Error_Code varchar2) return varchar2 is
    begin
      case i_Error_Code
        when Hrec_Pref.c_Hh_Error_Bad_Authorization then
          return t('019:message:access token invalid or does not exist');
        when Hrec_Pref.c_Hh_Error_Token_Expired then
          return t('019:message:access token lifetime exprired');
        when Hrec_Pref.c_Hh_Error_Token_Revoked then
          return t('019:message:access token was revoked');
        when Hrec_Pref.c_Hh_Error_Application_Not_Found then
          return t('019:message:your hh application was deleted');
        when Hrec_Pref.c_Hh_Error_Used_Manager_Account_Forbidden then
          return t('019:message:your manager account was blocked');
        else
          null;
      end case;
    
      return i_Error_Code;
    end;
  
  begin
    Error(i_Code    => '019',
          i_Message => Error_Message(i_Error_Code),
          i_Title   => t('019:title:hh error'),
          i_S1      => t('019:solution:try reloggin to hh'),
          i_S2      => t('019:solution:contact your admin to see if your hh application was not deleted'),
          i_S3      => t('019:solution:contact your admin to see if your hh account was not blocked'));
  end;
  ----------------------------------------------------------------------------------------------------  
  Procedure Raise_020(i_Job_Name varchar2) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:for this job connect with head hunter not found, job name: $1{job_name}',
                         i_Job_Name),
          i_Title   => t('020:title:connect not found'),
          i_S1      => t('020:solution:set data map with head hunter for this job and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Region_Name varchar2) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:for this region connect with head hunter not found, region name: $1{region_name}',
                         i_Region_Name),
          i_Title   => t('021:title:connect not found'),
          i_S1      => t('021:solution:set data map with head hunter for this region and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('023:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('024:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:this vacancy is already published to Head Hunter, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('025:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Raise_026 is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:you must be auth to olx.uz'),
          i_Title   => t('026:title:no access'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('027:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Region_Name varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:you must be integrate system region to Olx region, system region name: $1{region_name}',
                         i_Region_Name),
          i_Title   => t('028:title:region is not integrated'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('029:title:vacancy already published'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_030(i_Error_Title varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:$1{error_title}', i_Error_Title),
          i_Title   => t('030:title:error in publish vacancy to olx'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Vacancy_Name varchar2) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:this vacancy is already published to Olx, vacancy name: $1{vacancy_name}',
                         i_Vacancy_Name),
          i_Title   => t('031:title:vacancy already published'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032 is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:find some problems in olx serve, please wait'),
          i_Title   => t('032:title:find problem in OLX server'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033 is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:error in load, candidate info, plase try again'),
          i_Title   => t('033:title:error in load candidate info'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Group_Name varchar2) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:you can not change system pcode, vacancy group name: $1',
                         i_Group_Name),
          i_Title   => t('034:title:you can not change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Group_Name varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:you can not delete system vacancy group, vacancy group name: $1',
                         i_Group_Name),
          i_Title   => t('035:title:you can not delete'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Type_Name varchar2) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:you can not change system pcode, vacancy type name: $1',
                         i_Type_Name),
          i_Title   => t('036:title:you can not change'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Type_Name varchar2) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:you can not delete system vacancy type, vacancy type name: $1',
                         i_Type_Name),
          i_Title   => t('037:title:you can not delete'));
  end;

end Hrec_Error;
/

create or replace package Hrec_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Hrec_Watcher;
/
create or replace package body Hrec_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head       number := Md_Pref.c_Company_Head;
    v_Lang_Code          varchar2(5) := z_Md_Companies.Load(i_Company_Id).Lang_Code;
    v_Pcode_Like         varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query              varchar2(4000);
    v_Vacancy_Type_Query varchar2(4000);
    r_Stage              Hrec_Stages%rowtype;
    r_Funnel             Hrec_Funnels%rowtype;
    r_Vacancy_Group      Hrec_Vacancy_Groups%rowtype;
    r_Vacancy_Type       Hrec_Vacancy_Types%rowtype;
  begin
    -- add default vacancy group
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Vacancy_Groups,
                                                i_Lang_Code => v_Lang_Code);
  
    v_Vacancy_Type_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Vacancy_Types,
                                                             i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Vacancy_Groups q
               where q.Company_Id = v_Company_Head
                 and q.Pcode like v_Pcode_Like
               order by q.Order_No)
    loop
      r_Vacancy_Group                  := r;
      r_Vacancy_Group.Company_Id       := i_Company_Id;
      r_Vacancy_Group.Vacancy_Group_Id := Hrec_Next.Vacancy_Group_Id;
    
      execute immediate v_Query
        using in r_Vacancy_Group, out r_Vacancy_Group;
    
      z_Hrec_Vacancy_Groups.Save_Row(r_Vacancy_Group);
    
      for t in (select *
                  from Hrec_Vacancy_Types w
                 where w.Company_Id = v_Company_Head
                   and w.Vacancy_Group_Id = r.Vacancy_Group_Id
                   and w.Pcode like v_Pcode_Like)
      loop
        r_Vacancy_Type                  := t;
        r_Vacancy_Type.Company_Id       := i_Company_Id;
        r_Vacancy_Type.Vacancy_Group_Id := r_Vacancy_Group.Vacancy_Group_Id;
        r_Vacancy_Type.Vacancy_Type_Id  := Hrec_Next.Vacancy_Type_Id;
      
        execute immediate v_Vacancy_Type_Query
          using in r_Vacancy_Type, out r_Vacancy_Type;
      
        z_Hrec_Vacancy_Types.Save_Row(r_Vacancy_Type);
      end loop;
    end loop;
  
    -- add default stages
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Stages,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Stages t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Order_No)
    loop
      r_Stage            := r;
      r_Stage.Company_Id := i_Company_Id;
      r_Stage.Stage_Id   := Hrec_Next.Stage_Id;
    
      execute immediate v_Query
        using in r_Stage, out r_Stage;
    
      z_Hrec_Stages.Save_Row(r_Stage);
    end loop;
  
    -- add default funnels
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hrec_Funnels,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hrec_Funnels t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like)
    loop
      r_Funnel            := r;
      r_Funnel.Company_Id := i_Company_Id;
      r_Funnel.Funnel_Id  := Hrec_Next.Funnel_Id;
    
      execute immediate v_Query
        using in r_Funnel, out r_Funnel;
    
      z_Hrec_Funnels.Save_Row(r_Funnel);
    end loop;
  
    -- connect todo stage with Head Hunter's To do stage
  
    z_Hrec_Hh_Integration_Stages.Save_One(i_Company_Id => i_Company_Id,
                                          i_Stage_Id   => Hrec_Util.Stage_Id_By_Pcode(i_Company_Id => i_Company_Id,
                                                                                      i_Pcode      => Hrec_Pref.c_Pcode_Stage_Todo),
                                          i_Stage_Code => Hrec_Pref.c_Hh_Todo_Stage_Code);
  end;

end Hrec_Watcher;
/

create or replace package Href_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Dismissed_Candidate_Save
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Staff_Id             number,
    i_Employment_Source_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Estimation_Formula_Update
  (
    i_Company_Id     number,
    i_Indicator_Id   number,
    i_Old_Identifier varchar2,
    i_New_Identifier varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Save(i_Indicator Href_Indicators%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Notification
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Title      varchar2,
    i_Uri        varchar2 := null,
    i_Uri_Param  Hashmap := Hashmap(),
    i_Person_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Notification
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Title         varchar2,
    i_Uri           varchar2 := null,
    i_Uri_Param     Hashmap := Hashmap(),
    i_Check_Setting boolean := false,
    i_User_Id       number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Title              varchar2,
    i_Form               varchar2,
    i_Action_Keys        Array_Varchar2,
    i_Uri                varchar2,
    i_Uri_Param          Hashmap,
    i_Except_User_Id     number,
    i_Additional_User_Id number := null
  );
end Href_Core;
/
create or replace package body Href_Core is
  ---------------------------------------------------------------------------------------------------- 
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREF:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dismissed_Candidate_Save
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Staff_Id             number,
    i_Employment_Source_Id number
  ) is
    r_Staff     Href_Staffs%rowtype;
    r_Candidate Href_Candidates%rowtype;
    v_Exists    boolean;
  begin
    r_Staff := z_Href_Staffs.Lock_Load(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Dismissal_Date is null then
      return;
    end if;
  
    if z_Href_Candidates.Exist(i_Company_Id   => r_Staff.Company_Id,
                               i_Filial_Id    => r_Staff.Filial_Id,
                               i_Candidate_Id => r_Staff.Employee_Id,
                               o_Row          => r_Candidate) then
      v_Exists := true;
    else
      r_Candidate.Company_Id     := r_Staff.Company_Id;
      r_Candidate.Filial_Id      := r_Staff.Filial_Id;
      r_Candidate.Candidate_Id   := r_Staff.Employee_Id;
      r_Candidate.Candidate_Kind := Href_Pref.c_Candidate_Kind_New;
    end if;
  
    r_Candidate.Source_Id := i_Employment_Source_Id;
  
    if v_Exists then
      z_Href_Candidates.Update_Row(r_Candidate);
    else
      z_Href_Candidates.Insert_Row(r_Candidate);
    end if;
  
    insert into Href_Candidate_Jobs
      (Company_Id, Filial_Id, Candidate_Id, Job_Id)
      select i_Company_Id, i_Filial_Id, r_Staff.Employee_Id, p.Job_Id
        from Hpd_Transactions q
        join Hpd_Trans_Robots p
          on p.Company_Id = q.Company_Id
         and p.Filial_Id = q.Filial_Id
         and p.Trans_Id = q.Trans_Id
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Robot
         and not exists (select 1
                from Href_Candidate_Jobs Cj
               where Cj.Company_Id = i_Company_Id
                 and Cj.Filial_Id = i_Filial_Id
                 and Cj.Candidate_Id = r_Staff.Employee_Id
                 and Cj.Job_Id = p.Job_Id)
       group by p.Job_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Estimation_Formula_Update
  (
    i_Company_Id     number,
    i_Indicator_Id   number,
    i_Old_Identifier varchar2,
    i_New_Identifier varchar2
  ) is
    v_Oper_Types Hpr_Oper_Types%rowtype;
    v_Variables  Array_Varchar2;
    v_Formula    varchar2(500);
  begin
    for r in (select *
                from Hpr_Oper_Type_Indicators t
               where t.Company_Id = i_Company_Id
                 and t.Indicator_Id = i_Indicator_Id)
    loop
      v_Oper_Types := z_Hpr_Oper_Types.Lock_Load(i_Company_Id   => r.Company_Id,
                                                 i_Oper_Type_Id => r.Oper_Type_Id);
    
      v_Formula   := v_Oper_Types.Estimation_Formula;
      v_Variables := Hpr_Util.Formula_Variables(v_Formula);
    
      Fazo.Sort_Desc(v_Variables);
    
      for i in 1 .. v_Variables.Count
      loop
        if v_Variables(i) = i_Old_Identifier then
          v_Formula := Regexp_Replace(v_Formula,
                                      '(\W|^)' || i_Old_Identifier || '(\W|$)',
                                      '\1' || i_New_Identifier || '\2');
          exit;
        end if;
      end loop;
    
      z_Hpr_Oper_Type_Indicators.Update_One(i_Company_Id   => r.Company_Id,
                                            i_Oper_Type_Id => r.Oper_Type_Id,
                                            i_Indicator_Id => r.Indicator_Id,
                                            i_Identifier   => Option_Varchar2(i_New_Identifier));
      z_Hpr_Oper_Types.Update_One(i_Company_Id         => r.Company_Id,
                                  i_Oper_Type_Id       => r.Oper_Type_Id,
                                  i_Estimation_Formula => Option_Varchar2(v_Formula));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Save(i_Indicator Href_Indicators%rowtype) is
    r_Indicator          Href_Indicators%rowtype;
    v_Used               Href_Indicators.Used%type := Href_Pref.c_Indicator_Used_Constantly;
    v_Indicator_Group_Id Href_Indicators.Indicator_Group_Id%type := i_Indicator.Indicator_Group_Id;
    v_Pcode              Href_Indicators.Pcode%type;
  begin
    if z_Href_Indicators.Exist_Lock(i_Company_Id   => i_Indicator.Company_Id,
                                    i_Indicator_Id => i_Indicator.Indicator_Id,
                                    o_Row          => r_Indicator) then
      if r_Indicator.Identifier <> i_Indicator.Identifier then
        Estimation_Formula_Update(i_Company_Id     => r_Indicator.Company_Id,
                                  i_Indicator_Id   => r_Indicator.Indicator_Id,
                                  i_Old_Identifier => r_Indicator.Identifier,
                                  i_New_Identifier => i_Indicator.Identifier);
      end if;
    
      v_Indicator_Group_Id := r_Indicator.Indicator_Group_Id;
      v_Used               := r_Indicator.Used;
      v_Pcode              := r_Indicator.Pcode;
    end if;
  
    r_Indicator                    := i_Indicator;
    r_Indicator.Indicator_Group_Id := v_Indicator_Group_Id;
    r_Indicator.Used               := v_Used;
    r_Indicator.Pcode              := v_Pcode;
  
    z_Href_Indicators.Save_Row(r_Indicator);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Notification
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Title      varchar2,
    i_Uri        varchar2 := null,
    i_Uri_Param  Hashmap := Hashmap(),
    i_Person_Ids Array_Number
  ) is
    r_Data Ms_Notifications%rowtype;
  begin
    r_Data.Company_Id        := i_Company_Id;
    r_Data.Filial_Id         := i_Filial_Id;
    r_Data.Notification_Kind := Ms_Pref.c_Nk_Primary;
    r_Data.Viewed            := 'N';
    r_Data.Title             := i_Title;
    r_Data.Uri               := i_Uri;
    r_Data.Uri_Param         := i_Uri_Param.Json();
  
    for i in 1 .. i_Person_Ids.Count()
    loop
      r_Data.Notification_Id := Ms_Next.Notification_Id;
      r_Data.Person_Id       := i_Person_Ids(i);
    
      Ms_Api.Notification_Save(r_Data);
    end loop;
  
    if i_Person_Ids.Count > 0 then
      b.Broadcast_Notification(i_User_Ids => i_Person_Ids);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Notification
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Title         varchar2,
    i_Uri           varchar2 := null,
    i_Uri_Param     Hashmap := Hashmap(),
    i_Check_Setting boolean := false,
    i_User_Id       number
  ) is
    v_Role_Id    varchar(100);
    v_Person_Ids Array_Number;
  begin
    if i_Check_Setting and Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Notification_Enable = 'N' then
      return;
    end if;
  
    v_Role_Id := Md_Util.Role_Id(i_Company_Id => i_Company_Id, i_Pcode => Href_Pref.c_Pcode_Role_Hr);
  
    select q.User_Id
      bulk collect
      into v_Person_Ids
      from Md_User_Roles q
     where q.Company_Id = i_Company_Id
       and q.User_Id <> i_User_Id
       and q.Filial_Id = i_Filial_Id
       and q.Role_Id = v_Role_Id;
  
    Send_Notification(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Title      => i_Title,
                      i_Uri        => i_Uri,
                      i_Uri_Param  => i_Uri_Param,
                      i_Person_Ids => v_Person_Ids);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Send_Application_Notification
  (
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Title              varchar2,
    i_Form               varchar2,
    i_Action_Keys        Array_Varchar2,
    i_Uri                varchar2,
    i_Uri_Param          Hashmap,
    i_Except_User_Id     number,
    i_Additional_User_Id number := null
  ) is
    v_Person_Ids Array_Number;
  begin
    select u.User_Id
      bulk collect
      into v_Person_Ids
      from Md_Users u
     where u.Company_Id = i_Company_Id
       and u.User_Id <> i_Except_User_Id
       and (i_Additional_User_Id is null or u.User_Id <> i_Additional_User_Id)
       and exists (select *
              from Md_User_Form_Actions q
             where q.Company_Id = i_Company_Id
               and q.User_Id = u.User_Id
               and q.Filial_Id = i_Filial_Id
               and q.Form = i_Form
               and q.Action_Key in (select Column_Value
                                      from table(i_Action_Keys)));
  
    if i_Additional_User_Id <> i_Except_User_Id then
      v_Person_Ids.Extend;
      v_Person_Ids(v_Person_Ids.Count) := i_Additional_User_Id;
    end if;
  
    Send_Notification(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Title      => i_Title,
                      i_Uri        => i_Uri,
                      i_Uri_Param  => i_Uri_Param,
                      i_Person_Ids => v_Person_Ids);
  end;

end Href_Core;
/

create or replace package Href_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Specialty_Id   number,
    i_Specialty_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Specialty_Id   number,
    i_Specialty_Name varchar2,
    i_Parent_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Document_Type_Id   number,
    i_Document_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Document_Type_Id   number,
    i_Document_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Person_Edu_Stage_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Person_Reference_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Person_Family_Member_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Person_Marital_Status_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Person_Experience_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013(i_Person_Award_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Person_Work_Place_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Document_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Indicator_Id   number,
    i_Indicator_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Fte_Id   number,
    i_Fte_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Employee_Name  varchar2,
    i_Period_Begin   date,
    i_Period_End     date,
    i_Unlicensed_Day date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Labor_Function_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Labor_Function_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Fixed_Term_Base_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Fixed_Term_Base_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Fte_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Fte_Pcode varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Employee_Name varchar2,
    i_All           boolean,
    i_Direct        boolean,
    i_Undirect      boolean,
    i_Manual        boolean,
    i_Division_Name varchar2,
    i_Parent_Name   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Column varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Nationality_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_User_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Division_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Limit number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Limit number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Value number);
end Href_Error;
/
create or replace package body Href_Error is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREF:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Href_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Column_Name(i_Column_Name varchar2) return varchar2 is
  begin
    case i_Column_Name
      when Href_Pref.c_Pref_Crs_Last_Name then
        return t('column_name: last_name');
      when Href_Pref.c_Pref_Crs_Middle_Name then
        return t('column_name: middle_name');
      when Href_Pref.c_Pref_Crs_Birthday then
        return t('column_name: birthday');
      when Href_Pref.c_Pref_Crs_Phone_Number then
        return t('column_name: phone_number');
      when Href_Pref.c_Pref_Crs_Email then
        return t('column_name: email');
      when Href_Pref.c_Pref_Crs_Region then
        return t('column_name: region');
      when Href_Pref.c_Pref_Crs_Address then
        return t('column_name: address');
      when Href_Pref.c_Pref_Crs_Legal_Address then
        return t('column_name: legal_address');
      when Href_Pref.c_Pref_Crs_Passport then
        return t('column_name:', 'passport');
      when Href_Pref.c_Pref_Crs_Iapa then
        return t('column_name: iapa');
      when Href_Pref.c_Pref_Crs_Npin then
        return t('column_name: npin');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Specialty_Id   number,
    i_Specialty_Name varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message: the specialty kind of $1{specialty_name} cannot be changed, specialty_id: $1',
                         i_Specialty_Name,
                         i_Specialty_Id),
          i_Title   => t('001:title: specialty kind can not be changed'),
          i_S1      => t('001:solution: restore old specilaty kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Specialty_Id   number,
    i_Specialty_Name varchar2,
    i_Parent_Name    varchar2
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message: the specialty kind of $1{parent_specialty_name} (parent of $2{specialty_name}) is not group, specialty_id: $3',
                         i_Parent_Name,
                         i_Specialty_Name,
                         i_Specialty_Id),
          i_Title   => t('002:title: parent specialty kind must be group'),
          i_S1      => t('002:solution: change parent which specialty kind is the group'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Document_Type_Id   number,
    i_Document_Type_Name varchar2
  ) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message: $1{document_type_name} is system document type, it cannot be changed, document_type_id: $2',
                         i_Document_Type_Name,
                         i_Document_Type_Id),
          i_Title   => t('003:title: system document type is readonly'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Document_Type_Id   number,
    i_Document_Type_Name varchar2
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message: $1{document_type_name} is system document type, it cannot be deleted, document_type_id: $2',
                         i_Document_Type_Name,
                         i_Document_Type_Id),
          i_Title   => t('004:title: system document type is readonly'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005(i_Person_Edu_Stage_Id number) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message: the person of person edu stage cannot be changed, person_edu_stage_id: $1',
                         i_Person_Edu_Stage_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Person_Reference_Id number) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message: the person of person reference cannot be changed, person_reference_id: $1',
                         i_Person_Reference_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Person_Family_Member_Id number) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message: the person of person family member cannot be changed, person_family_member_id: $1',
                         i_Person_Family_Member_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Person_Marital_Status_Id number) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message: the person of person marital status cannot be changed, person_marital_status_id: $1',
                         i_Person_Marital_Status_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Person_Experience_Id number) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message: the person of person experience cannot be changed, person_experience_id: $1',
                         i_Person_Experience_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013(i_Person_Award_Id number) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message: the person of person award cannot be changed, person_award_id: $1',
                         i_Person_Award_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Person_Work_Place_Id number) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message: the person of person work place cannot be changed, person_work_place_id: $1',
                         i_Person_Work_Place_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Document_Id number) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message: the person of document cannot be changed, document_id: $1',
                         i_Document_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Indicator_Id   number,
    i_Indicator_Name varchar2
  ) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message: $1{indicator_name} is system indicator, it cannot be deleted, indicator_id: $2',
                         i_Indicator_Name,
                         i_Indicator_Id),
          i_Title   => t('016:title: system indicator cannot be deleted'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Fte_Id   number,
    i_Fte_Name varchar2
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message: $1{fte_name} is system fte, it cannot be deleted, fte_id: $2',
                         i_Fte_Name,
                         i_Fte_Id),
          i_Title   => t('017:title: system fte cannot be deleted'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Employee_Name  varchar2,
    i_Period_Begin   date,
    i_Period_End     date,
    i_Unlicensed_Day date
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message: $1{day} is unlicensed day for $2{employee_name}, period_begin: $3, period_end: $4',
                         i_Unlicensed_Day,
                         i_Employee_Name,
                         i_Period_Begin,
                         i_Period_End),
          i_Title   => t('018:title: unlicensed day is found in a given period'),
          i_S1      => t('018:solution: tell the admin that need to buy a license and put it in the system, and try this action'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Labor_Function_Code varchar2) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message: labor function is not found by given $1{code} code',
                         i_Labor_Function_Code),
          i_Title   => t('019:title: labor function is not found by given code'),
          i_S1      => t('019:solution: try another code'),
          i_S2      => t('019:solution: create labor function by setting the code'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Labor_Function_Name varchar2) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message: labor function is not found by given $1{name} name',
                         i_Labor_Function_Name),
          i_Title   => t('020:title: labor function is not found by given name'),
          i_S1      => t('020:solution: try another name'),
          i_S2      => t('020:solution: create labor function by setting the name'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Fixed_Term_Base_Code varchar2) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message: fixed term base is not found by given $1{code} code',
                         i_Fixed_Term_Base_Code),
          i_Title   => t('021:title: fixed term base is not found by given code'),
          i_S1      => t('021:solution: try another code'),
          i_S2      => t('021:solution: create fixed term base by setting the code'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022(i_Fixed_Term_Base_Name varchar2) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message: fixed term base is not found by given $1{name} name',
                         i_Fixed_Term_Base_Name),
          i_Title   => t('022:title: fixed term base is not found by given name'),
          i_S1      => t('022:solution: try another name'),
          i_S2      => t('022:solution: create fixed term base by setting the name'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023(i_Fte_Name varchar2) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message: fte is not found by given $1{name} name', i_Fte_Name),
          i_Title   => t('023:title: fte is not found by given name'),
          i_S1      => t('023:solution: try another name'),
          i_S2      => t('023:solution: create fte by setting the name'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024(i_Fte_Pcode varchar2) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message: fte is not found by given $1{pcode} pcode', i_Fte_Pcode),
          i_Title   => t('024:title: fte is not found by given pcode'),
          i_S1      => t('024:solution: tell developers'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025 is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message: the user has no acces to all employee'),
          i_Title   => t('025:title: no acces to all employee'),
          i_S1      => t('025:solution: enable access all employee for this user'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Employee_Name varchar2,
    i_All           boolean,
    i_Direct        boolean,
    i_Undirect      boolean,
    i_Manual        boolean,
    i_Division_Name varchar2,
    i_Parent_Name   varchar2
  ) is
    v_S1 varchar2(4000 char);
    v_S2 varchar2(4000 char);
    v_S3 varchar2(4000 char);
    v_S4 varchar2(4000 char);
  begin
    if i_All then
      v_S1 := t('026:solution: enable access all employee for this user');
    end if;
  
    if i_Direct and i_Division_Name is not null then
      v_S2 := t('026:solution: be manager of the division $1{division_name}', i_Division_Name);
    end if;
  
    if i_Undirect and i_Parent_Name is not null then
      v_S3 := t('026:solution: be master manager of the division $1{parent_division_name}',
                i_Parent_Name);
    end if;
  
    if i_Manual and i_Division_Name is not null then
      v_S4 := t('026:solution: be manual manager of the division $1{division_name}',
                i_Division_Name);
    end if;
  
    Error(i_Code    => '026',
          i_Message => t('026:message: user has no access to $1{employee_name}', i_Employee_Name),
          i_Title   => t('026:title: no acces to employee'),
          i_S1      => v_S1,
          i_S2      => v_S2,
          i_S3      => v_S3,
          i_S4      => v_S4);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027 is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message: the user has no direct employees'),
          i_Title   => t('027:title: no direct employees'),
          i_S1      => t('027:solution: admin has access to all employee'),
          i_S2      => t('027:solution: the user must be manager to at least one direct employee'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_028(i_Column varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message: $1{column_name} not found', t_Column_Name(i_Column)),
          i_Title   => t('028:title: required column not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Nationality_Name varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message: nationality is not found by given $1{name} name',
                         i_Nationality_Name),
          i_Title   => t('029:title: nationality is not found by given name'),
          i_S1      => t('029:solution: try another name'),
          i_S2      => t('029:solution: create nationality by setting the name'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_User_Name varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message: $1{user name} is passive user. passive user can not get system access',
                         i_User_Name),
          i_Title   => t('030:title: user state is passive'),
          i_S1      => t('030:solution:change user state to active'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031 is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:verify person uniqueness setting must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032 is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:verify person uniqueness column must be in ($1, $2, $3)',
                         Href_Util.t_Verify_Person_Uniqueness_Column(Href_Pref.c_Vpu_Column_Name),
                         Href_Util.t_Verify_Person_Uniqueness_Column(Href_Pref.c_Vpu_Column_Passport_Number),
                         Href_Util.t_Verify_Person_Uniqueness_Column(Href_Pref.c_Vpu_Column_Npin)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Division_Name varchar2) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message: user has no access to division $1{division_name}',
                         i_Division_Name),
          i_Title   => t('033:title: no acces to division'),
          i_S1      => t('033:solution: change division to other division that user has access'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Limit number) is
  begin
    Error(i_Code    => '034',
          i_Message => t('035:message:request note limit must be less than 300 and at least 1, limit: $1{limit}',
                         i_Limit));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Limit number) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:plan change note limit must be less than 300 and at least 1, limit: $1{limit}',
                         i_Limit));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036(i_Value number) is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:fte limit must be positive, current_value: $1', i_Value));
  end;

end Href_Error;
/

create or replace package Href_Next is
  ----------------------------------------------------------------------------------------------------  
  Function Fixed_Term_Base_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Edu_Stage_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Science_Branch_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Institution_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Specialty_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Lang_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Lang_Level_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Document_Type_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Reference_Type_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Relation_Degree_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Marital_Status_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Experience_Type_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Award_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Inventory_Type_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Edu_Stage_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Reference_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Family_Member_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Marital_Status_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Experience_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Award_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Work_Place_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Person_Document_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Person_Inventory_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Dismissal_Reason_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Sick_Leave_Reason_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Business_Trip_Reason_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Wage_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Employment_Source_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Staff_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Indicator_Group_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Id return number;
  ----------------------------------------------------------------------------------------------------  
  Function Recommendation_Id return number;
  ----------------------------------------------------------------------------------------------------
  Function Badge_Template_Id return number;
end Href_Next;
/
create or replace package body Href_Next is
  ----------------------------------------------------------------------------------------------------  
  Function Fixed_Term_Base_Id return number is
  begin
    return Href_Fixed_Term_Bases_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Edu_Stage_Id return number is
  begin
    return Href_Edu_Stages_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Science_Branch_Id return number is
  begin
    return Href_Science_Branches_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Institution_Id return number is
  begin
    return Href_Institutions_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Specialty_Id return number is
  begin
    return Href_Specialties_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Lang_Id return number is
  begin
    return Href_Langs_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Lang_Level_Id return number is
  begin
    return Href_Lang_Levels_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Document_Type_Id return number is
  begin
    return Href_Document_Types_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Reference_Type_Id return number is
  begin
    return Href_Reference_Types_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Relation_Degree_Id return number is
  begin
    return Href_Relation_Degrees_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Marital_Status_Id return number is
  begin
    return Href_Marital_Statuses_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Experience_Type_Id return number is
  begin
    return Href_Experience_Types_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id return number is
  begin
    return Href_Nationalities_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Award_Id return number is
  begin
    return Href_Awards_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Inventory_Type_Id return number is
  begin
    return Href_Inventory_Types_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Edu_Stage_Id return number is
  begin
    return Href_Person_Edu_Stages_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Reference_Id return number is
  begin
    return Href_Person_References_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Family_Member_Id return number is
  begin
    return Href_Person_Family_Members_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Marital_Status_Id return number is
  begin
    return Href_Person_Marital_Statuses_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Experience_Id return number is
  begin
    return Href_Person_Experiences_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Award_Id return number is
  begin
    return Href_Person_Awards_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Work_Place_Id return number is
  begin
    return Href_Person_Work_Places_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Person_Document_Id return number is
  begin
    return Href_Person_Documents_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Inventory_Id return number is
  begin
    return Href_Person_Inventories_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id return number is
  begin
    return Href_Labor_Functions_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dismissal_Reason_Id return number is
  begin
    return Href_Dismissal_Reasons_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Sick_Leave_Reason_Id return number is
  begin
    return Href_Sick_Leave_Reasons_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Business_Trip_Reason_Id return number is
  begin
    return Href_Business_Trip_Reasons_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Wage_Id return number is
  begin
    return Href_Wages_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employment_Source_Id return number is
  begin
    return Href_Employment_Sources_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Staff_Id return number is
  begin
    return Href_Staffs_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Group_Id return number is
  begin
    return Href_Indicator_Groups_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id return number is
  begin
    return Href_Indicators_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Id return number is
  begin
    return Href_Ftes_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Recommendation_Id return number is
  begin
    return Href_Candidate_Recoms_Sq.Nextval;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Badge_Template_Id return number is
  begin
    return Href_Badge_Templates_Sq.Nextval;
  end;

end Href_Next;
/

create or replace package Href_Pref is
  ----------------------------------------------------------------------------------------------------
  type Person_Rt is record(
    Company_Id           number,
    Person_Id            number,
    First_Name           varchar2(250 char),
    Last_Name            varchar2(250 char),
    Middle_Name          varchar2(250 char),
    Gender               varchar2(1),
    Birthday             date,
    Nationality_Id       number,
    Photo_Sha            varchar2(64),
    Tin                  varchar2(18 char),
    Iapa                 varchar2(20 char),
    Npin                 varchar2(14 char),
    Region_Id            number,
    Main_Phone           varchar2(100 char),
    Email                varchar2(100 char),
    Address              varchar2(500 char),
    Legal_Address        varchar2(300 char),
    Key_Person           varchar2(1),
    Extra_Phone          varchar2(100 char),
    Corporate_Email      varchar2(100 char),
    Access_All_Employees varchar2(1),
    Access_Hidden_Salary varchar2(1),
    State                varchar2(1),
    Code                 varchar2(50 char));
  ----------------------------------------------------------------------------------------------------
  type Person_Lang_Rt is record(
    Lang_Id       number,
    Lang_Level_Id number);
  type Person_Lang_Nt is table of Person_Lang_Rt;
  ----------------------------------------------------------------------------------------------------
  type Person_Experience_Rt is record(
    Person_Experience_Id number,
    Experience_Type_Id   number,
    Is_Working           varchar2(1),
    Start_Date           date,
    Num_Year             number,
    Num_Month            number,
    Num_Day              number);
  type Person_Experience_Nt is table of Person_Experience_Rt;
  ----------------------------------------------------------------------------------------------------
  type Employee_Info_Rt is record(
    Context_Id number,
    Column_Key varchar2(100),
    Event      varchar2(1),
    value      varchar2(2000),
    timestamp  date,
    User_Id    number);
  type Employee_Info_Nt is table of Employee_Info_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Recom_Rt is record(
    Recommendation_Id   number,
    Sender_Name         varchar2(300 char),
    Sender_Phone_Number varchar2(30 char),
    Sender_Email        varchar2(320 char),
    File_Sha            varchar2(64),
    Order_No            number,
    Feedback            varchar2(300 char),
    Note                varchar2(300 char));
  type Candidate_Recom_Nt is table of Candidate_Recom_Rt;
  ----------------------------------------------------------------------------------------------------
  type Candidate_Rt is record(
    Company_Id       number,
    Filial_Id        number,
    Person_Type_Id   number,
    Candidate_Kind   varchar2(1),
    Source_Id        number,
    Wage_Expectation number,
    Cv_Sha           varchar2(64),
    Note             varchar2(300 char),
    Extra_Phone      varchar2(100 char),
    Edu_Stages       Array_Number,
    Candidate_Jobs   Array_Number,
    Person           Person_Rt,
    Langs            Person_Lang_Nt,
    Experiences      Person_Experience_Nt,
    Recommendations  Candidate_Recom_Nt);
  ----------------------------------------------------------------------------------------------------
  type Employee_Rt is record(
    Person    Person_Rt,
    Filial_Id number,
    State     varchar2(1));
  ----------------------------------------------------------------------------------------------------
  type Indicator_Rt is record(
    Indicator_Id    number,
    Indicator_Value number);
  type Indicator_Nt is table of Indicator_Rt;
  ----------------------------------------------------------------------------------------------------
  type Staff_Licensed_Rt is record(
    Staff_Id number,
    Period   date,
    Licensed varchar2(1));
  type Staff_Licensed_Nt is table of Staff_Licensed_Rt;
  ----------------------------------------------------------------------------------------------------
  type Oper_Type_Rt is record(
    Oper_Type_Id  number,
    Indicator_Ids Array_Number);
  type Oper_Type_Nt is table of Oper_Type_Rt;
  ----------------------------------------------------------------------------------------------------
  type Period_Rt is record(
    Period_Begin date,
    Period_End   date);
  type Period_Nt is table of Period_Rt;
  -- Fte limit
  ----------------------------------------------------------------------------------------------------
  type Fte_Limit_Rt is record(
    Fte_Limit_Setting varchar2(1),
    Fte_Limit         number);
  ---------------------------------------------------------------------------------------------------- 
  c_Fte_Limit_Setting constant varchar2(50) := 'VHR:FTE_LIMIT_SETTING';
  c_Fte_Limit         constant varchar2(50) := 'VHR:FTE_LIMIT';
  c_Fte_Limit_Default constant number := 1.5;
  ----------------------------------------------------------------------------------------------------
  type Col_Required_Setting_Rt is record(
    Last_Name              varchar2(1) := 'N',
    Middle_Name            varchar2(1) := 'N',
    Birthday               varchar2(1) := 'N',
    Phone_Number           varchar2(1) := 'N',
    Email                  varchar2(1) := 'N',
    Region                 varchar2(1) := 'N',
    Address                varchar2(1) := 'N',
    Legal_Address          varchar2(1) := 'N',
    Passport               varchar2(1) := 'N',
    Npin                   varchar2(1) := 'N',
    Iapa                   varchar2(1) := 'N',
    Request_Note           varchar2(1) := 'N',
    Request_Note_Limit     number := 0,
    Plan_Change_Note       varchar2(1) := 'N',
    Plan_Change_Note_Limit number := 0);
  ----------------------------------------------------------------------------------------------------  
  type Bank_Account_Rt is record(
    Company_Id        number,
    Bank_Account_Id   number,
    Bank_Id           number,
    Bank_Account_Code varchar2(100 char),
    name              varchar2(200 char),
    Person_Id         number,
    Is_Main           varchar2(1),
    Currency_Id       number,
    Note              varchar2(200 char),
    Card_Number       varchar2(20),
    State             varchar2(1));
  ----------------------------------------------------------------------------------------------------
  -- Pcode Role
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Role_Hr         constant varchar2(10) := 'VHR:1';
  c_Pcode_Role_Supervisor constant varchar2(10) := 'VHR:2';
  c_Pcode_Role_Staff      constant varchar2(10) := 'VHR:3';
  c_Pcode_Role_Accountant constant varchar2(10) := 'VHR:4';
  c_Pcode_Role_Timepad    constant varchar2(10) := 'VHR:5';
  c_Pcode_Role_Recruiter  constant varchar2(10) := 'VHR:6';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Document Type
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Document_Type_Default_Passport constant varchar2(20) := 'VHR:1';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Status_New      constant varchar2(1) := 'N';
  c_Person_Document_Status_Approved constant varchar2(1) := 'A';
  c_Person_Document_Status_Rejected constant varchar2(1) := 'R';
  ----------------------------------------------------------------------------------------------------
  -- Person Document Owe Status
  ----------------------------------------------------------------------------------------------------
  c_Person_Document_Owe_Status_Complete constant varchar2(1) := 'C';
  c_Person_Document_Owe_Status_Partial  constant varchar2(1) := 'P';
  c_Person_Document_Owe_Status_Exempt   constant varchar2(1) := 'E';
  ----------------------------------------------------------------------------------------------------
  -- Pcode Indicator
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Indicator_Wage                          constant varchar2(20) := 'VHR:1';
  c_Pcode_Indicator_Rate                          constant varchar2(20) := 'VHR:2';
  c_Pcode_Indicator_Plan_Days                     constant varchar2(20) := 'VHR:3';
  c_Pcode_Indicator_Fact_Days                     constant varchar2(20) := 'VHR:4';
  c_Pcode_Indicator_Plan_Hours                    constant varchar2(20) := 'VHR:5';
  c_Pcode_Indicator_Fact_Hours                    constant varchar2(20) := 'VHR:6';
  c_Pcode_Indicator_Perf_Bonus                    constant varchar2(20) := 'VHR:7';
  c_Pcode_Indicator_Perf_Extra_Bonus              constant varchar2(20) := 'VHR:8';
  c_Pcode_Indicator_Working_Days                  constant varchar2(20) := 'VHR:9';
  c_Pcode_Indicator_Working_Hours                 constant varchar2(20) := 'VHR:10';
  c_Pcode_Indicator_Sick_Leave_Coefficient        constant varchar2(20) := 'VHR:11';
  c_Pcode_Indicator_Business_Trip_Days            constant varchar2(20) := 'VHR:12';
  c_Pcode_Indicator_Vacation_Days                 constant varchar2(20) := 'VHR:13';
  c_Pcode_Indicator_Mean_Working_Days             constant varchar2(20) := 'VHR:14';
  c_Pcode_Indicator_Sick_Leave_Days               constant varchar2(20) := 'VHR:15';
  c_Pcode_Indicator_Hourly_Wage                   constant varchar2(20) := 'VHR:16';
  c_Pcode_Indicator_Overtime_Hours                constant varchar2(20) := 'VHR:17';
  c_Pcode_Indicator_Overtime_Coef                 constant varchar2(20) := 'VHR:18';
  c_Pcode_Indicator_Penalty_For_Late              constant varchar2(20) := 'VHR:19';
  c_Pcode_Indicator_Penalty_For_Early_Output      constant varchar2(20) := 'VHR:20';
  c_Pcode_Indicator_Penalty_For_Absence           constant varchar2(20) := 'VHR:21';
  c_Pcode_Indicator_Penalty_For_Day_Skip          constant varchar2(20) := 'VHR:22';
  c_Pcode_Indicator_Perf_Penalty                  constant varchar2(20) := 'VHR:23';
  c_Pcode_Indicator_Perf_Extra_Penalty            constant varchar2(20) := 'VHR:24';
  c_Pcode_Indicator_Penalty_For_Mark_Skip         constant varchar2(20) := 'VHR:25';
  c_Pcode_Indicator_Additional_Nighttime          constant varchar2(20) := 'VHR:26';
  c_Pcode_Indicator_Weighted_Turnout              constant varchar2(20) := 'VHR:27';
  c_Pcode_Indicator_Average_Perf_Bonus            constant varchar2(20) := 'VHR:28';
  c_Pcode_Indicator_Average_Perf_Extra_Bonus      constant varchar2(20) := 'VHR:29';
  c_Pcode_Indicator_Trainings_Subjects            constant varchar2(20) := 'VHR:30';
  c_Pcode_Indicator_Exam_Results                  constant varchar2(20) := 'VHR:31';
  c_Pcode_Indicator_Average_Attendance_Percentage constant varchar2(20) := 'VHR:32';
  c_Pcode_Indicator_Average_Perfomance_Percentage constant varchar2(20) := 'VHR:33';
  ----------------------------------------------------------------------------------------------------
  -- indicator groups
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Indicator_Group_Wage       constant varchar2(20) := 'VHR:1';
  c_Pcode_Indicator_Group_Experience constant varchar2(20) := 'VHR:2';
  ----------------------------------------------------------------------------------------------------
  -- Fte Pcode
  ----------------------------------------------------------------------------------------------------
  c_Pcode_Fte_Full_Time    constant varchar2(20) := 'VHR:1';
  c_Pcode_Fte_Part_Time    constant varchar2(20) := 'VHR:2';
  c_Pcode_Fte_Quarter_Time constant varchar2(20) := 'VHR:3';
  ----------------------------------------------------------------------------------------------------
  c_Custom_Fte_Id constant number := -1;
  c_Default_Fte   constant number := 1.0;
  ----------------------------------------------------------------------------------------------------
  -- Staff Status
  ----------------------------------------------------------------------------------------------------
  c_Staff_Status_Working   constant varchar2(1) := 'W';
  c_Staff_Status_Dismissed constant varchar2(1) := 'D';
  c_Staff_Status_Unknown   constant varchar2(1) := 'U';
  ----------------------------------------------------------------------------------------------------
  -- Staff Kind
  ----------------------------------------------------------------------------------------------------
  c_Staff_Kind_Primary   constant varchar2(1) := 'P';
  c_Staff_Kind_Secondary constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Candidate Kind
  ----------------------------------------------------------------------------------------------------
  c_Candidate_Kind_New constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Specialty Kind
  ----------------------------------------------------------------------------------------------------
  c_Specialty_Kind_Group     constant varchar2(1) := 'G';
  c_Specialty_Kind_Specialty constant varchar2(1) := 'S';
  ----------------------------------------------------------------------------------------------------
  -- Employment Source Kind
  ----------------------------------------------------------------------------------------------------
  c_Employment_Source_Kind_Hiring    constant varchar2(1) := 'H';
  c_Employment_Source_Kind_Dismissal constant varchar2(1) := 'D';
  c_Employment_Source_Kind_Both      constant varchar2(1) := 'B';
  ----------------------------------------------------------------------------------------------------
  -- User Access Level
  ----------------------------------------------------------------------------------------------------
  c_User_Access_Level_Personal          constant varchar2(1) := 'P';
  c_User_Access_Level_Direct_Employee   constant varchar2(1) := 'D';
  c_User_Access_Level_Undirect_Employee constant varchar2(1) := 'U';
  c_User_Access_Level_Manual            constant varchar2(1) := 'M';
  c_User_Access_Level_Other             constant varchar2(1) := 'O';
  ----------------------------------------------------------------------------------------------------
  -- Indicator Used
  ----------------------------------------------------------------------------------------------------
  c_Indicator_Used_Constantly    constant varchar2(1) := 'C';
  c_Indicator_Used_Automatically constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Time Formats
  ----------------------------------------------------------------------------------------------------
  c_Time_Format_Minute       constant varchar2(50) := 'hh24:mi';
  c_Date_Format_Year         constant varchar2(50) := 'yyyy';
  c_Date_Format_Month        constant varchar2(50) := 'mm.yyyy';
  c_Date_Format_Day          constant varchar2(50) := 'dd.mm.yyyy';
  c_Date_Format_Minute       constant varchar2(50) := 'dd.mm.yyyy hh24:mi';
  c_Date_Format_Second       constant varchar2(50) := 'dd.mm.yyyy hh24:mi:ss';
  c_Date_Format_Year_Quarter constant varchar2(50) := 'yyyy "Q"q';
  ---------------------------------------------------------------------------------------------------- 
  -- Date trunc formats
  ---------------------------------------------------------------------------------------------------- 
  c_Date_Trunc_Format_Year    constant varchar2(50) := 'yyyy';
  c_Date_Trunc_Format_Month   constant varchar2(50) := 'mm';
  c_Date_Trunc_Format_Quarter constant varchar2(50) := 'q';
  ----------------------------------------------------------------------------------------------------
  -- Max Date
  ----------------------------------------------------------------------------------------------------
  c_Max_Date constant date := to_date('31.12.9999', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Min Date
  ----------------------------------------------------------------------------------------------------
  c_Min_Date constant date := to_date('01.01.0001', c_Date_Format_Day);
  ----------------------------------------------------------------------------------------------------
  -- Dismissal Reason Types
  ----------------------------------------------------------------------------------------------------
  c_Dismissal_Reasons_Type_Positive constant varchar2(1) := 'P';
  c_Dismissal_Reasons_Type_Negative constant varchar2(1) := 'N';
  ----------------------------------------------------------------------------------------------------
  -- Working Time Differences
  ----------------------------------------------------------------------------------------------------
  c_Diff_Hiring    constant number := -2;
  c_Diff_Dismissal constant number := 7;
  ----------------------------------------------------------------------------------------------------
  -- Column required settings
  ----------------------------------------------------------------------------------------------------
  c_Pref_Crs_Last_Name              constant varchar2(50) := 'vhr:href:crs:last_name';
  c_Pref_Crs_Middle_Name            constant varchar2(50) := 'vhr:href:crs:middle_name';
  c_Pref_Crs_Birthday               constant varchar2(50) := 'vhr:href:crs:birthday';
  c_Pref_Crs_Phone_Number           constant varchar2(50) := 'vhr:href:crs:phone_number';
  c_Pref_Crs_Email                  constant varchar2(50) := 'vhr:href:crs:email';
  c_Pref_Crs_Region                 constant varchar2(50) := 'vhr:href:crs:region';
  c_Pref_Crs_Address                constant varchar2(50) := 'vhr:href:crs:address';
  c_Pref_Crs_Legal_Address          constant varchar2(50) := 'vhr:href:crs:legal_address';
  c_Pref_Crs_Passport               constant varchar2(50) := 'vhr:href:crs:passport';
  c_Pref_Crs_Npin                   constant varchar2(50) := 'vhr:href:crs:npin';
  c_Pref_Crs_Iapa                   constant varchar2(50) := 'vhr:href:crs:iapa';
  c_Pref_Crs_Request_Note           constant varchar2(50) := 'vhr:href:crs:request_note';
  c_Pref_Crs_Request_Note_Limit     constant varchar2(50) := 'vhr:href:crs:request_note_limit';
  c_Pref_Crs_Plan_Change_Note       constant varchar2(50) := 'vhr:href:crs:plan_change_note';
  c_Pref_Crs_Plan_Change_Note_Limit constant varchar2(50) := 'vhr:href:crs:plan_change_note_limit';
  ----------------------------------------------------------------------------------------------------
  -- Company badge template
  ----------------------------------------------------------------------------------------------------
  c_Pref_Badge_Template_Id constant varchar2(50) := 'href:company_badge_template_id';
  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  c_Pref_Vpu_Setting constant varchar2(50) := 'href:vpu:setting';
  c_Pref_Vpu_Column  constant varchar2(50) := 'href:vpu:column';
  ----------------------------------------------------------------------------------------------------
  c_Vpu_Column_Name            constant varchar2(1) := 'N';
  c_Vpu_Column_Passport_Number constant varchar2(1) := 'P';
  c_Vpu_Column_Npin            constant varchar2(1) := 'I';
  ----------------------------------------------------------------------------------------------------
  c_Settings_Separator constant varchar2(1) := '$';
  ----------------------------------------------------------------------------------------------------
  -- HTTP METHODS
  ----------------------------------------------------------------------------------------------------
  c_Http_Method_Get    constant varchar2(10) := 'GET';
  c_Http_Method_Put    constant varchar2(10) := 'PUT';
  c_Http_Method_Post   constant varchar2(10) := 'POST';
  c_Http_Method_Delete constant varchar2(10) := 'DELETE';
  ----------------------------------------------------------------------------------------------------  
  -- Set Employee Photo Templates
  ----------------------------------------------------------------------------------------------------
  c_Set_Photo_Template_Fl                  constant varchar2(50) := 'first_name.last_name';
  c_Set_Photo_Template_Lf                  constant varchar2(50) := 'last_name.first_name';
  c_Set_Photo_Template_Fl_Id               constant varchar2(50) := 'first_name.last_name.#id';
  c_Set_Photo_Template_Lf_Id               constant varchar2(50) := 'last_name.first_name.#id';
  c_Set_Photo_Template_Fl_Employee_Number  constant varchar2(50) := 'first_name.last_name.#employee_number';
  c_Set_Photo_Template_Lf_Employee_Number  constant varchar2(50) := 'last_name.first_name.#employee_number';
  c_Set_Photo_Template_Flm                 constant varchar2(50) := 'first_name.last_name.middle_name';
  c_Set_Photo_Template_Lfm                 constant varchar2(50) := 'last_name.first_name.middle_name';
  c_Set_Photo_Template_Flm_Id              constant varchar2(50) := 'first_name.last_name.middle_name.#id';
  c_Set_Photo_Template_Lfm_Id              constant varchar2(50) := 'last_name.first_name.middle_name.#id';
  c_Set_Photo_Template_Flm_Employee_Number constant varchar2(50) := 'first_name.last_name.middle_name.#employee_number';
  c_Set_Photo_Template_Lfm_Employee_Number constant varchar2(50) := 'last_name.first_name.middle_name.#employee_number';
  ----------------------------------------------------------------------------------------------------  
  -- Foto Statuses
  ----------------------------------------------------------------------------------------------------  
  c_Pref_Set_Photo_Status_Success   constant varchar2(1) := 'S';
  c_Pref_Set_Photo_Status_Warning   constant varchar2(1) := 'W';
  c_Pref_Set_Photo_Status_Not_Found constant varchar2(1) := 'N';

end Href_Pref;
/
create or replace package body Href_Pref is
end Href_Pref;
/

create or replace package Href_Util is
  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person               out Href_Pref.Person_Rt,
    i_Company_Id           number,
    i_Person_Id            number,
    i_First_Name           varchar2,
    i_Last_Name            varchar2,
    i_Middle_Name          varchar2,
    i_Gender               varchar2,
    i_Birthday             date,
    i_Nationality_Id       number,
    i_Photo_Sha            varchar2,
    i_Tin                  varchar2,
    i_Iapa                 varchar2,
    i_Npin                 varchar2,
    i_Region_Id            number,
    i_Main_Phone           varchar2,
    i_Email                varchar2,
    i_Address              varchar2,
    i_Legal_Address        varchar2,
    i_Key_Person           varchar2,
    i_Extra_Phone          varchar2 := null,
    i_Corporate_Email      varchar2 := null,
    i_Access_All_Employees varchar2 := null,
    i_Access_Hidden_Salary varchar2 := null,
    i_State                varchar2,
    i_Code                 varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_New
  (
    o_Candidate        out Href_Pref.Candidate_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Candidate_Id     number,
    i_Person_Type_Id   number,
    i_Candidate_Kind   varchar2,
    i_First_Name       varchar2,
    i_Last_Name        varchar2,
    i_Middle_Name      varchar2,
    i_Gender           varchar2,
    i_Birthday         date,
    i_Photo_Sha        varchar2,
    i_Region_Id        number,
    i_Main_Phone       varchar2,
    i_Extra_Phone      varchar2,
    i_Email            varchar2,
    i_Address          varchar2,
    i_Legal_Address    varchar2,
    i_Source_Id        number,
    i_Wage_Expectation number,
    i_Cv_Sha           varchar2,
    i_Note             varchar2,
    i_Edu_Stages       Array_Number,
    i_Candidate_Jobs   Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Lang
  (
    p_Candidate     in out nocopy Href_Pref.Candidate_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Experience
  (
    p_Candidate            in out nocopy Href_Pref.Candidate_Rt,
    i_Person_Experience_Id number,
    i_Experience_Type_Id   number,
    i_Is_Working           varchar2,
    i_Start_Date           date,
    i_Num_Year             number,
    i_Num_Month            number,
    i_Num_Day              number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Recom
  (
    p_Candidate           in out nocopy Href_Pref.Candidate_Rt,
    i_Recommendation_Id   number,
    i_Sender_Name         varchar2,
    i_Sender_Phone_Number varchar2,
    i_Sender_Email        varchar2,
    i_File_Sha            varchar2,
    i_Order_No            number,
    i_Feedback            varchar2,
    i_Note                varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicators      in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  );
  ----------------------------------------------------------------------------------------------------
  Function Load_Candidate_Form_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Href_Candidate_Ref_Settings%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Employee_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Date        date
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return number;
  ---------------------------------------------------------------------------------------------------- 
  Function Get_Division_Manager
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return Mrf_Robots%rowtype;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Href_Pref.Staff_Licensed_Nt
    pipelined;
  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  );
  ----------------------------------------------------------------------------------------------------
  Function Staff_Id_By_Staff_Number
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Number varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Doc_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Indicator_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Fte_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Random_Integer
  (
    i_Low  number,
    i_High number
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Default_User_Login
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Template   varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Direct_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Child_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Parents          Array_Number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Manual_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Chief_Subordinates
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Direct_Divisions Array_Number
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Is_Director
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinate_Divisions
  (
    o_Subordinate_Chiefs out Array_Number,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Direct             boolean,
    i_Indirect           boolean,
    i_Manual             boolean,
    i_Gather_Chiefs      boolean,
    i_Employee_Id        number,
    i_Only_Departments   varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Direct_Employee varchar2,
    i_Employee_Id     number,
    i_Self            varchar2 := 'N'
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------  
  Function Company_Badge_Template_Id(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Col_Required_Settings(i_Company_Id number) return Href_Pref.Col_Required_Setting_Rt;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------  
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Name
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Name       varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Phone
  (
    i_Company_Id number,
    i_Person_Id  number := null,
    i_Phone      varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Setting(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Column(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return varchar2 Result_Cache;
  ----------------------------------------------------------------------------------------------------
  Function Has_Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Request_Note_Is_Required(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Request_Note_Limit(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Plan_Change_Note_Is_Required(i_Company_Id number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Load_Plan_Change_Note_Limit(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Function Load_Fte_Limit(i_Company_Id number) return Href_Pref.Fte_Limit_Rt;
  ----------------------------------------------------------------------------------------------------  
  Function Set_Photo_Templates return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Bank_Account_New
  (
    o_Bank_Account      out Href_Pref.Bank_Account_Rt,
    i_Company_Id        number,
    i_Bank_Account_Id   number,
    i_Bank_Id           number,
    i_Bank_Account_Code varchar2,
    i_Name              varchar2,
    i_Person_Id         number,
    i_Is_Main           varchar2,
    i_Currency_Id       number,
    i_Note              varchar2,
    i_Card_Number       varchar2,
    i_State             varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind(i_Kind varchar2) return varchar2;
  Function Specialty_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status(i_Staff_Status varchar2) return varchar2;
  Function Staff_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind(i_Staff_Kind varchar2) return varchar2;
  Function Staff_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source(i_Source_Kind varchar2) return varchar2;
  Function Employment_Source_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_User_Acces_Level(i_Acces_Level varchar2) return varchar2;
  Function User_Acces_Levels return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used(i_Used varchar2) return varchar2;
  Function Indicator_Useds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind(i_Kind varchar2) return varchar2;
  Function Candidate_Kinds return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type(i_Dismissal_Reasons_Type varchar2) return varchar2;
  Function Dismissal_Reasons_Type return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Custom_Fte_Name return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_From_To_Rule
  (
    i_From      number,
    i_To        number,
    i_Rule_Unit varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status(i_Status varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status(i_Status varchar2) return varchar2;
  Function Person_Document_Owe_Status return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column(i_Column varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Employee_Personal_Audit_Column_Names return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Employee_Contact_Audit_Column_Names return Matrix_Varchar2;
end Href_Util;
/
create or replace package body Href_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HREF:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_New
  (
    o_Person               out Href_Pref.Person_Rt,
    i_Company_Id           number,
    i_Person_Id            number,
    i_First_Name           varchar2,
    i_Last_Name            varchar2,
    i_Middle_Name          varchar2,
    i_Gender               varchar2,
    i_Birthday             date,
    i_Nationality_Id       number,
    i_Photo_Sha            varchar2,
    i_Tin                  varchar2,
    i_Iapa                 varchar2,
    i_Npin                 varchar2,
    i_Region_Id            number,
    i_Main_Phone           varchar2,
    i_Email                varchar2,
    i_Address              varchar2,
    i_Legal_Address        varchar2,
    i_Key_Person           varchar2,
    i_Extra_Phone          varchar2 := null,
    i_Corporate_Email      varchar2 := null,
    i_Access_All_Employees varchar2 := null,
    i_Access_Hidden_Salary varchar2 := null,
    i_State                varchar2,
    i_Code                 varchar2
  ) is
  begin
    o_Person.Company_Id           := i_Company_Id;
    o_Person.Person_Id            := i_Person_Id;
    o_Person.First_Name           := i_First_Name;
    o_Person.Last_Name            := i_Last_Name;
    o_Person.Middle_Name          := i_Middle_Name;
    o_Person.Gender               := i_Gender;
    o_Person.Birthday             := i_Birthday;
    o_Person.Nationality_Id       := i_Nationality_Id;
    o_Person.Photo_Sha            := i_Photo_Sha;
    o_Person.Tin                  := i_Tin;
    o_Person.Iapa                 := i_Iapa;
    o_Person.Npin                 := i_Npin;
    o_Person.Region_Id            := i_Region_Id;
    o_Person.Main_Phone           := i_Main_Phone;
    o_Person.Email                := i_Email;
    o_Person.Address              := i_Address;
    o_Person.Legal_Address        := i_Legal_Address;
    o_Person.Key_Person           := i_Key_Person;
    o_Person.Extra_Phone          := i_Extra_Phone;
    o_Person.Corporate_Email      := i_Corporate_Email;
    o_Person.Access_All_Employees := i_Access_All_Employees;
    o_Person.Access_Hidden_Salary := i_Access_Hidden_Salary;
    o_Person.State                := i_State;
    o_Person.Code                 := i_Code;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_New
  (
    o_Candidate        out Href_Pref.Candidate_Rt,
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Candidate_Id     number,
    i_Person_Type_Id   number,
    i_Candidate_Kind   varchar2,
    i_First_Name       varchar2,
    i_Last_Name        varchar2,
    i_Middle_Name      varchar2,
    i_Gender           varchar2,
    i_Birthday         date,
    i_Photo_Sha        varchar2,
    i_Region_Id        number,
    i_Main_Phone       varchar2,
    i_Extra_Phone      varchar2,
    i_Email            varchar2,
    i_Address          varchar2,
    i_Legal_Address    varchar2,
    i_Source_Id        number,
    i_Wage_Expectation number,
    i_Cv_Sha           varchar2,
    i_Note             varchar2,
    i_Edu_Stages       Array_Number,
    i_Candidate_Jobs   Array_Number
  ) is
  begin
    o_Candidate.Company_Id       := i_Company_Id;
    o_Candidate.Filial_Id        := i_Filial_Id;
    o_Candidate.Person_Type_Id   := i_Person_Type_Id;
    o_Candidate.Candidate_Kind   := i_Candidate_Kind;
    o_Candidate.Source_Id        := i_Source_Id;
    o_Candidate.Wage_Expectation := i_Wage_Expectation;
    o_Candidate.Cv_Sha           := i_Cv_Sha;
    o_Candidate.Note             := i_Note;
    o_Candidate.Extra_Phone      := i_Extra_Phone;
    o_Candidate.Edu_Stages       := i_Edu_Stages;
    o_Candidate.Candidate_Jobs   := i_Candidate_Jobs;
  
    o_Candidate.Person.Company_Id    := i_Company_Id;
    o_Candidate.Person.Person_Id     := i_Candidate_Id;
    o_Candidate.Person.First_Name    := i_First_Name;
    o_Candidate.Person.Last_Name     := i_Last_Name;
    o_Candidate.Person.Middle_Name   := i_Middle_Name;
    o_Candidate.Person.Gender        := i_Gender;
    o_Candidate.Person.Birthday      := i_Birthday;
    o_Candidate.Person.Photo_Sha     := i_Photo_Sha;
    o_Candidate.Person.Region_Id     := i_Region_Id;
    o_Candidate.Person.Main_Phone    := i_Main_Phone;
    o_Candidate.Person.Email         := i_Email;
    o_Candidate.Person.Address       := i_Address;
    o_Candidate.Person.Legal_Address := i_Legal_Address;
    o_Candidate.Person.State         := 'A';
  
    o_Candidate.Langs           := Href_Pref.Person_Lang_Nt();
    o_Candidate.Experiences     := Href_Pref.Person_Experience_Nt();
    o_Candidate.Recommendations := Href_Pref.Candidate_Recom_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Lang
  (
    p_Candidate     in out nocopy Href_Pref.Candidate_Rt,
    i_Lang_Id       number,
    i_Lang_Level_Id number
  ) is
    v_Lang Href_Pref.Person_Lang_Rt;
  begin
    v_Lang.Lang_Id       := i_Lang_Id;
    v_Lang.Lang_Level_Id := i_Lang_Level_Id;
  
    p_Candidate.Langs.Extend;
    p_Candidate.Langs(p_Candidate.Langs.Count) := v_Lang;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Experience
  (
    p_Candidate            in out nocopy Href_Pref.Candidate_Rt,
    i_Person_Experience_Id number,
    i_Experience_Type_Id   number,
    i_Is_Working           varchar2,
    i_Start_Date           date,
    i_Num_Year             number,
    i_Num_Month            number,
    i_Num_Day              number
  ) is
    v_Experience Href_Pref.Person_Experience_Rt;
  begin
    v_Experience.Person_Experience_Id := i_Person_Experience_Id;
    v_Experience.Experience_Type_Id   := i_Experience_Type_Id;
    v_Experience.Is_Working           := i_Is_Working;
    v_Experience.Start_Date           := i_Start_Date;
    v_Experience.Num_Year             := i_Num_Year;
    v_Experience.Num_Month            := i_Num_Month;
    v_Experience.Num_Day              := i_Num_Day;
  
    p_Candidate.Experiences.Extend;
    p_Candidate.Experiences(p_Candidate.Experiences.Count) := v_Experience;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Candidate_Add_Recom
  (
    p_Candidate           in out nocopy Href_Pref.Candidate_Rt,
    i_Recommendation_Id   number,
    i_Sender_Name         varchar2,
    i_Sender_Phone_Number varchar2,
    i_Sender_Email        varchar2,
    i_File_Sha            varchar2,
    i_Order_No            number,
    i_Feedback            varchar2,
    i_Note                varchar2
  ) is
    v_Recommendation Href_Pref.Candidate_Recom_Rt;
  begin
    v_Recommendation.Recommendation_Id   := i_Recommendation_Id;
    v_Recommendation.Sender_Name         := i_Sender_Name;
    v_Recommendation.Sender_Phone_Number := i_Sender_Phone_Number;
    v_Recommendation.Sender_Email        := i_Sender_Email;
    v_Recommendation.File_Sha            := i_File_Sha;
    v_Recommendation.Order_No            := i_Order_No;
    v_Recommendation.Feedback            := i_Feedback;
    v_Recommendation.Note                := i_Note;
  
    p_Candidate.Recommendations.Extend;
    p_Candidate.Recommendations(p_Candidate.Recommendations.Count) := v_Recommendation;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Indicator_Add
  (
    p_Indicators      in out nocopy Href_Pref.Indicator_Nt,
    i_Indicator_Id    number,
    i_Indicator_Value number
  ) is
    v_Indicator Href_Pref.Indicator_Rt;
  begin
    v_Indicator.Indicator_Id    := i_Indicator_Id;
    v_Indicator.Indicator_Value := i_Indicator_Value;
  
    p_Indicators.Extend;
    p_Indicators(p_Indicators.Count) := v_Indicator;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Candidate_Form_Settings
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) return Href_Candidate_Ref_Settings%rowtype is
    result Href_Candidate_Ref_Settings%rowtype;
  begin
    if not z_Href_Candidate_Ref_Settings.Exist(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               o_Row        => result) then
      Result.Company_Id     := i_Company_Id;
      Result.Filial_Id      := i_Filial_Id;
      Result.Region         := 'N';
      Result.Address        := 'N';
      Result.Experience     := 'N';
      Result.Source         := 'N';
      Result.Recommendation := 'N';
      Result.Cv             := 'N';
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Employee_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return number is
  begin
    return z_Href_Staffs.Take(i_Company_Id => i_Company_Id, --
                              i_Filial_Id  => i_Filial_Id, --
                              i_Staff_Id   => i_Staff_Id).Employee_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns last active staff id
  -- returns null if no staff found
  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return number is
    result number;
  begin
    select s.Staff_Id
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
     order by s.Hiring_Date desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Primary_Staff_Id
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number,
    i_Date        date
  ) return number is
    result number;
  begin
    select s.Staff_Id
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date <= i_Date
     order by s.Hiring_Date desc
     fetch first row only;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns primary staff_id that was active on duration of period
  -- returns null if no such staff found
  Function Get_Primary_Staff_Id
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Id  number,
    i_Period_Begin date,
    i_Period_End   date
  ) return number is
    v_Staff_Id number;
  begin
    select s.Staff_Id
      into v_Staff_Id
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and s.Employee_Id = i_Employee_Id
       and s.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
       and s.State = 'A'
       and s.Hiring_Date <= i_Period_Begin
       and Nvl(s.Dismissal_Date, i_Period_End) >= i_Period_End;
  
    return v_Staff_Id;
  exception
    when No_Data_Found then
      return null;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Get_Division_Manager
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return Mrf_Robots%rowtype is
    r_Division_Manager Mrf_Division_Managers%rowtype;
  begin
    r_Division_Manager := z_Mrf_Division_Managers.Take(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Division_Id => i_Division_Id);
  
    return z_Mrf_Robots.Take(i_Company_Id => i_Company_Id,
                             i_Filial_Id  => i_Filial_Id,
                             i_Robot_Id   => r_Division_Manager.Manager_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Id
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) return number is
    r_Robot       Mrf_Robots%rowtype;
    v_Division_Id number;
  begin
    v_Division_Id := z_Hrm_Robots.Take(i_Company_Id => i_Company_Id, --
                     i_Filial_Id => i_Filial_Id, --
                     i_Robot_Id => i_Robot_Id).Org_Unit_Id;
  
    r_Robot := Get_Division_Manager(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Division_Id => v_Division_Id);
  
    if r_Robot.Robot_Id = i_Robot_Id then
      v_Division_Id := z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                       i_Filial_Id => i_Filial_Id, --
                       i_Division_Id => r_Robot.Division_Id).Parent_Id;
    
      r_Robot := Get_Division_Manager(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Division_Id => v_Division_Id);
    end if;
  
    return r_Robot.Person_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    v_Manager_Id number;
    r_Staff      Href_Staffs%rowtype;
  begin
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    v_Manager_Id := Get_Manager_Id(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => r_Staff.Robot_Id);
  
    return z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                     i_Person_Id  => v_Manager_Id).Name;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manager_Name
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Employee_Id number
  ) return varchar2 is
    v_Staff_Id number;
  begin
    v_Staff_Id := Get_Primary_Staff_Id(i_Company_Id   => i_Company_Id,
                                       i_Filial_Id    => i_Filial_Id,
                                       i_Employee_Id  => i_Employee_Id,
                                       i_Period_Begin => Trunc(sysdate),
                                       i_Period_End   => Trunc(sysdate));
  
    return Get_Manager_Name(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => v_Staff_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Name
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    result Mr_Natural_Persons.Name%type;
  begin
    select (select w.Name
              from Mr_Natural_Persons w
             where w.Company_Id = q.Company_Id
               and w.Person_Id = q.Employee_Id)
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return varchar2 is
    result Mr_Natural_Persons.Name%type;
  begin
    select (select w.Code
              from Mr_Natural_Persons w
             where w.Company_Id = q.Company_Id
               and w.Person_Id = q.Employee_Id)
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id;
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Id_By_Staff_Number
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Number varchar2
  ) return number is
    result number;
  begin
    select q.Staff_Id
      into result
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and Upper(q.Staff_Number) = Upper(i_Staff_Number);
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed_Period
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return Href_Pref.Staff_Licensed_Nt
    pipelined is
    r_Staff          Href_Staffs%rowtype;
    v_Staff_Licensed Href_Pref.Staff_Licensed_Rt;
    v_Begin_Date     date;
    v_End_Date       date;
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    v_Staff_Licensed.Staff_Id := i_Staff_Id;
    v_Begin_Date              := Greatest(r_Staff.Hiring_Date, i_Period_Begin);
    v_End_Date                := Least(Nvl(r_Staff.Dismissal_Date, i_Period_End), i_Period_End);
  
    for r in (select Dates.Period,
                     Nvl((select 'N'
                           from Hlic_Unlicensed_Employees Le
                          where Le.Company_Id = r_Staff.Company_Id
                            and Le.Employee_Id = r_Staff.Employee_Id
                            and Le.Licensed_Date = Dates.Period),
                         'Y') as Licensed
                from (select (v_Begin_Date + level - 1) as Period
                        from Dual
                      connect by level <= (v_End_Date - v_Begin_Date + 1)) Dates)
    loop
      v_Staff_Licensed.Period   := r.Period;
      v_Staff_Licensed.Licensed := r.Licensed;
    
      pipe row(v_Staff_Licensed);
    end loop;
  
    return;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) return varchar2 is
    v_Count number;
  begin
    select count(*)
      into v_Count
      from Staff_Licensed_Period(i_Company_Id   => i_Company_Id,
                                 i_Filial_Id    => i_Filial_Id,
                                 i_Staff_Id     => i_Staff_Id,
                                 i_Period_Begin => i_Period_Begin,
                                 i_Period_End   => i_Period_End) q
     where q.Licensed = 'N';
  
    if v_Count = 0 then
      return 'Y';
    else
      return 'N';
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Staff_Licensed
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Period_Begin date,
    i_Period_End   date
  ) is
  begin
    for r in (select q.Period
                from Staff_Licensed_Period(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Staff_Id     => i_Staff_Id,
                                           i_Period_Begin => i_Period_Begin,
                                           i_Period_End   => i_Period_End) q
               where q.Licensed = 'N'
                 and Rownum = 1)
    loop
      Href_Error.Raise_018(i_Employee_Name  => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                           i_Period_Begin   => i_Period_Begin,
                           i_Period_End     => i_Period_End,
                           i_Unlicensed_Day => r.Period);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Labor_Function_Id
      into result
      from Href_Labor_Functions q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_019(i_Labor_Function_Code => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Labor_Function_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Labor_Function_Id
      into result
      from Href_Labor_Functions q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_020(i_Labor_Function_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Code
  (
    i_Company_Id number,
    i_Code       varchar2
  ) return number is
    result number;
  begin
    select q.Fixed_Term_Base_Id
      into result
      from Href_Fixed_Term_Bases q
     where q.Company_Id = i_Company_Id
       and q.Code = i_Code;
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_021(i_Fixed_Term_Base_Code => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fixed_Term_Base_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Fixed_Term_Base_Id
      into result
      from Href_Fixed_Term_Bases q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  exception
    when No_Data_Found then
      Href_Error.Raise_022(i_Fixed_Term_Base_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Doc_Type_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select q.Doc_Type_Id
      into result
      from Href_Document_Types q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select Indicator_Id
      into result
      from Href_Indicators
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Group_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number Result_Cache is
    result number;
  begin
    select Indicator_Group_Id
      into result
      from Href_Indicator_Groups
     where Company_Id = i_Company_Id
       and Pcode = i_Pcode;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Fte_Id
      into result
      from Href_Ftes q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_023(i_Fte_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Fte_Id
  (
    i_Company_Id number,
    i_Pcode      varchar2
  ) return number is
    result number;
  begin
    select q.Fte_Id
      into result
      from Href_Ftes q
     where q.Company_Id = i_Company_Id
       and q.Pcode = i_Pcode;
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_024(i_Fte_Pcode => i_Pcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Nationality_Id_By_Name
  (
    i_Company_Id number,
    i_Name       varchar2
  ) return number is
    result number;
  begin
    select q.Nationality_Id
      into result
      from Href_Nationalities q
     where q.Company_Id = i_Company_Id
       and Lower(q.Name) = Lower(i_Name);
  
    return result;
  
  exception
    when No_Data_Found then
      Href_Error.Raise_029(i_Nationality_Name => i_Name);
  end;

  ----------------------------------------------------------------------------------------------------
  -- returns randoms integer in [low, high] interval
  ----------------------------------------------------------------------------------------------------
  Function Random_Integer
  (
    i_Low  number,
    i_High number
  ) return number is
  begin
    return Trunc(Dbms_Random.Value(i_Low, i_High + 1));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Default_User_Login
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Template   varchar2
  ) return varchar2 is
    r_Person Mr_Natural_Persons%rowtype;
    v_Login  varchar2(100);
  begin
    r_Person := z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  
    v_Login := Regexp_Replace(i_Template, 'first_name', r_Person.First_Name);
    v_Login := Regexp_Replace(v_Login, 'last_name', r_Person.Last_Name);
    v_Login := Md_Util.Login_Fixer(v_Login);
  
    return Regexp_Replace(v_Login, '@', '');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Direct_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Rd.Division_Id
      bulk collect
      into result
      from Mrf_Robots r
      join Hrm_Robot_Divisions Rd
        on Rd.Company_Id = r.Company_Id
       and Rd.Filial_Id = r.Filial_Id
       and Rd.Robot_Id = r.Robot_Id
       and Rd.Access_Type = Hrm_Pref.c_Access_Type_Structural
      join Hrm_Divisions Dv
        on Dv.Company_Id = Rd.Company_Id
       and Dv.Filial_Id = Rd.Filial_Id
       and Dv.Division_Id = Rd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where r.Company_Id = i_Company_Id
       and r.Filial_Id = i_Filial_Id
       and r.Person_Id = i_Employee_Id;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Child_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Parents          Array_Number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Pd.Division_Id
      bulk collect
      into result
      from Mhr_Parent_Divisions Pd
      join Hrm_Divisions Dv
        on Dv.Company_Id = Pd.Company_Id
       and Dv.Filial_Id = Pd.Filial_Id
       and Dv.Division_Id = Pd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Parent_Id member of i_Parents;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Manual_Divisions
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Employee_Id      number,
    i_Only_Departments varchar2 := 'N'
  ) return Array_Number is
    result Array_Number;
  begin
    select Rd.Division_Id
      bulk collect
      into result
      from Mrf_Robots r
      join Hrm_Robot_Divisions Rd
        on Rd.Company_Id = r.Company_Id
       and Rd.Filial_Id = r.Filial_Id
       and Rd.Robot_Id = r.Robot_Id
       and Rd.Access_Type = Hrm_Pref.c_Access_Type_Manual
      join Hrm_Divisions Dv
        on Dv.Company_Id = Rd.Company_Id
       and Dv.Filial_Id = Rd.Filial_Id
       and Dv.Division_Id = Rd.Division_Id
       and (i_Only_Departments = 'N' or Dv.Is_Department = 'Y')
     where r.Company_Id = i_Company_Id
       and r.Filial_Id = i_Filial_Id
       and r.Person_Id = i_Employee_Id;
  
    result := result multiset union
              Get_Child_Divisions(i_Company_Id       => i_Company_Id,
                                  i_Filial_Id        => i_Filial_Id,
                                  i_Only_Departments => i_Only_Departments,
                                  i_Parents          => result);
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Chief_Subordinates
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Direct_Divisions Array_Number
  ) return Array_Number is
    result Array_Number;
  begin
    select Rb.Person_Id
      bulk collect
      into result
      from Mhr_Parent_Divisions Pd
      join Mrf_Division_Managers p
        on p.Company_Id = Pd.Company_Id
       and p.Filial_Id = Pd.Filial_Id
       and p.Division_Id = Pd.Division_Id
      join Mrf_Robots Rb
        on Rb.Company_Id = p.Company_Id
       and Rb.Filial_Id = p.Filial_Id
       and Rb.Robot_Id = p.Manager_Id
     where Pd.Company_Id = i_Company_Id
       and Pd.Filial_Id = i_Filial_Id
       and Pd.Parent_Id member of i_Direct_Divisions
       and Pd.Lvl = 1;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinate_Divisions
  (
    o_Subordinate_Chiefs out Array_Number,
    i_Company_Id         number,
    i_Filial_Id          number,
    i_Direct             boolean,
    i_Indirect           boolean,
    i_Manual             boolean,
    i_Gather_Chiefs      boolean,
    i_Employee_Id        number,
    i_Only_Departments   varchar2 := 'N'
  ) return Array_Number is
    v_Direct_Divisions Array_Number;
    result             Array_Number := Array_Number();
  begin
    v_Direct_Divisions := Get_Direct_Divisions(i_Company_Id       => i_Company_Id,
                                               i_Filial_Id        => i_Filial_Id,
                                               i_Employee_Id      => i_Employee_Id,
                                               i_Only_Departments => i_Only_Departments);
  
    o_Subordinate_Chiefs := Array_Number();
  
    if i_Direct then
      result := v_Direct_Divisions;
    
      if i_Gather_Chiefs then
        o_Subordinate_Chiefs := Get_Chief_Subordinates(i_Company_Id       => i_Company_Id,
                                                       i_Filial_Id        => i_Filial_Id,
                                                       i_Direct_Divisions => v_Direct_Divisions);
      end if;
    end if;
  
    if i_Indirect then
      result := result multiset union
                Get_Child_Divisions(i_Company_Id       => i_Company_Id,
                                    i_Filial_Id        => i_Filial_Id,
                                    i_Parents          => v_Direct_Divisions,
                                    i_Only_Departments => i_Only_Departments);
    end if;
  
    if i_Manual then
      result := result multiset union
                Get_Manual_Divisions(i_Company_Id       => i_Company_Id,
                                     i_Filial_Id        => i_Filial_Id,
                                     i_Employee_Id      => i_Employee_Id,
                                     i_Only_Departments => i_Only_Departments);
    end if;
  
    return set(result);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Director
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) return boolean is
    v_Dummy varchar2(1);
  begin
    select 'X'
      into v_Dummy
      from Href_Staffs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and exists (select 1
              from Mrf_Division_Managers m
              join Mhr_Divisions d
                on d.Company_Id = m.Company_Id
               and d.Filial_Id = m.Filial_Id
               and d.Division_Id = m.Division_Id
               and d.Parent_Id is null
             where m.Company_Id = q.Company_Id
               and m.Filial_Id = q.Filial_Id
               and m.Manager_Id = q.Robot_Id);
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Subordinates
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Direct_Employee varchar2,
    i_Employee_Id     number,
    i_Self            varchar2 := 'N'
  ) return Array_Number is
    v_Current_Date date := Trunc(Htt_Util.Get_Current_Date(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id));
  
    v_Division_Ids       Array_Number;
    v_Subordinate_Chiefs Array_Number;
  
    result Array_Number := Array_Number();
  begin
    if i_Direct_Employee is null or i_Direct_Employee <> 'Y' and i_Direct_Employee <> 'N' then
      b.Raise_Not_Implemented;
    end if;
  
    v_Division_Ids := Get_Subordinate_Divisions(o_Subordinate_Chiefs => v_Subordinate_Chiefs,
                                                i_Company_Id         => i_Company_Id,
                                                i_Filial_Id          => i_Filial_Id,
                                                i_Direct             => true,
                                                i_Indirect           => i_Direct_Employee = 'N',
                                                i_Manual             => false,
                                                i_Gather_Chiefs      => true,
                                                i_Employee_Id        => i_Employee_Id);
  
    select s.Staff_Id
      bulk collect
      into result
      from Href_Staffs s
     where s.Company_Id = i_Company_Id
       and s.Filial_Id = i_Filial_Id
       and (i_Self = 'Y' or s.Employee_Id <> i_Employee_Id)
       and s.State = 'A'
       and v_Current_Date between s.Hiring_Date and Nvl(s.Dismissal_Date, Href_Pref.c_Max_Date)
       and (s.Org_Unit_Id member of v_Division_Ids or --
            s.Employee_Id member of v_Subordinate_Chiefs or --
            i_Self = 'Y' and s.Employee_Id = i_Employee_Id);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Company_Badge_Template_Id(i_Company_Id number) return number is
  begin
    return to_number(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                  i_Code       => Href_Pref.c_Pref_Badge_Template_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Col_Required_Settings(i_Company_Id number) return Href_Pref.Col_Required_Setting_Rt is
    result Href_Pref.Col_Required_Setting_Rt;
  
    --------------------------------------------------
    Function Load_Pref(i_Code varchar2) return varchar2 is
    begin
      return Md_Pref.Load(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                          i_Code       => i_Code);
    end;
  begin
    Result.Last_Name              := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Last_Name), 'N');
    Result.Middle_Name            := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Middle_Name), 'N');
    Result.Birthday               := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Birthday), 'N');
    Result.Phone_Number           := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Phone_Number), 'N');
    Result.Email                  := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Email), 'N');
    Result.Region                 := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Region), 'N');
    Result.Address                := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Address), 'N');
    Result.Legal_Address          := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Legal_Address), 'N');
    Result.Passport               := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Passport), 'N');
    Result.Npin                   := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Npin), 'N');
    Result.Iapa                   := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Iapa), 'N');
    Result.Request_Note           := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Request_Note), 'N');
    Result.Request_Note_Limit     := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Request_Note_Limit), 0);
    Result.Plan_Change_Note       := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Plan_Change_Note), 'N');
    Result.Plan_Change_Note_Limit := Nvl(Load_Pref(Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit), 0);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------                 
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2 is
    v_Dummy number;
  begin
    execute immediate 'select 1 from ' || i_Table.Name ||
                      ' where company_id = :1 and filial_id = :2 and ' || --
                      case
                        when i_Check_Case = 'Y' then
                         'lower(' || i_Column || ') = lower(:3)'
                        else
                         i_Column || ' = :3'
                      end
      into v_Dummy
      using i_Company_Id, i_Filial_Id, i_Column_Value;
  
    return 'N';
  
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------                 
  Function Check_Unique
  (
    i_Company_Id   number,
    i_Table        Fazo_Schema.w_Table_Name,
    i_Column       varchar2,
    i_Column_Value varchar2,
    i_Check_Case   varchar2 := 'N'
  ) return varchar2 is
    v_Dummy number;
  begin
    execute immediate 'select 1 from ' || i_Table.Name || --
                      ' where company_id = :1 and ' || --
                      case
                        when i_Check_Case = 'Y' then
                         'lower(' || i_Column || ') = lower(:2)'
                        else
                         i_Column || ' = :2'
                      end
      into v_Dummy
      using i_Company_Id, i_Column_Value;
  
    return 'N';
  
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Code,
                        i_Column_Value => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Code
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Code       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Filial_Id    => i_Filial_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Code,
                        i_Column_Value => i_Code);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Name
  (
    i_Company_Id number,
    i_Table      Fazo_Schema.w_Table_Name,
    i_Name       varchar2
  ) return varchar2 is
  begin
    return Check_Unique(i_Company_Id   => i_Company_Id,
                        i_Table        => i_Table,
                        i_Column       => z.Name,
                        i_Column_Value => i_Name,
                        i_Check_Case   => 'Y');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Check_Unique_Phone
  (
    i_Company_Id number,
    i_Person_Id  number := null,
    i_Phone      varchar2
  ) return varchar2 is
    v_Dummy varchar2(1);
    v_Phone varchar2(25) := Regexp_Replace(i_Phone, '\D', '');
  begin
    select 'x'
      into v_Dummy
      from Md_Persons q
     where q.Company_Id = i_Company_Id
       and (i_Person_Id is null or q.Person_Id <> i_Person_Id)
       and q.Phone = v_Phone
       and q.State = 'A';
  
    return 'N';
  exception
    when No_Data_Found then
      return 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Setting(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Vpu_Setting),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Verify_Person_Uniqueness_Column(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Vpu_Column),
               Href_Pref.c_Vpu_Column_Passport_Number);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return varchar2 Result_Cache Relies_On(Href_Person_Details) is
  begin
    if i_User_Id = Md_Pref.User_Admin(i_Company_Id) then
      return 'Y';
    else
      return Nvl(z_Href_Person_Details.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_User_Id).Access_Hidden_Salary,
                 'N');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Has_Access_Hidden_Salary
  (
    i_Company_Id number,
    i_User_Id    number := Md_Env.User_Id
  ) return boolean is
  begin
    return Access_Hidden_Salary(i_Company_Id => i_Company_Id, i_User_Id => i_User_Id) = 'Y';
  end;

  ----------------------------------------------------------------------------------------------------
  Function Request_Note_Is_Required(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Request_Note),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Request_Note_Limit(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit),
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Plan_Change_Note_Is_Required(i_Company_Id number) return varchar2 is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note),
               'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Plan_Change_Note_Limit(i_Company_Id number) return number is
  begin
    return Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                            i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit),
               0);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Load_Fte_Limit(i_Company_Id number) return Href_Pref.Fte_Limit_Rt is
    v_Setting Href_Pref.Fte_Limit_Rt;
  begin
    v_Setting.Fte_Limit_Setting := Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                                    i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                                    i_Code       => Href_Pref.c_Fte_Limit_Setting),
                                       'N');
  
    if v_Setting.Fte_Limit_Setting = 'Y' then
      v_Setting.Fte_Limit := Nvl(Md_Pref.Load(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                                              i_Code       => Href_Pref.c_Fte_Limit),
                                 Href_Pref.c_Fte_Limit_Default);
    end if;
  
    return v_Setting;
  end;

  ----------------------------------------------------------------------------------------------------  
  Function Set_Photo_Templates return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Set_Photo_Template_Fl,
                                          Href_Pref.c_Set_Photo_Template_Lf,
                                          Href_Pref.c_Set_Photo_Template_Fl_Id,
                                          Href_Pref.c_Set_Photo_Template_Lf_Id,
                                          Href_Pref.c_Set_Photo_Template_Fl_Employee_Number,
                                          Href_Pref.c_Set_Photo_Template_Lf_Employee_Number,
                                          Href_Pref.c_Set_Photo_Template_Flm,
                                          Href_Pref.c_Set_Photo_Template_Lfm,
                                          Href_Pref.c_Set_Photo_Template_Flm_Id,
                                          Href_Pref.c_Set_Photo_Template_Lfm_Id,
                                          Href_Pref.c_Set_Photo_Template_Flm_Employee_Number,
                                          Href_Pref.c_Set_Photo_Template_Lfm_Employee_Number),
                           Array_Varchar2(t('set_photo_template:first_name.last_name'),
                                          t('set_photo_template:last_name.first_name'),
                                          t('set_photo_template:first_name.last_name.#ID'),
                                          t('set_photo_template:last_name.first_name.#ID'),
                                          t('set_photo_template:first_name.last_name.#Employee_Number'),
                                          t('set_photo_template:last_name.first_name.#Employee_Number'),
                                          t('set_photo_template:first_name.last_name.middle_name'),
                                          t('set_photo_template:last_name.first_name.middle_name'),
                                          t('set_photo_template:first_name.last_name.middle_name.#ID'),
                                          t('set_photo_template:last_name.first_name.middle_name.#ID'),
                                          t('set_photo_template:first_name.last_name.middle_name.#Employee_Number'),
                                          t('set_photo_template:last_name.first_name.middle_name.#Employee_Number')));
  end;

  ----------------------------------------------------------------------------------------------------                                          
  Procedure Bank_Account_New
  (
    o_Bank_Account      out Href_Pref.Bank_Account_Rt,
    i_Company_Id        number,
    i_Bank_Account_Id   number,
    i_Bank_Id           number,
    i_Bank_Account_Code varchar2,
    i_Name              varchar2,
    i_Person_Id         number,
    i_Is_Main           varchar2,
    i_Currency_Id       number,
    i_Note              varchar2,
    i_Card_Number       varchar2,
    i_State             varchar2
  ) is
  begin
    o_Bank_Account.Company_Id        := i_Company_Id;
    o_Bank_Account.Bank_Account_Id   := i_Bank_Account_Id;
    o_Bank_Account.Bank_Id           := i_Bank_Id;
    o_Bank_Account.Bank_Account_Code := i_Bank_Account_Code;
    o_Bank_Account.Name              := i_Name;
    o_Bank_Account.Person_Id         := i_Person_Id;
    o_Bank_Account.Is_Main           := i_Is_Main;
    o_Bank_Account.Currency_Id       := i_Currency_Id;
    o_Bank_Account.Note              := i_Note;
    o_Bank_Account.Card_Number       := i_Card_Number;
    o_Bank_Account.State             := i_State;
  end;

  ----------------------------------------------------------------------------------------------------
  -- specialty kind
  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind_Group return varchar2 is
  begin
    return t('specialty_kind:group');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind_Specialty return varchar2 is
  begin
    return t('specialty_kind:specialty');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Specialty_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Href_Pref.c_Specialty_Kind_Group then t_Specialty_Kind_Group --
    when Href_Pref.c_Specialty_Kind_Specialty then t_Specialty_Kind_Specialty --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Specialty_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Specialty_Kind_Group,
                                          Href_Pref.c_Specialty_Kind_Specialty),
                           Array_Varchar2(t_Specialty_Kind_Group, t_Specialty_Kind_Specialty));
  end;

  ----------------------------------------------------------------------------------------------------
  -- staff status
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Working return varchar2 is
  begin
    return t('staff_status:working');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Dismissed return varchar2 is
  begin
    return t('staff_status:dismissed');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status_Unknown return varchar2 is
  begin
    return t('staff_status:unknown');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Status(i_Staff_Status varchar2) return varchar2 is
  begin
    return --
    case i_Staff_Status --
    when Href_Pref.c_Staff_Status_Working then t_Staff_Status_Working --
    when Href_Pref.c_Staff_Status_Dismissed then t_Staff_Status_Dismissed --
    when Href_Pref.c_Staff_Status_Unknown then t_Staff_Status_Unknown --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Staff_Status_Working,
                                          Href_Pref.c_Staff_Status_Dismissed,
                                          Href_Pref.c_Staff_Status_Unknown),
                           Array_Varchar2(t_Staff_Status_Working,
                                          t_Staff_Status_Dismissed,
                                          t_Staff_Status_Unknown));
  
  end;
  ----------------------------------------------------------------------------------------------------
  -- staff kind
  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind_Primary return varchar2 is
  begin
    return t('staff_kind:primary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind_Secondary return varchar2 is
  begin
    return t('staff_kind:secondary');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Staff_Kind(i_Staff_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Staff_Kind --
    when Href_Pref.c_Staff_Kind_Primary then t_Staff_Kind_Primary --
    when Href_Pref.c_Staff_Kind_Secondary then t_Staff_Kind_Secondary --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Staff_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Staff_Kind_Primary,
                                          Href_Pref.c_Staff_Kind_Secondary),
                           Array_Varchar2(t_Staff_Kind_Primary, t_Staff_Kind_Secondary));
  end;

  ----------------------------------------------------------------------------------------------------
  -- employment source kind
  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Hiring return varchar2 is
  begin
    return t('employment_source_kind:hiring');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Dismissal return varchar2 is
  begin
    return t('employment_source_kind:dismissal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source_Kind_Both return varchar2 is
  begin
    return t('employment_source_kind:both');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Employment_Source(i_Source_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Source_Kind --
    when Href_Pref.c_Employment_Source_Kind_Hiring then t_Employment_Source_Kind_Hiring --
    when Href_Pref.c_Employment_Source_Kind_Dismissal then t_Employment_Source_Kind_Dismissal --
    when Href_Pref.c_Employment_Source_Kind_Both then t_Employment_Source_Kind_Both --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employment_Source_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Employment_Source_Kind_Hiring,
                                          Href_Pref.c_Employment_Source_Kind_Dismissal,
                                          Href_Pref.c_Employment_Source_Kind_Both),
                           Array_Varchar2(t_Employment_Source_Kind_Hiring,
                                          t_Employment_Source_Kind_Dismissal,
                                          t_Employment_Source_Kind_Both));
  end;

  ----------------------------------------------------------------------------------------------------
  -- user access level
  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Personal return varchar2 is
  begin
    return t('user_access_level: personal');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Direct_Employee return varchar2 is
  begin
    return t('user_access_level: direct employee');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Undirect_Employee return varchar2 is
  begin
    return t('user_access_level: undirect employee');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Manual return varchar2 is
  begin
    return t('user_access_level: manual');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Access_Level_Other return varchar2 is
  begin
    return t('user_access_level: other');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_User_Acces_Level(i_Acces_Level varchar2) return varchar2 is
  begin
    return --
    case i_Acces_Level --
    when Href_Pref.c_User_Access_Level_Personal then t_User_Access_Level_Personal --
    when Href_Pref.c_User_Access_Level_Direct_Employee then t_User_Access_Level_Direct_Employee --
    when Href_Pref.c_User_Access_Level_Undirect_Employee then t_User_Access_Level_Undirect_Employee --
    when Href_Pref.c_User_Access_Level_Manual then t_User_Access_Level_Manual --
    when Href_Pref.c_User_Access_Level_Other then t_User_Access_Level_Other --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function User_Acces_Levels return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_User_Access_Level_Personal,
                                          Href_Pref.c_User_Access_Level_Direct_Employee,
                                          Href_Pref.c_User_Access_Level_Undirect_Employee,
                                          Href_Pref.c_User_Access_Level_Manual,
                                          Href_Pref.c_User_Access_Level_Other),
                           Array_Varchar2(t_User_Access_Level_Personal,
                                          t_User_Access_Level_Direct_Employee,
                                          t_User_Access_Level_Undirect_Employee,
                                          t_User_Access_Level_Manual,
                                          t_User_Access_Level_Other));
  end;

  ----------------------------------------------------------------------------------------------------
  -- indicator used
  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used_Constantly return varchar2 is
  begin
    return t('indicator_used:constantly');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used_Automatically return varchar2 is
  begin
    return t('indicator_used:automatically');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Indicator_Used(i_Used varchar2) return varchar2 is
  begin
    return --
    case i_Used --
    when Href_Pref.c_Indicator_Used_Constantly then t_Indicator_Used_Constantly --
    when Href_Pref.c_Indicator_Used_Automatically then t_Indicator_Used_Automatically --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Indicator_Useds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Indicator_Used_Constantly,
                                          Href_Pref.c_Indicator_Used_Automatically),
                           Array_Varchar2(t_Indicator_Used_Constantly,
                                          t_Indicator_Used_Automatically));
  end;

  ----------------------------------------------------------------------------------------------------
  -- candidate kind
  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind_New return varchar is
  begin
    return t('candidate_kind: new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Candidate_Kind(i_Kind varchar2) return varchar2 is
  begin
    return --
    case i_Kind --
    when Href_Pref.c_Candidate_Kind_New then t_Candidate_Kind_New --
    when Href_Pref.c_Staff_Status_Unknown then t_Staff_Status_Unknown --
    when Href_Pref.c_Staff_Status_Working then t_Staff_Status_Working --
    when Href_Pref.c_Staff_Status_Dismissed then t_Staff_Status_Dismissed --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Candidate_Kinds return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Candidate_Kind_New,
                                          Href_Pref.c_Staff_Status_Unknown,
                                          Href_Pref.c_Staff_Status_Working,
                                          Href_Pref.c_Staff_Status_Dismissed),
                           Array_Varchar2(t_Candidate_Kind_New,
                                          t_Staff_Status_Unknown,
                                          t_Staff_Status_Working,
                                          t_Staff_Status_Dismissed));
  end;

  ----------------------------------------------------------------------------------------------------
  -- dismissal reasons type
  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type_Positive return varchar2 is
  begin
    return t('dismissal_reasons_type: positive');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type_Negative return varchar2 is
  begin
    return t('dismissal_reasons_type: negative');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Dismissal_Reasons_Type(i_Dismissal_Reasons_Type varchar2) return varchar2 is
  begin
    return --
    case i_Dismissal_Reasons_Type --
    when Href_Pref.c_Dismissal_Reasons_Type_Positive then t_Dismissal_Reasons_Type_Positive --
    when Href_Pref.c_Dismissal_Reasons_Type_Negative then t_Dismissal_Reasons_Type_Negative --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Dismissal_Reasons_Type return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Dismissal_Reasons_Type_Positive,
                                          Href_Pref.c_Dismissal_Reasons_Type_Negative),
                           Array_Varchar2(t_Dismissal_Reasons_Type_Positive, --
                                          t_Dismissal_Reasons_Type_Negative));
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Custom_Fte_Name return varchar2 is
  begin
    return t('custom fte name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_From_To_Rule
  (
    i_From      number,
    i_To        number,
    i_Rule_Unit varchar2
  ) return varchar2 is
    v_t_From varchar2(100 char);
    v_t_To   varchar2(100 char);
  begin
    if i_From is not null or i_To is null then
      v_t_From := t('from_to_rule:from $1{from_value} $2{rule_unit}', Nvl(i_From, 0), i_Rule_Unit);
    end if;
  
    if i_To is not null then
      v_t_To := t('from_to_rule:to $1{to_value} $2{rule_unit}', i_To, i_Rule_Unit);
    end if;
  
    return trim(v_t_From || ' ' || v_t_To);
  end;

  ----------------------------------------------------------------------------------------------------
  -- person document status
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_New return varchar2 is
  begin
    return t('person_document_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_Approved return varchar2 is
  begin
    return t('person_document_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status_Rejected return varchar2 is
  begin
    return t('person_document_status:rejected');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Href_Pref.c_Person_Document_Status_New then t_Person_Document_Status_New --
    when Href_Pref.c_Person_Document_Status_Approved then t_Person_Document_Status_Approved --
    when Href_Pref.c_Person_Document_Status_Rejected then t_Person_Document_Status_Rejected --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  -- person document owe status
  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Complete return varchar2 is
  begin
    return t('person_document_owe_status:complete');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Partial return varchar2 is
  begin
    return t('person_document_owe_status:partial');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status_Exempt return varchar2 is
  begin
    return t('person_document_owe_status:exempt');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Person_Document_Owe_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Href_Pref.c_Person_Document_Owe_Status_Complete then t_Person_Document_Owe_Status_Complete --
    when Href_Pref.c_Person_Document_Owe_Status_Partial then t_Person_Document_Owe_Status_Partial --
    when Href_Pref.c_Person_Document_Owe_Status_Exempt then t_Person_Document_Owe_Status_Exempt --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Person_Document_Owe_Status return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Href_Pref.c_Person_Document_Owe_Status_Complete,
                                          Href_Pref.c_Person_Document_Owe_Status_Partial,
                                          Href_Pref.c_Person_Document_Owe_Status_Exempt),
                           Array_Varchar2(t_Person_Document_Owe_Status_Complete,
                                          t_Person_Document_Owe_Status_Partial,
                                          t_Person_Document_Owe_Status_Exempt));
  end;

  ----------------------------------------------------------------------------------------------------
  -- verify person uniqueness
  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Name return varchar2 is
  begin
    return t('verify_person_uniqueness_column:name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Passport_Number return varchar2 is
  begin
    return t('verify_person_uniqueness_column:passport_number');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column_Npin return varchar2 is
  begin
    return t('verify_person_uniqueness_column:npin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Verify_Person_Uniqueness_Column(i_Column varchar2) return varchar2 is
  begin
    return --
    case i_Column --
    when Href_Pref.c_Vpu_Column_Name then t_Verify_Person_Uniqueness_Column_Name --
    when Href_Pref.c_Vpu_Column_Passport_Number then t_Verify_Person_Uniqueness_Column_Passport_Number --
    when Href_Pref.c_Vpu_Column_Npin then t_Verify_Person_Uniqueness_Column_Npin --
    end;
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- employee personal audit column names
  ----------------------------------------------------------------------------------------------------
  Function t_First_Name return varchar2 is
  begin
    return t('first name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Last_Name return varchar2 is
  begin
    return t('last name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Middle_Name return varchar2 is
  begin
    return t('middle name');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Nationality return varchar2 is
  begin
    return t('nationality');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Birthday return varchar2 is
  begin
    return t('birthday');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Gender return varchar2 is
  begin
    return t('gender');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Npin return varchar2 is
  begin
    return t('npin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Iapa return varchar2 is
  begin
    return t('iapa');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Tin return varchar2 is
  begin
    return t('tin');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Note return varchar2 is
  begin
    return t('note');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employee_Personal_Audit_Column_Names return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(z.First_Name,
                                          z.Last_Name,
                                          z.Middle_Name,
                                          z.Nationality,
                                          z.Birthday,
                                          z.Gender,
                                          z.Npin,
                                          z.Iapa,
                                          z.Tin,
                                          z.Note),
                           Array_Varchar2(t_First_Name,
                                          t_Last_Name,
                                          t_Middle_Name,
                                          t_Nationality,
                                          t_Birthday,
                                          t_Gender,
                                          t_Npin,
                                          t_Iapa,
                                          t_Tin,
                                          t_Note));
  end;

  ---------------------------------------------------------------------------------------------------- 
  -- employee contact audit column names
  ----------------------------------------------------------------------------------------------------
  Function t_Main_Phone return varchar2 is
  begin
    return t('main phone');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Extra_Phone return varchar2 is
  begin
    return t('extra phone');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Email return varchar2 is
  begin
    return t('email');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Corporate_Email return varchar2 is
  begin
    return t('corporate email');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Region return varchar2 is
  begin
    return t('region');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Address return varchar2 is
  begin
    return t('address');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Legal_Address return varchar2 is
  begin
    return t('legal address');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Employee_Contact_Audit_Column_Names return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(z.Main_Phone,
                                          z.Extra_Phone,
                                          z.Email,
                                          z.Corporate_Email,
                                          z.Region,
                                          z.Address,
                                          z.Legal_Address),
                           Array_Varchar2(t_Main_Phone,
                                          t_Extra_Phone,
                                          t_Email,
                                          t_Corporate_Email,
                                          t_Region,
                                          t_Address,
                                          t_Legal_Address));
  end;

end Href_Util;
/

create or replace package Href_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
end Href_Watcher;
/
create or replace package body Href_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head    number := Md_Pref.c_Company_Head;
    v_Pcode_Like      varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query           varchar2(4000);
    v_Lang_Code       varchar2(5) := z_Md_Companies.Load(i_Company_Id).Lang_Code;
    r_Document_Types  Href_Document_Types%rowtype;
    r_Indicator       Href_Indicators%rowtype;
    r_Indicator_Group Href_Indicator_Groups%rowtype;
    r_Fte             Href_Ftes%rowtype;
  begin
    -- add default document types
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Href_Document_Types,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Href_Document_Types t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Doc_Type_Id)
    loop
      r_Document_Types             := r;
      r_Document_Types.Company_Id  := i_Company_Id;
      r_Document_Types.Doc_Type_Id := Href_Next.Document_Type_Id;
    
      execute immediate v_Query
        using in r_Document_Types, out r_Document_Types;
    
      z_Href_Document_Types.Save_Row(r_Document_Types);
    end loop;
  
    -- add default indicator groups
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Href_Indicator_Groups,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Href_Indicator_Groups t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Indicator_Group_Id)
    loop
      r_Indicator_Group                    := r;
      r_Indicator_Group.Company_Id         := i_Company_Id;
      r_Indicator_Group.Indicator_Group_Id := Href_Next.Indicator_Group_Id;
    
      execute immediate v_Query
        using in r_Indicator_Group, out r_Indicator_Group;
    
      z_Href_Indicator_Groups.Save_Row(r_Indicator_Group);
    end loop;
  
    -- add default indicators
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Href_Indicators,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Href_Indicators t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Indicator_Id)
    loop
      r_Indicator              := r;
      r_Indicator.Company_Id   := i_Company_Id;
      r_Indicator.Indicator_Id := Href_Next.Indicator_Id;
    
      r_Indicator_Group := z_Href_Indicator_Groups.Load(i_Company_Id         => v_Company_Head,
                                                        i_Indicator_Group_Id => r_Indicator.Indicator_Group_Id);
    
      r_Indicator.Indicator_Group_Id := Href_Util.Indicator_Group_Id(i_Company_Id => i_Company_Id,
                                                                     i_Pcode      => r_Indicator_Group.Pcode);
    
      execute immediate v_Query
        using in r_Indicator, out r_Indicator;
    
      z_Href_Indicators.Save_Row(r_Indicator);
    end loop;
  
    -- add default fte types
    v_Query := Md_Util.Translate_Rows_Statement(i_Table => Zt.Href_Ftes, i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Href_Ftes t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pcode_Like
               order by t.Order_No)
    loop
      r_Fte            := r;
      r_Fte.Company_Id := i_Company_Id;
      r_Fte.Fte_Id     := Href_Next.Fte_Id;
    
      execute immediate v_Query
        using in r_Fte, out r_Fte;
    
      z_Href_Ftes.Save_Row(r_Fte);
    end loop;
  
    -- add default user for timepad
    Href_Api.Create_Timepad_User(i_Company_Id);
  end;

end Href_Watcher;
/

create or replace package Hrm_Core is
  ----------------------------------------------------------------------------------------------------
  Procedure Update_Parent_Departments
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Old_Parent_Id number,
    i_New_Parent_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Department_Status_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Division_Parent_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Advanced_Org_Structure_Changeable
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Org_Unit_Department
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Org_Unit_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Robot_Roles
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Division_Manager_Infos
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Open_Unopened_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Multiple_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Booked_Trans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean;
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Position_Enabled varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Robot_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Allowed_Division_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Sync_Division_Managers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Robot_Dates
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Robots_Revise
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Function Robot_Transaction_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number,
    i_Tag        varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Transaction_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Plans_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Open
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Open_Date   date,
    i_Planned_Fte number := 1
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Close_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Function Robot_Occupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean := false,
    i_Tag         varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Function Robot_Unoccupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean := false,
    i_Tag         varchar2 := null
  ) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Last_Changed_Date_Refresh
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  );
end Hrm_Core;
/
create or replace package body Hrm_Core is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Parent_Departments
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Old_Parent_Id number,
    i_New_Parent_Id number
  ) is
  begin
    update Hrm_Divisions q
       set q.Parent_Department_Id = i_New_Parent_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Parent_Department_Id = i_Old_Parent_Id
       and exists (select 1
              from Mhr_Parent_Divisions Pd
             where Pd.Company_Id = i_Company_Id
               and Pd.Filial_Id = i_Filial_Id
               and Pd.Parent_Id = i_Division_Id
               and Pd.Division_Id = q.Division_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Function Division_Used_In_Robots
  (
    o_Robot_Id    out number,
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number
  ) return boolean is
    v_Org_Unit_Ids Array_Number;
  begin
    select Qr.Division_Id
      bulk collect
      into v_Org_Unit_Ids
      from (select Dv.*
              from Mhr_Divisions Dv
              join Hrm_Divisions q
                on q.Company_Id = Dv.Company_Id
               and q.Filial_Id = Dv.Filial_Id
               and q.Division_Id = Dv.Division_Id
             where Dv.Company_Id = i_Company_Id
               and Dv.Filial_Id = i_Filial_Id
               and Dv.Division_Id in (select Pd.Division_Id
                                        from Mhr_Parent_Divisions Pd
                                       where Pd.Company_Id = i_Company_Id
                                         and Pd.Filial_Id = i_Filial_Id
                                         and Pd.Parent_Id = i_Division_Id)
               and q.Is_Department = 'N') Qr
     start with Qr.Parent_Id = i_Division_Id
    connect by Qr.Parent_Id = prior Qr.Division_Id;
  
    Fazo.Push(v_Org_Unit_Ids, i_Division_Id);
  
    select Rb.Robot_Id
      into o_Robot_Id
      from Hrm_Robots Rb
     where Rb.Company_Id = i_Company_Id
       and Rb.Filial_Id = i_Filial_Id
       and Rb.Org_Unit_Id member of v_Org_Unit_Ids
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Department_Status_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  ) is
    v_Robot_Id      number;
    v_Division_Kind varchar2(100 char) := case
                                            when i_Is_Department = 'Y' then
                                             Hrm_Util.t_Division_Kind_Department
                                            else
                                             Hrm_Util.t_Division_Kind_Team
                                          end;
    r_Settings      Hrm_Settings%rowtype;
    r_Division      Mhr_Divisions%rowtype;
    r_Robot         Mrf_Robots%rowtype;
  begin
    if Division_Used_In_Robots(o_Robot_Id    => v_Robot_Id,
                               i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Division_Id => i_Division_Id) then
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    
      r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => v_Robot_Id);
    
      if r_Settings.Position_Enable = 'Y' then
        Hrm_Error.Raise_022(i_Division_Name => r_Division.Name,
                            i_Division_Kind => v_Division_Kind,
                            i_Robot_Name    => r_Robot.Name);
      else
        Hrm_Error.Raise_021(i_Division_Name => r_Division.Name,
                            i_Division_Kind => v_Division_Kind,
                            i_Staff_Name    => z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                               i_Person_Id => r_Robot.Person_Id).Name);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Division_Parent_Changeable
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Division_Id   number,
    i_Is_Department varchar2
  ) is
    v_Robot_Id number;
    r_Settings Hrm_Settings%rowtype;
    r_Division Mhr_Divisions%rowtype;
    r_Robot    Mrf_Robots%rowtype;
  begin
    if i_Is_Department = 'N' and
       Division_Used_In_Robots(o_Robot_Id    => v_Robot_Id,
                               i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Division_Id => i_Division_Id) then
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    
      r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => i_Division_Id);
    
      r_Robot := z_Mrf_Robots.Load(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => v_Robot_Id);
    
      if r_Settings.Position_Enable = 'Y' then
        Hrm_Error.Raise_024(i_Division_Name => r_Division.Name, --
                            i_Robot_Name    => r_Robot.Name);
      else
        Hrm_Error.Raise_023(i_Division_Name => r_Division.Name,
                            i_Staff_Name    => z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, --
                                               i_Person_Id => r_Robot.Person_Id).Name);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Advanced_Org_Structure_Changeable
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Division Mhr_Divisions%rowtype;
  begin
    select q.Division_Id
      into r_Division.Division_Id
      from Hrm_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Is_Department = 'N'
       and Rownum = 1;
  
    r_Division := z_Mhr_Divisions.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => r_Division.Division_Id);
  
    Hrm_Error.Raise_025(r_Division.Name);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Assert_Org_Unit_Department
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Division_Id number,
    i_Org_Unit_Id number
  ) is
    r_Division Hrm_Divisions%rowtype;
    r_Org_Unit Hrm_Divisions%rowtype;
  begin
    r_Org_Unit := z_Hrm_Divisions.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Org_Unit_Id);
  
    r_Division := z_Hrm_Divisions.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Division_Id => i_Division_Id);
  
    if r_Division.Is_Department = 'N' then
      Hrm_Error.Raise_028(i_Division_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Division_Id).Name);
    end if;
  
    if not Fazo.Equal(r_Org_Unit.Parent_Department_Id, i_Division_Id) then
      Hrm_Error.Raise_026(i_Division_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Division_Id).Name,
                          i_Org_Unit_Name => z_Mhr_Divisions.Take(i_Company_Id => i_Company_Id, --
                                             i_Filial_Id => i_Filial_Id, --
                                             i_Division_Id => i_Org_Unit_Id).Name);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Robot_Roles
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Staff_Role_Id number := Md_Util.Role_Id(i_Company_Id => i_Company_Id,
                                              i_Pcode      => Href_Pref.c_Pcode_Role_Staff);
  
  begin
    -- insert user roles when position enabled
    for r in (select Rb.*,
                     Nvl((select 'Y'
                           from Mrf_Robot_Persons Rp
                          where Rp.Company_Id = Rb.Company_Id
                            and Rp.Filial_Id = Rb.Filial_Id
                            and Rp.Robot_Id = Rb.Robot_Id
                            and Rownum = 1),
                         'N') Has_Person
                from Hrm_Robots Rb
               where Rb.Company_Id = i_Company_Id
                 and Rb.Filial_Id = i_Filial_Id)
    loop
      if r.Has_Person = 'N' then
        Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                               i_Robot_Id   => r.Robot_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Role_Id    => v_Staff_Role_Id);
      else
        for Rl in (select *
                     from Mrf_Robot_Persons Rp
                     join Md_User_Roles Ur
                       on Ur.Company_Id = i_Company_Id
                      and Ur.Filial_Id = i_Filial_Id
                      and Ur.User_Id = Rp.Person_Id
                    where Rp.Company_Id = i_Company_Id
                      and Rp.Filial_Id = i_Filial_Id
                      and Rp.Robot_Id = r.Robot_Id
                      and not exists (select 1
                             from Mrf_Robot_Roles p
                            where p.Company_Id = Rp.Company_Id
                              and p.Filial_Id = Rp.Filial_Id
                              and p.Robot_Id = Rp.Robot_Id
                              and p.Role_Id = Ur.Role_Id))
        loop
          Mrf_Api.Robot_Add_Role(i_Company_Id => i_Company_Id,
                                 i_Robot_Id   => r.Robot_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Role_Id    => Rl.Role_Id);
        end loop;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Division_Manager_Infos
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    -- clear data before position was enabled
    delete Hrm_Division_Managers p
     where p.Company_Id = i_Company_Id
       and p.Filial_Id = i_Filial_Id;
  
    -- insert data when position enabled
    for r in (select p.Division_Id, p.Manager_Id, q.Person_Id
                from Mrf_Division_Managers p
                join Mrf_Robots q
                  on q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Robot_Id = p.Manager_Id
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and exists (select *
                        from Mhr_Employees t
                       where t.Company_Id = q.Company_Id
                         and t.Filial_Id = q.Filial_Id
                         and t.Employee_Id = q.Person_Id))
    loop
      z_Hrm_Division_Managers.Insert_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Division_Id => r.Division_Id,
                                         i_Employee_Id => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Open_Unopened_Robots
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    for r in (select *
                from Hrm_Robots p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and not exists (select *
                        from Hrm_Robot_Transactions q
                       where q.Company_Id = p.Company_Id
                         and q.Filial_Id = p.Filial_Id
                         and q.Robot_Id = p.Robot_Id))
    loop
      Robot_Open(i_Company_Id => r.Company_Id,
                 i_Filial_Id  => r.Filial_Id,
                 i_Robot_Id   => r.Robot_Id,
                 i_Open_Date  => r.Opened_Date);
    
      if r.Closed_Date is not null then
        Robot_Close(i_Company_Id => r.Company_Id,
                    i_Filial_Id  => r.Filial_Id,
                    i_Robot_Id   => r.Robot_Id,
                    i_Close_Date => r.Closed_Date);
      end if;
    end loop;
  
    Dirty_Robots_Revise(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Multiple_Staffs
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean is
  begin
    select Qr.Robot_Id
      into o_Robot_Id
      from (select p.Robot_Id
              from Hpd_Page_Robots p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
             group by p.Robot_Id
            having count(*) > 1) Qr
     where Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Exists_Robot_With_Booked_Trans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    o_Robot_Id   out number
  ) return boolean is
  begin
    select q.Robot_Id
      into o_Robot_Id
      from Hrm_Robot_Transactions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Fte_Kind = Hrm_Pref.c_Fte_Kind_Booked
       and Rownum = 1;
  
    return true;
  exception
    when No_Data_Found then
      return false;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Refresh_Cache
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    r_Settings Hrm_Settings%rowtype;
  begin
    r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Settings.Position_Enable = 'N' then
      return;
    end if;
  
    for r in (select Ac.Staff_Id
                from Mrf_Robot_Persons Rp
                join Hpd_Agreements_Cache Ac
                  on Ac.Company_Id = Rp.Company_Id
                 and Ac.Filial_Id = Rp.Filial_Id
                 and Ac.Robot_Id = Rp.Robot_Id
                 and Trunc(sysdate) between Ac.Begin_Date and Ac.End_Date
               where Rp.Company_Id = i_Company_Id
                 and Rp.Filial_Id = i_Filial_Id
                 and Rp.Robot_Id = i_Robot_Id)
    loop
      Hpd_Core.Staff_Refresh_Cache(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => r.Staff_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Robot_Id         number,
    i_Position_Enabled varchar2
  ) is
    v_Person_Ids Array_Number;
    v_Person_Id  number;
    v_Date       date := Trunc(sysdate);
  begin
    select q.Person_Id
      bulk collect
      into v_Person_Ids
      from (select (select s.Employee_Id
                      from Href_Staffs s
                     where s.Company_Id = i_Company_Id
                       and s.Filial_Id = i_Filial_Id
                       and s.Staff_Id = r.Staff_Id) as Person_Id
              from Hrm_Robot_Transactions t
              join Hpd_Robot_Trans_Staffs r
                on t.Company_Id = r.Company_Id
               and t.Filial_Id = r.Filial_Id
               and t.Trans_Id = r.Robot_Trans_Id
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Robot_Id = i_Robot_Id
               and t.Trans_Date <= v_Date
               and t.Fte_Kind = Hrm_Pref.c_Fte_Kind_Occupied
             group by r.Staff_Id
            having sum(t.Fte) > 0) q
     group by q.Person_Id;
  
    -- clear unnecessary persons
    for r in (select *
                from Mrf_Robot_Persons Rp
               where Rp.Company_Id = i_Company_Id
                 and Rp.Filial_Id = i_Filial_Id
                 and Rp.Robot_Id = i_Robot_Id
                 and Rp.Person_Id not member of v_Person_Ids)
    loop
      z_Mrf_Robot_Persons.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Person_Id  => r.Person_Id);
    
      if i_Position_Enabled = 'Y' then
        Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Person_Id  => r.Person_Id);
      end if;
    end loop;
  
    -- insert persons
    if v_Person_Ids.Count > 0 then
      for i in 1 .. v_Person_Ids.Count
      loop
        if not z_Mrf_Robot_Persons.Exist(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Robot_Id   => i_Robot_Id,
                                         i_Person_Id  => v_Person_Ids(i)) then
          z_Mrf_Robot_Persons.Insert_One(i_Company_Id => i_Company_Id,
                                         i_Filial_Id  => i_Filial_Id,
                                         i_Robot_Id   => i_Robot_Id,
                                         i_Person_Id  => v_Person_Ids(i));
          if i_Position_Enabled = 'Y' then
            Mrf_Api.Make_Dirty_Robot_Persons(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => v_Person_Ids(i));
          end if;
        end if;
      end loop;
    
      v_Person_Id := v_Person_Ids(1);
    end if;
  
    z_Mrf_Robots.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Person_Id  => Option_Number(v_Person_Id));
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Person_Refresh_Cache(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
    r_Settings    Hrm_Settings%rowtype;
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => r.Filial_Id);
    
      for Rbt in (select *
                    from Hrm_Robots q
                   where q.Company_Id = r.Company_Id
                     and q.Filial_Id = r.Filial_Id
                     and v_Date between q.Opened_Date and Nvl(q.Closed_Date, Href_Pref.c_Max_Date))
      loop
        Robot_Person_Refresh_Cache(i_Company_Id       => Rbt.Company_Id,
                                   i_Filial_Id        => Rbt.Filial_Id,
                                   i_Robot_Id         => Rbt.Robot_Id,
                                   i_Position_Enabled => r_Settings.Position_Enable);
      end loop;
    
      if r_Settings.Position_Enable = 'Y' then
        Mrf_Api.Gen_Robot_Person_Roles;
      else
        delete Mrf_Dirty_Robot_Persons;
      end if;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Fix_Robot_Divisions
  (
    i_Company_Id           number,
    i_Filial_Id            number,
    i_Robot_Id             number,
    i_Allowed_Division_Ids Array_Number
  ) is
  begin
    for r in (select *
                from Hrm_Robot_Divisions Rd
               where Rd.Company_Id = i_Company_Id
                 and Rd.Filial_Id = i_Filial_Id
                 and Rd.Robot_Id = i_Robot_Id
                 and Rd.Division_Id not member of
               i_Allowed_Division_Ids
                 and Rd.Access_Type = Hrm_Pref.c_Access_Type_Manual)
    loop
      z_Hrm_Robot_Divisions.Delete_One(i_Company_Id  => r.Company_Id,
                                       i_Filial_Id   => r.Filial_Id,
                                       i_Robot_Id    => r.Robot_Id,
                                       i_Division_Id => r.Division_Id);
    end loop;
  
    for i in 1 .. i_Allowed_Division_Ids.Count
    loop
      z_Hrm_Robot_Divisions.Save_One(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Robot_Id    => i_Robot_Id,
                                     i_Division_Id => i_Allowed_Division_Ids(i),
                                     i_Access_Type => Hrm_Pref.c_Access_Type_Manual);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Sync_Division_Managers
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number
  ) is
    r_Setting      Hrm_Settings%rowtype;
    r_Staff        Href_Staffs%rowtype;
    r_Manager      Mrf_Division_Managers%rowtype;
    v_Division_Ids Array_Number := Array_Number();
    v_Curr_Date    date := Trunc(sysdate);
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    if r_Staff.Staff_Kind <> Href_Pref.c_Staff_Kind_Primary then
      return;
    end if;
  
    -- refresh robot manual accesses
    if r_Staff.State = 'A' and v_Curr_Date between r_Staff.Hiring_Date and
       Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date) then
      select Ed.Division_Id
        bulk collect
        into v_Division_Ids
        from Href_Employee_Divisions Ed
       where Ed.Company_Id = i_Company_Id
         and Ed.Filial_Id = i_Filial_Id
         and Ed.Employee_Id = r_Staff.Employee_Id;
    
      v_Division_Ids := Hrm_Util.Fix_Allowed_Divisions(i_Company_Id           => i_Company_Id,
                                                       i_Filial_Id            => i_Filial_Id,
                                                       i_Robot_Id             => r_Staff.Robot_Id,
                                                       i_Allowed_Division_Ids => v_Division_Ids);
    end if;
  
    Fix_Robot_Divisions(i_Company_Id           => i_Company_Id,
                        i_Filial_Id            => i_Filial_Id,
                        i_Robot_Id             => r_Staff.Robot_Id,
                        i_Allowed_Division_Ids => v_Division_Ids);
  
    -- refresh division manager robot
    if r_Staff.State = 'A' and v_Curr_Date between r_Staff.Hiring_Date and
       Nvl(r_Staff.Dismissal_Date, Href_Pref.c_Max_Date) then
      r_Manager.Company_Id := i_Company_Id;
      r_Manager.Filial_Id  := i_Filial_Id;
      r_Manager.Manager_Id := r_Staff.Robot_Id;
    
      for r in (select *
                  from Hrm_Division_Managers p
                 where p.Company_Id = i_Company_Id
                   and p.Filial_Id = i_Filial_Id
                   and p.Employee_Id = r_Staff.Employee_Id)
      loop
        r_Manager.Division_Id := r.Division_Id;
      
        Mrf_Api.Division_Manager_Save(r_Manager);
      end loop;
    else
      for r in (select *
                  from Hrm_Division_Managers p
                 where p.Company_Id = i_Company_Id
                   and p.Filial_Id = i_Filial_Id
                   and p.Employee_Id = r_Staff.Employee_Id)
      loop
        Mrf_Api.Division_Manager_Delete(i_Company_Id  => r.Company_Id,
                                        i_Filial_Id   => r.Filial_Id,
                                        i_Division_Id => r.Division_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Sync_Division_Managers(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      for St in (select q.Company_Id, q.Filial_Id, q.Staff_Id
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date + 1 >= v_Date))
      loop
        Sync_Division_Managers(i_Company_Id => St.Company_Id,
                               i_Filial_Id  => St.Filial_Id,
                               i_Staff_Id   => St.Staff_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Turnover
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    for r in (select q.*,
                     (select w.Name
                        from Mrf_Robots w
                       where w.Robot_Id = q.Robot_Id) name
                from Hrm_Robot_Turnover q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Robot_Id = i_Robot_Id
                 and not (q.Planed_Fte between 0 and 1 and q.Booked_Fte between 0 and 1 and
                      q.Occupied_Fte between 0 and 1 and q.Fte between 0 and 1)
               order by q.Period)
    loop
      if not r.Planed_Fte between 0 and 1 then
        Hrm_Error.Raise_001(i_Robot_Id   => r.Robot_Id,
                            i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Planed_Fte => r.Planed_Fte);
      end if;
    
      if not r.Booked_Fte between 0 and 1 then
        Hrm_Error.Raise_002(i_Robot_Id   => r.Robot_Id,
                            i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Booked_Fte => r.Booked_Fte);
      end if;
    
      if not r.Occupied_Fte between 0 and 1 then
        Hrm_Error.Raise_003(i_Name         => r.Name,
                            i_Period       => r.Period,
                            i_Occupied_Fte => r.Occupied_Fte);
      end if;
    
      if not r.Fte between 0 and 1 then
        if r.Fte > 1 then
          Hrm_Error.Raise_004(i_Name => r.Name, i_Period => r.Period);
        end if;
      
        Hrm_Error.Raise_005(i_Name       => r.Name,
                            i_Period     => r.Period,
                            i_Exceed_Fte => r.Occupied_Fte + r.Booked_Fte - r.Planed_Fte,
                            i_Booked_Fte => r.Booked_Fte);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Robot_Dates
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    r_Setting       Hrm_Settings%rowtype;
    v_Last_Occupy   Hrm_Robot_Transactions%rowtype;
    v_Last_Planned  Hrm_Robot_Transactions%rowtype;
    v_First_Planned Hrm_Robot_Transactions%rowtype;
    v_First_Occupy  Hrm_Robot_Transactions%rowtype;
    v_Insert_Close  boolean := false;
    v_Remove_Close  boolean := false;
    v_Insert_Open   boolean := false;
    v_Remove_Open   boolean := false;
  
    --------------------------------------------------
    Procedure Assert_Booked_Transaction_Not_Exist is
      v_Date date;
    begin
      select p.Trans_Date
        into v_Date
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = Hrm_Pref.c_Fte_Kind_Booked
         and Rownum = 1;
    
      Hrm_Error.Raise_006(i_Robot_Id => i_Robot_Id, i_Trans_Date => v_Date);
    exception
      when No_Data_Found then
        null;
    end;
  
    -------------------------------------------------- 
    Function Last_Trans
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number,
      i_Fte_Kind   varchar2
    ) return Hrm_Robot_Transactions%rowtype is
      v_Trans Hrm_Robot_Transactions%rowtype;
    begin
      select p.*
        into v_Trans
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = i_Fte_Kind
         and p.Trans_Date = (select max(q.Trans_Date)
                               from Hrm_Robot_Transactions q
                              where q.Company_Id = p.Company_Id
                                and q.Filial_Id = p.Filial_Id
                                and q.Robot_Id = p.Robot_Id
                                and q.Fte_Kind = p.Fte_Kind);
    
      return v_Trans;
    exception
      when No_Data_Found then
        return null;
    end;
  
    -------------------------------------------------- 
    Function First_Trans
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Robot_Id   number,
      i_Fte_Kind   varchar2
    ) return Hrm_Robot_Transactions%rowtype is
      v_Trans Hrm_Robot_Transactions%rowtype;
    begin
      select p.*
        into v_Trans
        from Hrm_Robot_Transactions p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = i_Robot_Id
         and p.Fte_Kind = i_Fte_Kind
         and p.Trans_Date = (select min(q.Trans_Date)
                               from Hrm_Robot_Transactions q
                              where q.Company_Id = p.Company_Id
                                and q.Filial_Id = p.Filial_Id
                                and q.Robot_Id = p.Robot_Id
                                and q.Fte_Kind = p.Fte_Kind);
    
      return v_Trans;
    exception
      when No_Data_Found then
        return null;
    end;
  
    --------------------------------------------------
    Procedure Update_Robot_Closed_Date
    (
      i_Company_Id        number,
      i_Filial_Id         number,
      i_Robot_Id          number,
      i_Remove_Close      boolean,
      i_Insert_Close      boolean,
      i_First_Occupy_Date date,
      i_Last_Occupy_Date  date
    ) is
      v_Close_Date date;
    begin
      if i_Insert_Close then
        v_Close_Date := i_Last_Occupy_Date;
      end if;
    
      z_Hrm_Robots.Update_One(i_Company_Id  => i_Company_Id,
                              i_Filial_Id   => i_Filial_Id,
                              i_Robot_Id    => i_Robot_Id,
                              i_Opened_Date => case
                                                 when i_First_Occupy_Date is not null then
                                                  Option_Date(i_First_Occupy_Date)
                                                 else
                                                  null
                                               end,
                              i_Closed_Date => case
                                                 when i_Insert_Close or i_Remove_Close then
                                                  Option_Date(v_Close_Date - 1)
                                                 else
                                                  null
                                               end);
    end;
  begin
    r_Setting := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    if r_Setting.Position_Enable = 'Y' then
      return;
    end if;
  
    Assert_Booked_Transaction_Not_Exist;
  
    v_Last_Occupy   := Last_Trans(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Robot_Id   => i_Robot_Id,
                                  i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Occupied);
    v_Last_Planned  := Last_Trans(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Robot_Id   => i_Robot_Id,
                                  i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed);
    v_First_Occupy  := First_Trans(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Occupied);
    v_First_Planned := First_Trans(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Robot_Id   => i_Robot_Id,
                                   i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed);
  
    if v_Last_Occupy.Fte < 0 then
      v_Remove_Close := v_Last_Planned.Trans_Date <> v_Last_Occupy.Trans_Date and
                        v_Last_Planned.Fte < 0;
    
      v_Insert_Close := v_Last_Planned.Company_Id is null or v_Last_Planned.Fte > 0 or
                        v_Remove_Close;
    else
      v_Remove_Close := v_Last_Planned.Fte < 0;
    end if;
  
    if v_First_Occupy.Company_Id is null then
      v_Remove_Open := v_First_Planned.Company_Id is not null;
    else
      v_Remove_Open := v_First_Planned.Trans_Date <> v_First_Occupy.Trans_Date and
                       v_First_Planned.Fte > 0;
    
      v_Insert_Open := v_First_Planned.Company_Id is null or v_First_Planned.Fte < 0 or
                       v_Remove_Open;
    end if;
  
    if v_Remove_Close then
      Robot_Transaction_Delete(i_Company_Id => v_Last_Planned.Company_Id,
                               i_Filial_Id  => v_Last_Planned.Filial_Id,
                               i_Trans_Id   => v_Last_Planned.Trans_Id);
    end if;
  
    if v_Insert_Close then
      Robot_Close(i_Company_Id => v_Last_Occupy.Company_Id,
                  i_Filial_Id  => v_Last_Occupy.Filial_Id,
                  i_Robot_Id   => v_Last_Occupy.Robot_Id,
                  i_Close_Date => v_Last_Occupy.Trans_Date - 1);
    end if;
  
    if v_Remove_Open then
      Robot_Transaction_Delete(i_Company_Id => v_First_Planned.Company_Id,
                               i_Filial_Id  => v_First_Planned.Filial_Id,
                               i_Trans_Id   => v_First_Planned.Trans_Id);
    end if;
  
    if v_Insert_Open then
      Robot_Open(i_Company_Id => v_First_Occupy.Company_Id,
                 i_Filial_Id  => v_First_Occupy.Filial_Id,
                 i_Robot_Id   => v_First_Occupy.Robot_Id,
                 i_Open_Date  => v_First_Occupy.Trans_Date);
    end if;
  
    Update_Robot_Closed_Date(i_Company_Id        => i_Company_Id,
                             i_Filial_Id         => i_Filial_Id,
                             i_Robot_Id          => i_Robot_Id,
                             i_Remove_Close      => v_Remove_Close,
                             i_Insert_Close      => v_Insert_Close,
                             i_First_Occupy_Date => v_First_Occupy.Trans_Date,
                             i_Last_Occupy_Date  => v_Last_Occupy.Trans_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Dirty_Robots_Revise
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    r_Settings Hrm_Settings%rowtype;
  begin
    r_Settings := Hrm_Util.Load_Setting(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  
    for r in (select *
                from Hrm_Dirty_Robots Dr
               where Dr.Company_Id = i_Company_Id
                 and Dr.Filial_Id = i_Filial_Id)
    loop
      Revise_Robot_Dates(i_Company_Id => r.Company_Id,
                         i_Filial_Id  => r.Filial_Id,
                         i_Robot_Id   => r.Robot_Id);
    
      Check_Turnover(i_Company_Id => r.Company_Id,
                     i_Filial_Id  => r.Filial_Id,
                     i_Robot_Id   => r.Robot_Id);
    
      Robot_Person_Refresh_Cache(i_Company_Id       => r.Company_Id,
                                 i_Filial_Id        => r.Filial_Id,
                                 i_Robot_Id         => r.Robot_Id,
                                 i_Position_Enabled => r_Settings.Position_Enable);
    end loop;
  
    if r_Settings.Position_Enable = 'Y' then
      Mrf_Api.Gen_Robot_Person_Roles;
    else
      delete Mrf_Dirty_Robot_Persons;
    end if;
  
    delete Hrm_Dirty_Robots Dr
     where Dr.Company_Id = i_Company_Id
       and Dr.Filial_Id = i_Filial_Id;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Make_Dirty_Robot
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Hrm_Dirty_Robots q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id;
  exception
    when No_Data_Found then
      insert into Hrm_Dirty_Robots
        (Company_Id, Filial_Id, Robot_Id)
      values
        (i_Company_Id, i_Filial_Id, i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Robot_Turnover_Evaluate
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number
  ) is
    v_Periods      Array_Date;
    v_Planed_Fte   number := 0;
    v_Booked_Fte   number := 0;
    v_Occupied_Fte number := 0;
    --------------------------------------------------
    Procedure Insert_Turnover is
      g Hrm_Robot_Turnover%rowtype;
    begin
      for r in (select *
                  from (select *
                          from Hrm_Robot_Turnover t
                         where t.Company_Id = i_Company_Id
                           and t.Filial_Id = i_Filial_Id
                           and t.Robot_Id = i_Robot_Id
                           and t.Period < i_Trans_Date
                         order by t.Period desc)
                 where Rownum = 1)
      loop
        g              := r;
        g.Period       := i_Trans_Date;
        g.Planed_Fte   := g.Planed_Fte + v_Planed_Fte;
        g.Booked_Fte   := g.Booked_Fte + v_Booked_Fte;
        g.Occupied_Fte := g.Occupied_Fte + v_Occupied_Fte;
      
        z_Hrm_Robot_Turnover.Insert_Row(g);
        return;
      end loop;
    
      g.Company_Id   := i_Company_Id;
      g.Filial_Id    := i_Filial_Id;
      g.Robot_Id     := i_Robot_Id;
      g.Period       := i_Trans_Date;
      g.Planed_Fte   := v_Planed_Fte;
      g.Booked_Fte   := v_Booked_Fte;
      g.Occupied_Fte := v_Occupied_Fte;
    
      z_Hrm_Robot_Turnover.Insert_Row(g);
    end;
  begin
    case i_Fte_Kind
      when Hrm_Pref.c_Fte_Kind_Planed then
        v_Planed_Fte := i_Fte;
      when Hrm_Pref.c_Fte_Kind_Booked then
        v_Booked_Fte := i_Fte;
      when Hrm_Pref.c_Fte_Kind_Occupied then
        v_Occupied_Fte := i_Fte;
      else
        Hrm_Error.Raise_007;
    end case;
  
    z_Hrm_Robots.Lock_Only(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Robot_Id   => i_Robot_Id);
  
    update Hrm_Robot_Turnover q
       set q.Planed_Fte   = q.Planed_Fte + v_Planed_Fte,
           q.Booked_Fte   = q.Booked_Fte + v_Booked_Fte,
           q.Occupied_Fte = q.Occupied_Fte + v_Occupied_Fte
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Robot_Id = i_Robot_Id
       and q.Period >= i_Trans_Date
    returning q.Period bulk collect into v_Periods;
  
    if i_Trans_Date not member of v_Periods then
      Insert_Turnover;
    end if;
  
    Make_Dirty_Robot(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Robot_Id   => i_Robot_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Transaction_Insert
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Trans_Date date,
    i_Fte_Kind   varchar2,
    i_Fte        number,
    i_Tag        varchar2
  ) return number is
    v_Trans_Id number := Hrm_Robot_Transactions_Sq.Nextval;
  begin
    z_Hrm_Robot_Transactions.Insert_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => v_Trans_Id,
                                        i_Robot_Id   => i_Robot_Id,
                                        i_Trans_Date => i_Trans_Date,
                                        i_Fte_Kind   => i_Fte_Kind,
                                        i_Fte        => i_Fte,
                                        i_Tag        => i_Tag);
  
    Robot_Turnover_Evaluate(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Robot_Id   => i_Robot_Id,
                            i_Trans_Date => i_Trans_Date,
                            i_Fte_Kind   => i_Fte_Kind,
                            i_Fte        => i_Fte);
  
    return v_Trans_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Transaction_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Trans_Id   number
  ) is
    r_Transaction Hrm_Robot_Transactions%rowtype;
  begin
    r_Transaction := z_Hrm_Robot_Transactions.Load(i_Company_Id => i_Company_Id,
                                                   i_Filial_Id  => i_Filial_Id,
                                                   i_Trans_Id   => i_Trans_Id);
  
    Robot_Turnover_Evaluate(i_Company_Id => r_Transaction.Company_Id,
                            i_Filial_Id  => r_Transaction.Filial_Id,
                            i_Robot_Id   => r_Transaction.Robot_Id,
                            i_Trans_Date => r_Transaction.Trans_Date,
                            i_Fte_Kind   => r_Transaction.Fte_Kind,
                            i_Fte        => -1 * r_Transaction.Fte);
  
    z_Hrm_Robot_Transactions.Delete_One(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Trans_Id   => i_Trans_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Plans_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number
  ) is
  begin
    for r in (select *
                from Hrm_Robot_Transactions p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Robot_Id = i_Robot_Id
                 and p.Fte_Kind = Hrm_Pref.c_Fte_Kind_Planed
               order by p.Trans_Date desc)
    loop
      Robot_Transaction_Delete(i_Company_Id => r.Company_Id,
                               i_Filial_Id  => r.Filial_Id,
                               i_Trans_Id   => r.Trans_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Open
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Open_Date   date,
    i_Planned_Fte number := 1
  ) is
    v_Id number;
  begin
    v_Id := Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Trans_Date => i_Open_Date,
                                     i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed,
                                     i_Fte        => i_Planned_Fte,
                                     i_Tag        => 'robot open');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Robot_Close
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Robot_Id   number,
    i_Close_Date date
  ) is
    v_Id          number;
    v_Planned_Fte number;
  begin
    v_Planned_Fte := Hrm_Util.Get_Planned_Fte(i_Company_Id => i_Company_Id,
                                              i_Filial_Id  => i_Filial_Id,
                                              i_Robot_Id   => i_Robot_Id,
                                              i_Period     => i_Close_Date);
  
    v_Id := Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                     i_Filial_Id  => i_Filial_Id,
                                     i_Robot_Id   => i_Robot_Id,
                                     i_Trans_Date => i_Close_Date + 1,
                                     i_Fte_Kind   => Hrm_Pref.c_Fte_Kind_Planed,
                                     i_Fte        => -v_Planned_Fte,
                                     i_Tag        => 'robot close');
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Occupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean,
    i_Tag         varchar2
  ) return number is
    v_Fte_Kind varchar2(1) := Hrm_Pref.c_Fte_Kind_Occupied;
  begin
    if i_Is_Booked then
      v_Fte_Kind := Hrm_Pref.c_Fte_Kind_Booked;
    end if;
  
    return Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Trans_Date => i_Occupy_Date,
                                    i_Fte_Kind   => v_Fte_Kind,
                                    i_Fte        => i_Fte,
                                    i_Tag        => i_Tag);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Robot_Unoccupy
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Robot_Id    number,
    i_Occupy_Date date,
    i_Fte         number,
    i_Is_Booked   boolean,
    i_Tag         varchar2
  ) return number is
    v_Fte_Kind varchar2(1) := Hrm_Pref.c_Fte_Kind_Occupied;
  begin
    if i_Is_Booked then
      v_Fte_Kind := Hrm_Pref.c_Fte_Kind_Booked;
    end if;
  
    return Robot_Transaction_Insert(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Trans_Date => i_Occupy_Date,
                                    i_Fte_Kind   => v_Fte_Kind,
                                    i_Fte        => -1 * i_Fte,
                                    i_Tag        => i_Tag);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Wage_Scale_Register_Save(i_Wage_Scale_Reg Hrm_Pref.Wage_Scale_Register_Rt) is
    r_Register          Hrm_Wage_Scale_Registers%rowtype;
    r_Reg_Ranks         Hrm_Register_Ranks%rowtype;
    r_Reg_Indicator     Hrm_Register_Rank_Indicators%rowtype;
    r_Indicator         Href_Indicators%rowtype;
    v_Rank_Ids          Array_Number;
    v_Indicator_Ids     Array_Number;
    v_Reg_Rank          Hrm_Pref.Register_Ranks_Rt;
    v_Reg_Indicator     Hrm_Pref.Register_Rank_Indicator_Rt;
    v_Round_Model       Round_Model;
    v_Wage_Exists       boolean := false;
    v_Wage_Indicator_Id number := Href_Util.Indicator_Id(i_Company_Id => i_Wage_Scale_Reg.Company_Id,
                                                         i_Pcode      => Href_Pref.c_Pcode_Indicator_Wage);
    v_Exists            boolean;
  begin
    if z_Hrm_Wage_Scale_Registers.Exist_Lock(i_Company_Id  => i_Wage_Scale_Reg.Company_Id,
                                             i_Filial_Id   => i_Wage_Scale_Reg.Filial_Id,
                                             i_Register_Id => i_Wage_Scale_Reg.Register_Id,
                                             o_Row         => r_Register) then
      if r_Register.Posted = 'Y' then
        Hrm_Error.Raise_008(r_Register.Register_Id);
      end if;
    
      v_Exists := true;
    else
      r_Register.Company_Id  := i_Wage_Scale_Reg.Company_Id;
      r_Register.Filial_Id   := i_Wage_Scale_Reg.Filial_Id;
      r_Register.Register_Id := i_Wage_Scale_Reg.Register_Id;
      r_Register.Posted      := 'N';
    
      v_Exists := false;
    end if;
  
    r_Register.Register_Date   := i_Wage_Scale_Reg.Register_Date;
    r_Register.Register_Number := i_Wage_Scale_Reg.Register_Number;
    r_Register.Wage_Scale_Id   := i_Wage_Scale_Reg.Wage_Scale_Id;
    r_Register.Valid_From      := i_Wage_Scale_Reg.Valid_From;
    r_Register.Note            := i_Wage_Scale_Reg.Note;
  
    if i_Wage_Scale_Reg.With_Base_Wage = 'Y' then
      if i_Wage_Scale_Reg.Round_Model is null then
        Hrm_Error.Raise_009;
      else
        r_Register.Round_Model := i_Wage_Scale_Reg.Round_Model;
        v_Round_Model          := Round_Model(r_Register.Round_Model);
      end if;
    
      if i_Wage_Scale_Reg.Base_Wage is null then
        Hrm_Error.Raise_010;
      else
        r_Register.Base_Wage := i_Wage_Scale_Reg.Base_Wage;
      end if;
    else
      r_Register.Round_Model := null;
      r_Register.Base_Wage   := null;
    end if;
  
    if v_Exists then
      z_Hrm_Wage_Scale_Registers.Update_Row(r_Register);
    else
      if r_Register.Register_Number is null then
        r_Register.Register_Number := Md_Core.Gen_Number(i_Company_Id => i_Wage_Scale_Reg.Company_Id,
                                                         i_Filial_Id  => i_Wage_Scale_Reg.Filial_Id,
                                                         i_Table      => Zt.Hrm_Wage_Scale_Registers,
                                                         i_Column     => z.Register_Number);
      end if;
    
      z_Hrm_Wage_Scale_Registers.Insert_Row(r_Register);
    end if;
  
    v_Rank_Ids := Array_Number();
    v_Rank_Ids.Extend(i_Wage_Scale_Reg.Ranks.Count);
  
    if i_Wage_Scale_Reg.Ranks.Count = 0 then
      Hrm_Error.Raise_011;
    end if;
  
    for i in 1 .. i_Wage_Scale_Reg.Ranks.Count
    loop
      v_Reg_Rank := i_Wage_Scale_Reg.Ranks(i);
    
      v_Rank_Ids(i) := v_Reg_Rank.Rank_Id;
    
      r_Reg_Ranks.Company_Id  := r_Register.Company_Id;
      r_Reg_Ranks.Filial_Id   := r_Register.Filial_Id;
      r_Reg_Ranks.Register_Id := r_Register.Register_Id;
      r_Reg_Ranks.Rank_Id     := v_Reg_Rank.Rank_Id;
      r_Reg_Ranks.Order_No    := i;
    
      z_Hrm_Register_Ranks.Save_Row(r_Reg_Ranks);
    
      v_Indicator_Ids := Array_Number();
      v_Indicator_Ids.Extend(v_Reg_Rank.Indicators.Count);
    
      for j in 1 .. v_Reg_Rank.Indicators.Count
      loop
        v_Reg_Indicator := v_Reg_Rank.Indicators(j);
        v_Indicator_Ids(j) := v_Reg_Indicator.Indicator_Id;
      
        if not v_Wage_Exists and v_Wage_Indicator_Id = v_Reg_Indicator.Indicator_Id then
          v_Wage_Exists := true;
        end if;
      
        r_Indicator := z_Href_Indicators.Load(i_Company_Id   => r_Reg_Ranks.Company_Id,
                                              i_Indicator_Id => v_Reg_Indicator.Indicator_Id);
      
        if r_Indicator.Used = Href_Pref.c_Indicator_Used_Automatically then
          Hrm_Error.Raise_032(i_Register_Number => r_Register.Register_Number,
                              i_Indicator_Name  => r_Indicator.Name);
        end if;
      
        r_Reg_Indicator.Company_Id      := r_Reg_Ranks.Company_Id;
        r_Reg_Indicator.Filial_Id       := r_Reg_Ranks.Filial_Id;
        r_Reg_Indicator.Register_Id     := r_Reg_Ranks.Register_Id;
        r_Reg_Indicator.Rank_Id         := r_Reg_Ranks.Rank_Id;
        r_Reg_Indicator.Indicator_Id    := v_Reg_Indicator.Indicator_Id;
        r_Reg_Indicator.Indicator_Value := v_Reg_Indicator.Indicator_Value;
      
        if i_Wage_Scale_Reg.With_Base_Wage = 'Y' then
          if v_Reg_Indicator.Coefficient is null then
            Hrm_Error.Raise_012;
          else
            r_Reg_Indicator.Coefficient     := v_Reg_Indicator.Coefficient;
            r_Reg_Indicator.Indicator_Value := v_Round_Model.Eval(r_Register.Base_Wage *
                                                                  r_Reg_Indicator.Coefficient);
          end if;
        end if;
      
        z_Hrm_Register_Rank_Indicators.Save_Row(r_Reg_Indicator);
      end loop;
    
      if not v_Wage_Exists then
        Hrm_Error.Raise_031(r_Register.Register_Number);
      end if;
    
      -- remove unnecessary indicators
      delete from Hrm_Register_Rank_Indicators w
       where w.Company_Id = r_Reg_Ranks.Company_Id
         and w.Filial_Id = r_Reg_Ranks.Filial_Id
         and w.Register_Id = r_Reg_Ranks.Register_Id
         and w.Rank_Id = r_Reg_Ranks.Rank_Id
         and w.Indicator_Id not member of v_Indicator_Ids;
    end loop;
  
    -- remove unnecessary ranks
    delete from Hrm_Register_Ranks w
     where w.Company_Id = r_Register.Company_Id
       and w.Filial_Id = r_Register.Filial_Id
       and w.Register_Id = r_Register.Register_Id
       and w.Rank_Id not member of v_Rank_Ids;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Last_Changed_Date_Refresh
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Wage_Scale_Id number
  ) is
    v_Last_Changed_Date date;
  begin
    begin
      select max(r.Valid_From)
        into v_Last_Changed_Date
        from Hrm_Wage_Scale_Registers r
       where r.Company_Id = i_Company_Id
         and r.Filial_Id = i_Filial_Id
         and r.Wage_Scale_Id = i_Wage_Scale_Id
         and r.Posted = 'Y';
    exception
      when No_Data_Found then
        null;
    end;
  
    z_Hrm_Wage_Scales.Update_One(i_Company_Id        => i_Company_Id,
                                 i_Filial_Id         => i_Filial_Id,
                                 i_Wage_Scale_Id     => i_Wage_Scale_Id,
                                 i_Last_Changed_Date => Option_Date(v_Last_Changed_Date));
  end;

end Hrm_Core;
/

create or replace package Hrm_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Planed_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Booked_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Name         varchar2,
    i_Period       date,
    i_Occupied_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Name   varchar2,
    i_Period date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Name       varchar2,
    i_Period     date,
    i_Exceed_Fte number,
    i_Booked_Fte number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Robot_Id   number,
    i_Trans_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Robot_Name      varchar2,
    i_Journal_Numbers Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Register_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Robot_Name   varchar2,
    i_Old_Division varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Robot_Name varchar2,
    i_Old_Job    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Value varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Value number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Staff_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Division_Name varchar2,
    i_Staff_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Division_Name varchar2,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Division_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Division_Name varchar2,
    i_Org_Unit_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Division_Kind varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Division_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Value varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Register_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Register_Number varchar2,
    i_Indicator_Name  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Wage_Scale_Name varchar2);
end Hrm_Error;
/
create or replace package body Hrm_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hrm_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Planed_Fte number
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:planed_fte robot not between range, robot_id=$1, robot_name=$2, period=$3, planed_fte=$4',
                         i_Robot_Id,
                         i_Name,
                         i_Period,
                         i_Planed_Fte),
          i_Title   => t('001:title:planned fte exceeded'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Robot_Id   number,
    i_Name       varchar2,
    i_Period     date,
    i_Booked_Fte number
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:cannot book fte ($1{booked_fte}) for robot $2{robot_name}, exceeded range between 0 and 1. booked_fte = $3{booked_fte}',
                         i_Name,
                         i_Period,
                         i_Booked_Fte),
          i_Title   => t('002:title:book fte exceeded'),
          i_S1      => t('002:solution:book less fte for robot $1{robot_id}', i_Robot_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Name         varchar2,
    i_Period       date,
    i_Occupied_Fte number
  ) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:cannot occupy fte ($1{occupied_fte}) for robot $2{robot_name}, exceeded range between 0 and 1',
                         i_Name,
                         i_Period,
                         i_Occupied_Fte),
          i_Title   => t('003:title:occupied fte exceeded'),
          i_S1      => t('003:solution:choose another fte kind with less fte value'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Name   varchar2,
    i_Period date
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:planned fte exceeded for robot $1{robot_name} on $2{period}',
                         i_Name,
                         i_Period),
          i_Title   => t('004:title:planned fte exceeded'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Name       varchar2,
    i_Period     date,
    i_Exceed_Fte number,
    i_Booked_Fte number
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:robot $1{robot_name} has $2{exceed_fte} exceeding fte on $3{exceed_period}',
                         i_Name,
                         i_Exceed_Fte,
                         i_Period),
          i_Title   => t('005:title:not enough fte'),
          i_S1      => t('005:solution:choose another fte kind with less fte value'),
          i_S2      => case
                         when i_Booked_Fte > 0 then
                          t('005:solution:book less fte')
                         else
                          null
                       end);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Robot_Id   number,
    i_Trans_Date date
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:implicitly created robot cannot have booked transaction, robot_id=$1, trans_date=$2',
                         i_Robot_Id,
                         i_Trans_Date));
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007 is
  begin
    Error(i_Code => '007', i_Message => t('007:message:robot turnover fte kind not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008(i_Register_Id number) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:cannot change/save wage register. wage register $1{register_id} already posted',
                         i_Register_Id),
          i_S1      => t('008:solution:post wage register with changes'),
          i_S2      => t('008:solution:unpost wage register then save changes'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009 is
  begin
    Error(i_Code => '009', i_Message => t('009:message:wage register round model must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010 is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:wage register base wage model must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011 is
  begin
    Error(i_Code => '011', i_Message => t('011:message:cannot save register without ranks'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012 is
  begin
    Error(i_Code => '012', i_Message => t('012:message:wage register coefficient must be given'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Robot_Name      varchar2,
    i_Journal_Numbers Array_Varchar2
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:cannot disable positions, robot $1{robot_name} was used by multiple staffs',
                         i_Robot_Name),
          i_S1      => t('013:solution:remove robot from all but one journals $1{journal_numbers}',
                         Fazo.Gather(i_Journal_Numbers, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:cannot disable positions, robot $1{robot_name} has booked fte',
                         i_Robot_Name),
          i_S1      => t('014:solution:remove all bookings for robot $1{robot_name}', i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015(i_Register_Id number) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:cannot post wage register. wage register $1{register_id} already posted',
                         i_Register_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016(i_Register_Id number) is
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:to unpost register $1{register_id} it should be initially posted',
                         i_Register_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Robot_Name   varchar2,
    i_Old_Division varchar2
  ) is
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:cannot save robot $1{robot_name}, division change is not allowed',
                         i_Robot_Name),
          i_Title   => t('017:title:cannot change division'),
          i_S1      => t('017:solution:restore old division ($1{old_division}) and try again',
                         i_Old_Division));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Robot_Name varchar2,
    i_Old_Job    varchar2
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:cannot save robot $1{robot_name}, job change is not allowed',
                         i_Robot_Name),
          i_Title   => t('018:title:cannot change job'),
          i_S1      => t('018:solution:restore old job ($1{old_job}) and try again', i_Old_Job));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Value varchar2) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:restrict view hidden salaries value must be in (Y, N), value: $1{value}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Value number) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:planned fte should be between 0 and 1, value: $1{planned_fte}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:division $1{division_name} could not become $1{division_kind_name} because staff $3{staff_name} will change its department as result',
                         i_Division_Name,
                         i_Division_Kind,
                         i_Staff_Name),
          i_Title   => t('021:title:org structure'),
          i_S1      => t('021:solution:manually change department for staff $1{staff_name}',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022
  (
    i_Division_Name varchar2,
    i_Division_Kind varchar2,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:division $1{division_name} could not become $1{division_kind_name} because robot $3{robot_name} will change its department as result',
                         i_Division_Name,
                         i_Division_Kind,
                         i_Robot_Name),
          i_Title   => t('022:title:org structure'),
          i_S1      => t('022:solution:manually change department for robot $1{robot_name}',
                         i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023
  (
    i_Division_Name varchar2,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:division $1{division_name} could not change its parent because staff $2{staff_name} will change its department as result',
                         i_Division_Name,
                         i_Staff_Name),
          i_Title   => t('023:title:org structure'),
          i_S1      => t('023:solution:manually change department for staff $1{staff_name}',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024
  (
    i_Division_Name varchar2,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:division $1{division_name} could not change its parent because robot $2{robot_name} will change its department as result',
                         i_Division_Name,
                         i_Robot_Name),
          i_Title   => t('024:title:org structure'),
          i_S1      => t('024:solution:manually change department for robot $1{robot_name}',
                         i_Robot_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025(i_Division_Name varchar2) is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:could not change org structure settings because division $1{division_name} uses advanced settings',
                         i_Division_Name),
          i_Title   => t('025:title:org structure'),
          i_S1      => t('025:solution:remove or change all divisions that are not departments'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Division_Name varchar2,
    i_Org_Unit_Name varchar2
  ) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:org unit $1{org_unit_name} is not a child of division $2{division_name}',
                         i_Org_Unit_Name,
                         i_Division_Name),
          i_Title   => t('026:title:org structure'),
          i_S1      => t('026:solution:choose a child of division $1{division_name}',
                         i_Division_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Division_Kind varchar2) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:$1{division_kind} division should have parent department',
                         i_Division_Kind),
          i_Title   => t('027:title:org structure'),
          i_S1      => t('027:solution:set parent division from departments'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028(i_Division_Name varchar2) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:robot must be assigned to department'),
          i_Title   => t('028:title:org structure'),
          i_S1      => t('028:solution:change division $1{division_name} to department',
                         i_Division_Name),
          i_S2      => t('028:solution:choose another division'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Value varchar2) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:restrict all salaries value must be in (Y, N), value: $1{value}',
                         i_Value));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:you cannot set closed date for $1{robot_name}', i_Robot_Name),
          i_Title   => t('030:title:find robot persons'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031(i_Register_Number varchar2) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:for save wage scale register, wage must be set, $1{register_number}',
                         i_Register_Number),
          i_Title   => t('031:title:wage not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032
  (
    i_Register_Number varchar2,
    i_Indicator_Name  varchar2
  ) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:indicator must be system indicator, register number: $1{register_number}, indicator name : $2{indicator_name}',
                         i_Register_Number,
                         i_Indicator_Name),
          i_Title   => t('032:title:indicator is not system indicator'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:robot not found with this name, name: $1{robot name}',
                         i_Robot_Name),
          i_Title   => t('033:title:robot not found'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Wage_Scale_Name varchar2) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:wage scale not found with this name, name: $1{wage scale name}',
                         i_Wage_Scale_Name),
          i_Title   => t('034:title:wage scale not found'));
  end;

end Hrm_Error;
/

create or replace package Hrm_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Division_Change(i_Division Mhr_Global.Division_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure On_Robot_Save(i_Robot Mrf_Robots%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure On_Manager_Change(i_Division_Manager Mrf_Division_Managers%rowtype);
end Hrm_Watcher;
/
create or replace package body Hrm_Watcher is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HRM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure On_Division_Change(i_Division Mhr_Global.Division_Rt) is
    r_Mhr_New              Mhr_Divisions%rowtype;
    r_Hrm_Old              Hrm_Divisions%rowtype;
    r_Manager              Mrf_Division_Managers%rowtype;
    v_Parent_Department_Id number;
    v_Hrm_Exists           boolean := true;
    v_Parent_Changed       boolean := false;
  begin
    if not z_Hrm_Divisions.Exist_Lock(i_Company_Id  => i_Division.Company_Id,
                                      i_Filial_Id   => i_Division.Filial_Id,
                                      i_Division_Id => i_Division.Division_Id,
                                      o_Row         => r_Hrm_Old) then
      r_Hrm_Old.Company_Id     := i_Division.Company_Id;
      r_Hrm_Old.Filial_Id      := i_Division.Filial_Id;
      r_Hrm_Old.Division_Id    := i_Division.Division_Id;
      r_Hrm_Old.Is_Department  := 'Y';
      r_Hrm_Old.Manager_Status := Hrm_Pref.c_Division_Manager_Status_Manual;
    
      v_Hrm_Exists := false;
    end if;
  
    v_Parent_Department_Id := r_Hrm_Old.Parent_Department_Id;
  
    r_Mhr_New := z_Mhr_Divisions.Lock_Load(i_Company_Id  => i_Division.Company_Id,
                                           i_Filial_Id   => i_Division.Filial_Id,
                                           i_Division_Id => i_Division.Division_Id);
  
    if not Fazo.Equal(i_Division.Old_Parent_Id, r_Mhr_New.Parent_Id) then
      v_Parent_Department_Id := Hrm_Util.Closest_Parent_Department_Id(i_Company_Id  => i_Division.Company_Id,
                                                                      i_Filial_Id   => i_Division.Filial_Id,
                                                                      i_Division_Id => i_Division.Division_Id);
    
      if not Fazo.Equal(r_Hrm_Old.Parent_Department_Id, v_Parent_Department_Id) then
        Hrm_Core.Assert_Division_Parent_Changeable(i_Company_Id    => i_Division.Company_Id,
                                                   i_Filial_Id     => i_Division.Filial_Id,
                                                   i_Division_Id   => i_Division.Division_Id,
                                                   i_Is_Department => r_Hrm_Old.Is_Department);
      
        v_Parent_Changed := true;
      end if;
    end if;
  
    if v_Parent_Department_Id is null and r_Hrm_Old.Is_Department = 'N' then
      Hrm_Error.Raise_027(Hrm_Util.t_Division_Kind_Team);
    end if;
  
    z_Hrm_Divisions.Save_One(i_Company_Id           => i_Division.Company_Id,
                             i_Filial_Id            => i_Division.Filial_Id,
                             i_Division_Id          => i_Division.Division_Id,
                             i_Parent_Department_Id => v_Parent_Department_Id,
                             i_Is_Department        => r_Hrm_Old.Is_Department,
                             i_Manager_Status       => r_Hrm_Old.Manager_Status);
  
    if v_Hrm_Exists and v_Parent_Changed then
      Hrm_Core.Update_Parent_Departments(i_Company_Id    => i_Division.Company_Id,
                                         i_Filial_Id     => i_Division.Filial_Id,
                                         i_Division_Id   => i_Division.Division_Id,
                                         i_Old_Parent_Id => case
                                                              when r_Hrm_Old.Is_Department = 'Y' then
                                                               r_Hrm_Old.Parent_Department_Id
                                                              else
                                                               i_Division.Division_Id
                                                            end,
                                         i_New_Parent_Id => case
                                                              when r_Hrm_Old.Is_Department = 'Y' then
                                                               i_Division.Division_Id
                                                              else
                                                               v_Parent_Department_Id
                                                            end);
      if r_Hrm_Old.Manager_Status = Hrm_Pref.c_Division_Manager_Status_Auto then
        r_Manager.Company_Id  := i_Division.Company_Id;
        r_Manager.Filial_Id   := i_Division.Filial_Id;
        r_Manager.Division_Id := i_Division.Division_Id;
      
        r_Manager.Manager_Id := z_Mrf_Division_Managers.Take(i_Company_Id => i_Division.Company_Id, --
                                i_Filial_Id => i_Division.Filial_Id, --
                                i_Division_Id => r_Mhr_New.Parent_Id).Manager_Id;
      
        On_Manager_Change(r_Manager);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure On_Robot_Save(i_Robot Mrf_Robots%rowtype) is
    r_Robot Mrf_Robots%rowtype;
  begin
    if z_Hrm_Robots.Exist_Lock(i_Company_Id => i_Robot.Company_Id,
                               i_Filial_Id  => i_Robot.Filial_Id,
                               i_Robot_Id   => i_Robot.Robot_Id) then
      r_Robot := z_Mrf_Robots.Lock_Load(i_Company_Id => i_Robot.Company_Id,
                                        i_Filial_Id  => i_Robot.Filial_Id,
                                        i_Robot_Id   => i_Robot.Robot_Id);
    
      if Md_Env.Project_Code <> Verifix_Settings.c_Pc_Verifix_Hr and
         Hrm_Util.Access_Edit_Div_Job_Of_Robot(i_Company_Id => i_Robot.Company_Id,
                                               i_Filial_Id  => i_Robot.Filial_Id,
                                               i_Robot_Id   => i_Robot.Robot_Id) = 'N' then
        if not Fazo.Equal(r_Robot.Division_Id, i_Robot.Division_Id) then
          b.Raise_Error(t('hrm_watcher.on_robot_save: cannot change division, robot_id=$1, old_division_id=$2, new_division_id=$3',
                          i_Robot.Robot_Id,
                          i_Robot.Division_Id,
                          r_Robot.Division_Id));
        end if;
      
        if not Fazo.Equal(r_Robot.Job_Id, i_Robot.Job_Id) then
          b.Raise_Error(t('hrm_watcher.on_robot_save: cannot change job, robot_id=$1, old_job_id=$2, new_job_id=$3',
                          i_Robot.Robot_Id,
                          i_Robot.Job_Id,
                          r_Robot.Job_Id));
        end if;
      end if;
    
      z_Hrm_Robots.Update_One(i_Company_Id => i_Robot.Company_Id,
                              i_Filial_Id  => i_Robot.Filial_Id,
                              i_Robot_Id   => i_Robot.Robot_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure On_Manager_Change(i_Division_Manager Mrf_Division_Managers%rowtype) is
  begin
    delete Hrm_Robot_Divisions p
     where p.Company_Id = i_Division_Manager.Company_Id
       and p.Filial_Id = i_Division_Manager.Filial_Id
       and p.Division_Id = i_Division_Manager.Division_Id
       and p.Access_Type = Hrm_Pref.c_Access_Type_Structural;
  
    if z_Mrf_Division_Managers.Exist(i_Company_Id  => i_Division_Manager.Company_Id,
                                     i_Filial_Id   => i_Division_Manager.Filial_Id,
                                     i_Division_Id => i_Division_Manager.Division_Id) and
       z_Hrm_Robots.Exist(i_Company_Id => i_Division_Manager.Company_Id,
                          i_Filial_Id  => i_Division_Manager.Filial_Id,
                          i_Robot_Id   => i_Division_Manager.Manager_Id) then
      z_Hrm_Robot_Divisions.Save_One(i_Company_Id  => i_Division_Manager.Company_Id,
                                     i_Filial_Id   => i_Division_Manager.Filial_Id,
                                     i_Robot_Id    => i_Division_Manager.Manager_Id,
                                     i_Division_Id => i_Division_Manager.Division_Id,
                                     i_Access_Type => Hrm_Pref.c_Access_Type_Structural);
    
      Hrm_Api.Update_Child_Manager(i_Company_Id     => i_Division_Manager.Company_Id,
                                   i_Filial_Id      => i_Division_Manager.Filial_Id,
                                   i_Division_Id    => i_Division_Manager.Division_Id,
                                   i_New_Manager_Id => i_Division_Manager.Manager_Id);
    end if;
  end;

end Hrm_Watcher;
/

create or replace package Hsc_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001;
end Hsc_Error;
/
create or replace package body Hsc_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HSC:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hsc_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001 is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:FTP server url is not provided'),
          i_S1      => t('001:solution:provide FTP server url, username and password'));
  end;

end Hsc_Error;
/

create or replace package Hsc_Job is
  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Response_Procedure(i_Input Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Weekly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Monthly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Quarterly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Yearly_Predict_Request_Procedure(o_Output out Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Load_Object_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Predict_Type varchar2,
    o_Facts        out Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Object_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Data       Array_Varchar2
  );
end Hsc_Job;
/
create or replace package body Hsc_Job is
  ---------------------------------------------------------------------------------------------------- 
  c_Xlsx_File_Extension constant varchar2(5) := '.xlsx';
  ---------------------------------------------------------------------------------------------------- 
  c_Train_Begin constant date := to_date('01.01.2016', 'dd.mm.yyyy');

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Error_Log
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Error_Log  varchar2
  ) is
    pragma autonomous_transaction;
  begin
    z_Hsc_Job_Error_Log.Save_One(i_Log_Id     => Hsc_Job_Error_Log_Sq.Nextval,
                                 i_Company_Id => i_Company_Id,
                                 i_Filial_Id  => i_Filial_Id,
                                 i_Error_Log  => i_Error_Log);
    commit;
  exception
    when others then
      rollback;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Last_Ftp_Date
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Last_Fact_Date date
  ) is
    r_Settings Hsc_Server_Settings%rowtype;
  begin
    if i_Last_Fact_Date is null then
      return;
    end if;
  
    r_Settings := z_Hsc_Server_Settings.Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id);
  
    if r_Settings.Last_Ftp_File_Date is null or r_Settings.Last_Ftp_File_Date < i_Last_Fact_Date then
      z_Hsc_Server_Settings.Update_One(i_Company_Id         => i_Company_Id,
                                       i_Filial_Id          => i_Filial_Id,
                                       i_Last_Ftp_File_Date => Option_Date(i_Last_Fact_Date));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Request_Procedure(o_Output out Array_Varchar2) is
    v_Filenames Array_Varchar2;
  
    v_Last_Ftp_File_Date date;
    v_Current_Date       date := Trunc(sysdate);
    v_Max_Ftp_Load_Date  date := v_Current_Date - 40;
  
    v_Detail_Map  Hashmap;
    v_Data_Map    Hashmap;
    v_Filial_Data Hashmap := Hashmap;
    result        Arraylist := Arraylist;
    Writer        Stream := Stream;
  begin
    for Cmp in (select *
                  from Md_Companies t
                 where t.State = 'A'
                   and exists (select 1
                          from Hsc_Server_Settings St
                         where St.Company_Id = t.Company_Id))
    loop
      for f in (select St.Company_Id,
                       St.Filial_Id,
                       St.Ftp_Server_Url,
                       St.Ftp_Username,
                       St.Ftp_Password,
                       St.Predict_Server_Url,
                       St.Last_Ftp_File_Date
                  from Md_Filials w
                  join Hsc_Server_Settings St
                    on St.Company_Id = w.Company_Id
                   and St.Filial_Id = w.Filial_Id
                 where w.Company_Id = Cmp.Company_Id
                   and w.State = 'A')
      loop
        v_Data_Map    := Hashmap;
        v_Filial_Data := Hashmap;
      
        v_Detail_Map := Fazo.Zip_Map('server_url',
                                     f.Ftp_Server_Url,
                                     'username',
                                     f.Ftp_Username,
                                     'password',
                                     f.Ftp_Password,
                                     'company_id',
                                     f.Company_Id,
                                     'filial_id',
                                     f.Filial_Id);
      
        v_Last_Ftp_File_Date := Nvl(Greatest(f.Last_Ftp_File_Date + 1, v_Max_Ftp_Load_Date),
                                    v_Max_Ftp_Load_Date);
      
        v_Filenames := Array_Varchar2();
      
        while v_Last_Ftp_File_Date <= v_Current_Date
        loop
          Fazo.Push(v_Filenames,
                    to_char(v_Last_Ftp_File_Date, 'yyyy-mm-dd') || c_Xlsx_File_Extension);
        
          v_Last_Ftp_File_Date := v_Last_Ftp_File_Date + 1;
        end loop;
      
        v_Data_Map.Put('filenames', v_Filenames);
      
        v_Filial_Data.Put('detail', v_Detail_Map);
        v_Filial_Data.Put('request_data', v_Data_Map);
      
        Result.Push(v_Filial_Data);
      end loop;
    end loop;
  
    Result.Print_Json(Writer);
  
    o_Output := Writer.Val;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Ftp_File_Load_Response_Procedure(i_Input Array_Varchar2) is
    v_Input       Glist := Glist(Json_Array_t.Parse(Fazo.Make_Clob(i_Input)));
    v_Result_Data Gmap := Gmap;
    v_Review_Data Gmap := Gmap;
    v_Files       Glist;
  
    v_Excel_File   Array_Varchar2;
    v_Excel_Sheets Arraylist;
  
    v_Data Hashmap;
  
    v_Errors_Data Hashmap;
    v_Errors      Arraylist;
  
    v_Company_Id number;
    v_Filial_Id  number;
  begin
    for i in 1 .. v_Input.Count
    loop
      Dbms_Session.Reset_Package;
    
      Biruni_Route.Context_Begin;
    
      begin
        v_Result_Data.Val := v_Input.r_Gmap(i);
      
        v_Review_Data := v_Result_Data.r_Gmap('review_data');
        v_Files       := v_Result_Data.r_Glist('files');
      
        v_Company_Id := v_Review_Data.r_Varchar2('company_id');
        v_Filial_Id  := v_Review_Data.r_Varchar2('filial_id');
      
        Ui_Context.Init(i_User_Id      => Md_Pref.User_System(v_Company_Id),
                        i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr,
                        i_Filial_Id    => v_Filial_Id);
      
        v_Data := Hashmap();
      
        for j in 1 .. v_Files.Count
        loop
          v_Excel_File := v_Files.r_Array_Varchar2(j);
        
          v_Excel_Sheets := Fazo.Parse_Array(v_Excel_File);
        
          v_Data.Put('import_file', v_Excel_Sheets);
        
          v_Errors_Data := Hsc_Facts.Import_File(i_Company_Id => v_Company_Id,
                                                 i_Filial_Id  => v_Filial_Id,
                                                 i_Data       => v_Data);
        
          v_Errors := v_Errors_Data.r_Arraylist('errors');
        
          Save_Error_Log(i_Company_Id => v_Company_Id,
                         i_Filial_Id  => v_Filial_Id,
                         i_Error_Log  => v_Errors.Json);
        
          Update_Last_Ftp_Date(i_Company_Id     => v_Company_Id,
                               i_Filial_Id      => v_Filial_Id,
                               i_Last_Fact_Date => v_Errors_Data.o_Date('max_fact_date'));
        end loop;
      exception
        when others then
          Save_Error_Log(i_Company_Id => v_Company_Id,
                         i_Filial_Id  => v_Filial_Id,
                         i_Error_Log  => Dbms_Utility.Format_Error_Stack || ' ' ||
                                         Dbms_Utility.Format_Error_Backtrace);
      end;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Predict_Request_Procedure
  (
    o_Output       out Array_Varchar2,
    i_Predict_Type varchar2
  ) is
    v_Object_Ids Array_Number;
  
    v_Detail_Map  Hashmap;
    v_Filial_Data Hashmap := Hashmap;
    result        Arraylist := Arraylist;
    Writer        Stream := Stream;
  begin
    for f in (select t.*, w.Filial_Id, St.Predict_Server_Url
                from Md_Companies t
                join Md_Filials w
                  on w.Company_Id = t.Company_Id
                 and w.State = 'A'
                join Hsc_Server_Settings St
                  on St.Company_Id = w.Company_Id
                 and St.Filial_Id = w.Filial_Id
               where t.State = 'A'
                 and exists (select 1
                        from Hsc_Objects p
                       where p.Company_Id = w.Company_Id
                         and p.Filial_Id = w.Filial_Id)
                 and not exists (select 1
                        from Hsc_Driver_Facts Df
                       where Df.Company_Id = w.Company_Id
                         and Df.Filial_Id = w.Filial_Id
                         and Df.Fact_Type = i_Predict_Type
                         and Df.Fact_Date > Trunc(sysdate)))
    loop
      v_Filial_Data := Fazo.Zip_Map('company_id',
                                    f.Company_Id,
                                    'filial_id',
                                    f.Filial_Id,
                                    'predict_type',
                                    i_Predict_Type);
    
      v_Detail_Map := Fazo.Zip_Map('host_url',
                                   Nvl(f.Predict_Server_Url, Hsc_Pref.c_Predict_Server_Url),
                                   'method',
                                   Hsc_Pref.c_Default_Http_Method,
                                   'api_uri',
                                   Hsc_Pref.c_Predict_Api_Uri);
    
      select q.Object_Id
        bulk collect
        into v_Object_Ids
        from Hsc_Objects q
       where q.Company_Id = f.Company_Id
         and q.Filial_Id = f.Filial_Id
         and exists (select 1
                from Mhr_Divisions p
               where p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Division_Id = q.Object_Id);
    
      v_Filial_Data.Put('detail', v_Detail_Map);
      v_Filial_Data.Put('object_ids', v_Object_Ids);
    
      Result.Push(v_Filial_Data);
    end loop;
  
    Result.Print_Json(Writer);
  
    o_Output := Writer.Val;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Weekly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Weekly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Monthly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Montly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Quarterly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Quarterly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Yearly_Predict_Request_Procedure(o_Output out Array_Varchar2) is
  begin
    Predict_Request_Procedure(o_Output       => o_Output,
                              i_Predict_Type => Hsc_Pref.c_Fact_Type_Yearly_Predict);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Load_Object_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Object_Id    number,
    i_Predict_Type varchar2,
    o_Facts        out Array_Varchar2
  ) is
    v_Train_End     date;
    v_Predict_Begin date;
    v_Predict_End   date;
  
    v_Category   Gmap;
    v_Categories Glist := Glist();
  
    v_Data Gmap := Gmap();
  begin
    v_Train_End := case i_Predict_Type
                     when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                      Trunc(sysdate, 'iw')
                     when Hsc_Pref.c_Fact_Type_Montly_Predict then
                      Trunc(sysdate, 'mon')
                     when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                      Trunc(sysdate, 'q')
                     else
                      Trunc(sysdate, 'year')
                   end;
  
    v_Train_End := v_Train_End - 1;
  
    v_Predict_Begin := v_Train_End + 1;
    v_Predict_End   := case i_Predict_Type
                         when Hsc_Pref.c_Fact_Type_Weekly_Predict then
                          v_Predict_Begin + 7
                         when Hsc_Pref.c_Fact_Type_Montly_Predict then
                          Last_Day(v_Predict_Begin)
                         when Hsc_Pref.c_Fact_Type_Quarterly_Predict then
                          Htt_Util.Quarter_Last_Day(v_Predict_Begin)
                         else
                          Htt_Util.Year_Last_Day(v_Predict_Begin)
                       end;
  
    for r in (select Df.Area_Id,
                     Df.Driver_Id,
                     Json_Arrayagg(Json_Object('fact_date' value to_char(Df.Fact_Date, 'yyyy-mm-dd'),
                                               'fact_value' value Df.Fact_Value) returning clob) Facts
                from Hsc_Driver_Facts Df
               where Df.Company_Id = i_Company_Id
                 and Df.Filial_Id = i_Filial_Id
                 and Df.Object_Id = i_Object_Id
                 and Df.Fact_Type = Hsc_Pref.c_Fact_Type_Actual
                 and Df.Fact_Date between c_Train_Begin and v_Train_End
                 and not exists (select 1
                        from Hsc_Driver_Facts f
                       where f.Company_Id = Df.Company_Id
                         and f.Filial_Id = Df.Filial_Id
                         and f.Fact_Type = i_Predict_Type
                         and f.Area_Id = Df.Area_Id
                         and f.Driver_Id = Df.Driver_Id
                         and f.Fact_Date > Trunc(sysdate))
               group by Df.Area_Id, Df.Driver_Id)
    loop
      v_Category := Gmap();
    
      v_Category.Put('area_id', r.Area_Id);
      v_Category.Put('driver_id', r.Driver_Id);
      v_Category.Val.Put('facts', r.Facts);
    
      v_Categories.Push(v_Category.Val);
    end loop;
  
    v_Data.Put('categories', v_Categories);
    v_Data.Put('predict_begin', to_char(v_Predict_Begin, 'yyyy-mm-dd'));
    v_Data.Put('predict_end', to_char(v_Predict_End, 'yyyy-mm-dd'));
    v_Data.Put('predict_type', i_Predict_Type);
  
    o_Facts := Fazo.Read_Clob(v_Data.Val.To_Clob());
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Object_Facts
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Object_Id  number,
    i_Data       Array_Varchar2
  ) is
    v_Data   Hashmap;
    v_Errors Arraylist;
    v_Error  Hashmap;
  begin
    Biruni_Route.Context_Begin;
    Ui_Auth.Logon_As_System(i_Company_Id);
    v_Data := Hsc_Facts.Predict_Facts_Response(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Object_Id  => i_Object_Id,
                                               i_Data       => i_Data);
  
    v_Errors := v_Data.r_Arraylist('errors');
  
    for i in 1 .. v_Errors.Count
    loop
      v_Error := Treat(v_Errors.r_Hashmap(i) as Hashmap);
    
      Save_Error_Log(i_Company_Id => i_Company_Id,
                     i_Filial_Id  => i_Filial_Id,
                     i_Error_Log  => v_Error.Json);
    end loop;
  
    Biruni_Route.Context_End;
  end;

end Hsc_Job;
/

create or replace package Hsc_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Filial_Add(i_Filial Md_Global.Filial_Rt);
end Hsc_Watcher;
/
create or replace package body Hsc_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Filial_Add(i_Filial Md_Global.Filial_Rt) is
    v_Company_Head number := Md_Pref.c_Company_Head;
    v_Pc_Like      varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query        varchar2(4000);
    v_Lang_Code    Md_Companies.Lang_Code%type := z_Md_Companies.Load(i_Filial.Company_Id).Lang_Code;
    r_Driver       Hsc_Drivers%rowtype;
  begin
    -- driver
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Hsc_Drivers,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Hsc_Drivers t
               where t.Company_Id = v_Company_Head
                 and t.Filial_Id = Md_Pref.Filial_Head(v_Company_Head)
                 and t.Pcode like v_Pc_Like)
    loop
      r_Driver            := r;
      r_Driver.Company_Id := i_Filial.Company_Id;
      r_Driver.Filial_Id  := i_Filial.Filial_Id;
      r_Driver.Driver_Id  := Hsc_Next.Driver_Id;
    
      select t.Measure_Id
        into r_Driver.Measure_Id
        from Mr_Measures t
       where t.Company_Id = r_Driver.Company_Id
         and t.Pcode = (select s.Pcode
                          from Mr_Measures s
                         where s.Company_Id = r.Company_Id
                           and s.Measure_Id = r.Measure_Id);
    
      execute immediate v_Query
        using in r_Driver, out r_Driver;
    
      z_Hsc_Drivers.Save_Row(r_Driver);
    end loop;
  end;

end Hsc_Watcher;
/

create or replace package Htm_Api is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Save(i_Experience Htm_Pref.Experience_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Add_Job
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Job_Id        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Remove_Job
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Job_Id        number
  );
  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Save(i_Document Htm_Pref.Recommended_Rank_Document_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Trainings
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Training_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Status
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Status_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Set_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Waiting
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Approved
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
end Htm_Api;
/
create or replace package body Htm_Api is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Save(i_Experience Htm_Pref.Experience_Rt) is
    v_From_Rank_Ids Array_Number := Array_Number();
    v_Attempt_Nos   Array_Number;
    v_Period        Htm_Pref.Experience_Period_Rt;
    v_Attempt       Htm_Pref.Experience_Period_Attempt_Rt;
    v_Attempt_No    number;
    r_Experience    Htm_Experiences%rowtype;
  
    --------------------------------------------------
    Function Rank_Name
    (
      i_Company_Id number,
      i_Filial_Id  number,
      i_Rank_Id    number
    ) return varchar2 is
    begin
      return z_Mhr_Ranks.Take(i_Company_Id => i_Company_Id, --
                              i_Filial_Id  => i_Filial_Id,
                              i_Rank_Id    => i_Rank_Id).Name;
    end;
  
  begin
    z_Htm_Experiences.Init(p_Row           => r_Experience,
                           i_Company_Id    => i_Experience.Company_Id,
                           i_Filial_Id     => i_Experience.Filial_Id,
                           i_Experience_Id => i_Experience.Experience_Id,
                           i_Name          => i_Experience.Name,
                           i_Order_No      => i_Experience.Order_No,
                           i_State         => i_Experience.State,
                           i_Code          => i_Experience.Code);
  
    z_Htm_Experiences.Save_Row(r_Experience);
  
    for i in 1 .. i_Experience.Periods.Count
    loop
      v_Period := i_Experience.Periods(i);
    
      continue when v_Period.Attempts is null or v_Period.Attempts.Count = 0;
    
      Fazo.Push(v_From_Rank_Ids, v_Period.From_Rank_Id);
    
      z_Htm_Experience_Periods.Save_One(i_Company_Id    => i_Experience.Company_Id,
                                        i_Filial_Id     => i_Experience.Filial_Id,
                                        i_Experience_Id => i_Experience.Experience_Id,
                                        i_From_Rank_Id  => v_Period.From_Rank_Id,
                                        i_To_Rank_Id    => v_Period.To_Rank_Id,
                                        i_Order_No      => v_Period.Order_No);
    
      v_Attempt_Nos := Array_Number();
    
      for j in 1 .. v_Period.Attempts.Count
      loop
        v_Attempt_No := j;
        v_Attempt    := v_Period.Attempts(j);
      
        Fazo.Push(v_Attempt_Nos, v_Attempt_No);
      
        if v_Attempt.Period < v_Attempt.Nearest then
          Htm_Error.Raise_001(i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if v_Attempt.Success_Score < v_Attempt.Ignore_Score then
          Htm_Error.Raise_008(i_Ignore_Score   => v_Attempt.Ignore_Score,
                              i_Success_Score  => v_Attempt.Success_Score,
                              i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if v_Attempt.Ignore_Score >= 100 then
          Htm_Error.Raise_009(i_Ignore_Score   => v_Attempt.Ignore_Score,
                              i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if v_Attempt.Success_Score > 100 then
          Htm_Error.Raise_010(i_Success_Score  => v_Attempt.Success_Score,
                              i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if Nvl(v_Attempt.Period, 0) <= 0 then
          Htm_Error.Raise_011(i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if Nvl(v_Attempt.Nearest, 0) <= 0 then
          Htm_Error.Raise_012(i_From_Rank_Name => Rank_Name(i_Company_Id => i_Experience.Company_Id,
                                                            i_Filial_Id  => i_Experience.Filial_Id,
                                                            i_Rank_Id    => v_Period.From_Rank_Id),
                              i_Attempt_No     => v_Attempt_No);
        end if;
      
        if v_Attempt.Penalty_Period <= 0 then
          v_Attempt.Penalty_Period := null;
        end if;
      
        z_Htm_Experience_Period_Attempts.Save_One(i_Company_Id        => i_Experience.Company_Id,
                                                  i_Filial_Id         => i_Experience.Filial_Id,
                                                  i_Experience_Id     => i_Experience.Experience_Id,
                                                  i_From_Rank_Id      => v_Period.From_Rank_Id,
                                                  i_Attempt_No        => v_Attempt_No,
                                                  i_Period            => v_Attempt.Period,
                                                  i_Nearest           => v_Attempt.Nearest,
                                                  i_Penalty_Period    => v_Attempt.Penalty_Period,
                                                  i_Exam_Id           => v_Attempt.Exam_Id,
                                                  i_Success_Score     => v_Attempt.Success_Score,
                                                  i_Ignore_Score      => v_Attempt.Ignore_Score,
                                                  i_Recommend_Failure => v_Attempt.Recommend_Failure);
      
        for k in 1 .. v_Attempt.Indicators.Count
        loop
          z_Htm_Experience_Period_Indicators.Insert_Try(i_Company_Id    => i_Experience.Company_Id,
                                                        i_Filial_Id     => i_Experience.Filial_Id,
                                                        i_Experience_Id => i_Experience.Experience_Id,
                                                        i_From_Rank_Id  => v_Period.From_Rank_Id,
                                                        i_Attempt_No    => v_Attempt_No,
                                                        i_Indicator_Id  => v_Attempt.Indicators(k));
        end loop;
      
        for k in 1 .. v_Attempt.Subjects.Count
        loop
          z_Htm_Experience_Training_Subjects.Insert_Try(i_Company_Id    => i_Experience.Company_Id,
                                                        i_Filial_Id     => i_Experience.Filial_Id,
                                                        i_Experience_Id => i_Experience.Experience_Id,
                                                        i_From_Rank_Id  => v_Period.From_Rank_Id,
                                                        i_Attempt_No    => v_Attempt_No,
                                                        i_Subject_Id    => v_Attempt.Subjects(k));
        end loop;
      
        delete Htm_Experience_Period_Indicators q
         where q.Company_Id = i_Experience.Company_Id
           and q.Filial_Id = i_Experience.Filial_Id
           and q.Experience_Id = i_Experience.Experience_Id
           and q.From_Rank_Id = v_Period.From_Rank_Id
           and q.Attempt_No = v_Attempt_No
           and q.Indicator_Id not member of v_Attempt.Indicators;
      
        delete Htm_Experience_Training_Subjects q
         where q.Company_Id = i_Experience.Company_Id
           and q.Filial_Id = i_Experience.Filial_Id
           and q.Experience_Id = i_Experience.Experience_Id
           and q.From_Rank_Id = v_Period.From_Rank_Id
           and q.Attempt_No = v_Attempt_No
           and q.Subject_Id not member of v_Attempt.Subjects;
      end loop;
    
      for r in (select *
                  from Htm_Experience_Period_Attempts q
                 where q.Company_Id = i_Experience.Company_Id
                   and q.Filial_Id = i_Experience.Filial_Id
                   and q.Experience_Id = i_Experience.Experience_Id
                   and q.From_Rank_Id = v_Period.From_Rank_Id
                   and q.Attempt_No not member of v_Attempt_Nos)
      loop
        z_Htm_Experience_Period_Attempts.Delete_One(i_Company_Id    => r.Company_Id,
                                                    i_Filial_Id     => r.Filial_Id,
                                                    i_Experience_Id => r.Experience_Id,
                                                    i_From_Rank_Id  => r.From_Rank_Id,
                                                    i_Attempt_No    => r.Attempt_No);
      end loop;
    end loop;
  
    for r in (select q.*
                from Htm_Experience_Periods q
               where q.Company_Id = i_Experience.Company_Id
                 and q.Filial_Id = i_Experience.Filial_Id
                 and q.Experience_Id = i_Experience.Experience_Id
                 and q.From_Rank_Id not member of v_From_Rank_Ids)
    loop
      z_Htm_Experience_Periods.Delete_One(i_Company_Id    => r.Company_Id,
                                          i_Filial_Id     => r.Filial_Id,
                                          i_Experience_Id => r.Experience_Id,
                                          i_From_Rank_Id  => r.From_Rank_Id);
    end loop;
  
    Htm_Core.Fix_Experience_Job_Rank(i_Company_Id    => i_Experience.Company_Id,
                                     i_Filial_Id     => i_Experience.Filial_Id,
                                     i_Experience_Id => i_Experience.Experience_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Delete
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number
  ) is
  begin
    z_Htm_Experiences.Delete_One(i_Company_Id    => i_Company_Id,
                                 i_Filial_Id     => i_Filial_Id,
                                 i_Experience_Id => i_Experience_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Add_Job
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Job_Id        number
  ) is
    v_Row Htm_Experience_Jobs%rowtype;
  begin
    select *
      into v_Row
      from Htm_Experience_Jobs q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Job_Id = i_Job_Id;
  
    Htm_Error.Raise_002(i_Job_Name        => z_Mhr_Jobs.Load(i_Company_Id => v_Row.Company_Id, i_Filial_Id => v_Row.Filial_Id, i_Job_Id => v_Row.Job_Id).Name,
                        i_Experience_Name => z_Htm_Experiences.Load(i_Company_Id => v_Row.Company_Id, i_Filial_Id => v_Row.Filial_Id, i_Experience_Id => v_Row.Experience_Id).Name);
  exception
    when No_Data_Found then
      z_Htm_Experience_Jobs.Insert_One(i_Company_Id    => i_Company_Id,
                                       i_Filial_Id     => i_Filial_Id,
                                       i_Experience_Id => i_Experience_Id,
                                       i_Job_Id        => i_Job_Id);
    
      Htm_Core.Fix_Experience_Job_Rank(i_Company_Id => i_Company_Id,
                                       i_Filial_Id  => i_Filial_Id,
                                       i_Job_Id     => i_Job_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Remove_Job
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Job_Id        number
  ) is
  begin
    z_Htm_Experience_Jobs.Delete_One(i_Company_Id    => i_Company_Id,
                                     i_Filial_Id     => i_Filial_Id,
                                     i_Experience_Id => i_Experience_Id,
                                     i_Job_Id        => i_Job_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Save(i_Document Htm_Pref.Recommended_Rank_Document_Rt) is
    r_Document  Htm_Recommended_Rank_Documents%rowtype;
    r_Attempt   Htm_Experience_Period_Attempts%rowtype;
    r_Old_Staff Htm_Recommended_Rank_Staffs%rowtype;
    v_Staff     Htm_Pref.Recommended_Rank_Staff_Rt;
    v_Staff_Ids Array_Number := Array_Number();
    v_Exists    boolean;
  
    v_Indicator_Ids Array_Number;
    v_Subject_Ids   Array_Number;
  begin
    if z_Htm_Recommended_Rank_Documents.Exist_Lock(i_Company_Id  => i_Document.Company_Id,
                                                   i_Filial_Id   => i_Document.Filial_Id,
                                                   i_Document_Id => i_Document.Document_Id,
                                                   o_Row         => r_Document) then
      if r_Document.Status <> Htm_Pref.c_Document_Status_New then
        Htm_Error.Raise_003(r_Document.Document_Number);
      end if;
    
      v_Exists := true;
    else
      r_Document.Company_Id  := i_Document.Company_Id;
      r_Document.Filial_Id   := i_Document.Filial_Id;
      r_Document.Document_Id := i_Document.Document_Id;
      r_Document.Status      := Htm_Pref.c_Document_Status_New;
      v_Exists               := false;
    end if;
  
    r_Document.Document_Number := i_Document.Document_Number;
    r_Document.Document_Date   := i_Document.Document_Date;
    r_Document.Division_Id     := i_Document.Division_Id;
    r_Document.Note            := i_Document.Note;
  
    if v_Exists then
      z_Htm_Recommended_Rank_Documents.Update_Row(r_Document);
    else
      if r_Document.Document_Number is null then
        r_Document.Document_Number := Md_Core.Gen_Number(i_Company_Id => r_Document.Company_Id,
                                                         i_Filial_Id  => r_Document.Filial_Id,
                                                         i_Table      => Zt.Htm_Recommended_Rank_Documents,
                                                         i_Column     => z.Document_Number);
      end if;
    
      z_Htm_Recommended_Rank_Documents.Insert_Row(r_Document);
    end if;
  
    for i in 1 .. i_Document.Staffs.Count
    loop
      v_Staff := i_Document.Staffs(i);
    
      continue when not z_Htm_Experience_Period_Attempts.Exist_Lock(i_Company_Id    => r_Document.Company_Id,
                                                                    i_Filial_Id     => r_Document.Filial_Id,
                                                                    i_Experience_Id => v_Staff.Experience_Id,
                                                                    i_From_Rank_Id  => v_Staff.From_Rank_Id,
                                                                    i_Attempt_No    => v_Staff.Attempt_No,
                                                                    o_Row           => r_Attempt) --
      and not z_Htm_Recommended_Rank_Staffs.Exist_Lock(i_Company_Id  => r_Document.Company_Id,
                                                       i_Filial_Id   => r_Document.Filial_Id,
                                                       i_Document_Id => r_Document.Document_Id,
                                                       i_Staff_Id    => v_Staff.Staff_Id,
                                                       o_Row         => r_Old_Staff);
    
      Fazo.Push(v_Staff_Ids, v_Staff.Staff_Id);
    
      z_Htm_Recommended_Rank_Staffs.Save_One(i_Company_Id         => r_Document.Company_Id,
                                             i_Filial_Id          => r_Document.Filial_Id,
                                             i_Document_Id        => r_Document.Document_Id,
                                             i_Staff_Id           => v_Staff.Staff_Id,
                                             i_Robot_Id           => v_Staff.Robot_Id,
                                             i_From_Rank_Id       => v_Staff.From_Rank_Id,
                                             i_Last_Change_Date   => v_Staff.Last_Change_Date,
                                             i_To_Rank_Id         => v_Staff.To_Rank_Id,
                                             i_New_Change_Date    => v_Staff.New_Change_Date,
                                             i_Period             => v_Staff.Period,
                                             i_Nearest            => v_Staff.Nearest,
                                             i_Old_Penalty_Period => v_Staff.Old_Penalty_Period,
                                             i_Note               => v_Staff.Note,
                                             i_Attempt_No         => v_Staff.Attempt_No,
                                             i_Increment_Status   => Htm_Pref.c_Increment_Status_Ignored,
                                             i_Penalty_Period     => Nvl(r_Attempt.Penalty_Period,
                                                                         r_Old_Staff.Penalty_Period),
                                             i_Exam_Id            => Nvl(r_Attempt.Exam_Id,
                                                                         r_Old_Staff.Exam_Id),
                                             i_Success_Score      => Nvl(r_Attempt.Success_Score,
                                                                         r_Old_Staff.Success_Score),
                                             i_Ignore_Score       => Nvl(r_Attempt.Ignore_Score,
                                                                         r_Old_Staff.Ignore_Score),
                                             i_Recommend_Failure  => Nvl(r_Attempt.Recommend_Failure,
                                                                         r_Old_Staff.Recommend_Failure));
    
      if r_Attempt.Company_Id is not null then
        v_Indicator_Ids := Array_Number();
        v_Subject_Ids   := Array_Number();
      
        for r in (select *
                    from Htm_Experience_Period_Indicators q
                   where q.Company_Id = r_Document.Company_Id
                     and q.Filial_Id = r_Document.Filial_Id
                     and q.Experience_Id = v_Staff.Experience_Id
                     and q.From_Rank_Id = v_Staff.From_Rank_Id
                     and q.Attempt_No = v_Staff.Attempt_No)
        loop
          z_Htm_Recommended_Rank_Staff_Indicators.Save_One(i_Company_Id      => r_Document.Company_Id,
                                                           i_Filial_Id       => r_Document.Filial_Id,
                                                           i_Document_Id     => r_Document.Document_Id,
                                                           i_Staff_Id        => v_Staff.Staff_Id,
                                                           i_Indicator_Id    => r.Indicator_Id,
                                                           i_Indicator_Value => null);
        
          v_Indicator_Ids.Extend;
          v_Indicator_Ids(v_Indicator_Ids.Count) := r.Indicator_Id;
        end loop;
      
        for r in (select *
                    from Htm_Experience_Training_Subjects q
                   where q.Company_Id = r_Document.Company_Id
                     and q.Filial_Id = r_Document.Filial_Id
                     and q.Experience_Id = v_Staff.Experience_Id
                     and q.From_Rank_Id = v_Staff.From_Rank_Id
                     and q.Attempt_No = v_Staff.Attempt_No)
        loop
          z_Htm_Recommended_Rank_Staff_Subjects.Insert_Try(i_Company_Id  => r_Document.Company_Id,
                                                           i_Filial_Id   => r_Document.Filial_Id,
                                                           i_Document_Id => r_Document.Document_Id,
                                                           i_Staff_Id    => v_Staff.Staff_Id,
                                                           i_Subject_Id  => r.Subject_Id);
        
          v_Subject_Ids.Extend;
          v_Subject_Ids(v_Subject_Ids.Count) := r.Subject_Id;
        end loop;
      
        delete Htm_Recommended_Rank_Staff_Indicators q
         where q.Company_Id = r_Document.Company_Id
           and q.Filial_Id = r_Document.Filial_Id
           and q.Document_Id = r_Document.Document_Id
           and q.Staff_Id = v_Staff.Staff_Id
           and q.Indicator_Id not member of v_Indicator_Ids;
      
        delete Htm_Recommended_Rank_Staff_Subjects q
         where q.Company_Id = r_Document.Company_Id
           and q.Filial_Id = r_Document.Filial_Id
           and q.Document_Id = r_Document.Document_Id
           and q.Staff_Id = v_Staff.Staff_Id
           and q.Subject_Id not member of v_Subject_Ids;
      end if;
    end loop;
  
    delete from Htm_Recommended_Rank_Staffs q
     where q.Company_Id = r_Document.Company_Id
       and q.Filial_Id = r_Document.Filial_Id
       and q.Document_Id = r_Document.Document_Id
       and q.Staff_Id not member of v_Staff_Ids;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status = Htm_Pref.c_Document_Status_Approved then
      Htm_Error.Raise_004(r_Document.Document_Number);
    end if;
  
    z_Htm_Recommended_Rank_Documents.Delete_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Trainings
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Training_Nt
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
    r_Staff    Htm_Recommended_Rank_Staffs%rowtype;
    v_Staff    Htm_Pref.Recommended_Rank_Training_Rt;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in (Htm_Pref.c_Document_Status_Set_Training) then
      Htm_Error.Raise_006(i_Document_Status => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Set_Training),
                          i_Current_Status  => Htm_Util.t_Document_Status(r_Document.Status));
    end if;
  
    for i in 1 .. i_Staffs.Count
    loop
      v_Staff := i_Staffs(i);
    
      r_Staff := z_Htm_Recommended_Rank_Staffs.Take(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Document_Id => i_Document_Id,
                                                    i_Staff_Id    => v_Staff.Staff_Id);
    
      continue when r_Staff.Company_Id is null;
    
      z_Htm_Recommended_Rank_Staffs.Update_One(i_Company_Id  => i_Company_Id,
                                               i_Filial_Id   => i_Filial_Id,
                                               i_Document_Id => i_Document_Id,
                                               i_Staff_Id    => v_Staff.Staff_Id,
                                               i_Exam_Id     => Option_Number(v_Staff.Exam_Id));
    
      for j in 1 .. v_Staff.Subject_Ids.Count
      loop
        z_Htm_Recommended_Rank_Staff_Subjects.Insert_Try(i_Company_Id  => i_Company_Id,
                                                         i_Filial_Id   => i_Filial_Id,
                                                         i_Document_Id => i_Document_Id,
                                                         i_Staff_Id    => v_Staff.Staff_Id,
                                                         i_Subject_Id  => v_Staff.Subject_Ids(j));
      end loop;
    
      delete Htm_Recommended_Rank_Staff_Subjects q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Document_Id = i_Document_Id
         and q.Staff_Id = v_Staff.Staff_Id
         and q.Subject_Id not member of v_Staff.Subject_Ids;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Status
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Status_Nt
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in (Htm_Pref.c_Document_Status_Waiting) then
      Htm_Error.Raise_007(i_Document_Status => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Waiting),
                          i_Current_Status  => Htm_Util.t_Document_Status(r_Document.Status));
    end if;
  
    Htm_Core.Recommended_Rank_Document_Update_Status(i_Company_Id  => i_Company_Id,
                                                     i_Filial_Id   => i_Filial_Id,
                                                     i_Document_Id => i_Document_Id,
                                                     i_Staffs      => i_Staffs);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
  begin
    Htm_Core.Recommended_Rank_Document_Status_New(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Document_Id => i_Document_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Set_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
  begin
    Htm_Core.Recommended_Rank_Document_Set_Training(i_Company_Id  => i_Company_Id,
                                                    i_Filial_Id   => i_Filial_Id,
                                                    i_Document_Id => i_Document_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
  begin
    Htm_Core.Recommended_Rank_Document_Status_Training(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Document_Id => i_Document_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Waiting
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
  begin
    Htm_Core.Recommended_Rank_Document_Status_Waiting(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Document_Id => i_Document_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Approved
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
  begin
    Htm_Core.Recommended_Rank_Document_Status_Approved(i_Company_Id  => i_Company_Id,
                                                       i_Filial_Id   => i_Filial_Id,
                                                       i_Document_Id => i_Document_Id);
  end;

end Htm_Api;
/

create or replace package Htm_Core is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Experience_Job_Rank
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Experience_Job_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number
  );
  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Status
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Status_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------   
  Procedure Recommended_Rank_Document_Set_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Recommended_Rank_Document_Status_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Waiting
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Approved
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  );
end Htm_Core;
/
create or replace package body Htm_Core is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Experience_Job_Rank
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Job_Id        number
  ) is
  begin
    insert into Htm_Experience_Job_Ranks
      (Company_Id, Filial_Id, Job_Id, From_Rank_Id, To_Rank_Id, Experience_Id)
      select q.Company_Id,
             q.Filial_Id,
             i_Job_Id as Job_Id,
             q.From_Rank_Id,
             q.To_Rank_Id,
             q.Experience_Id
        from Htm_Experience_Periods q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Experience_Id = i_Experience_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Experience_Job_Rank
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number
  ) is
  begin
    delete from Htm_Experience_Job_Ranks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Experience_Id = i_Experience_Id;
  
    for r in (select q.*
                from Htm_Experience_Jobs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Experience_Id = i_Experience_Id)
    loop
      Fix_Experience_Job_Rank(i_Company_Id    => r.Company_Id,
                              i_Filial_Id     => r.Filial_Id,
                              i_Experience_Id => r.Experience_Id,
                              i_Job_Id        => r.Job_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Experience_Job_Rank
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Job_Id     number
  ) is
  begin
    delete from Htm_Experience_Job_Ranks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Job_Id = i_Job_Id;
  
    for r in (select q.*
                from Htm_Experience_Jobs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Job_Id = i_Job_Id)
    loop
      Fix_Experience_Job_Rank(i_Company_Id    => r.Company_Id,
                              i_Filial_Id     => r.Filial_Id,
                              i_Experience_Id => r.Experience_Id,
                              i_Job_Id        => r.Job_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Update_Status
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number,
    i_Staffs      Htm_Pref.Recommended_Rank_Status_Nt
  ) is
    v_Staff           Htm_Pref.Recommended_Rank_Status_Rt;
    v_Indicator       Href_Pref.Indicator_Rt;
    v_Indicator_Value number;
  begin
    for i in 1 .. i_Staffs.Count
    loop
      v_Staff := i_Staffs(i);
    
      if z_Htm_Recommended_Rank_Staffs.Exist(i_Company_Id  => i_Company_Id,
                                             i_Filial_Id   => i_Filial_Id,
                                             i_Document_Id => i_Document_Id,
                                             i_Staff_Id    => v_Staff.Staff_Id) then
        z_Htm_Recommended_Rank_Staffs.Update_One(i_Company_Id       => i_Company_Id,
                                                 i_Filial_Id        => i_Filial_Id,
                                                 i_Document_Id      => i_Document_Id,
                                                 i_Staff_Id         => v_Staff.Staff_Id,
                                                 i_Increment_Status => Option_Varchar2(v_Staff.Increment_Status));
      
        for j in 1 .. v_Staff.Indicators.Count
        loop
          v_Indicator := v_Staff.Indicators(j);
        
          v_Indicator_Value := Round(Greatest(Nvl(v_Indicator.Indicator_Value, 0), 0));
        
          if z_Htm_Recommended_Rank_Staff_Indicators.Exist(i_Company_Id   => i_Company_Id,
                                                           i_Filial_Id    => i_Filial_Id,
                                                           i_Document_Id  => i_Document_Id,
                                                           i_Staff_Id     => v_Staff.Staff_Id,
                                                           i_Indicator_Id => v_Indicator.Indicator_Id) then
            z_Htm_Recommended_Rank_Staff_Indicators.Update_One(i_Company_Id      => i_Company_Id,
                                                               i_Filial_Id       => i_Filial_Id,
                                                               i_Document_Id     => i_Document_Id,
                                                               i_Staff_Id        => v_Staff.Staff_Id,
                                                               i_Indicator_Id    => v_Indicator.Indicator_Id,
                                                               i_Indicator_Value => Option_Number(v_Indicator_Value));
          end if;
        end loop;
      end if;
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Recommended_Rank_Document_Status_New
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in (Htm_Pref.c_Document_Status_Set_Training) then
      Htm_Error.Raise_005(i_Document_Number  => r_Document.Document_Number,
                          i_Document_Status  => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_New),
                          i_Current_Status   => Htm_Util.t_Document_Status(r_Document.Status),
                          i_Allowed_Statuses => Array_Varchar2(Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Set_Training)));
    end if;
  
    z_Htm_Recommended_Rank_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id,
                                                i_Status      => Option_Varchar2(Htm_Pref.c_Document_Status_New));
  
  end;

  ----------------------------------------------------------------------------------------------------   
  Procedure Recommended_Rank_Document_Set_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in
       (Htm_Pref.c_Document_Status_New, Htm_Pref.c_Document_Status_Training) then
      Htm_Error.Raise_005(i_Document_Number  => r_Document.Document_Number,
                          i_Document_Status  => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Set_Training),
                          i_Current_Status   => Htm_Util.t_Document_Status(r_Document.Status),
                          i_Allowed_Statuses => Array_Varchar2(Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_New),
                                                               Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Training)));
    end if;
  
    z_Htm_Recommended_Rank_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id,
                                                i_Status      => Option_Varchar2(Htm_Pref.c_Document_Status_Set_Training));
  
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Recommended_Rank_Document_Status_Training
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in
       (Htm_Pref.c_Document_Status_Set_Training, Htm_Pref.c_Document_Status_Waiting) then
      Htm_Error.Raise_005(i_Document_Number  => r_Document.Document_Number,
                          i_Document_Status  => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Training),
                          i_Current_Status   => Htm_Util.t_Document_Status(r_Document.Status),
                          i_Allowed_Statuses => Array_Varchar2(Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Set_Training),
                                                               Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Waiting)));
    end if;
  
    z_Htm_Recommended_Rank_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id,
                                                i_Status      => Option_Varchar2(Htm_Pref.c_Document_Status_Training));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Waiting
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
  
    v_Staffs Htm_Pref.Recommended_Rank_Status_Nt;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in
       (Htm_Pref.c_Document_Status_Training, Htm_Pref.c_Document_Status_Approved) then
      Htm_Error.Raise_005(i_Document_Number  => r_Document.Document_Number,
                          i_Document_Status  => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Waiting),
                          i_Current_Status   => Htm_Util.t_Document_Status(r_Document.Status),
                          i_Allowed_Statuses => Array_Varchar2(Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Training),
                                                               Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Approved)));
    end if;
  
    if r_Document.Status = Htm_Pref.c_Document_Status_Approved then
      Hpd_Api.Journal_Unpost(i_Company_Id   => r_Document.Company_Id,
                             i_Filial_Id    => r_Document.Filial_Id,
                             i_Journal_Id   => r_Document.Journal_Id,
                             i_Source_Table => Zt.Htm_Recommended_Rank_Documents.Name,
                             i_Source_Id    => r_Document.Document_Id);
    end if;
  
    if r_Document.Status = Htm_Pref.c_Document_Status_Training then
      v_Staffs := Htm_Util.Recommended_Rank_Document_Calc_Indicators(i_Company_Id        => r_Document.Company_Id,
                                                                     i_Filial_Id         => r_Document.Filial_Id,
                                                                     i_Document_Id       => r_Document.Document_Id,
                                                                     i_Include_Trainings => true);
    
      Recommended_Rank_Document_Update_Status(i_Company_Id  => r_Document.Company_Id,
                                              i_Filial_Id   => r_Document.Filial_Id,
                                              i_Document_Id => r_Document.Document_Id,
                                              i_Staffs      => v_Staffs);
    end if;
  
    z_Htm_Recommended_Rank_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id,
                                                i_Status      => Option_Varchar2(Htm_Pref.c_Document_Status_Waiting),
                                                i_Journal_Id  => Option_Number(null));
  
    if r_Document.Status = Htm_Pref.c_Document_Status_Approved then
      Hpd_Api.Journal_Delete(i_Company_Id   => r_Document.Company_Id,
                             i_Filial_Id    => r_Document.Filial_Id,
                             i_Journal_Id   => r_Document.Journal_Id,
                             i_Source_Table => Zt.Htm_Recommended_Rank_Documents.Name,
                             i_Source_Id    => r_Document.Document_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_Status_Approved
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Document_Id number
  ) is
    r_Document Htm_Recommended_Rank_Documents%rowtype;
    v_Journal  Hpd_Pref.Rank_Change_Journal_Rt;
  begin
    r_Document := z_Htm_Recommended_Rank_Documents.Lock_Load(i_Company_Id  => i_Company_Id,
                                                             i_Filial_Id   => i_Filial_Id,
                                                             i_Document_Id => i_Document_Id);
  
    if r_Document.Status not in (Htm_Pref.c_Document_Status_Waiting) then
      Htm_Error.Raise_005(i_Document_Number  => r_Document.Document_Number,
                          i_Document_Status  => Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Approved),
                          i_Current_Status   => Htm_Util.t_Document_Status(r_Document.Status),
                          i_Allowed_Statuses => Array_Varchar2(Htm_Util.t_Document_Status(Htm_Pref.c_Document_Status_Waiting)));
    end if;
  
    Hpd_Util.Rank_Change_Journal_New(o_Journal         => v_Journal,
                                     i_Company_Id      => r_Document.Company_Id,
                                     i_Filial_Id       => r_Document.Filial_Id,
                                     i_Journal_Id      => Coalesce(r_Document.Journal_Id,
                                                                   Hpd_Next.Journal_Id),
                                     i_Journal_Number  => z_Hpd_Journals.Take(i_Company_Id => r_Document.Company_Id, --
                                                          i_Filial_Id => r_Document.Filial_Id, --
                                                          i_Journal_Id => r_Document.Journal_Id).Journal_Number,
                                     i_Journal_Date    => r_Document.Document_Date,
                                     i_Journal_Name    => null,
                                     i_Journal_Type_Id => Hpd_Util.Journal_Type_Id(i_Company_Id => r_Document.Company_Id,
                                                                                   i_Pcode      => Hpd_Pref.c_Pcode_Journal_Type_Rank_Change_Multiple),
                                     i_Source_Table    => Zt.Htm_Recommended_Rank_Documents.Name,
                                     i_Source_Id       => r_Document.Document_Id);
  
    for r in (select *
                from Htm_Recommended_Rank_Staffs q
               where q.Company_Id = r_Document.Company_Id
                 and q.Filial_Id = r_Document.Filial_Id
                 and q.Document_Id = r_Document.Document_Id
                 and q.Increment_Status = Htm_Pref.c_Increment_Status_Success)
    loop
      Hpd_Util.Journal_Add_Rank_Change(p_Journal     => v_Journal,
                                       i_Page_Id     => Hpd_Next.Page_Id,
                                       i_Staff_Id    => r.Staff_Id,
                                       i_Change_Date => r.New_Change_Date,
                                       i_Rank_Id     => r.To_Rank_Id);
    end loop;
  
    Hpd_Api.Rank_Change_Journal_Save(v_Journal);
    Hpd_Api.Journal_Post(i_Company_Id   => v_Journal.Company_Id,
                         i_Filial_Id    => v_Journal.Filial_Id,
                         i_Journal_Id   => v_Journal.Journal_Id,
                         i_Source_Table => Zt.Htm_Recommended_Rank_Documents.Name,
                         i_Source_Id    => r_Document.Document_Id);
  
    z_Htm_Recommended_Rank_Documents.Update_One(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Document_Id => i_Document_Id,
                                                i_Status      => Option_Varchar2(Htm_Pref.c_Document_Status_Approved),
                                                i_Journal_Id  => Option_Number(v_Journal.Journal_Id));
  end;

end Htm_Core;
/

create or replace package Htm_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Job_Name        varchar2,
    i_Experience_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Document_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Document_Number varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Document_Number  varchar2,
    i_Document_Status  varchar2,
    i_Current_Status   varchar2,
    i_Allowed_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Document_Status varchar,
    i_Current_Status  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Document_Status varchar,
    i_Current_Status  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Ignore_Score   number,
    i_Success_Score  number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Ignore_Score   number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Success_Score  number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  );
end Htm_Error;
/
create or replace package body Htm_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Htm_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:nearest day must be less than total period day, from rank name: $1{from_rank_name} on attempt_no $2{attempt_no}',
                         i_From_Rank_Name,
                         i_Attempt_No),
          i_Title   => t('001:title:nearest day is more than total period'),
          i_S1      => t('001:solution:reduce number of nearest days'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Job_Name        varchar2,
    i_Experience_Name varchar2
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:this job $1{job_name} is attached to $2{experience_name}',
                         i_Job_Name,
                         i_Experience_Name),
          i_Title   => t('002:title:job found in another experience'),
          i_S1      => t('002:solution:remove this job from the list and try again'),
          i_S2      => t('002:solution:detach job from attached experience $1{experience_name} and try again',
                         i_Experience_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003(i_Document_Number varchar2) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message:cannot change/save document. document $1{document_number} is not in status new',
                         i_Document_Number),
          i_S1      => t('003:solution:set the document status into new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Document_Number varchar2) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:cannot delete document. document $1{document_number} is not in status new',
                         i_Document_Number),
          i_S1      => t('004:solution:set the document status into new and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Document_Number  varchar2,
    i_Document_Status  varchar2,
    i_Current_Status   varchar2,
    i_Allowed_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message:cannot set document status into $1{document_status}. document $2{document_number} status must be in $3{allowed_statuses}, but current status is $4{current_status}',
                         i_Document_Status,
                         i_Document_Number,
                         Fazo.Gather(i_Allowed_Statuses, ', '),
                         i_Current_Status),
          i_S1      => t('005:solution:set document to allowed status and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Document_Status varchar,
    i_Current_Status  varchar2
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:to change training and exam settings for staff document must be in status $1{document_status}, but current status is $2{current_status}',
                         i_Document_Status,
                         i_Current_Status),
          i_S1      => t('006:solution:set document to correct status and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Document_Status varchar,
    i_Current_Status  varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:to change staff increment status and set indicator values document must be in status $1{document_status}, but current status is $2{current_status}',
                         i_Document_Status,
                         i_Current_Status),
          i_S1      => t('007:solution:set document to correct status and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Ignore_Score   number,
    i_Success_Score  number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:ignore score $1{ignore_score} must be less than success score $2{success_score}, from rank name $3{from_rank_name} on attempt $4{attempt_no}',
                         i_Ignore_Score,
                         i_Success_Score,
                         i_From_Rank_Name,
                         i_Attempt_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009
  (
    i_Ignore_Score   number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:ignore score $1{ignore_score} must be less than 100 percent, from rank name $2{from_rank_name} on attempt $3{attempt_no}',
                         i_Ignore_Score,
                         i_From_Rank_Name,
                         i_Attempt_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010
  (
    i_Success_Score  number,
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:success score $1{ignore_score} must be less than or equal 100 percent, from rank name $2{from_rank_name} on attempt $3{attempt_no}',
                         i_Success_Score,
                         i_From_Rank_Name,
                         i_Attempt_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:attempt period must be bigger than 0, from rank name $1{from_rank_name} on attempt $2{attempt_no}',
                         i_From_Rank_Name,
                         i_Attempt_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012
  (
    i_From_Rank_Name varchar2,
    i_Attempt_No     number
  ) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:attempt nearest period must be bigger than 0, from rank name $1{from_rank_name} on attempt $2{attempt_no}',
                         i_From_Rank_Name,
                         i_Attempt_No));
  end;

end Htm_Error;
/

create or replace package Htm_Pref is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ---------------------------------------------------------------------------------------------------- 
  type Experience_Period_Attempt_Rt is record(
    Period            number,
    Nearest           number,
    Penalty_Period    number,
    Exam_Id           number,
    Success_Score     number,
    Ignore_Score      number,
    Recommend_Failure varchar2(1),
    Indicators        Array_Number,
    Subjects          Array_Number);
  type Experience_Period_Attempt_Nt is table of Experience_Period_Attempt_Rt;
  ---------------------------------------------------------------------------------------------------- 
  type Experience_Period_Rt is record(
    From_Rank_Id number,
    To_Rank_Id   number,
    Order_No     number,
    Attempts     Experience_Period_Attempt_Nt);
  type Experience_Period_Nt is table of Experience_Period_Rt;
  ----------------------------------------------------------------------------------------------------  
  type Experience_Rt is record(
    Company_Id    number,
    Filial_Id     number,
    Experience_Id number,
    name          varchar2(100 char),
    Order_No      number,
    State         varchar2(1),
    Code          varchar2(50),
    Periods       Experience_Period_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  type Recommended_Rank_Training_Rt is record(
    Staff_Id    number,
    Exam_Id     number,
    Subject_Ids Array_Number);
  type Recommended_Rank_Training_Nt is table of Recommended_Rank_Training_Rt;
  ----------------------------------------------------------------------------------------------------
  type Recommended_Rank_Status_Rt is record(
    Staff_Id         number,
    Increment_Status varchar2(1),
    Indicators       Href_Pref.Indicator_Nt);
  type Recommended_Rank_Status_Nt is table of Recommended_Rank_Status_Rt;
  ---------------------------------------------------------------------------------------------------- 
  type Recommended_Rank_Staff_Rt is record(
    Staff_Id           number,
    Robot_Id           number,
    From_Rank_Id       number,
    Last_Change_Date   date,
    To_Rank_Id         number,
    New_Change_Date    date,
    Attempt_No         number,
    Experience_Id      number,
    Period             number,
    Nearest            number,
    Old_Penalty_Period number,
    Note               varchar2(300 char));
  type Recommended_Rank_Staff_Nt is table of Recommended_Rank_Staff_Rt;
  ----------------------------------------------------------------------------------------------------
  type Recommended_Rank_Document_Rt is record(
    Company_Id      number,
    Filial_Id       number,
    Document_Id     number,
    Document_Number varchar2(50 char),
    Document_Date   date,
    Division_Id     number,
    Note            Htm_Recommended_Rank_Documents.Note%type,
    Staffs          Recommended_Rank_Staff_Nt);
  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document Status
  ----------------------------------------------------------------------------------------------------
  c_Document_Status_New          constant varchar2(1) := 'N';
  c_Document_Status_Set_Training constant varchar2(1) := 'S';
  c_Document_Status_Training     constant varchar2(1) := 'T';
  c_Document_Status_Waiting      constant varchar2(1) := 'W';
  c_Document_Status_Approved     constant varchar2(1) := 'A';
  ----------------------------------------------------------------------------------------------------
  -- Recommend Rank Staff Increment Status
  ----------------------------------------------------------------------------------------------------
  c_Increment_Status_Success constant varchar2(1) := 'S';
  c_Increment_Status_Failure constant varchar2(1) := 'F';
  c_Increment_Status_Ignored constant varchar2(1) := 'I';
end Htm_Pref;
/
create or replace package body Htm_Pref is

end Htm_Pref;
/

create or replace package Htm_Util is
  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_New
  (
    o_Experience    out Htm_Pref.Experience_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Name          varchar2,
    i_Order_No      number,
    i_State         varchar2,
    i_Code          varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_New
  (
    o_Period       out nocopy Htm_Pref.Experience_Period_Rt,
    i_From_Rank_Id number,
    i_To_Rank_Id   number,
    i_Order_No     number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_Add
  (
    p_Experience in out nocopy Htm_Pref.Experience_Rt,
    i_Period     Htm_Pref.Experience_Period_Rt
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_Attempt_Add
  (
    p_Period            in out nocopy Htm_Pref.Experience_Period_Rt,
    i_Period            number,
    i_Nearest           number,
    i_Penalty_Period    number,
    i_Exam_Id           number,
    i_Success_Score     number,
    i_Ignore_Score      number,
    i_Recommend_Failure varchar2,
    i_Indicators        Array_Number,
    i_Subjects          Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_New
  (
    o_Document        out Htm_Pref.Recommended_Rank_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Division_Id     number,
    i_Note            varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Recommended_Rank_Document_Add_Staff
  (
    p_Document           in out nocopy Htm_Pref.Recommended_Rank_Document_Rt,
    i_Staff_Id           number,
    i_Robot_Id           number,
    i_From_Rank_Id       number,
    i_Last_Change_Date   date,
    i_To_Rank_Id         number,
    i_New_Change_Date    date,
    i_Attempt_No         number,
    i_Experience_Id      number,
    i_Old_Penalty_Period number,
    i_Period             number,
    i_Nearest            number,
    i_Note               varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Add_Staff_Training
  (
    p_Staffs      in out nocopy Htm_Pref.Recommended_Rank_Training_Nt,
    i_Staff_Id    number,
    i_Exam_Id     number,
    i_Subject_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Add_Staff_Status
  (
    p_Staffs           in out nocopy Htm_Pref.Recommended_Rank_Status_Nt,
    i_Staff_Id         number,
    i_Increment_Status varchar2,
    i_Indicators       Href_Pref.Indicator_Nt
  );
  ----------------------------------------------------------------------------------------------------
  Function Recommended_Rank_Document_Calc_Indicators
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Document_Id       number,
    i_Staff_Ids         Array_Number := null,
    i_Include_Trainings boolean := false
  ) return Htm_Pref.Recommended_Rank_Status_Nt;
  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status(i_Status varchar2) return varchar2;
  Function Document_Statuses return Matrix_Varchar2;
  ----------------------------------------------------------------------------------------------------
  Function t_Increment_Status(i_Status varchar2) return varchar2;
  Function Increment_Statuses return Matrix_Varchar2;
end Htm_Util;
/
create or replace package body Htm_Util is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTM:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Experience
  ----------------------------------------------------------------------------------------------------
  Procedure Experience_New
  (
    o_Experience    out Htm_Pref.Experience_Rt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Experience_Id number,
    i_Name          varchar2,
    i_Order_No      number,
    i_State         varchar2,
    i_Code          varchar2
  ) is
  begin
    o_Experience.Company_Id    := i_Company_Id;
    o_Experience.Filial_Id     := i_Filial_Id;
    o_Experience.Experience_Id := i_Experience_Id;
    o_Experience.Name          := i_Name;
    o_Experience.Order_No      := i_Order_No;
    o_Experience.State         := i_State;
    o_Experience.Code          := i_Code;
  
    o_Experience.Periods := Htm_Pref.Experience_Period_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_New
  (
    o_Period       out nocopy Htm_Pref.Experience_Period_Rt,
    i_From_Rank_Id number,
    i_To_Rank_Id   number,
    i_Order_No     number
  ) is
  begin
    o_Period.From_Rank_Id := i_From_Rank_Id;
    o_Period.To_Rank_Id   := i_To_Rank_Id;
    o_Period.Order_No     := i_Order_No;
  
    o_Period.Attempts := Htm_Pref.Experience_Period_Attempt_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_Add
  (
    p_Experience in out nocopy Htm_Pref.Experience_Rt,
    i_Period     Htm_Pref.Experience_Period_Rt
  ) is
  begin
    p_Experience.Periods.Extend;
    p_Experience.Periods(p_Experience.Periods.Count) := i_Period;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Experience_Period_Attempt_Add
  (
    p_Period            in out nocopy Htm_Pref.Experience_Period_Rt,
    i_Period            number,
    i_Nearest           number,
    i_Penalty_Period    number,
    i_Exam_Id           number,
    i_Success_Score     number,
    i_Ignore_Score      number,
    i_Recommend_Failure varchar2,
    i_Indicators        Array_Number,
    i_Subjects          Array_Number
  ) is
    v_Attempt Htm_Pref.Experience_Period_Attempt_Rt;
  begin
    v_Attempt.Period            := i_Period;
    v_Attempt.Nearest           := i_Nearest;
    v_Attempt.Penalty_Period    := i_Penalty_Period;
    v_Attempt.Exam_Id           := i_Exam_Id;
    v_Attempt.Success_Score     := i_Success_Score;
    v_Attempt.Ignore_Score      := i_Ignore_Score;
    v_Attempt.Recommend_Failure := i_Recommend_Failure;
    v_Attempt.Indicators        := i_Indicators;
    v_Attempt.Subjects          := i_Subjects;
  
    p_Period.Attempts.Extend;
    p_Period.Attempts(p_Period.Attempts.Count) := v_Attempt;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document
  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Document_New
  (
    o_Document        out Htm_Pref.Recommended_Rank_Document_Rt,
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Document_Id     number,
    i_Document_Number varchar2,
    i_Document_Date   date,
    i_Division_Id     number,
    i_Note            varchar2
  ) is
  begin
    o_Document.Company_Id      := i_Company_Id;
    o_Document.Filial_Id       := i_Filial_Id;
    o_Document.Document_Id     := i_Document_Id;
    o_Document.Document_Number := i_Document_Number;
    o_Document.Document_Date   := i_Document_Date;
    o_Document.Division_Id     := i_Division_Id;
    o_Document.Note            := i_Note;
  
    o_Document.Staffs := Htm_Pref.Recommended_Rank_Staff_Nt();
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Recommended_Rank_Document_Add_Staff
  (
    p_Document           in out nocopy Htm_Pref.Recommended_Rank_Document_Rt,
    i_Staff_Id           number,
    i_Robot_Id           number,
    i_From_Rank_Id       number,
    i_Last_Change_Date   date,
    i_To_Rank_Id         number,
    i_New_Change_Date    date,
    i_Attempt_No         number,
    i_Experience_Id      number,
    i_Old_Penalty_Period number,
    i_Period             number,
    i_Nearest            number,
    i_Note               varchar2
  ) is
    v_Staff Htm_Pref.Recommended_Rank_Staff_Rt;
  begin
    v_Staff.Staff_Id           := i_Staff_Id;
    v_Staff.Robot_Id           := i_Robot_Id;
    v_Staff.From_Rank_Id       := i_From_Rank_Id;
    v_Staff.Last_Change_Date   := i_Last_Change_Date;
    v_Staff.To_Rank_Id         := i_To_Rank_Id;
    v_Staff.New_Change_Date    := i_New_Change_Date;
    v_Staff.Attempt_No         := i_Attempt_No;
    v_Staff.Experience_Id      := i_Experience_Id;
    v_Staff.Old_Penalty_Period := i_Old_Penalty_Period;
    v_Staff.Period             := i_Period;
    v_Staff.Nearest            := i_Nearest;
    v_Staff.Note               := i_Note;
  
    p_Document.Staffs.Extend;
    p_Document.Staffs(p_Document.Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Add_Staff_Training
  (
    p_Staffs      in out nocopy Htm_Pref.Recommended_Rank_Training_Nt,
    i_Staff_Id    number,
    i_Exam_Id     number,
    i_Subject_Ids Array_Number
  ) is
    v_Staff Htm_Pref.Recommended_Rank_Training_Rt;
  begin
    v_Staff.Staff_Id    := i_Staff_Id;
    v_Staff.Exam_Id     := i_Exam_Id;
    v_Staff.Subject_Ids := i_Subject_Ids;
  
    p_Staffs.Extend;
    p_Staffs(p_Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Recommended_Rank_Add_Staff_Status
  (
    p_Staffs           in out nocopy Htm_Pref.Recommended_Rank_Status_Nt,
    i_Staff_Id         number,
    i_Increment_Status varchar2,
    i_Indicators       Href_Pref.Indicator_Nt
  ) is
    v_Staff Htm_Pref.Recommended_Rank_Status_Rt;
  begin
    v_Staff.Staff_Id         := i_Staff_Id;
    v_Staff.Increment_Status := i_Increment_Status;
    v_Staff.Indicators       := i_Indicators;
  
    p_Staffs.Extend;
    p_Staffs(p_Staffs.Count) := v_Staff;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Recommended_Rank_Document_Calc_Indicators
  (
    i_Company_Id        number,
    i_Filial_Id         number,
    i_Document_Id       number,
    i_Staff_Ids         Array_Number := null,
    i_Include_Trainings boolean := false
  ) return Htm_Pref.Recommended_Rank_Status_Nt is
    v_Indicators      Href_Pref.Indicator_Nt;
    v_Indicator_Value number;
    v_Begin_Date      date;
    v_End_Date        date;
  
    v_Exam_Id     number;
    v_Subject_Ids Array_Number;
  
    v_Staffs Htm_Pref.Recommended_Rank_Status_Nt := Htm_Pref.Recommended_Rank_Status_Nt();
  
    v_Overall_Score number;
    v_Indicator_Cnt number;
  
    v_Increment_Status varchar2(1);
  begin
    for St in (select Qr.*,
                      (select Jr.Experience_Id
                         from Htm_Experience_Job_Ranks Jr
                        where Jr.Company_Id = i_Company_Id
                          and Jr.Filial_Id = i_Filial_Id
                          and Jr.Job_Id =
                              Hpd_Util.Get_Closest_Job_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id,
                                                          i_Staff_Id   => Qr.Staff_Id,
                                                          i_Period     => Qr.New_Change_Date - 1)
                          and Jr.From_Rank_Id = Qr.New_From_Rank_Id) New_Experience_Id
                 from (select q.*,
                              (select t.Dismissal_Date
                                 from Href_Staffs t
                                where t.Company_Id = q.Company_Id
                                  and t.Filial_Id = q.Filial_Id
                                  and t.Staff_Id = q.Staff_Id) Dismissal_Date,
                              (select Jr.Experience_Id
                                 from Htm_Experience_Job_Ranks Jr
                                where Jr.Company_Id = i_Company_Id
                                  and Jr.Filial_Id = i_Filial_Id
                                  and Jr.Job_Id = w.Job_Id
                                  and Jr.From_Rank_Id = q.From_Rank_Id) Old_Experience_Id,
                              Hpd_Util.Get_Closest_Rank_Id(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Staff_Id   => q.Staff_Id,
                                                           i_Period     => q.New_Change_Date - 1) New_From_Rank_Id
                         from Htm_Recommended_Rank_Staffs q
                         join Mrf_Robots w
                           on w.Company_Id = i_Company_Id
                          and w.Filial_Id = i_Filial_Id
                          and w.Robot_Id = q.Robot_Id
                        where q.Company_Id = i_Company_Id
                          and q.Filial_Id = i_Filial_Id
                          and q.Document_Id = i_Document_Id
                          and (i_Staff_Ids is null or q.Staff_Id member of i_Staff_Ids)) Qr)
    loop
      v_Indicator_Cnt    := 0;
      v_Overall_Score    := 0;
      v_Increment_Status := Htm_Pref.c_Increment_Status_Ignored;
    
      v_Indicators := Href_Pref.Indicator_Nt();
    
      v_Subject_Ids := Array_Number();
    
      for r in (select p.*, q.Staff_Id, q.Indicator_Value
                  from Htm_Recommended_Rank_Staff_Indicators q
                  join Href_Indicators p
                    on p.Company_Id = q.Company_Id
                   and p.Indicator_Id = q.Indicator_Id
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Document_Id = i_Document_Id
                   and q.Staff_Id = St.Staff_Id)
      loop
        if r.Used = Href_Pref.c_Indicator_Used_Automatically then
          v_End_Date    := St.New_Change_Date;
          v_Exam_Id     := null;
          v_Subject_Ids := Array_Number();
        
          if r.Pcode = Href_Pref.c_Pcode_Indicator_Trainings_Subjects and i_Include_Trainings then
            v_Begin_Date := Add_Months(v_End_Date, -6);
          
            select p.Subject_Id
              bulk collect
              into v_Subject_Ids
              from Htm_Recommended_Rank_Staff_Subjects p
             where p.Company_Id = i_Company_Id
               and p.Filial_Id = i_Filial_Id
               and p.Document_Id = i_Document_Id
               and p.Staff_Id = r.Staff_Id;
          elsif r.Pcode = Href_Pref.c_Pcode_Indicator_Exam_Results and i_Include_Trainings then
            v_Begin_Date := v_End_Date;
          else
            v_End_Date   := Trunc(v_End_Date, 'mon') - 1;
            v_Begin_Date := Trunc(v_End_Date, 'mon');
          end if;
        
          if i_Include_Trainings or
             r.Pcode not in (Href_Pref.c_Pcode_Indicator_Trainings_Subjects,
                             Href_Pref.c_Pcode_Indicator_Exam_Results) then
            v_Indicator_Value := Hpr_Util.Calc_Indicator_Value(i_Company_Id   => i_Company_Id,
                                                               i_Filial_Id    => i_Filial_Id,
                                                               i_Staff_Id     => r.Staff_Id,
                                                               i_Charge_Id    => null,
                                                               i_Begin_Date   => v_Begin_Date,
                                                               i_End_Date     => v_End_Date,
                                                               i_Indicator_Id => r.Indicator_Id,
                                                               i_Exam_Id      => St.Exam_Id,
                                                               i_Subject_Ids  => v_Subject_Ids);
          else
            v_Indicator_Value := r.Indicator_Value;
          end if;
        else
          v_Indicator_Value := r.Indicator_Value;
        end if;
      
        Href_Util.Indicator_Add(p_Indicators      => v_Indicators,
                                i_Indicator_Id    => r.Indicator_Id,
                                i_Indicator_Value => v_Indicator_Value);
      
        v_Indicator_Cnt := v_Indicator_Cnt + 1;
        v_Overall_Score := v_Overall_Score + Nvl(v_Indicator_Value, 0);
      end loop;
    
      if v_Indicator_Cnt > 0 then
        v_Overall_Score := v_Overall_Score / v_Indicator_Cnt;
      
        if St.Dismissal_Date < St.New_Change_Date or --
           St.Old_Experience_Id is null or --
           St.New_Experience_Id is null or --
           St.Old_Experience_Id <> St.New_Experience_Id or --
           St.From_Rank_Id <> St.New_From_Rank_Id then
          v_Increment_Status := Htm_Pref.c_Increment_Status_Ignored;
        else
          if St.Success_Score is not null and St.Success_Score <= v_Overall_Score then
            v_Increment_Status := Htm_Pref.c_Increment_Status_Success;
          elsif St.Recommend_Failure = 'Y' and
                (St.Ignore_Score is null or v_Overall_Score < St.Ignore_Score) then
            v_Increment_Status := Htm_Pref.c_Increment_Status_Failure;
          else
            v_Increment_Status := Htm_Pref.c_Increment_Status_Ignored;
          end if;
        end if;
      
        Recommended_Rank_Add_Staff_Status(p_Staffs           => v_Staffs,
                                          i_Staff_Id         => St.Staff_Id,
                                          i_Increment_Status => v_Increment_Status,
                                          i_Indicators       => v_Indicators);
      end if;
    end loop;
  
    return v_Staffs;
  end;

  ----------------------------------------------------------------------------------------------------
  -- Recommended Rank Document Status
  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status_New return varchar2 is
  begin
    return t('document_status:new');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status_Set_Training return varchar2 is
  begin
    return t('document_status:set training');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status_Training return varchar2 is
  begin
    return t('document_status:training');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status_Waiting return varchar2 is
  begin
    return t('document_status:waiting');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status_Approved return varchar2 is
  begin
    return t('document_status:approved');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Document_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Htm_Pref.c_Document_Status_New then t_Document_Status_New --
    when Htm_Pref.c_Document_Status_Set_Training then t_Document_Status_Set_Training --
    when Htm_Pref.c_Document_Status_Training then t_Document_Status_Training --
    when Htm_Pref.c_Document_Status_Waiting then t_Document_Status_Waiting --
    when Htm_Pref.c_Document_Status_Approved then t_Document_Status_Approved --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Document_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htm_Pref.c_Document_Status_New,
                                          Htm_Pref.c_Document_Status_Set_Training,
                                          Htm_Pref.c_Document_Status_Training,
                                          Htm_Pref.c_Document_Status_Waiting,
                                          Htm_Pref.c_Document_Status_Approved),
                           Array_Varchar2(t_Document_Status_New,
                                          t_Document_Status_Set_Training,
                                          t_Document_Status_Training,
                                          t_Document_Status_Waiting,
                                          t_Document_Status_Approved));
  end;

  ----------------------------------------------------------------------------------------------------
  -- increment statuses 
  ----------------------------------------------------------------------------------------------------
  Function t_Increment_Status_Success return varchar2 is
  begin
    return t('increment_status:success');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Increment_Status_Failure return varchar2 is
  begin
    return t('increment_status:failure');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Increment_Status_Ignored return varchar2 is
  begin
    return t('increment_status:ignored');
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Increment_Status(i_Status varchar2) return varchar2 is
  begin
    return --
    case i_Status --
    when Htm_Pref.c_Increment_Status_Success then t_Increment_Status_Success --
    when Htm_Pref.c_Increment_Status_Failure then t_Increment_Status_Failure --
    when Htm_Pref.c_Increment_Status_Ignored then t_Increment_Status_Ignored --
    end;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Increment_Statuses return Matrix_Varchar2 is
  begin
    return Matrix_Varchar2(Array_Varchar2(Htm_Pref.c_Increment_Status_Success,
                                          Htm_Pref.c_Increment_Status_Failure,
                                          Htm_Pref.c_Increment_Status_Ignored),
                           Array_Varchar2(t_Increment_Status_Success,
                                          t_Increment_Status_Failure,
                                          t_Increment_Status_Ignored));
  end;

end Htm_Util;
/

create or replace package Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt);
  ----------------------------------------------------------------------------------------------------  
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------  
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Ignore_Images        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Add(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------    
  Procedure Change_Track_Type
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_New_Track_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------  
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Request_Save(i_Request Htt_Requests%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt);
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weights_Save(i_Change_Day_Weights Htt_Pref.Change_Day_Weights);
  ----------------------------------------------------------------------------------------------------  
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean := false
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  );
end Htt_Api;
/
create or replace package body Htt_Api is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  -- notifications
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Request
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Request_Id  number,
    i_Notify_Type varchar2
  ) is
    r_Person      Mr_Natural_Persons%rowtype;
    r_Request     Htt_Requests%rowtype;
    r_Staff       Href_Staffs%rowtype;
    v_User_Id     number;
    v_Manager_Id  number;
    v_Employee_Id number;
    result        Hashmap := Hashmap();
  begin
    r_Request    := z_Htt_Requests.Load(i_Company_Id => i_Company_Id,
                                        i_Filial_Id  => i_Filial_Id,
                                        i_Request_Id => i_Request_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id,
                                       i_Filial_Id  => r_Request.Filial_Id,
                                       i_Staff_Id   => r_Request.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('request_id', r_Request.Request_Id);
    Result.Put('status', r_Request.Status);
    Result.Put('status_name', Htt_Util.t_Request_Status(r_Request.Status));
    Result.Put('request_kind_name',
               z_Htt_Request_Kinds.Load(i_Company_Id => r_Request.Company_Id, i_Request_Kind_Id => r_Request.Request_Kind_Id).Name);
    Result.Put('request_type', r_Request.Request_Type);
    Result.Put('begin_time', to_char(r_Request.Begin_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('end_time', to_char(r_Request.End_Time, Href_Pref.c_Date_Format_Second));
    Result.Put('employee_name', r_Person.Name);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Request_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Request.Company_Id, i_Filial_Id => r_Request.Filial_Id, i_Staff_Id => r_Request.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Request_Notification_Title(i_Company_Id      => i_Company_Id,
                                                                                      i_User_Id         => v_Employee_Id,
                                                                                      i_Notify_Type     => i_Notify_Type,
                                                                                      t_Request_Kind_Id => r_Request.Request_Kind_Id),
                                i_Uri        => Htt_Pref.c_Form_Request_View,
                                i_Uri_Param  => Fazo.Zip_Map('request_id', r_Request.Request_Id),
                                i_User_Id    => r_Request.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Staff_Plan_Changes
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Change_Id   number,
    i_Notify_Type varchar2
  ) is
    r_Person       Mr_Natural_Persons%rowtype;
    r_Change       Htt_Plan_Changes%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_User_Id      number;
    v_Manager_Id   number;
    v_Change_Date  date;
    v_Swapped_Date date;
    v_Employee_Id  number;
    result         Hashmap := Hashmap();
  begin
    r_Change     := z_Htt_Plan_Changes.Load(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Change_Id  => i_Change_Id);
    r_Staff      := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id,
                                       i_Filial_Id  => r_Change.Filial_Id,
                                       i_Staff_Id   => r_Change.Staff_Id);
    r_Person     := z_Mr_Natural_Persons.Load(i_Company_Id => r_Staff.Company_Id,
                                              i_Person_Id  => r_Staff.Employee_Id);
    v_User_Id    := r_Person.Person_Id;
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change then
      if v_Manager_Id is null then
        return;
      end if;
    
      v_User_Id := v_Manager_Id;
    end if;
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                   i_User_Id      => v_User_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    select q.Change_Date, q.Swapped_Date
      into v_Change_Date, v_Swapped_Date
      from Htt_Change_Days q
     where q.Company_Id = r_Change.Company_Id
       and q.Filial_Id = r_Change.Filial_Id
       and q.Change_Id = r_Change.Change_Id
       and Rownum = 1;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('change_id', r_Change.Change_Id);
    Result.Put('change_kind', r_Change.Change_Kind);
    Result.Put('change_kind_name', Htt_Util.t_Change_Kind(r_Change.Change_Kind));
    Result.Put('status', r_Change.Status);
    Result.Put('status_name', Htt_Util.t_Change_Status(r_Change.Status));
    Result.Put('employee_name', r_Person.Name);
    Result.Put('change_date', v_Change_Date);
    Result.Put('swapped_date', v_Swapped_Date);
  
    if i_Notify_Type = Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval then
      Result.Put('manager_name',
                 z_Mr_Natural_Persons.Take(i_Company_Id => r_Person.Company_Id, i_Person_Id => v_Manager_Id).Name);
    end if;
  
    v_Employee_Id := z_Href_Staffs.Load(i_Company_Id => r_Change.Company_Id, i_Filial_Id => r_Change.Filial_Id, i_Staff_Id => r_Change.Staff_Id).Employee_Id;
  
    Href_Core.Send_Notification(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Title      => Htt_Util.t_Change_Notification_Title(i_Company_Id  => i_Company_Id,
                                                                                     i_User_Id     => v_Employee_Id,
                                                                                     i_Notify_Type => i_Notify_Type,
                                                                                     i_Change_Kind => r_Change.Change_Kind),
                                i_Uri        => Htt_Pref.c_Form_Change_View,
                                i_Uri_Param  => Fazo.Zip_Map('change_id', r_Change.Change_Id),
                                i_User_Id    => r_Change.Modified_By);
  
    Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                i_User_Id    => v_User_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Save(i_Calendar Htt_Pref.Calendar_Rt) is
    r_Calendar           Htt_Calendars%rowtype;
    r_Week_Day           Htt_Calendar_Week_Days%rowtype;
    r_Old_Day            Htt_Calendar_Days%rowtype;
    r_New_Day            Htt_Calendar_Days%rowtype;
    r_Rest_Day           Htt_Calendar_Rest_Days%rowtype;
    v_Dates              Array_Date := Array_Date();
    v_Changed_Dates      Array_Date := Array_Date();
    v_Deleted_Dates      Array_Date;
    v_Swap_Changed_Dates Array_Date := Array_Date();
    v_Swap_Deleted_Dates Array_Date;
  begin
    if not z_Htt_Calendars.Exist_Lock(i_Company_Id  => i_Calendar.Company_Id,
                                      i_Filial_Id   => i_Calendar.Filial_Id,
                                      i_Calendar_Id => i_Calendar.Calendar_Id,
                                      o_Row         => r_Calendar) then
      r_Calendar.Company_Id  := i_Calendar.Company_Id;
      r_Calendar.Filial_Id   := i_Calendar.Filial_Id;
      r_Calendar.Calendar_Id := i_Calendar.Calendar_Id;
    end if;
  
    r_Calendar.Name          := i_Calendar.Name;
    r_Calendar.Code          := i_Calendar.Code;
    r_Calendar.Monthly_Limit := i_Calendar.Monthly_Limit;
    r_Calendar.Daily_Limit   := i_Calendar.Daily_Limit;
  
    z_Htt_Calendars.Save_Row(r_Calendar);
  
    r_New_Day.Company_Id  := i_Calendar.Company_Id;
    r_New_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_New_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Days.Count
    loop
      r_Old_Day               := null;
      r_New_Day.Calendar_Date := i_Calendar.Days(i).Calendar_Date;
      r_New_Day.Name          := i_Calendar.Days(i).Name;
      r_New_Day.Day_Kind      := i_Calendar.Days(i).Day_Kind;
      r_New_Day.Swapped_Date  := i_Calendar.Days(i).Swapped_Date;
    
      if not z_Htt_Calendar_Days.Exist_Lock(i_Company_Id    => r_New_Day.Company_Id,
                                            i_Filial_Id     => r_New_Day.Filial_Id,
                                            i_Calendar_Id   => r_New_Day.Calendar_Id,
                                            i_Calendar_Date => r_New_Day.Calendar_Date,
                                            o_Row           => r_Old_Day) or
         r_New_Day.Day_Kind <> r_Old_Day.Day_Kind --
         or r_New_Day.Swapped_Date <> r_Old_Day.Swapped_Date then
        Fazo.Push(v_Changed_Dates, r_New_Day.Calendar_Date);
      
        if r_Old_Day.Swapped_Date is not null then
          Fazo.Push(v_Swap_Changed_Dates, r_Old_Day.Swapped_Date);
        end if;
      end if;
    
      if Extract(year from r_New_Day.Calendar_Date) <> i_Calendar.Year then
        Htt_Error.Raise_018(i_Chosen_Year   => i_Calendar.Year,
                            i_Calendar_Date => r_New_Day.Calendar_Date);
      end if;
    
      if r_New_Day.Calendar_Date member of v_Dates then
        Htt_Error.Raise_019(r_New_Day.Calendar_Date);
      end if;
    
      z_Htt_Calendar_Days.Save_Row(r_New_Day);
    
      Fazo.Push(v_Dates, r_New_Day.Calendar_Date);
    end loop;
  
    r_Week_Day.Company_Id  := i_Calendar.Company_Id;
    r_Week_Day.Filial_Id   := i_Calendar.Filial_Id;
    r_Week_Day.Calendar_Id := i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Week_Days.Count
    loop
      r_Week_Day.Order_No        := i_Calendar.Week_Days(i).Order_No;
      r_Week_Day.Plan_Time       := i_Calendar.Week_Days(i).Plan_Time;
      r_Week_Day.Preholiday_Time := i_Calendar.Week_Days(i).Preholiday_Hour;
      r_Week_Day.Preweekend_Time := i_Calendar.Week_Days(i).Preweekend_Hour;
    
      z_Htt_Calendar_Week_Days.Save_Row(r_Week_Day);
    end loop;
  
    delete Htt_Calendar_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id
       and Extract(year from q.Calendar_Date) = i_Calendar.Year
       and q.Calendar_Date not in (select *
                                     from table(v_Dates))
    returning q.Calendar_Date, Nvl(q.Swapped_Date, q.Calendar_Date) bulk collect into v_Deleted_Dates, v_Swap_Deleted_Dates;
  
    for i in 1 .. v_Changed_Dates.Count
    loop
      r_New_Day := z_Htt_Calendar_Days.Lock_Load(i_Company_Id    => r_New_Day.Company_Id,
                                                 i_Filial_Id     => r_New_Day.Filial_Id,
                                                 i_Calendar_Id   => r_New_Day.Calendar_Id,
                                                 i_Calendar_Date => v_Changed_Dates(i));
      begin
        select q.*
          into r_Old_Day
          from Htt_Calendar_Days q
         where q.Company_Id = r_New_Day.Company_Id
           and q.Filial_Id = r_New_Day.Filial_Id
           and q.Calendar_Id = r_New_Day.Calendar_Id
           and (q.Calendar_Date = r_New_Day.Swapped_Date --
               or q.Calendar_Date <> r_New_Day.Calendar_Date and
               q.Swapped_Date = r_New_Day.Swapped_Date or q.Swapped_Date = r_New_Day.Calendar_Date)
           and Rownum = 1;
      
        if r_New_Day.Calendar_Date = r_Old_Day.Calendar_Date or
           r_New_Day.Calendar_Date = r_Old_Day.Swapped_Date then
          Htt_Error.Raise_020(r_New_Day.Calendar_Date);
        else
          Htt_Error.Raise_020(r_New_Day.Swapped_Date);
        end if;
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    delete Htt_Calendar_Rest_Days q
     where q.Company_Id = i_Calendar.Company_Id
       and q.Filial_Id = i_Calendar.Filial_Id
       and q.Calendar_Id = i_Calendar.Calendar_Id;
  
    for i in 1 .. i_Calendar.Rest_Days.Count
    loop
      r_Rest_Day.Company_Id  := i_Calendar.Company_Id;
      r_Rest_Day.Filial_Id   := i_Calendar.Filial_Id;
      r_Rest_Day.Calendar_Id := i_Calendar.Calendar_Id;
      r_Rest_Day.Week_Day_No := i_Calendar.Rest_Days(i);
    
      z_Htt_Calendar_Rest_Days.Insert_Row(r_Rest_Day);
    end loop;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union distinct v_Swap_Deleted_Dates;
  
    v_Deleted_Dates := v_Deleted_Dates multiset union v_Swap_Changed_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Changed_Dates);
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Calendar.Company_Id,
                                 i_Filial_Id   => i_Calendar.Filial_Id,
                                 i_Calendar_Id => i_Calendar.Calendar_Id,
                                 i_Dates       => v_Deleted_Dates);
  
    Htt_Core.Notify_Calendar_Day_Change(i_Company_Id  => i_Calendar.Company_Id,
                                        i_Filial_Id   => i_Calendar.Filial_Id,
                                        i_Calendar_Id => i_Calendar.Calendar_Id,
                                        i_Dates       => v_Changed_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calendar_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number
  ) is
    r_Calendar Htt_Calendars%rowtype;
  begin
    r_Calendar := z_Htt_Calendars.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Calendar_Id => i_Calendar_Id);
  
    if r_Calendar.Pcode is not null then
      Htt_Error.Raise_021(i_Calendar_Id);
    end if;
  
    z_Htt_Calendars.Delete_One(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Calendar_Id => i_Calendar_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Save(i_Schedule Htt_Pref.Schedule_Rt) is
    r_Schedule                Htt_Schedules%rowtype;
    r_Day                     Htt_Schedule_Origin_Days%rowtype;
    r_Pattern                 Htt_Schedule_Patterns%rowtype;
    r_Pattern_Day             Htt_Schedule_Pattern_Days%rowtype;
    v_Pattern_Day             Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark                    Htt_Pref.Mark_Rt;
    v_Marks                   Htt_Pref.Mark_Nt;
    v_Marks_Day               Htt_Pref.Schedule_Day_Marks_Rt;
    v_Weight                  Htt_Pref.Time_Weight_Rt;
    v_Weights                 Htt_Pref.Time_Weight_Nt;
    v_Weights_Day             Htt_Pref.Schedule_Day_Weights_Rt;
    v_Schedule_Days           Htt_Pref.Schedule_Day_Nt := Htt_Pref.Schedule_Day_Nt();
    v_Dates                   Array_Date := Array_Date();
    v_Calendar_Dates          Array_Date := Array_Date();
    v_Mark_Dates              Array_Date := Array_Date();
    v_Weight_Dates            Array_Date := Array_Date();
    v_Old_Calendar_Id         number;
    v_Shift_Changed           boolean := false;
    v_Borders_Changed         boolean := false;
    v_Allowed_Late_Changed    boolean := false;
    v_Allowed_Early_Changed   boolean := false;
    v_Begin_Late_Changed      boolean := false;
    v_End_Early_Changed       boolean := false;
    v_Calendar_Changed        varchar2(1) := 'N';
    v_Holidays_Changed        varchar2(1) := 'N';
    v_Additional_Rest_Changes varchar2(1) := 'N';
    v_Nonworking_Changed      varchar2(1) := 'N';
    v_Schedule_Attached       varchar2(1) := 'N';
    v_Schedule_Kind           varchar2(1) := i_Schedule.Schedule_Kind;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Schedule.Company_Id,
                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                  o_Row         => r_Schedule) then
      v_Schedule_Kind := r_Schedule.Schedule_Kind;
    
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_101(r_Schedule.Name);
      end if;
    
      begin
        select 'Y'
          into v_Schedule_Attached
          from Htt_Timesheets t
         where t.Company_Id = i_Schedule.Company_Id
           and t.Filial_Id = i_Schedule.Filial_Id
           and t.Schedule_Id = i_Schedule.Schedule_Id
           and Rownum = 1;
      exception
        when No_Data_Found then
          v_Schedule_Attached := 'N';
      end;
    
      v_Shift_Changed         := r_Schedule.Shift <> i_Schedule.Shift;
      v_Borders_Changed       := (r_Schedule.Input_Acceptance <> i_Schedule.Input_Acceptance or
                                 r_Schedule.Output_Acceptance <> i_Schedule.Output_Acceptance);
      v_Allowed_Late_Changed  := r_Schedule.Allowed_Late_Time <> i_Schedule.Allowed_Late_Time;
      v_Allowed_Early_Changed := r_Schedule.Allowed_Early_Time <> i_Schedule.Allowed_Early_Time;
      v_Begin_Late_Changed    := r_Schedule.Begin_Late_Time <> i_Schedule.Begin_Late_Time;
      v_End_Early_Changed     := r_Schedule.End_Early_Time <> i_Schedule.End_Early_Time;
    
      if v_Shift_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_022;
      end if;
    
      if v_Borders_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_023;
      end if;
    
      if v_Allowed_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_113;
      end if;
    
      if v_Allowed_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_114;
      end if;
    
      if v_Begin_Late_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_115;
      end if;
    
      if v_End_Early_Changed and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_116;
      end if;
    
      if r_Schedule.Track_Duration <> i_Schedule.Track_Duration and v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_024;
      end if;
    
      if (r_Schedule.Count_Late <> i_Schedule.Count_Late or
         r_Schedule.Count_Early <> i_Schedule.Count_Early or
         r_Schedule.Count_Lack <> i_Schedule.Count_Lack or
         r_Schedule.Count_Free <> i_Schedule.Count_Free or
         Nvl(r_Schedule.Gps_Turnout_Enabled, 'N') <> Nvl(i_Schedule.Gps_Turnout_Enabled, 'N') or
         Nvl(r_Schedule.Gps_Use_Location, 'N') <> Nvl(i_Schedule.Gps_Use_Location, 'N') or
         Nvl(r_Schedule.Gps_Max_Interval, 0) <> Nvl(i_Schedule.Gps_Max_Interval, 0)) and
         v_Schedule_Attached = 'Y' then
        Htt_Error.Raise_025;
      end if;
    
      v_Old_Calendar_Id := r_Schedule.Calendar_Id;
    
      if not Fazo.Equal(v_Old_Calendar_Id, i_Schedule.Calendar_Id) then
        v_Calendar_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Holidays <> i_Schedule.Take_Holidays then
        v_Holidays_Changed := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or
         v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Additional_Rest_Days <> i_Schedule.Take_Additional_Rest_Days then
        v_Additional_Rest_Changes := 'Y';
      end if;
    
      if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Schedule.Calendar_Id and
         r_Schedule.Take_Nonworking <> i_Schedule.Take_Nonworking then
        v_Nonworking_Changed := 'Y';
      end if;
    else
      r_Schedule.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Schedules,
                                                i_Id    => i_Schedule.Schedule_Id);
    end if;
  
    r_Schedule.Company_Id                := i_Schedule.Company_Id;
    r_Schedule.Filial_Id                 := i_Schedule.Filial_Id;
    r_Schedule.Schedule_Id               := i_Schedule.Schedule_Id;
    r_Schedule.Name                      := i_Schedule.Name;
    r_Schedule.Schedule_Kind             := v_Schedule_Kind;
    r_Schedule.Shift                     := i_Schedule.Shift;
    r_Schedule.Input_Acceptance          := i_Schedule.Input_Acceptance;
    r_Schedule.Output_Acceptance         := i_Schedule.Output_Acceptance;
    r_Schedule.Track_Duration            := i_Schedule.Track_Duration;
    r_Schedule.Count_Late                := i_Schedule.Count_Late;
    r_Schedule.Count_Early               := i_Schedule.Count_Early;
    r_Schedule.Count_Lack                := i_Schedule.Count_Lack;
    r_Schedule.Count_Free                := i_Schedule.Count_Free;
    r_Schedule.Use_Weights               := i_Schedule.Use_Weights;
    r_Schedule.Allowed_Late_Time         := i_Schedule.Allowed_Late_Time;
    r_Schedule.Allowed_Early_Time        := i_Schedule.Allowed_Early_Time;
    r_Schedule.Begin_Late_Time           := i_Schedule.Begin_Late_Time;
    r_Schedule.End_Early_Time            := i_Schedule.End_Early_Time;
    r_Schedule.Calendar_Id               := i_Schedule.Calendar_Id;
    r_Schedule.Take_Holidays             := i_Schedule.Take_Holidays;
    r_Schedule.Take_Nonworking           := i_Schedule.Take_Nonworking;
    r_Schedule.Take_Additional_Rest_Days := i_Schedule.Take_Additional_Rest_Days;
    r_Schedule.Gps_Turnout_Enabled       := i_Schedule.Gps_Turnout_Enabled;
    r_Schedule.Gps_Use_Location          := i_Schedule.Gps_Use_Location;
    r_Schedule.Gps_Max_Interval          := i_Schedule.Gps_Max_Interval;
    r_Schedule.State                     := i_Schedule.State;
    r_Schedule.Code                      := i_Schedule.Code;
  
    if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      if r_Schedule.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
        Htt_Error.Raise_108;
      end if;
    
      if i_Schedule.Advanced_Setting = 'Y' then
        Htt_Error.Raise_117;
      end if;
    
      r_Schedule.Shift             := 0;
      r_Schedule.Input_Acceptance  := r_Schedule.Track_Duration;
      r_Schedule.Output_Acceptance := r_Schedule.Track_Duration;
    
      r_Schedule.Count_Late  := 'N';
      r_Schedule.Count_Early := 'N';
      r_Schedule.Count_Lack  := 'N';
      r_Schedule.Count_Free  := 'N';
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    elsif r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      r_Schedule.Shift             := null;
      r_Schedule.Input_Acceptance  := null;
      r_Schedule.Output_Acceptance := null;
      r_Schedule.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
    
      r_Schedule.Gps_Turnout_Enabled := 'N';
    end if;
  
    if r_Schedule.Gps_Turnout_Enabled = 'N' then
      r_Schedule.Gps_Use_Location := 'N';
      r_Schedule.Gps_Max_Interval := null;
    end if;
  
    z_Htt_Schedules.Save_Row(r_Schedule);
  
    if (v_Shift_Changed or v_Borders_Changed or v_Allowed_Late_Changed or v_Allowed_Early_Changed or
       v_Begin_Late_Changed or v_End_Early_Changed) and v_Schedule_Attached = 'N' then
      v_Schedule_Days := i_Schedule.Days;
    else
      select Td.Schedule_Date,
             Td.Day_Kind,
             Td.Begin_Time,
             Td.End_Time,
             Decode(Td.Day_Kind, Htt_Pref.c_Day_Kind_Work, Td.Break_Enabled, null),
             Td.Break_Begin_Time,
             Td.Break_End_Time,
             Td.Plan_Time
        bulk collect
        into v_Schedule_Days
        from table(i_Schedule.Days) Td
      minus
      select Od.Schedule_Date,
             Od.Day_Kind,
             (Od.Begin_Time - Trunc(Od.Begin_Time)) * 1440,
             (Od.End_Time - Trunc(Od.End_Time)) * 1440,
             Od.Break_Enabled,
             (Od.Break_Begin_Time - Trunc(Od.Break_Begin_Time)) * 1440,
             (Od.Break_End_Time - Trunc(Od.Break_End_Time)) * 1440,
             Od.Plan_Time
        from Htt_Schedule_Origin_Days Od
       where Od.Company_Id = i_Schedule.Company_Id
         and Od.Filial_Id = i_Schedule.Filial_Id
         and Od.Schedule_Id = i_Schedule.Schedule_Id
         and Extract(year from Od.Schedule_Date) = i_Schedule.Year;
    end if;
  
    for i in 1 .. v_Schedule_Days.Count
    loop
      r_Day := null;
    
      if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        v_Schedule_Days(i).Begin_Time := 0;
        v_Schedule_Days(i).End_Time := 0;
        v_Schedule_Days(i).Break_Enabled := 'N';
      end if;
    
      r_Day.Company_Id    := i_Schedule.Company_Id;
      r_Day.Filial_Id     := i_Schedule.Filial_Id;
      r_Day.Schedule_Id   := i_Schedule.Schedule_Id;
      r_Day.Schedule_Date := v_Schedule_Days(i).Schedule_Date;
      r_Day.Day_Kind      := v_Schedule_Days(i).Day_Kind;
      r_Day.Break_Enabled := v_Schedule_Days(i).Break_Enabled;
    
      if Extract(year from r_Day.Schedule_Date) <> i_Schedule.Year then
        Htt_Error.Raise_026(i_Chosen_Year   => i_Schedule.Year,
                            i_Schedule_Date => r_Day.Schedule_Date);
      end if;
    
      if v_Schedule_Days(i).Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Day.Begin_Time := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).Begin_Time, 'minute');
        r_Day.End_Time   := r_Day.Schedule_Date +
                            Numtodsinterval(v_Schedule_Days(i).End_Time, 'minute');
      
        if r_Day.End_Time <= r_Day.Begin_Time then
          r_Day.End_Time := r_Day.End_Time + 1;
        end if;
      
        if v_Schedule_Days(i).Break_Enabled = 'Y' then
          r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_Begin_Time, 'minute');
          r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                    Numtodsinterval(v_Schedule_Days(i).Break_End_Time, 'minute');
        
          if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
            r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
          end if;
        
          if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
            r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
          end if;
        end if;
      
        r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                   i_Begin_Time       => r_Day.Begin_Time,
                                                   i_End_Time         => r_Day.End_Time,
                                                   i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                   i_Break_End_Time   => r_Day.Break_End_Time);
      
        r_Day.Plan_Time := v_Schedule_Days(i).Plan_Time;
      else
        r_Day.Full_Time     := 0;
        r_Day.Plan_Time     := 0;
        r_Day.Break_Enabled := null;
      end if;
    
      r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Schedule.Shift, 'minute');
      r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
      r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                Numtodsinterval(r_Schedule.Input_Acceptance, 'minute');
      r_Day.Output_Border    := r_Day.Shift_End_Time +
                                Numtodsinterval(r_Schedule.Output_Acceptance, 'minute');
    
      z_Htt_Schedule_Origin_Days.Save_Row(r_Day);
    
      Fazo.Push(v_Dates, r_Day.Schedule_Date);
    end loop;
  
    r_Pattern.Company_Id     := i_Schedule.Company_Id;
    r_Pattern.Filial_Id      := i_Schedule.Filial_Id;
    r_Pattern.Schedule_Id    := i_Schedule.Schedule_Id;
    r_Pattern.Schedule_Kind  := i_Schedule.Pattern.Pattern_Kind;
    r_Pattern.All_Days_Equal := i_Schedule.Pattern.All_Days_Equal;
    r_Pattern.Count_Days     := i_Schedule.Pattern.Count_Days;
    r_Pattern.Begin_Date     := i_Schedule.Pattern.Begin_Date;
    r_Pattern.End_Date       := i_Schedule.Pattern.End_Date;
  
    z_Htt_Schedule_Patterns.Save_Row(r_Pattern);
  
    delete Htt_Schedule_Pattern_Days t
     where t.Company_Id = i_Schedule.Company_Id
       and t.Filial_Id = i_Schedule.Filial_Id
       and t.Schedule_Id = i_Schedule.Schedule_Id;
  
    for i in 1 .. i_Schedule.Pattern.Pattern_Day.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule.Pattern.Pattern_Day(i);
    
      r_Pattern_Day.Company_Id  := i_Schedule.Company_Id;
      r_Pattern_Day.Filial_Id   := i_Schedule.Filial_Id;
      r_Pattern_Day.Schedule_Id := i_Schedule.Schedule_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          r_Pattern_Day.Begin_Time    := 0;
          r_Pattern_Day.End_Time      := 0;
          r_Pattern_Day.Break_Enabled := 'N';
        end if;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Pattern_Days.Save_Row(r_Pattern_Day);
    
      if v_Pattern_Day.End_Time < v_Pattern_Day.Begin_Time then
        v_Pattern_Day.End_Time := v_Pattern_Day.End_Time + 1440;
      end if;
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
      
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
          v_Mark.End_Time   := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_027(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_028(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Pattern_Day.Begin_Time,
                                                                        1440)),
                              i_End_Time_Text   => Htt_Util.To_Time(mod(v_Pattern_Day.End_Time, 1440)));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_029(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Pattern_Marks.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                i_Filial_Id   => i_Schedule.Filial_Id,
                                                i_Schedule_Id => i_Schedule.Schedule_Id,
                                                i_Day_No      => v_Pattern_Day.Day_No,
                                                i_Begin_Time  => v_Mark.Begin_Time,
                                                i_End_Time    => v_Mark.End_Time);
      end loop;
    
      for j in 1 .. v_Pattern_Day.Pattern_Weights.Count
      loop
        exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
        continue when v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work;
      
        v_Weight := v_Pattern_Day.Pattern_Weights(j);
      
        if v_Weight.Begin_Time < v_Pattern_Day.Begin_Time then
          v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
          v_Weight.End_Time   := v_Weight.End_Time + 1440;
        end if;
      
        if v_Weight.End_Time < v_Weight.Begin_Time then
          v_Weight.End_Time := v_Weight.End_Time + 1440;
        end if;
      
        if v_Weight.Begin_Time = v_Weight.End_Time then
          Htt_Error.Raise_124(v_Pattern_Day.Day_No);
        end if;
      
        if v_Weight.End_Time > v_Pattern_Day.End_Time then
          Htt_Error.Raise_125(i_Day_No          => v_Pattern_Day.Day_No,
                              i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Pattern_Day.Begin_Time,
                                                                        1440)),
                              i_End_Time_Text   => Htt_Util.To_Time(mod(v_Pattern_Day.End_Time, 1440)));
        end if;
      
        z_Htt_Schedule_Pattern_Weights.Insert_One(i_Company_Id  => i_Schedule.Company_Id,
                                                  i_Filial_Id   => i_Schedule.Filial_Id,
                                                  i_Schedule_Id => i_Schedule.Schedule_Id,
                                                  i_Day_No      => v_Pattern_Day.Day_No,
                                                  i_Begin_Time  => v_Weight.Begin_Time,
                                                  i_End_Time    => v_Weight.End_Time,
                                                  i_Weight      => v_Weight.Weight);
      end loop;
    end loop;
  
    for i in 1 .. i_Schedule.Marks.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Marks_Day := i_Schedule.Marks(i);
    
      -- symmetric differrence
      with Old_Marks as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time
          from Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date),
      New_Marks as
       (select m.Begin_Time, m.End_Time
          from table(v_Marks_Day.Marks) m)
      select Begin_Time, End_Time
        bulk collect
        into v_Marks
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              union
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm)
      minus
      select Begin_Time, End_Time
        from (select Om.Begin_Time, Om.End_Time
                from Old_Marks Om
              intersect
              select Nm.Begin_Time, Nm.End_Time
                from New_Marks Nm);
    
      if v_Marks.Count > 0 then
        delete Htt_Schedule_Origin_Day_Marks Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Marks_Day.Schedule_Date;
      
        if v_Marks_Day.End_Time < v_Marks_Day.Begin_Time then
          v_Marks_Day.End_Time := v_Marks_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Marks_Day.Marks.Count
        loop
          v_Mark := v_Marks_Day.Marks(j);
        
          if v_Mark.Begin_Time < v_Marks_Day.Begin_Time then
            v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
            v_Mark.End_Time   := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.End_Time < v_Mark.Begin_Time then
            v_Mark.End_Time := v_Mark.End_Time + 1440;
          end if;
        
          if v_Mark.Begin_Time = v_Mark.End_Time then
            Htt_Error.Raise_030(v_Marks_Day.Schedule_Date);
          end if;
        
          if v_Mark.End_Time > v_Marks_Day.End_Time then
            Htt_Error.Raise_031(i_Schedule_Date   => v_Marks_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Marks_Day.Begin_Time,
                                                                          1440)),
                                i_End_Time_Text   => Htt_Util.To_Time(mod(v_Marks_Day.End_Time, 1440)));
          end if;
        
          z_Htt_Schedule_Origin_Day_Marks.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                     i_Filial_Id     => i_Schedule.Filial_Id,
                                                     i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                     i_Schedule_Date => v_Marks_Day.Schedule_Date,
                                                     i_Begin_Time    => v_Mark.Begin_Time,
                                                     i_End_Time      => v_Mark.End_Time);
        end loop;
      
        Fazo.Push(v_Mark_Dates, v_Marks_Day.Schedule_Date);
      end if;
    end loop;
  
    for i in 1 .. i_Schedule.Weights.Count
    loop
      exit when r_Schedule.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly;
    
      v_Weights_Day := i_Schedule.Weights(i);
    
      -- symmetric differrence
      with Old_Weights as
       (select mod(Dm.Begin_Time, 1440) Begin_Time, mod(Dm.End_Time, 1440) End_Time, Dm.Weight
          from Htt_Schedule_Origin_Day_Weights Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Weights_Day.Schedule_Date),
      New_Weights as
       (select m.Begin_Time, m.End_Time, m.Weight
          from table(v_Weights_Day.Weights) m)
      select Begin_Time, End_Time, Weight
        bulk collect
        into v_Weights
        from (select Om.Begin_Time, Om.End_Time, Om.Weight
                from Old_Weights Om
              union
              select Nm.Begin_Time, Nm.End_Time, Nm.Weight
                from New_Weights Nm)
      minus
      select Begin_Time, End_Time, Weight
        from (select Om.Begin_Time, Om.End_Time, Om.Weight
                from Old_Weights Om
              intersect
              select Nm.Begin_Time, Nm.End_Time, Nm.Weight
                from New_Weights Nm);
    
      if v_Weights.Count > 0 then
        delete Htt_Schedule_Origin_Day_Weights Dm
         where Dm.Company_Id = i_Schedule.Company_Id
           and Dm.Filial_Id = i_Schedule.Filial_Id
           and Dm.Schedule_Id = i_Schedule.Schedule_Id
           and Dm.Schedule_Date = v_Weights_Day.Schedule_Date;
      
        if v_Weights_Day.End_Time < v_Weights_Day.Begin_Time then
          v_Weights_Day.End_Time := v_Weights_Day.End_Time + 1440;
        end if;
      
        for j in 1 .. v_Weights_Day.Weights.Count
        loop
          v_Weight := v_Weights_Day.Weights(j);
        
          if v_Weight.Begin_Time < v_Weights_Day.Begin_Time then
            v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
            v_Weight.End_Time   := v_Weight.End_Time + 1440;
          end if;
        
          if v_Weight.End_Time < v_Weight.Begin_Time then
            v_Weight.End_Time := v_Weight.End_Time + 1440;
          end if;
        
          if v_Weight.Begin_Time = v_Weight.End_Time then
            Htt_Error.Raise_126(v_Weights_Day.Schedule_Date);
          end if;
        
          if v_Weight.End_Time > v_Weights_Day.End_Time then
            Htt_Error.Raise_127(i_Schedule_Date   => v_Weights_Day.Schedule_Date,
                                i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Weights_Day.Begin_Time,
                                                                          1440)),
                                i_End_Time_Text   => Htt_Util.To_Time(mod(v_Weights_Day.End_Time,
                                                                          1440)));
          end if;
        
          z_Htt_Schedule_Origin_Day_Weights.Insert_One(i_Company_Id    => i_Schedule.Company_Id,
                                                       i_Filial_Id     => i_Schedule.Filial_Id,
                                                       i_Schedule_Id   => i_Schedule.Schedule_Id,
                                                       i_Schedule_Date => v_Weights_Day.Schedule_Date,
                                                       i_Begin_Time    => v_Weight.Begin_Time,
                                                       i_End_Time      => v_Weight.End_Time,
                                                       i_Weight        => v_Weight.Weight);
        end loop;
      
        Fazo.Push(v_Weight_Dates, v_Weights_Day.Schedule_Date);
      end if;
    end loop;
  
    if Md_Pref.c_Migr_Company_Id != i_Schedule.Company_Id then
      Htt_Util.Assert_Schedule_Marks(i_Company_Id  => i_Schedule.Company_Id,
                                     i_Filial_Id   => i_Schedule.Filial_Id,
                                     i_Schedule_Id => i_Schedule.Schedule_Id,
                                     i_Dates       => v_Mark_Dates);
    
      Htt_Util.Assert_Schedule_Weights(i_Company_Id  => i_Schedule.Company_Id,
                                       i_Filial_Id   => i_Schedule.Filial_Id,
                                       i_Schedule_Id => i_Schedule.Schedule_Id,
                                       i_Dates       => v_Weight_Dates);
    end if;
  
    select Cd.Calendar_Date
      bulk collect
      into v_Calendar_Dates
      from Htt_Calendar_Days Cd
     where Cd.Company_Id = i_Schedule.Company_Id
       and Cd.Filial_Id = i_Schedule.Filial_Id
       and Cd.Calendar_Id in (v_Old_Calendar_Id, i_Schedule.Calendar_Id)
       and (Cd.Day_Kind = Htt_Pref.c_Day_Kind_Swapped and v_Calendar_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Holiday and v_Holidays_Changed = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest and v_Additional_Rest_Changes = 'Y' or
           Cd.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking and v_Nonworking_Changed = 'Y');
  
    v_Dates := v_Dates multiset union v_Calendar_Dates;
    v_Dates := v_Dates multiset union v_Mark_Dates;
    v_Dates := v_Dates multiset union distinct v_Weight_Dates;
  
    Htt_Core.Regen_Schedule_Days(i_Company_Id  => i_Schedule.Company_Id,
                                 i_Filial_Id   => i_Schedule.Filial_Id,
                                 i_Schedule_Id => i_Schedule.Schedule_Id,
                                 i_Year        => i_Schedule.Year,
                                 i_Dates       => v_Dates);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => i_Schedule.Company_Id,
                                        i_Filial_Id   => i_Schedule.Filial_Id,
                                        i_Schedule_Id => i_Schedule.Schedule_Id,
                                        i_Calendar_Id => i_Schedule.Calendar_Id,
                                        i_Year_Begin  => to_date('01.01.' || i_Schedule.Year,
                                                                 'DD.MM.YYYY'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    if z_Htt_Schedules.Exist_Lock(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  o_Row         => r_Schedule) then
      if r_Schedule.Pcode is not null then
        Htt_Error.Raise_102(r_Schedule.Name);
      end if;
    
      z_Htt_Schedules.Delete_One(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Schedule_Id => i_Schedule_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Save(i_Schedule_Template Htt_Pref.Schedule_Template_Rt) is
    r_Schedule_Template Htt_Schedule_Templates%rowtype;
    r_Pattern_Day       Htt_Schedule_Template_Days%rowtype;
    v_Pattern_Day       Htt_Pref.Schedule_Pattern_Day_Rt;
    v_Mark              Htt_Pref.Mark_Rt;
    v_Mark_Day_Numbers  Array_Number := Array_Number();
  begin
    r_Schedule_Template.Template_Id               := i_Schedule_Template.Template_Id;
    r_Schedule_Template.Name                      := i_Schedule_Template.Name;
    r_Schedule_Template.Shift                     := i_Schedule_Template.Shift;
    r_Schedule_Template.Description               := i_Schedule_Template.Description;
    r_Schedule_Template.Schedule_Kind             := i_Schedule_Template.Schedule_Kind;
    r_Schedule_Template.All_Days_Equal            := i_Schedule_Template.All_Days_Equal;
    r_Schedule_Template.Count_Days                := i_Schedule_Template.Count_Days;
    r_Schedule_Template.Input_Acceptance          := i_Schedule_Template.Input_Acceptance;
    r_Schedule_Template.Output_Acceptance         := i_Schedule_Template.Output_Acceptance;
    r_Schedule_Template.Track_Duration            := i_Schedule_Template.Track_Duration;
    r_Schedule_Template.Count_Late                := i_Schedule_Template.Count_Late;
    r_Schedule_Template.Count_Early               := i_Schedule_Template.Count_Early;
    r_Schedule_Template.Count_Lack                := i_Schedule_Template.Count_Lack;
    r_Schedule_Template.Take_Holidays             := i_Schedule_Template.Take_Holidays;
    r_Schedule_Template.Take_Nonworking           := i_Schedule_Template.Take_Nonworking;
    r_Schedule_Template.Take_Additional_Rest_Days := i_Schedule_Template.Take_Additional_Rest_Days;
    r_Schedule_Template.Order_No                  := i_Schedule_Template.Order_No;
    r_Schedule_Template.State                     := i_Schedule_Template.State;
    r_Schedule_Template.Code                      := i_Schedule_Template.Code;
  
    z_Htt_Schedule_Templates.Save_Row(r_Schedule_Template);
  
    for i in 1 .. i_Schedule_Template.Pattern_Days.Count
    loop
      r_Pattern_Day := null;
      v_Pattern_Day := i_Schedule_Template.Pattern_Days(i);
    
      r_Pattern_Day.Template_Id := i_Schedule_Template.Template_Id;
      r_Pattern_Day.Day_No      := v_Pattern_Day.Day_No;
      r_Pattern_Day.Day_Kind    := v_Pattern_Day.Day_Kind;
      r_Pattern_Day.Plan_Time   := v_Pattern_Day.Plan_Time;
    
      if v_Pattern_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
        r_Pattern_Day.Begin_Time    := v_Pattern_Day.Begin_Time;
        r_Pattern_Day.End_Time      := v_Pattern_Day.End_Time;
        r_Pattern_Day.Break_Enabled := v_Pattern_Day.Break_Enabled;
      
        if v_Pattern_Day.Break_Enabled = 'Y' then
          r_Pattern_Day.Break_Begin_Time := v_Pattern_Day.Break_Begin_Time;
          r_Pattern_Day.Break_End_Time   := v_Pattern_Day.Break_End_Time;
        end if;
      else
        r_Pattern_Day.Plan_Time := 0;
      end if;
    
      z_Htt_Schedule_Template_Days.Save_Row(r_Pattern_Day);
    
      for j in 1 .. v_Pattern_Day.Pattern_Marks.Count
      loop
        v_Mark := v_Pattern_Day.Pattern_Marks(j);
      
        if v_Mark.Begin_Time < i_Schedule_Template.Shift then
          v_Mark.Begin_Time := v_Mark.Begin_Time + 1440;
        end if;
      
        if v_Mark.End_Time < v_Mark.Begin_Time then
          v_Mark.End_Time := v_Mark.End_Time + 1440;
        end if;
      
        if v_Mark.Begin_Time = v_Mark.End_Time then
          Htt_Error.Raise_032(v_Pattern_Day.Day_No);
        end if;
      
        if v_Mark.End_Time > i_Schedule_Template.Shift + 1440 then
          Htt_Error.Raise_033(i_Day_No     => v_Pattern_Day.Day_No,
                              i_Shift_Text => Htt_Util.To_Time_Text(i_Minutes      => i_Schedule_Template.Shift,
                                                                    i_Show_Minutes => true,
                                                                    i_Show_Words   => false));
        end if;
      
        if v_Pattern_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
          Htt_Error.Raise_034(v_Pattern_Day.Day_No);
        end if;
      
        z_Htt_Schedule_Template_Marks.Save_One(i_Template_Id => i_Schedule_Template.Template_Id,
                                               i_Day_No      => v_Pattern_Day.Day_No,
                                               i_Begin_Time  => v_Mark.Begin_Time,
                                               i_End_Time    => v_Mark.End_Time);
      
        Fazo.Push(v_Mark_Day_Numbers, v_Pattern_Day.Day_No);
      end loop;
    end loop;
  
    Htt_Util.Assert_Schedule_Template_Marks(i_Template_Id => i_Schedule_Template.Template_Id,
                                            i_Day_Numbers => v_Mark_Day_Numbers);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Template_Delete(i_Template_Id number) is
  begin
    z_Htt_Schedule_Templates.Delete_One(i_Template_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Save(i_Time_Kind Htt_Time_Kinds%rowtype) is
    r_Time_Kind   Htt_Time_Kinds%rowtype;
    r_Parent      Htt_Time_Kinds%rowtype;
    v_Pcode       Htt_Time_Kinds.Pcode%type;
    v_Requestable Htt_Time_Kinds.Requestable%type := 'Y';
  begin
    if z_Htt_Time_Kinds.Exist_Lock(i_Company_Id   => i_Time_Kind.Company_Id,
                                   i_Time_Kind_Id => i_Time_Kind.Time_Kind_Id,
                                   o_Row          => r_Time_Kind) then
    
      if r_Time_Kind.Parent_Id <> i_Time_Kind.Parent_Id or
         (r_Time_Kind.Parent_Id is not null and i_Time_Kind.Parent_Id is null) then
        Htt_Error.Raise_035(z_Htt_Time_Kinds.Load(i_Company_Id => r_Time_Kind.Company_Id, --
                            i_Time_Kind_Id => r_Time_Kind.Parent_Id).Name);
      end if;
    
      v_Pcode       := r_Time_Kind.Pcode;
      v_Requestable := r_Time_Kind.Requestable;
    
      if v_Pcode is not null then
        if i_Time_Kind.Parent_Id is not null and r_Time_Kind.Parent_Id is null then
          Htt_Error.Raise_036;
        end if;
      
        if r_Time_Kind.Plan_Load <> i_Time_Kind.Plan_Load then
          Htt_Error.Raise_037(Htt_Util.t_Plan_Load(r_Time_Kind.Plan_Load));
        end if;
      
        if r_Time_Kind.Requestable <> i_Time_Kind.Requestable then
          Htt_Error.Raise_038;
        end if;
      end if;
    end if;
  
    if v_Pcode is null then
      if i_Time_Kind.Parent_Id is null then
        Htt_Error.Raise_039;
      end if;
    
      if i_Time_Kind.Requestable = 'N' then
        Htt_Error.Raise_040;
      end if;
    
      r_Parent := z_Htt_Time_Kinds.Take(i_Company_Id   => i_Time_Kind.Company_Id,
                                        i_Time_Kind_Id => i_Time_Kind.Parent_Id);
    
      if r_Parent.Pcode is null then
        Htt_Error.Raise_041;
      end if;
    
      if r_Parent.Parent_Id is not null then
        Htt_Error.Raise_042;
      end if;
    end if;
  
    if i_Time_Kind.Plan_Load <> r_Parent.Plan_Load then
      Htt_Error.Raise_043(Htt_Util.t_Plan_Load(r_Parent.Plan_Load));
    end if;
  
    r_Time_Kind             := i_Time_Kind;
    r_Time_Kind.Pcode       := v_Pcode;
    r_Time_Kind.Requestable := v_Requestable;
  
    z_Htt_Time_Kinds.Save_Row(r_Time_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Time_Kind_Delete
  (
    i_Company_Id   number,
    i_Time_Kind_Id number
  ) is
    r_Time_Kind Htt_Time_Kinds%rowtype;
  begin
    r_Time_Kind := z_Htt_Time_Kinds.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Time_Kind_Id => i_Time_Kind_Id);
  
    if r_Time_Kind.Pcode is not null then
      Htt_Error.Raise_044(i_Time_Kind_Id);
    end if;
  
    z_Htt_Time_Kinds.Delete_One(i_Company_Id   => i_Company_Id, --
                                i_Time_Kind_Id => i_Time_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save(i_Person Htt_Pref.Person_Rt) is
    r_Person_Old Htt_Persons%rowtype;
    r_Person_New Htt_Persons%rowtype;
    v_Photo_Shas Array_Varchar2 := Array_Varchar2();
    v_Count      number;
  begin
    if z_Htt_Persons.Exist_Lock(i_Company_Id => i_Person.Company_Id,
                                i_Person_Id  => i_Person.Person_Id,
                                o_Row        => r_Person_Old) then
      null;
    end if;
  
    r_Person_New.Company_Id := i_Person.Company_Id;
    r_Person_New.Person_Id  := i_Person.Person_Id;
    r_Person_New.Pin        := i_Person.Pin;
    r_Person_New.Pin_Code   := i_Person.Pin_Code;
    r_Person_New.Rfid_Code  := i_Person.Rfid_Code;
    r_Person_New.Qr_Code    := i_Person.Qr_Code;
  
    z_Htt_Persons.Save_Row(r_Person_New);
  
    v_Photo_Shas.Extend(i_Person.Photos.Count);
  
    for i in 1 .. i_Person.Photos.Count
    loop
      v_Photo_Shas(i) := i_Person.Photos(i).Photo_Sha;
    
      Person_Save_Photo(i_Company_Id => i_Person.Company_Id,
                        i_Person_Id  => i_Person.Person_Id,
                        i_Photo_Sha  => i_Person.Photos(i).Photo_Sha,
                        i_Is_Main    => i_Person.Photos(i).Is_Main);
    end loop;
  
    for r in (select *
                from Htt_Person_Photos q
               where q.Company_Id = i_Person.Company_Id
                 and q.Person_Id = i_Person.Person_Id
                 and q.Photo_Sha not member of v_Photo_Shas)
    loop
      z_Htt_Person_Photos.Delete_One(i_Company_Id => r.Company_Id,
                                     i_Person_Id  => r.Person_Id,
                                     i_Photo_Sha  => r.Photo_Sha);
    end loop;
  
    select count(*)
      into v_Count
      from Htt_Person_Photos q
     where q.Company_Id = i_Person.Company_Id
       and q.Person_Id = i_Person.Person_Id
       and q.Is_Main = 'Y';
  
    if v_Count > 1 then
      Htt_Error.Raise_045(i_Main_Photo_Cnt => v_Count,
                          i_Person_Name    => z_Mr_Natural_Persons.Load(i_Company_Id => i_Person.Company_Id, --
                                              i_Person_Id => i_Person.Person_Id).Name);
    end if;
  
    if not (Fazo.Equal(r_Person_New.Pin, r_Person_Old.Pin) and
        Fazo.Equal(r_Person_New.Pin_Code, r_Person_Old.Pin_Code) and
        Fazo.Equal(r_Person_New.Rfid_Code, r_Person_Old.Rfid_Code) and
        Fazo.Equal(r_Person_New.Qr_Code, r_Person_Old.Qr_Code)) then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Person.Company_Id,
                                 i_Person_Id  => i_Person.Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Delete
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2
  ) is
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha) then
      z_Htt_Person_Photos.Delete_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha);
    
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Save_Photo
  (
    i_Company_Id number,
    i_Person_Id  number,
    i_Photo_Sha  varchar2,
    i_Is_Main    varchar2
  ) is
    r_Person_Photo Htt_Person_Photos%rowtype;
  begin
    if z_Htt_Person_Photos.Exist_Lock(i_Company_Id => i_Company_Id,
                                      i_Person_Id  => i_Person_Id,
                                      i_Photo_Sha  => i_Photo_Sha,
                                      o_Row        => r_Person_Photo) then
      z_Htt_Person_Photos.Update_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => Option_Varchar2(i_Is_Main));
    else
      z_Htt_Person_Photos.Insert_One(i_Company_Id => i_Company_Id,
                                     i_Person_Id  => i_Person_Id,
                                     i_Photo_Sha  => i_Photo_Sha,
                                     i_Is_Main    => i_Is_Main);
    end if;
  
    if r_Person_Photo.Company_Id is null or r_Person_Photo.Is_Main <> i_Is_Main then
      Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Photo_Update
  (
    i_Company_Id    number,
    i_Person_Id     number,
    i_Old_Photo_Sha varchar2,
    i_New_Photo_Sha varchar2
  ) is
    v_Is_Main varchar2(1);
  
    --------------------------------------------------
    Function Photo_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Person_Photos Pp
       where Pp.Company_Id = i_Company_Id
         and Pp.Person_Id = i_Person_Id
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    v_Is_Main := z_Htt_Person_Photos.Take(i_Company_Id => i_Company_Id, --
                 i_Person_Id => i_Person_Id, --
                 i_Photo_Sha => i_Old_Photo_Sha).Is_Main;
  
    Person_Photo_Delete(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_Old_Photo_Sha);
  
    if not Photo_Exists then
      v_Is_Main := 'Y';
    end if;
  
    if i_New_Photo_Sha is not null then
      Person_Save_Photo(i_Company_Id => i_Company_Id,
                        i_Person_Id  => i_Person_Id,
                        i_Photo_Sha  => i_New_Photo_Sha,
                        i_Is_Main    => Nvl(v_Is_Main, 'N'));
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Delete
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Persons.Delete_One(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Save(i_Location_Type Htt_Location_Types%rowtype) is
  begin
    z_Htt_Location_Types.Save_Row(i_Location_Type);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Type_Delete
  (
    i_Company_Id       number,
    i_Location_Type_Id number
  ) is
  begin
    z_Htt_Location_Types.Delete_One(i_Company_Id       => i_Company_Id,
                                    i_Location_Type_Id => i_Location_Type_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Polygon_Save
  (
    i_Company_Id       number,
    i_Location_Id      number,
    i_Polygon_Vertices Array_Varchar2
  ) is
    v_Order_No         number := 0;
    v_Polygon_Vertices Array_Varchar2 := i_Polygon_Vertices;
  begin
    delete from Htt_Location_Polygon_Vertices t
     where t.Company_Id = i_Company_Id
       and t.Location_Id = i_Location_Id;
  
    if v_Polygon_Vertices.Count > 0 and
       v_Polygon_Vertices(v_Polygon_Vertices.Count) <> v_Polygon_Vertices(1) then
      v_Polygon_Vertices.Extend;
      v_Polygon_Vertices(v_Polygon_Vertices.Count) := v_Polygon_Vertices(1);
    end if;
  
    for i in 1 .. v_Polygon_Vertices.Count
    loop
      v_Order_No := v_Order_No + 1;
    
      z_Htt_Location_Polygon_Vertices.Insert_One(i_Company_Id  => i_Company_Id,
                                                 i_Location_Id => i_Location_Id,
                                                 i_Order_No    => v_Order_No,
                                                 i_Latlng      => v_Polygon_Vertices(i));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Save
  (
    i_Location         Htt_Locations%rowtype,
    i_Polygon_Vertices Array_Varchar2 := Array_Varchar2()
  ) is
    r_Row             Htt_Locations%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    if z_Htt_Locations.Exist_Lock(i_Company_Id  => i_Location.Company_Id,
                                  i_Location_Id => i_Location.Location_Id,
                                  o_Row         => r_Row) then
      z_Htt_Locations.Update_Row(i_Location);
    
      if not Fazo.Equal(r_Row.Timezone_Code, i_Location.Timezone_Code) then
        v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
        v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
      
        for r in (select q.Device_Id
                    from Htt_Devices q
                   where q.Company_Id = i_Location.Company_Id
                     and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                     and q.Location_Id = i_Location.Location_Id
                     and q.State = 'A')
        loop
          Htt_Api.Acms_Command_Add(i_Company_Id   => i_Location.Company_Id,
                                   i_Device_Id    => r.Device_Id,
                                   i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
        end loop;
      end if;
    else
      z_Htt_Locations.Insert_Row(i_Location);
    end if;
  
    Location_Polygon_Save(i_Company_Id       => i_Location.Company_Id,
                          i_Location_Id      => i_Location.Location_Id,
                          i_Polygon_Vertices => i_Polygon_Vertices);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Delete
  (
    i_Company_Id  number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Locations.Delete_One(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Insert_Try(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Remove_Filial
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    z_Htt_Location_Filials.Delete_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id);
  
    for r in (select q.Company_Id, q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Location_Id = i_Location_Id
                 and exists (select 1
                        from Hzk_Devices Dv
                       where Dv.Company_Id = q.Company_Id
                         and Dv.Device_Id = q.Device_Id))
    loop
      Hzk_Api.Device_Sync(i_Company_Id => r.Company_Id, i_Device_Id => r.Device_Id);
    end loop;
  
    if Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id) = 'Y' then
      Htt_Core.Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                                i_Filial_Id   => i_Filial_Id,
                                                i_Location_Id => i_Location_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                 i_Filial_Id   => i_Filial_Id,
                                 i_Location_Id => i_Location_Id,
                                 i_Person_Id   => i_Person_Id,
                                 i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Htt_Core.Location_Remove_Person(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Location_Id => i_Location_Id,
                                    i_Person_Id   => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
  begin
    Htt_Core.Location_Sync_Persons(i_Company_Id  => i_Company_Id,
                                   i_Filial_Id   => i_Filial_Id,
                                   i_Location_Id => i_Location_Id);
  end;

  ----------------------------------------------------------------------------------------------------       
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
  begin
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Person_Global_Sync_All_Location(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Insert_Try(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Division
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Division_Id number
  ) is
  begin
    z_Htt_Location_Divisions.Delete_One(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id,
                                        i_Division_Id => i_Division_Id);
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Location_Qr_Code_Deactivate
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
    r_Qrcode Htt_Location_Qr_Codes%rowtype;
  begin
    r_Qrcode := z_Htt_Location_Qr_Codes.Lock_Load(i_Company_Id => i_Company_Id,
                                                  i_Unique_Key => i_Unique_Key);
  
    if r_Qrcode.State = 'P' then
      Htt_Error.Raise_082(i_Location_Id   => r_Qrcode.Location_Id,
                          i_Location_Name => z_Htt_Locations.Load(i_Company_Id => r_Qrcode.Company_Id, --
                                             i_Location_Id => r_Qrcode.Location_Id).Name,
                          i_Created_On    => r_Qrcode.Created_On);
    end if;
  
    r_Qrcode.State := 'P';
  
    z_Htt_Location_Qr_Codes.Update_Row(r_Qrcode);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Qr_Code_Delete
  (
    i_Company_Id number,
    i_Unique_Key varchar2
  ) is
  begin
    z_Htt_Location_Qr_Codes.Delete_One(i_Company_Id => i_Company_Id, i_Unique_Key => i_Unique_Key);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Location_Qr_Code_Generate
  (
    i_Company_Id  number,
    i_Location_Id number
  ) return varchar2 is
    v_Random_Key varchar2(32) := to_char(Dbms_Crypto.Randombytes(16));
    v_Unique_Key varchar2(64);
  begin
    v_Unique_Key := Fazo.Hash_Sha1(i_Location_Id || ':' || Htt_Next.Qr_Code_Id || v_Random_Key);
  
    z_Htt_Location_Qr_Codes.Insert_One(i_Company_Id  => i_Company_Id,
                                       i_Unique_Key  => v_Unique_Key,
                                       i_Location_Id => i_Location_Id,
                                       i_State       => 'A');
  
    return v_Unique_Key;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Terminal_Model_Save(i_Terminal_Model Htt_Terminal_Models%rowtype) is
    r_Terminal_Model Htt_Terminal_Models%rowtype;
  begin
    r_Terminal_Model := z_Htt_Terminal_Models.Lock_Load(i_Terminal_Model.Model_Id);
  
    if r_Terminal_Model.Pcode <> i_Terminal_Model.Pcode then
      Htt_Error.Raise_046(i_Old_Pcode => r_Terminal_Model.Pcode,
                          i_Model_Id  => i_Terminal_Model.Model_Id);
    end if;
  
    z_Htt_Terminal_Models.Update_Row(i_Terminal_Model);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add(i_Device Htt_Devices%rowtype) is
    r_Device          Htt_Devices%rowtype := i_Device;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    r_Device.Use_Settings := Nvl(r_Device.Use_Settings, 'N');
  
    if r_Device.Model_Id is null and --
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_047;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if r_Device.Location_Id is null and --
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_048;
    end if;
  
    if r_Device.Use_Settings = 'Y' then
      r_Device.Track_Types   := null;
      r_Device.Mark_Types    := null;
      r_Device.Emotion_Types := null;
      r_Device.Lang_Code     := null;
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          r_Device.Lang_Code is null then
      Htt_Error.Raise_050;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      r_Device.Autogen_Inputs       := 'N';
      r_Device.Autogen_Outputs      := 'N';
      r_Device.Ignore_Tracks        := 'N';
      r_Device.Ignore_Images        := 'N';
      r_Device.Restricted_Type      := null;
      r_Device.Only_Last_Restricted := null;
    else
      r_Device.Autogen_Inputs  := Nvl(r_Device.Autogen_Inputs, 'N');
      r_Device.Autogen_Outputs := Nvl(r_Device.Autogen_Outputs, 'N');
    
      if r_Device.Restricted_Type not in
         (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
        r_Device.Only_Last_Restricted := null;
      end if;
    end if;
  
    r_Device.Status        := Nvl(r_Device.Status, Htt_Pref.c_Device_Status_Unknown);
    r_Device.Ignore_Tracks := Nvl(r_Device.Ignore_Tracks, 'N');
    r_Device.Ignore_Images := Nvl(r_Device.Ignore_Images, 'N');
  
    z_Htt_Devices.Insert_Row(r_Device);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Update
  (
    i_Company_Id           number,
    i_Device_Id            number,
    i_Name                 Option_Varchar2 := null,
    i_Model_Id             Option_Number := null,
    i_Location_Id          Option_Number := null,
    i_Charge_Percentage    Option_Number := null,
    i_Track_Types          Option_Varchar2 := null,
    i_Mark_Types           Option_Varchar2 := null,
    i_Emotion_Types        Option_Varchar2 := null,
    i_Lang_Code            Option_Varchar2 := null,
    i_Use_Settings         Option_Varchar2 := null,
    i_Last_Seen_On         Option_Date := null,
    i_Autogen_Inputs       Option_Varchar2 := null,
    i_Autogen_Outputs      Option_Varchar2 := null,
    i_Ignore_Tracks        Option_Varchar2 := null,
    i_Ignore_Images        Option_Varchar2 := null,
    i_Restricted_Type      Option_Varchar2 := null,
    i_Only_Last_Restricted Option_Varchar2 := null,
    i_State                Option_Varchar2 := null
  ) is
    r_Device               Htt_Devices%rowtype;
    v_Track_Types          Option_Varchar2 := i_Track_Types;
    v_Mark_Types           Option_Varchar2 := i_Mark_Types;
    v_Emotion_Types        Option_Varchar2 := i_Emotion_Types;
    v_Lang_Code            Option_Varchar2 := i_Lang_Code;
    v_Autogen_Inputs       Option_Varchar2 := i_Autogen_Inputs;
    v_Autogen_Outputs      Option_Varchar2 := i_Autogen_Outputs;
    v_Ignore_Tracks        Option_Varchar2 := i_Ignore_Tracks;
    v_Ignore_Images        Option_Varchar2 := i_Ignore_Images;
    v_Restricted_Type      Option_Varchar2 := i_Restricted_Type;
    v_Only_Last_Restricted Option_Varchar2 := i_Only_Last_Restricted;
    v_Charge_Percentage    Option_Number := i_Charge_Percentage;
    v_Dt_Hikvision_Id      number;
    v_Dt_Dahua_Id          number;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, --
                                        i_Device_Id  => i_Device_Id);
  
    if i_Model_Id is not null and --
       i_Model_Id.Val is null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal) then
      Htt_Error.Raise_051;
    end if;
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    if i_Location_Id is not null and --
       i_Location_Id.Val is null and
       r_Device.Device_Type_Id in (Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Terminal),
                                   Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad),
                                   v_Dt_Hikvision_Id,
                                   v_Dt_Dahua_Id) then
      Htt_Error.Raise_052;
    end if;
  
    if i_Use_Settings is not null and --
       i_Use_Settings.Val = 'Y' then
      v_Track_Types   := Option_Varchar2(null);
      v_Mark_Types    := Option_Varchar2(null);
      v_Emotion_Types := Option_Varchar2(null);
      v_Lang_Code     := Option_Varchar2(null);
    elsif r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Timepad) and
          v_Lang_Code is not null and v_Lang_Code.Val is null then
      Htt_Error.Raise_054;
    end if;
  
    if r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) then
      v_Autogen_Inputs       := null;
      v_Autogen_Outputs      := null;
      v_Restricted_Type      := null;
      v_Only_Last_Restricted := null;
      v_Ignore_Tracks        := null;
      v_Ignore_Images        := null;
    elsif v_Restricted_Type.Val not in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
      v_Only_Last_Restricted := Option_Varchar2(null);
    end if;
  
    if v_Charge_Percentage is not null and v_Charge_Percentage.Val is null then
      v_Charge_Percentage := null;
    end if;
  
    z_Htt_Devices.Update_One(i_Company_Id           => i_Company_Id,
                             i_Device_Id            => i_Device_Id,
                             i_Name                 => i_Name,
                             i_Model_Id             => i_Model_Id,
                             i_Location_Id          => i_Location_Id,
                             i_Charge_Percentage    => v_Charge_Percentage,
                             i_Track_Types          => v_Track_Types,
                             i_Mark_Types           => v_Mark_Types,
                             i_Emotion_Types        => v_Emotion_Types,
                             i_Lang_Code            => v_Lang_Code,
                             i_Use_Settings         => i_Use_Settings,
                             i_Autogen_Inputs       => v_Autogen_Inputs,
                             i_Autogen_Outputs      => v_Autogen_Outputs,
                             i_Ignore_Tracks        => v_Ignore_Tracks,
                             i_Ignore_Images        => v_Ignore_Images,
                             i_Restricted_Type      => v_Restricted_Type,
                             i_Only_Last_Restricted => v_Only_Last_Restricted,
                             i_Last_Seen_On         => i_Last_Seen_On,
                             i_State                => i_State);
  
    if r_Device.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id) and i_Location_Id is not null and
       i_Location_Id.Val <> r_Device.Location_Id then
      Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                       i_Device_Id    => r_Device.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Device_Save(i_Device Htt_Acms_Devices%rowtype) is
    r_Device Htt_Acms_Devices%rowtype;
  begin
    if not z_Htt_Acms_Devices.Exist_Lock(i_Company_Id => i_Device.Company_Id,
                                         i_Device_Id  => i_Device.Device_Id,
                                         o_Row        => r_Device) then
      r_Device.Company_Id := i_Device.Company_Id;
      r_Device.Device_Id  := i_Device.Device_Id;
    
      -- dynamic ip solution currently disabled
      -- see hac module integration instead 
      r_Device.Dynamic_Ip := 'N';
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := Nvl(i_Device.Host, i_Device.Login);
    else
      if not Fazo.Equal(r_Device.Dynamic_Ip, i_Device.Dynamic_Ip) or --
         not Fazo.Equal(r_Device.Ip_Address, i_Device.Ip_Address) or --
         not Fazo.Equal(r_Device.Port, i_Device.Port) or --
         not Fazo.Equal(r_Device.Protocol, i_Device.Protocol) or --
         not Fazo.Equal(r_Device.Host, i_Device.Host) or --
         not Fazo.Equal(r_Device.Login, i_Device.Login) or --
         not Fazo.Equal(r_Device.Password, i_Device.Password) then
        Acms_Command_Add(i_Company_Id   => r_Device.Company_Id,
                         i_Device_Id    => r_Device.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
      end if;
    end if;
  
    r_Device.Dynamic_Ip := i_Device.Dynamic_Ip;
    r_Device.Login      := i_Device.Login;
    r_Device.Password   := Nvl(i_Device.Password, r_Device.Password);
  
    if r_Device.Dynamic_Ip = 'Y' then
      r_Device.Ip_Address := i_Device.Ip_Address;
      r_Device.Port       := i_Device.Port;
      r_Device.Protocol   := i_Device.Protocol;
      r_Device.Host       := null;
    else
      r_Device.Ip_Address := null;
      r_Device.Port       := null;
      r_Device.Protocol   := null;
      r_Device.Host       := i_Device.Host;
    end if;
  
    z_Htt_Acms_Devices.Save_Row(r_Device);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Add_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
    v_Filial_Ids Array_Number;
    r_Device     Htt_Devices%rowtype;
  begin
    r_Device := z_Htt_Devices.Lock_Load(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  
    z_Htt_Device_Admins.Insert_Try(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    if r_Device.Location_Id is not null then
      v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Device.Company_Id,
                                              i_Location_Id => r_Device.Location_Id,
                                              i_Person_Id   => i_Person_Id);
    
      for i in 1 .. v_Filial_Ids.Count
      loop
        Htt_Core.Location_Add_Person(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => v_Filial_Ids(i),
                                     i_Location_Id => r_Device.Location_Id,
                                     i_Person_Id   => i_Person_Id,
                                     i_Attach_Type => Htt_Pref.c_Attach_Type_Manual);
      end loop;
    end if;
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Remove_Admin
  (
    i_Company_Id number,
    i_Device_Id  number,
    i_Person_Id  number
  ) is
  begin
    z_Htt_Device_Admins.Delete_One(i_Company_Id => i_Company_Id,
                                   i_Device_Id  => i_Device_Id,
                                   i_Person_Id  => i_Person_Id);
  
    Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Device_Delete
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unknown_Device_Add
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Insert_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Reliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Unreliable_Device
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    Device_Update(i_Company_Id => i_Company_Id,
                  i_Device_Id  => i_Device_Id,
                  i_State      => Option_Varchar2('P'));
  
    z_Htt_Unknown_Devices.Delete_One(i_Company_Id => i_Company_Id, i_Device_Id => i_Device_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Device_Tracks
  (
    i_Company_Id number,
    i_Device_Id  number
  ) is
  begin
    for r in (select q.Filial_Id, q.Track_Id
                from Htt_Tracks q
               where q.Company_Id = i_Company_Id
                 and q.Device_Id = i_Device_Id)
    loop
      Track_Delete(i_Company_Id => i_Company_Id,
                   i_Filial_Id  => r.Filial_Id,
                   i_Track_Id   => r.Track_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    Htt_Core.Acms_Command_Add(i_Company_Id   => i_Company_Id,
                              i_Device_Id    => i_Device_Id,
                              i_Command_Kind => i_Command_Kind,
                              i_Person_Id    => i_Person_Id,
                              i_Data         => i_Data);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Complete
  (
    i_Company_Id number,
    i_Command_Id number
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_complete: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Complited),
                                   i_State_Changed_On => Option_Date(sysdate));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Fail
  (
    i_Company_Id number,
    i_Command_Id number,
    i_Error_Msg  varchar2 := null
  ) is
    r_Command Htt_Acms_Commands%rowtype;
  begin
    r_Command := z_Htt_Acms_Commands.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Command_Id => i_Command_Id);
  
    if r_Command.Status <> Htt_Pref.c_Command_Status_Sent then
      b.Raise_Fatal('HTT: acms_command_fail: command status must be sent, command_id=$1',
                    i_Command_Id);
    end if;
  
    z_Htt_Acms_Commands.Update_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => i_Command_Id,
                                   i_Status           => Option_Varchar2(Htt_Pref.c_Command_Status_Failed),
                                   i_State_Changed_On => Option_Date(sysdate),
                                   i_Error_Msg        => Option_Varchar2(i_Error_Msg));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Trim_Tracks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
    v_Value varchar2(1);
  begin
    if i_Value not in ('Y', 'N') then
      v_Value := 'N';
    else
      v_Value := i_Value;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Schedule_Trimmed_Tracks,
                           i_Value      => Nvl(v_Value, 'N'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Pin_Autogenerate_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_079;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Pin_Autogenerate,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Photo_As_Face_Rec_Save
  (
    i_Company_Id number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => Md_Pref.Filial_Head(i_Company_Id),
                           i_Code       => Htt_Pref.c_Photo_As_Face_Rec,
                           i_Value      => Nvl(i_Value, 'Y'));
  end;

  ----------------------------------------------------------------------------------------------------
  Function Invalid_Auto_Checkout_Enable
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_User_Id    number
  ) return boolean is
    r_Setting Hes_Pref.Staff_Gps_Tracking_Settings_Rt;
  begin
    r_Setting := Hes_Util.Staff_Gps_Tracking_Settings(i_Company_Id => i_Company_Id,
                                                      i_Filial_Id  => i_Filial_Id,
                                                      i_User_Id    => i_User_Id);
  
    return r_Setting.Auto_Output_Enabled = 'Y' and r_Setting.Disable_Auto_Checkout = 'Y';
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Notify_Timesheet
  (
    i_Track       Htt_Tracks%rowtype,
    i_Notify_Type varchar2
  ) is
    r_Staff         Href_Staffs%rowtype;
    r_Timesheet     Htt_Timesheets%rowtype;
    v_Manager_Id    number;
    v_Staff_Id      number;
    v_Timesheet_Ids Array_Number;
    result          Hashmap := Hashmap();
  begin
    if not (i_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
        i_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and i_Track.Is_Valid = 'N' and
        Invalid_Auto_Checkout_Enable(i_Company_Id => i_Track.Company_Id,
                                         i_Filial_Id  => i_Track.Filial_Id,
                                         i_User_Id    => i_Track.Person_Id)) then
      return;
    end if;
  
    v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Track.Company_Id,
                                                 i_Filial_Id   => i_Track.Filial_Id,
                                                 i_Employee_Id => i_Track.Person_Id,
                                                 i_Date        => i_Track.Track_Datetime);
  
    r_Staff := z_Href_Staffs.Take(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Staff_Id   => v_Staff_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => i_Track.Company_Id,
                                             i_Filial_Id  => i_Track.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Track.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    v_Timesheet_Ids := Htt_Core.Find_Track_Timesheets(i_Company_Id     => i_Track.Company_Id,
                                                      i_Filial_Id      => i_Track.Filial_Id,
                                                      i_Staff_Id       => v_Staff_Id,
                                                      i_Track_Datetime => i_Track.Track_Datetime);
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Track.Company_Id,
                                           i_Filial_Id    => i_Track.Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if r_Timesheet.Count_Early = 'Y' and r_Timesheet.Input_Time is not null and
         r_Timesheet.Output_Time is null and i_Track.Track_Datetime between r_Timesheet.Begin_Time and
         r_Timesheet.End_Time then
        Result.Put('notify_type', i_Notify_Type);
        Result.Put('timesheet_id', r_Timesheet.Timesheet_Id);
        Result.Put('timesheet_date', r_Timesheet.Timesheet_Date);
        Result.Put('employee_name',
                   z_Mr_Natural_Persons.Take(i_Company_Id => i_Track.Company_Id, i_Person_Id => i_Track.Person_Id).Name);
        Result.Put('begin_time', to_char(r_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('end_time', to_char(r_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('input_time', to_char(r_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
        Result.Put('output_time', to_char(i_Track.Track_Datetime, Href_Pref.c_Time_Format_Minute));
        Result.Put('early_time',
                   Trunc(Htt_Util.Time_Diff(r_Timesheet.End_Time, i_Track.Track_Datetime) / 60));
      
        Mt_Fcm.Send(i_Company_Id => r_Timesheet.Company_Id, --
                    i_User_Id    => v_Manager_Id,
                    i_Data       => result);
      
        return;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Convert_Datetime
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number,
    i_Track_Time timestamp with time zone
  ) return date is
    v_Timezone Md_Timezones.Timezone_Code%type;
  begin
    v_Timezone := z_Md_Users.Take(i_Company_Id => i_Company_Id, i_User_Id => i_Person_Id).Timezone_Code;
  
    if v_Timezone is null then
      v_Timezone := Htt_Util.Load_Timezone(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
    end if;
  
    return Htt_Util.Timestamp_To_Date(i_Timestamp => i_Track_Time, i_Timezone => v_Timezone);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add(i_Track Htt_Tracks%rowtype) is
    r_Track          Htt_Tracks%rowtype := i_Track;
    r_Location       Htt_Locations%rowtype;
    r_Device         Htt_Devices%rowtype;
    r_Timesheet      Htt_Timesheets%rowtype;
    v_Device_Type_Id number;
    --------------------------------------------------
    Function Track_Exists return boolean is
      v_Dummy varchar2(1);
    begin
      if r_Track.Device_Id is not null then
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Device_Id = r_Track.Device_Id
           and q.Original_Type = r_Track.Original_Type;
      else
        select 'x'
          into v_Dummy
          from Htt_Tracks q
         where q.Company_Id = r_Track.Company_Id
           and q.Filial_Id = r_Track.Filial_Id
           and q.Track_Time = r_Track.Track_Time
           and q.Person_Id = r_Track.Person_Id
           and q.Original_Type = r_Track.Original_Type;
      end if;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  begin
    if r_Track.Location_Id is not null then
      r_Location := z_Htt_Locations.Load(i_Company_Id  => r_Track.Company_Id,
                                         i_Location_Id => r_Track.Location_Id);
    
      if r_Track.Latlng is null then
        r_Track.Latlng   := r_Location.Latlng;
        r_Track.Accuracy := r_Location.Accuracy;
      end if;
    end if;
  
    v_Device_Type_Id := Htt_Util.Device_Type_Id(i_Pcode => Htt_Pref.c_Pcode_Device_Type_Staff);
  
    if r_Track.Device_Id is not null then
      r_Device := z_Htt_Devices.Load(i_Company_Id => r_Track.Company_Id,
                                     i_Device_Id  => r_Track.Device_Id);
    
      r_Track.Track_Type := Nvl(r_Device.Restricted_Type, r_Track.Track_Type);
    end if;
  
    if r_Device.Ignore_Tracks = 'Y' then
      return;
    end if;
  
    if r_Device.Ignore_Images = 'Y' then
      r_Track.Photo_Sha := null;
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date    := Trunc(r_Track.Track_Datetime);
    r_Track.Is_Valid      := Nvl(r_Track.Is_Valid, 'Y');
    r_Track.Status        := Htt_Pref.c_Track_Status_Draft;
    r_Track.Original_Type := r_Track.Track_Type;
  
    if v_Device_Type_Id = r_Device.Device_Type_Id then
      if Hes_Util.Staff_Track_Settings(i_Company_Id => r_Track.Company_Id, --
       i_Filial_Id => r_Track.Filial_Id, --
       i_User_Id => r_Track.Person_Id).Track_Potential = 'Y' then
        r_Track.Trans_Output := 'Y';
      else
        r_Track.Trans_Output := 'N';
      end if;
    else
      r_Track.Trans_Output := Nvl(r_Device.Autogen_Outputs, 'N');
    end if;
  
    r_Track.Trans_Input := Nvl(r_Device.Autogen_Inputs, 'N');
    r_Track.Trans_Check := case
                             when r_Device.Only_Last_Restricted = 'Y' and
                                  r_Device.Restricted_Type in
                                  (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) then
                              'Y'
                             else
                              'N'
                           end;
  
    if Htt_Util.Schedule_Trim_Tracks(i_Company_Id => r_Track.Company_Id,
                                     i_Filial_Id  => r_Track.Filial_Id) = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => r_Track.Company_Id,
                                        i_Filial_Id      => r_Track.Filial_Id,
                                        i_Staff_Id       => Href_Util.Get_Primary_Staff_Id(i_Company_Id   => r_Track.Company_Id,
                                                                                           i_Filial_Id    => r_Track.Filial_Id,
                                                                                           i_Employee_Id  => r_Track.Person_Id,
                                                                                           i_Period_Begin => r_Track.Track_Date,
                                                                                           i_Period_End   => r_Track.Track_Date),
                                        i_Timesheet_Date => r_Track.Track_Date);
    
      if r_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Timesheet.Company_Id is null then
        return;
      end if;
    
      if r_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        r_Track.Track_Datetime := Greatest(Least(r_Track.Track_Datetime, r_Timesheet.End_Time),
                                           r_Timesheet.Begin_Time);
        r_Track.Track_Date     := Trunc(r_Track.Track_Date);
        r_Track.Track_Time     := cast(r_Track.Track_Datetime as timestamp with local time zone);
      end if;
    end if;
  
    if r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
       Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                    i_Filial_Id  => r_Track.Filial_Id,
                                    i_User_Id    => r_Track.Person_Id) then
      r_Track.Is_Valid := 'N';
    end if;
  
    if Track_Exists then
      return;
    end if;
  
    -- check if prohibited location
    if r_Track.Is_Valid = 'Y' and r_Track.Latlng is not null and
       r_Device.Device_Type_Id = Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Staff) and
       Htt_Util.Is_Prohibited(i_Company_Id => r_Track.Company_Id,
                              i_Filial_Id  => r_Track.Filial_Id,
                              i_Person_Id  => r_Track.Person_Id,
                              i_Latlng     => r_Track.Latlng) or r_Location.Prohibited = 'Y' then
      r_Track.Is_Valid := 'N';
    end if;
  
    if true or Htt_Util.Is_Track_Accepted_Period(i_Company_Id  => r_Track.Company_Id,
                                                 i_Filial_Id   => r_Track.Filial_Id,
                                                 i_Employee_Id => r_Track.Person_Id,
                                                 i_Period      => r_Track.Track_Date) = 'Y' then
      z_Htt_Tracks.Insert_Row(r_Track);
    
      if Md_Pref.c_Migr_Company_Id != i_Track.Company_Id then
        if r_Track.Is_Valid = 'Y' then
          Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                             i_Filial_Id      => r_Track.Filial_Id,
                             i_Track_Id       => r_Track.Track_Id,
                             i_Employee_Id    => r_Track.Person_Id,
                             i_Track_Datetime => r_Track.Track_Datetime,
                             i_Track_Type     => r_Track.Track_Type,
                             i_Trans_Input    => r_Track.Trans_Input,
                             i_Trans_Output   => r_Track.Trans_Output,
                             i_Trans_Check    => r_Track.Trans_Check);
        elsif r_Track.Mark_Type = Htt_Pref.c_Mark_Type_Auto and
              Invalid_Auto_Checkout_Enable(i_Company_Id => r_Track.Company_Id,
                                           i_Filial_Id  => r_Track.Filial_Id,
                                           i_User_Id    => r_Track.Person_Id) then
          Notify_Timesheet(i_Track => r_Track, i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
        end if;
      
      end if;
    else
      Htt_Core.Trash_Track_Insert(r_Track);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------    
  Procedure Change_Track_Type
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_New_Track_Type varchar2
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Track_Type not in
       (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output, Htt_Pref.c_Track_Type_Check) then
      Htt_Error.Raise_134(Htt_Util.t_Track_Type(r_Track.Track_Type));
    end if;
  
    if i_New_Track_Type not in
       (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output, Htt_Pref.c_Track_Type_Check) then
      Htt_Error.Raise_135(Htt_Util.t_Track_Type(i_New_Track_Type));
    end if;
  
    if r_Track.Track_Type = i_New_Track_Type then
      return;
    end if;
  
    z_Htt_Tracks.Update_One(i_Company_Id => r_Track.Company_Id,
                            i_Filial_Id  => r_Track.Filial_Id,
                            i_Track_Id   => r_Track.Track_Id,
                            i_Track_Type => Option_Varchar2(i_New_Track_Type));
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  
    Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                       i_Filial_Id      => r_Track.Filial_Id,
                       i_Track_Id       => r_Track.Track_Id,
                       i_Employee_Id    => r_Track.Person_Id,
                       i_Track_Datetime => r_Track.Track_Datetime,
                       i_Track_Type     => i_New_Track_Type,
                       i_Trans_Input    => r_Track.Trans_Input,
                       i_Trans_Output   => r_Track.Trans_Output,
                       i_Trans_Check    => r_Track.Trans_Check);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Valid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'Y' then
      Htt_Error.Raise_055(i_Track_Id);
    end if;
  
    r_Track.Track_Datetime := Convert_Datetime(i_Company_Id => r_Track.Company_Id,
                                               i_Filial_Id  => r_Track.Filial_Id,
                                               i_Person_Id  => r_Track.Person_Id,
                                               i_Track_Time => r_Track.Track_Time);
  
    r_Track.Track_Date := Trunc(r_Track.Track_Datetime);
  
    z_Htt_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                            i_Filial_Id      => i_Filial_Id,
                            i_Track_Id       => i_Track_Id,
                            i_Track_Datetime => Option_Date(r_Track.Track_Datetime),
                            i_Track_Date     => Option_Date(r_Track.Track_Date),
                            i_Is_Valid       => Option_Varchar2('Y'));
  
    Htt_Core.Track_Add(i_Company_Id     => r_Track.Company_Id,
                       i_Filial_Id      => r_Track.Filial_Id,
                       i_Track_Id       => r_Track.Track_Id,
                       i_Employee_Id    => r_Track.Person_Id,
                       i_Track_Datetime => r_Track.Track_Datetime,
                       i_Track_Type     => r_Track.Track_Type,
                       i_Trans_Input    => r_Track.Trans_Input,
                       i_Trans_Output   => r_Track.Trans_Output,
                       i_Trans_Check    => r_Track.Trans_Check);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Set_Invalid
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    if r_Track.Is_Valid = 'N' then
      Htt_Error.Raise_056(i_Track_Id);
    end if;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Is_Valid   => Option_Varchar2('N'));
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    r_Track Htt_Tracks%rowtype;
  begin
    r_Track := z_Htt_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Track_Id   => i_Track_Id);
  
    Htt_Core.Track_Delete(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Track_Id    => r_Track.Track_Id,
                          i_Employee_Id => r_Track.Person_Id);
  
    z_Htt_Tracks.Delete_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id);
  
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
  begin
    Htt_Core.Make_Trash_Tracks(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Person_Id  => i_Person_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Rt) is
    v_Track_Id number;
    v_Exists   varchar2(1) := 'Y';
  begin
    v_Track_Id := Htt_Util.Gps_Track_Id(i_Company_Id => i_Track.Company_Id,
                                        i_Filial_Id  => i_Track.Filial_Id,
                                        i_Person_Id  => i_Track.Person_Id,
                                        i_Track_Date => i_Track.Track_Date);
  
    if z_Htt_Gps_Track_Batches.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                          i_Filial_Id  => i_Track.Filial_Id,
                                          i_Track_Id   => v_Track_Id,
                                          i_Batch_Id   => i_Track.Batch_Id) then
      -- if batch saved then no need to resave it
      return;
    end if;
  
    if v_Track_Id is null then
      v_Track_Id := Htt_Next.Gps_Track_Id;
      v_Exists   := 'N';
    end if;
  
    if v_Exists = 'Y' then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = v_Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, i_Track.Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => v_Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, v_Track_Id, i_Track.Data);
    end if;
  
    -- gps track batches
    z_Htt_Gps_Track_Batches.Insert_One(i_Company_Id => i_Track.Company_Id,
                                       i_Filial_Id  => i_Track.Filial_Id,
                                       i_Track_Id   => v_Track_Id,
                                       i_Batch_Id   => i_Track.Batch_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gps_Track_Add(i_Track Htt_Pref.Gps_Track_Data_Rt) is
    v_Data blob;
    v_Text varchar2(4000);
  
    --------------------------------------------------
    Procedure Text_Append(i_Text varchar2) is
    begin
      v_Text := v_Text || i_Text || Htt_Pref.c_Gps_Track_Column_Delimiter;
    end;
  begin
    Text_Append(to_char(i_Track.Track_Time, 'hh24:mi:ss'));
    Text_Append(i_Track.Lat);
    Text_Append(i_Track.Lng);
    Text_Append(i_Track.Accuracy);
    Text_Append(i_Track.Provider);
  
    Dbms_Lob.Createtemporary(v_Data, false);
    Dbms_Lob.Open(v_Data, Dbms_Lob.Lob_Readwrite);
    Dbms_Lob.Writeappend(v_Data,
                         Length(v_Text) + 1,
                         Utl_Raw.Cast_To_Raw(v_Text || Htt_Pref.c_Gps_Track_Row_Delimiter));
  
    if z_Htt_Gps_Tracks.Exist_Lock(i_Company_Id => i_Track.Company_Id,
                                   i_Filial_Id  => i_Track.Filial_Id,
                                   i_Track_Id   => i_Track.Track_Id) then
      z_Htt_Gps_Tracks.Update_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Calculated => Option_Varchar2('N'));
    
      for r in (select *
                  from Htt_Gps_Track_Datas q
                 where q.Company_Id = i_Track.Company_Id
                   and q.Filial_Id = i_Track.Filial_Id
                   and q.Track_Id = i_Track.Track_Id
                   for update)
      loop
        Dbms_Lob.Append(r.Data, v_Data);
      end loop;
    else
      z_Htt_Gps_Tracks.Insert_One(i_Company_Id => i_Track.Company_Id,
                                  i_Filial_Id  => i_Track.Filial_Id,
                                  i_Track_Id   => i_Track.Track_Id,
                                  i_Person_Id  => i_Track.Person_Id,
                                  i_Track_Date => i_Track.Track_Date,
                                  i_Calculated => 'N');
    
      insert into Htt_Gps_Track_Datas
        (Company_Id, Filial_Id, Track_Id, Data)
      values
        (i_Track.Company_Id, i_Track.Filial_Id, i_Track.Track_Id, v_Data);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Save(i_Request_Kind Htt_Request_Kinds%rowtype) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
    r_Time_Kind    Htt_Time_Kinds%rowtype;
  
    v_Pcode  Htt_Request_Kinds.Pcode%type;
    v_Date   date := sysdate;
    v_Exists boolean := false;
  begin
    -- TODO add restriction on time_kind_id change
    -- make time_kind_id unchangeable
    -- or allow change to time kind with same plan_load
    -- maybe add timsheets regen after request_kind edit
    -- TODO: add calendar of production days
  
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Request_Kind.Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind.Request_Kind_Id,
                                      o_Row             => r_Request_Kind) then
      if r_Request_Kind.Pcode is not null then
        v_Pcode := r_Request_Kind.Pcode;
      
        if r_Request_Kind.Time_Kind_Id <> i_Request_Kind.Time_Kind_Id then
          Htt_Error.Raise_057(z_Htt_Time_Kinds.Load(i_Company_Id => r_Request_Kind.Company_Id, --
                              i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Name);
        end if;
      end if;
    
      v_Exists := true;
    end if;
  
    r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => i_Request_Kind.Company_Id,
                                         i_Time_Kind_Id => i_Request_Kind.Time_Kind_Id);
  
    if r_Time_Kind.Requestable = 'N' then
      Htt_Error.Raise_058(r_Time_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Init(p_Row                      => r_Request_Kind,
                             i_Company_Id               => i_Request_Kind.Company_Id,
                             i_Request_Kind_Id          => i_Request_Kind.Request_Kind_Id,
                             i_Name                     => i_Request_Kind.Name,
                             i_Time_Kind_Id             => i_Request_Kind.Time_Kind_Id,
                             i_Annually_Limited         => i_Request_Kind.Annually_Limited,
                             i_Day_Count_Type           => i_Request_Kind.Day_Count_Type,
                             i_User_Permitted           => i_Request_Kind.User_Permitted,
                             i_Allow_Unused_Time        => i_Request_Kind.Allow_Unused_Time,
                             i_Request_Restriction_Days => i_Request_Kind.Request_Restriction_Days,
                             i_State                    => i_Request_Kind.State,
                             i_Pcode                    => v_Pcode);
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request_Kind.Annual_Day_Limit := i_Request_Kind.Annual_Day_Limit;
      r_Request_Kind.Carryover_Policy := i_Request_Kind.Carryover_Policy;
    
      if r_Request_Kind.Carryover_Policy <> Htt_Pref.c_Carryover_Policy_Zero then
        if r_Request_Kind.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
          r_Request_Kind.Carryover_Cap_Days := i_Request_Kind.Carryover_Cap_Days;
        end if;
      
        r_Request_Kind.Carryover_Expires_Days := i_Request_Kind.Carryover_Expires_Days;
      end if;
    end if;
  
    z_Htt_Request_Kinds.Save_Row(r_Request_Kind);
  
    -- fix request kind accruals
    if v_Exists then
      for r in (select *
                  from Htt_Staff_Request_Kinds q
                 where q.Company_Id = i_Request_Kind.Company_Id
                   and q.Request_Kind_Id = i_Request_Kind.Request_Kind_Id)
      loop
        Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => r.Company_Id,
                                               i_Filial_Id       => r.Filial_Id,
                                               i_Staff_Id        => r.Staff_Id,
                                               i_Request_Kind_Id => r.Request_Kind_Id,
                                               i_Period          => v_Date);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Delete
  (
    i_Company_Id      number,
    i_Request_Kind_Id number
  ) is
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    if z_Htt_Request_Kinds.Exist_Lock(i_Company_Id      => i_Company_Id,
                                      i_Request_Kind_Id => i_Request_Kind_Id,
                                      o_Row             => r_Request_Kind) and
       r_Request_Kind.Pcode is not null then
      Htt_Error.Raise_059(r_Request_Kind.Name);
    end if;
  
    z_Htt_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                   i_Request_Kind_Id => i_Request_Kind_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Attach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Insert_Try(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Staff_Detach_Request_Kind
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number
  ) is
  begin
    z_Htt_Staff_Request_Kinds.Delete_One(i_Company_Id      => i_Company_Id,
                                         i_Filial_Id       => i_Filial_Id,
                                         i_Staff_Id        => i_Staff_Id,
                                         i_Request_Kind_Id => i_Request_Kind_Id);
  
    Htt_Core.Request_Kind_Accrual_Evaluate(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Helper_Save
  (
    i_Request     Htt_Requests%rowtype,
    i_Staff_Id    number,
    i_Only_Insert boolean := false
  ) is
    v_Begin date;
    v_End   date;
  begin
    v_Begin := Trunc(i_Request.Begin_Time);
    v_End   := Trunc(i_Request.End_Time);
  
    if not i_Only_Insert then
      delete Htt_Request_Helpers q
       where q.Company_Id = i_Request.Company_Id
         and q.Filial_Id = i_Request.Filial_Id
         and q.Request_Id = i_Request.Request_Id;
    end if;
  
    while v_Begin <= v_End
    loop
      z_Htt_Request_Helpers.Insert_One(i_Company_Id    => i_Request.Company_Id,
                                       i_Filial_Id     => i_Request.Filial_Id,
                                       i_Staff_Id      => i_Staff_Id,
                                       i_Interval_Date => v_Begin,
                                       i_Request_Id    => i_Request.Request_Id);
      v_Begin := v_Begin + 1;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Save(i_Request Htt_Requests%rowtype) is
    r_Request      Htt_Requests%rowtype;
    r_Request_Kind Htt_Request_Kinds%rowtype;
    v_Exists       boolean;
    v_Diff_Days    number;
    v_Plan_Load    varchar(1);
    v_Min_Length   number;
  begin
    if z_Htt_Requests.Exist_Lock(i_Company_Id => i_Request.Company_Id,
                                 i_Filial_Id  => i_Request.Filial_Id,
                                 i_Request_Id => i_Request.Request_Id,
                                 o_Row        => r_Request) then
      if r_Request.Status <> Htt_Pref.c_Request_Status_New then
        Htt_Error.Raise_060(i_Request_Status   => r_Request.Status,
                            i_Request_Kind_New => Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New));
      end if;
    
      if r_Request.Staff_Id <> i_Request.Staff_Id then
        Htt_Error.Raise_061(Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                 i_Filial_Id  => r_Request.Filial_Id,
                                                 i_Staff_Id   => r_Request.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Request.Company_Id := i_Request.Company_Id;
      r_Request.Filial_Id  := i_Request.Filial_Id;
      r_Request.Request_Id := i_Request.Request_Id;
      r_Request.Staff_Id   := i_Request.Staff_Id;
      r_Request.Status     := Htt_Pref.c_Request_Status_New;
      r_Request.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Request_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Request.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Request.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Request_Note_Limit);
    
      if v_Min_Length > Length(i_Request.Note) then
        Htt_Error.Raise_110(v_Min_Length);
      end if;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Request.Company_Id,
                                               i_Request_Kind_Id => i_Request.Request_Kind_Id);
  
    v_Plan_Load := z_Htt_Time_Kinds.Load(i_Company_Id => i_Request.Company_Id, i_Time_Kind_Id => r_Request_Kind.Time_Kind_Id).Plan_Load;
  
    if v_Plan_Load = Htt_Pref.c_Plan_Load_Extra then
      Htt_Error.Raise_081;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if v_Plan_Load = Htt_Pref.c_Plan_Load_Full and
         i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        Htt_Error.Raise_062(Array_Varchar2(Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Full_Day),
                                           Htt_Util.t_Request_Type(Htt_Pref.c_Request_Type_Multiple_Days)));
      end if;
    end if;
  
    v_Diff_Days := i_Request.End_Time - i_Request.Begin_Time;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if not (i_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day and v_Diff_Days > 0 and
          v_Diff_Days < 1 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day and v_Diff_Days = 0 or
          i_Request.Request_Type = Htt_Pref.c_Request_Type_Multiple_Days and v_Diff_Days >= 1) then
        Htt_Error.Raise_063(i_Request_Type      => i_Request.Request_Type,
                            i_Request_Type_Name => Htt_Util.t_Request_Type(i_Request.Request_Type));
      end if;
    end if;
  
    r_Request.Request_Kind_Id := i_Request.Request_Kind_Id;
    r_Request.Request_Type    := i_Request.Request_Type;
    r_Request.Begin_Time      := i_Request.Begin_Time;
    r_Request.End_Time        := i_Request.End_Time;
    r_Request.Note            := i_Request.Note;
  
    if r_Request_Kind.Annually_Limited = 'Y' then
      r_Request.Accrual_Kind := Nvl(i_Request.Accrual_Kind, Htt_Pref.c_Accrual_Kind_Plan);
    else
      r_Request.Accrual_Kind := null;
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      if r_Request_Kind.Request_Restriction_Days is not null then
        if Trunc(r_Request.Begin_Time) - Trunc(r_Request.Created_On) <
           r_Request_Kind.Request_Restriction_Days then
          Htt_Error.Raise_064(i_Restriction_Days => r_Request_Kind.Request_Restriction_Days,
                              i_Request_Begin    => Trunc(r_Request.Begin_Time),
                              i_Created_On       => Trunc(r_Request.Created_On));
        end if;
      end if;
    end if;
  
    Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                             i_Filial_Id    => r_Request.Filial_Id,
                                             i_Request_Id   => r_Request.Request_Id,
                                             i_Staff_Id     => r_Request.Staff_Id,
                                             i_Begin_Time   => r_Request.Begin_Time,
                                             i_End_Time     => r_Request.End_Time,
                                             i_Request_Type => r_Request.Request_Type);
  
    if Md_Pref.c_Migr_Company_Id != i_Request.Company_Id then
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    if v_Exists then
      z_Htt_Requests.Update_Row(r_Request);
      Request_Helper_Save(r_Request, i_Staff_Id => r_Request.Staff_Id);
    else
      r_Request.Barcode := Md_Core.Gen_Barcode(i_Table => Zt.Htt_Requests,
                                               i_Id    => r_Request.Request_Id);
    
      z_Htt_Requests.Insert_Row(r_Request);
    
      Request_Helper_Save(r_Request, --
                          i_Staff_Id    => r_Request.Staff_Id,
                          i_Only_Insert => true);
    
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
  begin
    Htt_Core.Gen_Timesheet_Requests(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Fix_Timesheet_Plan
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
  begin
    Htt_Core.Change_Timesheet_Plans(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status = Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_065(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Completed),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Denied)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_New),
                              i_Approved_By  => Option_Number(null),
                              i_Completed_By => Option_Number(null));
  
    Fix_Timesheet(i_Company_Id => i_Company_Id,
                  i_Filial_Id  => i_Filial_Id,
                  i_Request_Id => i_Request_Id);
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2,
    i_User_Id      number
  ) is
    r_Request          Htt_Requests%rowtype;
    v_Request_Settings Hes_Pref.Staff_Request_Manager_Approval_Rt := Hes_Util.Staff_Request_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                      i_Filial_Id  => i_Filial_Id,
                                                                                                                      i_User_Id    => i_User_Id);
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_066(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Approved),
                              i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Request_Settings.Request_Settings = 'Y' then
      Request_Complete(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Request_Id => i_Request_Id);
    else
      Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                           i_Filial_Id   => r_Request.Filial_Id,
                           i_Request_Id  => r_Request.Request_Id,
                           i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_067(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Htt_Util.Assert_Has_Intersection_Request(i_Company_Id   => r_Request.Company_Id,
                                               i_Filial_Id    => r_Request.Filial_Id,
                                               i_Request_Id   => r_Request.Request_Id,
                                               i_Staff_Id     => r_Request.Staff_Id,
                                               i_Begin_Time   => r_Request.Begin_Time,
                                               i_End_Time     => r_Request.End_Time,
                                               i_Request_Type => r_Request.Request_Type);
    
      Htt_Util.Assert_Request_Has_Available_Days(i_Company_Id         => r_Request.Company_Id,
                                                 i_Filial_Id          => r_Request.Filial_Id,
                                                 i_Staff_Id           => r_Request.Staff_Id,
                                                 i_Request_Id         => r_Request.Request_Id,
                                                 i_Request_Kind_Id    => r_Request.Request_Kind_Id,
                                                 i_Request_Begin_Time => r_Request.Begin_Time,
                                                 i_Request_End_Time   => r_Request.End_Time,
                                                 i_Accrual_Kind       => r_Request.Accrual_Kind);
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Completed),
                              i_Completed_By => Option_Number(Md_Env.User_Id));
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      Fix_Timesheet(i_Company_Id => i_Company_Id,
                    i_Filial_Id  => i_Filial_Id,
                    i_Request_Id => i_Request_Id);
    end if;
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Request_Id   number,
    i_Manager_Note varchar2 := null
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status not in (Htt_Pref.c_Request_Status_New, Htt_Pref.c_Request_Status_Approved) then
      Htt_Error.Raise_068(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New),
                                                               Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_Approved)));
    end if;
  
    z_Htt_Requests.Update_One(i_Company_Id   => i_Company_Id,
                              i_Filial_Id    => i_Filial_Id,
                              i_Request_Id   => i_Request_Id,
                              i_Manager_Note => Option_Varchar2(i_Manager_Note),
                              i_Status       => Option_Varchar2(Htt_Pref.c_Request_Status_Denied),
                              i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Request(i_Company_Id  => r_Request.Company_Id,
                         i_Filial_Id   => r_Request.Filial_Id,
                         i_Request_Id  => r_Request.Request_Id,
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Request_Change_Status);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    r_Request Htt_Requests%rowtype;
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    if r_Request.Status <> Htt_Pref.c_Request_Status_New then
      Htt_Error.Raise_069(i_Request_Id       => i_Request_Id,
                          i_Request_Status   => r_Request.Status,
                          i_Request_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Request_Status_New)));
    end if;
  
    z_Htt_Requests.Delete_One(i_Company_Id => i_Company_Id,
                              i_Filial_Id  => i_Filial_Id,
                              i_Request_Id => i_Request_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Change_Days_By_Calendar
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    v_Plan_Time_Limit number;
  begin
    for r in (select q.Staff_Id,
                     q.Change_Date,
                     q.Swapped_Date,
                     q.Plan_Time,
                     q.Day_Kind,
                     w.Preholiday_Time,
                     w.Preweekend_Time,
                     c.Monthly_Limit,
                     c.Daily_Limit,
                     w.Plan_Time       Plan_Time_Limit,
                     s.Name            Schedule_Name,
                     c.Name            Calendar_Name,
                     t.Schedule_Id,
                     Ch.Change_Kind
                from Htt_Change_Days q
                join Htt_Plan_Changes Ch
                  on Ch.Company_Id = q.Company_Id
                 and Ch.Filial_Id = q.Filial_Id
                 and Ch.Change_Id = q.Change_Id
                join Htt_Timesheets t
                  on t.Company_Id = q.Company_Id
                 and t.Filial_Id = q.Filial_Id
                 and t.Staff_Id = q.Staff_Id
                 and t.Timesheet_Date = q.Change_Date
                join Htt_Schedules s
                  on s.Company_Id = t.Company_Id
                 and s.Filial_Id = t.Filial_Id
                 and s.Schedule_Id = t.Schedule_Id
                join Htt_Calendars c
                  on c.Company_Id = t.Company_Id
                 and c.Filial_Id = t.Filial_Id
                 and c.Calendar_Id = t.Calendar_Id
                join Htt_Calendar_Week_Days w
                  on w.Company_Id = c.Company_Id
                 and w.Filial_Id = c.Filial_Id
                 and w.Calendar_Id = c.Calendar_Id
                 and w.Order_No = Htt_Util.Iso_Week_Day_No(t.Timesheet_Date)
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Change_Id = i_Change_Id)
    loop
      if r.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        if r.Monthly_Limit = 'Y' and Trunc(r.Change_Date, 'mon') <> Trunc(r.Swapped_Date, 'mon') then
          Htt_Error.Raise_119(i_Change_Date   => r.Change_Date,
                              i_Swapped_Date  => r.Swapped_Date,
                              i_Calendar_Name => r.Calendar_Name,
                              i_Schedule_Name => r.Schedule_Name);
        end if;
      end if;
    
      v_Plan_Time_Limit := Htt_Util.Get_Plan_Time(i_Company_Id      => i_Company_Id,
                                                  i_Filial_Id       => i_Filial_Id,
                                                  i_Staff_Id        => r.Staff_Id,
                                                  i_Date            => r.Change_Date,
                                                  i_Plan_Time       => r.Plan_Time_Limit,
                                                  i_Preholiday_Time => r.Preholiday_Time,
                                                  i_Preweekend_Time => r.Preweekend_Time);
    
      if r.Daily_Limit = 'Y' and r.Plan_Time / 60 > v_Plan_Time_Limit then
        Htt_Error.Raise_120(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    
      if r.Monthly_Limit = 'Y' and r.Change_Kind = Htt_Pref.c_Change_Kind_Change_Plan and
         not Fazo.Equal(r.Day_Kind,
                        Htt_Util.Schedule_Day_Kind(i_Company_Id    => i_Company_Id,
                                                   i_Filial_Id     => i_Filial_Id,
                                                   i_Staff_Id      => r.Staff_Id,
                                                   i_Schedule_Id   => r.Schedule_Id,
                                                   i_Schedule_Date => r.Change_Date)) then
        Htt_Error.Raise_121(i_Change_Date   => r.Change_Date,
                            i_Calendar_Name => r.Calendar_Name,
                            i_Schedule_Name => r.Schedule_Name);
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Change_Monthly_Limit
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change           Htt_Plan_Changes%rowtype;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
    v_Employee_Id      number;
    v_Change_Count     number;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Company_Id,
                                               i_Filial_Id  => i_Filial_Id,
                                               i_Staff_Id   => r_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Company_Id,
                                                                   i_Filial_Id  => i_Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    if v_Change_Day_Limit.Change_With_Monthly_Limit = 'Y' then
      for r in (select distinct Trunc(q.Change_Date, 'mon') Change_Month
                  from Htt_Plan_Changes t
                  join Htt_Change_Days q
                    on q.Company_Id = t.Company_Id
                   and q.Filial_Id = t.Filial_Id
                   and q.Change_Id = t.Change_Id
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Change_Id = i_Change_Id
                 order by 1)
      loop
        v_Change_Count := Htt_Util.Get_Staff_Change_Monthly_Count(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Change_Id  => i_Change_Id,
                                                                  i_Month      => r.Change_Month);
      
        if v_Change_Day_Limit.Change_Monthly_Limit < v_Change_Count then
          Htt_Error.Raise_133(z_Mr_Natural_Persons.Load(i_Company_Id => i_Company_Id, i_Person_Id => v_Employee_Id).Name,
                              r.Change_Month,
                              v_Change_Day_Limit.Change_Monthly_Limit,
                              v_Change_Count);
        end if;
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Save(i_Change Htt_Pref.Change_Rt) is
    r_Change           Htt_Plan_Changes%rowtype;
    r_Change_Day       Htt_Change_Days%rowtype;
    v_Change_Dates     Array_Date := Array_Date();
    v_Change_Day       Htt_Pref.Change_Day_Rt;
    v_Swapped_Date     date;
    v_Exists           boolean;
    v_Min_Length       number;
    v_Employee_Id      number;
    v_Change_Day_Limit Hes_Pref.Change_Day_Limit_Rt;
  
    -------------------------------------------------- 
    Procedure Prepare_Change_Day(p_Change_Date in out nocopy Htt_Change_Days%rowtype) is
    begin
      if p_Change_Date.Day_Kind in (Htt_Pref.c_Day_Kind_Rest,
                                    Htt_Pref.c_Day_Kind_Holiday,
                                    Htt_Pref.c_Day_Kind_Additional_Rest) or
         p_Change_Date.Day_Kind is null then
        p_Change_Date.Begin_Time       := null;
        p_Change_Date.End_Time         := null;
        p_Change_Date.Break_Enabled    := null;
        p_Change_Date.Break_Begin_Time := null;
        p_Change_Date.Break_End_Time   := null;
        p_Change_Date.Plan_Time        := null;
      
        if p_Change_Date.Day_Kind is not null then
          p_Change_Date.Plan_Time := 0;
        end if;
      else
        p_Change_Date.Break_Enabled := Nvl(p_Change_Date.Break_Enabled, 'N');
      
        if p_Change_Date.End_Time <= p_Change_Date.Begin_Time then
          p_Change_Date.End_Time := p_Change_Date.End_Time + 1;
        end if;
      
        if p_Change_Date.Break_Enabled = 'Y' then
          if p_Change_Date.Break_Begin_Time <= p_Change_Date.Begin_Time then
            p_Change_Date.Break_Begin_Time := p_Change_Date.Break_Begin_Time + 1;
          end if;
        
          if p_Change_Date.Break_End_Time <= p_Change_Date.Break_Begin_Time then
            p_Change_Date.Break_End_Time := p_Change_Date.Break_End_Time + 1;
          end if;
        else
          p_Change_Date.Break_Begin_Time := null;
          p_Change_Date.Break_End_Time   := null;
        end if;
      end if;
    end;
  begin
    if i_Change.Change_Days.Count = 0 then
      Htt_Error.Raise_070;
    end if;
  
    if Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                    i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                    i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note) = 'Y' then
      v_Min_Length := Md_Pref.Load(i_Company_Id => i_Change.Company_Id,
                                   i_Filial_Id  => Md_Pref.Filial_Head(i_Change.Company_Id),
                                   i_Code       => Href_Pref.c_Pref_Crs_Plan_Change_Note_Limit);
    
      if v_Min_Length > Length(i_Change.Note) then
        Htt_Error.Raise_109(v_Min_Length);
      end if;
    end if;
  
    if z_Htt_Plan_Changes.Exist_Lock(i_Company_Id => i_Change.Company_Id,
                                     i_Filial_Id  => i_Change.Filial_Id,
                                     i_Change_Id  => i_Change.Change_Id,
                                     o_Row        => r_Change) then
      if r_Change.Status <> Htt_Pref.c_Change_Status_New then
        Htt_Error.Raise_071(i_Change_Status   => r_Change.Status,
                            i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
      end if;
    
      if r_Change.Staff_Id <> i_Change.Staff_Id then
        Htt_Error.Raise_072(Href_Util.Staff_Name(i_Company_Id => r_Change.Company_Id,
                                                 i_Filial_Id  => r_Change.Filial_Id,
                                                 i_Staff_Id   => r_Change.Staff_Id));
      end if;
    
      v_Exists := true;
    else
      r_Change.Company_Id := i_Change.Company_Id;
      r_Change.Filial_Id  := i_Change.Filial_Id;
      r_Change.Change_Id  := i_Change.Change_Id;
      r_Change.Staff_Id   := i_Change.Staff_Id;
      r_Change.Status     := Htt_Pref.c_Change_Status_New;
      r_Change.Created_On := Current_Timestamp;
    
      v_Exists := false;
    end if;
  
    if i_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
      if mod(i_Change.Change_Days.Count, 2) = 1 then
        Htt_Error.Raise_073;
      end if;
    end if;
  
    r_Change.Change_Kind := i_Change.Change_Kind;
    r_Change.Note        := i_Change.Note;
  
    if v_Exists then
      z_Htt_Plan_Changes.Update_Row(r_Change);
    else
      z_Htt_Plan_Changes.Insert_Row(r_Change);
    end if;
  
    v_Employee_Id := Href_Util.Get_Employee_Id(i_Company_Id => i_Change.Company_Id,
                                               i_Filial_Id  => i_Change.Filial_Id,
                                               i_Staff_Id   => i_Change.Staff_Id);
  
    v_Change_Day_Limit := Hes_Util.Staff_Change_Day_Limit_Settings(i_Company_Id => i_Change.Company_Id,
                                                                   i_Filial_Id  => i_Change.Filial_Id,
                                                                   i_User_Id    => v_Employee_Id);
  
    v_Change_Dates.Extend(i_Change.Change_Days.Count);
  
    for i in 1 .. i_Change.Change_Days.Count
    loop
      v_Change_Day := i_Change.Change_Days(i);
      v_Change_Dates(i) := v_Change_Day.Change_Date;
    
      v_Swapped_Date := null;
      if r_Change.Change_Kind = Htt_Pref.c_Change_Kind_Swap then
        v_Swapped_Date := v_Change_Day.Swapped_Date;
      end if;
    
      if v_Change_Day_Limit.Change_With_Restriction_Days = 'Y' then
        if Trunc(Least(v_Change_Dates(i), Nvl(v_Swapped_Date, v_Change_Dates(i)))) -
           Trunc(r_Change.Created_On) < v_Change_Day_Limit.Change_Restriction_Days then
          Htt_Error.Raise_112(i_Restriction_Days => v_Change_Day_Limit.Change_Restriction_Days,
                              i_Change_Day       => Trunc(Least(v_Change_Dates(i),
                                                                Nvl(v_Swapped_Date, v_Change_Dates(i)))),
                              i_Created_On       => Trunc(r_Change.Created_On));
        end if;
      end if;
    
      r_Change_Day.Company_Id       := r_Change.Company_Id;
      r_Change_Day.Filial_Id        := r_Change.Filial_Id;
      r_Change_Day.Change_Id        := r_Change.Change_Id;
      r_Change_Day.Change_Date      := v_Change_Day.Change_Date;
      r_Change_Day.Swapped_Date     := v_Swapped_Date;
      r_Change_Day.Staff_Id         := r_Change.Staff_Id;
      r_Change_Day.Day_Kind         := v_Change_Day.Day_Kind;
      r_Change_Day.Begin_Time       := v_Change_Day.Begin_Time;
      r_Change_Day.End_Time         := v_Change_Day.End_Time;
      r_Change_Day.Break_Enabled    := v_Change_Day.Break_Enabled;
      r_Change_Day.Break_Begin_Time := v_Change_Day.Break_Begin_Time;
      r_Change_Day.Break_End_Time   := v_Change_Day.Break_End_Time;
      r_Change_Day.Plan_Time        := v_Change_Day.Plan_Time;
    
      Prepare_Change_Day(r_Change_Day);
    
      r_Change_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Change_Day.Day_Kind,
                                                        i_Begin_Time       => r_Change_Day.Begin_Time,
                                                        i_End_Time         => r_Change_Day.End_Time,
                                                        i_Break_Begin_Time => r_Change_Day.Break_Begin_Time,
                                                        i_Break_End_Time   => r_Change_Day.Break_End_Time);
      -- full time in seconds
      r_Change_Day.Full_Time := r_Change_Day.Full_Time * 60;
    
      z_Htt_Change_Days.Save_Row(r_Change_Day);
    end loop;
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    if v_Exists then
      delete from Htt_Change_Days Cd
       where Cd.Company_Id = r_Change.Company_Id
         and Cd.Filial_Id = r_Change.Filial_Id
         and Cd.Change_Id = r_Change.Change_Id
         and Cd.Change_Date not member of v_Change_Dates;
    end if;
  
    -- checking for monthly limit
    if v_Change_Day_Limit.Change_With_Monthly_Limit = 'Y' then
      Check_Change_Monthly_Limit(i_Company_Id => i_Change.Company_Id,
                                 i_Filial_Id  => i_Change.Filial_Id,
                                 i_Change_Id  => i_Change.Change_Id);
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    if not v_Exists then
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Delete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_074(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    z_Htt_Plan_Changes.Delete_One(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Change_Id  => i_Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Reset
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_075(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Completed),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Denied)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_New),
                                  i_Approved_By  => Option_Number(null),
                                  i_Completed_By => Option_Number(null));
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Change_Id  => i_Change_Id);
    end if;
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Approve
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null,
    i_User_Id      number
  ) is
    r_Change          Htt_Plan_Changes%rowtype;
    v_Change_Settings Hes_Pref.Staff_Change_Manager_Approval_Rt := Hes_Util.Staff_Change_Manager_Approval_Settings(i_Company_Id => i_Company_Id,
                                                                                                                   i_Filial_Id  => i_Filial_Id,
                                                                                                                   i_User_Id    => i_User_Id);
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status <> Htt_Pref.c_Change_Status_New then
      Htt_Error.Raise_076(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_New)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Approved),
                                  i_Approved_By  => Option_Number(Md_Env.User_Id));
  
    if v_Change_Settings.Change_Settings = 'Y' then
      Change_Complete(i_Company_Id => i_Company_Id,
                      i_Filial_Id  => i_Filial_Id,
                      i_Change_Id  => i_Change_Id);
    else
      Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                                i_Filial_Id   => r_Change.Filial_Id,
                                i_Change_Id   => r_Change.Change_Id,
                                i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Manager_Approval);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Complete
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_077(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    Htt_Util.Assert_Has_Approved_Plan_Change(i_Company_Id => r_Change.Company_Id,
                                             i_Filial_Id  => r_Change.Filial_Id,
                                             i_Staff_Id   => r_Change.Staff_Id,
                                             i_Change_Id  => r_Change.Change_Id);
  
    -- checking for monthly limit
    Check_Change_Monthly_Limit(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Change_Id  => i_Change_Id);
  
    Check_Change_Days_By_Calendar(i_Company_Id => r_Change.Company_Id,
                                  i_Filial_Id  => r_Change.Filial_Id,
                                  i_Change_Id  => r_Change.Change_Id);
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Completed),
                                  i_Completed_By => Option_Number(Md_Env.User_Id));
  
    Fix_Timesheet_Plan(i_Company_Id => i_Company_Id,
                       i_Filial_Id  => i_Filial_Id,
                       i_Change_Id  => i_Change_Id);
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Deny
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Change_Id    number,
    i_Manager_Note varchar2 := null
  ) is
    r_Change Htt_Plan_Changes%rowtype;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    if r_Change.Status not in (Htt_Pref.c_Change_Status_New, Htt_Pref.c_Change_Status_Approved) then
      Htt_Error.Raise_078(i_Change_Id       => i_Change_Id,
                          i_Change_Status   => r_Change.Status,
                          i_Change_Statuses => Array_Varchar2(Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_New),
                                                              Htt_Util.t_Request_Status(Htt_Pref.c_Change_Status_Approved)));
    end if;
  
    z_Htt_Plan_Changes.Update_One(i_Company_Id   => i_Company_Id,
                                  i_Filial_Id    => i_Filial_Id,
                                  i_Change_Id    => i_Change_Id,
                                  i_Manager_Note => Option_Varchar2(i_Manager_Note),
                                  i_Status       => Option_Varchar2(Htt_Pref.c_Change_Status_Denied),
                                  i_Approved_By  => Option_Number(null));
  
    Notify_Staff_Plan_Changes(i_Company_Id  => r_Change.Company_Id,
                              i_Filial_Id   => r_Change.Filial_Id,
                              i_Change_Id   => r_Change.Change_Id,
                              i_Notify_Type => Hes_Pref.c_Pref_Nt_Plan_Change_Status_Change);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Day_Weights_Save(i_Change_Day_Weights Htt_Pref.Change_Day_Weights) is
    r_Change       Htt_Plan_Changes%rowtype;
    r_Change_Day   Htt_Change_Days%rowtype;
    v_Weight       Htt_Pref.Time_Weight_Rt;
    v_Begin_Minute number;
    v_End_Minute   number;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Change_Day_Weights.Company_Id,
                                             i_Filial_Id  => i_Change_Day_Weights.Filial_Id,
                                             i_Change_Id  => i_Change_Day_Weights.Change_Id);
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Htt_Error.Raise_132(r_Change.Change_Id);
    end if;
  
    r_Change_Day := z_Htt_Change_Days.Load(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                           i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                           i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                           i_Change_Date => i_Change_Day_Weights.Change_Date,
                                           i_Change_Id   => i_Change_Day_Weights.Change_Id);
  
    if r_Change_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Work or r_Change_Day.Swapped_Date is not null then
      return;
    end if;
  
    -- delete old weight
    delete Htt_Change_Day_Weights q
     where q.Company_Id = i_Change_Day_Weights.Company_Id
       and q.Filial_Id = i_Change_Day_Weights.Filial_Id
       and q.Staff_Id = i_Change_Day_Weights.Staff_Id
       and q.Change_Date = i_Change_Day_Weights.Change_Date
       and q.Change_Id = i_Change_Day_Weights.Change_Id;
  
    v_Begin_Minute := (r_Change_Day.Begin_Time - Trunc(r_Change_Day.Change_Date)) * 1440;
    v_End_Minute   := (r_Change_Day.End_Time - Trunc(r_Change_Day.Change_Date)) * 1440;
  
    for i in 1 .. i_Change_Day_Weights.Weights.Count
    loop
      v_Weight := i_Change_Day_Weights.Weights(i);
    
      if v_Weight.Begin_Time < v_Begin_Minute then
        v_Weight.Begin_Time := v_Weight.Begin_Time + 1440;
        v_Weight.End_Time   := v_Weight.End_Time + 1440;
      end if;
    
      if v_Weight.End_Time < v_Weight.Begin_Time then
        v_Weight.End_Time := v_Weight.End_Time + 1440;
      end if;
    
      if v_Weight.Begin_Time = v_Weight.End_Time then
        Htt_Error.Raise_129(i_Part_No => i);
      end if;
    
      if v_Weight.End_Time > v_End_Minute then
        Htt_Error.Raise_130(i_Part_No         => i,
                            i_Begin_Time_Text => Htt_Util.To_Time(mod(v_Begin_Minute, 1440)),
                            i_End_Time_Text   => Htt_Util.To_Time(mod(v_End_Minute, 1440)));
      end if;
    
      z_Htt_Change_Day_Weights.Insert_One(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                          i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                          i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                          i_Change_Id   => i_Change_Day_Weights.Change_Id,
                                          i_Change_Date => i_Change_Day_Weights.Change_Date,
                                          i_Begin_Time  => v_Weight.Begin_Time,
                                          i_End_Time    => v_Weight.End_Time,
                                          i_Weight      => v_Weight.Weight);
    end loop;
  
    Htt_Util.Assert_Change_Day_Weights(i_Company_Id  => i_Change_Day_Weights.Company_Id,
                                       i_Filial_Id   => i_Change_Day_Weights.Filial_Id,
                                       i_Staff_Id    => i_Change_Day_Weights.Staff_Id,
                                       i_Change_Date => i_Change_Day_Weights.Change_Date,
                                       i_Change_Id   => i_Change_Day_Weights.Change_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
  begin
    Htt_Core.Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Schedule_Id => i_Schedule_Id,
                                  i_Dates       => i_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distances
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Total_Distance number;
  begin
    for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                 from Htt_Gps_Tracks q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id = i_Filial_Id
                  and q.Calculated = 'N')
    loop
      v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => i_Company_Id,
                                                           i_Filial_Id  => i_Filial_Id,
                                                           i_Person_Id  => Gt.Person_Id,
                                                           i_Track_Date => Gt.Track_Date);
    
      z_Htt_Gps_Tracks.Update_One(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Track_Id       => Gt.Track_Id,
                                  i_Total_Distance => Option_Number(v_Total_Distance),
                                  i_Calculated     => Option_Varchar2('Y'));
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Save(i_Registry Htt_Pref.Schedule_Registry_Rt) is
    r_Registry      Htt_Schedule_Registries%rowtype;
    r_Day           Htt_Unit_Schedule_Days%rowtype;
    v_Unit          Htt_Pref.Registry_Unit_Rt;
    v_Unit_Day      Htt_Pref.Schedule_Day_Rt;
    v_Used_Unit_Ids Array_Number := Array_Number();
  
    v_Old_Calendar_Id    number;
    v_Calendar_Changed   varchar2(1) := 'N';
    v_Holidays_Changed   varchar2(1) := 'N';
    v_Nonworking_Changed varchar2(1) := 'N';
  
    v_Company_Id number := i_Registry.Company_Id;
    v_Filial_Id  number := i_Registry.Filial_Id;
  
    v_Staff_Name varchar2(500 char);
    v_Robot_Name varchar2(500 char);
  
    --------------------------------------------------
    Procedure Save_Registry is
      v_Exists boolean;
    begin
      if z_Htt_Schedule_Registries.Exist_Lock(i_Company_Id  => i_Registry.Company_Id,
                                              i_Filial_Id   => i_Registry.Filial_Id,
                                              i_Registry_Id => i_Registry.Registry_Id,
                                              o_Row         => r_Registry) then
        if r_Registry.Posted = 'Y' then
          Htt_Error.Raise_083;
        end if;
      
        if r_Registry.Registry_Kind <> i_Registry.Registry_Kind then
          Htt_Error.Raise_084;
        end if;
      
        v_Old_Calendar_Id := r_Registry.Calendar_Id;
      
        if not Fazo.Equal(v_Old_Calendar_Id, i_Registry.Calendar_Id) then
          v_Calendar_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Holidays <> i_Registry.Take_Holidays then
          v_Holidays_Changed := 'Y';
        end if;
      
        if v_Calendar_Changed = 'Y' or v_Old_Calendar_Id = i_Registry.Calendar_Id and
           r_Registry.Take_Nonworking <> i_Registry.Take_Nonworking then
          v_Nonworking_Changed := 'Y';
        end if;
      
        v_Exists := true;
      else
        r_Registry.Company_Id    := i_Registry.Company_Id;
        r_Registry.Filial_Id     := i_Registry.Filial_Id;
        r_Registry.Registry_Id   := i_Registry.Registry_Id;
        r_Registry.Registry_Kind := i_Registry.Registry_Kind;
        r_Registry.Schedule_Kind := i_Registry.Schedule_Kind;
      
        v_Exists := false;
      end if;
    
      r_Registry.Registry_Date             := i_Registry.Registry_Date;
      r_Registry.Registry_Number           := i_Registry.Registry_Number;
      r_Registry.Month                     := i_Registry.Month;
      r_Registry.Division_Id               := i_Registry.Division_Id;
      r_Registry.Note                      := i_Registry.Note;
      r_Registry.Posted                    := 'N';
      r_Registry.Shift                     := i_Registry.Shift;
      r_Registry.Input_Acceptance          := i_Registry.Input_Acceptance;
      r_Registry.Output_Acceptance         := i_Registry.Output_Acceptance;
      r_Registry.Track_Duration            := i_Registry.Track_Duration;
      r_Registry.Count_Late                := i_Registry.Count_Late;
      r_Registry.Count_Lack                := i_Registry.Count_Lack;
      r_Registry.Count_Early               := i_Registry.Count_Early;
      r_Registry.Count_Free                := i_Registry.Count_Free;
      r_Registry.Allowed_Late_Time         := i_Registry.Allowed_Late_Time;
      r_Registry.Allowed_Early_Time        := i_Registry.Allowed_Early_Time;
      r_Registry.Begin_Late_Time           := i_Registry.Begin_Late_Time;
      r_Registry.End_Early_Time            := i_Registry.End_Early_Time;
      r_Registry.Calendar_Id               := i_Registry.Calendar_Id;
      r_Registry.Take_Holidays             := i_Registry.Take_Holidays;
      r_Registry.Take_Nonworking           := i_Registry.Take_Nonworking;
      r_Registry.Take_Additional_Rest_Days := i_Registry.Take_Additional_Rest_Days;
      r_Registry.Gps_Turnout_Enabled       := Nvl(i_Registry.Gps_Turnout_Enabled, 'N');
      r_Registry.Gps_Use_Location          := Nvl(i_Registry.Gps_Use_Location, 'N');
      r_Registry.Gps_Max_Interval          := i_Registry.Gps_Max_Interval;
    
      if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
        if r_Registry.Track_Duration * 60 > Htt_Pref.c_Max_Worktime_Length then
          Htt_Error.Raise_108;
        end if;
      
        if i_Registry.Advanced_Setting = 'Y' then
          Htt_Error.Raise_117;
        end if;
      
        r_Registry.Shift             := 0;
        r_Registry.Input_Acceptance  := r_Registry.Track_Duration;
        r_Registry.Output_Acceptance := r_Registry.Track_Duration;
      
        r_Registry.Count_Late  := 'N';
        r_Registry.Count_Early := 'N';
        r_Registry.Count_Lack  := 'N';
        r_Registry.Count_Free  := 'N';
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      elsif r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
        r_Registry.Shift             := null;
        r_Registry.Input_Acceptance  := null;
        r_Registry.Output_Acceptance := null;
        r_Registry.Track_Duration    := Htt_Pref.c_Max_Track_Duration / 60;
      
        r_Registry.Gps_Turnout_Enabled := 'N';
      end if;
    
      if r_Registry.Gps_Turnout_Enabled = 'N' then
        r_Registry.Gps_Use_Location := 'N';
        r_Registry.Gps_Max_Interval := null;
      end if;
    
      if v_Exists then
        z_Htt_Schedule_Registries.Update_Row(r_Registry);
      else
        if r_Registry.Registry_Number is null then
          r_Registry.Registry_Number := Md_Core.Gen_Number(i_Company_Id => r_Registry.Company_Id,
                                                           i_Filial_Id  => r_Registry.Filial_Id,
                                                           i_Table      => Zt.Htt_Schedule_Registries,
                                                           i_Column     => z.Registry_Number);
        end if;
      
        z_Htt_Schedule_Registries.Insert_Row(r_Registry);
      end if;
    end;
  
  begin
    -- save registry start
    Save_Registry;
  
    for i in 1 .. i_Registry.Units.Count
    loop
      v_Unit := i_Registry.Units(i);
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff and
         (v_Unit.Robot_Id is not null or v_Unit.Staff_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_086;
      end if;
    
      if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot and
         (v_Unit.Staff_Id is not null or v_Unit.Robot_Id is null) then
        -- todo: error message shows rownum
        Htt_Error.Raise_087;
      end if;
    
      z_Htt_Registry_Units.Save_One(i_Company_Id      => i_Registry.Company_Id,
                                    i_Filial_Id       => i_Registry.Filial_Id,
                                    i_Unit_Id         => v_Unit.Unit_Id,
                                    i_Registry_Id     => i_Registry.Registry_Id,
                                    i_Staff_Id        => v_Unit.Staff_Id,
                                    i_Robot_Id        => v_Unit.Robot_Id,
                                    i_Monthly_Minutes => v_Unit.Monthly_Minutes,
                                    i_Monthly_Days    => v_Unit.Monthly_Days);
    
      -- todo: assert v_unit.unit_days must be full month
    
      for k in 1 .. v_Unit.Unit_Days.Count
      loop
        v_Unit_Day := v_Unit.Unit_Days(k);
      
        if r_Registry.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
          v_Unit_Day.Begin_Time    := 0;
          v_Unit_Day.End_Time      := 0;
          v_Unit_Day.Break_Enabled := 'N';
        end if;
      
        -- todo: comment
        -- check month
        if Trunc(v_Unit_Day.Schedule_Date, 'mon') <> i_Registry.Month then
          if i_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            v_Staff_Name := z_Md_Persons.Load(i_Company_Id => v_Company_Id, i_Person_Id => z_Href_Staffs.Load( --
                            i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Staff_Id => v_Unit.Staff_Id).Employee_Id).Name;
          
            Htt_Error.Raise_085(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Staff_Name    => v_Staff_Name);
          else
            v_Robot_Name := z_Mrf_Robots.Load(i_Company_Id => v_Company_Id, --
                            i_Filial_Id => v_Filial_Id, --
                            i_Robot_Id => v_Unit.Robot_Id).Name;
            Htt_Error.Raise_099(i_Chosen_Month  => i_Registry.Month,
                                i_Schedule_Date => v_Unit_Day.Schedule_Date,
                                i_Robot_Name    => v_Robot_Name);
          end if;
        end if;
      
        r_Day := null;
      
        r_Day.Company_Id    := i_Registry.Company_Id;
        r_Day.Filial_Id     := i_Registry.Filial_Id;
        r_Day.Unit_Id       := v_Unit.Unit_Id;
        r_Day.Schedule_Date := v_Unit_Day.Schedule_Date;
        r_Day.Day_Kind      := v_Unit_Day.Day_Kind;
      
        if v_Unit_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
          r_Day.Begin_Time := r_Day.Schedule_Date +
                              Numtodsinterval(v_Unit_Day.Begin_Time, 'minute');
          r_Day.End_Time   := r_Day.Schedule_Date + --
                              Numtodsinterval(v_Unit_Day.End_Time, 'minute');
        
          if r_Day.End_Time <= r_Day.Begin_Time then
            r_Day.End_Time := r_Day.End_Time + 1;
          end if;
        
          r_Day.Break_Enabled := v_Unit_Day.Break_Enabled;
        
          if v_Unit_Day.Break_Enabled = 'Y' then
            r_Day.Break_Begin_Time := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_Begin_Time, 'minute');
            r_Day.Break_End_Time   := r_Day.Schedule_Date +
                                      Numtodsinterval(v_Unit_Day.Break_End_Time, 'minute');
          
            if r_Day.Break_Begin_Time <= r_Day.Begin_Time then
              r_Day.Break_Begin_Time := r_Day.Break_Begin_Time + 1;
            end if;
          
            if r_Day.Break_End_Time <= r_Day.Break_Begin_Time then
              r_Day.Break_End_Time := r_Day.Break_End_Time + 1;
            end if;
          end if;
        
          r_Day.Full_Time := Htt_Util.Calc_Full_Time(i_Day_Kind         => r_Day.Day_Kind,
                                                     i_Begin_Time       => r_Day.Begin_Time,
                                                     i_End_Time         => r_Day.End_Time,
                                                     i_Break_Begin_Time => r_Day.Break_Begin_Time,
                                                     i_Break_End_Time   => r_Day.Break_End_Time);
        
          r_Day.Plan_Time := v_Unit_Day.Plan_Time;
        else
          r_Day.Full_Time := 0;
          r_Day.Plan_Time := 0;
        end if;
      
        r_Day.Shift_Begin_Time := r_Day.Schedule_Date + Numtodsinterval(r_Registry.Shift, 'minute');
        r_Day.Shift_End_Time   := r_Day.Shift_Begin_Time + Numtodsinterval(86400, 'second');
        r_Day.Input_Border     := r_Day.Shift_Begin_Time -
                                  Numtodsinterval(r_Registry.Input_Acceptance, 'minute');
        r_Day.Output_Border    := r_Day.Shift_End_Time +
                                  Numtodsinterval(r_Registry.Output_Acceptance, 'minute');
      
        z_Htt_Unit_Schedule_Days.Save_Row(r_Day);
      end loop;
    
      Fazo.Push(v_Used_Unit_Ids, v_Unit.Unit_Id);
    end loop;
  
    -- delete unnecessary rows
    delete Htt_Registry_Units p
     where p.Company_Id = i_Registry.Company_Id
       and p.Filial_Id = i_Registry.Filial_Id
       and p.Registry_Id = i_Registry.Registry_Id
       and p.Unit_Id not member of v_Used_Unit_Ids;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_088;
    end if;
  
    z_Htt_Schedule_Registries.Delete_One(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Registry_Id => i_Registry_Id);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Schedule_Registry_Post
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
    -------------------------------------------------- 
    Procedure Check_Same_Date
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Registry_Id number
    ) is
      v_Staff_Id number;
      v_Robot_Id number;
    begin
      -- todo: optimize query
      select q.Staff_Id, q.Robot_Id
        into v_Staff_Id, v_Robot_Id
        from Htt_Registry_Units q
        join Htt_Schedule_Registries d
          on d.Company_Id = q.Company_Id
         and d.Filial_Id = q.Filial_Id
         and d.Registry_Id = q.Registry_Id
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id <> i_Registry_Id
         and d.Posted = 'Y'
         and exists (select 1
                from Htt_Registry_Units r
                join Htt_Schedule_Registries s
                  on s.Company_Id = r.Company_Id
                 and s.Filial_Id = r.Filial_Id
                 and s.Registry_Id = r.Registry_Id
               where r.Company_Id = q.Company_Id
                 and r.Filial_Id = q.Filial_Id
                 and s.Month = d.Month
                 and (r.Staff_Id = q.Staff_Id or r.Robot_Id = q.Robot_Id)
                 and r.Registry_Id = i_Registry_Id)
         and Rownum = 1;
    
      if v_Staff_Id is not null then
        Htt_Error.Raise_096(Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                 i_Filial_Id  => i_Filial_Id,
                                                 i_Staff_Id   => v_Staff_Id));
      end if;
      if v_Robot_Id is not null then
        Htt_Error.Raise_097(z_Mrf_Robots.Take( --
                            i_Company_Id => i_Company_Id, --
                            i_Filial_Id => i_Filial_Id, --
                            i_Robot_Id => v_Robot_Id).Name);
      end if;
    exception
      when No_Data_Found then
        null;
    end;
  
    --------------------------------------------------
    Procedure Swap_Staff_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Staff_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Staff_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Staff_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Swap_Robot_Schedule_Day
    (
      p_Rest_Day in out nocopy Htt_Robot_Schedule_Days%rowtype,
      p_Work_Day in out nocopy Htt_Robot_Schedule_Days%rowtype
    ) is
      r_Day           Htt_Robot_Schedule_Days%rowtype := p_Rest_Day;
      v_Swap_Distance number;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
    --------------------------------------------------
    Procedure Load_Calendar_Days is
      v_Unit_Ids                   Array_Number;
      v_Swappable                  boolean := false;
      r_Staff_Schedule_Date        Htt_Staff_Schedule_Days%rowtype;
      r_Staff_Schedule_Swaped_Date Htt_Staff_Schedule_Days%rowtype;
      r_Robot_Schedule_Date        Htt_Robot_Schedule_Days%rowtype;
      r_Robot_Schedule_Swaped_Date Htt_Robot_Schedule_Days%rowtype;
    begin
      select q.Unit_Id
        bulk collect
        into v_Unit_Ids
        from Htt_Registry_Units q
       where q.Company_Id = r_Registry.Company_Id
         and q.Filial_Id = r_Registry.Filial_Id
         and q.Registry_Id = r_Registry.Registry_Id;
    
      for r in (select *
                  from Htt_Calendar_Days q
                 where q.Company_Id = r_Registry.Company_Id
                   and q.Filial_Id = r_Registry.Filial_Id
                   and q.Calendar_Id = r_Registry.Calendar_Id
                   and Trunc(q.Calendar_Date, 'mon') = r_Registry.Month
                   and (q.Swapped_Date is null or --
                       Trunc(q.Swapped_Date, 'mon') = r_Registry.Month))
      loop
        for i in 1 .. v_Unit_Ids.Count
        loop
          if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
            r_Staff_Schedule_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Staff_Schedule_Date.Begin_Time       := null;
              r_Staff_Schedule_Date.End_Time         := null;
              r_Staff_Schedule_Date.Break_Enabled    := null;
              r_Staff_Schedule_Date.Break_Begin_Time := null;
              r_Staff_Schedule_Date.Break_End_Time   := null;
              r_Staff_Schedule_Date.Full_Time        := 0;
              r_Staff_Schedule_Date.Plan_Time        := 0;
              r_Staff_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Staff_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Staff_Schedule_Swaped_Date := Htt_Util.Get_Staff_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Staff_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Staff_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Swaped_Date,
                                          p_Work_Day => r_Staff_Schedule_Date);
                else
                  Swap_Staff_Schedule_Day(p_Rest_Day => r_Staff_Schedule_Date,
                                          p_Work_Day => r_Staff_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Staff_Schedule_Days.Save_Row(r_Staff_Schedule_Date);
          else
            r_Robot_Schedule_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                     i_Filial_Id  => r_Registry.Filial_Id,
                                                                     i_Unit_Id    => v_Unit_Ids(i),
                                                                     i_Date       => r.Calendar_Date);
          
            if r_Registry.Take_Holidays = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
               r_Registry.Take_Additional_Rest_Days = 'Y' and
               r.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
              r_Robot_Schedule_Date.Begin_Time       := null;
              r_Robot_Schedule_Date.End_Time         := null;
              r_Robot_Schedule_Date.Break_Enabled    := null;
              r_Robot_Schedule_Date.Break_Begin_Time := null;
              r_Robot_Schedule_Date.Break_End_Time   := null;
              r_Robot_Schedule_Date.Full_Time        := 0;
              r_Robot_Schedule_Date.Plan_Time        := 0;
              r_Robot_Schedule_Date.Day_Kind         := r.Day_Kind;
            elsif r_Registry.Take_Nonworking = 'Y' and r.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking then
              r_Robot_Schedule_Date.Day_Kind := r.Day_Kind;
            elsif r.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              r_Robot_Schedule_Swaped_Date := Htt_Util.Get_Robot_Schedule_Day(i_Company_Id => r_Registry.Company_Id,
                                                                              i_Filial_Id  => r_Registry.Filial_Id,
                                                                              i_Unit_Id    => v_Unit_Ids(i),
                                                                              i_Date       => r.Swapped_Date);
            
              v_Swappable := r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Robot_Schedule_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_Robot_Schedule_Swaped_Date.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Swaped_Date,
                                          p_Work_Day => r_Robot_Schedule_Date);
                else
                  Swap_Robot_Schedule_Day(p_Rest_Day => r_Robot_Schedule_Date,
                                          p_Work_Day => r_Robot_Schedule_Swaped_Date);
                end if;
              
                z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Swaped_Date);
              end if;
            end if;
          
            z_Htt_Robot_Schedule_Days.Save_Row(r_Robot_Schedule_Date);
          end if;
        end loop;
      end loop;
    end;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Posted = 'Y' then
      -- todo: error message fix
      Htt_Error.Raise_093;
    end if;
  
    Check_Same_Date(i_Company_Id  => i_Company_Id,
                    i_Filial_Id   => i_Filial_Id,
                    i_Registry_Id => r_Registry.Registry_Id);
  
    r_Registry.Posted := 'Y';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      insert into Htt_Staff_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Staff_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Staff_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      insert into Htt_Robot_Schedule_Days Sd
        (Sd.Company_Id,
         Sd.Filial_Id,
         Sd.Robot_Id,
         Sd.Schedule_Date,
         Sd.Registry_Id,
         Sd.Unit_Id,
         Sd.Day_Kind,
         Sd.Begin_Time,
         Sd.End_Time,
         Sd.Break_Enabled,
         Sd.Break_Begin_Time,
         Sd.Break_End_Time,
         Sd.Full_Time,
         Sd.Plan_Time,
         Sd.Shift_Begin_Time,
         Sd.Shift_End_Time,
         Sd.Input_Border,
         Sd.Output_Border)
        select g.Company_Id,
               g.Filial_Id,
               t.Robot_Id,
               g.Schedule_Date,
               t.Registry_Id,
               g.Unit_Id,
               g.Day_Kind,
               g.Begin_Time,
               g.End_Time,
               g.Break_Enabled,
               g.Break_Begin_Time,
               g.Break_End_Time,
               g.Full_Time,
               g.Plan_Time,
               g.Shift_Begin_Time,
               g.Shift_End_Time,
               g.Input_Border,
               g.Output_Border
          from Htt_Registry_Units t
          join Htt_Unit_Schedule_Days g
            on g.Company_Id = t.Company_Id
           and g.Filial_Id = t.Filial_Id
           and g.Unit_Id = t.Unit_Id
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Registry_Id = r_Registry.Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    if r_Registry.Calendar_Id is not null then
      Load_Calendar_Days;
    end if;
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    else
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => r_Registry.Company_Id,
                                            i_Filial_Id  => r_Registry.Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    end if;
  
    Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                  i_Filial_Id   => i_Filial_Id,
                                  i_Registry_Id => i_Registry_Id);
  
    Htt_Util.Check_Schedule_By_Calendar(i_Company_Id  => r_Registry.Company_Id,
                                        i_Filial_Id   => r_Registry.Filial_Id,
                                        i_Schedule_Id => v_Schedule_Id,
                                        i_Calendar_Id => r_Registry.Calendar_Id,
                                        i_Year_Begin  => Trunc(r_Registry.Month, 'year'),
                                        i_Registry_Id => r_Registry.Registry_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Schedule_Registry_Unpost
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number,
    i_Repost      boolean
  ) is
    r_Registry Htt_Schedule_Registries%rowtype;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    r_Registry.Posted := 'N';
  
    z_Htt_Schedule_Registries.Update_Row(r_Registry);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      delete Htt_Staff_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      delete Htt_Robot_Schedule_Days q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Registry_Id = i_Registry_Id;
    else
      b.Raise_Not_Implemented;
    end if;
  
    -- when repost this function runs into post function
    if not i_Repost then
      Htt_Core.Gen_Individual_Dates(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Registry_Id => i_Registry_Id);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Save(i_Server Htt_Acms_Servers%rowtype) is
    r_Server      Htt_Acms_Servers%rowtype;
    v_Secret_Code varchar2(4000);
  begin
    if not z_Htt_Acms_Servers.Exist_Lock(i_Server_Id => i_Server.Server_Id, --
                                         o_Row       => r_Server) then
    
      v_Secret_Code := i_Server.Url || Sys_Guid() || i_Server.Server_Id;
    
      r_Server.Server_Id   := i_Server.Server_Id;
      r_Server.Secret_Code := Fazo.Hash_Sha1(v_Secret_Code);
    end if;
  
    r_Server.Name     := i_Server.Name;
    r_Server.Url      := i_Server.Url;
    r_Server.Order_No := i_Server.Order_No;
  
    z_Htt_Acms_Servers.Save_Row(r_Server);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Delete(i_Server_Id number) is
    v_Cnt number;
  begin
    select count(1)
      into v_Cnt
      from Htt_Company_Acms_Servers q
     where q.Server_Id = i_Server_Id;
  
    if v_Cnt > 0 then
      b.Raise_Error(t('some companies attached this server, initially you must detach companies. cnt: $1',
                      v_Cnt));
    end if;
  
    z_Htt_Acms_Servers.Delete_One(i_Server_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Attach
  (
    i_Company_Id number,
    i_Server_Id  number
  ) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Save_One(i_Company_Id => i_Company_Id, i_Server_Id => i_Server_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                 and q.State = 'A')
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Device);
    
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Update_All_Device_Persons);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Server_Detach(i_Company_Id number) is
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
  begin
    z_Htt_Company_Acms_Servers.Delete_One(i_Company_Id => i_Company_Id);
  
    v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
    v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
  
    for r in (select q.Device_Id
                from Htt_Devices q
               where q.Company_Id = i_Company_Id
                 and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id))
    loop
      Acms_Command_Add(i_Company_Id   => i_Company_Id,
                       i_Device_Id    => r.Device_Id,
                       i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Device);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Insert(i_Track Htt_Acms_Tracks%rowtype) is
  begin
    z_Htt_Acms_Tracks.Insert_Row(i_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Track_Integrate
  (
    i_Company_Id number,
    i_Track_Id   number
  ) is
    r_Hik_Track  Htt_Acms_Tracks%rowtype;
    r_Track      Htt_Tracks%rowtype;
    r_Device     Htt_Devices%rowtype;
    v_Filial_Ids Array_Number;
  begin
    r_Hik_Track := z_Htt_Acms_Tracks.Lock_Load(i_Company_Id => i_Company_Id,
                                               i_Track_Id   => i_Track_Id);
  
    if r_Hik_Track.Status = Htt_Pref.c_Acms_Track_Status_Completed then
      b.Raise_Error(t('acms track was already integrate, track_id=$1', i_Track_Id));
    end if;
  
    r_Device := z_Htt_Devices.Load(i_Company_Id => r_Hik_Track.Company_Id,
                                   i_Device_Id  => r_Hik_Track.Device_Id);
  
    r_Track.Company_Id  := r_Hik_Track.Company_Id;
    r_Track.Track_Time  := Htt_Util.Convert_Timestamp(i_Date     => r_Hik_Track.Track_Datetime,
                                                      i_Timezone => Htt_Util.Load_Timezone(i_Company_Id  => r_Device.Company_Id,
                                                                                           i_Location_Id => r_Device.Location_Id));
    r_Track.Track_Type  := r_Hik_Track.Track_Type;
    r_Track.Person_Id   := r_Hik_Track.Person_Id;
    r_Track.Mark_Type   := r_Hik_Track.Mark_Type;
    r_Track.Device_Id   := r_Hik_Track.Device_Id;
    r_Track.Location_Id := r_Device.Location_Id;
    r_Track.Is_Valid    := 'Y';
  
    v_Filial_Ids := Htt_Util.Get_Filial_Ids(i_Company_Id  => r_Track.Company_Id,
                                            i_Location_Id => r_Track.Location_Id,
                                            i_Person_Id   => r_Track.Person_Id);
  
    if v_Filial_Ids.Count = 0 then
      Htt_Error.Raise_105(i_Company_Id  => r_Track.Company_Id,
                          i_Filial_Id   => r_Track.Filial_Id,
                          i_Location_Id => r_Track.Location_Id,
                          i_Person_Id   => r_Track.Person_Id);
    end if;
  
    for i in 1 .. v_Filial_Ids.Count
    loop
      r_Track.Filial_Id := v_Filial_Ids(i);
      r_Track.Track_Id  := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    r_Hik_Track.Status     := Htt_Pref.c_Acms_Track_Status_Completed;
    r_Hik_Track.Error_Text := null;
  
    z_Htt_Acms_Tracks.Save_Row(r_Hik_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- Copies tracks from other filials to given filial
  -- Tracks are copied from hiring date in given filial
  -- First migrated employees temporary employees is filled
  -- Then tracks are migrated with attention to attached locations
  Procedure Copy_Tracks_To_Filial
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Employee_Ids Array_Number
  ) is
    r_Track Htt_Tracks%rowtype;
  
    --------------------------------------------------
    Procedure Fill_Migrated_Employees
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Employee_Ids Array_Number
    ) is
      v_Date  date := Trunc(sysdate);
      v_Count number := i_Employee_Ids.Count;
    begin
      insert into Htt_Migrated_Employees
        (Company_Id, Filial_Id, Employee_Id, Period_Begin)
        select i_Company_Id, p.Filial_Id, Qr.Employee_Id, Qr.Hiring_Date
          from (select q.Employee_Id, q.Hiring_Date
                  from Href_Staffs q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and (v_Count = 0 or q.Employee_Id member of i_Employee_Ids)
                   and q.Staff_Kind = Href_Pref.c_Staff_Kind_Primary
                   and q.State = 'A'
                   and q.Hiring_Date <= v_Date
                   and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Date)) Qr
          join Md_Filials p
            on p.Company_Id = i_Company_Id
           and p.Filial_Id <> i_Filial_Id
           and p.State = 'A';
    end;
  begin
    Fill_Migrated_Employees(i_Company_Id   => i_Company_Id,
                            i_Filial_Id    => i_Filial_Id,
                            i_Employee_Ids => i_Employee_Ids);
  
    for r in (select *
                from Htt_Tracks p
               where (p.Company_Id, p.Filial_Id, p.Person_Id) in
                     (select q.Company_Id, q.Filial_Id, q.Employee_Id
                        from Htt_Migrated_Employees q)
                 and p.Track_Date >= (select q.Period_Begin
                                        from Htt_Migrated_Employees q
                                       where q.Company_Id = p.Company_Id
                                         and q.Filial_Id = p.Filial_Id
                                         and q.Employee_Id = p.Person_Id)
                 and exists (select 1
                        from Htt_Location_Persons Lp
                       where Lp.Company_Id = i_Company_Id
                         and Lp.Filial_Id = i_Filial_Id
                         and Lp.Location_Id = p.Location_Id
                         and Lp.Person_Id = p.Person_Id)
                 and not exists (select 1
                        from Htt_Tracks T1
                       where T1.Company_Id = i_Company_Id
                         and T1.Filial_Id = i_Filial_Id
                         and T1.Track_Time = p.Track_Time
                         and T1.Person_Id = p.Person_Id
                         and Nvl(T1.Device_Id, -1) = Nvl(p.Device_Id, -1)
                         and T1.Original_Type = p.Original_Type))
    loop
      r_Track := r;
    
      r_Track.Filial_Id  := i_Filial_Id;
      r_Track.Track_Type := r.Original_Type;
      r_Track.Track_Id   := Htt_Next.Track_Id;
    
      Htt_Api.Track_Add(r_Track);
    end loop;
  
    -- cleanup
    delete Htt_Migrated_Employees p
     where p.Company_Id = i_Company_Id;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Person_Global_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Value      varchar2
  ) is
  begin
    if i_Value not in ('Y', 'N') then
      Htt_Error.Raise_080;
    end if;
  
    Md_Api.Preference_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Code       => Htt_Pref.c_Location_Sync_Person_Global,
                           i_Value      => i_Value);
  
    Htt_Core.Global_Sync_Location_Persons(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id);
  end;

end Htt_Api;
/

create or replace package Htt_Core is
  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number;
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number;
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs;
  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets;
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Intervals      in out nocopy Htt_Pref.Timesheet_Interval_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  );
  ---------------------------------------------------------------------------------------------------- 
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once
  -- %param p_Tracks       array of all timesheet tracks, returns as with reordered and transformed tracks 
  -- %param p_Trans_Tracks array of transformed tracks, returns same array adding transformed tracks
  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts;
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  );
  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype);
  ----------------------------------------------------------------------------------------------------
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes;
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance;
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes;
  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals;
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual staff schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  -- gen plan for individual robot schedule
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  );

end Htt_Core;
/
create or replace package body Htt_Core is
  ----------------------------------------------------------------------------------------------------
  g_Is_Individual_Schedule Fazo.Boolean_Id_Aat;
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Is_Individual_Staff_Schedule
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number
  ) return boolean is
  begin
    if i_Schedule_Id is null then
      return false;
    end if;
  
    if g_Is_Individual_Schedule.Exists(i_Schedule_Id) then
      return g_Is_Individual_Schedule(i_Schedule_Id);
    end if;
  
    g_Is_Individual_Schedule(i_Schedule_Id) := Fazo.Equal(z_Htt_Schedules.Load( --
                                                          i_Company_Id => i_Company_Id, --
                                                          i_Filial_Id => i_Filial_Id, --
                                                          i_Schedule_Id => i_Schedule_Id).Pcode,
                                                          Htt_Pref.c_Pcode_Individual_Staff_Schedule);
  
    return g_Is_Individual_Schedule(i_Schedule_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Next_Pin(i_Company_Id number) return number is
    result number;
  begin
    z_Htt_Pin_Locks.Lock_Only(i_Company_Id);
  
    select max(Rownum)
      into result
      from (select to_number(q.Pin) Pin
              from Htt_Persons q
             where q.Company_Id = i_Company_Id
               and to_number(q.Pin) is not null
             order by to_number(q.Pin)) q
     where q.Pin = Rownum;
  
    return Nvl(result, 0) + 1;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Calendar_Day_Change
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Data         Hashmap;
  begin
    for i in 1 .. i_Dates.Count
    loop
      v_Data         := Hashmap();
      r_Calendar_Day := z_Htt_Calendar_Days.Load(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Calendar_Id   => i_Calendar_Id,
                                                 i_Calendar_Date => i_Dates(i));
    
      v_Data.Put('notify_type', Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      v_Data.Put('name', r_Calendar_Day.Name);
      v_Data.Put('day_kind', r_Calendar_Day.Day_Kind);
      v_Data.Put('day_kind_name', Htt_Util.t_Day_Kind(r_Calendar_Day.Day_Kind));
      v_Data.Put('calendar_date', r_Calendar_Day.Calendar_Date);
      v_Data.Put('swapped_date', r_Calendar_Day.Swapped_Date);
    
      for Emp in (select Ts.Employee_Id
                    from Htt_Timesheets Ts
                   where Ts.Company_Id = i_Company_Id
                     and Ts.Filial_Id = i_Filial_Id
                     and Ts.Schedule_Id in (select s.Schedule_Id
                                              from Htt_Schedules s
                                             where s.Company_Id = i_Company_Id
                                               and s.Filial_Id = i_Filial_Id
                                               and s.Calendar_Id = i_Calendar_Id)
                     and Ts.Timesheet_Date = r_Calendar_Day.Calendar_Date
                   group by Ts.Employee_Id)
      loop
        continue when not Hes_Util.Enabled_Notify(i_Company_Id   => i_Company_Id,
                                                  i_User_Id      => Emp.Employee_Id,
                                                  i_Setting_Code => Hes_Pref.c_Pref_Nt_Calendar_Day_Change);
      
        Mt_Fcm.Send(i_Company_Id => i_Company_Id, --
                    i_User_Id    => Emp.Employee_Id,
                    i_Data       => v_Data);
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Timesheet
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Late_Time   number := 0,
    i_Early_Time  number := 0,
    i_Notify_Type varchar2
  ) is
    r_Person     Mr_Natural_Persons%rowtype;
    r_Staff      Href_Staffs%rowtype;
    v_Manager_Id number;
    result       Hashmap := Hashmap();
  begin
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Timesheet.Company_Id,
                                  i_Filial_Id  => i_Timesheet.Filial_Id,
                                  i_Staff_Id   => i_Timesheet.Staff_Id);
  
    r_Person := z_Mr_Natural_Persons.Take(i_Company_Id => r_Staff.Company_Id,
                                          i_Person_Id  => r_Staff.Employee_Id);
  
    v_Manager_Id := Href_Util.Get_Manager_Id(i_Company_Id => r_Staff.Company_Id,
                                             i_Filial_Id  => r_Staff.Filial_Id,
                                             i_Robot_Id   => r_Staff.Robot_Id);
  
    if not Hes_Util.Enabled_Notify(i_Company_Id   => i_Timesheet.Company_Id,
                                   i_User_Id      => v_Manager_Id,
                                   i_Setting_Code => i_Notify_Type) then
      return;
    end if;
  
    Result.Put('notify_type', i_Notify_Type);
    Result.Put('timesheet_id', i_Timesheet.Timesheet_Id);
    Result.Put('timesheet_date', i_Timesheet.Timesheet_Date);
    Result.Put('employee_name', r_Person.Name);
    Result.Put('begin_time', to_char(i_Timesheet.Begin_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('end_time', to_char(i_Timesheet.End_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('input_time', to_char(i_Timesheet.Input_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('output_time', to_char(i_Timesheet.Output_Time, Href_Pref.c_Time_Format_Minute));
    Result.Put('early_time', i_Early_Time);
    Result.Put('late_time', i_Late_Time);
  
    Mt_Fcm.Send(i_Company_Id => i_Timesheet.Company_Id, --
                i_User_Id    => v_Manager_Id,
                i_Data       => result);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Schedule_Day_Extras
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Schedule_Id   number,
    i_Schedule_Date date,
    i_Source_Date   date,
    i_Schedule_Day  Htt_Schedule_Origin_Days%rowtype
  ) is
    v_Weights_Sum number := 0;
    v_Weights     Htt_Pref.Interval_Weight_Nt := Htt_Pref.Interval_Weight_Nt();
  
    --------------------------------------------------
    Procedure Push_Weights
    (
      p_Weights        in out nocopy Htt_Pref.Interval_Weight_Nt,
      p_Weights_Sum    in out number,
      i_Interval_Begin date,
      i_Interval_End   date,
      i_Weight         number
    ) is
      v_Weight Htt_Pref.Interval_Weight_Rt;
    begin
      v_Weight.Begin_Time := i_Interval_Begin;
      v_Weight.End_Time   := i_Interval_End;
      v_Weight.Weight     := i_Weight;
    
      if i_Schedule_Day.Break_Enabled = 'Y' and
         v_Weight.Begin_Time < i_Schedule_Day.Break_Begin_Time and
         v_Weight.End_Time > i_Schedule_Day.Break_End_Time then
      
        v_Weight.End_Time := i_Schedule_Day.Break_Begin_Time;
      
        p_Weights.Extend;
        p_Weights(p_Weights.Count) := v_Weight;
      
        p_Weights_Sum := p_Weights_Sum +
                         v_Weight.Weight *
                         Htt_Util.Time_Diff(i_Time1 => v_Weight.End_Time,
                                            i_Time2 => v_Weight.Begin_Time);
      
        v_Weight.Begin_Time := i_Schedule_Day.Break_End_Time;
        v_Weight.End_Time   := i_Interval_End;
      elsif i_Schedule_Day.Break_Begin_Time <= v_Weight.Begin_Time and
            i_Schedule_Day.Break_End_Time >= v_Weight.End_Time then
        return;
      elsif i_Schedule_Day.Break_Enabled = 'Y' then
        if i_Schedule_Day.Break_Begin_Time between v_Weight.Begin_Time and v_Weight.End_Time then
          v_Weight.End_Time := i_Schedule_Day.Break_Begin_Time;
        end if;
      
        if i_Schedule_Day.Break_End_Time between v_Weight.Begin_Time and v_Weight.End_Time then
          v_Weight.Begin_Time := i_Schedule_Day.Break_End_Time;
        end if;
      end if;
    
      if v_Weight.Begin_Time < v_Weight.End_Time then
        p_Weights.Extend;
        p_Weights(p_Weights.Count) := v_Weight;
      
        p_Weights_Sum := p_Weights_Sum +
                         v_Weight.Weight *
                         Htt_Util.Time_Diff(i_Time1 => v_Weight.End_Time,
                                            i_Time2 => v_Weight.Begin_Time);
      end if;
    end;
  begin
    if i_Schedule_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work then
      insert into Htt_Schedule_Day_Marks Dm
        (Dm.Company_Id, --
         Dm.Filial_Id,
         Dm.Schedule_Id,
         Dm.Schedule_Date,
         Dm.Begin_Time,
         Dm.End_Time)
        select Om.Company_Id,
               Om.Filial_Id,
               Om.Schedule_Id,
               i_Schedule_Date,
               i_Schedule_Date + Numtodsinterval(Om.Begin_Time, 'minute'),
               i_Schedule_Date + Numtodsinterval(Om.End_Time, 'minute')
          from Htt_Schedule_Origin_Day_Marks Om
         where Om.Company_Id = i_Company_Id
           and Om.Filial_Id = i_Filial_Id
           and Om.Schedule_Id = i_Schedule_Id
           and Om.Schedule_Date = i_Source_Date;
    
      for r in (select i_Schedule_Date + Numtodsinterval(Om.Begin_Time, 'minute') Interval_Begin,
                       i_Schedule_Date + Numtodsinterval(Om.End_Time, 'minute') Interval_End,
                       Om.Weight
                  from Htt_Schedule_Origin_Day_Weights Om
                 where Om.Company_Id = i_Company_Id
                   and Om.Filial_Id = i_Filial_Id
                   and Om.Schedule_Id = i_Schedule_Id
                   and Om.Schedule_Date = i_Source_Date
                 order by Om.Begin_Time)
      loop
        Push_Weights(p_Weights        => v_Weights,
                     p_Weights_Sum    => v_Weights_Sum,
                     i_Interval_Begin => r.Interval_Begin,
                     i_Interval_End   => r.Interval_End,
                     i_Weight         => r.Weight);
      end loop;
    
      for i in 1 .. v_Weights.Count
      loop
        z_Htt_Schedule_Day_Weights.Insert_One(i_Company_Id    => i_Company_Id,
                                              i_Filial_Id     => i_Filial_Id,
                                              i_Schedule_Id   => i_Schedule_Id,
                                              i_Schedule_Date => i_Schedule_Date,
                                              i_Begin_Time    => v_Weights(i).Begin_Time,
                                              i_End_Time      => v_Weights(i).End_Time,
                                              i_Weight        => v_Weights(i).Weight,
                                              i_Coef          => i_Schedule_Day.Plan_Time * 60 /
                                                                 v_Weights_Sum);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- gen schedule day
  -- also gen swapped day if such exists
  -- return date of swapped day through o_swapped_date
  Procedure Gen_Schedule_Day
  (
    i_Company_Id               number,
    i_Filial_Id                number,
    i_Schedule_Id              number,
    i_Schedule_Date            date,
    i_Calendar_Id              number,
    i_Take_Holidays            varchar2,
    i_Take_Nonworking          varchar2,
    i_Take_Additional_Rest_Day varchar2,
    o_Swapped_Date             out date
  ) is
    r_Origin_Day   Htt_Schedule_Origin_Days%rowtype;
    r_First_Day    Htt_Schedule_Origin_Days%rowtype;
    r_Second_Day   Htt_Schedule_Origin_Days%rowtype;
    r_Calendar_Day Htt_Calendar_Days%rowtype;
    v_Swappable    boolean := false;
  
    --------------------------------------------------
    Procedure Swap_Days
    (
      p_Rest_Day in out nocopy Htt_Schedule_Origin_Days%rowtype,
      p_Work_Day in out nocopy Htt_Schedule_Origin_Days%rowtype
    ) is
      v_Swap_Distance number;
      r_Day           Htt_Schedule_Origin_Days%rowtype := p_Rest_Day;
    begin
      v_Swap_Distance := p_Rest_Day.Schedule_Date - p_Work_Day.Schedule_Date;
    
      p_Rest_Day                  := p_Work_Day;
      p_Rest_Day.Schedule_Date    := r_Day.Schedule_Date;
      p_Rest_Day.Begin_Time       := p_Rest_Day.Begin_Time + v_Swap_Distance;
      p_Rest_Day.End_Time         := p_Rest_Day.End_Time + v_Swap_Distance;
      p_Rest_Day.Break_Begin_Time := p_Rest_Day.Break_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Break_End_Time   := p_Rest_Day.Break_End_Time + v_Swap_Distance;
      p_Rest_Day.Shift_Begin_Time := p_Rest_Day.Shift_Begin_Time + v_Swap_Distance;
      p_Rest_Day.Shift_End_Time   := p_Rest_Day.Shift_End_Time + v_Swap_Distance;
      p_Rest_Day.Input_Border     := p_Rest_Day.Input_Border + v_Swap_Distance;
      p_Rest_Day.Output_Border    := p_Rest_Day.Output_Border + v_Swap_Distance;
    
      r_Day.Schedule_Date         := p_Work_Day.Schedule_Date;
      p_Work_Day                  := r_Day;
      p_Work_Day.Shift_Begin_Time := p_Work_Day.Shift_Begin_Time - v_Swap_Distance;
      p_Work_Day.Shift_End_Time   := p_Work_Day.Shift_End_Time - v_Swap_Distance;
      p_Work_Day.Input_Border     := p_Work_Day.Input_Border - v_Swap_Distance;
      p_Work_Day.Output_Border    := p_Work_Day.Output_Border - v_Swap_Distance;
    end;
  
  begin
    if z_Htt_Schedule_Origin_Days.Exist_Lock(i_Company_Id    => i_Company_Id,
                                             i_Filial_Id     => i_Filial_Id,
                                             i_Schedule_Id   => i_Schedule_Id,
                                             i_Schedule_Date => i_Schedule_Date,
                                             o_Row           => r_Origin_Day) then
      if Md_Pref.c_Migr_Company_Id != i_Company_Id then
        if i_Calendar_Id is not null and
           Htt_Util.Is_Calendar_Day(i_Company_Id   => i_Company_Id,
                                    i_Filial_Id    => i_Filial_Id,
                                    i_Calendar_Id  => i_Calendar_Id,
                                    i_Date         => i_Schedule_Date,
                                    o_Calendar_Day => r_Calendar_Day) then
          if r_Calendar_Day.Day_Kind <> Htt_Pref.c_Day_Kind_Nonworking then
            if r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Swapped then
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_First_Day  := r_Origin_Day;
                r_Second_Day := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Swapped_Date);
              
              else
                r_First_Day  := z_Htt_Schedule_Origin_Days.Take(i_Company_Id    => i_Company_Id,
                                                                i_Filial_Id     => i_Filial_Id,
                                                                i_Schedule_Id   => i_Schedule_Id,
                                                                i_Schedule_Date => r_Calendar_Day.Calendar_Date);
                r_Second_Day := r_Origin_Day;
              end if;
            
              v_Swappable := r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work or
                             r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Work and
                             r_Second_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest;
            
              if v_Swappable then
                if r_First_Day.Day_Kind = Htt_Pref.c_Day_Kind_Rest then
                  Swap_Days(p_Rest_Day => r_First_Day, p_Work_Day => r_Second_Day);
                else
                  Swap_Days(p_Rest_Day => r_Second_Day, p_Work_Day => r_First_Day);
                end if;
              end if;
            
              if i_Schedule_Date = r_Calendar_Day.Calendar_Date then
                r_Origin_Day := r_First_Day;
              else
                r_Origin_Day := r_Second_Day;
                r_Second_Day := r_First_Day;
              end if;
            
              -- gen swapped day
              z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                           i_Filial_Id        => i_Filial_Id,
                                           i_Schedule_Id      => i_Schedule_Id,
                                           i_Schedule_Date    => r_Second_Day.Schedule_Date,
                                           i_Day_Kind         => r_Second_Day.Day_Kind,
                                           i_Begin_Time       => r_Second_Day.Begin_Time,
                                           i_End_Time         => r_Second_Day.End_Time,
                                           i_Break_Enabled    => r_Second_Day.Break_Enabled,
                                           i_Break_Begin_Time => r_Second_Day.Break_Begin_Time,
                                           i_Break_End_Time   => r_Second_Day.Break_End_Time,
                                           i_Full_Time        => r_Second_Day.Full_Time,
                                           i_Plan_Time        => r_Second_Day.Plan_Time,
                                           i_Shift_Begin_Time => r_Second_Day.Shift_Begin_Time,
                                           i_Shift_End_Time   => r_Second_Day.Shift_End_Time,
                                           i_Input_Border     => r_Second_Day.Input_Border,
                                           i_Output_Border    => r_Second_Day.Output_Border);
            
              delete Htt_Schedule_Day_Marks Dm
               where Dm.Company_Id = i_Company_Id
                 and Dm.Filial_Id = i_Filial_Id
                 and Dm.Schedule_Id = i_Schedule_Id
                 and Dm.Schedule_Date = r_Second_Day.Schedule_Date;
            
              Gen_Schedule_Day_Extras(i_Company_Id    => i_Company_Id,
                                      i_Filial_Id     => i_Filial_Id,
                                      i_Schedule_Id   => i_Schedule_Id,
                                      i_Schedule_Date => r_Second_Day.Schedule_Date,
                                      i_Source_Date   => case
                                                           when v_Swappable then
                                                            r_Origin_Day.Schedule_Date
                                                           else
                                                            r_Second_Day.Schedule_Date
                                                         end,
                                      i_Schedule_Day  => r_Second_Day);
            
              o_Swapped_Date := r_Second_Day.Schedule_Date;
            else
              if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
                 i_Take_Additional_Rest_Day = 'Y' and
                 r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
                r_Origin_Day.Begin_Time       := null;
                r_Origin_Day.End_Time         := null;
                r_Origin_Day.Break_Enabled    := null;
                r_Origin_Day.Break_Begin_Time := null;
                r_Origin_Day.Break_End_Time   := null;
                r_Origin_Day.Full_Time        := 0;
                r_Origin_Day.Plan_Time        := 0;
              end if;
            end if;
          end if;
        
          if i_Take_Holidays = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Holiday or
             i_Take_Nonworking = 'Y' and r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Nonworking or
             i_Take_Additional_Rest_Day = 'Y' and
             r_Calendar_Day.Day_Kind = Htt_Pref.c_Day_Kind_Additional_Rest then
            r_Origin_Day.Day_Kind := r_Calendar_Day.Day_Kind;
          end if;
        end if;
      end if;
    
      z_Htt_Schedule_Days.Save_One(i_Company_Id       => i_Company_Id,
                                   i_Filial_Id        => i_Filial_Id,
                                   i_Schedule_Id      => i_Schedule_Id,
                                   i_Schedule_Date    => i_Schedule_Date,
                                   i_Day_Kind         => r_Origin_Day.Day_Kind,
                                   i_Begin_Time       => r_Origin_Day.Begin_Time,
                                   i_End_Time         => r_Origin_Day.End_Time,
                                   i_Break_Enabled    => r_Origin_Day.Break_Enabled,
                                   i_Break_Begin_Time => r_Origin_Day.Break_Begin_Time,
                                   i_Break_End_Time   => r_Origin_Day.Break_End_Time,
                                   i_Full_Time        => r_Origin_Day.Full_Time,
                                   i_Plan_Time        => r_Origin_Day.Plan_Time,
                                   i_Shift_Begin_Time => r_Origin_Day.Shift_Begin_Time,
                                   i_Shift_End_Time   => r_Origin_Day.Shift_End_Time,
                                   i_Input_Border     => r_Origin_Day.Input_Border,
                                   i_Output_Border    => r_Origin_Day.Output_Border);
    
      Gen_Schedule_Day_Extras(i_Company_Id    => i_Company_Id,
                              i_Filial_Id     => i_Filial_Id,
                              i_Schedule_Id   => i_Schedule_Id,
                              i_Schedule_Date => r_Origin_Day.Schedule_Date,
                              i_Source_Date   => case
                                                   when v_Swappable then
                                                    r_Second_Day.Schedule_Date
                                                   else
                                                    r_Origin_Day.Schedule_Date
                                                 end,
                              i_Schedule_Day  => r_Origin_Day);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days
  -- dates of swapped days are added to p_dates
  ----------------------------------------------------------------------------------------------------  
  Procedure Gen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    p_Dates       in out nocopy Array_Date
  ) is
    v_Swapped_Date  date;
    v_Swapped_Dates Array_Date := Array_Date();
    r_Schedule      Htt_Schedules%rowtype;
  
    v_Swapped_Dates_At Fazo.Date_Code_Aat;
  
    -------------------------------------------------- 
    Function Date_Swapped(i_Date date) return boolean is
    begin
      if v_Swapped_Dates_At.Exists(to_char(i_Date)) then
        return true;
      end if;
    
      return false;
    end;
  
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    delete Htt_Schedule_Day_Marks Dm
     where Dm.Company_Id = i_Company_Id
       and Dm.Filial_Id = i_Filial_Id
       and Dm.Schedule_Id = i_Schedule_Id
       and Dm.Schedule_Date member of p_Dates;
  
    delete Htt_Schedule_Day_Weights Dw
     where Dw.Company_Id = i_Company_Id
       and Dw.Filial_Id = i_Filial_Id
       and Dw.Schedule_Id = i_Schedule_Id
       and Dw.Schedule_Date member of p_Dates;
  
    for i in 1 .. p_Dates.Count
    loop
      continue when Date_Swapped(p_Dates(i));
    
      Gen_Schedule_Day(i_Company_Id               => i_Company_Id,
                       i_Filial_Id                => i_Filial_Id,
                       i_Schedule_Id              => i_Schedule_Id,
                       i_Schedule_Date            => p_Dates(i),
                       i_Calendar_Id              => r_Schedule.Calendar_Id,
                       i_Take_Holidays            => r_Schedule.Take_Holidays,
                       i_Take_Nonworking          => r_Schedule.Take_Nonworking,
                       i_Take_Additional_Rest_Day => r_Schedule.Take_Additional_Rest_Days,
                       o_Swapped_Date             => v_Swapped_Date);
    
      if v_Swapped_Date is not null then
        v_Swapped_Dates_At(v_Swapped_Date) := p_Dates(i);
        v_Swapped_Dates_At(p_Dates(i)) := v_Swapped_Date;
      
        Fazo.Push(v_Swapped_Dates, v_Swapped_Date);
      end if;
    end loop;
  
    p_Dates := p_Dates multiset union v_Swapped_Dates;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- if new days are being added to schedule
  -- uses separate algorithm for timesheet generation
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number,
    i_Dates       Array_Date
  ) is
    v_Year_Existed varchar2(1);
    v_Dates        Array_Date := i_Dates;
  begin
    begin
      select 'Y'
        into v_Year_Existed
        from Htt_Schedule_Days d
       where d.Company_Id = i_Company_Id
         and d.Filial_Id = i_Filial_Id
         and d.Schedule_Id = i_Schedule_Id
         and Extract(year from d.Schedule_Date) = i_Year
         and Rownum = 1;
    
    exception
      when No_Data_Found then
        v_Year_Existed := 'N';
    end;
  
    Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                      i_Filial_Id   => i_Filial_Id,
                      i_Schedule_Id => i_Schedule_Id,
                      p_Dates       => v_Dates);
  
    v_Dates := set(v_Dates);
  
    if Md_Pref.c_Migr_Company_Id != i_Company_Id then
      if v_Year_Existed = 'N' then
        Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => i_Schedule_Id,
                           i_Year        => i_Year);
      else
        Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                             i_Filial_Id   => i_Filial_Id,
                             i_Schedule_Id => i_Schedule_Id,
                             i_Dates       => v_Dates);
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  -- generates schedule days and timesheets for them
  -- for every schedule that is cnnected to this calendar
  Procedure Regen_Schedule_Days
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Calendar_Id number,
    i_Dates       Array_Date
  ) is
    v_Dates Array_Date;
  begin
    for r in (select s.Schedule_Id
                from Htt_Schedules s
               where s.Company_Id = i_Company_Id
                 and s.Filial_Id = i_Filial_Id
                 and s.Calendar_Id = i_Calendar_Id)
    loop
      v_Dates := i_Dates;
    
      Gen_Schedule_Days(i_Company_Id  => i_Company_Id,
                        i_Filial_Id   => i_Filial_Id,
                        i_Schedule_Id => r.Schedule_Id,
                        p_Dates       => v_Dates);
    
      Regen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                           i_Filial_Id   => i_Filial_Id,
                           i_Schedule_Id => r.Schedule_Id,
                           i_Dates       => v_Dates);
    end loop;
  
    for r in (select *
                from Htt_Schedule_Registries q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Calendar_Id = i_Calendar_Id)
    loop
      null;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Request_Timesheets
  (
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Staff_Id      number,
    i_Request_Begin date,
    i_Request_End   date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Request_Begin);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and (i_Request_Begin >= q.Shift_Begin_Time and i_Request_Begin < q.Shift_End_Time or
           i_Request_End >= q.Shift_Begin_Time and i_Request_End < q.Shift_End_Time);
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Find_Track_Timesheets
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Track_Datetime date
  ) return Array_Number is
    v_Interval_Date date := Trunc(i_Track_Datetime);
    result          Array_Number;
  begin
    select q.Timesheet_Id
      bulk collect
      into result
      from Htt_Timesheet_Helpers q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Interval_Date = v_Interval_Date
       and i_Track_Datetime >= q.Input_Border
       and i_Track_Datetime < q.Output_Border;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheet
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number
  ) is
    v_Dummy varchar2(1);
  begin
    select 'x'
      into v_Dummy
      from Htt_Dirty_Timesheets q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Timesheets
        (Company_Id, Filial_Id, Timesheet_Id, Locked)
        select i_Company_Id,
               i_Filial_Id,
               i_Timesheet_Id,
               Nvl((select 'Y'
                     from Htt_Timesheet_Locks Tl
                    where Tl.Company_Id = t.Company_Id
                      and Tl.Filial_Id = t.Filial_Id
                      and Tl.Staff_Id = t.Staff_Id
                      and Tl.Timesheet_Date = t.Timesheet_Date),
                   'N')
          from Htt_Timesheets t
         where t.Company_Id = i_Company_Id
           and t.Filial_Id = i_Filial_Id
           and t.Timesheet_Id = i_Timesheet_Id;
    
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      select t.Company_Id,
             t.Filial_Id,
             t.Timesheet_Id,
             Nvl((select 'Y'
                   from Htt_Timesheet_Locks Tl
                  where Tl.Company_Id = t.Company_Id
                    and Tl.Filial_Id = t.Filial_Id
                    and Tl.Staff_Id = t.Staff_Id
                    and Tl.Timesheet_Date = t.Timesheet_Date),
                 'N')
        from Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date
         and not exists (select *
                from Htt_Dirty_Timesheets p
               where p.Company_Id = t.Company_Id
                 and p.Filial_Id = t.Filial_Id
                 and p.Timesheet_Id = t.Timesheet_Id);
  
    b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Make_Dirty_Timesheets
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Dates        Array_Date,
    i_Add_Callback boolean := true
  ) is
  begin
    insert into Htt_Dirty_Timesheets Dt
      (Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id, Dt.Locked)
      (select t.Company_Id,
              t.Filial_Id,
              t.Timesheet_Id,
              Nvl((select 'Y'
                    from Htt_Timesheet_Locks Tl
                   where Tl.Company_Id = t.Company_Id
                     and Tl.Filial_Id = t.Filial_Id
                     and Tl.Staff_Id = t.Staff_Id
                     and Tl.Timesheet_Date = t.Timesheet_Date),
                  'N')
         from Htt_Timesheets t
        where t.Company_Id = i_Company_Id
          and t.Filial_Id = i_Filial_Id
          and t.Staff_Id = i_Staff_Id
          and t.Timesheet_Date member of i_Dates
          and not exists (select *
                 from Htt_Dirty_Timesheets p
                where p.Company_Id = t.Company_Id
                  and p.Filial_Id = t.Filial_Id
                  and p.Timesheet_Id = t.Timesheet_Id));
  
    if i_Add_Callback then
      b.Add_Post_Callback('begin htt_core.revised_timesheets; end;');
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs(i_Company_Id number) is
    v_User_System number := Md_Pref.User_System(i_Company_Id);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      for Po in (select Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id
                   from Htt_Timesheet_Tracks Tt
                  where Tt.Company_Id = r.Company_Id
                    and Tt.Filial_Id = r.Filial_Id
                    and Tt.Track_Type in
                        (Htt_Pref.c_Track_Type_Potential_Output, Htt_Pref.c_Track_Type_Gps_Output)
                  group by Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id)
      loop
        Make_Dirty_Timesheet(i_Company_Id   => Po.Company_Id,
                             i_Filial_Id    => Po.Filial_Id,
                             i_Timesheet_Id => Po.Timesheet_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Transform_Potential_Outputs is
  begin
    for Cmp in (select c.Company_Id
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Verifix_Settings.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Transform_Potential_Outputs(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  
    Dbms_Mview.Refresh('Htt_Employee_Monthly_Attendances_Mv', --
                       Atomic_Refresh => true);
  end;

  ----------------------------------------------------------------------------------------------------
  -- adds i_begin_date - 1 and i_end_date + 1 to dirty timesheets
  -- sets shift begin/end values to null if its shift is flexible and not locked
  -- %warning
  -- timesheets at i_begin_date - 1 and i_end_date + 1 should be removed from dirty timesheets before any fact generation
  Procedure Update_Border_Timesheet_Shifts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Staff_Id     number,
    i_Begin_Date   date,
    i_End_Date     date,
    i_Add_Callback boolean := true
  ) is
  begin
    update Htt_Timesheets q
       set q.Shift_Begin_Time = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Shift_Begin_Time, null),
           q.Input_Border     = Decode(q.Timesheet_Date, i_Begin_Date - 1, q.Input_Border, null),
           q.Shift_End_Time   = Decode(q.Timesheet_Date, i_End_Date + 1, q.Shift_End_Time, null),
           q.Output_Border    = Decode(q.Timesheet_Date, i_End_Date + 1, q.Output_Border, null)
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Staff_Id = i_Staff_Id
       and q.Timesheet_Date in (i_Begin_Date - 1, i_End_Date + 1)
       and not exists (select 1
              from Htt_Timesheet_Locks Tl
             where Tl.Company_Id = q.Company_Id
               and Tl.Filial_Id = q.Filial_Id
               and Tl.Staff_Id = q.Staff_Id
               and Tl.Timesheet_Date = q.Timesheet_Date)
       and q.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible;
  
    Make_Dirty_Timesheets(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Staff_Id     => i_Staff_Id,
                          i_Dates        => Array_Date(i_Begin_Date - 1, i_End_Date + 1),
                          i_Add_Callback => i_Add_Callback);
  end;

  ----------------------------------------------------------------------------------------------------
  -- updates shift begin/end and input/output borders for dirty timesheets with flexible shift 
  -- shift is determined as flexible if it is null at current moment
  -- deletes locked timesheets from dirty timesheets after updating shifts

  -- %raises Htt_Error.Raise_107 when end_time and begin_time for consecutive days intersect

  -- shift is calculated as middle between end_time and begin_time of consecutive days
  -- shift for work day is calculated as (24 - full_plan)/2 from begin/end_time if previous/next day is rest day
  -- shift for rest day is set to the shift of its neighbour
  -- shift between two rest days is set to the start/end of day
  -- input border is set to min(shift, merger)
  -- output border is set to max(shift, merger)
  -- merger appears when difference between end_time and begin_time of consecutive days is less than 30 minutes
  -- merger is set to shift +/- 15 minutes 

  -- flexible schedule guarantees that shift borders will not intersect between timesheets

  -- %example 1
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 09:00;
  -- then shift_begin_time := 01.01.2023 18:00 + (02.01.2023 09:00 - 01.01.2023 18:00) / 2;
  -- meaning shift_begin_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- %example 2
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next day to be rest day
  -- then shift_end_time := 01.01.2023 18:00 + (24 - (01.01.2023 18:00 - 01.01.2023 09:00)) / 2;
  -- meaning shift_end_time := 01.01.2023 18:00 + 7.5 hours := 02.01.2023 01:30;

  -- not necessarily shift borders will fall at same hours every day
  -- this is easily seen in shifts with day/schedule

  -- %example 3
  -- let prev_end   := 31.12.2022 09:00;
  -- let begin_time := 01.01.2023 09:00;
  -- let end_time   := 01.01.2023 18:00;
  -- let next_begin := 02.01.2023 18:00;
  -- then
  -- shift_end_time := 01.01.2023 18:00 + (02.01.2023 18:00 - 01.01.2023 18:00) / 2;
  -- shift_end_time := 01.01.2023 18:00 + 12 hours := 02.01.2023 06:00;
  -- and 
  -- shift_begin_time := 01.01.2023 09:00 - (01.01.2023 09:00 - 31.12.2022 09:00) / 2;
  -- shift_begin_time := 01.01.2023 09:00 - 12 hours := 31.01.2023 21:00;
  Procedure Adjust_Flexible_Shifts is
    --------------------------------------------------
    Procedure Assert_Nonintersecting_Work_Time is
      v_Company_Id     number;
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Begin_Time     date;
      v_End_Time       date;
    begin
      with Timesheets as
       (select Tt.Company_Id,
               Tt.Filial_Id,
               Tt.Staff_Id,
               Tt.Timesheet_Date,
               Tt.Begin_Time,
               Tt.End_Time,
               Tt.Shift_Begin_Time,
               Tt.Shift_End_Time
          from Htt_Timesheets Tt
         where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
               (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                  from Htt_Dirty_Timesheets Dt))
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Begin_Time,
             (select q.End_Time
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1)
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Begin_Time, v_End_Time
        from Timesheets p
       where exists (select 1
                from Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Staff_Id = p.Staff_Id
                 and q.Timesheet_Date = p.Timesheet_Date - 1
                 and q.End_Time > p.Begin_Time)
         and Rownum = 1;
    
      Htt_Error.Raise_107(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                   i_Filial_Id  => v_Filial_Id,
                                                                   i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date => v_Timesheet_Date,
                          i_Begin_Time     => v_Begin_Time,
                          i_End_Time       => v_End_Time);
    exception
      when No_Data_Found then
        null;
    end;
  begin
    Assert_Nonintersecting_Work_Time;
  
    update Htt_Timesheets Tt
       set (Tt.Shift_Begin_Time, Tt.Shift_End_Time, Tt.Input_Border, Tt.Output_Border) =
           (select Nvl(Tt.Shift_Begin_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin,
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Shift_End_Time,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End,
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End,
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1)),
                   Nvl(Tt.Input_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_Begin -
                                       Upd.Input_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_Begin),
                                Upd.Work_Rest_Shift_Begin,
                                Upd.Timesheet_Date)),
                   Nvl(Tt.Output_Border,
                       Coalesce(Decode(Upd.Day_Kind,
                                       Htt_Pref.c_Day_Kind_Work,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Htt_Pref.c_Day_Kind_Nonworking,
                                       Upd.Work_Work_Shift_End +
                                       Upd.Output_Merger_Coef *
                                       Numtodsinterval(Htt_Pref.c_Default_Merge_Border, 'second'),
                                       Upd.Rest_Work_Shift_End),
                                Upd.Work_Rest_Shift_End,
                                Upd.Timesheet_Date + 1))
              from (select Qr.Timesheet_Date,
                           Qr.Day_Kind,
                           -- if next_begin - end_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Next_Begin - Qr.End_Time) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Output_Merger_Coef,
                           -- if begin_time - prev_time is less or equal than 2 * Htt_Pref.c_Default_Merge_Border
                           -- then coef = 1
                           -- else coef = 0
                           Decode(Sign(2 * Htt_Pref.c_Default_Merge_Border -
                                       (Qr.Begin_Time - Qr.Prev_End) * 24 * 3600),
                                  -1,
                                  0,
                                  1) Input_Merger_Coef,
                           Qr.Begin_Time - (Qr.Begin_Time - Qr.Prev_End) / 2 Work_Work_Shift_Begin,
                           Qr.End_Time + (Qr.Next_Begin - Qr.End_Time) / 2 Work_Work_Shift_End,
                           -- current day rest, previous day work
                           Qr.Prev_End +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Prev_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_Begin,
                           -- current day rest, next day work
                           Qr.Next_Begin -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Next_Plan) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Rest_Work_Shift_End,
                           -- current day work, previous day rest
                           Qr.Begin_Time -
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_Begin,
                           -- current day work, next day rest
                           Qr.End_Time +
                           Numtodsinterval(Least(Greatest((Htt_Pref.c_Max_Full_Plan - Qr.Full_Time) / 2,
                                                          Htt_Pref.c_Min_Shift_Border),
                                                 Htt_Pref.c_Max_Shift_Border),
                                           'second') Work_Rest_Shift_End
                      from (select Cr.Company_Id,
                                   Cr.Filial_Id,
                                   Cr.Timesheet_Id,
                                   Cr.Timesheet_Date,
                                   Cr.Day_Kind,
                                   Cr.Begin_Time,
                                   Cr.End_Time,
                                   (Cr.End_Time - Cr.Begin_Time) * 24 * 3600 Full_Time,
                                   Cr.Shift_Begin_Time,
                                   Cr.Shift_End_Time,
                                   Cr.Input_Border,
                                   Cr.Output_Border,
                                   Pv.End_Time Prev_End,
                                   (Pv.End_Time - Pv.Begin_Time) * 24 * 3600 Prev_Plan,
                                   Nx.Begin_Time Next_Begin,
                                   (Nx.End_Time - Nx.Begin_Time) * 24 * 3600 Next_Plan
                              from Htt_Timesheets Cr
                              left join Htt_Timesheets Pv
                                on Pv.Company_Id = Cr.Company_Id
                               and Pv.Filial_Id = Cr.Filial_Id
                               and Pv.Staff_Id = Cr.Staff_Id
                               and Pv.Timesheet_Date = Cr.Timesheet_Date - 1
                              left join Htt_Timesheets Nx
                                on Nx.Company_Id = Cr.Company_Id
                               and Nx.Filial_Id = Cr.Filial_Id
                               and Nx.Staff_Id = Cr.Staff_Id
                               and Nx.Timesheet_Date = Cr.Timesheet_Date + 1
                             where (Cr.Company_Id, Cr.Filial_Id, Cr.Timesheet_Id) in
                                   (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                                      from Htt_Dirty_Timesheets Dt)) Qr
                     where Qr.Company_Id = Tt.Company_Id
                       and Qr.Filial_Id = Tt.Filial_Id
                       and Qr.Timesheet_Id = Tt.Timesheet_Id) Upd)
     where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
           (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
              from Htt_Dirty_Timesheets Dt
             where Dt.Locked = 'N')
       and Tt.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible
       and (Tt.Shift_Begin_Time is null or Tt.Shift_End_Time is null);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Helpers_Save is
  begin
    delete Htt_Timesheet_Helpers q
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = q.Company_Id
               and Dt.Filial_Id = q.Filial_Id
               and Dt.Timesheet_Id = q.Timesheet_Id);
  
    -- see: https://community.oracle.com/tech/developers/discussion/2526535/reg-sys-guid
    insert into Htt_Timesheet_Helpers Th
      (Th.Company_Id,
       Th.Filial_Id,
       Th.Staff_Id,
       Th.Interval_Date,
       Th.Timesheet_Id,
       Th.Day_Kind,
       Th.Shift_Begin_Time,
       Th.Shift_End_Time,
       Th.Input_Border,
       Th.Output_Border)
      select Qr.Company_Id,
             Qr.Filial_Id,
             Staff_Id,
             Trunc(Qr.Input_Border) + level - 1 Interval_Date,
             Qr.Timesheet_Id,
             Qr.Day_Kind,
             Qr.Shift_Begin_Time,
             Qr.Shift_End_Time,
             Qr.Input_Border,
             Qr.Output_Border
        from (select Tt.*
                from Htt_Timesheets Tt
               where (Tt.Company_Id, Tt.Filial_Id, Tt.Timesheet_Id) in
                     (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                        from Htt_Dirty_Timesheets Dt)) Qr
      connect by level <= Trunc(Qr.Output_Border) - Trunc(Qr.Input_Border) + 1
             and Qr.Timesheet_Id = prior Qr.Timesheet_Id
             and prior Sys_Guid() is not null
             and Trunc(Qr.Input_Border) + level - 1 < Qr.Output_Border;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Plans is
    r_Timesheet     Htt_Timesheets%rowtype;
    r_Swapped_Date  Htt_Change_Days%rowtype;
    v_Swap_Distance number := 0;
    v_Weights_Sum   number;
    v_Weights       Htt_Pref.Interval_Weight_Nt;
  
    --------------------------------------------------
    Procedure Push_Weights
    (
      p_Weights          in out nocopy Htt_Pref.Interval_Weight_Nt,
      p_Weights_Sum      in out number,
      i_Interval_Begin   date,
      i_Interval_End     date,
      i_Weight           number,
      i_Break_Enabled    varchar2,
      i_Break_Begin_Time date,
      i_Break_End_Time   date
    ) is
      v_Weight Htt_Pref.Interval_Weight_Rt;
    begin
      v_Weight.Begin_Time := i_Interval_Begin;
      v_Weight.End_Time   := i_Interval_End;
      v_Weight.Weight     := i_Weight;
    
      if i_Break_Enabled = 'Y' and v_Weight.Begin_Time < i_Break_Begin_Time and
         v_Weight.End_Time > i_Break_End_Time then
      
        v_Weight.End_Time := i_Break_Begin_Time;
      
        p_Weights.Extend;
        p_Weights(p_Weights.Count) := v_Weight;
      
        p_Weights_Sum := p_Weights_Sum +
                         v_Weight.Weight *
                         Htt_Util.Time_Diff(i_Time1 => v_Weight.End_Time,
                                            i_Time2 => v_Weight.Begin_Time);
      
        v_Weight.Begin_Time := i_Break_End_Time;
        v_Weight.End_Time   := i_Interval_End;
      elsif i_Break_Begin_Time <= v_Weight.Begin_Time and i_Break_End_Time >= v_Weight.End_Time then
        return;
      elsif i_Break_Enabled = 'Y' then
        if i_Break_Begin_Time between v_Weight.Begin_Time and v_Weight.End_Time then
          v_Weight.End_Time := i_Break_Begin_Time;
        end if;
      
        if i_Break_End_Time between v_Weight.Begin_Time and v_Weight.End_Time then
          v_Weight.Begin_Time := i_Break_End_Time;
        end if;
      end if;
    
      if v_Weight.Begin_Time < v_Weight.End_Time then
        p_Weights.Extend;
        p_Weights(p_Weights.Count) := v_Weight;
      
        p_Weights_Sum := p_Weights_Sum +
                         v_Weight.Weight *
                         Htt_Util.Time_Diff(i_Time1 => v_Weight.End_Time,
                                            i_Time2 => v_Weight.Begin_Time);
      end if;
    end;
  begin
    for r in (select d.*,
                     t.Timesheet_Id,
                     t.Schedule_Id,
                     (select count(*)
                        from Htt_Schedule_Day_Marks Dm
                       where Dm.Company_Id = t.Company_Id
                         and Dm.Filial_Id = t.Filial_Id
                         and Dm.Schedule_Id = t.Schedule_Id
                         and Dm.Schedule_Date = Nvl(d.Swapped_Date, d.Change_Date)) Planned_Marks,
                     t.Schedule_Kind
                from Htt_Change_Days d
                join Htt_Timesheets t
                  on d.Company_Id = t.Company_Id
                 and d.Filial_Id = t.Filial_Id
                 and d.Staff_Id = t.Staff_Id
                 and d.Change_Date = t.Timesheet_Date
               where exists (select *
                        from Htt_Dirty_Timesheets Dt
                       where t.Company_Id = Dt.Company_Id
                         and t.Filial_Id = Dt.Filial_Id
                         and t.Timesheet_Id = Dt.Timesheet_Id)
                 and exists (select *
                        from Htt_Plan_Changes Pc
                       where Pc.Company_Id = d.Company_Id
                         and Pc.Filial_Id = d.Filial_Id
                         and Pc.Change_Id = d.Change_Id
                         and Pc.Status = Htt_Pref.c_Change_Status_Completed))
    loop
      if r.Day_Kind is null then
        r_Swapped_Date := z_Htt_Change_Days.Load(i_Company_Id  => r.Company_Id,
                                                 i_Filial_Id   => r.Filial_Id,
                                                 i_Staff_Id    => r.Staff_Id,
                                                 i_Change_Date => r.Swapped_Date,
                                                 i_Change_Id   => r.Change_Id);
      
        v_Swap_Distance := r.Change_Date - r.Swapped_Date;
      
        r.Day_Kind         := r_Swapped_Date.Day_Kind;
        r.Begin_Time       := r_Swapped_Date.Begin_Time + v_Swap_Distance;
        r.End_Time         := r_Swapped_Date.End_Time + v_Swap_Distance;
        r.Break_Enabled    := r_Swapped_Date.Break_Enabled;
        r.Break_Begin_Time := r_Swapped_Date.Break_Begin_Time + v_Swap_Distance;
        r.Break_End_Time   := r_Swapped_Date.Break_End_Time + v_Swap_Distance;
        r.Plan_Time        := r_Swapped_Date.Plan_Time;
        r.Full_Time        := r_Swapped_Date.Full_Time;
      end if;
    
      z_Htt_Timesheets.Update_One(i_Company_Id       => r.Company_Id,
                                  i_Filial_Id        => r.Filial_Id,
                                  i_Timesheet_Id     => r.Timesheet_Id,
                                  i_Day_Kind         => Option_Varchar2(r.Day_Kind),
                                  i_Begin_Time       => Option_Date(r.Begin_Time),
                                  i_End_Time         => Option_Date(r.End_Time),
                                  i_Break_Enabled    => Option_Varchar2(r.Break_Enabled),
                                  i_Break_Begin_Time => Option_Date(r.Break_Begin_Time),
                                  i_Break_End_Time   => Option_Date(r.Break_End_Time),
                                  i_Plan_Time        => Option_Number(r.Plan_Time),
                                  i_Full_Time        => Option_Number(r.Full_Time),
                                  i_Planned_Marks    => Option_Number(r.Planned_Marks),
                                  i_Done_Marks       => Option_Number(0),
                                  i_Shift_Begin_Time => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Shift_End_Time   => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Input_Border     => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end,
                                  i_Output_Border    => case
                                                          when r.Schedule_Kind =
                                                               Htt_Pref.c_Schedule_Kind_Flexible then
                                                           Option_Date(null)
                                                          else
                                                           null
                                                        end);
    
      delete Htt_Timesheet_Marks q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Timesheet_Id = r.Timesheet_Id;
    
      delete Htt_Timesheet_Weights q
       where q.Company_Id = r.Company_Id
         and q.Filial_Id = r.Filial_Id
         and q.Timesheet_Id = r.Timesheet_Id;
    
      if r.Swapped_Date is not null then
        r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => r.Company_Id,
                                          i_Filial_Id      => r.Filial_Id,
                                          i_Staff_Id       => r.Staff_Id,
                                          i_Timesheet_Date => r.Swapped_Date);
      
        r.Schedule_Id := Nvl(r_Timesheet.Schedule_Id, r.Schedule_Id);
      
        v_Swap_Distance := r.Change_Date - r.Swapped_Date;
      end if;
    
      if Is_Individual_Staff_Schedule(i_Company_Id  => r.Company_Id,
                                      i_Filial_Id   => r.Filial_Id,
                                      i_Schedule_Id => r.Schedule_Id) then
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time + v_Swap_Distance,
                 Dm.End_Time + v_Swap_Distance,
                 'N'
            from Htt_Staff_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Staff_Id = r.Staff_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        select count(*)
          into r.Planned_Marks
          from Htt_Staff_Schedule_Day_Marks Sd
         where Sd.Company_Id = r.Company_Id
           and Sd.Filial_Id = r.Filial_Id
           and Sd.Staff_Id = r.Staff_Id
           and Sd.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      
        z_Htt_Timesheets.Update_One(i_Company_Id    => r.Company_Id,
                                    i_Filial_Id     => r.Filial_Id,
                                    i_Timesheet_Id  => r.Timesheet_Id,
                                    i_Planned_Marks => Option_Number(r.Planned_Marks));
      else
        insert into Htt_Timesheet_Marks Tm
          (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time + v_Swap_Distance,
                 Dm.End_Time + v_Swap_Distance,
                 'N'
            from Htt_Schedule_Day_Marks Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Schedule_Id = r.Schedule_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      end if;
    
      if r.Swapped_Date is not null then
        insert into Htt_Timesheet_Weights
          (Company_Id, Filial_Id, Timesheet_Id, Begin_Time, End_Time, Weight, Coef)
          select Dm.Company_Id, --
                 Dm.Filial_Id,
                 r.Timesheet_Id,
                 Dm.Begin_Time + v_Swap_Distance,
                 Dm.End_Time + v_Swap_Distance,
                 Dm.Weight,
                 Dm.Coef
            from Htt_Schedule_Day_Weights Dm
           where Dm.Company_Id = r.Company_Id
             and Dm.Filial_Id = r.Filial_Id
             and Dm.Schedule_Id = r.Schedule_Id
             and Dm.Schedule_Date = Nvl(r.Swapped_Date, r.Change_Date);
      elsif r.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) then
      
        v_Weights_Sum := 0;
        v_Weights     := Htt_Pref.Interval_Weight_Nt();
      
        for Wt in (select r.Change_Date + Numtodsinterval(w.Begin_Time, 'minute') Interval_Begin,
                          r.Change_Date + Numtodsinterval(w.End_Time, 'minute') Interval_End,
                          w.Weight
                     from Htt_Change_Day_Weights w
                    where w.Company_Id = r.Company_Id
                      and w.Filial_Id = r.Filial_Id
                      and w.Staff_Id = r.Staff_Id
                      and w.Change_Date = r.Change_Date
                      and w.Change_Id = r.Change_Id)
        loop
          Push_Weights(p_Weights          => v_Weights,
                       p_Weights_Sum      => v_Weights_Sum,
                       i_Interval_Begin   => Wt.Interval_Begin,
                       i_Interval_End     => Wt.Interval_End,
                       i_Weight           => Wt.Weight,
                       i_Break_Enabled    => r.Break_Enabled,
                       i_Break_Begin_Time => r.Break_Begin_Time,
                       i_Break_End_Time   => r.Break_End_Time);
        end loop;
      
        for i in 1 .. v_Weights.Count
        loop
          z_Htt_Timesheet_Weights.Insert_One(i_Company_Id   => r.Company_Id,
                                             i_Filial_Id    => r.Filial_Id,
                                             i_Timesheet_Id => r.Timesheet_Id,
                                             i_Begin_Time   => v_Weights(i).Begin_Time,
                                             i_End_Time     => v_Weights(i).End_Time,
                                             i_Weight       => v_Weights(i).Weight,
                                             i_Coef         => r.Plan_Time * 60 / v_Weights_Sum);
        end loop;
      end if;
    
      Update_Border_Timesheet_Shifts(i_Company_Id   => r.Company_Id,
                                     i_Filial_Id    => r.Filial_Id,
                                     i_Staff_Id     => r.Staff_Id,
                                     i_Begin_Date   => r.Change_Date,
                                     i_End_Date     => r.Change_Date,
                                     i_Add_Callback => false);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Request_Facts is
  begin
    -- remove old requests
    delete Htt_Timesheet_Requests Tr
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tr.Company_Id
               and t.Filial_Id = Tr.Filial_Id
               and t.Timesheet_Id = Tr.Timesheet_Id);
  
    -- add requests according to new plan
    insert into Htt_Timesheet_Requests Tr
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date = t.Timesheet_Date
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type in
             (Htt_Pref.c_Request_Type_Full_Day, Htt_Pref.c_Request_Type_Multiple_Days);
  
    insert into Htt_Timesheet_Requests Tr
      select distinct t.Company_Id, t.Filial_Id, t.Timesheet_Id, Rq.Request_Id
        from Htt_Timesheets t
        join Htt_Request_Helpers Rh
          on Rh.Company_Id = t.Company_Id
         and Rh.Filial_Id = t.Filial_Id
         and Rh.Staff_Id = t.Staff_Id
         and Rh.Interval_Date between Trunc(t.Shift_Begin_Time) and Trunc(t.Shift_End_Time)
        join Htt_Requests Rq
          on Rq.Company_Id = Rh.Company_Id
         and Rq.Filial_Id = Rh.Filial_Id
         and Rq.Request_Id = Rh.Request_Id
       where exists (select *
                from Htt_Dirty_Timesheets Dt
               where t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
         and Rq.Status = Htt_Pref.c_Request_Status_Completed
         and Rq.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day
         and Rq.Begin_Time < t.Shift_End_Time
         and Rq.End_Time >= t.Shift_Begin_Time;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revise_Timesheet_Track_Facts(p_Tracks in out Htt_Pref.Track_Nt) is
    v_Old_Tracks Htt_Pref.Track_Nt;
  begin
    -- remove old tracks
    delete Htt_Timesheet_Tracks Tt
     where exists (select *
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tt.Company_Id
               and t.Filial_Id = Tt.Filial_Id
               and t.Timesheet_Id = Tt.Timesheet_Id)
    returning Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id bulk collect into v_Old_Tracks;
  
    -- add new tracks according to new plan
    insert into Htt_Timesheet_Tracks Tt
      (Company_Id,
       Filial_Id,
       Timesheet_Id,
       Track_Id,
       Track_Datetime,
       Track_Type,
       Track_Used,
       Trans_Input,
       Trans_Output,
       Trans_Check)
      select Tr.Company_Id,
             Tr.Filial_Id,
             t.Timesheet_Id,
             Tr.Track_Id,
             Tr.Track_Datetime,
             Tr.Track_Type,
             'Y' Track_Used,
             Tr.Trans_Input,
             Tr.Trans_Output,
             Tr.Trans_Check
        from Htt_Timesheets t
        join Htt_Tracks Tr
          on Tr.Company_Id = t.Company_Id
         and Tr.Filial_Id = t.Filial_Id
         and Tr.Person_Id = t.Employee_Id
         and Tr.Track_Date between Trunc(t.Input_Border) and Trunc(t.Output_Border)
         and Tr.Track_Datetime >= t.Input_Border
         and Tr.Track_Datetime < t.Output_Border
         and Tr.Is_Valid = 'Y'
       where (t.Company_Id, t.Filial_Id, t.Timesheet_Id) in
             (select Dt.Company_Id, Dt.Filial_Id, Dt.Timesheet_Id
                from Htt_Dirty_Timesheets Dt);
  
    select Tt.Company_Id, Tt.Filial_Id, Tt.Track_Id
      bulk collect
      into p_Tracks
      from Htt_Timesheet_Tracks Tt
      join Htt_Dirty_Timesheets Dt
        on Tt.Company_Id = Dt.Company_Id
       and Tt.Filial_Id = Dt.Filial_Id
       and Tt.Timesheet_Id = Dt.Timesheet_Id
    union
    select Ot.Company_Id, Ot.Filial_Id, Ot.Track_Id
      from table(v_Old_Tracks) Ot;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Approve_Timesheet_Marks is
  begin
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'N'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id);
  
    update Htt_Timesheet_Marks Tm
       set Tm.Done = 'Y'
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where t.Company_Id = Tm.Company_Id
               and t.Filial_Id = Tm.Filial_Id
               and t.Timesheet_Id = Tm.Timesheet_Id
               and exists
             (select *
                      from Htt_Timesheet_Tracks Tt
                     where Tt.Company_Id = t.Company_Id
                       and Tt.Filial_Id = t.Filial_Id
                       and Tt.Timesheet_Id = t.Timesheet_Id
                       and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                       and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time));
  
    update Htt_Timesheets t
       set t.Done_Marks =
           (select count(*)
              from Htt_Timesheet_Marks Tm
             where Tm.Company_Id = t.Company_Id
               and Tm.Filial_Id = t.Filial_Id
               and Tm.Timesheet_Id = t.Timesheet_Id
               and Tm.Done = 'Y')
     where exists (select 1
              from Htt_Dirty_Timesheets Dt
             where Dt.Company_Id = t.Company_Id
               and Dt.Filial_Id = t.Filial_Id
               and Dt.Timesheet_Id = t.Timesheet_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Revised_Timesheets is
    v_Tracks Htt_Pref.Track_Nt;
  
    -------------------------------------------------- 
    Procedure Track_Update_Status is
    begin
      forall i in 1 .. v_Tracks.Count
        update Htt_Tracks t
           set t.Status =
               (select case
                          when Track_Count = 0 then
                           Htt_Pref.c_Track_Status_Draft
                          when Used_Count = 0 then
                           Htt_Pref.c_Track_Status_Not_Used
                          when Used_Count < Track_Count then
                           Htt_Pref.c_Track_Status_Partially_Used
                          else
                           Htt_Pref.c_Track_Status_Used
                        end Status
                  from (select count(*) Track_Count, --
                               count(Nullif(Tt.Track_Used, 'N')) Used_Count
                          from Htt_Tracks q
                          join Htt_Timesheet_Tracks Tt
                            on q.Company_Id = Tt.Company_Id
                           and q.Filial_Id = Tt.Filial_Id
                           and q.Track_Id = Tt.Track_Id
                         where q.Company_Id = v_Tracks(i).Company_Id
                           and q.Filial_Id = v_Tracks(i).Filial_Id
                           and q.Track_Id = v_Tracks(i).Track_Id))
         where t.Company_Id = v_Tracks(i).Company_Id
           and t.Filial_Id = v_Tracks(i).Filial_Id
           and t.Track_Id = v_Tracks(i).Track_Id;
    end;
  begin
    Revise_Timesheet_Plans;
  
    Adjust_Flexible_Shifts;
  
    delete Htt_Dirty_Timesheets Dt
     where Dt.Locked = 'Y';
  
    Timesheet_Helpers_Save;
  
    Revise_Timesheet_Request_Facts;
  
    Revise_Timesheet_Track_Facts(v_Tracks);
  
    Approve_Timesheet_Marks;
  
    Gen_Timesheet_Facts;
  
    Track_Update_Status;
  
    -- need to remove
    delete Htt_Dirty_Timesheets;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Change_Timesheet_Plans
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Change_Id  number
  ) is
    r_Change       Htt_Plan_Changes%rowtype;
    v_Change_Dates Array_Date;
  begin
    r_Change := z_Htt_Plan_Changes.Lock_Load(i_Company_Id => i_Company_Id,
                                             i_Filial_Id  => i_Filial_Id,
                                             i_Change_Id  => i_Change_Id);
  
    select Cd.Change_Date
      bulk collect
      into v_Change_Dates
      from Htt_Change_Days Cd
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Change_Id = i_Change_Id;
  
    if r_Change.Status = Htt_Pref.c_Change_Status_Completed then
      Htt_Util.Assert_Timesheet_Locks(i_Company_Id => i_Company_Id,
                                      i_Filial_Id  => i_Filial_Id,
                                      i_Staff_Id   => r_Change.Staff_Id,
                                      i_Dates      => v_Change_Dates);
    
      Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => r_Change.Staff_Id,
                            i_Dates      => v_Change_Dates);
    else
      -- works when plan change is cancelled from completed status
      for r in (select t.*
                  from Htt_Timesheets t
                 where t.Company_Id = i_Company_Id
                   and t.Filial_Id = i_Filial_Id
                   and t.Staff_Id = r_Change.Staff_Id
                   and t.Timesheet_Date member of v_Change_Dates)
      loop
        Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                           i_Filial_Id      => i_Filial_Id,
                           i_Staff_Id       => r.Staff_Id,
                           i_Schedule_Id    => r.Schedule_Id,
                           i_Calendar_Id    => r.Calendar_Id,
                           i_Timesheet_Date => r.Timesheet_Date,
                           i_Schedule_Kind  => r.Schedule_Kind,
                           i_Track_Duration => r.Track_Duration / 60,
                           i_Count_Late     => r.Count_Late,
                           i_Count_Early    => r.Count_Early,
                           i_Count_Lack     => r.Count_Lack,
                           i_Count_Free     => r.Count_Free);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Only_Insert boolean := false
  ) is
  begin
    if not i_Only_Insert then
      delete Htt_Timesheet_Marks q
       where q.Company_Id = i_Timesheet.Company_Id
         and q.Filial_Id = i_Timesheet.Filial_Id
         and q.Timesheet_Id = i_Timesheet.Timesheet_Id;
    end if;
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             i_Timesheet.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Timesheet.Company_Id
         and Dm.Filial_Id = i_Timesheet.Filial_Id
         and Dm.Schedule_Id = i_Timesheet.Schedule_Id
         and Dm.Schedule_Date = i_Timesheet.Timesheet_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Marks_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             t.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             'N'
        from Htt_Timesheets t
        join Htt_Schedule_Day_Marks Dm
          on Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = t.Schedule_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Staff_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Staff_Id = t.Staff_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Timesheet_Marks_Save_Individual
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Robot_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Marks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id in
           (select t.Timesheet_Id
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date);
  
    insert into Htt_Timesheet_Marks Tm
      (Tm.Company_Id, Tm.Filial_Id, Tm.Timesheet_Id, Tm.Begin_Time, Tm.End_Time, Tm.Done)
      select t.Company_Id, t.Filial_Id, t.Timesheet_Id, Dm.Begin_Time, Dm.End_Time, 'N'
        from Htt_Timesheets t
        join Htt_Robot_Schedule_Day_Marks Dm
          on Dm.Company_Id = t.Company_Id
         and Dm.Filial_Id = t.Filial_Id
         and Dm.Robot_Id = i_Robot_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Weights_Save
  (
    i_Timesheet   Htt_Timesheets%rowtype,
    i_Only_Insert boolean := false
  ) is
  begin
    if not i_Only_Insert then
      delete Htt_Timesheet_Weights q
       where q.Company_Id = i_Timesheet.Company_Id
         and q.Filial_Id = i_Timesheet.Filial_Id
         and q.Timesheet_Id = i_Timesheet.Timesheet_Id;
    end if;
  
    insert into Htt_Timesheet_Weights
      (Company_Id, Filial_Id, Timesheet_Id, Begin_Time, End_Time, Weight, Coef)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             i_Timesheet.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             Dm.Weight,
             Dm.Coef
        from Htt_Schedule_Day_Weights Dm
       where Dm.Company_Id = i_Timesheet.Company_Id
         and Dm.Filial_Id = i_Timesheet.Filial_Id
         and Dm.Schedule_Id = i_Timesheet.Schedule_Id
         and Dm.Schedule_Date = i_Timesheet.Timesheet_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Weights_Save
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
  begin
    delete Htt_Timesheet_Weights q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select *
              from Htt_Timesheets t
             where t.Company_Id = i_Company_Id
               and t.Filial_Id = i_Filial_Id
               and t.Staff_Id = i_Staff_Id
               and t.Timesheet_Date between i_Begin_Date and i_End_Date
               and t.Timesheet_Id = q.Timesheet_Id);
  
    insert into Htt_Timesheet_Weights
      (Company_Id, Filial_Id, Timesheet_Id, Begin_Time, End_Time, Weight, Coef)
      select Dm.Company_Id, --
             Dm.Filial_Id,
             t.Timesheet_Id,
             Dm.Begin_Time,
             Dm.End_Time,
             Dm.Weight,
             Dm.Coef
        from Htt_Timesheets t
        join Htt_Schedule_Day_Weights Dm
          on Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = t.Schedule_Id
         and Dm.Schedule_Date = t.Timesheet_Date
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and i_End_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swap
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Change_Date date,
    i_Change_Id   number,
    i_Timesheet   Htt_Timesheets%rowtype
  ) is
    v_Swap_Distance number := i_Change_Date - i_Timesheet.Timesheet_Date;
  begin
    z_Htt_Change_Days.Update_One(i_Company_Id       => i_Company_Id,
                                 i_Filial_Id        => i_Filial_Id,
                                 i_Staff_Id         => i_Staff_Id,
                                 i_Change_Date      => i_Change_Date,
                                 i_Change_Id        => i_Change_Id,
                                 i_Day_Kind         => Option_Varchar2(i_Timesheet.Day_Kind),
                                 i_Swapped_Date     => Option_Date(i_Timesheet.Timesheet_Date),
                                 i_Begin_Time       => Option_Date(i_Timesheet.Begin_Time +
                                                                   v_Swap_Distance),
                                 i_End_Time         => Option_Date(i_Timesheet.End_Time +
                                                                   v_Swap_Distance),
                                 i_Break_Enabled    => Option_Varchar2(i_Timesheet.Break_Enabled),
                                 i_Break_Begin_Time => Option_Date(i_Timesheet.Break_Begin_Time +
                                                                   v_Swap_Distance),
                                 i_Break_End_Time   => Option_Date(i_Timesheet.Break_End_Time +
                                                                   v_Swap_Distance),
                                 i_Plan_Time        => Option_Number(i_Timesheet.Plan_Time),
                                 i_Full_Time        => Option_Number(i_Timesheet.Full_Time));
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Timesheet.Staff_Id,
                          i_Dates      => Array_Date(i_Change_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Update_Timesheet_Plan_Swaps
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    v_Dirty_Dates Array_Date;
  begin
    update Htt_Change_Days Cd
       set (Cd.Day_Kind,
            Cd.Begin_Time,
            Cd.End_Time,
            Cd.Break_Enabled,
            Cd.Break_Begin_Time,
            Cd.Break_End_Time,
            Cd.Plan_Time,
            Cd.Full_Time) =
           (select t.Day_Kind,
                   t.Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_Enabled,
                   t.Break_Begin_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Break_End_Time + (Cd.Change_Date - Cd.Swapped_Date),
                   t.Plan_Time,
                   t.Full_Time
              from Htt_Timesheets t
             where t.Company_Id = Cd.Company_Id
               and t.Filial_Id = Cd.Filial_Id
               and t.Staff_Id = Cd.Staff_Id
               and t.Timesheet_Date = Cd.Swapped_Date)
     where Cd.Company_Id = i_Company_Id
       and Cd.Filial_Id = i_Filial_Id
       and Cd.Staff_Id = i_Staff_Id
       and Cd.Swapped_Date between i_Begin_Date and i_End_Date
    returning Cd.Change_Date bulk collect into v_Dirty_Dates;
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Dates      => v_Dirty_Dates);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Delete(i_Timesheet Htt_Timesheets%rowtype) is
    r_Track Htt_Tracks%rowtype;
  
    v_Timesheet_Id number;
  
    v_Track_Ids     Array_Number;
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Id_Aat;
  begin
    delete Htt_Timesheet_Tracks q
     where q.Company_Id = i_Timesheet.Company_Id
       and q.Filial_Id = i_Timesheet.Filial_Id
       and q.Timesheet_Id = i_Timesheet.Timesheet_Id
    returning q.Track_Id bulk collect into v_Track_Ids;
  
    z_Htt_Timesheets.Delete_One(i_Company_Id   => i_Timesheet.Company_Id,
                                i_Filial_Id    => i_Timesheet.Filial_Id,
                                i_Timesheet_Id => i_Timesheet.Timesheet_Id);
  
    for i in 1 .. v_Track_Ids.Count
    loop
      r_Track := z_Htt_Tracks.Take(i_Company_Id => i_Timesheet.Company_Id,
                                   i_Filial_Id  => i_Timesheet.Filial_Id,
                                   i_Track_Id   => v_Track_Ids(i));
    
      if r_Track.Is_Valid = 'Y' then
        v_Timesheet_Ids := Find_Track_Timesheets(i_Company_Id     => i_Timesheet.Company_Id,
                                                 i_Filial_Id      => i_Timesheet.Filial_Id,
                                                 i_Staff_Id       => i_Timesheet.Staff_Id,
                                                 i_Track_Datetime => r_Track.Track_Datetime);
      
        for j in 1 .. v_Timesheet_Ids.Count
        loop
          f_Timesheet_Sets(v_Timesheet_Ids(j)) := true;
        end loop;
      end if;
    end loop;
  
    v_Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet_Id is not null
    loop
      Make_Dirty_Timesheet(i_Company_Id   => i_Timesheet.Company_Id,
                           i_Filial_Id    => i_Timesheet.Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Id);
    
      v_Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Function Get_Blocking_Timebook
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) return Hpr_Timebooks%rowtype is
    r_Locked_Date Hpr_Timesheet_Locks%rowtype;
  begin
    r_Locked_Date := z_Hpr_Timesheet_Locks.Load(i_Company_Id     => i_Company_Id,
                                                i_Filial_Id      => i_Filial_Id,
                                                i_Staff_Id       => i_Staff_Id,
                                                i_Timesheet_Date => i_Timesheet_Date);
  
    return z_Hpr_Timebooks.Load(i_Company_Id  => r_Locked_Date.Company_Id,
                                i_Filial_Id   => r_Locked_Date.Filial_Id,
                                i_Timebook_Id => r_Locked_Date.Timebook_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Function Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) return Htt_Timesheets%rowtype is
    r_Schedule_Day       Htt_Schedule_Days%rowtype;
    r_Schedule           Htt_Schedules%rowtype;
    r_Staff_Schedule_Day Htt_Staff_Schedule_Days%rowtype;
    r_Robot_Schedule_Day Htt_Robot_Schedule_Days%rowtype;
    r_Schedule_Registry  Htt_Schedule_Registries%rowtype;
    r_Timebook           Hpr_Timebooks%rowtype;
    result               Htt_Timesheets%rowtype;
    v_Planned_Count      number;
  
    --------------------------------------------------
    Function Get_Robot_Schedule_Day
    (
      i_Company_Id        number,
      i_Filial_Id         number,
      i_Staff_Id          number,
      i_Robot_Schedule_Id number,
      i_Schedule_Date     date
    ) return Htt_Robot_Schedule_Days%rowtype is
      result Htt_Robot_Schedule_Days%rowtype;
    begin
      select p.*
        into result
        from Hpd_Agreements_Cache q
        join Htt_Robot_Schedule_Days p
          on p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Robot_Id = q.Robot_Id
         and p.Schedule_Date = i_Schedule_Date
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.Staff_Id = i_Staff_Id
         and q.Schedule_Id = i_Robot_Schedule_Id
         and i_Schedule_Date between q.Begin_Date and q.End_Date;
    
      return result;
    exception
      when No_Data_Found then
        return null;
    end;
  begin
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => i_Company_Id,
                                   i_Filial_Id      => i_Filial_Id,
                                   i_Staff_Id       => i_Staff_Id,
                                   i_Timesheet_Date => i_Timesheet_Date) then
      r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                          i_Filial_Id      => i_Filial_Id,
                                          i_Staff_Id       => i_Staff_Id,
                                          i_Timesheet_Date => i_Timesheet_Date);
    
      Htt_Error.Raise_001(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                    i_Filial_Id  => i_Filial_Id,
                                                                    i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date  => i_Timesheet_Date,
                          i_Timebook_Number => r_Timebook.Timebook_Number,
                          i_Timebook_Month  => r_Timebook.Month);
    end if;
  
    if i_Schedule_Id =
       Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule) then
      r_Staff_Schedule_Day := z_Htt_Staff_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                             i_Filial_Id     => i_Filial_Id,
                                                             i_Staff_Id      => i_Staff_Id,
                                                             i_Schedule_Date => i_Timesheet_Date);
    
      if r_Staff_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Staff_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Staff_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Staff_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Staff_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Staff_Id = i_Staff_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Staff_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Staff_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Staff_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Staff_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Staff_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Staff_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Staff_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Staff_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Staff_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Staff_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Staff_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Staff_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    elsif i_Schedule_Id =
          Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                               i_Filial_Id  => i_Filial_Id,
                               i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      r_Robot_Schedule_Day := Get_Robot_Schedule_Day(i_Company_Id        => i_Company_Id,
                                                     i_Filial_Id         => i_Filial_Id,
                                                     i_Staff_Id          => i_Staff_Id,
                                                     i_Robot_Schedule_Id => i_Schedule_Id,
                                                     i_Schedule_Date     => i_Timesheet_Date);
    
      if r_Robot_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      r_Schedule_Registry := z_Htt_Schedule_Registries.Load(i_Company_Id  => r_Robot_Schedule_Day.Company_Id,
                                                            i_Filial_Id   => r_Robot_Schedule_Day.Filial_Id,
                                                            i_Registry_Id => r_Robot_Schedule_Day.Registry_Id);
    
      select count(*)
        into v_Planned_Count
        from Htt_Robot_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Robot_Id = r_Robot_Schedule_Day.Robot_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Robot_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Robot_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Robot_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Robot_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Robot_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Robot_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Robot_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Robot_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Robot_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Robot_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Robot_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Robot_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => r_Schedule_Registry.Track_Duration * 60,
                            i_Schedule_Kind       => r_Schedule_Registry.Schedule_Kind,
                            i_Count_Late          => r_Schedule_Registry.Count_Late,
                            i_Count_Early         => r_Schedule_Registry.Count_Early,
                            i_Count_Lack          => r_Schedule_Registry.Count_Lack,
                            i_Count_Free          => r_Schedule_Registry.Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule_Registry.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule_Registry.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule_Registry.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule_Registry.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule_Registry.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule_Registry.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule_Registry.End_Early_Time * 60);
    else
      r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Schedule_Id => i_Schedule_Id);
    
      r_Schedule_Day := z_Htt_Schedule_Days.Take(i_Company_Id    => i_Company_Id,
                                                 i_Filial_Id     => i_Filial_Id,
                                                 i_Schedule_Id   => i_Schedule_Id,
                                                 i_Schedule_Date => i_Timesheet_Date);
    
      if r_Schedule_Day.Company_Id is null then
        return null;
      end if;
    
      select count(*)
        into v_Planned_Count
        from Htt_Schedule_Day_Marks Dm
       where Dm.Company_Id = i_Company_Id
         and Dm.Filial_Id = i_Filial_Id
         and Dm.Schedule_Id = i_Schedule_Id
         and Dm.Schedule_Date = i_Timesheet_Date;
    
      z_Htt_Timesheets.Init(p_Row                 => result,
                            i_Company_Id          => i_Company_Id,
                            i_Filial_Id           => i_Filial_Id,
                            i_Timesheet_Date      => i_Timesheet_Date,
                            i_Staff_Id            => i_Staff_Id,
                            i_Schedule_Id         => i_Schedule_Id,
                            i_Calendar_Id         => i_Calendar_Id,
                            i_Day_Kind            => r_Schedule_Day.Day_Kind,
                            i_Begin_Time          => r_Schedule_Day.Begin_Time,
                            i_End_Time            => r_Schedule_Day.End_Time,
                            i_Shift_Begin_Time    => r_Schedule_Day.Shift_Begin_Time,
                            i_Shift_End_Time      => r_Schedule_Day.Shift_End_Time,
                            i_Input_Border        => r_Schedule_Day.Input_Border,
                            i_Output_Border       => r_Schedule_Day.Output_Border,
                            i_Break_Enabled       => r_Schedule_Day.Break_Enabled,
                            i_Break_Begin_Time    => r_Schedule_Day.Break_Begin_Time,
                            i_Break_End_Time      => r_Schedule_Day.Break_End_Time,
                            i_Full_Time           => r_Schedule_Day.Full_Time * 60,
                            i_Plan_Time           => r_Schedule_Day.Plan_Time * 60,
                            i_Track_Duration      => i_Track_Duration * 60,
                            i_Schedule_Kind       => i_Schedule_Kind,
                            i_Count_Late          => i_Count_Late,
                            i_Count_Early         => i_Count_Early,
                            i_Count_Lack          => i_Count_Lack,
                            i_Count_Free          => i_Count_Free,
                            i_Gps_Turnout_Enabled => r_Schedule.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r_Schedule.Gps_Use_Location,
                            i_Gps_Max_Interval    => r_Schedule.Gps_Max_Interval,
                            i_Planned_Marks       => v_Planned_Count,
                            i_Done_Marks          => 0,
                            i_Allowed_Late_Time   => r_Schedule.Allowed_Late_Time * 60,
                            i_Allowed_Early_Time  => r_Schedule.Allowed_Early_Time * 60,
                            i_Begin_Late_Time     => r_Schedule.Begin_Late_Time * 60,
                            i_End_Early_Time      => r_Schedule.End_Early_Time * 60);
    end if;
  
    return result;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Check_Timesheet_Lock
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Begin_Date date,
    i_End_Date   date
  ) is
    r_Timebook    Hpr_Timebooks%rowtype;
    v_Locked_Date date;
  begin
    select Tl.Timesheet_Date
      into v_Locked_Date
      from Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date between i_Begin_Date and i_End_Date
       and Rownum = 1;
  
    r_Timebook := Get_Blocking_Timebook(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => v_Locked_Date);
  
    Htt_Error.Raise_002(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                  i_Filial_Id  => i_Filial_Id,
                                                                  i_Staff_Id   => i_Staff_Id),
                        i_Timesheet_Date  => v_Locked_Date,
                        i_Timebook_Number => r_Timebook.Timebook_Number,
                        i_Timebook_Month  => r_Timebook.Month);
  exception
    when No_Data_Found then
      null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Schedule_Id    number,
    i_Calendar_Id    number,
    i_Timesheet_Date date,
    i_Track_Duration number,
    i_Schedule_Kind  varchar2,
    i_Count_Late     varchar2,
    i_Count_Early    varchar2,
    i_Count_Lack     varchar2,
    i_Count_Free     varchar2
  ) is
    r_Plan         Htt_Timesheets%rowtype;
    r_Timesheet    Htt_Timesheets%rowtype;
    r_Staff        Href_Staffs%rowtype;
    v_Change_Ids   Array_Number;
    v_Change_Dates Array_Date;
  
    -------------------------------------------------- 
    Function Exist_Plan_Swap
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Staff_Id     number,
      i_Swapped_Date date,
      o_Change_Ids   out Array_Number,
      o_Change_Dates out Array_Date
    ) return boolean is
    begin
      select Cd.Change_Id, Cd.Change_Date
        bulk collect
        into o_Change_Ids, o_Change_Dates
        from Htt_Change_Days Cd
       where Cd.Company_Id = i_Company_Id
         and Cd.Filial_Id = i_Filial_Id
         and Cd.Staff_Id = i_Staff_Id
         and Cd.Swapped_Date = i_Swapped_Date;
    
      return o_Change_Ids.Count > 0;
    end;
  begin
    z_Href_Staffs.Lock_Only(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Staff_Id   => i_Staff_Id);
  
    r_Plan := Timesheet_Plan(i_Company_Id     => i_Company_Id,
                             i_Filial_Id      => i_Filial_Id,
                             i_Staff_Id       => i_Staff_Id,
                             i_Schedule_Id    => i_Schedule_Id,
                             i_Calendar_Id    => i_Calendar_Id,
                             i_Timesheet_Date => i_Timesheet_Date,
                             i_Track_Duration => i_Track_Duration,
                             i_Schedule_Kind  => i_Schedule_Kind,
                             i_Count_Late     => i_Count_Late,
                             i_Count_Early    => i_Count_Early,
                             i_Count_Lack     => i_Count_Lack,
                             i_Count_Free     => i_Count_Free);
  
    -- delete timesheet when timetable is not set
    if r_Plan.Company_Id is null then
      if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                  i_Filial_Id      => i_Filial_Id,
                                  i_Staff_Id       => i_Staff_Id,
                                  i_Timesheet_Date => i_Timesheet_Date,
                                  o_Timesheet      => r_Timesheet) then
      
        Timesheet_Delete(r_Timesheet);
      end if;
    
      return;
    end if;
  
    if Htt_Util.Exist_Timesheet(i_Company_Id     => i_Company_Id,
                                i_Filial_Id      => i_Filial_Id,
                                i_Staff_Id       => i_Staff_Id,
                                i_Timesheet_Date => i_Timesheet_Date,
                                o_Timesheet      => r_Timesheet) then
      r_Timesheet.Schedule_Id         := r_Plan.Schedule_Id;
      r_Timesheet.Calendar_Id         := r_Plan.Calendar_Id;
      r_Timesheet.Day_Kind            := r_Plan.Day_Kind;
      r_Timesheet.Shift_Begin_Time    := r_Plan.Shift_Begin_Time;
      r_Timesheet.Shift_End_Time      := r_Plan.Shift_End_Time;
      r_Timesheet.Input_Border        := r_Plan.Input_Border;
      r_Timesheet.Output_Border       := r_Plan.Output_Border;
      r_Timesheet.Begin_Time          := r_Plan.Begin_Time;
      r_Timesheet.End_Time            := r_Plan.End_Time;
      r_Timesheet.Break_Enabled       := r_Plan.Break_Enabled;
      r_Timesheet.Break_Begin_Time    := r_Plan.Break_Begin_Time;
      r_Timesheet.Break_End_Time      := r_Plan.Break_End_Time;
      r_Timesheet.Plan_Time           := r_Plan.Plan_Time;
      r_Timesheet.Full_Time           := r_Plan.Full_Time;
      r_Timesheet.Track_Duration      := r_Plan.Track_Duration;
      r_Timesheet.Schedule_Kind       := r_Plan.Schedule_Kind;
      r_Timesheet.Count_Late          := r_Plan.Count_Late;
      r_Timesheet.Count_Early         := r_Plan.Count_Early;
      r_Timesheet.Count_Lack          := r_Plan.Count_Lack;
      r_Timesheet.Count_Free          := r_Plan.Count_Free;
      r_Timesheet.Gps_Turnout_Enabled := r_Plan.Gps_Turnout_Enabled;
      r_Timesheet.Gps_Use_Location    := r_Plan.Gps_Use_Location;
      r_Timesheet.Gps_Max_Interval    := r_Plan.Gps_Max_Interval;
      r_Timesheet.Planned_Marks       := r_Plan.Planned_Marks;
      r_Timesheet.Done_Marks          := r_Plan.Done_Marks;
      r_Timesheet.Allowed_Late_Time   := r_Plan.Allowed_Late_Time;
      r_Timesheet.Allowed_Early_Time  := r_Plan.Allowed_Early_Time;
      r_Timesheet.Begin_Late_Time     := r_Plan.Begin_Late_Time;
      r_Timesheet.End_Early_Time      := r_Plan.End_Early_Time;
    
      z_Htt_Timesheets.Update_Row(r_Timesheet);
    
      Timesheet_Marks_Save(r_Timesheet);
      Timesheet_Weights_Save(r_Timesheet);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Timesheet.Company_Id,
                           i_Filial_Id    => r_Timesheet.Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      if Exist_Plan_Swap(i_Company_Id   => i_Company_Id,
                         i_Filial_Id    => i_Filial_Id,
                         i_Staff_Id     => i_Staff_Id,
                         i_Swapped_Date => i_Timesheet_Date,
                         o_Change_Ids   => v_Change_Ids,
                         o_Change_Dates => v_Change_Dates) then
        for i in 1 .. v_Change_Ids.Count
        loop
          Update_Timesheet_Plan_Swap(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Staff_Id    => i_Staff_Id,
                                     i_Change_Date => v_Change_Dates(i),
                                     i_Change_Id   => v_Change_Ids(i),
                                     i_Timesheet   => r_Timesheet);
        end loop;
      end if;
    else
      r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id);
    
      r_Plan.Company_Id     := i_Company_Id;
      r_Plan.Filial_Id      := i_Filial_Id;
      r_Plan.Timesheet_Id   := Htt_Next.Timesheet_Id;
      r_Plan.Staff_Id       := i_Staff_Id;
      r_Plan.Employee_Id    := r_Staff.Employee_Id;
      r_Plan.Timesheet_Date := i_Timesheet_Date;
    
      z_Htt_Timesheets.Insert_Row(r_Plan);
    
      Timesheet_Marks_Save(i_Timesheet   => r_Plan, --
                           i_Only_Insert => true);
      Timesheet_Weights_Save(i_Timesheet   => r_Plan, --
                             i_Only_Insert => true);
    
      Make_Dirty_Timesheet(i_Company_Id   => r_Plan.Company_Id,
                           i_Filial_Id    => r_Plan.Filial_Id,
                           i_Timesheet_Id => r_Plan.Timesheet_Id);
    end if;
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Timesheet_Date,
                                   i_End_Date   => i_Timesheet_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Schedule_Id = i_Schedule_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Schedule_Id = Sd.Schedule_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Schedule_Days Sd
             join Htt_Schedules s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Schedule_Id = Sd.Schedule_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Schedule_Id = i_Schedule_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    Timesheet_Weights_Save(i_Company_Id => i_Company_Id,
                           i_Filial_Id  => i_Filial_Id,
                           i_Staff_Id   => i_Staff_Id,
                           i_Begin_Date => i_Begin_Date,
                           i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Robot_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    -- maybe just delete all timesheets 
    -- and insert them from source, removing merge statement
    -- need to check if unchanged timesheet_id is needed
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Robot_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Robot_Id = i_Robot_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Robot_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Robot_Id = Sd.Robot_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Robot_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Robot_Id = i_Robot_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Robot_Id   => i_Robot_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Plan_Individual
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    r_Staff Href_Staffs%rowtype;
  begin
    Check_Timesheet_Lock(i_Company_Id => i_Company_Id,
                         i_Filial_Id  => i_Filial_Id,
                         i_Staff_Id   => i_Staff_Id,
                         i_Begin_Date => i_Begin_Date,
                         i_End_Date   => i_End_Date);
  
    r_Staff := z_Href_Staffs.Load(i_Company_Id => i_Company_Id,
                                  i_Filial_Id  => i_Filial_Id,
                                  i_Staff_Id   => i_Staff_Id);
  
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date between i_Begin_Date and i_End_Date
       and not exists (select *
              from Htt_Staff_Schedule_Days Sd
             where Sd.Company_Id = t.Company_Id
               and Sd.Filial_Id = t.Filial_Id
               and Sd.Staff_Id = i_Staff_Id
               and Sd.Schedule_Date = t.Timesheet_Date);
  
    merge into Htt_Timesheets t
    using (select Sd.*,
                  Sd.Plan_Time * 60 Plan_Time_Sec,
                  Sd.Full_Time * 60 Full_Time_Sec,
                  s.Calendar_Id,
                  s.Track_Duration * 60 Track_Duration_Sec,
                  s.Schedule_Kind,
                  s.Count_Late,
                  s.Count_Early,
                  s.Count_Lack,
                  s.Count_Free,
                  s.Gps_Turnout_Enabled,
                  s.Gps_Use_Location,
                  s.Gps_Max_Interval,
                  s.Allowed_Late_Time,
                  s.Allowed_Early_Time,
                  s.Begin_Late_Time,
                  s.End_Early_Time,
                  (select count(*)
                     from Htt_Staff_Schedule_Day_Marks Dm
                    where Dm.Company_Id = Sd.Company_Id
                      and Dm.Filial_Id = Sd.Filial_Id
                      and Dm.Staff_Id = Sd.Staff_Id
                      and Dm.Schedule_Date = Sd.Schedule_Date) Planned_Marks,
                  0 Done_Marks
             from Htt_Staff_Schedule_Days Sd
             join Htt_Schedule_Registries s
               on s.Company_Id = Sd.Company_Id
              and s.Filial_Id = Sd.Filial_Id
              and s.Registry_Id = Sd.Registry_Id
            where Sd.Company_Id = i_Company_Id
              and Sd.Filial_Id = i_Filial_Id
              and Sd.Staff_Id = i_Staff_Id
              and Sd.Schedule_Date between i_Begin_Date and i_End_Date) Src
    on (t.Company_Id = Src.Company_Id --
    and t.Filial_Id = Src.Filial_Id --
    and t.Staff_Id = i_Staff_Id --
    and t.Timesheet_Date = Src.Schedule_Date)
    when matched then
      update
         set t.Schedule_Id         = i_Schedule_Id,
             t.Calendar_Id         = Src.Calendar_Id,
             t.Day_Kind            = Src.Day_Kind,
             t.Begin_Time          = Src.Begin_Time,
             t.End_Time            = Src.End_Time,
             t.Break_Enabled       = Src.Break_Enabled,
             t.Break_Begin_Time    = Src.Break_Begin_Time,
             t.Break_End_Time      = Src.Break_End_Time,
             t.Plan_Time           = Src.Plan_Time_Sec,
             t.Full_Time           = Src.Full_Time_Sec,
             t.Input_Time          = null,
             t.Output_Time         = null,
             t.Track_Duration      = Src.Track_Duration_Sec,
             t.Schedule_Kind       = Src.Schedule_Kind,
             t.Count_Late          = Src.Count_Late,
             t.Count_Early         = Src.Count_Early,
             t.Count_Lack          = Src.Count_Lack,
             t.Count_Free          = Src.Count_Free,
             t.Gps_Turnout_Enabled = Src.Gps_Turnout_Enabled,
             t.Gps_Use_Location    = Src.Gps_Use_Location,
             t.Gps_Max_Interval    = Src.Gps_Max_Interval,
             t.Shift_Begin_Time    = Src.Shift_Begin_Time,
             t.Shift_End_Time      = Src.Shift_End_Time,
             t.Input_Border        = Src.Input_Border,
             t.Output_Border       = Src.Output_Border,
             t.Planned_Marks       = Src.Planned_Marks,
             t.Done_Marks          = Src.Done_Marks,
             t.Allowed_Late_Time   = Src.Allowed_Late_Time * 60,
             t.Allowed_Early_Time  = Src.Allowed_Early_Time * 60,
             t.Begin_Late_Time     = Src.Begin_Late_Time * 60,
             t.End_Early_Time      = Src.End_Early_Time * 60
    when not matched then
      insert
        (t.Company_Id,
         t.Filial_Id,
         t.Timesheet_Id,
         t.Timesheet_Date,
         t.Staff_Id,
         t.Employee_Id,
         t.Schedule_Id,
         t.Day_Kind,
         t.Begin_Time,
         t.End_Time,
         t.Break_Enabled,
         t.Break_Begin_Time,
         t.Break_End_Time,
         t.Plan_Time,
         t.Full_Time,
         t.Track_Duration,
         t.Schedule_Kind,
         t.Count_Late,
         t.Count_Early,
         t.Count_Lack,
         t.Count_Free,
         t.Gps_Turnout_Enabled,
         t.Gps_Use_Location,
         t.Gps_Max_Interval,
         t.Shift_Begin_Time,
         t.Shift_End_Time,
         t.Input_Border,
         t.Output_Border,
         t.Calendar_Id,
         t.Planned_Marks,
         t.Done_Marks,
         t.Allowed_Late_Time,
         t.Allowed_Early_Time,
         t.Begin_Late_Time,
         t.End_Early_Time)
      values
        (i_Company_Id,
         i_Filial_Id,
         Htt_Next.Timesheet_Id,
         Src.Schedule_Date,
         i_Staff_Id,
         r_Staff.Employee_Id,
         i_Schedule_Id,
         Src.Day_Kind,
         Src.Begin_Time,
         Src.End_Time,
         Src.Break_Enabled,
         Src.Break_Begin_Time,
         Src.Break_End_Time,
         Src.Plan_Time_Sec,
         Src.Full_Time_Sec,
         Src.Track_Duration_Sec,
         Src.Schedule_Kind,
         Src.Count_Late,
         Src.Count_Early,
         Src.Count_Lack,
         Src.Count_Free,
         Src.Gps_Turnout_Enabled,
         Src.Gps_Use_Location,
         Src.Gps_Max_Interval,
         Src.Shift_Begin_Time,
         Src.Shift_End_Time,
         Src.Input_Border,
         Src.Output_Border,
         Src.Calendar_Id,
         Src.Planned_Marks,
         Src.Done_Marks,
         Src.Allowed_Late_Time * 60,
         Src.Allowed_Early_Time * 60,
         Src.Begin_Late_Time * 60,
         Src.End_Early_Time * 60);
  
    Timesheet_Marks_Save_Individual(i_Company_Id => i_Company_Id,
                                    i_Filial_Id  => i_Filial_Id,
                                    i_Staff_Id   => i_Staff_Id,
                                    i_Begin_Date => i_Begin_Date,
                                    i_End_Date   => i_End_Date);
  
    Make_Dirty_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Begin_Date => i_Begin_Date,
                          i_End_Date   => i_End_Date);
  
    Update_Timesheet_Plan_Swaps(i_Company_Id => i_Company_Id,
                                i_Filial_Id  => i_Filial_Id,
                                i_Staff_Id   => i_Staff_Id,
                                i_Begin_Date => i_Begin_Date,
                                i_End_Date   => i_End_Date);
  
    Update_Border_Timesheet_Shifts(i_Company_Id => i_Company_Id,
                                   i_Filial_Id  => i_Filial_Id,
                                   i_Staff_Id   => i_Staff_Id,
                                   i_Begin_Date => i_Begin_Date,
                                   i_End_Date   => i_End_Date);
  end;

  ----------------------------------------------------------------------------------------------------
  -- calculate schedule change parts for every staff inside i_year
  -- determine schedule of staff inside every part
  -- if schedule is same as i_Schedule_Id
  -- generate timesheets for that part
  Procedure Gen_Timesheet_Plan
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Year        number
  ) is
    r_Schedule   Htt_Schedules%rowtype;
    v_Year_Begin date;
    v_Year_End   date;
  begin
    r_Schedule := z_Htt_Schedules.Load(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    if Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Staff_Schedule) or
       Fazo.Equal(r_Schedule.Pcode, Htt_Pref.c_Pcode_Individual_Robot_Schedule) then
      b.Raise_Fatal('htt_core.gen_timesheet_plan: yearly generation schedule for only odinary schedules');
    end if;
  
    v_Year_Begin := Trunc(to_date(i_Year, 'yyyy'), 'y');
    v_Year_End   := Add_Months(v_Year_Begin, 12) - 1;
  
    -- make schedule change intervals 
    -- for every staff of given year
    -- filter out unnecessary schedules  
    for r in (select Qr.Period_Begin, Nvl(Qr.Period_End - 1, v_Year_End) Period_End, Qr.Staff_Id
                from (select Greatest(p.Period, v_Year_Begin) Period_Begin,
                             Lead(p.Period) --
                             Over(partition by p.Staff_Id order by p.Period) Period_End,
                             p.Trans_Id,
                             p.Staff_Id
                        from Hpd_Agreements p
                       where p.Company_Id = i_Company_Id
                         and p.Filial_Id = i_Filial_Id
                         and p.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                         and (p.Period between v_Year_Begin and v_Year_End or
                             p.Period = (select max(Lp.Period)
                                            from Hpd_Agreements Lp
                                           where Lp.Company_Id = p.Company_Id
                                             and Lp.Filial_Id = p.Filial_Id
                                             and Lp.Staff_Id = p.Staff_Id
                                             and Lp.Trans_Type = p.Trans_Type
                                             and Lp.Period < v_Year_Begin))) Qr
                join Hpd_Trans_Schedules q
                  on q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Trans_Id = Qr.Trans_Id
                 and q.Schedule_Id = i_Schedule_Id
               order by Qr.Staff_Id, Qr.Period_Begin)
    loop
      Regenerate_Timesheets(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Schedule_Id => i_Schedule_Id,
                            i_Begin_Date  => r.Period_Begin,
                            i_End_Date    => r.Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regen_Timesheet_Plan
  
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Lock_Load(i_Company_Id  => i_Company_Id,
                                            i_Filial_Id   => i_Filial_Id,
                                            i_Schedule_Id => i_Schedule_Id);
  
    for r in (select t.Staff_Id, t.Timesheet_Date, t.Schedule_Id
                from Htt_Timesheets t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Schedule_Id = i_Schedule_Id
                 and t.Timesheet_Date member of i_Dates)
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => r.Staff_Id,
                         i_Schedule_Id    => r.Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => r.Timesheet_Date,
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Requests
  (
    i_Company_Id             number,
    i_Filial_Id              number,
    i_Timesheet_Id           number,
    i_Timesheet_Date         date,
    i_Begin_Time             date,
    i_End_Time               date,
    i_Extra_Begin_Time       date,
    i_Extra_End_Time         date,
    i_Calendar_Id            number,
    o_Has_Fd_Request         out boolean,
    o_Fd_Rq_Time_Kind_Id     out number,
    o_Fd_Request_Unused_Time out varchar2,
    o_Rq_Request_Types       out Array_Varchar2,
    o_Rq_Begin_Dates         out Array_Date,
    o_Rq_End_Dates           out Array_Date,
    o_Rq_Time_Kind_Ids       out Array_Number,
    o_Rq_Parent_Ids          out Array_Number,
    o_Rq_Unused_Times        out Array_Varchar2,
    o_Extra_Rq_Begin_Dates   out Array_Date,
    o_Extra_Rq_End_Dates     out Array_Date
  ) is
    v_Official_Rest_Day varchar2(1) := 'N';
  begin
    if Htt_Util.Is_Official_Rest_Day(i_Company_Id  => i_Company_Id,
                                     i_Filial_Id   => i_Filial_Id,
                                     i_Calendar_Id => i_Calendar_Id,
                                     i_Date        => i_Timesheet_Date) then
      v_Official_Rest_Day := 'Y';
    end if;
  
    o_Has_Fd_Request := false;
  
    select w.Request_Type, --
           w.Begin_Time,
           w.End_Time,
           k.Time_Kind_Id,
           Nvl(Tk.Parent_Id, Tk.Time_Kind_Id),
           k.Allow_Unused_Time
      bulk collect
      into o_Rq_Request_Types, --
           o_Rq_Begin_Dates,
           o_Rq_End_Dates,
           o_Rq_Time_Kind_Ids,
           o_Rq_Parent_Ids,
           o_Rq_Unused_Times
      from Htt_Timesheet_Requests q
      join Htt_Requests w
        on q.Company_Id = w.Company_Id
       and q.Filial_Id = w.Filial_Id
       and q.Request_Id = w.Request_Id
      join Htt_Request_Kinds k
        on k.Company_Id = w.Company_Id
       and k.Request_Kind_Id = w.Request_Kind_Id
      join Htt_Time_Kinds Tk
        on Tk.Company_Id = k.Company_Id
       and Tk.Time_Kind_Id = k.Time_Kind_Id
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Timesheet_Id = i_Timesheet_Id
       and (k.Day_Count_Type <> Htt_Pref.c_Day_Count_Type_Production_Days or
           k.Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
           v_Official_Rest_Day = 'N')
     order by w.Begin_Time;
  
    o_Extra_Rq_Begin_Dates := Array_Date();
    o_Extra_Rq_End_Dates   := Array_Date();
    o_Extra_Rq_Begin_Dates.Extend(o_Rq_Begin_Dates.Count);
    o_Extra_Rq_End_Dates.Extend(o_Rq_Begin_Dates.Count);
  
    for i in 1 .. o_Rq_Request_Types.Count
    loop
      o_Extra_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Extra_Begin_Time);
      o_Extra_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_Extra_End_Time);
      o_Rq_Begin_Dates(i) := Greatest(o_Rq_Begin_Dates(i), i_Begin_Time);
      o_Rq_End_Dates(i) := Least(o_Rq_End_Dates(i), i_End_Time);
    
      if o_Rq_Request_Types(i) != Htt_Pref.c_Request_Type_Part_Of_Day then
        o_Has_Fd_Request         := true;
        o_Fd_Rq_Time_Kind_Id     := o_Rq_Time_Kind_Ids(i);
        o_Fd_Request_Unused_Time := o_Rq_Unused_Times(i);
      
        o_Rq_Begin_Dates(i) := i_Begin_Time;
        o_Rq_End_Dates(i) := i_End_Time;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------  
  Procedure Insert_Timesheet_Overtime_Facts
  (
    i_Company_Id       number,
    i_Filial_Id        number,
    i_Timesheet_Id     number,
    i_Staff_Id         number,
    i_Timesheet_Date   date,
    i_Overtime_Seconds number
  ) is
    v_Free_Time             number;
    v_Free_Time_Kind_Id     number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    v_Overtime_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                            i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                           i_Filial_Id      => i_Filial_Id,
                                           i_Staff_Id       => i_Staff_Id,
                                           i_Timesheet_Date => i_Timesheet_Date,
                                           i_Time_Kind_Id   => v_Free_Time_Kind_Id);
  
    if v_Free_Time is null or i_Overtime_Seconds > v_Free_Time then
      Htt_Error.Raise_003(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id,
                                                                         i_Staff_Id   => i_Staff_Id),
                          i_Timesheet_Date       => i_Timesheet_Date,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Overtime_Seconds -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    end if;
  
    z_Htt_Timesheet_Facts.Insert_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Time_Kind_Id,
                                     i_Fact_Value   => i_Overtime_Seconds);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Push_Interval
  (
    p_Intervals      in out nocopy Htt_Pref.Timesheet_Interval_Nt,
    i_Timesheet      Htt_Timesheets%rowtype,
    i_Interval_Begin date,
    i_Interval_End   date
  ) is
    v_Interval Htt_Pref.Timesheet_Interval_Rt;
  begin
    v_Interval.Company_Id     := i_Timesheet.Company_Id;
    v_Interval.Filial_Id      := i_Timesheet.Filial_Id;
    v_Interval.Timesheet_Id   := i_Timesheet.Timesheet_Id;
    v_Interval.Interval_Begin := i_Interval_Begin;
    v_Interval.Interval_End   := i_Interval_End;
  
    if i_Timesheet.Break_Enabled = 'Y' and v_Interval.Interval_Begin < i_Timesheet.Break_Begin_Time and
       v_Interval.Interval_End > i_Timesheet.Break_End_Time then
      v_Interval.Interval_Id := Htt_Next.Timesheet_Interval_Id;
    
      v_Interval.Interval_End := i_Timesheet.Break_Begin_Time;
    
      p_Intervals.Extend;
      p_Intervals(p_Intervals.Count) := v_Interval;
    
      v_Interval.Interval_Begin := i_Timesheet.Break_End_Time;
      v_Interval.Interval_End   := i_Interval_End;
    elsif i_Timesheet.Break_Begin_Time <= v_Interval.Interval_Begin and
          i_Timesheet.Break_End_Time >= v_Interval.Interval_End then
      return;
    elsif i_Timesheet.Break_Enabled = 'Y' then
      if i_Timesheet.Break_Begin_Time between v_Interval.Interval_Begin and v_Interval.Interval_End then
        v_Interval.Interval_End := i_Timesheet.Break_Begin_Time;
      end if;
    
      if i_Timesheet.Break_End_Time between v_Interval.Interval_Begin and v_Interval.Interval_End then
        v_Interval.Interval_Begin := i_Timesheet.Break_End_Time;
      end if;
    end if;
  
    if v_Interval.Interval_Begin < v_Interval.Interval_End then
      v_Interval.Interval_Id := Htt_Next.Timesheet_Interval_Id;
    
      p_Intervals.Extend;
      p_Intervals(p_Intervals.Count) := v_Interval;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Push_Intersect_Intervals
  (
    p_Intervals       in out nocopy Htt_Pref.Timesheet_Interval_Nt,
    p_Interval_Begin  in out date,
    p_Interval_End    in out date,
    i_Timesheet       Htt_Timesheets%rowtype,
    i_Intersect_Begin date,
    i_Intersect_End   date
  ) is
  begin
    if p_Interval_Begin >= p_Interval_End then
      return;
    end if;
  
    if p_Interval_Begin < i_Intersect_Begin and p_Interval_End > i_Intersect_End then
      Push_Interval(p_Intervals      => p_Intervals,
                    i_Timesheet      => i_Timesheet,
                    i_Interval_Begin => p_Interval_Begin,
                    i_Interval_End   => i_Intersect_Begin);
    
      p_Interval_Begin := i_Intersect_End;
    elsif i_Intersect_Begin <= p_Interval_Begin and i_Intersect_End >= p_Interval_End then
      -- invalidate given interval
      p_Interval_End   := i_Intersect_End;
      p_Interval_Begin := p_Interval_End;
    else
      if i_Intersect_Begin between p_Interval_Begin and p_Interval_End then
        p_Interval_End := i_Intersect_Begin;
      end if;
    
      if i_Intersect_End between p_Interval_Begin and p_Interval_End then
        p_Interval_Begin := i_Intersect_End;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Rest_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Requests_Exist boolean
  ) is
    v_Input     date;
    v_Output    date;
    v_Free_Time number := 0;
  
    v_Has_Request            boolean := false;
    v_Rest_Time_Kind_Pcode   varchar2(20);
    v_Request_Day_Count_Type varchar2(1);
    v_Allow_Unused_Time      varchar2(1);
    v_Request_Time_Kind_Id   number(20);
  begin
    -- calc input output parts
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    end loop;
  
    -- determine rest pcode
    case p_Timesheet.Day_Kind
      when Htt_Pref.c_Day_Kind_Holiday then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Holiday;
      when Htt_Pref.c_Day_Kind_Additional_Rest then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Additional_Rest;
      when Htt_Pref.c_Day_Kind_Nonworking then
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Nonworking;
      else
        v_Rest_Time_Kind_Pcode := Htt_Pref.c_Pcode_Time_Kind_Rest;
    end case;
  
    if i_Requests_Exist then
      -- load full day resuest
      begin
        select Rk.Day_Count_Type, Rk.Time_Kind_Id, Rk.Allow_Unused_Time
          into v_Request_Day_Count_Type, v_Request_Time_Kind_Id, v_Allow_Unused_Time
          from Htt_Timesheet_Requests t
          join Htt_Requests q
            on q.Company_Id = t.Company_Id
           and q.Filial_Id = t.Filial_Id
           and q.Request_Id = t.Request_Id
          join Htt_Request_Kinds Rk
            on Rk.Company_Id = q.Company_Id
           and Rk.Request_Kind_Id = q.Request_Kind_Id
         where t.Company_Id = p_Timesheet.Company_Id
           and t.Filial_Id = p_Timesheet.Filial_Id
           and t.Timesheet_Id = p_Timesheet.Timesheet_Id
           and q.Request_Type <> Htt_Pref.c_Request_Type_Part_Of_Day;
      exception
        when No_Data_Found then
          null;
      end;
    
      -- save request if its saveable
      if v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Calendar_Days or
         v_Request_Day_Count_Type = Htt_Pref.c_Day_Count_Type_Production_Days and
         not Htt_Util.Is_Official_Rest_Day(i_Company_Id  => p_Timesheet.Company_Id,
                                           i_Filial_Id   => p_Timesheet.Filial_Id,
                                           i_Calendar_Id => p_Timesheet.Calendar_Id,
                                           i_Date        => p_Timesheet.Timesheet_Date) then
        Gen_Timesheet_Fact(p_Facts         => p_Facts,
                           i_Company_Id    => p_Timesheet.Company_Id,
                           i_Filial_Id     => p_Timesheet.Filial_Id,
                           i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                           i_Time_Kind_Id  => v_Request_Time_Kind_Id,
                           i_Fact_Value    => p_Timesheet.Plan_Time,
                           i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      
        v_Has_Request := true;
      end if;
    end if;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Request and v_Allow_Unused_Time = 'N' then
      v_Free_Time := 0;
    end if;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time := 0;
    end if;
  
    -- save rest fact only if no request exists this day
    if v_Rest_Time_Kind_Pcode <> Htt_Pref.c_Pcode_Time_Kind_Rest or not v_Has_Request then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => v_Rest_Time_Kind_Pcode),
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  
    -- save free time fact only when it exists
    if v_Free_Time > 0 then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                  i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                         i_Fact_Value    => v_Free_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Free_Day
  (
    p_Timesheet       in out nocopy Htt_Timesheets%rowtype,
    p_Facts           in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Time_Parts      Htt_Pref.Time_Part_Nt,
    i_Begin_Late_Time date,
    i_Late_Input      date,
    i_Requests_Exist  boolean
  ) is
    v_Input      date;
    v_Output     date;
    v_Late_Input date := i_Late_Input;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time         number := 0;
    v_Excused_Late_Time number := 0;
  
    v_Lack_Time    number := 0;
    v_Omitted_Time number := 0;
  
    v_Extra_Begin_Late_Time   date := i_Begin_Late_Time +
                                      Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_Extra_Late_Time         number := 0;
    v_Excused_Extra_Late_Time number := 0;
  
    v_Request_Time          number := 0;
    v_Turnout_Requests_Time number := 0;
  
    v_Free_Time  number := 0;
    v_In_Time    number := 0;
    v_Beforework number := 0;
    v_Afterwork  number := 0;
    v_Lunchtime  number := 0;
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
    v_Plan_Time          number;
  begin
    v_Extra_Begin_Late_Time := Greatest(v_Extra_Begin_Late_Time, p_Timesheet.Shift_Begin_Time);
  
    -- TEMPORARY
    v_Plan_Time := p_Timesheet.Plan_Time;
  
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Extra_Begin_Late_Time,
                         i_Extra_End_Time         => p_Timesheet.End_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      -- eval full day request
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    end loop;
  
    --ignore late time with requests
    if not v_Has_Fd_Request and v_Late_Input is not null then
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        if v_Rq_Begin_Dates(i) between p_Timesheet.Begin_Time and v_Extra_Begin_Late_Time then
          v_Late_Input := null;
          exit;
        end if;
      end loop;
    end if;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
    
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        end loop;
      end if;
    end loop;
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between Least(v_Extra_Begin_Late_Time, p_Timesheet.Begin_Time) and
         p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => i_Begin_Late_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                i_End_Time         => Least(i_Begin_Late_Time,
                                                                            v_Late_Input),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            v_Late_Input),
                                                i_Input            => v_Extra_Begin_Late_Time,
                                                i_Output           => Least(i_Begin_Late_Time,
                                                                            v_Late_Input));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => i_Begin_Late_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Extra_Begin_Late_Time,
                                                          i_End_Time         => Least(i_Begin_Late_Time,
                                                                                      v_Late_Input),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      v_Late_Input),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    else
      v_Late_Time := 0;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      v_Plan_Time := v_Plan_Time - v_Request_Time;
    
      if v_Rq_Unused_Times(i) = 'N' then
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      end if;
    
      -- Temporary solutions
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Plan_Time := v_Plan_Time + v_Rq_Intimes(i);
      end if;
    end loop;
  
    -- TEMPORARRY  
    v_Plan_Time := Greatest(v_Plan_Time, 0);
    v_In_Time   := Least(v_In_Time, v_Plan_Time);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        else
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      
        v_Turnout_Requests_Time := v_Turnout_Requests_Time + v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_In_Time := Least(v_In_Time, p_Timesheet.Plan_Time);
  
    if v_In_Time + v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
      if v_Turnout_Requests_Time > p_Timesheet.Plan_Time then
        v_In_Time := 0;
      else
        v_In_Time := p_Timesheet.Plan_Time - v_Turnout_Requests_Time;
      end if;
    end if;
  
    v_Omitted_Time := Greatest(p_Timesheet.Plan_Time - v_In_Time - v_Turnout_Requests_Time, 0);
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id <> v_Turnout_Time_Kind_Id then
        v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                          Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                         i_Fr_End   => v_Rq_End_Dates(i),
                                                         i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                         i_Sc_End   => p_Timesheet.Break_End_Time);
      
        if v_Rq_Unused_Times(i) = 'Y' then
          v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
        end if;
      
        v_Request_Time := Least(v_Request_Time, v_Omitted_Time);
        v_Omitted_Time := v_Omitted_Time - v_Request_Time;
      
        v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
      end if;
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time := v_Omitted_Time - (v_Late_Time - v_Excused_Late_Time);
    end if;
  
    v_Late_Time := v_Late_Time + v_Extra_Late_Time - v_Excused_Late_Time -
                   v_Excused_Extra_Late_Time;
    v_Free_Time := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => 0,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free_Inside),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts_Work_Day
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Intervals      in out nocopy Htt_Pref.Timesheet_Interval_Nt,
    i_Time_Parts     Htt_Pref.Time_Part_Nt,
    i_Late_Input     date,
    i_Early_Output   date,
    i_Requests_Exist boolean
  ) is
    v_Input        date;
    v_Output       date;
    v_Late_Input   date := i_Late_Input;
    v_Early_Output date := i_Early_Output;
  
    v_Has_Fd_Request         boolean := false;
    v_Fd_Rq_Time_Kind_Id     number;
    v_Fd_Request_Unused_Time varchar2(1);
  
    v_Rq_Request_Types     Array_Varchar2 := Array_Varchar2();
    v_Rq_Begin_Dates       Array_Date := Array_Date();
    v_Rq_End_Dates         Array_Date := Array_Date();
    v_Rq_Time_Kind_Ids     Array_Number := Array_Number();
    v_Rq_Parent_Ids        Array_Number := Array_Number();
    v_Rq_Unused_Times      Array_Varchar2 := Array_Varchar2();
    v_Rq_Intimes           Array_Number := Array_Number();
    v_Extra_Rq_Begin_Dates Array_Date := Array_Date();
    v_Extra_Rq_End_Dates   Array_Date := Array_Date();
  
    v_Earliest_Turnout_Rq_Begin date;
  
    v_Late_Time  number := 0;
    v_Early_Time number := 0;
    v_Lack_Time  number := 0;
  
    v_Extra_Late_Time          number := 0;
    v_Extra_Early_Time         number := 0;
    v_Excused_Extra_Late_Time  number := 0;
    v_Excused_Extra_Early_Time number := 0;
  
    v_Excused_Late_Time  number := 0;
    v_Excused_Early_Time number := 0;
    v_Excused_Lack_Time  number := 0;
  
    v_Begin_Late interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time, 'second');
    v_End_Early  interval day to second := Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
  
    v_Begin_Late_Time date := Greatest(p_Timesheet.Shift_Begin_Time,
                                       p_Timesheet.Begin_Time + v_Begin_Late);
    v_End_Early_Time  date := Least(p_Timesheet.Shift_End_Time, p_Timesheet.End_Time + v_End_Early);
  
    v_Time_Kind_Parent_Id  number;
    v_Turnout_Time_Kind_Id number;
  
    v_Request_Time      number := 0;
    v_Free_Time         number := 0;
    v_In_Time           number := 0;
    v_Beforework        number := 0;
    v_Afterwork         number := 0;
    v_Lunchtime         number := 0;
    v_Used_Request_Time number := 0;
  
    v_Interval_Begin    date;
    v_Interval_End      date;
    v_Rq_Interval_Begin Array_Date := Array_Date();
    v_Rq_Interval_End   Array_Date := Array_Date();
  
    v_Calc               Calc := Calc();
    v_Request_Times_Keys Array_Varchar2;
  begin
    if i_Requests_Exist then
      Timesheet_Requests(i_Company_Id             => p_Timesheet.Company_Id,
                         i_Filial_Id              => p_Timesheet.Filial_Id,
                         i_Timesheet_Id           => p_Timesheet.Timesheet_Id,
                         i_Timesheet_Date         => p_Timesheet.Timesheet_Date,
                         i_Begin_Time             => p_Timesheet.Begin_Time,
                         i_End_Time               => p_Timesheet.End_Time,
                         i_Extra_Begin_Time       => v_Begin_Late_Time,
                         i_Extra_End_Time         => v_End_Early_Time,
                         i_Calendar_Id            => p_Timesheet.Calendar_Id,
                         o_Has_Fd_Request         => v_Has_Fd_Request,
                         o_Fd_Request_Unused_Time => v_Fd_Request_Unused_Time,
                         o_Fd_Rq_Time_Kind_Id     => v_Fd_Rq_Time_Kind_Id,
                         o_Rq_Request_Types       => v_Rq_Request_Types,
                         o_Rq_Begin_Dates         => v_Rq_Begin_Dates,
                         o_Rq_End_Dates           => v_Rq_End_Dates,
                         o_Rq_Unused_Times        => v_Rq_Unused_Times,
                         o_Rq_Time_Kind_Ids       => v_Rq_Time_Kind_Ids,
                         o_Rq_Parent_Ids          => v_Rq_Parent_Ids,
                         o_Extra_Rq_Begin_Dates   => v_Extra_Rq_Begin_Dates,
                         o_Extra_Rq_End_Dates     => v_Extra_Rq_End_Dates);
    end if;
  
    -- timesheet with full day request with disabled unused time
    -- will ignore any facts except request on this timesheet
    -- e.g.: 
    -- let current day have full day request,
    --                      input (09:00) and output (18:00) tracks
    -- then 
    -- any facts generated from tracks will not be recorded
    -- they will not be included even free time time_kind
    if v_Has_Fd_Request and v_Fd_Request_Unused_Time = 'N' then
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Fd_Rq_Time_Kind_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
      return;
    end if;
  
    v_Turnout_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                    i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Rq_Intimes.Extend(v_Rq_Request_Types.Count);
    v_Rq_Interval_Begin.Extend(v_Rq_Request_Types.Count);
    v_Rq_Interval_End.Extend(v_Rq_Request_Types.Count);
  
    for i in 1 .. v_Rq_Intimes.Count
    loop
      v_Rq_Intimes(i) := 0;
    
      v_Rq_Interval_Begin(i) := v_Rq_Begin_Dates(i);
      v_Rq_Interval_End(i) := v_Rq_End_Dates(i);
    end loop;
  
    for i in 1 .. i_Time_Parts.Count
    loop
      v_Input  := i_Time_Parts(i).Input_Time;
      v_Output := i_Time_Parts(i).Output_Time;
    
      v_Interval_Begin := Greatest(v_Input, p_Timesheet.Begin_Time);
      v_Interval_End   := Least(v_Output, p_Timesheet.End_Time);
    
      v_Free_Time := v_Free_Time + Htt_Util.Time_Diff(v_Output, v_Input);
    
      v_Lunchtime := v_Lunchtime +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Break_Begin_Time,
                                                    i_Fr_End   => p_Timesheet.Break_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_Beforework := v_Beforework +
                      Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.Shift_Begin_Time,
                                                     i_Fr_End   => p_Timesheet.Begin_Time,
                                                     i_Sc_Begin => v_Input,
                                                     i_Sc_End   => v_Output);
    
      v_Afterwork := v_Afterwork +
                     Htt_Util.Timeline_Intersection(i_Fr_Begin => p_Timesheet.End_Time,
                                                    i_Fr_End   => p_Timesheet.Shift_End_Time,
                                                    i_Sc_Begin => v_Input,
                                                    i_Sc_End   => v_Output);
    
      v_In_Time := v_In_Time + Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => p_Timesheet.End_Time,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                    i_Input            => v_Input,
                                                    i_Output           => v_Output);
    
      if not v_Has_Fd_Request or v_Fd_Request_Unused_Time = 'Y' then
        for j in 1 .. v_Rq_Request_Types.Count
        loop
          v_Rq_Intimes(j) := v_Rq_Intimes(j) +
                             Htt_Util.Calc_Intime(i_Begin_Time       => v_Rq_Begin_Dates(j),
                                                  i_End_Time         => v_Rq_End_Dates(j),
                                                  i_Begin_Break_Time => Greatest(v_Rq_Begin_Dates(j),
                                                                                 p_Timesheet.Break_Begin_Time),
                                                  i_End_Break_Time   => Least(v_Rq_End_Dates(j),
                                                                              p_Timesheet.Break_End_Time),
                                                  i_Input            => v_Input,
                                                  i_Output           => v_Output);
        
          if v_Rq_Unused_Times(j) = 'N' then
            Push_Intersect_Intervals(p_Intervals       => p_Intervals,
                                     p_Interval_Begin  => v_Interval_Begin,
                                     p_Interval_End    => v_Interval_End,
                                     i_Timesheet       => p_Timesheet,
                                     i_Intersect_Begin => v_Rq_Begin_Dates(j),
                                     i_Intersect_End   => v_Rq_End_Dates(j));
          elsif v_Rq_Parent_Ids(j) = v_Turnout_Time_Kind_Id then
            Push_Intersect_Intervals(p_Intervals       => p_Intervals,
                                     p_Interval_Begin  => v_Rq_Interval_Begin(j),
                                     p_Interval_End    => v_Rq_Interval_End(j),
                                     i_Timesheet       => p_Timesheet,
                                     i_Intersect_Begin => v_Input,
                                     i_Intersect_End   => v_Output);
          end if;
        end loop;
      end if;
    
      if v_Interval_Begin < v_Interval_End then
        Push_Interval(p_Intervals      => p_Intervals,
                      i_Timesheet      => p_Timesheet,
                      i_Interval_Begin => v_Interval_Begin,
                      i_Interval_End   => v_Interval_End);
      end if;
    end loop;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      continue when v_Rq_Parent_Ids(i) <> v_Turnout_Time_Kind_Id;
      continue when v_Rq_Interval_Begin(i) >= v_Rq_Interval_End(i);
    
      Push_Interval(p_Intervals      => p_Intervals,
                    i_Timesheet      => p_Timesheet,
                    i_Interval_Begin => v_Rq_Interval_Begin(i),
                    i_Interval_End   => v_Rq_Interval_End(i));
    end loop;
  
    v_Earliest_Turnout_Rq_Begin := p_Timesheet.Begin_Time + 1;
  
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
    
      if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id and
         v_Extra_Rq_Begin_Dates(i) between v_Begin_Late_Time and p_Timesheet.Input_Time then
        v_Earliest_Turnout_Rq_Begin := Least(v_Earliest_Turnout_Rq_Begin, v_Extra_Rq_Begin_Dates(i));
        exit;
      end if;
    end loop;
  
    -- calculate late time
    if v_Late_Input is not null then
      p_Timesheet.Input_Time := v_Late_Input;
    
      if v_Late_Input > v_Earliest_Turnout_Rq_Begin then
        v_Late_Input := v_Earliest_Turnout_Rq_Begin;
      end if;
    
      v_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                          i_End_Time         => v_Late_Input,
                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                      v_Late_Input),
                                          i_Input            => p_Timesheet.Begin_Time,
                                          i_Output           => v_Late_Input);
    
      v_Extra_Late_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                i_End_Time         => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time),
                                                i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                            Least(v_Late_Input,
                                                                                  p_Timesheet.Begin_Time)),
                                                i_Input            => v_Begin_Late_Time,
                                                i_Output           => Least(v_Late_Input,
                                                                            p_Timesheet.Begin_Time));
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Late_Time := v_Excused_Late_Time +
                               Htt_Util.Calc_Intime(i_Begin_Time       => p_Timesheet.Begin_Time,
                                                    i_End_Time         => v_Late_Input,
                                                    i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                    i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                v_Late_Input),
                                                    i_Input            => v_Rq_Begin_Dates(i),
                                                    i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Late_Time := v_Excused_Extra_Late_Time +
                                     Htt_Util.Calc_Intime(i_Begin_Time       => v_Begin_Late_Time,
                                                          i_End_Time         => Least(v_Late_Input,
                                                                                      p_Timesheet.Begin_Time),
                                                          i_Begin_Break_Time => p_Timesheet.Break_Begin_Time,
                                                          i_End_Break_Time   => Least(p_Timesheet.Break_End_Time,
                                                                                      Least(v_Late_Input,
                                                                                            p_Timesheet.Begin_Time)),
                                                          i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                          i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- calculate early time
    if v_Early_Output is not null then
      p_Timesheet.Output_Time := v_Early_Output;
    
      v_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                           i_End_Time         => p_Timesheet.End_Time,
                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                          v_Early_Output),
                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                           i_Input            => v_Early_Output,
                                           i_Output           => p_Timesheet.End_Time);
    
      v_Extra_Early_Time := Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_End_Time         => v_End_Early_Time,
                                                 i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                v_Early_Output),
                                                 i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                 i_Input            => Greatest(v_Early_Output,
                                                                                p_Timesheet.End_Time),
                                                 i_Output           => v_End_Early_Time);
    
      for i in 1 .. v_Rq_Request_Types.Count
      loop
        v_Excused_Early_Time := v_Excused_Early_Time +
                                Htt_Util.Calc_Intime(i_Begin_Time       => v_Early_Output,
                                                     i_End_Time         => p_Timesheet.End_Time,
                                                     i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                    v_Early_Output),
                                                     i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                     i_Input            => v_Rq_Begin_Dates(i),
                                                     i_Output           => v_Rq_End_Dates(i));
      
        v_Excused_Extra_Early_Time := v_Excused_Extra_Early_Time +
                                      Htt_Util.Calc_Intime(i_Begin_Time       => Greatest(v_Early_Output,
                                                                                          p_Timesheet.End_Time),
                                                           i_End_Time         => v_End_Early_Time,
                                                           i_Begin_Break_Time => Greatest(p_Timesheet.Break_Begin_Time,
                                                                                          Greatest(v_Early_Output,
                                                                                                   p_Timesheet.End_Time)),
                                                           i_End_Break_Time   => p_Timesheet.Break_End_Time,
                                                           i_Input            => v_Extra_Rq_Begin_Dates(i),
                                                           i_Output           => v_Extra_Rq_End_Dates(i));
      end loop;
    end if;
  
    -- eval part day requests
    for i in 1 .. v_Rq_Request_Types.Count
    loop
      v_Request_Time := Htt_Util.Time_Diff(v_Rq_End_Dates(i), v_Rq_Begin_Dates(i)) -
                        Htt_Util.Timeline_Intersection(i_Fr_Begin => v_Rq_Begin_Dates(i),
                                                       i_Fr_End   => v_Rq_End_Dates(i),
                                                       i_Sc_Begin => p_Timesheet.Break_Begin_Time,
                                                       i_Sc_End   => p_Timesheet.Break_End_Time);
    
      if v_Rq_Unused_Times(i) = 'Y' then
        v_Request_Time := v_Request_Time - v_Rq_Intimes(i);
      else
        v_In_Time := v_In_Time - v_Rq_Intimes(i);
      
        v_Time_Kind_Parent_Id := v_Rq_Parent_Ids(i);
      
        if v_Time_Kind_Parent_Id = v_Turnout_Time_Kind_Id then
          v_Free_Time := v_Free_Time - v_Rq_Intimes(i);
        end if;
      end if;
    
      v_Used_Request_Time := v_Used_Request_Time + v_Request_Time;
    
      v_Calc.Plus(v_Rq_Time_Kind_Ids(i), v_Request_Time);
    end loop;
  
    v_Request_Times_Keys := v_Calc.Keyset;
  
    for i in 1 .. v_Request_Times_Keys.Count
    loop
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => v_Request_Times_Keys(i),
                         i_Fact_Value    => v_Calc.Get_Value(v_Request_Times_Keys(i)),
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end loop;
  
    -- calculate lack time
    if p_Timesheet.Count_Lack = 'Y' then
      v_Lack_Time         := p_Timesheet.Plan_Time - v_In_Time - v_Late_Time - v_Early_Time;
      v_Excused_Lack_Time := v_Used_Request_Time - v_Excused_Late_Time - v_Excused_Early_Time;
    end if;
  
    -- eval result
    v_Early_Time := v_Early_Time - v_Excused_Early_Time + v_Extra_Early_Time -
                    v_Excused_Extra_Early_Time;
    v_Late_Time  := v_Late_Time - v_Excused_Late_Time + v_Extra_Late_Time -
                    v_Excused_Extra_Late_Time;
    v_Lack_Time  := v_Lack_Time - v_Excused_Lack_Time;
    v_Free_Time  := v_Free_Time - v_In_Time - v_Lunchtime - v_Beforework - v_Afterwork;
  
    if p_Timesheet.Count_Free = 'N' then
      v_Free_Time  := 0;
      v_Lunchtime  := 0;
      v_Beforework := 0;
      v_Afterwork  := 0;
    end if;
  
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => v_Turnout_Time_Kind_Id,
                       i_Fact_Value    => v_In_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                       i_Fact_Value    => v_Early_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                       i_Fact_Value    => v_Late_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack),
                       i_Fact_Value    => v_Lack_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free),
                       i_Fact_Value    => v_Free_Time,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lunchtime),
                       i_Fact_Value    => v_Lunchtime,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Before_Work),
                       i_Fact_Value    => v_Beforework,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    Gen_Timesheet_Fact(p_Facts         => p_Facts,
                       i_Company_Id    => p_Timesheet.Company_Id,
                       i_Filial_Id     => p_Timesheet.Filial_Id,
                       i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                       i_Time_Kind_Id  => Htt_Util.Time_Kind_Id(i_Company_Id => p_Timesheet.Company_Id,
                                                                i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_After_Work),
                       i_Fact_Value    => v_Afterwork,
                       i_Schedule_Kind => p_Timesheet.Schedule_Kind);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Fact
  (
    p_Facts         in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    i_Company_Id    number,
    i_Filial_Id     number,
    i_Timesheet_Id  number,
    i_Time_Kind_Id  number,
    i_Fact_Value    number,
    i_Schedule_Kind varchar2
  ) is
    r_Timesheet Htt_Timesheets%rowtype;
  begin
    if i_Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly and
       i_Time_Kind_Id <>
       Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free) and
       i_Fact_Value > 86400 then
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id);
    
      Htt_Error.Raise_004(i_Staff_Name     => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                   i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                   i_Staff_Id   => r_Timesheet.Staff_Id),
                          i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                          i_Time_Kind_Name => z_Htt_Time_Kinds.Load(i_Company_Id => i_Company_Id, --
                                              i_Time_Kind_Id => i_Time_Kind_Id).Name);
    end if;
  
    Htt_Util.Timesheet_Fact_Add(o_Facts        => p_Facts,
                                i_Company_Id   => i_Company_Id,
                                i_Filial_Id    => i_Filial_Id,
                                i_Timesheet_Id => i_Timesheet_Id,
                                i_Time_Kind_Id => i_Time_Kind_Id,
                                i_Fact_Value   => i_Fact_Value);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Insert_Timesheet_Facts
  (
    p_Facts     in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Intervals in out nocopy Htt_Pref.Timesheet_Interval_Nt
  ) is
  begin
    forall i in 1 .. p_Facts.Count
      insert into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (p_Facts(i).Company_Id,
         p_Facts(i).Filial_Id,
         p_Facts(i).Timesheet_Id,
         p_Facts(i).Time_Kind_Id,
         p_Facts(i).Fact_Value);
  
    forall i in 1 .. p_Intervals.Count
      insert into Htt_Timesheet_Intervals
        (Company_Id, Filial_Id, Interval_Id, Timesheet_Id, Interval_Begin, Interval_End)
      values
        (p_Intervals(i).Company_Id,
         p_Intervals(i).Filial_Id,
         p_Intervals(i).Interval_Id,
         p_Intervals(i).Timesheet_Id,
         p_Intervals(i).Interval_Begin,
         p_Intervals(i).Interval_End);
  
    p_Facts     := Htt_Pref.Timesheet_Fact_Nt();
    p_Intervals := Htt_Pref.Timesheet_Interval_Nt();
  end;

  ----------------------------------------------------------------------------------------------------
  -- transforms check tracks to input/output/merger/potential output
  -- one track should be transformed only once

  -- merger transformation rules:
  -- <ul>
  --     <li>merger exists only with flexible schedules</li>
  --     <li>only two mergers per timesheet: input/output merger</li>
  --     <li>input merger exists only when previous day is working and ends within merger area</li>
  --     <li>output merger exists only when next day is working and starts within merger area</li>
  --     <li>input merger disabled when output exists in [shift_begin - merger_interval, shift_begin]</li>
  --     <li>input merger disabled when input exists in [shift_begin, shift_begin + merger_interval]</li>
  --     <li>output merger disabled when output exists in [shift_end - merger_interval, shift_end ]</li>
  --     <li>output merger disabled when input exists in [shift_end, shift_end + merger_interval]</li>
  --     <li>only first check that falls into merger area is transformed to merger</li>
  --     <li>these rules guarantee that merger will be last input and first output in merger area</li>
  -- </ul>

  -- input transformation rules:
  -- <ul>
  --     <li>input merger must be nonexistent</li>
  --     <li>must have trans_intput track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be first track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  -- </ul>

  -- output transformation rules:
  -- <ul>
  --     <li>output merger must be nonexistent</li>
  --     <li>must have trans_output track setting set to (Y)es (taken from device at creation time)</li>
  --     <li>must be last track inside shift ([shift_begin, shift_end])</li>
  --     <li>must be check track</li>
  --     <li>must be different from track transformed to input</li>
  -- </ul>

  -- %example 1
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 02.01.2023 09:10; #check track type
  -- then
  -- track_1_type transformed to merger
  -- track_2_type transformed to merger

  -- %example 2
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger

  -- %example 3
  -- let begin_time := shift_begin := 31.12.2023 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- then
  -- track_1_type transformed to merger  

  -- %example 4
  -- let begin_time := shift_begin := 01.01.2023 09:00;
  -- let end_time   := shift_end   := 02.01.2023 09:00;
  -- let input_border := 01.01.2023 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 02.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type remains check
  -- track_2_type remains input

  -- %example 5
  -- let begin_time := shift_begin := 31.12.2022 09:00;
  -- let end_time   := shift_end   := 01.01.2023 09:00;
  -- let input_border := 31.12.2022 08:45; #enabling input merger area since input_border <> shift_begin
  -- let output_border := 01.01.2023 09:15; #enabling output merger area since output_border <> shift_end
  -- let track_1 := 01.01.2023 08:50; #check track type
  -- let track_2 := 01.01.2023 09:10; #input track type
  -- then
  -- track_1_type transformed to input
  -- track_2_type remains input

  Procedure Transform_Check_Tracks
  (
    p_Tracks       in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt,
    i_Timesheet    Htt_Timesheets%rowtype
  ) is
    v_Track             Htt_Pref.Timesheet_Track_Rt;
    v_Has_Input_Merger  boolean := false;
    v_Has_Output_Merger boolean := false;
    v_Allow_Trans_Input boolean := true;
    v_Input_Merger_Idx  number;
    v_Output_Merger_Idx number;
    v_Trans_Input_Idx   number;
    v_Trans_Output_Idx  number;
    v_Merger_Interval   interval day to second := Numtodsinterval(Htt_Pref.c_Default_Merge_Border,
                                                                  'second');
    v_Check_Trans_Idxs  Array_Number := Array_Number();
    v_Check_Trans_Type  varchar2(1);
  
    v_Trans_Track_Output_Idx number;
  
    --------------------------------------------------
    Procedure Transform_To_Check(i_Allow_Potential boolean := false) is
      v_Trans_Track Htt_Pref.Timesheet_Track_Rt;
    begin
      if v_Check_Trans_Idxs.Count = 0 then
        return;
      end if;
    
      for i in 1 .. v_Check_Trans_Idxs.Count - 1
      loop
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(i));
      
        v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Check;
      
        p_Tracks(v_Check_Trans_Idxs(i)) := v_Trans_Track;
      
        p_Trans_Tracks.Extend;
        p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
      end loop;
    
      if i_Allow_Potential then
        v_Trans_Track := p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count));
      
        if v_Trans_Track.Track_Type = Htt_Pref.c_Track_Type_Output and
           i_Timesheet.End_Time is not null and Greatest(v_Trans_Track.Track_Datetime,
                                                         Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                                                                   i_Filial_Id  => i_Timesheet.Filial_Id)) <
           i_Timesheet.End_Time then
          v_Trans_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
        
          p_Tracks(v_Check_Trans_Idxs(v_Check_Trans_Idxs.Count)) := v_Trans_Track;
        
          p_Trans_Tracks.Extend;
          p_Trans_Tracks(p_Trans_Tracks.Count) := v_Trans_Track;
        end if;
      end if;
    end;
  
    -------------------------------------------------- 
    Procedure Transform_Gps_Output is
      v_Transformable boolean := false;
    begin
      if i_Timesheet.Gps_Turnout_Enabled = 'N' or v_Output_Merger_Idx is not null then
        return;
      end if;
    
      v_Transformable := Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id,
                                                   i_Filial_Id  => i_Timesheet.Filial_Id) <
                         i_Timesheet.Output_Border;
    
      for i in 1 .. p_Tracks.Count
      loop
        v_Track := p_Tracks(i);
      
        continue when v_Track.Track_Datetime not between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Output and v_Transformable then
          v_Track.Track_Type := Htt_Pref.c_Track_Type_Gps_Output;
        
          p_Tracks(i) := v_Track;
        
          if v_Trans_Output_Idx = i then
            p_Trans_Tracks(v_Trans_Track_Output_Idx) := v_Track;
          else
            p_Trans_Tracks.Extend;
            p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
          end if;
        end if;
      end loop;
    end;
  
  begin
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
      return;
    end if;
  
    if i_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Flexible then
      v_Has_Input_Merger  := i_Timesheet.Shift_Begin_Time <> i_Timesheet.Input_Border;
      v_Has_Output_Merger := i_Timesheet.Shift_End_Time <> i_Timesheet.Output_Border;
    end if;
  
    for i in 1 .. p_Tracks.Count
    loop
      v_Track := p_Tracks(i);
    
      if v_Has_Input_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Input_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_Begin_Time - v_Merger_Interval and
         i_Timesheet.Shift_Begin_Time + v_Merger_Interval then
        v_Input_Merger_Idx := i;
      end if;
    
      if v_Has_Output_Merger and --
         v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and Nvl(v_Input_Merger_Idx, -1) <> i and
         v_Output_Merger_Idx is null and --
         v_Track.Track_Datetime between --
         i_Timesheet.Shift_End_Time - v_Merger_Interval and
         i_Timesheet.Shift_End_Time + v_Merger_Interval then
        v_Output_Merger_Idx := i;
      end if;
    
      if v_Allow_Trans_Input and --
         v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and v_Trans_Input_Idx is null and
           v_Track.Trans_Input = 'Y' then
          v_Trans_Input_Idx := i;
        else
          v_Allow_Trans_Input := false;
        end if;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time then
        v_Trans_Output_Idx := null;
      
        if v_Track.Track_Type = Htt_Pref.c_Track_Type_Check and --
           v_Track.Trans_Output = 'Y' then
          v_Trans_Output_Idx := i;
        end if;
      end if;
    
      if v_Check_Trans_Idxs.Count > 0 and
         (not Fazo.Equal(v_Check_Trans_Type, v_Track.Track_Type) or v_Track.Trans_Check = 'N') then
        Transform_To_Check;
      
        v_Check_Trans_Idxs := Array_Number();
        v_Check_Trans_Type := null;
      end if;
    
      if v_Track.Track_Datetime between i_Timesheet.Shift_Begin_Time and i_Timesheet.Shift_End_Time and
         v_Track.Track_Type in (Htt_Pref.c_Track_Type_Input, Htt_Pref.c_Track_Type_Output) and
         v_Track.Trans_Check = 'Y' then
        v_Check_Trans_Type := v_Track.Track_Type;
        Fazo.Push(v_Check_Trans_Idxs, i);
      end if;
    end loop;
  
    Transform_To_Check(true);
  
    if v_Input_Merger_Idx is not null then
      v_Track := p_Tracks(v_Input_Merger_Idx);
    
      p_Tracks(v_Input_Merger_Idx) := p_Tracks(1);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_Begin_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(1) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Input_Idx := null;
    
      if v_Input_Merger_Idx = v_Trans_Output_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Output_Merger_Idx is not null then
      v_Track := p_Tracks(v_Output_Merger_Idx);
    
      p_Tracks(v_Output_Merger_Idx) := p_Tracks(p_Tracks.Count);
    
      v_Track.Track_Datetime := i_Timesheet.Shift_End_Time;
      v_Track.Track_Type     := Htt_Pref.c_Track_Type_Merger;
    
      p_Tracks(p_Tracks.Count) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Output_Idx := null;
    
      if v_Output_Merger_Idx = v_Trans_Input_Idx then
        v_Trans_Input_Idx := null;
      end if;
    end if;
  
    if v_Trans_Input_Idx is not null then
      v_Track := p_Tracks(v_Trans_Input_Idx);
    
      v_Track.Track_Type := Htt_Pref.c_Track_Type_Input;
    
      p_Tracks(v_Trans_Input_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      if v_Trans_Output_Idx = v_Trans_Input_Idx then
        v_Trans_Output_Idx := null;
      end if;
    end if;
  
    if v_Trans_Output_Idx is not null then
      v_Track := p_Tracks(v_Trans_Output_Idx);
    
      if Greatest(v_Track.Track_Datetime,
                  Htt_Util.Get_Current_Date(i_Company_Id => i_Timesheet.Company_Id, --
                                            i_Filial_Id  => i_Timesheet.Filial_Id)) >
         i_Timesheet.End_Time or i_Timesheet.End_Time is null then
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Output;
      else
        v_Track.Track_Type := Htt_Pref.c_Track_Type_Potential_Output;
      end if;
    
      p_Tracks(v_Trans_Output_Idx) := v_Track;
    
      p_Trans_Tracks.Extend;
      p_Trans_Tracks(p_Trans_Tracks.Count) := v_Track;
    
      v_Trans_Track_Output_Idx := p_Trans_Tracks.Count;
    end if;
  
    Transform_Gps_Output;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    p_Timesheet      in out nocopy Htt_Timesheets%rowtype,
    p_Facts          in out nocopy Htt_Pref.Timesheet_Fact_Nt,
    p_Trans_Tracks   in out nocopy Htt_Pref.Timesheet_Track_Nt,
    p_Intervals      in out nocopy Htt_Pref.Timesheet_Interval_Nt,
    i_Tracks_Exist   boolean,
    i_Requests_Exist boolean,
    i_Timeoff_Tk_Id  number
  ) is
    v_Input          date;
    v_Time_Distance  number;
    v_Track_Duration number := p_Timesheet.Track_Duration;
  
    v_Begin_Late_Time  date := p_Timesheet.Begin_Time;
    v_Late_Input       date;
    v_Early_Output     date;
    v_First_Solo_Input date;
  
    v_Maybe_Late     boolean := p_Timesheet.Count_Late = 'Y';
    v_Maybe_Early    boolean := p_Timesheet.Count_Early = 'Y';
    v_End_Early_Time date := p_Timesheet.End_Time +
                             Numtodsinterval(p_Timesheet.End_Early_Time, 'second');
    v_Begin_Late     interval day to second := Numtodsinterval(p_Timesheet.Begin_Late_Time,
                                                               'second');
  
    v_Track  Htt_Pref.Timesheet_Track_Rt;
    v_Tracks Htt_Pref.Timesheet_Track_Nt;
  
    v_Inputs        Array_Date := Array_Date();
    v_Time_Parts    Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    v_Gps_Intervals Htt_Pref.Time_Part_Nt;
  
    --------------------------------------------------
    Function Gather_Gps_Track_Intervals return Htt_Pref.Time_Part_Nt is
      v_Interval  Htt_Pref.Time_Part_Rt;
      v_Intervals Htt_Pref.Time_Part_Nt := Htt_Pref.Time_Part_Nt();
    
      --------------------------------------------------
      Function Is_In_Polygon(i_Track Htt_Pref.Gps_Track_Data_Rt) return boolean is
      begin
        if p_Timesheet.Gps_Use_Location = 'N' then
          return true;
        end if;
      
        for r in (select q.*
                    from Htt_Locations q
                   where q.Company_Id = p_Timesheet.Company_Id
                     and q.Location_Id in
                         (select Lp.Location_Id
                            from Htt_Location_Persons Lp
                           where Lp.Company_Id = p_Timesheet.Company_Id
                             and Lp.Filial_Id = p_Timesheet.Filial_Id
                             and Lp.Person_Id = p_Timesheet.Employee_Id)
                     and exists (select 1
                            from Htt_Location_Polygon_Vertices Pv
                           where Pv.Company_Id = q.Company_Id
                             and Pv.Location_Id = q.Location_Id))
        loop
          if Htt_Geo_Util.Is_Point_In_Polygon(i_Company_Id  => r.Company_Id,
                                              i_Location_Id => r.Location_Id,
                                              i_Point_Lat   => i_Track.Lat,
                                              i_Point_Lng   => i_Track.Lng) = 'Y' then
            return true;
          end if;
        end loop;
      
        return false;
      end;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return Htt_Pref.Time_Part_Nt();
      end if;
    
      v_Interval.Input_Time  := p_Timesheet.Begin_Time;
      v_Interval.Output_Time := p_Timesheet.Begin_Time;
    
      for r in (select q.*
                  from Htt_Util.Gps_Track_Datas(i_Company_Id => p_Timesheet.Company_Id,
                                                i_Filial_Id  => p_Timesheet.Filial_Id,
                                                i_Person_Id  => p_Timesheet.Employee_Id,
                                                i_Begin_Date => Trunc(p_Timesheet.Shift_Begin_Time),
                                                i_End_Date   => p_Timesheet.End_Time,
                                                i_Only_Gps   => 'N') q
                 where q.Track_Time between p_Timesheet.Begin_Time and p_Timesheet.End_Time
                 order by q.Track_Time)
      loop
        if Htt_Util.Time_Diff(i_Time1 => r.Track_Time, i_Time2 => v_Interval.Output_Time) <
           p_Timesheet.Gps_Max_Interval and Is_In_Polygon(r) then
          v_Interval.Output_Time := r.Track_Time;
        else
          if v_Interval.Input_Time <> v_Interval.Output_Time then
            v_Intervals.Extend;
            v_Intervals(v_Intervals.Count) := v_Interval;
          end if;
        
          v_Interval.Input_Time  := r.Track_Time;
          v_Interval.Output_Time := r.Track_Time;
        end if;
      end loop;
    
      if Htt_Util.Time_Diff(i_Time1 => p_Timesheet.End_Time, i_Time2 => v_Interval.Output_Time) <
         p_Timesheet.Gps_Max_Interval then
        v_Interval.Output_Time := p_Timesheet.End_Time;
      end if;
    
      if v_Interval.Input_Time <> v_Interval.Output_Time then
        v_Intervals.Extend;
        v_Intervals(v_Intervals.Count) := v_Interval;
      end if;
    
      return v_Intervals;
    end;
  
    --------------------------------------------------
    Function Trim_Time_Parts_By_Gps(i_Intervals Htt_Pref.Time_Part_Nt) return Htt_Pref.Time_Part_Nt is
      v_Gps_Intervals Htt_Pref.Time_Part_Nt;
    
      v_Track_Interval Htt_Pref.Time_Part_Rt;
      v_Gps_Interval   Htt_Pref.Time_Part_Rt;
      v_Interval       Htt_Pref.Time_Part_Rt;
    
      result Htt_Pref.Time_Part_Nt;
    begin
      if p_Timesheet.Gps_Turnout_Enabled = 'N' then
        return i_Intervals;
      end if;
    
      if i_Intervals.Count = 0 then
        return i_Intervals;
      end if;
    
      result          := Htt_Pref.Time_Part_Nt();
      v_Gps_Intervals := Gather_Gps_Track_Intervals;
    
      for i in 1 .. i_Intervals.Count
      loop
        v_Track_Interval := i_Intervals(i);
      
        for j in 1 .. v_Gps_Intervals.Count
        loop
          v_Gps_Interval := v_Gps_Intervals(j);
        
          v_Interval.Input_Time  := Greatest(v_Gps_Interval.Input_Time, v_Track_Interval.Input_Time);
          v_Interval.Output_Time := Least(v_Gps_Interval.Output_Time, v_Track_Interval.Output_Time);
        
          if Htt_Util.Time_Diff(i_Time1 => v_Gps_Interval.Input_Time,
                                i_Time2 => v_Track_Interval.Input_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Track_Interval.Input_Time < v_Gps_Interval.Input_Time then
            v_Interval.Input_Time := v_Track_Interval.Input_Time;
          end if;
        
          if Htt_Util.Time_Diff(i_Time1 => v_Track_Interval.Output_Time,
                                i_Time2 => v_Gps_Interval.Output_Time) <
             p_Timesheet.Gps_Max_Interval and
             v_Gps_Interval.Output_Time < v_Track_Interval.Output_Time then
            v_Interval.Output_Time := v_Track_Interval.Output_Time;
          end if;
        
          if v_Interval.Input_Time < v_Interval.Output_Time then
            Result.Extend;
            result(Result.Count) := v_Interval;
          end if;
        end loop;
      end loop;
    
      return result;
    end;
  
  begin
    if p_Timesheet.Break_Enabled = 'N' then
      p_Timesheet.Break_Begin_Time := p_Timesheet.Begin_Time;
      p_Timesheet.Break_End_Time   := p_Timesheet.Begin_Time;
    end if;
  
    p_Timesheet.Input_Time  := null;
    p_Timesheet.Output_Time := null;
  
    if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
       p_Timesheet.Day_Kind in (Htt_Pref.c_Day_Kind_Work, Htt_Pref.c_Day_Kind_Nonworking) then
      p_Timesheet.End_Time := p_Timesheet.Output_Border;
    end if;
  
    if i_Tracks_Exist then
      select Tt.Company_Id,
             Tt.Filial_Id,
             Tt.Timesheet_Id,
             Tt.Track_Id,
             Trunc(Tt.Track_Datetime, 'mi'),
             Tt.Track_Type,
             Tt.Trans_Input,
             Tt.Trans_Output,
             Tt.Trans_Check
        bulk collect
        into v_Tracks
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = p_Timesheet.Company_Id
         and Tt.Filial_Id = p_Timesheet.Filial_Id
         and Tt.Timesheet_Id = p_Timesheet.Timesheet_Id
       order by Tt.Track_Datetime,
                Decode(Tt.Track_Type,
                       Htt_Pref.c_Track_Type_Input,
                       1,
                       Htt_Pref.c_Track_Type_Output,
                       3,
                       2);
    
      if p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
         p_Timesheet.Plan_Time <=
         Htt_Util.Time_Diff(p_Timesheet.End_Time, p_Timesheet.Break_End_Time) then
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time, 'second');
      else
        v_Begin_Late_Time := p_Timesheet.End_Time -
                             Numtodsinterval(p_Timesheet.Plan_Time +
                                             Htt_Util.Time_Diff(p_Timesheet.Break_End_Time,
                                                                p_Timesheet.Break_Begin_Time),
                                             'second');
      end if;
    
      v_Begin_Late_Time := v_Begin_Late_Time + v_Begin_Late;
    
      if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Transform_Check_Tracks(p_Tracks       => v_Tracks,
                               p_Trans_Tracks => p_Trans_Tracks,
                               i_Timesheet    => p_Timesheet);
      end if;
    
      for i in 1 .. v_Tracks.Count
      loop
        v_Track := v_Tracks(i);
      
        if (v_Track.Track_Type = Htt_Pref.c_Track_Type_Input or
           v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = 1) and
           v_Track.Track_Datetime >= p_Timesheet.Input_Border and
           v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
        
          if p_Timesheet.Day_Kind = Htt_Pref.c_Day_Kind_Work and
             p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          elsif v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
                v_Track.Track_Datetime < p_Timesheet.Shift_End_Time then
            p_Timesheet.Input_Time := Nvl(p_Timesheet.Input_Time, v_Track.Track_Datetime);
            v_First_Solo_Input     := Nvl(v_First_Solo_Input, v_Track.Track_Datetime);
          end if;
        
          -- ignore late time
          if v_Track.Track_Datetime between p_Timesheet.Begin_Time and v_Begin_Late_Time and
             v_Begin_Late_Time > p_Timesheet.Begin_Time then
            v_Maybe_Late := false;
            v_Late_Input := null;
          end if;
        
          -- eval late time
          if v_Maybe_Late and v_Track.Track_Datetime > v_Begin_Late_Time and
             v_Track.Track_Datetime < p_Timesheet.End_Time then
            v_Late_Input := Nvl(v_Late_Input, v_Track.Track_Datetime);
          end if;
        
          Fazo.Push(v_Inputs, v_Track.Track_Datetime);
        elsif (v_Track.Track_Type in
              (Htt_Pref.c_Track_Type_Output, Htt_Pref.c_Track_Type_Gps_Output) or
              v_Track.Track_Type = Htt_Pref.c_Track_Type_Merger and i = v_Tracks.Count) and
              v_Inputs.Count > 0 then
        
          if v_Track.Track_Datetime >= p_Timesheet.Input_Border and
             v_Track.Track_Datetime < p_Timesheet.Shift_Begin_Time then
            p_Timesheet.Input_Time := null;
          end if;
        
          if v_Track.Track_Datetime >= p_Timesheet.Shift_Begin_Time and
             v_Track.Track_Datetime <= p_Timesheet.Output_Border then
            for j in 1 .. v_Inputs.Count
            loop
              v_Input         := v_Inputs(j);
              v_Time_Distance := Htt_Util.Time_Diff(v_Track.Track_Datetime, v_Input);
              exit when v_Time_Distance <= v_Track_Duration;
            end loop;
          
            if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
               p_Timesheet.Input_Time between v_Input and v_Track.Track_Datetime then
              p_Timesheet.Input_Time := null;
            end if;
          
            if v_Time_Distance <= v_Track_Duration and
               (p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly or
               v_Input >= p_Timesheet.Shift_Begin_Time and v_Input < p_Timesheet.Shift_End_Time) then
              -- eval early time
              if v_Maybe_Early and v_Track.Track_Datetime < v_End_Early_Time and
                 v_Track.Track_Datetime >= p_Timesheet.Begin_Time then
                v_Early_Output := v_Track.Track_Datetime;
              end if;
            
              p_Timesheet.Input_Time := Least(Nvl(p_Timesheet.Input_Time, v_Input), v_Input);
            
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly and
                 p_Timesheet.Output_Time is null then
                p_Timesheet.Input_Time := v_Input;
              end if;
            
              p_Timesheet.Output_Time := v_Track.Track_Datetime;
            
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind = Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input := Greatest(v_Input, p_Timesheet.Shift_Begin_Time);
              end if;
            
              -- ignore late time
              if Least(p_Timesheet.Begin_Time, v_Begin_Late_Time) between v_Input and
                 v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.Begin_Time,
                                                                    p_Timesheet.Begin_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.Begin_Time,
                                                                       p_Timesheet.Begin_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Late_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Late := false;
                v_Late_Input := null;
              end if;
            
              -- ignore early time
              if v_Input < v_End_Early_Time and v_End_Early_Time <= v_Track.Track_Datetime or
                 Htt_Util.Timeline_Intersection(i_Fr_Begin => Least(p_Timesheet.End_Time,
                                                                    p_Timesheet.End_Time +
                                                                    Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                    'second')),
                                                i_Fr_End   => Greatest(p_Timesheet.End_Time,
                                                                       p_Timesheet.End_Time +
                                                                       Numtodsinterval(p_Timesheet.Allowed_Early_Time,
                                                                                       'second')),
                                                i_Sc_Begin => v_Input,
                                                i_Sc_End   => v_Track.Track_Datetime) > 0 then
                v_Maybe_Early  := false;
                v_Early_Output := null;
              end if;
            
              /*
              -- TEMPORARY
              if p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
                v_Input                := Least(Greatest(v_Input, p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
                v_Track.Track_Datetime := Least(Greatest(v_Track.Track_Datetime,
                                                         p_Timesheet.Shift_Begin_Time),
                                                p_Timesheet.Shift_End_Time);
              end if;
              */
            
              if v_Track.Track_Type <> Htt_Pref.c_Track_Type_Gps_Output then
                v_Time_Parts.Extend;
                v_Time_Parts(v_Time_Parts.Count) := Htt_Pref.Time_Part_Rt(v_Input,
                                                                          v_Track.Track_Datetime);
              end if;
            end if;
          end if;
        
          v_Inputs           := Array_Date();
          v_First_Solo_Input := null;
        end if;
      end loop;
    
      if v_First_Solo_Input <= v_Begin_Late_Time then
        v_Late_Input := null;
      end if;
    
      if p_Timesheet.Output_Time < v_Late_Input then
        p_Timesheet.Output_Time := null;
      end if;
    end if;
  
    v_Time_Parts := Trim_Time_Parts_By_Gps(v_Time_Parts);
  
    -- timeoff exists
    if i_Timeoff_Tk_Id is null then
      if p_Timesheet.Day_Kind <> Htt_Pref.c_Day_Kind_Work then
        Gen_Timesheet_Facts_Rest_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Requests_Exist => i_Requests_Exist);
      elsif p_Timesheet.Plan_Time < p_Timesheet.Full_Time and
            p_Timesheet.Schedule_Kind <> Htt_Pref.c_Schedule_Kind_Hourly then
        Gen_Timesheet_Facts_Free_Day(p_Timesheet       => p_Timesheet,
                                     p_Facts           => p_Facts,
                                     i_Time_Parts      => v_Time_Parts,
                                     i_Begin_Late_Time => v_Begin_Late_Time - v_Begin_Late,
                                     i_Late_Input      => v_Late_Input,
                                     i_Requests_Exist  => i_Requests_Exist);
      else
        Gen_Timesheet_Facts_Work_Day(p_Timesheet      => p_Timesheet,
                                     p_Facts          => p_Facts,
                                     p_Intervals      => p_Intervals,
                                     i_Time_Parts     => v_Time_Parts,
                                     i_Late_Input     => v_Late_Input,
                                     i_Early_Output   => v_Early_Output,
                                     i_Requests_Exist => i_Requests_Exist);
      end if;
    else
      Gen_Timesheet_Fact(p_Facts         => p_Facts,
                         i_Company_Id    => p_Timesheet.Company_Id,
                         i_Filial_Id     => p_Timesheet.Filial_Id,
                         i_Timesheet_Id  => p_Timesheet.Timesheet_Id,
                         i_Time_Kind_Id  => i_Timeoff_Tk_Id,
                         i_Fact_Value    => p_Timesheet.Plan_Time,
                         i_Schedule_Kind => p_Timesheet.Schedule_Kind);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Facts
  (
    i_Company_Id   number,
    i_Filial_Id    number,
    i_Timesheet_Id number,
    i_Send_Notify  boolean := false
  ) is
    v_Tracks_Count    number;
    v_Requests_Count  number;
    v_Done_Mark_Count number;
  
    r_Timesheet      Htt_Timesheets%rowtype;
    r_Timesheet_Fact Htt_Timesheet_Facts%rowtype;
    r_Timeoff        Hpd_Timeoff_Days%rowtype;
    r_Overtime       Hpd_Overtime_Days%rowtype;
    v_Facts          Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Trans_Tracks   Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
    v_Intervals      Htt_Pref.Timesheet_Interval_Nt := Htt_Pref.Timesheet_Interval_Nt();
  
    v_Input_Time  date;
    v_Output_Time date;
  
    --------------------------------------------------
    Procedure Approve_Timesheet_Marks
    (
      i_Company_Id   number,
      i_Filial_Id    number,
      i_Timesheet_Id number
    ) is
    begin
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'N'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id;
    
      update Htt_Timesheet_Marks Tm
         set Tm.Done = 'Y'
       where Tm.Company_Id = i_Company_Id
         and Tm.Filial_Id = i_Filial_Id
         and Tm.Timesheet_Id = i_Timesheet_Id
         and exists (select *
                from Htt_Timesheet_Tracks Tt
               where Tt.Company_Id = Tm.Company_Id
                 and Tt.Filial_Id = Tm.Filial_Id
                 and Tt.Timesheet_Id = Tm.Timesheet_Id
                 and Tt.Track_Type = Htt_Pref.c_Track_Type_Check
                 and Tt.Track_Datetime between Tm.Begin_Time and Tm.End_Time);
    end;
  
    -------------------------------------------------- 
    Function Overtime_Posted
    (
      i_Company_Id  number,
      i_Filial_Id   number,
      i_Overtime_Id number
    ) return boolean is
      r_Overtime Hpd_Journal_Overtimes%rowtype;
      r_Journal  Hpd_Journals%rowtype;
    begin
      r_Overtime := z_Hpd_Journal_Overtimes.Load(i_Company_Id  => i_Company_Id,
                                                 i_Filial_Id   => i_Filial_Id,
                                                 i_Overtime_Id => i_Overtime_Id);
    
      r_Journal := z_Hpd_Journals.Load(i_Company_Id => r_Overtime.Company_Id,
                                       i_Filial_Id  => r_Overtime.Filial_Id,
                                       i_Journal_Id => r_Overtime.Journal_Id);
    
      return r_Journal.Posted = 'Y';
    end;
  begin
    r_Timesheet := z_Htt_Timesheets.Lock_Load(i_Company_Id   => i_Company_Id,
                                              i_Filial_Id    => i_Filial_Id,
                                              i_Timesheet_Id => i_Timesheet_Id);
  
    if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                   i_Filial_Id      => r_Timesheet.Filial_Id,
                                   i_Staff_Id       => r_Timesheet.Staff_Id,
                                   i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
      z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => r_Timesheet.Company_Id,
                                       i_Filial_Id      => r_Timesheet.Filial_Id,
                                       i_Staff_Id       => r_Timesheet.Staff_Id,
                                       i_Timesheet_Date => r_Timesheet.Timesheet_Date,
                                       i_Facts_Changed  => Option_Varchar2('Y'));
      return;
    end if;
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = r_Timesheet.Company_Id
       and Tf.Filial_Id = r_Timesheet.Filial_Id
       and Tf.Timesheet_Id = r_Timesheet.Timesheet_Id;
  
    delete Htt_Timesheet_Intervals Ti
     where Ti.Company_Id = r_Timesheet.Company_Id
       and Ti.Filial_Id = r_Timesheet.Filial_Id
       and Ti.Timesheet_Id = r_Timesheet.Timesheet_Id;
  
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Timesheet_Id = i_Timesheet_Id;
  
    select count(*)
      into v_Requests_Count
      from Htt_Timesheet_Requests Tr
     where Tr.Company_Id = i_Company_Id
       and Tr.Filial_Id = i_Filial_Id
       and Tr.Timesheet_Id = i_Timesheet_Id;
  
    if z_Hpd_Timeoff_Days.Exist_Lock(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Staff_Id     => r_Timesheet.Staff_Id,
                                     i_Timeoff_Date => r_Timesheet.Timesheet_Date,
                                     o_Row          => r_Timeoff) then
      null;
    end if;
  
    v_Input_Time  := r_Timesheet.Input_Time;
    v_Output_Time := r_Timesheet.Output_Time;
  
    Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                        p_Facts          => v_Facts,
                        p_Trans_Tracks   => v_Trans_Tracks,
                        p_Intervals      => v_Intervals,
                        i_Tracks_Exist   => v_Tracks_Count > 0,
                        i_Requests_Exist => v_Requests_Count > 0,
                        i_Timeoff_Tk_Id  => r_Timeoff.Time_Kind_Id);
  
    Insert_Timesheet_Facts(p_Facts     => v_Facts, --
                           p_Intervals => v_Intervals);
  
    r_Overtime := z_Hpd_Overtime_Days.Take(i_Company_Id    => r_Timesheet.Company_Id,
                                           i_Filial_Id     => r_Timesheet.Filial_Id,
                                           i_Staff_Id      => r_Timesheet.Staff_Id,
                                           i_Overtime_Date => r_Timesheet.Timesheet_Date);
  
    if r_Overtime.Overtime_Seconds is not null then
      if Overtime_Posted(i_Company_Id  => r_Overtime.Company_Id,
                         i_Filial_Id   => r_Overtime.Filial_Id,
                         i_Overtime_Id => r_Overtime.Overtime_Id) then
        Insert_Timesheet_Overtime_Facts(i_Company_Id       => r_Timesheet.Company_Id,
                                        i_Filial_Id        => r_Timesheet.Filial_Id,
                                        i_Timesheet_Id     => r_Timesheet.Timesheet_Id,
                                        i_Staff_Id         => r_Timesheet.Staff_Id,
                                        i_Timesheet_Date   => r_Timesheet.Timesheet_Date,
                                        i_Overtime_Seconds => r_Overtime.Overtime_Seconds);
      end if;
    end if;
  
    -- timebook adjustment
    Save_Adjustment_Fact(i_Company_Id     => r_Timesheet.Company_Id,
                         i_Filial_Id      => r_Timesheet.Filial_Id,
                         i_Staff_Id       => r_Timesheet.Staff_Id,
                         i_Timesheet_Id   => r_Timesheet.Timesheet_Id,
                         i_Timesheet_Date => r_Timesheet.Timesheet_Date);
  
    Approve_Timesheet_Marks(i_Company_Id   => r_Timesheet.Company_Id,
                            i_Filial_Id    => r_Timesheet.Filial_Id,
                            i_Timesheet_Id => r_Timesheet.Timesheet_Id);
  
    select count(*)
      into v_Done_Mark_Count
      from Htt_Timesheet_Marks Tm
     where Tm.Company_Id = r_Timesheet.Company_Id
       and Tm.Filial_Id = r_Timesheet.Filial_Id
       and Tm.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tm.Done = 'Y';
  
    update Htt_Timesheet_Tracks Tt
       set Tt.Track_Used = 'Y'
     where Tt.Company_Id = r_Timesheet.Company_Id
       and Tt.Filial_Id = r_Timesheet.Filial_Id
       and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
       and Tt.Track_Used = 'N';
  
    forall i in 1 .. v_Trans_Tracks.Count
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type = v_Trans_Tracks(i).Track_Type
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Id = v_Trans_Tracks(i).Track_Id;
  
    z_Htt_Timesheets.Update_One(i_Company_Id   => r_Timesheet.Company_Id,
                                i_Filial_Id    => r_Timesheet.Filial_Id,
                                i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                i_Input_Time   => Option_Date(r_Timesheet.Input_Time),
                                i_Output_Time  => Option_Date(r_Timesheet.Output_Time),
                                i_Done_Marks   => Option_Number(v_Done_Mark_Count));
  
    -- send notification
    if i_Send_Notify and
       r_Timesheet.Timesheet_Date =
       Trunc(Htt_Util.Get_Current_Date(i_Company_Id => r_Timesheet.Company_Id,
                                       i_Filial_Id  => r_Timesheet.Filial_Id)) then
      if v_Input_Time is null and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Late),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Late_Time   => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Late_Time);
      end if;
    
      if not Fazo.Equal(r_Timesheet.Output_Time, v_Output_Time) and
         z_Htt_Timesheet_Facts.Exist(i_Company_Id   => r_Timesheet.Company_Id,
                                     i_Filial_Id    => r_Timesheet.Filial_Id,
                                     i_Timesheet_Id => r_Timesheet.Timesheet_Id,
                                     i_Time_Kind_Id => Htt_Util.Time_Kind_Id(i_Company_Id => r_Timesheet.Company_Id,
                                                                             i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Early),
                                     o_Row          => r_Timesheet_Fact) and
         r_Timesheet_Fact.Fact_Value > 0 then
        Notify_Timesheet(i_Timesheet   => r_Timesheet,
                         i_Early_Time  => Trunc(r_Timesheet_Fact.Fact_Value / 60),
                         i_Notify_Type => Hes_Pref.c_Pref_Nt_Early_Time);
      end if;
    end if;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timesheet_Facts is
    r_Timesheet    Htt_Timesheets%rowtype;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Timesheets   Htt_Pref.Timesheet_Nt := Htt_Pref.Timesheet_Nt();
    v_Trans_Tracks Htt_Pref.Timesheet_Track_Nt := Htt_Pref.Timesheet_Track_Nt();
    v_Intervals    Htt_Pref.Timesheet_Interval_Nt := Htt_Pref.Timesheet_Interval_Nt();
  
    -------------------------------------------------- 
    Procedure Update_Timesheets
    (
      p_Timesheets   in out nocopy Htt_Pref.Timesheet_Nt,
      p_Trans_Tracks in out nocopy Htt_Pref.Timesheet_Track_Nt
    ) is
    begin
      forall i in 1 .. p_Timesheets.Count
        update Htt_Timesheets t
           set t.Input_Time  = p_Timesheets(i).Input_Time,
               t.Output_Time = p_Timesheets(i).Output_Time
         where t.Company_Id = p_Timesheets(i).Company_Id
           and t.Filial_Id = p_Timesheets(i).Filial_Id
           and t.Timesheet_Id = p_Timesheets(i).Timesheet_Id;
    
      forall i in 1 .. p_Trans_Tracks.Count
        update Htt_Timesheet_Tracks Tt
           set Tt.Track_Type = p_Trans_Tracks(i).Track_Type
         where Tt.Company_Id = p_Trans_Tracks(i).Company_Id
           and Tt.Filial_Id = p_Trans_Tracks(i).Filial_Id
           and Tt.Timesheet_Id = p_Trans_Tracks(i).Timesheet_Id
           and Tt.Track_Id = p_Trans_Tracks(i).Track_Id;
    
      p_Timesheets   := Htt_Pref.Timesheet_Nt();
      p_Trans_Tracks := Htt_Pref.Timesheet_Track_Nt();
    end;
  
    --------------------------------------------------
    Procedure Insert_Overtime_Days is
      v_Filial_Id      number;
      v_Staff_Id       number;
      v_Timesheet_Date date;
      v_Schedule_Id    number;
      v_Overtime       number;
      v_Free_Time      number;
    
      v_Company_Id            number;
      v_Company_Cnt           number;
      v_Free_Time_Kind_Id     number;
      v_Overtime_Time_Kind_Id number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Free_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Free);
    
      v_Overtime_Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
    
      select p.Company_Id,
             p.Filial_Id,
             p.Staff_Id,
             p.Timesheet_Date,
             p.Schedule_Id,
             Od.Overtime_Seconds
        into v_Company_Id, v_Filial_Id, v_Staff_Id, v_Timesheet_Date, v_Schedule_Id, v_Overtime
        from Htt_Timesheets p
        join Hpd_Overtime_Days Od
          on Od.Company_Id = p.Company_Id
         and Od.Filial_Id = p.Filial_Id
         and Od.Staff_Id = p.Staff_Id
         and Od.Overtime_Date = p.Timesheet_Date
       where exists (select *
                from Hpd_Journal_Overtimes q
                join Hpd_Journals p
                  on p.Company_Id = q.Company_Id
                 and p.Filial_Id = q.Filial_Id
                 and p.Journal_Id = q.Journal_Id
                 and p.Posted = 'Y'
               where q.Company_Id = Od.Company_Id
                 and q.Filial_Id = Od.Filial_Id
                 and q.Overtime_Id = Od.Overtime_Id)
         and exists (select 1
                from Htt_Dirty_Timesheets q
               where q.Company_Id = p.Company_Id
                 and q.Filial_Id = p.Filial_Id
                 and q.Timesheet_Id = p.Timesheet_Id)
         and Nvl((select sum(Tf.Fact_Value)
                   from Htt_Timesheet_Facts Tf
                   join Htt_Time_Kinds Tk
                     on Tk.Company_Id = v_Company_Id
                    and Nvl(Tk.Parent_Id, Tk.Time_Kind_Id) = v_Free_Time_Kind_Id
                    and Tk.Time_Kind_Id = Tf.Time_Kind_Id
                  where Tf.Company_Id = p.Company_Id
                    and Tf.Filial_Id = p.Filial_Id
                    and Tf.Timesheet_Id = p.Timesheet_Id),
                 0) < Od.Overtime_Seconds
         and Rownum = 1;
    
      v_Free_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => v_Company_Id,
                                             i_Filial_Id      => v_Filial_Id,
                                             i_Staff_Id       => v_Staff_Id,
                                             i_Timesheet_Date => v_Timesheet_Date,
                                             i_Time_Kind_Id   => v_Free_Time_Kind_Id);
    
      Htt_Error.Raise_005(i_Staff_Name           => Href_Util.Staff_Name(i_Company_Id => v_Company_Id,
                                                                         i_Filial_Id  => v_Filial_Id,
                                                                         i_Staff_Id   => v_Staff_Id),
                          i_Timesheet_Date       => v_Timesheet_Date,
                          i_Schedule_Name        => z_Htt_Schedules.Load(i_Company_Id => v_Company_Id, --
                                                    i_Filial_Id => v_Filial_Id, --
                                                    i_Schedule_Id => v_Schedule_Id).Name,
                          i_Overtime_Exceed_Text => Htt_Util.To_Time_Seconds_Text(i_Seconds      => v_Overtime -
                                                                                                    v_Free_Time,
                                                                                  i_Show_Minutes => true,
                                                                                  i_Show_Words   => true));
    
    exception
      when No_Data_Found then
        insert into Htt_Timesheet_Facts
          (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
          (select t.Company_Id,
                  t.Filial_Id,
                  t.Timesheet_Id,
                  v_Overtime_Time_Kind_Id,
                  Od.Overtime_Seconds
             from Htt_Timesheets t
             join Hpd_Overtime_Days Od
               on Od.Company_Id = t.Company_Id
              and Od.Filial_Id = t.Filial_Id
              and Od.Staff_Id = t.Staff_Id
              and Od.Overtime_Date = t.Timesheet_Date
            where exists (select *
                     from Hpd_Journal_Overtimes q
                     join Hpd_Journals p
                       on p.Company_Id = q.Company_Id
                      and p.Filial_Id = q.Filial_Id
                      and p.Journal_Id = q.Journal_Id
                      and p.Posted = 'Y'
                    where q.Company_Id = Od.Company_Id
                      and q.Filial_Id = Od.Filial_Id
                      and q.Overtime_Id = Od.Overtime_Id)
              and exists (select 1
                     from Htt_Dirty_Timesheets w
                    where w.Company_Id = t.Company_Id
                      and w.Filial_Id = t.Filial_Id
                      and w.Timesheet_Id = t.Timesheet_Id));
    end;
  
    --------------------------------------------------
    Procedure Insert_Timebook_Adjustments is
      v_Company_Id          number;
      v_Company_Cnt         number;
      v_Turnout_Adjustment  number;
      v_Overtime_Adjustment number;
      v_Lack_Tk_Id          number;
    begin
      select min(Qr.Company_Id), count(1)
        into v_Company_Id, v_Company_Cnt
        from (select t.Company_Id
                from Htt_Dirty_Timesheets t
               group by t.Company_Id) Qr;
    
      if v_Company_Cnt > 1 then
        Htt_Error.Raise_008;
      end if;
    
      if v_Company_Id is null then
        return;
      end if;
    
      v_Turnout_Adjustment  := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
      v_Overtime_Adjustment := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
      v_Lack_Tk_Id          := Htt_Util.Time_Kind_Id(i_Company_Id => v_Company_Id,
                                                     i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
    
      insert all --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Turnout_Adjustment, Turnout_Time * 60) --
      into Htt_Timesheet_Facts
        (Company_Id, Filial_Id, Timesheet_Id, Time_Kind_Id, Fact_Value)
      values
        (Company_Id, Filial_Id, Timesheet_Id, v_Overtime_Adjustment, Overtime * 60)
        select q.Company_Id,
               q.Filial_Id,
               q.Timesheet_Id,
               (select a.Overtime
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Overtime,
               (select a.Turnout_Time
                  from Hpd_Page_Adjustments a
                 where a.Company_Id = La.Company_Id
                   and a.Filial_Id = La.Filial_Id
                   and a.Page_Id = La.Page_Id) as Turnout_Time
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets q
            on q.Company_Id = Dt.Company_Id
           and q.Filial_Id = Dt.Filial_Id
           and q.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = q.Company_Id
           and La.Filial_Id = q.Filial_Id
           and La.Staff_Id = q.Staff_Id
           and La.Adjustment_Date = q.Timesheet_Date;
    
      update (select Df.Fact_Value,
                     (select Tf.Fact_Value
                        from Htt_Timesheet_Facts Tf
                       where Tf.Company_Id = Dt.Company_Id
                         and Tf.Filial_Id = Dt.Filial_Id
                         and Tf.Timesheet_Id = Dt.Timesheet_Id
                         and Tf.Time_Kind_Id = v_Lack_Tk_Id) New_Value
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Adjustment_Deleted_Facts Df
                  on Df.Company_Id = Tm.Company_Id
                 and Df.Filial_Id = Tm.Filial_Id
                 and Df.Staff_Id = Tm.Staff_Id
                 and Df.Adjustment_Date = Tm.Timesheet_Date
                 and Df.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Nvl(q.New_Value, 0);
    
      insert into Hpd_Adjustment_Deleted_Facts
        (Company_Id, Filial_Id, Staff_Id, Adjustment_Date, Time_Kind_Id, Fact_Value)
        select Tf.Company_Id,
               Tf.Filial_Id,
               Tm.Staff_Id,
               Tm.Timesheet_Date,
               Tf.Time_Kind_Id,
               Tf.Fact_Value
          from Htt_Dirty_Timesheets Dt
          join Htt_Timesheets Tm
            on Tm.Company_Id = Dt.Company_Id
           and Tm.Filial_Id = Dt.Filial_Id
           and Tm.Timesheet_Id = Dt.Timesheet_Id
          join Hpd_Lock_Adjustments La
            on La.Company_Id = Tm.Company_Id
           and La.Filial_Id = Tm.Filial_Id
           and La.Staff_Id = Tm.Staff_Id
           and La.Adjustment_Date = Tm.Timesheet_Date
           and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
          join Htt_Timesheet_Facts Tf
            on Tf.Company_Id = Dt.Company_Id
           and Tf.Filial_Id = Dt.Filial_Id
           and Tf.Timesheet_Id = Dt.Timesheet_Id
           and Tf.Time_Kind_Id = v_Lack_Tk_Id
         where not exists (select 1
                  from Hpd_Adjustment_Deleted_Facts p
                 where p.Company_Id = Tm.Company_Id
                   and p.Filial_Id = Tm.Filial_Id
                   and p.Staff_Id = Tm.Staff_Id
                   and p.Adjustment_Date = Tm.Timesheet_Date
                   and p.Time_Kind_Id = v_Lack_Tk_Id);
    
      update (select Tf.Fact_Value,
                     (select Pa.Turnout_Time * 60
                        from Hpd_Page_Adjustments Pa
                       where Pa.Company_Id = La.Company_Id
                         and Pa.Filial_Id = La.Filial_Id
                         and Pa.Page_Id = La.Page_Id) Turnout_Time
                from Htt_Dirty_Timesheets Dt
                join Htt_Timesheets Tm
                  on Tm.Company_Id = Dt.Company_Id
                 and Tm.Filial_Id = Dt.Filial_Id
                 and Tm.Timesheet_Id = Dt.Timesheet_Id
                join Hpd_Lock_Adjustments La
                  on La.Company_Id = Tm.Company_Id
                 and La.Filial_Id = Tm.Filial_Id
                 and La.Staff_Id = Tm.Staff_Id
                 and La.Adjustment_Date = Tm.Timesheet_Date
                 and La.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete
                join Htt_Timesheet_Facts Tf
                  on Tf.Company_Id = Dt.Company_Id
                 and Tf.Filial_Id = Dt.Filial_Id
                 and Tf.Timesheet_Id = Dt.Timesheet_Id
                 and Tf.Time_Kind_Id = v_Lack_Tk_Id) q
         set q.Fact_Value = Greatest(q.Fact_Value - Nvl(q.Turnout_Time, 0), 0);
    end;
  begin
    delete Htt_Timesheet_Facts Tf
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where Tf.Company_Id = t.Company_Id
               and Tf.Filial_Id = t.Filial_Id
               and Tf.Timesheet_Id = t.Timesheet_Id);
  
    delete Htt_Timesheet_Intervals Ti
     where exists (select 1
              from Htt_Dirty_Timesheets t
             where Ti.Company_Id = t.Company_Id
               and Ti.Filial_Id = t.Filial_Id
               and Ti.Timesheet_Id = t.Timesheet_Id);
  
    for r in (select t.*,
                     (select Td.Time_Kind_Id
                        from Hpd_Timeoff_Days Td
                       where Td.Company_Id = t.Company_Id
                         and Td.Filial_Id = t.Filial_Id
                         and Td.Staff_Id = t.Staff_Id
                         and Td.Timeoff_Date = t.Timesheet_Date) Timeoff_Tk_Id,
                     (select count(*)
                        from Htt_Timesheet_Tracks Tt
                       where Tt.Company_Id = t.Company_Id
                         and Tt.Filial_Id = t.Filial_Id
                         and Tt.Timesheet_Id = t.Timesheet_Id) Tracks_Count,
                     (select count(*)
                        from Htt_Timesheet_Requests Tr
                       where Tr.Company_Id = t.Company_Id
                         and Tr.Filial_Id = t.Filial_Id
                         and Tr.Timesheet_Id = t.Timesheet_Id) Requests_Count
                from Htt_Timesheets t
                join Htt_Dirty_Timesheets Dt
                  on t.Company_Id = Dt.Company_Id
                 and t.Filial_Id = Dt.Filial_Id
                 and t.Timesheet_Id = Dt.Timesheet_Id)
    loop
      z_Htt_Timesheets.Init(p_Row                 => r_Timesheet,
                            i_Company_Id          => r.Company_Id,
                            i_Filial_Id           => r.Filial_Id,
                            i_Timesheet_Id        => r.Timesheet_Id,
                            i_Timesheet_Date      => r.Timesheet_Date,
                            i_Staff_Id            => r.Staff_Id,
                            i_Employee_Id         => r.Employee_Id,
                            i_Schedule_Id         => r.Schedule_Id,
                            i_Day_Kind            => r.Day_Kind,
                            i_Begin_Time          => r.Begin_Time,
                            i_End_Time            => r.End_Time,
                            i_Break_Enabled       => r.Break_Enabled,
                            i_Break_Begin_Time    => r.Break_Begin_Time,
                            i_Break_End_Time      => r.Break_End_Time,
                            i_Plan_Time           => r.Plan_Time,
                            i_Full_Time           => r.Full_Time,
                            i_Input_Time          => null,
                            i_Output_Time         => null,
                            i_Track_Duration      => r.Track_Duration,
                            i_Schedule_Kind       => r.Schedule_Kind,
                            i_Count_Late          => r.Count_Late,
                            i_Count_Early         => r.Count_Early,
                            i_Count_Lack          => r.Count_Lack,
                            i_Count_Free          => r.Count_Free,
                            i_Gps_Turnout_Enabled => r.Gps_Turnout_Enabled,
                            i_Gps_Use_Location    => r.Gps_Use_Location,
                            i_Gps_Max_Interval    => r.Gps_Max_Interval,
                            i_Shift_Begin_Time    => r.Shift_Begin_Time,
                            i_Shift_End_Time      => r.Shift_End_Time,
                            i_Input_Border        => r.Input_Border,
                            i_Output_Border       => r.Output_Border,
                            i_Calendar_Id         => r.Calendar_Id,
                            i_Allowed_Late_Time   => r.Allowed_Late_Time,
                            i_Allowed_Early_Time  => r.Allowed_Early_Time,
                            i_Begin_Late_Time     => r.Begin_Late_Time,
                            i_End_Early_Time      => r.End_Early_Time);
    
      Gen_Timesheet_Facts(p_Timesheet      => r_Timesheet,
                          p_Facts          => v_Facts,
                          p_Trans_Tracks   => v_Trans_Tracks,
                          p_Intervals      => v_Intervals,
                          i_Tracks_Exist   => r.Tracks_Count > 0,
                          i_Requests_Exist => r.Requests_Count > 0,
                          i_Timeoff_Tk_Id  => r.Timeoff_Tk_Id);
    
      Htt_Util.Timesheet_Add(o_Timesheets   => v_Timesheets,
                             i_Company_Id   => r.Company_Id,
                             i_Filial_Id    => r.Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id,
                             i_Input_Time   => r_Timesheet.Input_Time,
                             i_Output_Time  => r_Timesheet.Output_Time);
    
      if v_Facts.Count > 10000 then
        Insert_Timesheet_Facts(p_Facts     => v_Facts, --
                               p_Intervals => v_Intervals);
      end if;
    
      if v_Timesheets.Count > 10000 then
        Update_Timesheets(p_Timesheets   => v_Timesheets, --
                          p_Trans_Tracks => v_Trans_Tracks);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(p_Facts     => v_Facts, --
                           p_Intervals => v_Intervals);
  
    Update_Timesheets(p_Timesheets   => v_Timesheets, --
                      p_Trans_Tracks => v_Trans_Tracks);
  
    Insert_Overtime_Days;
    Insert_Timebook_Adjustments;
  end;

  ----------------------------------------------------------------------------------------------------
  -- o'zgartirish kerak structurani
  -- adashib ketish ehtimolligi juda katta
  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Timesheet_Requests
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Request_Id number
  ) is
    v_Begin_Date date;
    v_End_Date   date;
    v_Timesheet  Htt_Timesheets%rowtype;
  
    r_Request  Htt_Requests%rowtype;
    r_Timebook Hpr_Timebooks%rowtype;
  
    v_Timesheet_Ids Array_Number;
  
    f_Timesheet_Sets Fazo.Boolean_Code_Aat;
    --------------------------------------------------
    Procedure Put_Timesheet_Ids is
    begin
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        f_Timesheet_Sets(v_Timesheet_Ids(i)) := true;
      end loop;
    end;
  
  begin
    r_Request := z_Htt_Requests.Lock_Load(i_Company_Id => i_Company_Id,
                                          i_Filial_Id  => i_Filial_Id,
                                          i_Request_Id => i_Request_Id);
  
    v_Begin_Date := Trunc(r_Request.Begin_Time);
    v_End_Date   := Trunc(r_Request.End_Time);
  
    while v_Begin_Date <= v_End_Date
    loop
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Request.Company_Id,
                                     i_Filial_Id      => r_Request.Filial_Id,
                                     i_Staff_Id       => r_Request.Staff_Id,
                                     i_Timesheet_Date => v_Begin_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Request.Company_Id,
                                            i_Filial_Id      => r_Request.Filial_Id,
                                            i_Staff_Id       => r_Request.Staff_Id,
                                            i_Timesheet_Date => v_Begin_Date);
      
        Htt_Error.Raise_006(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Request.Company_Id,
                                                                      i_Filial_Id  => r_Request.Filial_Id,
                                                                      i_Staff_Id   => r_Request.Staff_Id),
                            i_Timesheet_Date  => v_Begin_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      v_Begin_Date := v_Begin_Date + 1;
    end loop;
  
    -- buni mexanizmni fix qilish kerak, hozir butun staff lock bo'lib qoladi, buni htt o'zi uchun qilish kerak
    z_Href_Staffs.Lock_Only(i_Company_Id => r_Request.Company_Id,
                            i_Filial_Id  => r_Request.Filial_Id,
                            i_Staff_Id   => r_Request.Staff_Id);
  
    delete Htt_Timesheet_Requests q
     where q.Company_Id = r_Request.Company_Id
       and q.Request_Id = r_Request.Request_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    Put_Timesheet_Ids;
  
    if r_Request.Status = Htt_Pref.c_Request_Status_Completed then
      if r_Request.Request_Type = Htt_Pref.c_Request_Type_Part_Of_Day then
        v_Timesheet_Ids := Find_Request_Timesheets(i_Company_Id    => r_Request.Company_Id,
                                                   i_Filial_Id     => r_Request.Filial_Id,
                                                   i_Staff_Id      => r_Request.Staff_Id,
                                                   i_Request_Begin => r_Request.Begin_Time,
                                                   i_Request_End   => r_Request.End_Time);
      
      elsif r_Request.Request_Type = Htt_Pref.c_Request_Type_Full_Day then
        if Htt_Util.Exist_Timesheet(i_Company_Id     => r_Request.Company_Id,
                                    i_Filial_Id      => r_Request.Filial_Id,
                                    i_Staff_Id       => r_Request.Staff_Id,
                                    i_Timesheet_Date => Trunc(r_Request.Begin_Time),
                                    o_Timesheet      => v_Timesheet) then
          v_Timesheet_Ids := Array_Number(v_Timesheet.Timesheet_Id);
        end if;
      else
        v_Begin_Date := Trunc(r_Request.Begin_Time);
        v_End_Date   := Trunc(r_Request.End_Time);
      
        select q.Timesheet_Id
          bulk collect
          into v_Timesheet_Ids
          from Htt_Timesheets q
         where q.Company_Id = r_Request.Company_Id
           and q.Filial_Id = r_Request.Filial_Id
           and q.Staff_Id = r_Request.Staff_Id
           and q.Timesheet_Date between v_Begin_Date and v_End_Date;
      
      end if;
    
      for i in 1 .. v_Timesheet_Ids.Count
      loop
        z_Htt_Timesheet_Requests.Insert_Try(i_Company_Id   => r_Request.Company_Id,
                                            i_Filial_Id    => r_Request.Filial_Id,
                                            i_Timesheet_Id => v_Timesheet_Ids(i),
                                            i_Request_Id   => r_Request.Request_Id);
      end loop;
    
      Put_Timesheet_Ids;
    end if;
  
    v_Timesheet.Timesheet_Id := f_Timesheet_Sets.First;
  
    while v_Timesheet.Timesheet_Id is not null
    loop
      Gen_Timesheet_Facts(i_Company_Id   => r_Request.Company_Id, --
                          i_Filial_Id    => r_Request.Filial_Id,
                          i_Timesheet_Id => v_Timesheet.Timesheet_Id);
    
      v_Timesheet.Timesheet_Id := f_Timesheet_Sets.Next(v_Timesheet.Timesheet_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- facts generation triggered by timeoffs
  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Timeoff_Facts
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Timeoff_Id     number,
    i_Remove_Timeoff boolean := false
  ) is
    v_Turnout_Id   number;
    v_Lack_Id      number;
    v_Time_Kind_Id number;
    v_Turnout_Time number;
    v_Fact_Value   number;
    v_Turnout_Ids  Array_Number;
    v_Facts        Htt_Pref.Timesheet_Fact_Nt := Htt_Pref.Timesheet_Fact_Nt();
    v_Intervals    Htt_Pref.Timesheet_Interval_Nt := Htt_Pref.Timesheet_Interval_Nt();
  begin
    v_Lack_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                       i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    v_Turnout_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                          i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout);
  
    v_Turnout_Ids := Htt_Util.Time_Kind_With_Child_Ids(i_Company_Id => i_Company_Id,
                                                       i_Pcodes     => Array_Varchar2(Htt_Pref.c_Pcode_Time_Kind_Turnout));
  
    delete Htt_Timesheet_Facts Tf
     where Tf.Company_Id = i_Company_Id
       and Tf.Filial_Id = i_Filial_Id
       and (Tf.Time_Kind_Id not member of v_Turnout_Ids or Tf.Fact_Value = 0)
       and exists (select *
              from Hpd_Timeoff_Days Td
             where Td.Company_Id = i_Company_Id
               and Td.Filial_Id = i_Filial_Id
               and Td.Timeoff_Id = i_Timeoff_Id
               and exists (select *
                      from Htt_Timesheets t
                     where t.Company_Id = Td.Company_Id
                       and t.Filial_Id = Td.Filial_Id
                       and t.Staff_Id = Td.Staff_Id
                       and t.Timesheet_Date = Td.Timeoff_Date
                       and t.Timesheet_Id = Tf.Timesheet_Id));
  
    for r in (select t.Staff_Id,
                     t.Timesheet_Date,
                     t.Timesheet_Id,
                     t.Plan_Time,
                     t.Count_Lack,
                     Td.Time_Kind_Id,
                     t.Schedule_Kind,
                     Nvl((select 'Y'
                           from Htt_Timesheet_Locks Tl
                          where Tl.Company_Id = Td.Company_Id
                            and Tl.Filial_Id = Td.Filial_Id
                            and Tl.Staff_Id = Td.Staff_Id
                            and Tl.Timesheet_Date = Td.Timeoff_Date),
                         'N') Locked
                from Htt_Timesheets t
                join Hpd_Timeoff_Days Td
                  on Td.Company_Id = t.Company_Id
                 and Td.Filial_Id = t.Filial_Id
                 and Td.Staff_Id = t.Staff_Id
                 and Td.Timeoff_Date = t.Timesheet_Date
               where Td.Company_Id = i_Company_Id
                 and Td.Filial_Id = i_Filial_Id
                 and Td.Timeoff_Id = i_Timeoff_Id)
    loop
      if r.Locked = 'Y' then
        v_Turnout_Time := Htt_Util.Get_Fact_Value(i_Company_Id     => i_Company_Id,
                                                  i_Filial_Id      => i_Filial_Id,
                                                  i_Staff_Id       => r.Staff_Id,
                                                  i_Timesheet_Date => r.Timesheet_Date,
                                                  i_Time_Kind_Id   => v_Turnout_Id);
      
        v_Fact_Value := r.Plan_Time - v_Turnout_Time;
      
        if i_Remove_Timeoff then
          v_Time_Kind_Id := v_Lack_Id;
        
          if r.Count_Lack = 'N' then
            v_Fact_Value := 0;
          end if;
        else
          v_Time_Kind_Id := r.Time_Kind_Id;
        end if;
      
        Gen_Timesheet_Fact(p_Facts         => v_Facts,
                           i_Company_Id    => i_Company_Id,
                           i_Filial_Id     => i_Filial_Id,
                           i_Timesheet_Id  => r.Timesheet_Id,
                           i_Time_Kind_Id  => v_Time_Kind_Id,
                           i_Fact_Value    => v_Fact_Value,
                           i_Schedule_Kind => r.Schedule_Kind);
      
        z_Htt_Timesheet_Locks.Update_One(i_Company_Id     => i_Company_Id,
                                         i_Filial_Id      => i_Filial_Id,
                                         i_Staff_Id       => r.Staff_Id,
                                         i_Timesheet_Date => r.Timesheet_Date,
                                         i_Facts_Changed  => Option_Varchar2('Y'));
      else
        Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                             i_Filial_Id    => i_Filial_Id,
                             i_Timesheet_Id => r.Timesheet_Id);
      end if;
    end loop;
  
    Insert_Timesheet_Facts(p_Facts     => v_Facts, --
                           p_Intervals => v_Intervals);
  end;

  ----------------------------------------------------------------------------------------------------        
  Procedure Insert_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      Insert_Timesheet_Overtime_Facts(i_Company_Id       => Od.Company_Id,
                                      i_Filial_Id        => Od.Filial_Id,
                                      i_Timesheet_Id     => Od.Timesheet_Id,
                                      i_Staff_Id         => Od.Staff_Id,
                                      i_Timesheet_Date   => Od.Overtime_Date,
                                      i_Overtime_Seconds => Od.Overtime_Seconds);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Remove_Overtime_Facts
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Overtime_Id number
  ) is
    v_Time_Kind_Id number := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                   i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime);
  begin
    for Od in (select d.*, t.Timesheet_Id
                 from Hpd_Overtime_Days d
                 join Htt_Timesheets t
                   on t.Company_Id = d.Company_Id
                  and t.Filial_Id = d.Filial_Id
                  and t.Timesheet_Date = d.Overtime_Date
                  and t.Staff_Id = d.Staff_Id
                where d.Company_Id = i_Company_Id
                  and d.Filial_Id = i_Filial_Id
                  and d.Overtime_Id = i_Overtime_Id)
    loop
      z_Htt_Timesheet_Facts.Delete_One(i_Company_Id   => Od.Company_Id,
                                       i_Filial_Id    => Od.Filial_Id,
                                       i_Timesheet_Id => Od.Timesheet_Id,
                                       i_Time_Kind_Id => v_Time_Kind_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Save_Adjustment_Fact
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Id   number,
    i_Timesheet_Date date
  ) is
    v_Turnout_Adjustment_Id  number;
    v_Overtime_Adjustment_Id number;
    v_Lack_Tk_Id             number;
    r_Fact                   Htt_Timesheet_Facts%rowtype;
  begin
    v_Turnout_Adjustment_Id  := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Turnout_Adjustment);
    v_Overtime_Adjustment_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Overtime_Adjustment);
    v_Lack_Tk_Id             := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                      i_Pcode      => Htt_Pref.c_Pcode_Time_Kind_Lack);
  
    for r in (select (select a.Overtime
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Overtime,
                     (select a.Turnout_Time
                        from Hpd_Page_Adjustments a
                       where a.Company_Id = i_Company_Id
                         and a.Filial_Id = i_Filial_Id
                         and a.Page_Id = q.Page_Id) as Turnout_Time,
                     q.Kind,
                     q.Staff_Id,
                     q.Adjustment_Date
                from Hpd_Lock_Adjustments q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Adjustment_Date = i_Timesheet_Date)
    loop
      continue when r.Overtime is null or r.Turnout_Time is null;
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Overtime_Adjustment_Id,
                                     i_Fact_Value   => r.Overtime * 60);
    
      z_Htt_Timesheet_Facts.Save_One(i_Company_Id   => i_Company_Id,
                                     i_Filial_Id    => i_Filial_Id,
                                     i_Timesheet_Id => i_Timesheet_Id,
                                     i_Time_Kind_Id => v_Turnout_Adjustment_Id,
                                     i_Fact_Value   => r.Turnout_Time * 60);
    
      if r.Kind = Hpd_Pref.c_Adjustment_Kind_Incomplete and r.Turnout_Time > 0 and
         z_Htt_Timesheet_Facts.Exist_Lock(i_Company_Id   => i_Company_Id,
                                          i_Filial_Id    => i_Filial_Id,
                                          i_Timesheet_Id => i_Timesheet_Id,
                                          i_Time_Kind_Id => v_Lack_Tk_Id,
                                          o_Row          => r_Fact) then
        z_Hpd_Adjustment_Deleted_Facts.Save_One(i_Company_Id      => i_Company_Id,
                                                i_Filial_Id       => i_Filial_Id,
                                                i_Staff_Id        => r.Staff_Id,
                                                i_Adjustment_Date => r.Adjustment_Date,
                                                i_Time_Kind_Id    => v_Lack_Tk_Id,
                                                i_Fact_Value      => Nvl(r_Fact.Fact_Value, 0));
      
        if r_Fact.Fact_Value > 0 then
          z_Htt_Timesheet_Facts.Update_One(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => i_Timesheet_Id,
                                           i_Time_Kind_Id => v_Lack_Tk_Id,
                                           i_Fact_Value   => Option_Number(Greatest(r_Fact.Fact_Value -
                                                                                    r.Turnout_Time * 60,
                                                                                    0)));
        end if;
      end if;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Update_Status
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Track_Id   number
  ) is
    v_Used_Count   number;
    v_Tracks_Count number;
    v_Track_Status varchar2(1);
  begin
    select count(*)
      into v_Tracks_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id;
  
    select count(*)
      into v_Used_Count
      from Htt_Timesheet_Tracks Tt
     where Tt.Company_Id = i_Company_Id
       and Tt.Filial_Id = i_Filial_Id
       and Tt.Track_Id = i_Track_Id
       and Tt.Track_Used = 'Y';
  
    case
      when v_Tracks_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Draft;
      when v_Used_Count = 0 then
        v_Track_Status := Htt_Pref.c_Track_Status_Not_Used;
      when v_Used_Count < v_Tracks_Count then
        v_Track_Status := Htt_Pref.c_Track_Status_Partially_Used;
      else
        v_Track_Status := Htt_Pref.c_Track_Status_Used;
    end case;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(v_Track_Status));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Add
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Track_Id       number,
    i_Employee_Id    number,
    i_Track_Datetime date,
    i_Track_Type     varchar2,
    i_Trans_Input    varchar2,
    i_Trans_Output   varchar2,
    i_Trans_Check    varchar2
  ) is
    r_Track         Htt_Timesheet_Tracks%rowtype;
    v_Timesheet_Ids Array_Number := Array_Number();
    v_Track_Date    date := Trunc(i_Track_Datetime);
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    r_Track.Company_Id     := i_Company_Id;
    r_Track.Filial_Id      := i_Filial_Id;
    r_Track.Track_Id       := i_Track_Id;
    r_Track.Track_Datetime := i_Track_Datetime;
    r_Track.Track_Type     := i_Track_Type;
    r_Track.Track_Used     := 'N';
    r_Track.Trans_Input    := i_Trans_Input;
    r_Track.Trans_Output   := i_Trans_Output;
    r_Track.Trans_Check    := i_Trans_Check;
  
    for r in (select *
                from Href_Staffs q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Employee_Id = i_Employee_Id
                 and q.State = 'A'
                 and q.Hiring_Date <= v_Track_Date
                 and (q.Dismissal_Date is null or q.Dismissal_Date >= v_Track_Date))
    loop
      v_Timesheet_Ids := v_Timesheet_Ids multiset union
                         Find_Track_Timesheets(i_Company_Id     => i_Company_Id,
                                               i_Filial_Id      => i_Filial_Id,
                                               i_Staff_Id       => r.Staff_Id,
                                               i_Track_Datetime => i_Track_Datetime);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Track.Timesheet_Id := v_Timesheet_Ids(i);
    
      z_Htt_Timesheet_Tracks.Save_Row(r_Track);
    end loop;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      update Htt_Timesheet_Tracks Tt
         set Tt.Track_Type =
             (select t.Track_Type
                from Htt_Tracks t
               where t.Company_Id = i_Company_Id
                 and t.Filial_Id = i_Filial_Id
                 and t.Track_Id = Tt.Track_Id)
       where Tt.Company_Id = i_Company_Id
         and Tt.Filial_Id = i_Filial_Id
         and Tt.Timesheet_Id = v_Timesheet_Ids(i);
    
      Gen_Timesheet_Facts(i_Company_Id   => i_Company_Id,
                          i_Filial_Id    => i_Filial_Id,
                          i_Timesheet_Id => v_Timesheet_Ids(i),
                          i_Send_Notify  => true);
    end loop;
  
    Track_Update_Status(i_Company_Id => i_Company_Id,
                        i_Filial_Id  => i_Filial_Id,
                        i_Track_Id   => i_Track_Id);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Track_Delete
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Track_Id    number,
    i_Employee_Id number
  ) is
    r_Timesheet     Htt_Timesheets%rowtype;
    r_Timebook      Hpr_Timebooks%rowtype;
    v_Timesheet_Ids Array_Number;
  begin
    if not z_Mhr_Employees.Exist_Lock(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Employee_Id => i_Employee_Id) then
      return;
    end if;
  
    -- unused tracks are free for deletion
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
       and q.Track_Used = 'N';
  
    delete from Htt_Timesheet_Tracks q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and q.Track_Id = i_Track_Id
    returning q.Timesheet_Id bulk collect into v_Timesheet_Ids;
  
    delete from Htt_Potential_Outputs Pt
     where Pt.Company_Id = i_Company_Id
       and Pt.Filial_Id = i_Filial_Id
       and Pt.Track_Id = i_Track_Id;
  
    for i in 1 .. v_Timesheet_Ids.Count
    loop
      r_Timesheet := z_Htt_Timesheets.Load(i_Company_Id   => i_Company_Id,
                                           i_Filial_Id    => i_Filial_Id,
                                           i_Timesheet_Id => v_Timesheet_Ids(i));
    
      if z_Htt_Timesheet_Locks.Exist(i_Company_Id     => r_Timesheet.Company_Id,
                                     i_Filial_Id      => r_Timesheet.Filial_Id,
                                     i_Staff_Id       => r_Timesheet.Staff_Id,
                                     i_Timesheet_Date => r_Timesheet.Timesheet_Date) then
        r_Timebook := Get_Blocking_Timebook(i_Company_Id     => r_Timesheet.Company_Id,
                                            i_Filial_Id      => r_Timesheet.Filial_Id,
                                            i_Staff_Id       => r_Timesheet.Staff_Id,
                                            i_Timesheet_Date => r_Timesheet.Timesheet_Date);
      
        Htt_Error.Raise_007(i_Staff_Name      => Href_Util.Staff_Name(i_Company_Id => r_Timesheet.Company_Id,
                                                                      i_Filial_Id  => r_Timesheet.Filial_Id,
                                                                      i_Staff_Id   => r_Timesheet.Staff_Id),
                            i_Timesheet_Date  => r_Timesheet.Timesheet_Date,
                            i_Timebook_Number => r_Timebook.Timebook_Number,
                            i_Timebook_Month  => r_Timebook.Month);
      end if;
    
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => v_Timesheet_Ids(i));
    end loop;
  
    z_Htt_Tracks.Update_One(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => i_Track_Id,
                            i_Status     => Option_Varchar2(Htt_Pref.c_Track_Status_Draft));
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Trash_Track_Insert(i_Track Htt_Tracks%rowtype) is
    r_Track Htt_Trash_Tracks%rowtype;
  begin
    return;
    z_Htt_Trash_Tracks.Init(p_Row            => r_Track,
                            i_Company_Id     => i_Track.Company_Id,
                            i_Filial_Id      => i_Track.Filial_Id,
                            i_Track_Id       => i_Track.Track_Id,
                            i_Track_Date     => i_Track.Track_Date,
                            i_Track_Time     => i_Track.Track_Time,
                            i_Track_Datetime => i_Track.Track_Datetime,
                            i_Person_Id      => i_Track.Person_Id,
                            i_Track_Type     => i_Track.Track_Type,
                            i_Mark_Type      => i_Track.Mark_Type,
                            i_Device_Id      => i_Track.Device_Id,
                            i_Location_Id    => i_Track.Location_Id,
                            i_Latlng         => i_Track.Latlng,
                            i_Accuracy       => i_Track.Accuracy,
                            i_Photo_Sha      => i_Track.Photo_Sha,
                            i_Note           => i_Track.Note,
                            i_Is_Valid       => i_Track.Is_Valid);
  
    z_Htt_Trash_Tracks.Insert_Row(r_Track);
  end;

  ----------------------------------------------------------------------------------------------------
  -- temporarily disabled to allow migration of tracks between filials
  -- and due to the fact that trash tracks were mainly implemented as license cheat prevention
  -- since licenses don't work now, trash tracks are not needed
  Procedure Make_Trash_Tracks
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Periods Href_Pref.Period_Nt;
  
    --------------------------------------------------
    Procedure Move_Tracks_To_Trash
    (
      i_Begin_Date date,
      i_End_Date   date
    ) is
    begin
      for r in (select *
                  from Htt_Tracks Ht
                 where Ht.Company_Id = i_Company_Id
                   and Ht.Filial_Id = i_Filial_Id
                   and Ht.Person_Id = i_Person_Id
                   and Ht.Track_Date between i_Begin_Date and i_End_Date)
      loop
        Trash_Track_Insert(r);
      
        z_Htt_Tracks.Delete_One(i_Company_Id => r.Company_Id,
                                i_Filial_Id  => r.Filial_Id,
                                i_Track_Id   => r.Track_Id);
      end loop;
    end;
  begin
    return;
    v_Periods := Htt_Util.Track_Not_Accepted_Periods(i_Company_Id  => i_Company_Id,
                                                     i_Filial_Id   => i_Filial_Id,
                                                     i_Employee_Id => i_Person_Id);
  
    for i in 1 .. v_Periods.Count
    loop
      Move_Tracks_To_Trash(i_Begin_Date => v_Periods(i).Period_Begin,
                           i_End_Date   => v_Periods(i).Period_End);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Make_Dirty_Person
  (
    i_Company_Id number,
    i_Person_Id  number
  ) is
    v_Dummy varchar2(1);
  begin
    Hac_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
  
    select 'x'
      into v_Dummy
      from Htt_Dirty_Persons q
     where q.Company_Id = i_Company_Id
       and q.Person_Id = i_Person_Id;
  exception
    when No_Data_Found then
      insert into Htt_Dirty_Persons
        (Company_Id, Person_Id)
      values
        (i_Company_Id, i_Person_Id);
    
      b.Add_Post_Callback('begin htt_core.notify_person_changes; end;');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Notify_Person_Changes is
  begin
    for r in (select *
                from Htt_Dirty_Persons)
    loop
      Htt_Global.w_Person.Company_Id := r.Company_Id;
      Htt_Global.w_Person.Person_Id  := r.Person_Id;
    
      b.Notify_Watchers(i_Watching_Expr => 'htt_global.w_person',
                        i_Expr_Type     => 'htt_global.person_rt');
    end loop;
  
    delete Htt_Dirty_Persons;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Lock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
  begin
    z_Htt_Timesheet_Locks.Insert_One(i_Company_Id     => i_Company_Id,
                                     i_Filial_Id      => i_Filial_Id,
                                     i_Staff_Id       => i_Staff_Id,
                                     i_Timesheet_Date => i_Timesheet_Date,
                                     i_Facts_Changed  => 'N');
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Timesheet_Unlock
  (
    i_Company_Id     number,
    i_Filial_Id      number,
    i_Staff_Id       number,
    i_Timesheet_Date date
  ) is
    v_Facts_Changed    varchar2(1);
    v_Unused_Track_Ids Array_Number;
    r_Timesheet        Htt_Timesheets%rowtype;
  begin
    delete Htt_Timesheet_Locks Tl
     where Tl.Company_Id = i_Company_Id
       and Tl.Filial_Id = i_Filial_Id
       and Tl.Staff_Id = i_Staff_Id
       and Tl.Timesheet_Date = i_Timesheet_Date
    returning Tl.Facts_Changed into v_Facts_Changed;
  
    if v_Facts_Changed = 'Y' then
      r_Timesheet := Htt_Util.Timesheet(i_Company_Id     => i_Company_Id,
                                        i_Filial_Id      => i_Filial_Id,
                                        i_Staff_Id       => i_Staff_Id,
                                        i_Timesheet_Date => i_Timesheet_Date);
    
      select Tt.Track_Id
        bulk collect
        into v_Unused_Track_Ids
        from Htt_Timesheet_Tracks Tt
       where Tt.Company_Id = r_Timesheet.Company_Id
         and Tt.Filial_Id = r_Timesheet.Filial_Id
         and Tt.Timesheet_Id = r_Timesheet.Timesheet_Id
         and Tt.Track_Used = 'N';
    
      -- regen facts
      Make_Dirty_Timesheet(i_Company_Id   => i_Company_Id,
                           i_Filial_Id    => i_Filial_Id,
                           i_Timesheet_Id => r_Timesheet.Timesheet_Id);
    
      -- change unused tracks status
      for i in 1 .. v_Unused_Track_Ids.Count
      loop
        Track_Update_Status(i_Company_Id => i_Company_Id,
                            i_Filial_Id  => i_Filial_Id,
                            i_Track_Id   => v_Unused_Track_Ids(i));
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Robot_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    v_Staff_Schedule_Id number := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                                       i_Filial_Id  => i_Filial_Id,
                                                       i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    v_Begin_Date        date := Trunc(i_Begin_Date);
    v_End_Date          date := Trunc(i_End_Date);
  begin
    if i_Schedule_Id = v_Robot_Schedule_Id then
      return;
    end if;
  
    if v_End_Date is null then
      -- user wants to regenerate all timesheets
      -- take max available schedule date for this schedule
      -- and delete all timesheets after this date
      if i_Schedule_Id = v_Staff_Schedule_Id then
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Staff_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Staff_Id = i_Staff_Id
           and d.Schedule_Date >= v_Begin_Date;
      else
        select max(d.Schedule_Date)
          into v_End_Date
          from Htt_Schedule_Days d
         where d.Company_Id = i_Company_Id
           and d.Filial_Id = i_Filial_Id
           and d.Schedule_Id = i_Schedule_Id
           and d.Schedule_Date >= v_Begin_Date;
      end if;
    
      if v_End_Date is null then
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_Begin_Date - 1);
      else
        Delete_Timesheets(i_Company_Id => i_Company_Id,
                          i_Filial_Id  => i_Filial_Id,
                          i_Staff_Id   => i_Staff_Id,
                          i_Lower_Date => v_End_Date);
      end if;
    
      v_End_Date := Nvl(v_End_Date, v_Begin_Date);
    end if;
  
    if i_Schedule_Id is null then
      delete Htt_Timesheets t
       where t.Company_Id = i_Company_Id
         and t.Filial_Id = i_Filial_Id
         and t.Staff_Id = i_Staff_Id
         and t.Timesheet_Date between i_Begin_Date and v_End_Date;
    end if;
  
    if i_Schedule_Id = v_Staff_Schedule_Id then
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => i_Staff_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => i_Begin_Date,
                                    i_End_Date    => v_End_Date);
    else
      Gen_Timesheet_Plan(i_Company_Id  => i_Company_Id,
                         i_Filial_Id   => i_Filial_Id,
                         i_Staff_Id    => i_Staff_Id,
                         i_Schedule_Id => i_Schedule_Id,
                         i_Begin_Date  => i_Begin_Date,
                         i_End_Date    => v_End_Date);
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Regenerate_Timesheets
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Staff_Id    number,
    i_Schedule_Id number,
    i_Dates       Array_Date
  ) is
    r_Schedule Htt_Schedules%rowtype;
  begin
    r_Schedule := z_Htt_Schedules.Take(i_Company_Id  => i_Company_Id,
                                       i_Filial_Id   => i_Filial_Id,
                                       i_Schedule_Id => i_Schedule_Id);
  
    for i in 1 .. i_Dates.Count
    loop
      Gen_Timesheet_Plan(i_Company_Id     => i_Company_Id,
                         i_Filial_Id      => i_Filial_Id,
                         i_Staff_Id       => i_Staff_Id,
                         i_Schedule_Id    => i_Schedule_Id,
                         i_Calendar_Id    => r_Schedule.Calendar_Id,
                         i_Timesheet_Date => i_Dates(i),
                         i_Track_Duration => r_Schedule.Track_Duration,
                         i_Schedule_Kind  => r_Schedule.Schedule_Kind,
                         i_Count_Late     => r_Schedule.Count_Late,
                         i_Count_Early    => r_Schedule.Count_Early,
                         i_Count_Lack     => r_Schedule.Count_Lack,
                         i_Count_Free     => r_Schedule.Count_Free);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Timesheets
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Staff_Id   number,
    i_Lower_Date date
  ) is
  begin
    delete Htt_Timesheets t
     where t.Company_Id = i_Company_Id
       and t.Filial_Id = i_Filial_Id
       and t.Staff_Id = i_Staff_Id
       and t.Timesheet_Date > i_Lower_Date;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Acms_Command_Add
  (
    i_Company_Id   number,
    i_Device_Id    number,
    i_Command_Kind varchar2,
    i_Person_Id    number := null,
    i_Data         varchar2 := null
  ) is
  begin
    z_Htt_Acms_Commands.Insert_One(i_Company_Id       => i_Company_Id,
                                   i_Command_Id       => Htt_Next.Acms_Command_Id,
                                   i_Device_Id        => i_Device_Id,
                                   i_Command_Kind     => i_Command_Kind,
                                   i_Person_Id        => i_Person_Id,
                                   i_Data             => i_Data,
                                   i_Status           => Htt_Pref.c_Command_Status_New,
                                   i_State_Changed_On => sysdate);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Calc_Gps_Track_Distance is
    v_Total_Distance number;
  begin
    for Cmp in (select c.Company_Id,
                       (select i.User_System
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) User_System,
                       (select i.Filial_Head
                          from Md_Company_Infos i
                         where i.Company_Id = c.Company_Id) Filial_Head
                  from Md_Companies c
                 where c.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = c.Company_Id
                                   and Cp.Project_Code = Verifix_Settings.c_Pc_Verifix_Hr) or
                        c.Company_Id = Md_Pref.c_Company_Head))
    loop
      for r in (select q.Company_Id, q.Filial_Id
                  from Md_Filials q
                 where q.Company_Id = Cmp.Company_Id
                   and q.Filial_Id <> Cmp.Filial_Head
                   and q.State = 'A')
      loop
        Biruni_Route.Context_Begin;
      
        Ui_Context.Init(i_User_Id      => Cmp.User_System,
                        i_Filial_Id    => r.Filial_Id,
                        i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
      
        for Gt in (select q.Track_Id, q.Person_Id, q.Track_Date
                     from Htt_Gps_Tracks q
                    where q.Company_Id = r.Company_Id
                      and q.Filial_Id = r.Filial_Id
                      and q.Calculated = 'N')
        loop
          v_Total_Distance := Htt_Util.Calc_Gps_Track_Distance(i_Company_Id => r.Company_Id,
                                                               i_Filial_Id  => r.Filial_Id,
                                                               i_Person_Id  => Gt.Person_Id,
                                                               i_Track_Date => Gt.Track_Date);
        
          z_Htt_Gps_Tracks.Update_One(i_Company_Id     => r.Company_Id,
                                      i_Filial_Id      => r.Filial_Id,
                                      i_Track_Id       => Gt.Track_Id,
                                      i_Total_Distance => Option_Number(v_Total_Distance),
                                      i_Calculated     => Option_Varchar2('Y'));
        end loop;
      
        Biruni_Route.Context_End;
      end loop;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Sync_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_Person_Ids Array_Number;
    v_Date       date := Trunc(sysdate);
  begin
    select w.Employee_Id
      bulk collect
      into v_Person_Ids
      from Href_Staffs w
     where w.Company_Id = i_Company_Id
       and w.Filial_Id = i_Filial_Id
       and w.State = 'A'
       and w.Hiring_Date <= v_Date
       and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
       and exists (select 1
              from Htt_Location_Divisions q
             where q.Company_Id = i_Company_Id
               and q.Filial_Id = i_Filial_Id
               and q.Location_Id = i_Location_Id
               and w.Division_Id = q.Division_Id)
     group by w.Employee_Id;
  
    for i in 1 .. v_Person_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => i_Location_Id,
                          i_Person_Id   => v_Person_Ids(i),
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Location_Id = i_Location_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Person_Id not in (select *
                                           from table(v_Person_Ids)))
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------      
  Procedure Person_Sync_Locations
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Date         date := Trunc(sysdate);
  
    --------------------------------------------------
    Function Exists_Location_Person return boolean is
      v_Dummy varchar2(1);
    begin
      select 'x'
        into v_Dummy
        from Htt_Location_Persons p
       where p.Company_Id = i_Company_Id
         and p.Filial_Id = i_Filial_Id
         and p.Person_Id = i_Person_Id
         and p.Attach_Type = Htt_Pref.c_Attach_Type_Auto
         and Rownum = 1;
    
      return true;
    exception
      when No_Data_Found then
        return false;
    end;
  
    --------------------------------------------------
    Function Exists_Active_Staff(i_Date date) return boolean is
      v_Staff_Id number;
    begin
      v_Staff_Id := Href_Util.Get_Primary_Staff_Id(i_Company_Id  => i_Company_Id,
                                                   i_Filial_Id   => i_Filial_Id,
                                                   i_Employee_Id => i_Person_Id,
                                                   i_Date        => i_Date);
    
      return v_Staff_Id is not null;
    end;
  begin
    if not Exists_Active_Staff(v_Date) and not Exists_Location_Person then
      return;
    end if;
  
    select q.Location_Id
      bulk collect
      into v_Location_Ids
      from Htt_Location_Divisions q
     where q.Company_Id = i_Company_Id
       and q.Filial_Id = i_Filial_Id
       and exists (select 1
              from Href_Staffs w
             where w.Company_Id = q.Company_Id
               and w.Filial_Id = q.Filial_Id
               and w.Division_Id = q.Division_Id
               and w.Employee_Id = i_Person_Id
               and w.Hiring_Date <= v_Date
               and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date)
               and w.State = 'A')
     group by q.Location_Id;
  
    for i in 1 .. v_Location_Ids.Count
    loop
      Location_Add_Person(i_Company_Id  => i_Company_Id,
                          i_Filial_Id   => i_Filial_Id,
                          i_Location_Id => v_Location_Ids(i),
                          i_Person_Id   => i_Person_Id,
                          i_Attach_Type => Htt_Pref.c_Attach_Type_Auto);
    end loop;
  
    for r in (select *
                from Htt_Location_Persons q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Person_Id = i_Person_Id
                 and q.Attach_Type = Htt_Pref.c_Attach_Type_Auto
                 and q.Location_Id not member of v_Location_Ids)
    loop
      Location_Remove_Person(i_Company_Id  => r.Company_Id,
                             i_Filial_Id   => r.Filial_Id,
                             i_Location_Id => r.Location_Id,
                             i_Person_Id   => r.Person_Id);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Add_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number,
    i_Attach_Type varchar2
  ) is
    r_Location_Person Htt_Location_Persons%rowtype;
    v_Dt_Hikvision_Id number;
    v_Dt_Dahua_Id     number;
    v_Exists          boolean;
  begin
    v_Exists := z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                                  i_Filial_Id   => i_Filial_Id,
                                                  i_Location_Id => i_Location_Id,
                                                  i_Person_Id   => i_Person_Id,
                                                  o_Row         => r_Location_Person);
  
    if not v_Exists or i_Attach_Type = Htt_Pref.c_Attach_Type_Manual or
       r_Location_Person.Attach_Type = Htt_Pref.c_Attach_Type_Global and
       i_Attach_Type = Htt_Pref.c_Attach_Type_Auto then
      z_Htt_Location_Persons.Save_One(i_Company_Id  => i_Company_Id,
                                      i_Filial_Id   => i_Filial_Id,
                                      i_Location_Id => i_Location_Id,
                                      i_Person_Id   => i_Person_Id,
                                      i_Attach_Type => i_Attach_Type);
    
      if r_Location_Person.Company_Id is null then
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      end if;
    end if;
  
    if not v_Exists then
      v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
      v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
    
      for r in (select q.Device_Id
                  from Htt_Devices q
                 where q.Company_Id = i_Company_Id
                   and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                   and q.Location_Id = i_Location_Id
                   and q.State = 'A')
      loop
        Acms_Command_Add(i_Company_Id   => i_Company_Id,
                         i_Device_Id    => r.Device_Id,
                         i_Command_Kind => Htt_Pref.c_Command_Kind_Update_Person,
                         i_Person_Id    => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Remove_Person
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
    r_Location_Persons Htt_Location_Persons%rowtype;
    v_Exists           boolean;
    v_Global_Exist     boolean;
    v_Date             date := Trunc(sysdate);
  
    --------------------------------------------------           
    Function Exist_In_Global return boolean is
      v_Setting        varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                         i_Filial_Id  => i_Filial_Id);
      v_Location_State varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
      v_Person_State   varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    begin
      return v_Setting = 'Y' and v_Location_State = 'A' and Nvl(v_Person_State, 'P') = 'A';
    end;
  
    -------------------------------------------------- 
    Function Exists_Auto_Attach return boolean is
      v_Dummy varchar2(1);
    begin
      begin
        select 'x'
          into v_Dummy
          from Htt_Location_Divisions q
         where q.Company_Id = i_Company_Id
           and q.Filial_Id = i_Filial_Id
           and q.Location_Id = i_Location_Id
           and exists (select 1
                  from Href_Staffs w
                 where w.Company_Id = q.Company_Id
                   and w.Filial_Id = q.Filial_Id
                   and w.Employee_Id = i_Person_Id
                   and w.Division_Id = q.Division_Id
                   and w.State = 'A'
                   and w.Hiring_Date <= v_Date
                   and (w.Dismissal_Date is null or w.Dismissal_Date >= v_Date))
           and Rownum = 1;
      
        return true;
      exception
        when No_Data_Found then
          return false;
      end;
    end;
  begin
    v_Exists       := Exists_Auto_Attach;
    v_Global_Exist := Exist_In_Global;
  
    if z_Htt_Location_Persons.Exist_Lock(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => i_Location_Id,
                                         i_Person_Id   => i_Person_Id,
                                         o_Row         => r_Location_Persons) then
      if v_Exists then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Auto));
      elsif v_Global_Exist then
        z_Htt_Location_Persons.Update_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id,
                                          i_Attach_Type => Option_Varchar2(Htt_Pref.c_Attach_Type_Global));
      else
        z_Htt_Location_Persons.Delete_One(i_Company_Id  => i_Company_Id,
                                          i_Filial_Id   => i_Filial_Id,
                                          i_Location_Id => i_Location_Id,
                                          i_Person_Id   => i_Person_Id);
      
        Htt_Core.Make_Dirty_Person(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id);
      
        declare
          v_Dt_Hikvision_Id number;
          v_Dt_Dahua_Id     number;
          v_Dummy           varchar2(1);
          v_Date            date := Trunc(sysdate);
        begin
          select 'X'
            into v_Dummy
            from Mr_Natural_Persons q
           where q.Company_Id = i_Company_Id
             and q.Person_Id = i_Person_Id
             and q.State = 'A'
             and exists (select 1
                    from Htt_Persons Hp
                   where Hp.Company_Id = i_Company_Id
                     and Hp.Person_Id = i_Person_Id)
             and exists
           (select 1
                    from Href_Staffs s
                   where s.Company_Id = i_Company_Id
                     and s.Filial_Id in (select Lp.Filial_Id
                                           from Htt_Location_Persons Lp
                                          where Lp.Company_Id = i_Company_Id
                                            and Lp.Location_Id = i_Location_Id
                                            and Lp.Person_Id = i_Person_Id)
                     and s.Employee_Id = i_Person_Id
                     and s.State = 'A'
                     and s.Hiring_Date <= v_Date
                     and (s.Dismissal_Date is null or s.Dismissal_Date >= v_Date));
        exception
          when No_Data_Found then
            v_Dt_Hikvision_Id := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Hikvision);
            v_Dt_Dahua_Id     := Htt_Util.Device_Type_Id(Htt_Pref.c_Pcode_Device_Type_Dahua);
          
            for r in (select q.Device_Id
                        from Htt_Devices q
                       where q.Company_Id = i_Company_Id
                         and q.Device_Type_Id in (v_Dt_Hikvision_Id, v_Dt_Dahua_Id)
                         and q.Location_Id = i_Location_Id
                         and q.State = 'A')
            loop
              Acms_Command_Add(i_Company_Id   => i_Company_Id,
                               i_Device_Id    => r.Device_Id,
                               i_Command_Kind => Htt_Pref.c_Command_Kind_Remove_Person,
                               i_Person_Id    => i_Person_Id);
            end loop;
        end;
      end if;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Sync_Locations(i_Company_Id number) is
    v_Date        date := Trunc(sysdate);
    v_Filial_Head number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System number := Md_Pref.User_System(i_Company_Id);
  begin
    for r in (select q.Company_Id, q.Filial_Id
                from Md_Filials q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id <> v_Filial_Head
                 and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => r.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      for St in (select q.Company_Id, q.Filial_Id, q.Employee_Id
                   from Href_Staffs q
                  where q.Company_Id = r.Company_Id
                    and q.Filial_Id = r.Filial_Id
                    and q.State = 'A'
                    and q.Hiring_Date <= v_Date
                    and (q.Dismissal_Date is null or q.Dismissal_Date + 1 >= v_Date)
                  group by q.Company_Id, q.Filial_Id, q.Employee_Id)
      loop
        Person_Sync_Locations(i_Company_Id => St.Company_Id,
                              i_Filial_Id  => St.Filial_Id,
                              i_Person_Id  => St.Employee_Id);
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Global_Sync_Location_Persons
  (
    i_Company_Id number,
    i_Filial_Id  number
  ) is
    v_Location_Ids Array_Number;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
  begin
    if v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Global_Sync_All_Persons(i_Company_Id  => i_Company_Id,
                                         i_Filial_Id   => i_Filial_Id,
                                         i_Location_Id => v_Location_Ids(i));
      end loop;
    else
      for r in (select *
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Location_Global_Sync_All_Persons
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number
  ) is
    v_State        varchar2(1) := z_Htt_Locations.Load(i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Employee_Ids Array_Number;
  begin
    if not z_Htt_Location_Filials.Exist(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Location_Id => i_Location_Id) or v_State = 'P' or
       v_Setting = 'N' then
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    else
      select q.Employee_Id
        bulk collect
        into v_Employee_Ids
        from Mhr_Employees q
       where q.Company_Id = i_Company_Id
         and q.Filial_Id = i_Filial_Id
         and q.State = 'A';
    
      for i in 1 .. v_Employee_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => i_Location_Id,
                            i_Person_Id   => v_Employee_Ids(i),
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Person_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Location_Id = i_Location_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Person_Id not member of v_Employee_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => i_Location_Id,
                               i_Person_Id   => r.Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Person_Global_Sync_All_Location
  (
    i_Company_Id number,
    i_Filial_Id  number,
    i_Person_Id  number
  ) is
    v_State        varchar2(1) := z_Mhr_Employees.Take(i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id, i_Employee_Id => i_Person_Id).State;
    v_Setting      varchar2(1) := Htt_Util.Location_Sync_Global_Load(i_Company_Id => i_Company_Id,
                                                                     i_Filial_Id  => i_Filial_Id);
    v_Location_Ids Array_Number;
  begin
    if v_State = 'A' and v_Setting = 'Y' then
      select q.Location_Id
        bulk collect
        into v_Location_Ids
        from Htt_Locations q
       where q.Company_Id = i_Company_Id
         and q.State = 'A'
         and exists (select 1
                from Htt_Location_Filials Lf
               where Lf.Company_Id = i_Company_Id
                 and Lf.Filial_Id = i_Filial_Id
                 and Lf.Location_Id = q.Location_Id);
    
      for i in 1 .. v_Location_Ids.Count
      loop
        Location_Add_Person(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Location_Id => v_Location_Ids(i),
                            i_Person_Id   => i_Person_Id,
                            i_Attach_Type => Htt_Pref.c_Attach_Type_Global);
      end loop;
    
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global
                   and q.Location_Id not member of v_Location_Ids)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    else
      for r in (select q.Location_Id
                  from Htt_Location_Persons q
                 where q.Company_Id = i_Company_Id
                   and q.Filial_Id = i_Filial_Id
                   and q.Person_Id = i_Person_Id
                   and q.Attach_Type = Htt_Pref.c_Attach_Type_Global)
      loop
        Location_Remove_Person(i_Company_Id  => i_Company_Id,
                               i_Filial_Id   => i_Filial_Id,
                               i_Location_Id => r.Location_Id,
                               i_Person_Id   => i_Person_Id);
      end loop;
    end if;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Clear_Qr_Codes is
    v_Date date := Trunc(sysdate) - 1;
  begin
    delete from Htt_Location_Qr_Codes q
     where q.Created_On < v_Date;
  
    commit;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Request_Kind_Accrual_Evaluate
  (
    i_Company_Id      number,
    i_Filial_Id       number,
    i_Staff_Id        number,
    i_Request_Kind_Id number,
    i_Period          date
  ) is
    v_Period       date := Htt_Util.Year_Last_Day(Trunc(i_Period));
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    z_Htt_Request_Kind_Accruals.Delete_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
  
    -- check that employee binded to request_kind
    if not z_Htt_Staff_Request_Kinds.Exist(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id) then
      return;
    end if;
  
    r_Request_Kind := z_Htt_Request_Kinds.Load(i_Company_Id      => i_Company_Id,
                                               i_Request_Kind_Id => i_Request_Kind_Id);
  
    if r_Request_Kind.Annually_Limited = 'N' then
      return;
    end if;
  
    z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => i_Company_Id,
                                           i_Filial_Id       => i_Filial_Id,
                                           i_Staff_Id        => i_Staff_Id,
                                           i_Request_Kind_Id => i_Request_Kind_Id,
                                           i_Period          => v_Period,
                                           i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                           i_Accrued_Days    => r_Request_Kind.Annual_Day_Limit);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals(i_Company_Id number) is
    v_Curr_Date       date := Trunc(sysdate);
    v_Curr_Year_Begin date := Trunc(v_Curr_Date, 'yyyy');
    v_Curr_Year_End   date := Htt_Util.Year_Last_Day(v_Curr_Date);
    v_Prev_Year_End   date := v_Curr_Year_Begin - 1;
    v_Filial_Head     number := Md_Pref.Filial_Head(i_Company_Id);
    v_User_System     number := Md_Pref.User_System(i_Company_Id);
  
    r_Accrual        Htt_Request_Kind_Accruals%rowtype;
    v_Carryover_Days number;
    v_Period         date;
  begin
    for Fl in (select q.Company_Id, q.Filial_Id
                 from Md_Filials q
                where q.Company_Id = i_Company_Id
                  and q.Filial_Id <> v_Filial_Head
                  and q.State = 'A')
    loop
      Biruni_Route.Context_Begin;
    
      Ui_Context.Init(i_User_Id      => v_User_System,
                      i_Filial_Id    => Fl.Filial_Id,
                      i_Project_Code => Verifix_Settings.c_Pc_Verifix_Hr);
    
      for r in (select *
                  from Htt_Request_Kinds q
                 where q.Company_Id = i_Company_Id
                   and q.Annually_Limited = 'Y'
                   and q.State = 'A')
      loop
        for k in (select *
                    from Htt_Staff_Request_Kinds p
                   where p.Company_Id = i_Company_Id
                     and p.Filial_Id = Fl.Filial_Id
                     and p.Request_Kind_Id = r.Request_Kind_Id
                     and not exists
                   (select 1
                            from Htt_Request_Kind_Accruals Rk
                           where Rk.Company_Id = p.Company_Id
                             and Rk.Filial_Id = p.Filial_Id
                             and Rk.Staff_Id = p.Staff_Id
                             and Rk.Request_Kind_Id = p.Request_Kind_Id
                             and Rk.Period = v_Curr_Year_End
                             and Rk.Accrual_Kind = Htt_Pref.c_Accrual_Kind_Plan))
        loop
          Request_Kind_Accrual_Evaluate(i_Company_Id      => k.Company_Id,
                                        i_Filial_Id       => k.Filial_Id,
                                        i_Staff_Id        => k.Staff_Id,
                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                        i_Period          => v_Curr_Year_End);
        
          -- when carryover policy is zero
          -- nothing should be carried over
          continue when r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Zero;
        
          r_Accrual := z_Htt_Request_Kind_Accruals.Take(i_Company_Id      => k.Company_Id,
                                                        i_Filial_Id       => k.Filial_Id,
                                                        i_Staff_Id        => k.Staff_Id,
                                                        i_Request_Kind_Id => k.Request_Kind_Id,
                                                        i_Period          => v_Prev_Year_End,
                                                        i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan);
        
          -- when previous year accrual does not exist
          -- there is nothing to carryover
          continue when r_Accrual.Company_Id is null;
        
          v_Carryover_Days := r.Annual_Day_Limit -
                              Htt_Util.Get_Request_Kind_Used_Days(i_Company_Id      => k.Company_Id,
                                                                  i_Filial_Id       => k.Filial_Id,
                                                                  i_Staff_Id        => k.Staff_Id,
                                                                  i_Request_Kind_Id => k.Request_Kind_Id,
                                                                  i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Plan,
                                                                  i_Period          => v_Prev_Year_End);
        
          -- when prevous year limit is used up 
          -- there is nothing to carryover
          continue when v_Carryover_Days = 0;
        
          if r.Carryover_Policy = Htt_Pref.c_Carryover_Policy_Cap then
            v_Carryover_Days := Least(v_Carryover_Days, r.Carryover_Cap_Days);
          end if;
        
          -- add least on expiry date
          v_Period := Least(v_Curr_Year_Begin + r.Carryover_Expires_Days, v_Curr_Year_End);
        
          z_Htt_Request_Kind_Accruals.Insert_One(i_Company_Id      => k.Company_Id,
                                                 i_Filial_Id       => k.Filial_Id,
                                                 i_Staff_Id        => k.Staff_Id,
                                                 i_Request_Kind_Id => k.Request_Kind_Id,
                                                 i_Period          => v_Period,
                                                 i_Accrual_Kind    => Htt_Pref.c_Accrual_Kind_Carryover,
                                                 i_Accrued_Days    => v_Carryover_Days);
        end loop;
      end loop;
    
      Biruni_Route.Context_End;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Request_Kind_Accruals is
  begin
    for Cmp in (select q.Company_Id
                  from Md_Companies q
                 where q.State = 'A'
                   and (exists (select 1
                                  from Md_Company_Projects Cp
                                 where Cp.Company_Id = q.Company_Id
                                   and Cp.Project_Code = Verifix_Settings.c_Pc_Verifix_Hr) or
                        q.Company_Id = Md_Pref.c_Company_Head))
    loop
      begin
        Gen_Request_Kind_Accruals(Cmp.Company_Id);
      
        commit;
      exception
        when others then
          rollback;
      end;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Gen_Registry_Staffs
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Staff_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
    v_Format        varchar2(20) := 'yyyymmdd';
    v_Changed_Dates Fazo.Boolean_Code_Aat;
    v_Key           varchar2(20);
    v_Last_Date     date;
    v_Current_Date  date;
    v_Schedule_Id   number;
    --------------------------------------------------
    Procedure Put_Date(i_Date date) is
    begin
      v_Changed_Dates(to_char(i_Date, v_Format)) := true;
    end;
  
  begin
  
    Put_Date(i_Begin_Date);
    Put_Date(i_End_Date + 1);
  
    for r in (select q.Period
                from Hpd_Agreements q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Staff_Id = i_Staff_Id
                 and q.Trans_Type = Hpd_Pref.c_Transaction_Type_Schedule
                 and q.Period between i_Begin_Date and i_End_Date)
    loop
      Put_Date(r.Period);
    end loop;
  
    v_Key       := v_Changed_Dates.First;
    v_Last_Date := null;
    while v_Key is not null
    loop
      v_Current_Date := to_date(v_Key, v_Format);
    
      if v_Last_Date is not null then
        v_Schedule_Id := Hpd_Util.Get_Closest_Schedule_Id(i_Company_Id => i_Company_Id,
                                                          i_Filial_Id  => i_Filial_Id,
                                                          i_Staff_Id   => i_Staff_Id,
                                                          i_Period     => v_Last_Date);
      
        if v_Schedule_Id is null then
          delete Htt_Timesheets t
           where t.Company_Id = i_Company_Id
             and t.Filial_Id = i_Filial_Id
             and t.Staff_Id = i_Staff_Id
             and t.Timesheet_Date between v_Last_Date and v_Current_Date - 1;
        end if;
      
        if v_Schedule_Id = i_Schedule_Id then
          Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                        i_Filial_Id   => i_Filial_Id,
                                        i_Staff_Id    => i_Staff_Id,
                                        i_Schedule_Id => i_Schedule_Id,
                                        i_Begin_Date  => v_Last_Date,
                                        i_End_Date    => v_Current_Date - 1);
        end if;
      end if;
    
      v_Key       := v_Changed_Dates.Next(v_Key);
      v_Last_Date := v_Current_Date;
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  -- %param i_Schedule_Id number individual robot schedule_id
  Procedure Gen_Registry_Robots
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Schedule_Id number,
    i_Robot_Id    number,
    i_Begin_Date  date,
    i_End_Date    date
  ) is
  begin
    for r in (select p.Staff_Id,
                     Greatest(p.Begin_Date, i_Begin_Date) Begin_Date,
                     Least(p.End_Date, i_End_Date) End_Date
                from Hpd_Agreements_Cache p
               where p.Company_Id = i_Company_Id
                 and p.Filial_Id = i_Filial_Id
                 and p.Robot_Id = i_Robot_Id
                 and p.Begin_Date <= i_End_Date
                 and p.End_Date >= i_Begin_Date
                 and p.Schedule_Id = i_Schedule_Id)
    loop
      Gen_Timesheet_Plan_Individual(i_Company_Id  => i_Company_Id,
                                    i_Filial_Id   => i_Filial_Id,
                                    i_Staff_Id    => r.Staff_Id,
                                    i_Robot_Id    => i_Robot_Id,
                                    i_Schedule_Id => i_Schedule_Id,
                                    i_Begin_Date  => r.Begin_Date,
                                    i_End_Date    => r.End_Date);
    end loop;
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Gen_Individual_Dates
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Registry_Id number
  ) is
    r_Registry    Htt_Schedule_Registries%rowtype;
    v_Schedule_Id number;
  begin
    r_Registry := z_Htt_Schedule_Registries.Lock_Load(i_Company_Id  => i_Company_Id,
                                                      i_Filial_Id   => i_Filial_Id,
                                                      i_Registry_Id => i_Registry_Id);
  
    if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Staff_Schedule);
    elsif r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Robot then
      v_Schedule_Id := Htt_Util.Schedule_Id(i_Company_Id => i_Company_Id,
                                            i_Filial_Id  => i_Filial_Id,
                                            i_Pcode      => Htt_Pref.c_Pcode_Individual_Robot_Schedule);
    else
      b.Raise_Not_Implemented;
    end if;
  
    for r in (select *
                from Htt_Registry_Units q
               where q.Company_Id = i_Company_Id
                 and q.Filial_Id = i_Filial_Id
                 and q.Registry_Id = i_Registry_Id)
    loop
      if r_Registry.Registry_Kind = Htt_Pref.c_Registry_Kind_Staff then
        Gen_Registry_Staffs(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Staff_Id    => r.Staff_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      else
        Gen_Registry_Robots(i_Company_Id  => i_Company_Id,
                            i_Filial_Id   => i_Filial_Id,
                            i_Schedule_Id => v_Schedule_Id,
                            i_Robot_Id    => r.Robot_Id,
                            i_Begin_Date  => Trunc(r_Registry.Month, 'MON'),
                            i_End_Date    => Last_Day(Trunc(r_Registry.Month)));
      end if;
    end loop;
  end;

end Htt_Core;
/

create or replace package Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_083;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_087;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date);
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_097(i_Robot_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2);

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  );
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_113;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_114;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_115;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_116;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117;
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118;
  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_124(i_Day_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_125
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_126(i_Schedule_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_127
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_128
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_129(i_Part_No number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_130
  (
    i_Part_No         number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_131(i_Change_Date date);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_132(i_Change_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_133
  (
    i_Employee_Name        varchar2,
    i_Change_Month         date,
    i_Change_Monthly_Limit number,
    i_Change_Monthly_Count number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_134(i_Currenct_Track_Type varchar2);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_135(i_New_Track_Type varchar2);
end Htt_Error;
/
create or replace package body Htt_Error is
  ----------------------------------------------------------------------------------------------------
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null,
    i_P6      varchar2 := null
  ) return varchar2 is
  begin
    return b.Translate('HTT:' || i_Message, Array_Varchar2(i_P1, i_P2, i_P3, i_P4, i_P5, i_P6));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Htt_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Request_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Function t_Change_Title(i_Request_Status varchar2) return varchar2 is
  begin
    case i_Request_Status
      when Htt_Pref.c_Request_Status_New then
        return t('title:request_status:new');
      when Htt_Pref.c_Request_Status_Approved then
        return t('title:request_status:approved');
      when Htt_Pref.c_Request_Status_Completed then
        return t('title:request_status:completed');
      when Htt_Pref.c_Request_Status_Denied then
        return t('title:request_status:denied');
      else
        b.Raise_Not_Implemented;
    end case;
  
    return null;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('001:title:timesheet locked'),
          i_S1      => t('001:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('002:title:timesheet locked'),
          i_S1      => t('002:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('003:solution:reduce overtime by $1{overtime_exceed} and try again',
                              i_Overtime_Exceed_Text);
    end if;
  
    Error(i_Code    => '003',
          i_Message => t('003:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('003:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Time_Kind_Name varchar2
  ) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message:fact value for $1{time_kind_name} exceeded 24 hours on timesheet $2{timesheet_date} for $3{staff_name}',
                         i_Time_Kind_Name,
                         i_Timesheet_Date,
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Staff_Name           varchar2,
    i_Timesheet_Date       date,
    i_Schedule_Name        varchar2,
    i_Overtime_Exceed_Text varchar2
  ) is
    v_t_Extra_Solution varchar2(250 char);
  begin
    if i_Overtime_Exceed_Text is not null then
      v_t_Extra_Solution := t('005:solution:reduce overtime by $1{overtime_exceed} and try again');
    end if;
  
    Error(i_Code    => '005',
          i_Message => t('005:message:overtime for staff $1{staff_name} exceeded free time on day $2{timesheet_date}',
                         i_Staff_Name,
                         i_Timesheet_Date),
          i_S1      => t('005:solution:increase free time on $1{timesheet_date} by adding missing tracks',
                         i_Timesheet_Date),
          i_S2      => t('005:solution:increase free time on $1{timesheet_date} by changing plan hours in schedule $2{schedule_name}',
                         i_Timesheet_Date,
                         i_Schedule_Name),
          i_S3      => v_t_Extra_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message:request insertion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('006:title:timesheet locked'),
          i_S1      => t('006:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message:track deletion for staff $1{staff_name} on date $2{timesheet_date} is blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('007:title:timesheet locked'),
          i_S1      => t('007:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008 is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message:{inserting overtime days} company id must be unique in dirty timesheet'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009(i_Code varchar2) is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message:cannot find location with $1{location_code}', i_Code),
          i_Title   => t('009:title:no data found'),
          i_S1      => t('009:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_010(i_Name varchar2) is
  begin
    Error(i_Code    => '010',
          i_Message => t('010:message:cannot find location with $1{location_name}', i_Name),
          i_Title   => t('010:title:no data found'),
          i_S1      => t('010:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_011(i_Code varchar2) is
  begin
    Error(i_Code    => '011',
          i_Message => t('011:message:cannot find schedule with $1{schedule_code}', i_Code),
          i_Title   => t('011:title:no data found'),
          i_S1      => t('011:solution:check code for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_012(i_Name varchar2) is
  begin
    Error(i_Code    => '012',
          i_Message => t('012:message:cannot find schedule with $1{schedule_name}', i_Name),
          i_Title   => t('012:title:no data found'),
          i_S1      => t('012:solution:check name for correctness and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_013
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '013',
          i_Message => t('013:message:marks for schedule $1{schedule_name} intersect on day $2{schedule_date}',
                         i_Schedule_Name,
                         i_Schedule_Date),
          i_S1      => t('013:solution:resolve intersection on $1{schedule_date} and try again',
                         i_Schedule_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_014
  (
    i_Template_Name varchar2,
    i_Day_No        number
  ) is
  begin
    Error(i_Code    => '014',
          i_Message => t('014:message:marks for template $1{template_name} intersect on day $2{day_no}',
                         i_Template_Name,
                         i_Day_No),
          i_S1      => t('014:solution:resolve intersection on $1{day_no} and try again', i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_015
  (
    i_Staff_Name      varchar2,
    i_Timesheet_Date  date,
    i_Timebook_Number varchar2,
    i_Timebook_Month  date
  ) is
  begin
    Error(i_Code    => '015',
          i_Message => t('015:message:timesheet plan changes for staff $1{staff_name} on date $2{timesheet_date} are blocked by timebook on $3{timebook_month}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_Timebook_Month, 'month yyyy')),
          i_Title   => t('015:title:timesheet locked'),
          i_S1      => t('015:solution:unpost timebook $1{timebook_number} and try again',
                         i_Timebook_Number));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_016
  (
    i_Staff_Name        varchar2,
    i_Request_Kind_Name varchar2,
    i_Year              date,
    i_Used_Cnt          number,
    i_Request_Cnt       number,
    i_Annual_Limit      number
  ) is
    v_Exceed_Amount number := i_Used_Cnt + i_Request_Cnt - i_Annual_Limit;
  begin
    Error(i_Code    => '016',
          i_Message => t('016:message:staff $1{staff_name} request $2{request_kind_name} exceed annual limit $3{annual_limit} for year $4{exceed_year} by $5{exceed_amount}, used_amount:$6',
                         i_Staff_Name,
                         i_Request_Kind_Name,
                         i_Annual_Limit,
                         Extract(year from i_Year),
                         v_Exceed_Amount,
                         i_Used_Cnt),
          i_Title   => t('016:title:request annual limit exceeded'),
          i_S1      => t('016:solution:add annual limit for $1{request_kind_name}',
                         i_Request_Kind_Name),
          i_S2      => t('016:solution:decrease request days count by $1{exceed_amount}',
                         v_Exceed_Amount));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_017
  (
    i_Staff_Name      varchar2,
    i_Intersect_Id    number,
    i_Intersect_Begin date,
    i_Intersect_End   date,
    i_Request_Type    varchar2,
    i_Begin_Time      date,
    i_End_Time        date
  ) is
  
    --------------------------------------------------
    Function Request_Time
    (
      i_Request_Type varchar2,
      i_Begin_Time   date,
      i_End_Time     date
    ) return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)') || to_char(i_Begin_Time, ', hh24:mi-') || to_char(i_End_Time,
                                                                                                          'hh24:mi');
        when Htt_Pref.c_Request_Type_Full_Day then
          return to_char(i_Begin_Time, 'fmdd mon (dy)');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return to_char(i_Begin_Time, 'fmdd mon (dy) - ') || to_char(i_End_Time, 'fmdd mon (dy)');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
    --------------------------------------------------
    Function Give_Solution return varchar2 is
      v_Begin_Inside boolean := i_Begin_Time between i_Intersect_Begin and i_Intersect_End;
      v_End_Inside   boolean := i_End_Time between i_Intersect_Begin and i_Intersect_End;
    begin
      case
        when v_Begin_Inside and not v_End_Inside then
          return t('017:solution:move request begin time after $1{intersect_end}', i_Intersect_End);
        when not v_Begin_Inside and v_End_Inside then
          return t('017:solution:move request end time before $1{intersect_start}',
                   i_Intersect_Begin);
        else
          return t('017:solution:move request out of $1{intersect_start} and $2{intersect_end}',
                   i_Intersect_Begin,
                   i_Intersect_End);
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '017',
          i_Message => t('017:message:staff $1{staff_name} already has completed request during $2{request_time}',
                         i_Staff_Name,
                         Request_Time(i_Request_Type, i_Begin_Time, i_End_Time)),
          i_Title   => t('017:title:requests intersection'),
          i_S1      => t('017:solution:reset request with ID $1{request_id} and try again',
                         i_Intersect_Id),
          i_S2      => Give_Solution);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_018
  (
    i_Chosen_Year   number,
    i_Calendar_Date date
  ) is
  begin
    Error(i_Code    => '018',
          i_Message => t('018:message:chosen year ($1{chosen_year}) and calendar date year ($2{calendar_date}) are different',
                         i_Chosen_Year,
                         i_Calendar_Date),
          i_S1      => t('018:solution:change chosen year and try again'),
          i_S2      => t('018:solution:remove $1{calendar_date} from calendar and try again',
                         i_Calendar_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_019(i_Calendar_Date date) is
  begin
    Error(i_Code    => '019',
          i_Message => t('019:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('019:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_020(i_Calendar_Date date) is
  begin
    Error(i_Code    => '020',
          i_Message => t('020:message:date $1{calendar_date} was already used by another day',
                         i_Calendar_Date),
          i_S1      => t('020:solution:leave only one day with date $1{calendar_date}'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_021(i_Calendar_Id number) is
  begin
    Error(i_Code    => '021',
          i_Message => t('021:message:cannot delete system calendar $1{calendar_id}', i_Calendar_Id),
          i_S1      => t('021:solution:remove this calendar from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_022 is
  begin
    Error(i_Code    => '022',
          i_Message => t('022:message:cannot change shift when schedule is attached to any staff'),
          i_Title   => t('022:title:used schedule'),
          i_S1      => t('022:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_023 is
  begin
    Error(i_Code    => '023',
          i_Message => t('023:message:cannot change track acceptance borders when schedule is attached to any staff'),
          i_Title   => t('023:title:used schedule'),
          i_S1      => t('023:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_024 is
  begin
    Error(i_Code    => '024',
          i_Message => t('024:message:cannot change track duration when schedule is attached to any staff'),
          i_Title   => t('024:title:used schedule'),
          i_S1      => t('024:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_025 is
  begin
    Error(i_Code    => '025',
          i_Message => t('025:message:cannot change fact settings when schedule is attached to any staff'),
          i_Title   => t('025:title:used schedule'),
          i_S1      => t('025:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_026
  (
    i_Chosen_Year   number,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '026',
          i_Message => t('026:message:chosen year ($1{chosen_year}) and schedule date year ($2{schedule_date}) are different',
                         i_Chosen_Year,
                         i_Schedule_Date),
          i_S1      => t('026:solution:change chosen year and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_027(i_Day_No number) is
  begin
    Error(i_Code    => '027',
          i_Message => t('027:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('027:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_028
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '028',
          i_Message => t('028:message:pattern mark outside of worktime on day $1{day_no}', i_Day_No),
          i_S1      => t('028:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('028:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_029(i_Day_No number) is
  begin
    Error(i_Code    => '029',
          i_Message => t('029:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_030(i_Schedule_Date date) is
  begin
    Error(i_Code    => '030',
          i_Message => t('030:message:marks begin time and end time is same on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('030:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_031
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '031',
          i_Message => t('031:message:pattern mark outside of worktime on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('031:solution:set mark end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('031:solution:set mark begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_032(i_Day_No number) is
  begin
    Error(i_Code    => '032',
          i_Message => t('032:message:marks begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('032:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_033
  (
    i_Day_No     number,
    i_Shift_Text varchar2
  ) is
  begin
    Error(i_Code    => '033',
          i_Message => t('033:message:pattern mark outside of shift on day $1{day_no}', i_Day_No),
          i_S1      => t('033:solution:set mark end time before $1{shift_value}', i_Shift_Text),
          i_S2      => t('033:solution:set mark begin time after $1{shift_value}', i_Shift_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_034(i_Day_No number) is
  begin
    Error(i_Code    => '034',
          i_Message => t('034:message:found pattern mark available only on rest day on day $1{day_no}',
                         i_Day_No));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_035(i_Old_Parent_Name varchar2) is
  begin
    Error(i_Code    => '035',
          i_Message => t('035:message:cannot change time kind parent'),
          i_S1      => t('035:solution:restore old parent ($1{old_parent_name}) and try again',
                         i_Old_Parent_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_036 is
  begin
    Error(i_Code    => '036',
          i_Message => t('036:message:cannot set parent for system time kind'),
          i_S1      => t('036:solution:remove parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_037(i_Old_Plan_Load_Name varchar2) is
  begin
    Error(i_Code    => '037',
          i_Message => t('037:message:cannot change plan load of system time kind'),
          i_S1      => t('037:solution:restore old plan load ($1{old_plan_load}) and try again',
                         i_Old_Plan_Load_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_038 is
  begin
    Error(i_Code    => '038',
          i_Message => t('038:message:cannot change requestable type of system time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_039 is
  begin
    Error(i_Code    => '039',
          i_Message => t('039:message:cannot create non system time kind without parent'),
          i_S1      => t('039:solution:set parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_040 is
  begin
    Error(i_Code => '040', i_Message => t('040:message:cannot create non requestable time kind'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_041 is
  begin
    Error(i_Code    => '041',
          i_Message => t('041:message:cannot set non system parent'),
          i_S1      => t('041:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_042 is
  begin
    Error(i_Code    => '042',
          i_Message => t('042:message:cannot set second level parent'),
          i_S1      => t('042:solution:choose another parent and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_043(i_Parent_Plan_Load varchar2) is
  begin
    Error(i_Code    => '043',
          i_Message => t('043:message:time kind and its parent have different plan loads'),
          i_S1      => t('043:solution:set plan load to $1{parent_plan_load} and try again',
                         i_Parent_Plan_Load));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_044(i_Time_Kind_Id number) is
  begin
    Error(i_Code    => '044',
          i_Message => t('044:message:cannot delete system time kind $1{time_kind_id}',
                         i_Time_Kind_Id),
          i_S1      => t('044:solution:remove this time kind from deletion list and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_045
  (
    i_Main_Photo_Cnt number,
    i_Person_Name    varchar2
  ) is
  begin
    Error(i_Code    => '045',
          i_Message => t('045:message:found $1{main_photo_cnt} photos marked as main, only one photo can be main, person_name:$2',
                         i_Main_Photo_Cnt,
                         i_Person_Name),
          i_Title   => t('045:title:multiple main photos'),
          i_S1      => t('045:solution:unmark all photos and leave only one main photo'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_046
  (
    i_Old_Pcode varchar2,
    i_Model_Id  number
  ) is
  begin
    Error(i_Code    => '046',
          i_Message => t('046:message:cannot change terminal model pcode'),
          i_S1      => t('046:solution:restore old pcode ($1{old_pcode}) for terminal model with ID $2{model_id}',
                         i_Old_Pcode,
                         i_Model_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_047 is
  begin
    Error(i_Code    => '047',
          i_Message => t('047:message:terminal must have model selected'),
          i_Title   => t('047:title:null model value'),
          i_S1      => t('047:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_048 is
  begin
    Error(i_Code    => '048',
          i_Message => t('048:message:location cannot be null'),
          i_Title   => t('048:title:null location value'),
          i_S1      => t('048:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_050 is
  begin
    Error(i_Code    => '050',
          i_Message => t('050:message:timepad must have language selected'),
          i_Title   => t('050:title:null language value'),
          i_S1      => t('050:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_051 is
  begin
    Error(i_Code    => '051',
          i_Message => t('051:message:terminal must have model selected'),
          i_Title   => t('051:title:null model value'),
          i_S1      => t('051:solution:set device{terminal} model and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_052 is
  begin
    Error(i_Code    => '052',
          i_Message => t('052:message:location cannot be null'),
          i_Title   => t('052:title:null location value'),
          i_S1      => t('052:solution:set device location and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_054 is
  begin
    Error(i_Code    => '054',
          i_Message => t('054:message:timepad must have language selected'),
          i_Title   => t('054:title:null language value'),
          i_S1      => t('054:solution:set device{timepad} language and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_055(i_Track_Id number) is
  begin
    Error(i_Code    => '055',
          i_Message => t('055:message:track $1{track_id} is already valid', i_Track_Id),
          i_S1      => t('055:solution:remove track $1{track_id} from validation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_056(i_Track_Id number) is
  begin
    Error(i_Code    => '056',
          i_Message => t('056:message:track $1{track_id} is already invalid', i_Track_Id),
          i_S1      => t('056:solution:remove track $1{track_id} from invalidation list and try again',
                         i_Track_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_057(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '057',
          i_Message => t('057:message:cant change time kind for system defined request kind'),
          i_S1      => t('057:solution:restore old time kind ($1{time_kind_name}) and try again',
                         i_Time_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_058(i_Time_Kind_Name varchar2) is
  begin
    Error(i_Code    => '058',
          i_Message => t('058:message:time kind $1{time_kind_name} is not requestable, it cannot be used for request kind',
                         i_Time_Kind_Name),
          i_S1      => t('058:solution:choose requestable time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_059(i_Request_Kind_Name varchar2) is
  begin
    Error(i_Code    => '059',
          i_Message => t('059:message:cant delete system defined request kind'),
          i_S1      => t('059:solution:remove request kind $1{request_kind_name} from deletion list and try again',
                         i_Request_Kind_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_060
  (
    i_Request_Status   varchar2,
    i_Request_Kind_New varchar2
  ) is
  begin
    Error(i_Code    => '060',
          i_Message => t('060:message:to change/save request it shouldnt be approved, completed or denied {its status should be $1{request_status_new}}',
                         i_Request_Kind_New),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('060:solution:reset request and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_061(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '061',
          i_Message => t('061:message:request staff cannot be changed'),
          i_S1      => t('061:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_062(i_Allowed_Types Array_Varchar2) is
  begin
    Error(i_Code    => '062',
          i_Message => t('062:message:request type and time kind plan load dont match'),
          i_S1      => t('062:solution:change requets type to one of $1{request_types} and try again',
                         Fazo.Gather(i_Allowed_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_063
  (
    i_Request_Type      varchar2,
    i_Request_Type_Name varchar2
  ) is
  
    --------------------------------------------------
    Function Request_Time_Msg return varchar2 is
    begin
      case i_Request_Type
        when Htt_Pref.c_Request_Type_Part_Of_Day then
          return t('063:request_time_msg:only part of day');
        when Htt_Pref.c_Request_Type_Full_Day then
          return t('063:request_time_msg:only one full day');
        when Htt_Pref.c_Request_Type_Multiple_Days then
          return t('063:request_time_msg:at least two days');
        else
          b.Raise_Not_Implemented;
      end case;
    
      return null;
    end;
  
  begin
    Error(i_Code    => '063',
          i_Message => t('063:message:when request type is $1{request_type_name} request time should take $2{request_time_msg}',
                         i_Request_Type_Name,
                         Request_Time_Msg),
          i_Title   => t('063:title:request time is wrong'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_064
  (
    i_Restriction_Days number,
    i_Request_Begin    date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('064:restriction_reason:request should be created $1{restriction_days} days in advance of request begin date $2{request_begin_date}',
                 v_Restriction_Days,
                 Trunc(i_Request_Begin));
      end if;
    
      return t('064:restriction_reason:request cannot be created $1{restriction_days} days after requst begin date $2{request_begin_date}',
               v_Restriction_Days,
               Trunc(i_Request_Begin));
    end;
  
  begin
    Error(i_Code    => '064',
          i_Message => t('064:message:exceeded request restriction days, $1{restriction_reason}',
                         Restriction_Reason),
          i_Title   => t('064:title:request restriction days'),
          i_S1      => t('064:solution:move request begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_065
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '065',
          i_Message => t('065:message:to reset request it must be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('065:solution:remove request (ID $1{request_id}) from reset list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_066
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '066',
          i_Message => t('066:message:to approve request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('066:solution:remove request (ID $1{request_id}) from approval list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_067
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '067',
          i_Message => t('067:message:to complete request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('067:solution:remove request (ID $1{request_id}) from completion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_068
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '068',
          i_Message => t('068:message:to deny request it shouldnt be completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('068:solution:remove request (ID $1{request_id}) from denial list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_069
  (
    i_Request_Id       number,
    i_Request_Status   varchar2,
    i_Request_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '069',
          i_Message => t('069:message:to delete request it shouldnt be approved, completed or denied {its status should be $1{request_statuses}}',
                         Fazo.Gather(i_Request_Statuses, ', ')),
          i_Title   => t_Request_Title(i_Request_Status),
          i_S1      => t('069:solution:remove request (ID $1{request_id}) from deletion list and try again',
                         i_Request_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_070 is
  begin
    Error(i_Code    => '070',
          i_Message => t('070:message:change must have at least one change day'),
          i_Title   => t('070:title:no change days'),
          i_S1      => t('070:solution:add change days and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_071
  (
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '071',
          i_Message => t('071:message:to change/save plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('071:solution:reset plan change and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_072(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '072',
          i_Message => t('072:message:plan change staff cannot be changed'),
          i_S1      => t('072:solution:restore old staff ($1{staff_name}) and try again',
                         i_Staff_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_073 is
  begin
    Error(i_Code    => '073',
          i_Message => t('073:message:one date has not changed date'),
          i_S1      => t('073:title:add changed date for date which has not change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_074
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '074',
          i_Message => t('074:message:to delete plan change it shouldnt be completed, approved or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('074:solution:remove plan change (ID $1{change_id}) from deletion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_075
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '075',
          i_Message => t('075:message:to reset plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('075:solution:remove plan change (ID $1{change_id}) from reset list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_076
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '076',
          i_Message => t('076:message:to approve plan change it shouldnt be approved, completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('076:solution:remove plan change (ID $1{change_id}) from approval list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_077
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '077',
          i_Message => t('077:message:to complete plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('077:solution:remove plan change (ID $1{change_id}) from completion list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_078
  (
    i_Change_Id       number,
    i_Change_Status   varchar2,
    i_Change_Statuses Array_Varchar2
  ) is
  begin
    Error(i_Code    => '078',
          i_Message => t('078:message:to deny plan change it shouldnt be completed or denied {its status should be $1{change_statuses}}',
                         Fazo.Gather(i_Change_Statuses, ', ')),
          i_Title   => t_Change_Title(i_Change_Status),
          i_S1      => t('078:solution:remove plan change (ID $1{change_id}) from denial list and try again',
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_079 is
  begin
    Error(i_Code => '079', i_Message => t('079:message:pin autogenerate value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_080 is
  begin
    Error(i_Code => '080', i_Message => t('080:message:photo as face rec value must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_081 is
  begin
    Error(i_Code    => '081',
          i_Message => t('081:message:plan load cannot be extra'),
          i_S1      => t('081:solution:set another time kind and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_082
  (
    i_Location_Id   number,
    i_Location_Name varchar2,
    i_Created_On    date
  ) is
  begin
    Error(i_Code    => '082',
          i_Message => t('082:message:qr code already deactivated, location_id:$1, location_name:$2, created_on:$3',
                         i_Location_Id,
                         i_Location_Name,
                         to_char(i_Created_On, Href_Pref.c_Date_Format_Second)));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_083 is
  begin
    Error(i_Code => '083', i_Message => t('083:message:cannot change posted, unpost first'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_084 is
  begin
    Error(i_Code    => '084',
          i_Message => t('084:message:cannot change registry kind, registry kinds must be same'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_085
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Staff_Name    varchar2
  ) is
  begin
    Error(i_Code    => '085',
          i_Message => t('085:message:chosen month for staff ($1{staff_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Staff_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('085:solution:change chosen month and try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_086 is
  begin
    Error(i_Code    => '086',
          i_Message => t('086:message:cannot have robot unit in staff individual staff schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_087 is
  begin
    Error(i_Code    => '087',
          i_Message => t('087:message:cannot have staff unit in robot individual robot schedule'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_088 is
  begin
    Error(i_Code => '088', i_Message => t('088:message:cannot delete posted schedule registry'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_089
  (
    i_Staff_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '089',
          i_Message => t('089:message:Date ($1{i_date}) is missing in staff individual schedule for staff ($2{i_staff_name})',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_090
  (
    i_Robot_Name varchar2,
    i_Date       date
  ) is
  begin
    Error(i_Code    => '090',
          i_Message => t('090:message:Date ($1{i_date}) is missing in robot individual schedule for position: ($2{i_robot_name})',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_091
  (
    i_Date       date,
    i_Staff_Name varchar2
  ) is
  begin
    Error(i_Code    => '091',
          i_Message => t('091:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) intersect',
                         i_Date,
                         i_Staff_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_092
  (
    i_Date       date,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '092',
          i_Message => t('092:message:At the date of ($1{i_date}) marks of robot ($2{i_robot_name}) intersect',
                         i_Date,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_093 is
  begin
    Error(i_Code => '093', i_Message => t('093:message:cannot post posted documnent'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_094(i_Date date) is
  begin
    Error(i_Code    => '094',
          i_Message => t('094:message:At the date of ($1{i_date}) there are no robot marks and no staff marks',
                         i_Date));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_095
  (
    i_Date       date,
    i_Staff_Name varchar2,
    i_Robot_Name varchar2
  ) is
  begin
    Error(i_Code    => '095',
          i_Message => t('095:message:At the date of ($1{i_date}) marks of staff ($2{i_staff_name}) and of robot ($3{i_robot_name}) are present',
                         i_Date,
                         i_Staff_Name,
                         i_Robot_Name));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_096(i_Staff_Name varchar2) is
  begin
    Error(i_Code    => '096',
          i_Message => t('096:message:staff ($1{i_staff_name}) has at least two registries for individual schedule with intersecting dates.',
                         i_Staff_Name),
          i_S1      => t('096:Delete/unpost other registries then try again'));
  end;

  ---------------------------------------------------------------------------------------------------- 
  Procedure Raise_097(i_Robot_Name varchar2) is
  begin
    Error(i_Code    => '097',
          i_Message => t('097:message:robot ($1{i_robot_name}) has at least two registries for individual schedule with intersecting date.',
                         i_Robot_Name),
          i_S1      => t('097:Delete/unpost other registries then try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_099
  (
    i_Chosen_Month  date,
    i_Schedule_Date date,
    i_Robot_Name    varchar2
  ) is
  begin
    Error(i_Code    => '99',
          i_Message => t('099:message:chosen month for robot ($1{robot_name}) ($2{chosen_month}) and schedule date month ($3{schedule_date}) are different',
                         i_Robot_Name,
                         i_Chosen_Month,
                         i_Schedule_Date),
          i_S1      => t('099:solution:change chosen month and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_100
  (
    i_Staff_Name   varchar2,
    i_Intersect_Id number,
    i_Change_Date  date
  ) is
  begin
    Error(i_Code    => '100',
          i_Message => t('100:message:staff $1{staff_name} already has approved plan change on $2{change_date}',
                         i_Staff_Name,
                         i_Change_Date),
          i_Title   => t('100:title:plan change intersection'),
          i_S1      => t('100:solution:reset change with ID $1{change_id} and try again',
                         i_Intersect_Id),
          i_S2      => t('100:solution:choose another change date'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_101(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '101',
          i_Message => t('101:message:$1{schedule_name} is system schedule, system schedule cannot be edited',
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_102(i_Schedule_Name varchar2) is
  begin
    Error(i_Code    => '102',
          i_Message => t('102:message:$1{schedule_name} is system schedule, system schedule cannot be deleted',
                         i_Schedule_Name),
          i_S1      => t('102:solution:exclude $1{schedule_name} from delete list'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_103
  (
    i_Schedule_Name varchar2,
    i_Month         date
  ) is
  begin
    Error(i_Code    => '103',
          i_Message => t('103:message:found undefined days in schedule $1{schedule_name} on $2{undefined_month}',
                         i_Schedule_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('103:title:Undefined month'),
          i_S1      => t('103:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_104
  (
    i_Staff_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '104',
          i_Message => t('104:message:found undefined days in individual schedule for $1{staff_name} on $2{undefined_month}',
                         i_Staff_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('104:title:Undefined month'),
          i_S1      => t('104:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_105
  (
    i_Company_Id  number,
    i_Filial_Id   number,
    i_Location_Id number,
    i_Person_Id   number
  ) is
  begin
    Error(i_Code    => '105',
          i_Message => t('105:message:the person is not attached to the location where the device is installed, filial=$2, location=$1, person=$3',
                         
                         z_Md_Filials.Take        (i_Company_Id => i_Company_Id, i_Filial_Id => i_Filial_Id).Name,
                         z_Htt_Locations.Take     (i_Company_Id => i_Company_Id, i_Location_Id => i_Location_Id).Name,
                         z_Mr_Natural_Persons.Take(i_Company_Id => i_Company_Id, i_Person_Id => i_Person_Id).Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_106
  (
    i_Robot_Name varchar2,
    i_Month      date
  ) is
  begin
    Error(i_Code    => '106',
          i_Message => t('106:message:found undefined days in individual schedule for $1{robot_name} on $2{undefined_month}',
                         i_Robot_Name,
                         to_char(i_Month, 'Month YYYY')),
          i_Title   => t('106:title:Undefined month'),
          i_S1      => t('106:solution:define all days in $1{undefined_month}',
                         to_char(i_Month, 'Month YYYY')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_107
  (
    i_Staff_Name     varchar2,
    i_Timesheet_Date date,
    i_Begin_Time     date,
    i_End_Time       date
  ) is
  begin
    Error(i_Code    => '107',
          i_Message => t('107:message:employee $1{staff_name} has worktime intersection on $2{intersection_date}, end time for previous date $3{end_time} comes after begin time for current date $4{begin_time}',
                         i_Staff_Name,
                         i_Timesheet_Date,
                         to_char(i_End_Time, Href_Pref.c_Date_Format_Minute),
                         to_char(i_Begin_Time, Href_Pref.c_Date_Format_Minute)),
          i_Title   => t('107:title:work time intersection'),
          i_S1      => t('107:solution:move schedule change date after closest rest day, so worktime will not intersect'),
          i_S2      => t('107:solution:move begin time for $1{work_day_date} after $2{end_time} to remove intersection',
                         i_Timesheet_Date,
                         i_End_Time),
          i_S3      => t('107:solution:move end time for $1{work_day_date} before $2{begin_time} to remove intersection',
                         i_Timesheet_Date - 1,
                         i_Begin_Time));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_108 is
  begin
    Error(i_Code    => '108',
          i_Message => t('108:message:max length of work day cannot exceed $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600),
          i_Title   => t('108:title:worktime limit'),
          i_S1      => t('108:solution:reduce max length of work day {defined by track_duration} to be less than $1{max_length_limit} hours',
                         Htt_Pref.c_Max_Worktime_Length / 3600));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_109(i_Min_Length number) is
  begin
    Error(i_Code    => '109',
          i_Message => t('109:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('109:title:length of note is not enough'),
          i_S1      => t('109:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_110(i_Min_Length number) is
  begin
    Error(i_Code    => '110',
          i_Message => t('110:message:length of note is not enough, min length must be $1{min_length}',
                         i_Min_Length),
          i_Title   => t('110:title:length of note is not enough'),
          i_S1      => t('110:solution:enlarge note'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_111(i_Schedule_Kind varchar2) is
  begin
    Error(i_Code    => '111',
          i_Message => t('111:message:you do not have access $1{schedule_kind} kind of schedule',
                         i_Schedule_Kind));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_112
  (
    i_Restriction_Days number,
    i_Change_Day       date,
    i_Created_On       date
  ) is
    v_Restriction_Border date := Trunc(i_Created_On) + (i_Restriction_Days - 1);
  
    -------------------------------------------------- 
    Function Restriction_Reason return varchar2 is
      v_Restriction_Days number := Abs(i_Restriction_Days);
    begin
      if i_Restriction_Days > 0 then
        return t('112:message:restriction_reason:change should be created $1{restriction_days} days in advance of change day $2{change_day}',
                 v_Restriction_Days,
                 i_Change_Day);
      end if;
    
      return t('112:message:restriction_reason:change cannot be created $1{restriction_days} days after change day $2{change_day}',
               v_Restriction_Days,
               i_Change_Day);
    end;
  
  begin
    Error(i_Code    => '112',
          i_Message => Restriction_Reason,
          i_Title   => t('112:title:change restriction days'),
          i_S1      => t('112:solution:move change begin time after $1{restriction_border}',
                         v_Restriction_Border));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_113 is
  begin
    Error(i_Code    => '113',
          i_Message => t('113:message:cannot change allowed late time when schedule is attached to any staff'),
          i_Title   => t('113:title:used schedule'),
          i_S1      => t('113:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_114 is
  begin
    Error(i_Code    => '114',
          i_Message => t('114:message:cannot change allowed early time when schedule is attached to any staff'),
          i_Title   => t('114:title:used schedule'),
          i_S1      => t('114:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_115 is
  begin
    Error(i_Code    => '115',
          i_Message => t('115:message:cannot change begin late time when schedule is attached to any staff'),
          i_Title   => t('115:title:used schedule'),
          i_S1      => t('115:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_116 is
  begin
    Error(i_Code    => '116',
          i_Message => t('116:message:cannot change end early time when schedule is attached to any staff'),
          i_Title   => t('116:title:used schedule'),
          i_S1      => t('116:solution:remove schedule from all staffs and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_117 is
  begin
    Error(i_Code    => '117',
          i_Message => t('117:message:cannot use advansed setting for $1{schedule_kind_name} schedule',
                         Htt_Util.t_Schedule_Kind(Htt_Pref.c_Schedule_Kind_Hourly)),
          i_Title   => t('117:title:used schedule'),
          i_S1      => t('117:solution:turn of advansed setting and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_118 is
  begin
    Error(i_Code    => '118',
          i_Message => t('118:message:location sync person global must be in (Y, N)'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_119
  (
    i_Change_Date   date,
    i_Swapped_Date  date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '119',
          i_Message => t('119:message:if there is a monthly limit in the staff calendar, swapped days should be in one month.
                                        you cannot swap $1{change_date} with $2{swapped_day} as there is a monthly limit on staff calendar',
                         i_Change_Date,
                         i_Swapped_Date),
          i_Title   => t('119:title:swapped dates are in different months'),
          i_S1      => t('119:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('119:solution:make the same month of swapped dates'),
          i_S3      => t('119:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_120
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '120',
          i_Message => t('120:message:plan time for $1{change_date} has exceeded the daily limit of calendar',
                         i_Change_Date),
          i_Title   => t('120:title:daily plan exceeded'),
          i_S1      => t('120:solution:turn off daily limit from $1{calendar_name}', i_Calendar_Name),
          i_S2      => t('120:solution:reduce plan time'),
          i_S3      => t('120:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_121
  (
    i_Change_Date   date,
    i_Calendar_Name varchar2,
    i_Schedule_Name varchar2
  ) is
  begin
    Error(i_Code    => '121',
          i_Message => t('121:message:because of monthly limit of calendar is on you cannot change day kind of $1{change_date}',
                         i_Change_Date),
          i_Title   => t('121:title:day kind changed'),
          i_S1      => t('121:solution:turn off monthly limit from $1{calendar_name}',
                         i_Calendar_Name),
          i_S2      => t('121:solution:do not change the day kind'),
          i_S3      => t('121:solution:remove $1{calendar_name} from $2{schedule_name}',
                         i_Calendar_Name,
                         i_Schedule_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_122
  (
    i_Schedule_Date date,
    i_Plan_Time     number,
    i_Limit_Time    number,
    i_Robot_Name    varchar2 := null,
    i_Staff_Name    varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('122:message:in $1{robot_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    elsif i_Staff_Name is not null then
      v_Message := t('122:message:in $1{staff_name) schedule plan time has exceeded the limit of the calendar for $2{schedule_date}, plan_time = $3{plan_time}, limit_time = $4{limit_time}',
                     i_Robot_Name,
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    else
      v_Message := t('122:message:for $1{schedule_date}, plan time has exceeded the limit of the calendar, plan_time = $2{plan_time}, limit_time = $3{limit_time}',
                     i_Schedule_Date,
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Plan_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false),
                     Htt_Util.To_Time_Seconds_Text(i_Seconds      => i_Limit_Time * 60,
                                                   i_Show_Minutes => true,
                                                   i_Show_Words   => false));
    end if;
  
    Error(i_Code    => '122',
          i_Message => v_Message,
          i_Title   => t('122:title:daily plan time exceeded from calendar plan time'),
          i_S1      => t('122:solution:turn of daily limit from calendar'),
          i_S2      => t('122:solution:reduse daily plan time'),
          i_S3      => t('122:solution:remove calendar'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_123
  (
    i_Month      varchar2,
    i_Plan_Days  number,
    i_Limit_Days number,
    i_Robot_Name varchar2 := null,
    i_Staff_Name varchar2 := null
  ) is
    v_Message varchar2(600);
  begin
    if i_Robot_Name is not null then
      v_Message := t('123:message:in $1{robot_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Robot_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    elsif i_Staff_Name is not null then
      v_Message := t('123:message:in $1{staff_name} schedule, plan days count must be the same with plan day limit in calendar for $2{month}, plan days = $3{plan_day}, limit day = $4{limit_day}',
                     i_Staff_Name,
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    else
      v_Message := t('123:message:plan days count must be the same with plan day limit in calendar for $1{month}, plan days = $2{plan_day}, limit day = $3{limit_day}',
                     i_Month,
                     i_Plan_Days,
                     i_Limit_Days);
    end if;
  
    Error(i_Code    => '123',
          i_Message => v_Message,
          i_Title   => t('123:title:monthly working day count is not the same with calendar day limit'),
          i_S1      => t('123:solution:turn of monthly limit from calendar'),
          i_S2      => t('123:solution:make the same working day count with working day limit of calendar'),
          i_S3      => t('123:solution:remove calendar'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_124(i_Day_No number) is
  begin
    Error(i_Code    => '124',
          i_Message => t('124:message:pattern weighted time part begin time and end time is same on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('124:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_125
  (
    i_Day_No          number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '125',
          i_Message => t('125:message:pattern weighted time part outside of worktime on day $1{day_no}',
                         i_Day_No),
          i_S1      => t('125:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('125:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_126(i_Schedule_Date date) is
  begin
    Error(i_Code    => '126',
          i_Message => t('126:message:weighted time part begin time and end time is same on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('126:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_127
  (
    i_Schedule_Date   date,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '127',
          i_Message => t('127:message:weighted time part outside of worktime on day $1{schedule_date}',
                         i_Schedule_Date),
          i_S1      => t('127:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('127:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_128
  (
    i_Schedule_Name varchar2,
    i_Schedule_Date date
  ) is
  begin
    Error(i_Code    => '128',
          i_Message => t('128:message:weighted time part for schedule $1{schedule_name} intersect on day $2{schedule_date}',
                         i_Schedule_Name,
                         i_Schedule_Date),
          i_S1      => t('128:solution:resolve intersection on $1{schedule_date} and try again',
                         i_Schedule_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_129(i_Part_No number) is
  begin
    Error(i_Code    => '129',
          i_Message => t('129:message:change day weighted time part begin time and end time is same on part $1{part_no}',
                         i_Part_No),
          i_S1      => t('129:solution:fix begin and end time and try again'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_130
  (
    i_Part_No         number,
    i_Begin_Time_Text varchar2,
    i_End_Time_Text   varchar2
  ) is
  begin
    Error(i_Code    => '130',
          i_Message => t('130:message:change day weighted time part outside of worktime on part $1{part_no}',
                         i_Part_No),
          i_S1      => t('130:solution:set weighted time part end time before work end time $1{end_time_value}',
                         i_End_Time_Text),
          i_S2      => t('130:solution:set weighted time part begin time after work begin time $1{begin_time_value}',
                         i_Begin_Time_Text));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_131(i_Change_Date date) is
  begin
    Error(i_Code    => '131',
          i_Message => t('131:message:weighted time part intersect on day $1{change_date}',
                         i_Change_Date),
          i_S1      => t('131:solution:resolve intersection on $1{change_date} and try again',
                         i_Change_Date));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_132(i_Change_Id number) is
  begin
    Error(i_Code    => '132',
          i_Message => t('132:message:you cannot change weighted part if change status is $1{status_name}. change_id = $2{change_id}',
                         Htt_Util.t_Change_Status(Htt_Pref.c_Change_Status_Completed),
                         i_Change_Id));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_133
  (
    i_Employee_Name        varchar2,
    i_Change_Month         date,
    i_Change_Monthly_Limit number,
    i_Change_Monthly_Count number
  ) is
  begin
    Error(i_Code    => '133',
          i_Message => t('133:message:the employee $1{employee_name} has exceeded the maximum allowed schedule changes limit by $2{exceeded_count}, allowed $3{monthly_limit}, for $4{month_year}',
                         i_Employee_Name,
                         i_Change_Monthly_Count - i_Change_Monthly_Limit,
                         i_Change_Monthly_Limit,
                         to_char(i_Change_Month, 'Month yyyy')),
          i_S1      => t('133:solution:try to exceed the maximum allowed limit from settings'),
          i_S2      => t('133:solution:try to cancel one of the change requests'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_134(i_Currenct_Track_Type varchar2) is
  begin
    Error(i_Code    => '134',
          i_Message => t('134:message:you can change track type only if currenct track type input, output or check, currenct track type: $1(current_track_type)',
                         i_Currenct_Track_Type));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_135(i_New_Track_Type varchar2) is
  begin
    Error(i_Code    => '135',
          i_Message => t('135:message:you can change track type to only input, output or check, new track type: $1(new_track_type)',
                         i_New_Track_Type));
  end;

end Htt_Error;
/

create or replace package Htt_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure On_Filial_Add(i_Filial Md_Global.Filial_Rt);
end Htt_Watcher;
/
create or replace package body Htt_Watcher is
  ----------------------------------------------------------------------------------------------------
  Procedure On_Company_Add(i_Company_Id number) is
    v_Company_Head number := Md_Pref.c_Company_Head;
    v_Pc_Like      varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query        varchar2(4000);
    r_Time_Kind    Htt_Time_Kinds%rowtype;
    r_Parent       Htt_Time_Kinds%rowtype;
    r_Request_Kind Htt_Request_Kinds%rowtype;
  begin
    -- add pin lock
    z_Htt_Pin_Locks.Insert_One(i_Company_Id);
  
    -- add default time kinds
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Htt_Time_Kinds,
                                                i_Lang_Code => z_Md_Companies.Load(i_Company_Id).Lang_Code);
  
    for r in (select *
                from Htt_Time_Kinds t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pc_Like
               order by t.Time_Kind_Id)
    loop
      r_Time_Kind              := r;
      r_Time_Kind.Company_Id   := i_Company_Id;
      r_Time_Kind.Time_Kind_Id := Htt_Next.Time_Kind_Id;
    
      if r_Time_Kind.Parent_Id is not null then
        r_Parent              := z_Htt_Time_Kinds.Load(i_Company_Id   => r.Company_Id,
                                                       i_Time_Kind_Id => r.Parent_Id);
        r_Time_Kind.Parent_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                       i_Pcode      => r_Parent.Pcode);
      end if;
    
      execute immediate v_Query
        using in r_Time_Kind, out r_Time_Kind;
    
      z_Htt_Time_Kinds.Save_Row(r_Time_Kind);
    end loop;
  
    -- add default request kinds
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Htt_Request_Kinds,
                                                i_Lang_Code => z_Md_Companies.Load(i_Company_Id).Lang_Code);
  
    for r in (select t.*
                from Htt_Request_Kinds t
               where t.Company_Id = v_Company_Head
                 and t.Pcode like v_Pc_Like)
    loop
      r_Request_Kind                 := r;
      r_Request_Kind.Company_Id      := i_Company_Id;
      r_Request_Kind.Request_Kind_Id := Htt_Next.Request_Kind_Id;
    
      r_Time_Kind := z_Htt_Time_Kinds.Load(i_Company_Id   => r.Company_Id,
                                           i_Time_Kind_Id => r.Time_Kind_Id);
    
      r_Request_Kind.Time_Kind_Id := Htt_Util.Time_Kind_Id(i_Company_Id => i_Company_Id,
                                                           i_Pcode      => r_Time_Kind.Pcode);
    
      execute immediate v_Query
        using in r_Request_Kind, out r_Request_Kind;
    
      z_Htt_Request_Kinds.Save_Row(r_Request_Kind);
    end loop;
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure On_Filial_Add(i_Filial Md_Global.Filial_Rt) is
    v_Company_Head number := Md_Pref.c_Company_Head;
    v_Pc_Like      varchar2(10) := Upper(Verifix_Settings.c_Pc_Verifix_Hr) || '%';
    v_Query        varchar2(4000);
    v_Lang_Code    Md_Companies.Lang_Code%type := z_Md_Companies.Load(i_Filial.Company_Id).Lang_Code;
    r_Calendar     Htt_Calendars%rowtype;
    r_Schedule     Htt_Schedules%rowtype;
  begin
    -- calendar
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Htt_Calendars,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Htt_Calendars c
               where c.Company_Id = v_Company_Head
                 and c.Filial_Id = Md_Pref.Filial_Head(v_Company_Head)
                 and c.Pcode like v_Pc_Like)
    loop
      r_Calendar             := r;
      r_Calendar.Company_Id  := i_Filial.Company_Id;
      r_Calendar.Filial_Id   := i_Filial.Filial_Id;
      r_Calendar.Calendar_Id := Htt_Next.Calendar_Id;
    
      execute immediate v_Query
        using in r_Calendar, out r_Calendar;
    
      z_Htt_Calendars.Save_Row(r_Calendar);
    end loop;
  
    -- schedule
    v_Query := Md_Util.Translate_Rows_Statement(i_Table     => Zt.Htt_Schedules,
                                                i_Lang_Code => v_Lang_Code);
  
    for r in (select *
                from Htt_Schedules c
               where c.Company_Id = v_Company_Head
                 and c.Filial_Id = Md_Pref.Filial_Head(v_Company_Head)
                 and c.Pcode like v_Pc_Like)
    loop
      r_Schedule             := r;
      r_Schedule.Company_Id  := i_Filial.Company_Id;
      r_Schedule.Filial_Id   := i_Filial.Filial_Id;
      r_Schedule.Schedule_Id := Htt_Next.Schedule_Id;
    
      execute immediate v_Query
        using in r_Schedule, out r_Schedule;
    
      z_Htt_Schedules.Save_Row(r_Schedule);
    end loop;
  end;

end Htt_Watcher;
/

create or replace package Hzk_Error is
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Device_Id   number,
    i_Device_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Device_Id   number,
    i_Device_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Person_Id   number,
    i_Person_Name varchar2,
    i_Finger_No   number
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Error_Id number);
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Error_Id   number,
    i_Mark_Type  varchar2,
    i_Mark_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Error_Id      number,
    i_Person_Id     number,
    i_Person_Name   varchar2,
    i_Location_Id   number,
    i_Location_Name varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Operlog_Type  varchar2,
    i_Operlog_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Mark_Type  varchar2,
    i_Mark_Types Array_Varchar2
  );
  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009;
end Hzk_Error;
/
create or replace package body Hzk_Error is
  ----------------------------------------------------------------------------------------------------  
  Function t
  (
    i_Message varchar2,
    i_P1      varchar2 := null,
    i_P2      varchar2 := null,
    i_P3      varchar2 := null,
    i_P4      varchar2 := null,
    i_P5      varchar2 := null
  ) return varchar2 is
  begin
  
    return b.Translate('HZK:' || i_Message, i_P1, i_P2, i_P3, i_P4, i_P5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Error
  (
    i_Code    varchar2,
    i_Message varchar2,
    i_Title   varchar2 := null,
    i_S1      varchar2 := null,
    i_S2      varchar2 := null,
    i_S3      varchar2 := null,
    i_S4      varchar2 := null,
    i_S5      varchar2 := null
  ) is
  begin
    b.Raise_Extended(i_Code    => Verifix_Settings.c_Hzk_Error_Code || i_Code,
                     i_Message => i_Message,
                     i_Title   => i_Title,
                     i_S1      => i_S1,
                     i_S2      => i_S2,
                     i_S3      => i_S3,
                     i_S4      => i_S4,
                     i_S5      => i_S5);
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_001
  (
    i_Device_Id   number,
    i_Device_Name varchar2
  ) is
  begin
    Error(i_Code    => '001',
          i_Message => t('001:message: for $1{device_name} model must be selected, device_id: $2',
                         i_Device_Name,
                         i_Device_Id),
          i_Title   => t('001:title: model must be selected'),
          i_S1      => t('001:solution: select model'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_002
  (
    i_Device_Id   number,
    i_Device_Name varchar2
  ) is
  begin
    Error(i_Code    => '002',
          i_Message => t('002:message: for $1{device_name} location must be selected, device_id: $2',
                         i_Device_Name,
                         i_Device_Id),
          i_Title   => t('002:title: location must be selected'),
          i_S1      => t('002:solution: select location'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_003
  (
    i_Person_Id   number,
    i_Person_Name varchar2,
    i_Finger_No   number
  ) is
  begin
    Error(i_Code    => '003',
          i_Message => t('003:message: finger number must be between 0 and 9, person_name: $1, person_id: $2, finger_no: $3',
                         i_Person_Name,
                         i_Person_Id,
                         i_Finger_No),
          i_S1      => t('003:solution: change finger number to any number between 0 and 9'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_004(i_Error_Id number) is
  begin
    Error(i_Code    => '004',
          i_Message => t('004:message: the status of the eval attlog must be $1{status_name}, error_id: $2',
                         Hzk_Util.t_Attlog_Error_Status(Hzk_Pref.c_Attlog_Error_Status_New),
                         i_Error_Id),
          i_Title   => t('004:title: The attlog is already evaluated'),
          i_S1      => t('004:solution: do not eval attlog that already evaluated'));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_005
  (
    i_Error_Id   number,
    i_Mark_Type  varchar2,
    i_Mark_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '005',
          i_Message => t('005:message: mark_type is wrong, error_id: $1, mark_type: $2',
                         i_Error_Id,
                         i_Mark_Type),
          i_Title   => t('005:title: mark_type is not found'),
          i_S1      => t('005:solution: 4th item must be one of $1{mark_types}',
                         Fazo.Gather(i_Mark_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_006
  (
    i_Error_Id      number,
    i_Person_Id     number,
    i_Person_Name   varchar2,
    i_Location_Id   number,
    i_Location_Name varchar2
  ) is
  begin
    Error(i_Code    => '006',
          i_Message => t('006:message: $1{person_name} is not attached to $2{location_name}, person_id: $3, location_id: $4, error_id: $5',
                         i_Person_Name,
                         i_Location_Name,
                         i_Person_Id,
                         i_Location_Id,
                         i_Error_Id),
          i_Title   => t('006:title: person is not attached to the location'),
          i_S1      => t('006:solution: attach $1{person_name} to $2{location_name} in any filial',
                         i_Person_Name,
                         i_Location_Name));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_007
  (
    i_Operlog_Type  varchar2,
    i_Operlog_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '007',
          i_Message => t('007:message: operlog type is wrong, operlog_type: $1', i_Operlog_Type),
          i_Title   => t('007:title: operlog type is not found'),
          i_S1      => t('007:solution: operlog type(2nd item in a row) must be one of $1{operlog_types}',
                         Fazo.Gather(i_Operlog_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_008
  (
    i_Mark_Type  varchar2,
    i_Mark_Types Array_Varchar2
  ) is
  begin
    Error(i_Code    => '008',
          i_Message => t('008:message: mark_type is wrong, mark_type: $1', i_Mark_Type),
          i_Title   => t('008:title: mark_type is not found'),
          i_S1      => t('008:solution: 4th item must be one of $1{mark_types}',
                         Fazo.Gather(i_Mark_Types, ', ')));
  end;

  ----------------------------------------------------------------------------------------------------
  Procedure Raise_009 is
  begin
    Error(i_Code    => '009',
          i_Message => t('009:message: SN(serial number) not found'),
          i_S1      => t('009:solution: give serial number to SN'));
  end;

end Hzk_Error;
/

create or replace package Verifix_Settings is
  ----------------------------------------------------------------------------------------------------
  -- Project Code
  ----------------------------------------------------------------------------------------------------
  c_Pc_Verifix_Hr constant varchar2(10) := 'vhr';
  ----------------------------------------------------------------------------------------------------
  -- Project Version
  ----------------------------------------------------------------------------------------------------
  c_Pv_Verifix_Hr constant varchar2(10) := '3.0.0';
  ----------------------------------------------------------------------------------------------------
  -- Module error codes
  ----------------------------------------------------------------------------------------------------
  c_Href_Error_Code  constant varchar2(10) := 'A05-01';
  c_Hes_Error_Code   constant varchar2(10) := 'A05-02';
  c_Hlic_Error_Code  constant varchar2(10) := 'A05-03';
  c_Htt_Error_Code   constant varchar2(10) := 'A05-04';
  c_Hzk_Error_Code   constant varchar2(10) := 'A05-05';
  c_Hrm_Error_Code   constant varchar2(10) := 'A05-06';
  c_Hpd_Error_Code   constant varchar2(10) := 'A05-07';
  c_Hln_Error_Code   constant varchar2(10) := 'A05-08';
  c_Hper_Error_Code  constant varchar2(10) := 'A05-09';
  c_Hpr_Error_Code   constant varchar2(10) := 'A05-10';
  c_Hac_Error_Code   constant varchar2(10) := 'A05-11';
  c_Htm_Error_Code   constant varchar2(10) := 'A05-12';
  c_Hrec_Error_Code  constant varchar2(10) := 'A05-13';
  c_Hsc_Error_Code   constant varchar2(10) := 'A05-14';
  c_Hface_Error_Code constant varchar2(10) := 'A05-15';
  c_Hide_Error_Code  constant varchar2(10) := 'A05-16';
  c_Uit_Error_Code   constant varchar2(10) := 'A05-99';
end Verifix_Settings;
/
create or replace package body Verifix_Settings is
end Verifix_Settings;
/

